
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800d2b8  0800d2b8  0001d2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d580  0800d580  0001d580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d584  0800d584  0001d584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000488  24000000  0800d588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000510  24000488  0800da10  00020488  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000998  0800da10  00020998  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002e339  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003f39  00000000  00000000  0004e7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001c30  00000000  00000000  00052728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001ad0  00000000  00000000  00054358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035a60  00000000  00000000  00055e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001dc4d  00000000  00000000  0008b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015493d  00000000  00000000  000a94d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001fde12  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000078d4  00000000  00000000  001fdee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000488 	.word	0x24000488
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d2a0 	.word	0x0800d2a0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400048c 	.word	0x2400048c
 800030c:	0800d2a0 	.word	0x0800d2a0

08000310 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 800031a:	2303      	movs	r3, #3
 800031c:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f103 0018 	add.w	r0, r3, #24
 8000324:	f107 020a 	add.w	r2, r7, #10
 8000328:	2302      	movs	r3, #2
 800032a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800032e:	f001 f9b5 	bl	800169c <wm8994_write_reg>
 8000332:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8000334:	2300      	movs	r3, #0
 8000336:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f103 0018 	add.w	r0, r3, #24
 800033e:	f107 020a 	add.w	r2, r7, #10
 8000342:	2302      	movs	r3, #2
 8000344:	f640 0117 	movw	r1, #2071	; 0x817
 8000348:	f001 f9a8 	bl	800169c <wm8994_write_reg>
 800034c:	4602      	mov	r2, r0
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4413      	add	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f103 0018 	add.w	r0, r3, #24
 800035a:	f107 020a 	add.w	r2, r7, #10
 800035e:	2302      	movs	r3, #2
 8000360:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000364:	f001 f99a 	bl	800169c <wm8994_write_reg>
 8000368:	4602      	mov	r2, r0
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	4413      	add	r3, r2
 800036e:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8000370:	236c      	movs	r3, #108	; 0x6c
 8000372:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f103 0018 	add.w	r0, r3, #24
 800037a:	f107 020a 	add.w	r2, r7, #10
 800037e:	2302      	movs	r3, #2
 8000380:	2139      	movs	r1, #57	; 0x39
 8000382:	f001 f98b 	bl	800169c <wm8994_write_reg>
 8000386:	4602      	mov	r2, r0
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4413      	add	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00f      	beq.n	80003b6 <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 8000396:	2313      	movs	r3, #19
 8000398:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f103 0018 	add.w	r0, r3, #24
 80003a0:	f107 020a 	add.w	r2, r7, #10
 80003a4:	2302      	movs	r3, #2
 80003a6:	2101      	movs	r1, #1
 80003a8:	f001 f978 	bl	800169c <wm8994_write_reg>
 80003ac:	4602      	mov	r2, r0
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4413      	add	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e00e      	b.n	80003d4 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 80003b6:	2303      	movs	r3, #3
 80003b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f103 0018 	add.w	r0, r3, #24
 80003c0:	f107 020a 	add.w	r2, r7, #10
 80003c4:	2302      	movs	r3, #2
 80003c6:	2101      	movs	r1, #1
 80003c8:	f001 f968 	bl	800169c <wm8994_write_reg>
 80003cc:	4602      	mov	r2, r0
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80003d4:	2132      	movs	r1, #50	; 0x32
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f001 f8e8 	bl	80015ac <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	f200 8141 	bhi.w	8000668 <WM8994_Init+0x358>
 80003e6:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <WM8994_Init+0xdc>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	08000703 	.word	0x08000703
 80003f0:	080003fd 	.word	0x080003fd
 80003f4:	08000497 	.word	0x08000497
 80003f8:	08000531 	.word	0x08000531
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 80003fc:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000400:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f103 0018 	add.w	r0, r3, #24
 8000408:	f107 020a 	add.w	r2, r7, #10
 800040c:	2302      	movs	r3, #2
 800040e:	2105      	movs	r1, #5
 8000410:	f001 f944 	bl	800169c <wm8994_write_reg>
 8000414:	4602      	mov	r2, r0
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	4413      	add	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 800041c:	2300      	movs	r3, #0
 800041e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f103 0018 	add.w	r0, r3, #24
 8000426:	f107 020a 	add.w	r2, r7, #10
 800042a:	2302      	movs	r3, #2
 800042c:	f240 6101 	movw	r1, #1537	; 0x601
 8000430:	f001 f934 	bl	800169c <wm8994_write_reg>
 8000434:	4602      	mov	r2, r0
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	4413      	add	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f103 0018 	add.w	r0, r3, #24
 8000442:	f107 020a 	add.w	r2, r7, #10
 8000446:	2302      	movs	r3, #2
 8000448:	f240 6102 	movw	r1, #1538	; 0x602
 800044c:	f001 f926 	bl	800169c <wm8994_write_reg>
 8000450:	4602      	mov	r2, r0
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	4413      	add	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 8000458:	2302      	movs	r3, #2
 800045a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f103 0018 	add.w	r0, r3, #24
 8000462:	f107 020a 	add.w	r2, r7, #10
 8000466:	2302      	movs	r3, #2
 8000468:	f240 6104 	movw	r1, #1540	; 0x604
 800046c:	f001 f916 	bl	800169c <wm8994_write_reg>
 8000470:	4602      	mov	r2, r0
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f103 0018 	add.w	r0, r3, #24
 800047e:	f107 020a 	add.w	r2, r7, #10
 8000482:	2302      	movs	r3, #2
 8000484:	f240 6105 	movw	r1, #1541	; 0x605
 8000488:	f001 f908 	bl	800169c <wm8994_write_reg>
 800048c:	4602      	mov	r2, r0
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
    break;
 8000494:	e136      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000496:	f240 3303 	movw	r3, #771	; 0x303
 800049a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f103 0018 	add.w	r0, r3, #24
 80004a2:	f107 020a 	add.w	r2, r7, #10
 80004a6:	2302      	movs	r3, #2
 80004a8:	2105      	movs	r1, #5
 80004aa:	f001 f8f7 	bl	800169c <wm8994_write_reg>
 80004ae:	4602      	mov	r2, r0
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	4413      	add	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80004b6:	2301      	movs	r3, #1
 80004b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f103 0018 	add.w	r0, r3, #24
 80004c0:	f107 020a 	add.w	r2, r7, #10
 80004c4:	2302      	movs	r3, #2
 80004c6:	f240 6101 	movw	r1, #1537	; 0x601
 80004ca:	f001 f8e7 	bl	800169c <wm8994_write_reg>
 80004ce:	4602      	mov	r2, r0
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4413      	add	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f103 0018 	add.w	r0, r3, #24
 80004dc:	f107 020a 	add.w	r2, r7, #10
 80004e0:	2302      	movs	r3, #2
 80004e2:	f240 6102 	movw	r1, #1538	; 0x602
 80004e6:	f001 f8d9 	bl	800169c <wm8994_write_reg>
 80004ea:	4602      	mov	r2, r0
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4413      	add	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80004f2:	2300      	movs	r3, #0
 80004f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f103 0018 	add.w	r0, r3, #24
 80004fc:	f107 020a 	add.w	r2, r7, #10
 8000500:	2302      	movs	r3, #2
 8000502:	f240 6104 	movw	r1, #1540	; 0x604
 8000506:	f001 f8c9 	bl	800169c <wm8994_write_reg>
 800050a:	4602      	mov	r2, r0
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4413      	add	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f103 0018 	add.w	r0, r3, #24
 8000518:	f107 020a 	add.w	r2, r7, #10
 800051c:	2302      	movs	r3, #2
 800051e:	f240 6105 	movw	r1, #1541	; 0x605
 8000522:	f001 f8bb 	bl	800169c <wm8994_write_reg>
 8000526:	4602      	mov	r2, r0
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
    break;
 800052e:	e0e9      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b05      	cmp	r3, #5
 8000536:	d14a      	bne.n	80005ce <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8000538:	f640 730f 	movw	r3, #3855	; 0xf0f
 800053c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f103 0018 	add.w	r0, r3, #24
 8000544:	f107 020a 	add.w	r2, r7, #10
 8000548:	2302      	movs	r3, #2
 800054a:	2105      	movs	r1, #5
 800054c:	f001 f8a6 	bl	800169c <wm8994_write_reg>
 8000550:	4602      	mov	r2, r0
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 8000558:	2303      	movs	r3, #3
 800055a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f103 0018 	add.w	r0, r3, #24
 8000562:	f107 020a 	add.w	r2, r7, #10
 8000566:	2302      	movs	r3, #2
 8000568:	f240 6101 	movw	r1, #1537	; 0x601
 800056c:	f001 f896 	bl	800169c <wm8994_write_reg>
 8000570:	4602      	mov	r2, r0
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4413      	add	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f103 0018 	add.w	r0, r3, #24
 800057e:	f107 020a 	add.w	r2, r7, #10
 8000582:	2302      	movs	r3, #2
 8000584:	f240 6102 	movw	r1, #1538	; 0x602
 8000588:	f001 f888 	bl	800169c <wm8994_write_reg>
 800058c:	4602      	mov	r2, r0
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f103 0018 	add.w	r0, r3, #24
 800059a:	f107 020a 	add.w	r2, r7, #10
 800059e:	2302      	movs	r3, #2
 80005a0:	f240 6104 	movw	r1, #1540	; 0x604
 80005a4:	f001 f87a 	bl	800169c <wm8994_write_reg>
 80005a8:	4602      	mov	r2, r0
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 0018 	add.w	r0, r3, #24
 80005b6:	f107 020a 	add.w	r2, r7, #10
 80005ba:	2302      	movs	r3, #2
 80005bc:	f240 6105 	movw	r1, #1541	; 0x605
 80005c0:	f001 f86c 	bl	800169c <wm8994_write_reg>
 80005c4:	4602      	mov	r2, r0
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80005cc:	e09a      	b.n	8000704 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80005ce:	f640 730f 	movw	r3, #3855	; 0xf0f
 80005d2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0018 	add.w	r0, r3, #24
 80005da:	f107 020a 	add.w	r2, r7, #10
 80005de:	2302      	movs	r3, #2
 80005e0:	2105      	movs	r1, #5
 80005e2:	f001 f85b 	bl	800169c <wm8994_write_reg>
 80005e6:	4602      	mov	r2, r0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80005ee:	2301      	movs	r3, #1
 80005f0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f103 0018 	add.w	r0, r3, #24
 80005f8:	f107 020a 	add.w	r2, r7, #10
 80005fc:	2302      	movs	r3, #2
 80005fe:	f240 6101 	movw	r1, #1537	; 0x601
 8000602:	f001 f84b 	bl	800169c <wm8994_write_reg>
 8000606:	4602      	mov	r2, r0
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0018 	add.w	r0, r3, #24
 8000614:	f107 020a 	add.w	r2, r7, #10
 8000618:	2302      	movs	r3, #2
 800061a:	f240 6102 	movw	r1, #1538	; 0x602
 800061e:	f001 f83d 	bl	800169c <wm8994_write_reg>
 8000622:	4602      	mov	r2, r0
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 800062a:	2302      	movs	r3, #2
 800062c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0018 	add.w	r0, r3, #24
 8000634:	f107 020a 	add.w	r2, r7, #10
 8000638:	2302      	movs	r3, #2
 800063a:	f240 6104 	movw	r1, #1540	; 0x604
 800063e:	f001 f82d 	bl	800169c <wm8994_write_reg>
 8000642:	4602      	mov	r2, r0
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 0018 	add.w	r0, r3, #24
 8000650:	f107 020a 	add.w	r2, r7, #10
 8000654:	2302      	movs	r3, #2
 8000656:	f240 6105 	movw	r1, #1541	; 0x605
 800065a:	f001 f81f 	bl	800169c <wm8994_write_reg>
 800065e:	4602      	mov	r2, r0
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
    break;
 8000666:	e04d      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000668:	f240 3303 	movw	r3, #771	; 0x303
 800066c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f103 0018 	add.w	r0, r3, #24
 8000674:	f107 020a 	add.w	r2, r7, #10
 8000678:	2302      	movs	r3, #2
 800067a:	2105      	movs	r1, #5
 800067c:	f001 f80e 	bl	800169c <wm8994_write_reg>
 8000680:	4602      	mov	r2, r0
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8000688:	2301      	movs	r3, #1
 800068a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f103 0018 	add.w	r0, r3, #24
 8000692:	f107 020a 	add.w	r2, r7, #10
 8000696:	2302      	movs	r3, #2
 8000698:	f240 6101 	movw	r1, #1537	; 0x601
 800069c:	f000 fffe 	bl	800169c <wm8994_write_reg>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f103 0018 	add.w	r0, r3, #24
 80006ae:	f107 020a 	add.w	r2, r7, #10
 80006b2:	2302      	movs	r3, #2
 80006b4:	f240 6102 	movw	r1, #1538	; 0x602
 80006b8:	f000 fff0 	bl	800169c <wm8994_write_reg>
 80006bc:	4602      	mov	r2, r0
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4413      	add	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80006c4:	2300      	movs	r3, #0
 80006c6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f103 0018 	add.w	r0, r3, #24
 80006ce:	f107 020a 	add.w	r2, r7, #10
 80006d2:	2302      	movs	r3, #2
 80006d4:	f240 6104 	movw	r1, #1540	; 0x604
 80006d8:	f000 ffe0 	bl	800169c <wm8994_write_reg>
 80006dc:	4602      	mov	r2, r0
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4413      	add	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 0018 	add.w	r0, r3, #24
 80006ea:	f107 020a 	add.w	r2, r7, #10
 80006ee:	2302      	movs	r3, #2
 80006f0:	f240 6105 	movw	r1, #1541	; 0x605
 80006f4:	f000 ffd2 	bl	800169c <wm8994_write_reg>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
    break;
 8000700:	e000      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
 8000702:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	2b04      	cmp	r3, #4
 800070c:	f200 81e0 	bhi.w	8000ad0 <WM8994_Init+0x7c0>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <WM8994_Init+0x408>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000901 	.word	0x08000901
 800071c:	0800072d 	.word	0x0800072d
 8000720:	080007eb 	.word	0x080007eb
 8000724:	08000ad1 	.word	0x08000ad1
 8000728:	080009bf 	.word	0x080009bf
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 800072c:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 8000730:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f103 0018 	add.w	r0, r3, #24
 8000738:	f107 020a 	add.w	r2, r7, #10
 800073c:	2302      	movs	r3, #2
 800073e:	2104      	movs	r1, #4
 8000740:	f000 ffac 	bl	800169c <wm8994_write_reg>
 8000744:	4602      	mov	r2, r0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 800074c:	23db      	movs	r3, #219	; 0xdb
 800074e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f103 0018 	add.w	r0, r3, #24
 8000756:	f107 020a 	add.w	r2, r7, #10
 800075a:	2302      	movs	r3, #2
 800075c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000760:	f000 ff9c 	bl	800169c <wm8994_write_reg>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 800076c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000770:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f103 0018 	add.w	r0, r3, #24
 8000778:	f107 020a 	add.w	r2, r7, #10
 800077c:	2302      	movs	r3, #2
 800077e:	2102      	movs	r1, #2
 8000780:	f000 ff8c 	bl	800169c <wm8994_write_reg>
 8000784:	4602      	mov	r2, r0
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 800078c:	2302      	movs	r3, #2
 800078e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f103 0018 	add.w	r0, r3, #24
 8000796:	f107 020a 	add.w	r2, r7, #10
 800079a:	2302      	movs	r3, #2
 800079c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80007a0:	f000 ff7c 	bl	800169c <wm8994_write_reg>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4413      	add	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f103 0018 	add.w	r0, r3, #24
 80007b2:	f107 020a 	add.w	r2, r7, #10
 80007b6:	2302      	movs	r3, #2
 80007b8:	f240 6109 	movw	r1, #1545	; 0x609
 80007bc:	f000 ff6e 	bl	800169c <wm8994_write_reg>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4413      	add	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 80007c8:	230e      	movs	r3, #14
 80007ca:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f103 0018 	add.w	r0, r3, #24
 80007d2:	f107 020a 	add.w	r2, r7, #10
 80007d6:	2302      	movs	r3, #2
 80007d8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007dc:	f000 ff5e 	bl	800169c <wm8994_write_reg>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4413      	add	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
    break;
 80007e8:	e173      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 80007ea:	2311      	movs	r3, #17
 80007ec:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f103 0018 	add.w	r0, r3, #24
 80007f4:	f107 020a 	add.w	r2, r7, #10
 80007f8:	2302      	movs	r3, #2
 80007fa:	2128      	movs	r1, #40	; 0x28
 80007fc:	f000 ff4e 	bl	800169c <wm8994_write_reg>
 8000800:	4602      	mov	r2, r0
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8000808:	2335      	movs	r3, #53	; 0x35
 800080a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0018 	add.w	r0, r3, #24
 8000812:	f107 020a 	add.w	r2, r7, #10
 8000816:	2302      	movs	r3, #2
 8000818:	2129      	movs	r1, #41	; 0x29
 800081a:	f000 ff3f 	bl	800169c <wm8994_write_reg>
 800081e:	4602      	mov	r2, r0
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f103 0018 	add.w	r0, r3, #24
 800082c:	f107 020a 	add.w	r2, r7, #10
 8000830:	2302      	movs	r3, #2
 8000832:	212a      	movs	r1, #42	; 0x2a
 8000834:	f000 ff32 	bl	800169c <wm8994_write_reg>
 8000838:	4602      	mov	r2, r0
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8000840:	f240 3303 	movw	r3, #771	; 0x303
 8000844:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f103 0018 	add.w	r0, r3, #24
 800084c:	f107 020a 	add.w	r2, r7, #10
 8000850:	2302      	movs	r3, #2
 8000852:	2104      	movs	r1, #4
 8000854:	f000 ff22 	bl	800169c <wm8994_write_reg>
 8000858:	4602      	mov	r2, r0
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000860:	23db      	movs	r3, #219	; 0xdb
 8000862:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f103 0018 	add.w	r0, r3, #24
 800086a:	f107 020a 	add.w	r2, r7, #10
 800086e:	2302      	movs	r3, #2
 8000870:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000874:	f000 ff12 	bl	800169c <wm8994_write_reg>
 8000878:	4602      	mov	r2, r0
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000880:	f246 3350 	movw	r3, #25424	; 0x6350
 8000884:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f103 0018 	add.w	r0, r3, #24
 800088c:	f107 020a 	add.w	r2, r7, #10
 8000890:	2302      	movs	r3, #2
 8000892:	2102      	movs	r1, #2
 8000894:	f000 ff02 	bl	800169c <wm8994_write_reg>
 8000898:	4602      	mov	r2, r0
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 80008a0:	2302      	movs	r3, #2
 80008a2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f103 0018 	add.w	r0, r3, #24
 80008aa:	f107 020a 	add.w	r2, r7, #10
 80008ae:	2302      	movs	r3, #2
 80008b0:	f240 6106 	movw	r1, #1542	; 0x606
 80008b4:	f000 fef2 	bl	800169c <wm8994_write_reg>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f103 0018 	add.w	r0, r3, #24
 80008c6:	f107 020a 	add.w	r2, r7, #10
 80008ca:	2302      	movs	r3, #2
 80008cc:	f240 6107 	movw	r1, #1543	; 0x607
 80008d0:	f000 fee4 	bl	800169c <wm8994_write_reg>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4413      	add	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 80008dc:	f248 030d 	movw	r3, #32781	; 0x800d
 80008e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f103 0018 	add.w	r0, r3, #24
 80008e8:	f107 020a 	add.w	r2, r7, #10
 80008ec:	2302      	movs	r3, #2
 80008ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008f2:	f000 fed3 	bl	800169c <wm8994_write_reg>
 80008f6:	4602      	mov	r2, r0
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
    break;
 80008fe:	e0e8      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8000900:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8000904:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0018 	add.w	r0, r3, #24
 800090c:	f107 020a 	add.w	r2, r7, #10
 8000910:	2302      	movs	r3, #2
 8000912:	2104      	movs	r1, #4
 8000914:	f000 fec2 	bl	800169c <wm8994_write_reg>
 8000918:	4602      	mov	r2, r0
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000920:	23db      	movs	r3, #219	; 0xdb
 8000922:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f103 0018 	add.w	r0, r3, #24
 800092a:	f107 020a 	add.w	r2, r7, #10
 800092e:	2302      	movs	r3, #2
 8000930:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000934:	f000 feb2 	bl	800169c <wm8994_write_reg>
 8000938:	4602      	mov	r2, r0
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000940:	f246 3350 	movw	r3, #25424	; 0x6350
 8000944:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f103 0018 	add.w	r0, r3, #24
 800094c:	f107 020a 	add.w	r2, r7, #10
 8000950:	2302      	movs	r3, #2
 8000952:	2102      	movs	r1, #2
 8000954:	f000 fea2 	bl	800169c <wm8994_write_reg>
 8000958:	4602      	mov	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000960:	2302      	movs	r3, #2
 8000962:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0018 	add.w	r0, r3, #24
 800096a:	f107 020a 	add.w	r2, r7, #10
 800096e:	2302      	movs	r3, #2
 8000970:	f240 6106 	movw	r1, #1542	; 0x606
 8000974:	f000 fe92 	bl	800169c <wm8994_write_reg>
 8000978:	4602      	mov	r2, r0
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0018 	add.w	r0, r3, #24
 8000986:	f107 020a 	add.w	r2, r7, #10
 800098a:	2302      	movs	r3, #2
 800098c:	f240 6107 	movw	r1, #1543	; 0x607
 8000990:	f000 fe84 	bl	800169c <wm8994_write_reg>
 8000994:	4602      	mov	r2, r0
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 800099c:	230d      	movs	r3, #13
 800099e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f103 0018 	add.w	r0, r3, #24
 80009a6:	f107 020a 	add.w	r2, r7, #10
 80009aa:	2302      	movs	r3, #2
 80009ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009b0:	f000 fe74 	bl	800169c <wm8994_write_reg>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
    break;
 80009bc:	e089      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 80009be:	f640 733c 	movw	r3, #3900	; 0xf3c
 80009c2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0018 	add.w	r0, r3, #24
 80009ca:	f107 020a 	add.w	r2, r7, #10
 80009ce:	2302      	movs	r3, #2
 80009d0:	2104      	movs	r1, #4
 80009d2:	f000 fe63 	bl	800169c <wm8994_write_reg>
 80009d6:	4602      	mov	r2, r0
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 80009de:	23db      	movs	r3, #219	; 0xdb
 80009e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f103 0018 	add.w	r0, r3, #24
 80009e8:	f107 020a 	add.w	r2, r7, #10
 80009ec:	2302      	movs	r3, #2
 80009ee:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80009f2:	f000 fe53 	bl	800169c <wm8994_write_reg>
 80009f6:	4602      	mov	r2, r0
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f103 0018 	add.w	r0, r3, #24
 8000a04:	f107 020a 	add.w	r2, r7, #10
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000a0e:	f000 fe45 	bl	800169c <wm8994_write_reg>
 8000a12:	4602      	mov	r2, r0
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8000a1a:	f246 33a0 	movw	r3, #25504	; 0x63a0
 8000a1e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f103 0018 	add.w	r0, r3, #24
 8000a26:	f107 020a 	add.w	r2, r7, #10
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	f000 fe35 	bl	800169c <wm8994_write_reg>
 8000a32:	4602      	mov	r2, r0
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f103 0018 	add.w	r0, r3, #24
 8000a44:	f107 020a 	add.w	r2, r7, #10
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f240 6106 	movw	r1, #1542	; 0x606
 8000a4e:	f000 fe25 	bl	800169c <wm8994_write_reg>
 8000a52:	4602      	mov	r2, r0
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f103 0018 	add.w	r0, r3, #24
 8000a60:	f107 020a 	add.w	r2, r7, #10
 8000a64:	2302      	movs	r3, #2
 8000a66:	f240 6107 	movw	r1, #1543	; 0x607
 8000a6a:	f000 fe17 	bl	800169c <wm8994_write_reg>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0018 	add.w	r0, r3, #24
 8000a7c:	f107 020a 	add.w	r2, r7, #10
 8000a80:	2302      	movs	r3, #2
 8000a82:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000a86:	f000 fe09 	bl	800169c <wm8994_write_reg>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f103 0018 	add.w	r0, r3, #24
 8000a98:	f107 020a 	add.w	r2, r7, #10
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f240 6109 	movw	r1, #1545	; 0x609
 8000aa2:	f000 fdfb 	bl	800169c <wm8994_write_reg>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000aae:	230d      	movs	r3, #13
 8000ab0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f103 0018 	add.w	r0, r3, #24
 8000ab8:	f107 020a 	add.w	r2, r7, #10
 8000abc:	2302      	movs	r3, #2
 8000abe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ac2:	f000 fdeb 	bl	800169c <wm8994_write_reg>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
    
    break;    
 8000ace:	e000      	b.n	8000ad2 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8000ad0:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fc59 	bl	8001390 <WM8994_SetFrequency>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	d11a      	bne.n	8000b24 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8000aee:	2100      	movs	r1, #0
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 fc18 	bl	8001326 <WM8994_SetResolution>
 8000af6:	4602      	mov	r2, r0
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8000afe:	2103      	movs	r1, #3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 fc2a 	bl	800135a <WM8994_SetProtocol>
 8000b06:	4602      	mov	r2, r0
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3318      	adds	r3, #24
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fe5a 	bl	80017ce <wm8994_aif1_control1_adcr_src>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e01b      	b.n	8000b5c <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 fbfb 	bl	8001326 <WM8994_SetResolution>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 fc0d 	bl	800135a <WM8994_SetProtocol>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3318      	adds	r3, #24
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fe3d 	bl	80017ce <wm8994_aif1_control1_adcr_src>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f103 0018 	add.w	r0, r3, #24
 8000b66:	f107 020a 	add.w	r2, r7, #10
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f240 3102 	movw	r1, #770	; 0x302
 8000b70:	f000 fd94 	bl	800169c <wm8994_write_reg>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8000b7c:	230a      	movs	r3, #10
 8000b7e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0018 	add.w	r0, r3, #24
 8000b86:	f107 020a 	add.w	r2, r7, #10
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000b90:	f000 fd84 	bl	800169c <wm8994_write_reg>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f103 0018 	add.w	r0, r3, #24
 8000ba6:	f107 020a 	add.w	r2, r7, #10
 8000baa:	2302      	movs	r3, #2
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	f000 fd74 	bl	800169c <wm8994_write_reg>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 81c6 	beq.w	8000f52 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d164      	bne.n	8000c98 <WM8994_Init+0x988>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d160      	bne.n	8000c98 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f103 0018 	add.w	r0, r3, #24
 8000be2:	f107 020a 	add.w	r2, r7, #10
 8000be6:	2302      	movs	r3, #2
 8000be8:	212d      	movs	r1, #45	; 0x2d
 8000bea:	f000 fd57 	bl	800169c <wm8994_write_reg>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f103 0018 	add.w	r0, r3, #24
 8000bfc:	f107 020a 	add.w	r2, r7, #10
 8000c00:	2302      	movs	r3, #2
 8000c02:	212e      	movs	r1, #46	; 0x2e
 8000c04:	f000 fd4a 	bl	800169c <wm8994_write_reg>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d119      	bne.n	8000c4c <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8000c18:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000c1c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f103 0018 	add.w	r0, r3, #24
 8000c24:	f107 020a 	add.w	r2, r7, #10
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c2e:	f000 fd35 	bl	800169c <wm8994_write_reg>
 8000c32:	4602      	mov	r2, r0
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8000c3a:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8000c40:	f240 1145 	movw	r1, #325	; 0x145
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 fcb1 	bl	80015ac <WM8994_Delay>
 8000c4a:	e014      	b.n	8000c76 <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8000c4c:	f248 1308 	movw	r3, #33032	; 0x8108
 8000c50:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f103 0018 	add.w	r0, r3, #24
 8000c58:	f107 020a 	add.w	r2, r7, #10
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c62:	f000 fd1b 	bl	800169c <wm8994_write_reg>
 8000c66:	4602      	mov	r2, r0
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8000c6e:	2132      	movs	r1, #50	; 0x32
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 fc9b 	bl	80015ac <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8000c76:	2300      	movs	r3, #0
 8000c78:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f103 0018 	add.w	r0, r3, #24
 8000c80:	f107 020a 	add.w	r2, r7, #10
 8000c84:	2302      	movs	r3, #2
 8000c86:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000c8a:	f000 fd07 	bl	800169c <wm8994_write_reg>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e0f4      	b.n	8000e82 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8000c98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f103 0018 	add.w	r0, r3, #24
 8000ca4:	f107 020a 	add.w	r2, r7, #10
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2103      	movs	r1, #3
 8000cac:	f000 fcf6 	bl	800169c <wm8994_write_reg>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f103 0018 	add.w	r0, r3, #24
 8000cc2:	f107 020a 	add.w	r2, r7, #10
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	2122      	movs	r1, #34	; 0x22
 8000cca:	f000 fce7 	bl	800169c <wm8994_write_reg>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f103 0018 	add.w	r0, r3, #24
 8000cdc:	f107 020a 	add.w	r2, r7, #10
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	2123      	movs	r1, #35	; 0x23
 8000ce4:	f000 fcda 	bl	800169c <wm8994_write_reg>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8000cf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f103 0018 	add.w	r0, r3, #24
 8000cfc:	f107 020a 	add.w	r2, r7, #10
 8000d00:	2302      	movs	r3, #2
 8000d02:	2136      	movs	r1, #54	; 0x36
 8000d04:	f000 fcca 	bl	800169c <wm8994_write_reg>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8000d10:	f243 0303 	movw	r3, #12291	; 0x3003
 8000d14:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f103 0018 	add.w	r0, r3, #24
 8000d1c:	f107 020a 	add.w	r2, r7, #10
 8000d20:	2302      	movs	r3, #2
 8000d22:	2101      	movs	r1, #1
 8000d24:	f000 fcba 	bl	800169c <wm8994_write_reg>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d113      	bne.n	8000d60 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8000d38:	f240 2305 	movw	r3, #517	; 0x205
 8000d3c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f103 0018 	add.w	r0, r3, #24
 8000d44:	f107 020a 	add.w	r2, r7, #10
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2151      	movs	r1, #81	; 0x51
 8000d4c:	f000 fca6 	bl	800169c <wm8994_write_reg>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e011      	b.n	8000d7e <WM8994_Init+0xa6e>
 8000d5a:	bf00      	nop
 8000d5c:	24000400 	.word	0x24000400
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8000d60:	2305      	movs	r3, #5
 8000d62:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f103 0018 	add.w	r0, r3, #24
 8000d6a:	f107 020a 	add.w	r2, r7, #10
 8000d6e:	2302      	movs	r3, #2
 8000d70:	2151      	movs	r1, #81	; 0x51
 8000d72:	f000 fc93 	bl	800169c <wm8994_write_reg>
 8000d76:	4602      	mov	r2, r0
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8000d7e:	f243 3303 	movw	r3, #13059	; 0x3303
 8000d82:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f103 0018 	add.w	r0, r3, #24
 8000d8a:	f107 020a 	add.w	r2, r7, #10
 8000d8e:	2302      	movs	r3, #2
 8000d90:	2101      	movs	r1, #1
 8000d92:	f000 fc83 	bl	800169c <wm8994_write_reg>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8000d9e:	2322      	movs	r3, #34	; 0x22
 8000da0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 0018 	add.w	r0, r3, #24
 8000da8:	f107 020a 	add.w	r2, r7, #10
 8000dac:	2302      	movs	r3, #2
 8000dae:	2160      	movs	r1, #96	; 0x60
 8000db0:	f000 fc74 	bl	800169c <wm8994_write_reg>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8000dbc:	f649 7325 	movw	r3, #40741	; 0x9f25
 8000dc0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f103 0018 	add.w	r0, r3, #24
 8000dc8:	f107 020a 	add.w	r2, r7, #10
 8000dcc:	2302      	movs	r3, #2
 8000dce:	214c      	movs	r1, #76	; 0x4c
 8000dd0:	f000 fc64 	bl	800169c <wm8994_write_reg>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8000ddc:	210f      	movs	r1, #15
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 fbe4 	bl	80015ac <WM8994_Delay>
      
      tmp = 0x0001;
 8000de4:	2301      	movs	r3, #1
 8000de6:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f103 0018 	add.w	r0, r3, #24
 8000dee:	f107 020a 	add.w	r2, r7, #10
 8000df2:	2302      	movs	r3, #2
 8000df4:	212d      	movs	r1, #45	; 0x2d
 8000df6:	f000 fc51 	bl	800169c <wm8994_write_reg>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f103 0018 	add.w	r0, r3, #24
 8000e08:	f107 020a 	add.w	r2, r7, #10
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	212e      	movs	r1, #46	; 0x2e
 8000e10:	f000 fc44 	bl	800169c <wm8994_write_reg>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4413      	add	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8000e1c:	f44f 734c 	mov.w	r3, #816	; 0x330
 8000e20:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f103 0018 	add.w	r0, r3, #24
 8000e28:	f107 020a 	add.w	r2, r7, #10
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2103      	movs	r1, #3
 8000e30:	f000 fc34 	bl	800169c <wm8994_write_reg>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8000e3c:	2333      	movs	r3, #51	; 0x33
 8000e3e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 0018 	add.w	r0, r3, #24
 8000e46:	f107 020a 	add.w	r2, r7, #10
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	2154      	movs	r1, #84	; 0x54
 8000e4e:	f000 fc25 	bl	800169c <wm8994_write_reg>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8000e5a:	f240 1101 	movw	r1, #257	; 0x101
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fba4 	bl	80015ac <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8000e64:	23ee      	movs	r3, #238	; 0xee
 8000e66:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f103 0018 	add.w	r0, r3, #24
 8000e6e:	f107 020a 	add.w	r2, r7, #10
 8000e72:	2302      	movs	r3, #2
 8000e74:	2160      	movs	r1, #96	; 0x60
 8000e76:	f000 fc11 	bl	800169c <wm8994_write_reg>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f103 0018 	add.w	r0, r3, #24
 8000e8c:	f107 020a 	add.w	r2, r7, #10
 8000e90:	2302      	movs	r3, #2
 8000e92:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000e96:	f000 fc01 	bl	800169c <wm8994_write_reg>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f103 0018 	add.w	r0, r3, #24
 8000ea8:	f107 020a 	add.w	r2, r7, #10
 8000eac:	2302      	movs	r3, #2
 8000eae:	f240 6111 	movw	r1, #1553	; 0x611
 8000eb2:	f000 fbf3 	bl	800169c <wm8994_write_reg>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f103 0018 	add.w	r0, r3, #24
 8000ec8:	f107 020a 	add.w	r2, r7, #10
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ed2:	f000 fbe3 	bl	800169c <wm8994_write_reg>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f103 0018 	add.w	r0, r3, #24
 8000ee8:	f107 020a 	add.w	r2, r7, #10
 8000eec:	2302      	movs	r3, #2
 8000eee:	f240 6112 	movw	r1, #1554	; 0x612
 8000ef2:	f000 fbd3 	bl	800169c <wm8994_write_reg>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f103 0018 	add.w	r0, r3, #24
 8000f04:	f107 020a 	add.w	r2, r7, #10
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f240 6113 	movw	r1, #1555	; 0x613
 8000f0e:	f000 fbc5 	bl	800169c <wm8994_write_reg>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f103 0018 	add.w	r0, r3, #24
 8000f24:	f107 020a 	add.w	r2, r7, #10
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f240 4122 	movw	r1, #1058	; 0x422
 8000f2e:	f000 fbb5 	bl	800169c <wm8994_write_reg>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	2101      	movs	r1, #1
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f8c9 	bl	80010dc <WM8994_SetVolume>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80b5 	beq.w	80010c6 <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d003      	beq.n	8000f6c <WM8994_Init+0xc5c>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000f6c:	2313      	movs	r3, #19
 8000f6e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f103 0018 	add.w	r0, r3, #24
 8000f76:	f107 020a 	add.w	r2, r7, #10
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	f000 fb8d 	bl	800169c <wm8994_write_reg>
 8000f82:	4602      	mov	r2, r0
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f103 0018 	add.w	r0, r3, #24
 8000f94:	f107 020a 	add.w	r2, r7, #10
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000f9e:	f000 fb7d 	bl	800169c <wm8994_write_reg>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 8000faa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fae:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f103 0018 	add.w	r0, r3, #24
 8000fb6:	f107 020a 	add.w	r2, r7, #10
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f240 4111 	movw	r1, #1041	; 0x411
 8000fc0:	f000 fb6c 	bl	800169c <wm8994_write_reg>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e06f      	b.n	80010ae <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d13e      	bne.n	8001054 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000fd6:	2313      	movs	r3, #19
 8000fd8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f103 0018 	add.w	r0, r3, #24
 8000fe0:	f107 020a 	add.w	r2, r7, #10
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	f000 fb58 	bl	800169c <wm8994_write_reg>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f103 0018 	add.w	r0, r3, #24
 8000ffe:	f107 020a 	add.w	r2, r7, #10
 8001002:	2302      	movs	r3, #2
 8001004:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001008:	f000 fb48 	bl	800169c <wm8994_write_reg>
 800100c:	4602      	mov	r2, r0
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8001014:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001018:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f103 0018 	add.w	r0, r3, #24
 8001020:	f107 020a 	add.w	r2, r7, #10
 8001024:	2302      	movs	r3, #2
 8001026:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800102a:	f000 fb37 	bl	800169c <wm8994_write_reg>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 0018 	add.w	r0, r3, #24
 800103c:	f107 020a 	add.w	r2, r7, #10
 8001040:	2302      	movs	r3, #2
 8001042:	f240 4111 	movw	r1, #1041	; 0x411
 8001046:	f000 fb29 	bl	800169c <wm8994_write_reg>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e02c      	b.n	80010ae <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 8001054:	230b      	movs	r3, #11
 8001056:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 0018 	add.w	r0, r3, #24
 800105e:	f107 020a 	add.w	r2, r7, #10
 8001062:	2302      	movs	r3, #2
 8001064:	2118      	movs	r1, #24
 8001066:	f000 fb19 	bl	800169c <wm8994_write_reg>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f103 0018 	add.w	r0, r3, #24
 8001078:	f107 020a 	add.w	r2, r7, #10
 800107c:	2302      	movs	r3, #2
 800107e:	211a      	movs	r1, #26
 8001080:	f000 fb0c 	bl	800169c <wm8994_write_reg>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 800108c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001090:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f103 0018 	add.w	r0, r3, #24
 8001098:	f107 020a 	add.w	r2, r7, #10
 800109c:	2302      	movs	r3, #2
 800109e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80010a2:	f000 fafb 	bl	800169c <wm8994_write_reg>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f80f 	bl	80010dc <WM8994_SetVolume>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 8089 	bne.w	8001204 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b3e      	cmp	r3, #62	; 0x3e
 80010f6:	d93c      	bls.n	8001172 <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80010f8:	2100      	movs	r1, #0
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 f8c8 	bl	8001290 <WM8994_SetMute>
 8001100:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 8001102:	f240 137f 	movw	r3, #383	; 0x17f
 8001106:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f103 0018 	add.w	r0, r3, #24
 800110e:	f107 0212 	add.w	r2, r7, #18
 8001112:	2302      	movs	r3, #2
 8001114:	211c      	movs	r1, #28
 8001116:	f000 fac1 	bl	800169c <wm8994_write_reg>
 800111a:	4602      	mov	r2, r0
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4413      	add	r3, r2
 8001120:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f103 0018 	add.w	r0, r3, #24
 8001128:	f107 0212 	add.w	r2, r7, #18
 800112c:	2302      	movs	r3, #2
 800112e:	211d      	movs	r1, #29
 8001130:	f000 fab4 	bl	800169c <wm8994_write_reg>
 8001134:	4602      	mov	r2, r0
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4413      	add	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f103 0018 	add.w	r0, r3, #24
 8001142:	f107 0212 	add.w	r2, r7, #18
 8001146:	2302      	movs	r3, #2
 8001148:	2126      	movs	r1, #38	; 0x26
 800114a:	f000 faa7 	bl	800169c <wm8994_write_reg>
 800114e:	4602      	mov	r2, r0
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	4413      	add	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f103 0018 	add.w	r0, r3, #24
 800115c:	f107 0212 	add.w	r2, r7, #18
 8001160:	2302      	movs	r3, #2
 8001162:	2127      	movs	r1, #39	; 0x27
 8001164:	f000 fa9a 	bl	800169c <wm8994_write_reg>
 8001168:	4602      	mov	r2, r0
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e083      	b.n	800127a <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d105      	bne.n	8001184 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8001178:	2101      	movs	r1, #1
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 f888 	bl	8001290 <WM8994_SetMute>
 8001180:	6178      	str	r0, [r7, #20]
 8001182:	e07a      	b.n	800127a <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001184:	2100      	movs	r1, #0
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 f882 	bl	8001290 <WM8994_SetMute>
 800118c:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	b29b      	uxth	r3, r3
 8001192:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001196:	b29b      	uxth	r3, r3
 8001198:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f103 0018 	add.w	r0, r3, #24
 80011a0:	f107 0212 	add.w	r2, r7, #18
 80011a4:	2302      	movs	r3, #2
 80011a6:	211c      	movs	r1, #28
 80011a8:	f000 fa78 	bl	800169c <wm8994_write_reg>
 80011ac:	4602      	mov	r2, r0
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f103 0018 	add.w	r0, r3, #24
 80011ba:	f107 0212 	add.w	r2, r7, #18
 80011be:	2302      	movs	r3, #2
 80011c0:	211d      	movs	r1, #29
 80011c2:	f000 fa6b 	bl	800169c <wm8994_write_reg>
 80011c6:	4602      	mov	r2, r0
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	4413      	add	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f103 0018 	add.w	r0, r3, #24
 80011d4:	f107 0212 	add.w	r2, r7, #18
 80011d8:	2302      	movs	r3, #2
 80011da:	2126      	movs	r1, #38	; 0x26
 80011dc:	f000 fa5e 	bl	800169c <wm8994_write_reg>
 80011e0:	4602      	mov	r2, r0
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	4413      	add	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f103 0018 	add.w	r0, r3, #24
 80011ee:	f107 0212 	add.w	r2, r7, #18
 80011f2:	2302      	movs	r3, #2
 80011f4:	2127      	movs	r1, #39	; 0x27
 80011f6:	f000 fa51 	bl	800169c <wm8994_write_reg>
 80011fa:	4602      	mov	r2, r0
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e03a      	b.n	800127a <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	b29b      	uxth	r3, r3
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	b29b      	uxth	r3, r3
 800120e:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f103 0018 	add.w	r0, r3, #24
 8001216:	f107 0212 	add.w	r2, r7, #18
 800121a:	2302      	movs	r3, #2
 800121c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001220:	f000 fa3c 	bl	800169c <wm8994_write_reg>
 8001224:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f103 0018 	add.w	r0, r3, #24
 800122c:	f107 0212 	add.w	r2, r7, #18
 8001230:	2302      	movs	r3, #2
 8001232:	f240 4101 	movw	r1, #1025	; 0x401
 8001236:	f000 fa31 	bl	800169c <wm8994_write_reg>
 800123a:	4602      	mov	r2, r0
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	4413      	add	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f103 0018 	add.w	r0, r3, #24
 8001248:	f107 0212 	add.w	r2, r7, #18
 800124c:	2302      	movs	r3, #2
 800124e:	f240 4104 	movw	r1, #1028	; 0x404
 8001252:	f000 fa23 	bl	800169c <wm8994_write_reg>
 8001256:	4602      	mov	r2, r0
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	4413      	add	r3, r2
 800125c:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f103 0018 	add.w	r0, r3, #24
 8001264:	f107 0212 	add.w	r2, r7, #18
 8001268:	2302      	movs	r3, #2
 800126a:	f240 4105 	movw	r1, #1029	; 0x405
 800126e:	f000 fa15 	bl	800169c <wm8994_write_reg>
 8001272:	4602      	mov	r2, r0
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 8001280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001284:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001286:	697b      	ldr	r3, [r7, #20]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d11c      	bne.n	80012da <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f103 0018 	add.w	r0, r3, #24
 80012ac:	f107 020a 	add.w	r2, r7, #10
 80012b0:	2302      	movs	r3, #2
 80012b2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80012b6:	f000 f9f1 	bl	800169c <wm8994_write_reg>
 80012ba:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f103 0018 	add.w	r0, r3, #24
 80012c2:	f107 020a 	add.w	r2, r7, #10
 80012c6:	2302      	movs	r3, #2
 80012c8:	f240 4122 	movw	r1, #1058	; 0x422
 80012cc:	f000 f9e6 	bl	800169c <wm8994_write_reg>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e01a      	b.n	8001310 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 80012da:	2310      	movs	r3, #16
 80012dc:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0018 	add.w	r0, r3, #24
 80012e4:	f107 020a 	add.w	r2, r7, #10
 80012e8:	2302      	movs	r3, #2
 80012ea:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80012ee:	f000 f9d5 	bl	800169c <wm8994_write_reg>
 80012f2:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f103 0018 	add.w	r0, r3, #24
 80012fa:	f107 020a 	add.w	r2, r7, #10
 80012fe:	2302      	movs	r3, #2
 8001300:	f240 4122 	movw	r1, #1058	; 0x422
 8001304:	f000 f9ca 	bl	800169c <wm8994_write_reg>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800131a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800131c:	68fb      	ldr	r3, [r7, #12]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3318      	adds	r3, #24
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	b292      	uxth	r2, r2
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fa15 	bl	800176e <wm8994_aif1_control1_wl>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001350:	68fb      	ldr	r3, [r7, #12]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3318      	adds	r3, #24
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	b292      	uxth	r2, r2
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f9cb 	bl	800170e <wm8994_aif1_control1_fmt>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001382:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4a55      	ldr	r2, [pc, #340]	; (80014f4 <WM8994_SetFrequency+0x164>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d05d      	beq.n	800145e <WM8994_SetFrequency+0xce>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	4a53      	ldr	r2, [pc, #332]	; (80014f4 <WM8994_SetFrequency+0x164>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	f200 8091 	bhi.w	80014ce <WM8994_SetFrequency+0x13e>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f64a 4244 	movw	r2, #44100	; 0xac44
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d07d      	beq.n	80014b2 <WM8994_SetFrequency+0x122>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80013bc:	4293      	cmp	r3, r2
 80013be:	f200 8086 	bhi.w	80014ce <WM8994_SetFrequency+0x13e>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80013c8:	d03b      	beq.n	8001442 <WM8994_SetFrequency+0xb2>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80013d0:	d87d      	bhi.n	80014ce <WM8994_SetFrequency+0x13e>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f245 6222 	movw	r2, #22050	; 0x5622
 80013d8:	4293      	cmp	r3, r2
 80013da:	d05c      	beq.n	8001496 <WM8994_SetFrequency+0x106>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f245 6222 	movw	r2, #22050	; 0x5622
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d873      	bhi.n	80014ce <WM8994_SetFrequency+0x13e>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80013ec:	d01b      	beq.n	8001426 <WM8994_SetFrequency+0x96>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80013f4:	d86b      	bhi.n	80014ce <WM8994_SetFrequency+0x13e>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80013fc:	d005      	beq.n	800140a <WM8994_SetFrequency+0x7a>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001404:	4293      	cmp	r3, r2
 8001406:	d038      	beq.n	800147a <WM8994_SetFrequency+0xea>
 8001408:	e061      	b.n	80014ce <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 800140a:	2303      	movs	r3, #3
 800140c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f103 0018 	add.w	r0, r3, #24
 8001414:	f107 020a 	add.w	r2, r7, #10
 8001418:	2302      	movs	r3, #2
 800141a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800141e:	f000 f93d 	bl	800169c <wm8994_write_reg>
 8001422:	60f8      	str	r0, [r7, #12]
    break;
 8001424:	e061      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8001426:	2333      	movs	r3, #51	; 0x33
 8001428:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f103 0018 	add.w	r0, r3, #24
 8001430:	f107 020a 	add.w	r2, r7, #10
 8001434:	2302      	movs	r3, #2
 8001436:	f44f 7104 	mov.w	r1, #528	; 0x210
 800143a:	f000 f92f 	bl	800169c <wm8994_write_reg>
 800143e:	60f8      	str	r0, [r7, #12]
    break;
 8001440:	e053      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8001442:	2363      	movs	r3, #99	; 0x63
 8001444:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f103 0018 	add.w	r0, r3, #24
 800144c:	f107 020a 	add.w	r2, r7, #10
 8001450:	2302      	movs	r3, #2
 8001452:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001456:	f000 f921 	bl	800169c <wm8994_write_reg>
 800145a:	60f8      	str	r0, [r7, #12]
    break;
 800145c:	e045      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 800145e:	23a3      	movs	r3, #163	; 0xa3
 8001460:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f103 0018 	add.w	r0, r3, #24
 8001468:	f107 020a 	add.w	r2, r7, #10
 800146c:	2302      	movs	r3, #2
 800146e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001472:	f000 f913 	bl	800169c <wm8994_write_reg>
 8001476:	60f8      	str	r0, [r7, #12]
    break;
 8001478:	e037      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 800147a:	2313      	movs	r3, #19
 800147c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f103 0018 	add.w	r0, r3, #24
 8001484:	f107 020a 	add.w	r2, r7, #10
 8001488:	2302      	movs	r3, #2
 800148a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800148e:	f000 f905 	bl	800169c <wm8994_write_reg>
 8001492:	60f8      	str	r0, [r7, #12]
    break;
 8001494:	e029      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8001496:	2343      	movs	r3, #67	; 0x43
 8001498:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f103 0018 	add.w	r0, r3, #24
 80014a0:	f107 020a 	add.w	r2, r7, #10
 80014a4:	2302      	movs	r3, #2
 80014a6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014aa:	f000 f8f7 	bl	800169c <wm8994_write_reg>
 80014ae:	60f8      	str	r0, [r7, #12]
    break;
 80014b0:	e01b      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 80014b2:	2373      	movs	r3, #115	; 0x73
 80014b4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f103 0018 	add.w	r0, r3, #24
 80014bc:	f107 020a 	add.w	r2, r7, #10
 80014c0:	2302      	movs	r3, #2
 80014c2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014c6:	f000 f8e9 	bl	800169c <wm8994_write_reg>
 80014ca:	60f8      	str	r0, [r7, #12]
    break; 
 80014cc:	e00d      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 80014ce:	2383      	movs	r3, #131	; 0x83
 80014d0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f103 0018 	add.w	r0, r3, #24
 80014d8:	f107 020a 	add.w	r2, r7, #10
 80014dc:	2302      	movs	r3, #2
 80014de:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014e2:	f000 f8db 	bl	800169c <wm8994_write_reg>
 80014e6:	60f8      	str	r0, [r7, #12]
    break; 
 80014e8:	bf00      	nop
  }
  
  return ret;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	00017700 	.word	0x00017700

080014f8 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3318      	adds	r3, #24
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f8ee 	bl	80016ec <wm8994_sw_reset_w>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800151a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d103      	bne.n	8001540 <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e02c      	b.n	800159a <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	891a      	ldrh	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <WM8994_RegisterBusIO+0x7c>)
 8001574:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <WM8994_RegisterBusIO+0x80>)
 800157a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4798      	blx	r3
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	e002      	b.n	800159a <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001598:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	080015e1 	.word	0x080015e1
 80015a8:	08001613 	.word	0x08001613

080015ac <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	4798      	blx	r3
 80015bc:	4603      	mov	r3, r0
 80015be:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80015c0:	bf00      	nop
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	4798      	blx	r3
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d8f5      	bhi.n	80015c2 <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	461a      	mov	r2, r3
 80015ec:	460b      	mov	r3, r1
 80015ee:	817b      	strh	r3, [r7, #10]
 80015f0:	4613      	mov	r3, r2
 80015f2:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	691c      	ldr	r4, [r3, #16]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	8918      	ldrh	r0, [r3, #8]
 8001600:	893b      	ldrh	r3, [r7, #8]
 8001602:	8979      	ldrh	r1, [r7, #10]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	47a0      	blx	r4
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}

08001612 <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001612:	b590      	push	{r4, r7, lr}
 8001614:	b087      	sub	sp, #28
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	461a      	mov	r2, r3
 800161e:	460b      	mov	r3, r1
 8001620:	817b      	strh	r3, [r7, #10]
 8001622:	4613      	mov	r3, r2
 8001624:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	68dc      	ldr	r4, [r3, #12]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	8918      	ldrh	r0, [r3, #8]
 8001632:	893b      	ldrh	r3, [r7, #8]
 8001634:	8979      	ldrh	r1, [r7, #10]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	47a0      	blx	r4
 800163a:	4603      	mov	r3, r0
}
 800163c:	4618      	mov	r0, r3
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}

08001644 <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	461a      	mov	r2, r3
 8001650:	460b      	mov	r3, r1
 8001652:	817b      	strh	r3, [r7, #10]
 8001654:	4613      	mov	r3, r2
 8001656:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	685c      	ldr	r4, [r3, #4]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6898      	ldr	r0, [r3, #8]
 8001660:	893b      	ldrh	r3, [r7, #8]
 8001662:	8979      	ldrh	r1, [r7, #10]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	47a0      	blx	r4
 8001668:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db10      	blt.n	8001692 <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b29b      	uxth	r3, r3
 8001680:	b21a      	sxth	r2, r3
 8001682:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001686:	4313      	orrs	r3, r2
 8001688:	b21b      	sxth	r3, r3
 800168a:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	8a7a      	ldrh	r2, [r7, #18]
 8001690:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8001692:	697b      	ldr	r3, [r7, #20]
}
 8001694:	4618      	mov	r0, r3
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd90      	pop	{r4, r7, pc}

0800169c <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	461a      	mov	r2, r3
 80016a8:	460b      	mov	r3, r1
 80016aa:	817b      	strh	r3, [r7, #10]
 80016ac:	4613      	mov	r3, r2
 80016ae:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	8afb      	ldrh	r3, [r7, #22]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681c      	ldr	r4, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6898      	ldr	r0, [r3, #8]
 80016d8:	893b      	ldrh	r3, [r7, #8]
 80016da:	f107 0216 	add.w	r2, r7, #22
 80016de:	8979      	ldrh	r1, [r7, #10]
 80016e0:	47a0      	blx	r4
 80016e2:	4603      	mov	r3, r0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}

080016ec <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 80016f8:	1cba      	adds	r2, r7, #2
 80016fa:	2302      	movs	r3, #2
 80016fc:	2100      	movs	r1, #0
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffcc 	bl	800169c <wm8994_write_reg>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800171e:	f107 020a 	add.w	r2, r7, #10
 8001722:	2302      	movs	r3, #2
 8001724:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff8b 	bl	8001644 <wm8994_read_reg>
 800172e:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d116      	bne.n	8001764 <wm8994_aif1_control1_fmt+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 8001736:	897b      	ldrh	r3, [r7, #10]
 8001738:	f023 0318 	bic.w	r3, r3, #24
 800173c:	b29b      	uxth	r3, r3
 800173e:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	b21a      	sxth	r2, r3
 8001746:	897b      	ldrh	r3, [r7, #10]
 8001748:	b21b      	sxth	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	b21b      	sxth	r3, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001752:	f107 020a 	add.w	r2, r7, #10
 8001756:	2302      	movs	r3, #2
 8001758:	f44f 7140 	mov.w	r1, #768	; 0x300
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff9d 	bl	800169c <wm8994_write_reg>
 8001762:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8001764:	68fb      	ldr	r3, [r7, #12]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800177e:	f107 020a 	add.w	r2, r7, #10
 8001782:	2302      	movs	r3, #2
 8001784:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff5b 	bl	8001644 <wm8994_read_reg>
 800178e:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d116      	bne.n	80017c4 <wm8994_aif1_control1_wl+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 8001796:	897b      	ldrh	r3, [r7, #10]
 8001798:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800179c:	b29b      	uxth	r3, r3
 800179e:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	015b      	lsls	r3, r3, #5
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80017b2:	f107 020a 	add.w	r2, r7, #10
 80017b6:	2302      	movs	r3, #2
 80017b8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff6d 	bl	800169c <wm8994_write_reg>
 80017c2:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80017de:	f107 020a 	add.w	r2, r7, #10
 80017e2:	2302      	movs	r3, #2
 80017e4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff2b 	bl	8001644 <wm8994_read_reg>
 80017ee:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d116      	bne.n	8001824 <wm8994_aif1_control1_adcr_src+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 80017f6:	897b      	ldrh	r3, [r7, #10]
 80017f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	039b      	lsls	r3, r3, #14
 8001804:	b21a      	sxth	r2, r3
 8001806:	897b      	ldrh	r3, [r7, #10]
 8001808:	b21b      	sxth	r3, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	b21b      	sxth	r3, r3
 800180e:	b29b      	uxth	r3, r3
 8001810:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001812:	f107 020a 	add.w	r2, r7, #10
 8001816:	2302      	movs	r3, #2
 8001818:	f44f 7140 	mov.w	r1, #768	; 0x300
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff3d 	bl	800169c <wm8994_write_reg>
 8001822:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8001824:	68fb      	ldr	r3, [r7, #12]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10f      	bne.n	8001864 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <BSP_LED_Init+0xb0>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <BSP_LED_Init+0xb0>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <BSP_LED_Init+0xb0>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	e015      	b.n	8001890 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d10f      	bne.n	800188a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <BSP_LED_Init+0xb0>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <BSP_LED_Init+0xb0>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <BSP_LED_Init+0xb0>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	e002      	b.n	8001890 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800188a:	f06f 0301 	mvn.w	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001898:	2302      	movs	r3, #2
 800189a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <BSP_LED_Init+0xb4>)
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <BSP_LED_Init+0xb8>)
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	f107 0210 	add.w	r2, r7, #16
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f003 f86d 	bl	8004994 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <BSP_LED_Init+0xb8>)
 80018be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <BSP_LED_Init+0xb4>)
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2201      	movs	r2, #1
 80018ce:	4619      	mov	r1, r3
 80018d0:	f003 fb0a 	bl	8004ee8 <HAL_GPIO_WritePin>

  return ret;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	58024400 	.word	0x58024400
 80018e4:	0800d2f0 	.word	0x0800d2f0
 80018e8:	24000404 	.word	0x24000404

080018ec <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4a08      	ldr	r2, [pc, #32]	; (8001920 <BSP_LED_On+0x34>)
 80018fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <BSP_LED_On+0x38>)
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	b29b      	uxth	r3, r3
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	f003 faea 	bl	8004ee8 <HAL_GPIO_WritePin>
  return ret;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	24000404 	.word	0x24000404
 8001924:	0800d2f0 	.word	0x0800d2f0

08001928 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4a08      	ldr	r2, [pc, #32]	; (800195c <BSP_LED_Off+0x34>)
 800193a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <BSP_LED_Off+0x38>)
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	b29b      	uxth	r3, r3
 8001948:	2201      	movs	r2, #1
 800194a:	4619      	mov	r1, r3
 800194c:	f003 facc 	bl	8004ee8 <HAL_GPIO_WritePin>
  return ret;
 8001950:	68fb      	ldr	r3, [r7, #12]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24000404 	.word	0x24000404
 8001960:	0800d2f0 	.word	0x0800d2f0

08001964 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <HAL_SAI_ErrorCallback+0x28>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d103      	bne.n	800197e <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f80a 	bl	8001990 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 800197c:	e002      	b.n	8001984 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f83a 	bl	80019f8 <BSP_AUDIO_IN_Error_CallBack>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40015824 	.word	0x40015824

08001990 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f000 f819 	bl	80019e4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f804 	bl	80019d0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a12:	2003      	movs	r0, #3
 8001a14:	f000 f980 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a18:	f005 fd12 	bl	8007440 <HAL_RCC_GetSysClockFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_Init+0x68>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	4913      	ldr	r1, [pc, #76]	; (8001a78 <HAL_Init+0x6c>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_Init+0x68>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <HAL_Init+0x6c>)
 8001a40:	5cd3      	ldrb	r3, [r2, r3]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_Init+0x70>)
 8001a4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a50:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_Init+0x74>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 f814 	bl	8001a84 <HAL_InitTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e002      	b.n	8001a6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a66:	f008 fffd 	bl	800aa64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	58024400 	.word	0x58024400
 8001a78:	0800d300 	.word	0x0800d300
 8001a7c:	24000420 	.word	0x24000420
 8001a80:	2400041c 	.word	0x2400041c

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_InitTick+0x60>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e021      	b.n	8001adc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_InitTick+0x64>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_InitTick+0x60>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f973 	bl	8001d9a <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00e      	b.n	8001adc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b0f      	cmp	r3, #15
 8001ac2:	d80a      	bhi.n	8001ada <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001acc:	f000 f92f 	bl	8001d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <HAL_InitTick+0x68>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	24000410 	.word	0x24000410
 8001ae8:	2400041c 	.word	0x2400041c
 8001aec:	2400040c 	.word	0x2400040c

08001af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x20>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x24>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_IncTick+0x24>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	24000410 	.word	0x24000410
 8001b14:	24000530 	.word	0x24000530

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	24000530 	.word	0x24000530

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <__NVIC_SetPriorityGrouping+0x40>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x40>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00
 8001b74:	05fa0000 	.word	0x05fa0000

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db12      	blt.n	8001c08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	490a      	ldr	r1, [pc, #40]	; (8001c14 <__NVIC_DisableIRQ+0x44>)
 8001bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	3320      	adds	r3, #32
 8001bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bfc:	f3bf 8f4f 	dsb	sy
}
 8001c00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c02:	f3bf 8f6f 	isb	sy
}
 8001c06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	; (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	; (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce4:	d301      	bcc.n	8001cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <SysTick_Config+0x40>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf8:	f7ff ff8e 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <SysTick_Config+0x40>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d02:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <SysTick_Config+0x40>)
 8001d04:	2207      	movs	r2, #7
 8001d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	e000e010 	.word	0xe000e010

08001d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff05 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff1c 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff90 	bl	8001c6c <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5f 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff0f 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff1f 	bl	8001bd0 <__NVIC_DisableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff96 	bl	8001cd4 <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e054      	b.n	8001e70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7f5b      	ldrb	r3, [r3, #29]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f008 fe5e 	bl	800aa98 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10c      	bne.n	8001e04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <HAL_CRC_Init+0xc4>)
 8001df0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0218 	bic.w	r2, r2, #24
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e00c      	b.n	8001e1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6899      	ldr	r1, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f834 	bl	8001e7c <HAL_CRCEx_Polynomial_Set>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e028      	b.n	8001e70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	795b      	ldrb	r3, [r3, #5]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d105      	bne.n	8001e32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e2e:	611a      	str	r2, [r3, #16]
 8001e30:	e004      	b.n	8001e3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6912      	ldr	r2, [r2, #16]
 8001e3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699a      	ldr	r2, [r3, #24]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	04c11db7 	.word	0x04c11db7

08001e7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001e8c:	231f      	movs	r3, #31
 8001e8e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001e90:	bf00      	nop
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	613a      	str	r2, [r7, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <HAL_CRCEx_Polynomial_Set+0x34>
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_CRCEx_Polynomial_Set+0x16>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b18      	cmp	r3, #24
 8001eb4:	d846      	bhi.n	8001f44 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001eb6:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <HAL_CRCEx_Polynomial_Set+0x40>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001f4b 	.word	0x08001f4b
 8001ec0:	08001f45 	.word	0x08001f45
 8001ec4:	08001f45 	.word	0x08001f45
 8001ec8:	08001f45 	.word	0x08001f45
 8001ecc:	08001f45 	.word	0x08001f45
 8001ed0:	08001f45 	.word	0x08001f45
 8001ed4:	08001f45 	.word	0x08001f45
 8001ed8:	08001f45 	.word	0x08001f45
 8001edc:	08001f39 	.word	0x08001f39
 8001ee0:	08001f45 	.word	0x08001f45
 8001ee4:	08001f45 	.word	0x08001f45
 8001ee8:	08001f45 	.word	0x08001f45
 8001eec:	08001f45 	.word	0x08001f45
 8001ef0:	08001f45 	.word	0x08001f45
 8001ef4:	08001f45 	.word	0x08001f45
 8001ef8:	08001f45 	.word	0x08001f45
 8001efc:	08001f2d 	.word	0x08001f2d
 8001f00:	08001f45 	.word	0x08001f45
 8001f04:	08001f45 	.word	0x08001f45
 8001f08:	08001f45 	.word	0x08001f45
 8001f0c:	08001f45 	.word	0x08001f45
 8001f10:	08001f45 	.word	0x08001f45
 8001f14:	08001f45 	.word	0x08001f45
 8001f18:	08001f45 	.word	0x08001f45
 8001f1c:	08001f21 	.word	0x08001f21
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d913      	bls.n	8001f4e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f2a:	e010      	b.n	8001f4e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b07      	cmp	r3, #7
 8001f30:	d90f      	bls.n	8001f52 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f36:	e00c      	b.n	8001f52 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	d90b      	bls.n	8001f56 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f42:	e008      	b.n	8001f56 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	75fb      	strb	r3, [r7, #23]
      break;
 8001f48:	e006      	b.n	8001f58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f4a:	bf00      	nop
 8001f4c:	e004      	b.n	8001f58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f4e:	bf00      	nop
 8001f50:	e002      	b.n	8001f58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f52:	bf00      	nop
 8001f54:	e000      	b.n	8001f58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f56:	bf00      	nop
  }
  if (status == HAL_OK)
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10d      	bne.n	8001f7a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 0118 	bic.w	r1, r3, #24
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff fdc2 	bl	8001b18 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e314      	b.n	80025ca <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a66      	ldr	r2, [pc, #408]	; (8002140 <HAL_DMA_Init+0x1b8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d04a      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a65      	ldr	r2, [pc, #404]	; (8002144 <HAL_DMA_Init+0x1bc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d045      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a63      	ldr	r2, [pc, #396]	; (8002148 <HAL_DMA_Init+0x1c0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d040      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a62      	ldr	r2, [pc, #392]	; (800214c <HAL_DMA_Init+0x1c4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d03b      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a60      	ldr	r2, [pc, #384]	; (8002150 <HAL_DMA_Init+0x1c8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d036      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a5f      	ldr	r2, [pc, #380]	; (8002154 <HAL_DMA_Init+0x1cc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d031      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a5d      	ldr	r2, [pc, #372]	; (8002158 <HAL_DMA_Init+0x1d0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02c      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a5c      	ldr	r2, [pc, #368]	; (800215c <HAL_DMA_Init+0x1d4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d027      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a5a      	ldr	r2, [pc, #360]	; (8002160 <HAL_DMA_Init+0x1d8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d022      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a59      	ldr	r2, [pc, #356]	; (8002164 <HAL_DMA_Init+0x1dc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d01d      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a57      	ldr	r2, [pc, #348]	; (8002168 <HAL_DMA_Init+0x1e0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d018      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a56      	ldr	r2, [pc, #344]	; (800216c <HAL_DMA_Init+0x1e4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a54      	ldr	r2, [pc, #336]	; (8002170 <HAL_DMA_Init+0x1e8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00e      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a53      	ldr	r2, [pc, #332]	; (8002174 <HAL_DMA_Init+0x1ec>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d009      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a51      	ldr	r2, [pc, #324]	; (8002178 <HAL_DMA_Init+0x1f0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_DMA_Init+0xb8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a50      	ldr	r2, [pc, #320]	; (800217c <HAL_DMA_Init+0x1f4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_DMA_Init+0xbc>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_DMA_Init+0xbe>
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 813c 	beq.w	80022c4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a37      	ldr	r2, [pc, #220]	; (8002140 <HAL_DMA_Init+0x1b8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d04a      	beq.n	80020fc <HAL_DMA_Init+0x174>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a36      	ldr	r2, [pc, #216]	; (8002144 <HAL_DMA_Init+0x1bc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d045      	beq.n	80020fc <HAL_DMA_Init+0x174>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a34      	ldr	r2, [pc, #208]	; (8002148 <HAL_DMA_Init+0x1c0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d040      	beq.n	80020fc <HAL_DMA_Init+0x174>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a33      	ldr	r2, [pc, #204]	; (800214c <HAL_DMA_Init+0x1c4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d03b      	beq.n	80020fc <HAL_DMA_Init+0x174>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_DMA_Init+0x1c8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d036      	beq.n	80020fc <HAL_DMA_Init+0x174>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a30      	ldr	r2, [pc, #192]	; (8002154 <HAL_DMA_Init+0x1cc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d031      	beq.n	80020fc <HAL_DMA_Init+0x174>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2e      	ldr	r2, [pc, #184]	; (8002158 <HAL_DMA_Init+0x1d0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02c      	beq.n	80020fc <HAL_DMA_Init+0x174>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2d      	ldr	r2, [pc, #180]	; (800215c <HAL_DMA_Init+0x1d4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d027      	beq.n	80020fc <HAL_DMA_Init+0x174>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <HAL_DMA_Init+0x1d8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d022      	beq.n	80020fc <HAL_DMA_Init+0x174>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <HAL_DMA_Init+0x1dc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d01d      	beq.n	80020fc <HAL_DMA_Init+0x174>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a28      	ldr	r2, [pc, #160]	; (8002168 <HAL_DMA_Init+0x1e0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d018      	beq.n	80020fc <HAL_DMA_Init+0x174>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_DMA_Init+0x1e4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_DMA_Init+0x174>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a25      	ldr	r2, [pc, #148]	; (8002170 <HAL_DMA_Init+0x1e8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <HAL_DMA_Init+0x174>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a24      	ldr	r2, [pc, #144]	; (8002174 <HAL_DMA_Init+0x1ec>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_DMA_Init+0x174>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a22      	ldr	r2, [pc, #136]	; (8002178 <HAL_DMA_Init+0x1f0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_DMA_Init+0x174>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <HAL_DMA_Init+0x1f4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d108      	bne.n	800210e <HAL_DMA_Init+0x186>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e007      	b.n	800211e <HAL_DMA_Init+0x196>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800211e:	e02f      	b.n	8002180 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002120:	f7ff fcfa 	bl	8001b18 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b05      	cmp	r3, #5
 800212c:	d928      	bls.n	8002180 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2203      	movs	r2, #3
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e244      	b.n	80025ca <HAL_DMA_Init+0x642>
 8002140:	40020010 	.word	0x40020010
 8002144:	40020028 	.word	0x40020028
 8002148:	40020040 	.word	0x40020040
 800214c:	40020058 	.word	0x40020058
 8002150:	40020070 	.word	0x40020070
 8002154:	40020088 	.word	0x40020088
 8002158:	400200a0 	.word	0x400200a0
 800215c:	400200b8 	.word	0x400200b8
 8002160:	40020410 	.word	0x40020410
 8002164:	40020428 	.word	0x40020428
 8002168:	40020440 	.word	0x40020440
 800216c:	40020458 	.word	0x40020458
 8002170:	40020470 	.word	0x40020470
 8002174:	40020488 	.word	0x40020488
 8002178:	400204a0 	.word	0x400204a0
 800217c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1c8      	bne.n	8002120 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4b84      	ldr	r3, [pc, #528]	; (80023ac <HAL_DMA_Init+0x424>)
 800219a:	4013      	ands	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d107      	bne.n	80021e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	4313      	orrs	r3, r2
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b28      	cmp	r3, #40	; 0x28
 80021ea:	d903      	bls.n	80021f4 <HAL_DMA_Init+0x26c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b2e      	cmp	r3, #46	; 0x2e
 80021f2:	d91f      	bls.n	8002234 <HAL_DMA_Init+0x2ac>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b3e      	cmp	r3, #62	; 0x3e
 80021fa:	d903      	bls.n	8002204 <HAL_DMA_Init+0x27c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b42      	cmp	r3, #66	; 0x42
 8002202:	d917      	bls.n	8002234 <HAL_DMA_Init+0x2ac>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b46      	cmp	r3, #70	; 0x46
 800220a:	d903      	bls.n	8002214 <HAL_DMA_Init+0x28c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b48      	cmp	r3, #72	; 0x48
 8002212:	d90f      	bls.n	8002234 <HAL_DMA_Init+0x2ac>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b4e      	cmp	r3, #78	; 0x4e
 800221a:	d903      	bls.n	8002224 <HAL_DMA_Init+0x29c>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b52      	cmp	r3, #82	; 0x52
 8002222:	d907      	bls.n	8002234 <HAL_DMA_Init+0x2ac>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b73      	cmp	r3, #115	; 0x73
 800222a:	d905      	bls.n	8002238 <HAL_DMA_Init+0x2b0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b77      	cmp	r3, #119	; 0x77
 8002232:	d801      	bhi.n	8002238 <HAL_DMA_Init+0x2b0>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_DMA_Init+0x2b2>
 8002238:	2300      	movs	r3, #0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002244:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f023 0307 	bic.w	r3, r3, #7
 800225c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	2b04      	cmp	r3, #4
 800226e:	d117      	bne.n	80022a0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00e      	beq.n	80022a0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f002 f82a 	bl	80042dc <DMA_CheckFifoParam>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e194      	b.n	80025ca <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f001 ff65 	bl	8004178 <DMA_CalcBaseAndBitshift>
 80022ae:	4603      	mov	r3, r0
 80022b0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	223f      	movs	r2, #63	; 0x3f
 80022bc:	409a      	lsls	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	e0ca      	b.n	800245a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a39      	ldr	r2, [pc, #228]	; (80023b0 <HAL_DMA_Init+0x428>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d022      	beq.n	8002314 <HAL_DMA_Init+0x38c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a38      	ldr	r2, [pc, #224]	; (80023b4 <HAL_DMA_Init+0x42c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d01d      	beq.n	8002314 <HAL_DMA_Init+0x38c>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a36      	ldr	r2, [pc, #216]	; (80023b8 <HAL_DMA_Init+0x430>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d018      	beq.n	8002314 <HAL_DMA_Init+0x38c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a35      	ldr	r2, [pc, #212]	; (80023bc <HAL_DMA_Init+0x434>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_DMA_Init+0x38c>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a33      	ldr	r2, [pc, #204]	; (80023c0 <HAL_DMA_Init+0x438>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00e      	beq.n	8002314 <HAL_DMA_Init+0x38c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a32      	ldr	r2, [pc, #200]	; (80023c4 <HAL_DMA_Init+0x43c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_DMA_Init+0x38c>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a30      	ldr	r2, [pc, #192]	; (80023c8 <HAL_DMA_Init+0x440>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_DMA_Init+0x38c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2f      	ldr	r2, [pc, #188]	; (80023cc <HAL_DMA_Init+0x444>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_DMA_Init+0x390>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_DMA_Init+0x392>
 8002318:	2300      	movs	r3, #0
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8094 	beq.w	8002448 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <HAL_DMA_Init+0x428>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d021      	beq.n	800236e <HAL_DMA_Init+0x3e6>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <HAL_DMA_Init+0x42c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d01c      	beq.n	800236e <HAL_DMA_Init+0x3e6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <HAL_DMA_Init+0x430>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d017      	beq.n	800236e <HAL_DMA_Init+0x3e6>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <HAL_DMA_Init+0x434>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d012      	beq.n	800236e <HAL_DMA_Init+0x3e6>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_DMA_Init+0x438>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_DMA_Init+0x3e6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <HAL_DMA_Init+0x43c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d008      	beq.n	800236e <HAL_DMA_Init+0x3e6>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <HAL_DMA_Init+0x440>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d003      	beq.n	800236e <HAL_DMA_Init+0x3e6>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a18      	ldr	r2, [pc, #96]	; (80023cc <HAL_DMA_Init+0x444>)
 800236c:	4293      	cmp	r3, r2
 800236e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_DMA_Init+0x448>)
 800238c:	4013      	ands	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d01d      	beq.n	80023d4 <HAL_DMA_Init+0x44c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d102      	bne.n	80023a6 <HAL_DMA_Init+0x41e>
 80023a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023a4:	e017      	b.n	80023d6 <HAL_DMA_Init+0x44e>
 80023a6:	2300      	movs	r3, #0
 80023a8:	e015      	b.n	80023d6 <HAL_DMA_Init+0x44e>
 80023aa:	bf00      	nop
 80023ac:	fe10803f 	.word	0xfe10803f
 80023b0:	58025408 	.word	0x58025408
 80023b4:	5802541c 	.word	0x5802541c
 80023b8:	58025430 	.word	0x58025430
 80023bc:	58025444 	.word	0x58025444
 80023c0:	58025458 	.word	0x58025458
 80023c4:	5802546c 	.word	0x5802546c
 80023c8:	58025480 	.word	0x58025480
 80023cc:	58025494 	.word	0x58025494
 80023d0:	fffe000f 	.word	0xfffe000f
 80023d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68d2      	ldr	r2, [r2, #12]
 80023da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002404:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	4b6e      	ldr	r3, [pc, #440]	; (80025d4 <HAL_DMA_Init+0x64c>)
 800241c:	4413      	add	r3, r2
 800241e:	4a6e      	ldr	r2, [pc, #440]	; (80025d8 <HAL_DMA_Init+0x650>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	009a      	lsls	r2, r3, #2
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f001 fea3 	bl	8004178 <DMA_CalcBaseAndBitshift>
 8002432:	4603      	mov	r3, r0
 8002434:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	2201      	movs	r2, #1
 8002440:	409a      	lsls	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	e008      	b.n	800245a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2240      	movs	r2, #64	; 0x40
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0b7      	b.n	80025ca <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a5f      	ldr	r2, [pc, #380]	; (80025dc <HAL_DMA_Init+0x654>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d072      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a5d      	ldr	r2, [pc, #372]	; (80025e0 <HAL_DMA_Init+0x658>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d06d      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a5c      	ldr	r2, [pc, #368]	; (80025e4 <HAL_DMA_Init+0x65c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d068      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5a      	ldr	r2, [pc, #360]	; (80025e8 <HAL_DMA_Init+0x660>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d063      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a59      	ldr	r2, [pc, #356]	; (80025ec <HAL_DMA_Init+0x664>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d05e      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a57      	ldr	r2, [pc, #348]	; (80025f0 <HAL_DMA_Init+0x668>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d059      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a56      	ldr	r2, [pc, #344]	; (80025f4 <HAL_DMA_Init+0x66c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d054      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a54      	ldr	r2, [pc, #336]	; (80025f8 <HAL_DMA_Init+0x670>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d04f      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a53      	ldr	r2, [pc, #332]	; (80025fc <HAL_DMA_Init+0x674>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d04a      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a51      	ldr	r2, [pc, #324]	; (8002600 <HAL_DMA_Init+0x678>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d045      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a50      	ldr	r2, [pc, #320]	; (8002604 <HAL_DMA_Init+0x67c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d040      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a4e      	ldr	r2, [pc, #312]	; (8002608 <HAL_DMA_Init+0x680>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d03b      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a4d      	ldr	r2, [pc, #308]	; (800260c <HAL_DMA_Init+0x684>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d036      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a4b      	ldr	r2, [pc, #300]	; (8002610 <HAL_DMA_Init+0x688>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d031      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a4a      	ldr	r2, [pc, #296]	; (8002614 <HAL_DMA_Init+0x68c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d02c      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a48      	ldr	r2, [pc, #288]	; (8002618 <HAL_DMA_Init+0x690>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d027      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a47      	ldr	r2, [pc, #284]	; (800261c <HAL_DMA_Init+0x694>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d022      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a45      	ldr	r2, [pc, #276]	; (8002620 <HAL_DMA_Init+0x698>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01d      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a44      	ldr	r2, [pc, #272]	; (8002624 <HAL_DMA_Init+0x69c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d018      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a42      	ldr	r2, [pc, #264]	; (8002628 <HAL_DMA_Init+0x6a0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a41      	ldr	r2, [pc, #260]	; (800262c <HAL_DMA_Init+0x6a4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00e      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3f      	ldr	r2, [pc, #252]	; (8002630 <HAL_DMA_Init+0x6a8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a3e      	ldr	r2, [pc, #248]	; (8002634 <HAL_DMA_Init+0x6ac>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <HAL_DMA_Init+0x5c2>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a3c      	ldr	r2, [pc, #240]	; (8002638 <HAL_DMA_Init+0x6b0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_DMA_Init+0x5c6>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_DMA_Init+0x5c8>
 800254e:	2300      	movs	r3, #0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d032      	beq.n	80025ba <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f001 ff3d 	bl	80043d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b80      	cmp	r3, #128	; 0x80
 8002560:	d102      	bne.n	8002568 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800257c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d010      	beq.n	80025a8 <HAL_DMA_Init+0x620>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b08      	cmp	r3, #8
 800258c:	d80c      	bhi.n	80025a8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f001 ffba 	bl	8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	e008      	b.n	80025ba <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	a7fdabf8 	.word	0xa7fdabf8
 80025d8:	cccccccd 	.word	0xcccccccd
 80025dc:	40020010 	.word	0x40020010
 80025e0:	40020028 	.word	0x40020028
 80025e4:	40020040 	.word	0x40020040
 80025e8:	40020058 	.word	0x40020058
 80025ec:	40020070 	.word	0x40020070
 80025f0:	40020088 	.word	0x40020088
 80025f4:	400200a0 	.word	0x400200a0
 80025f8:	400200b8 	.word	0x400200b8
 80025fc:	40020410 	.word	0x40020410
 8002600:	40020428 	.word	0x40020428
 8002604:	40020440 	.word	0x40020440
 8002608:	40020458 	.word	0x40020458
 800260c:	40020470 	.word	0x40020470
 8002610:	40020488 	.word	0x40020488
 8002614:	400204a0 	.word	0x400204a0
 8002618:	400204b8 	.word	0x400204b8
 800261c:	58025408 	.word	0x58025408
 8002620:	5802541c 	.word	0x5802541c
 8002624:	58025430 	.word	0x58025430
 8002628:	58025444 	.word	0x58025444
 800262c:	58025458 	.word	0x58025458
 8002630:	5802546c 	.word	0x5802546c
 8002634:	58025480 	.word	0x58025480
 8002638:	58025494 	.word	0x58025494

0800263c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e226      	b.n	8002aa6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_DMA_Start_IT+0x2a>
 8002662:	2302      	movs	r3, #2
 8002664:	e21f      	b.n	8002aa6 <HAL_DMA_Start_IT+0x46a>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	f040 820a 	bne.w	8002a90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a68      	ldr	r2, [pc, #416]	; (8002830 <HAL_DMA_Start_IT+0x1f4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d04a      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a66      	ldr	r2, [pc, #408]	; (8002834 <HAL_DMA_Start_IT+0x1f8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d045      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_DMA_Start_IT+0x1fc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d040      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a63      	ldr	r2, [pc, #396]	; (800283c <HAL_DMA_Start_IT+0x200>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d03b      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a62      	ldr	r2, [pc, #392]	; (8002840 <HAL_DMA_Start_IT+0x204>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d036      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a60      	ldr	r2, [pc, #384]	; (8002844 <HAL_DMA_Start_IT+0x208>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d031      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5f      	ldr	r2, [pc, #380]	; (8002848 <HAL_DMA_Start_IT+0x20c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d02c      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a5d      	ldr	r2, [pc, #372]	; (800284c <HAL_DMA_Start_IT+0x210>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d027      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a5c      	ldr	r2, [pc, #368]	; (8002850 <HAL_DMA_Start_IT+0x214>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d022      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a5a      	ldr	r2, [pc, #360]	; (8002854 <HAL_DMA_Start_IT+0x218>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01d      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a59      	ldr	r2, [pc, #356]	; (8002858 <HAL_DMA_Start_IT+0x21c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d018      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a57      	ldr	r2, [pc, #348]	; (800285c <HAL_DMA_Start_IT+0x220>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a56      	ldr	r2, [pc, #344]	; (8002860 <HAL_DMA_Start_IT+0x224>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a54      	ldr	r2, [pc, #336]	; (8002864 <HAL_DMA_Start_IT+0x228>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a53      	ldr	r2, [pc, #332]	; (8002868 <HAL_DMA_Start_IT+0x22c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_DMA_Start_IT+0xee>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a51      	ldr	r2, [pc, #324]	; (800286c <HAL_DMA_Start_IT+0x230>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d108      	bne.n	800273c <HAL_DMA_Start_IT+0x100>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e007      	b.n	800274c <HAL_DMA_Start_IT+0x110>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f001 fb64 	bl	8003e20 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a34      	ldr	r2, [pc, #208]	; (8002830 <HAL_DMA_Start_IT+0x1f4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04a      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a33      	ldr	r2, [pc, #204]	; (8002834 <HAL_DMA_Start_IT+0x1f8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d045      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a31      	ldr	r2, [pc, #196]	; (8002838 <HAL_DMA_Start_IT+0x1fc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d040      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a30      	ldr	r2, [pc, #192]	; (800283c <HAL_DMA_Start_IT+0x200>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d03b      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2e      	ldr	r2, [pc, #184]	; (8002840 <HAL_DMA_Start_IT+0x204>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d036      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2d      	ldr	r2, [pc, #180]	; (8002844 <HAL_DMA_Start_IT+0x208>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d031      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a2b      	ldr	r2, [pc, #172]	; (8002848 <HAL_DMA_Start_IT+0x20c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02c      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a2a      	ldr	r2, [pc, #168]	; (800284c <HAL_DMA_Start_IT+0x210>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d027      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a28      	ldr	r2, [pc, #160]	; (8002850 <HAL_DMA_Start_IT+0x214>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d022      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_DMA_Start_IT+0x218>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d01d      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a25      	ldr	r2, [pc, #148]	; (8002858 <HAL_DMA_Start_IT+0x21c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d018      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a24      	ldr	r2, [pc, #144]	; (800285c <HAL_DMA_Start_IT+0x220>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a22      	ldr	r2, [pc, #136]	; (8002860 <HAL_DMA_Start_IT+0x224>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a21      	ldr	r2, [pc, #132]	; (8002864 <HAL_DMA_Start_IT+0x228>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <HAL_DMA_Start_IT+0x22c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_DMA_Start_IT+0x1bc>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_DMA_Start_IT+0x230>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_DMA_Start_IT+0x1c0>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_DMA_Start_IT+0x1c2>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d036      	beq.n	8002870 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 021e 	bic.w	r2, r3, #30
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0216 	orr.w	r2, r2, #22
 8002814:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d03e      	beq.n	800289c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0208 	orr.w	r2, r2, #8
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e035      	b.n	800289c <HAL_DMA_Start_IT+0x260>
 8002830:	40020010 	.word	0x40020010
 8002834:	40020028 	.word	0x40020028
 8002838:	40020040 	.word	0x40020040
 800283c:	40020058 	.word	0x40020058
 8002840:	40020070 	.word	0x40020070
 8002844:	40020088 	.word	0x40020088
 8002848:	400200a0 	.word	0x400200a0
 800284c:	400200b8 	.word	0x400200b8
 8002850:	40020410 	.word	0x40020410
 8002854:	40020428 	.word	0x40020428
 8002858:	40020440 	.word	0x40020440
 800285c:	40020458 	.word	0x40020458
 8002860:	40020470 	.word	0x40020470
 8002864:	40020488 	.word	0x40020488
 8002868:	400204a0 	.word	0x400204a0
 800286c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 020e 	bic.w	r2, r3, #14
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 020a 	orr.w	r2, r2, #10
 8002882:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0204 	orr.w	r2, r2, #4
 800289a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a83      	ldr	r2, [pc, #524]	; (8002ab0 <HAL_DMA_Start_IT+0x474>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d072      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a82      	ldr	r2, [pc, #520]	; (8002ab4 <HAL_DMA_Start_IT+0x478>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d06d      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a80      	ldr	r2, [pc, #512]	; (8002ab8 <HAL_DMA_Start_IT+0x47c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d068      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7f      	ldr	r2, [pc, #508]	; (8002abc <HAL_DMA_Start_IT+0x480>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d063      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a7d      	ldr	r2, [pc, #500]	; (8002ac0 <HAL_DMA_Start_IT+0x484>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d05e      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7c      	ldr	r2, [pc, #496]	; (8002ac4 <HAL_DMA_Start_IT+0x488>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d059      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a7a      	ldr	r2, [pc, #488]	; (8002ac8 <HAL_DMA_Start_IT+0x48c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d054      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a79      	ldr	r2, [pc, #484]	; (8002acc <HAL_DMA_Start_IT+0x490>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d04f      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a77      	ldr	r2, [pc, #476]	; (8002ad0 <HAL_DMA_Start_IT+0x494>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d04a      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a76      	ldr	r2, [pc, #472]	; (8002ad4 <HAL_DMA_Start_IT+0x498>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d045      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a74      	ldr	r2, [pc, #464]	; (8002ad8 <HAL_DMA_Start_IT+0x49c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d040      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a73      	ldr	r2, [pc, #460]	; (8002adc <HAL_DMA_Start_IT+0x4a0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d03b      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a71      	ldr	r2, [pc, #452]	; (8002ae0 <HAL_DMA_Start_IT+0x4a4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d036      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a70      	ldr	r2, [pc, #448]	; (8002ae4 <HAL_DMA_Start_IT+0x4a8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d031      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a6e      	ldr	r2, [pc, #440]	; (8002ae8 <HAL_DMA_Start_IT+0x4ac>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d02c      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6d      	ldr	r2, [pc, #436]	; (8002aec <HAL_DMA_Start_IT+0x4b0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d027      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6b      	ldr	r2, [pc, #428]	; (8002af0 <HAL_DMA_Start_IT+0x4b4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d022      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6a      	ldr	r2, [pc, #424]	; (8002af4 <HAL_DMA_Start_IT+0x4b8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d01d      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a68      	ldr	r2, [pc, #416]	; (8002af8 <HAL_DMA_Start_IT+0x4bc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d018      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a67      	ldr	r2, [pc, #412]	; (8002afc <HAL_DMA_Start_IT+0x4c0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d013      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a65      	ldr	r2, [pc, #404]	; (8002b00 <HAL_DMA_Start_IT+0x4c4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00e      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a64      	ldr	r2, [pc, #400]	; (8002b04 <HAL_DMA_Start_IT+0x4c8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a62      	ldr	r2, [pc, #392]	; (8002b08 <HAL_DMA_Start_IT+0x4cc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_DMA_Start_IT+0x350>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a61      	ldr	r2, [pc, #388]	; (8002b0c <HAL_DMA_Start_IT+0x4d0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_DMA_Start_IT+0x354>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_DMA_Start_IT+0x356>
 8002990:	2300      	movs	r3, #0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01a      	beq.n	80029cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a37      	ldr	r2, [pc, #220]	; (8002ab0 <HAL_DMA_Start_IT+0x474>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d04a      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a36      	ldr	r2, [pc, #216]	; (8002ab4 <HAL_DMA_Start_IT+0x478>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d045      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <HAL_DMA_Start_IT+0x47c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d040      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a33      	ldr	r2, [pc, #204]	; (8002abc <HAL_DMA_Start_IT+0x480>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d03b      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <HAL_DMA_Start_IT+0x484>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d036      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a30      	ldr	r2, [pc, #192]	; (8002ac4 <HAL_DMA_Start_IT+0x488>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d031      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_DMA_Start_IT+0x48c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d02c      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <HAL_DMA_Start_IT+0x490>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d027      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <HAL_DMA_Start_IT+0x494>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d022      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <HAL_DMA_Start_IT+0x498>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d01d      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <HAL_DMA_Start_IT+0x49c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d018      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a27      	ldr	r2, [pc, #156]	; (8002adc <HAL_DMA_Start_IT+0x4a0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <HAL_DMA_Start_IT+0x4a4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00e      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <HAL_DMA_Start_IT+0x4a8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d009      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_DMA_Start_IT+0x4ac>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_DMA_Start_IT+0x430>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <HAL_DMA_Start_IT+0x4b0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d108      	bne.n	8002a7e <HAL_DMA_Start_IT+0x442>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e012      	b.n	8002aa4 <HAL_DMA_Start_IT+0x468>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e009      	b.n	8002aa4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40020010 	.word	0x40020010
 8002ab4:	40020028 	.word	0x40020028
 8002ab8:	40020040 	.word	0x40020040
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	40020070 	.word	0x40020070
 8002ac4:	40020088 	.word	0x40020088
 8002ac8:	400200a0 	.word	0x400200a0
 8002acc:	400200b8 	.word	0x400200b8
 8002ad0:	40020410 	.word	0x40020410
 8002ad4:	40020428 	.word	0x40020428
 8002ad8:	40020440 	.word	0x40020440
 8002adc:	40020458 	.word	0x40020458
 8002ae0:	40020470 	.word	0x40020470
 8002ae4:	40020488 	.word	0x40020488
 8002ae8:	400204a0 	.word	0x400204a0
 8002aec:	400204b8 	.word	0x400204b8
 8002af0:	58025408 	.word	0x58025408
 8002af4:	5802541c 	.word	0x5802541c
 8002af8:	58025430 	.word	0x58025430
 8002afc:	58025444 	.word	0x58025444
 8002b00:	58025458 	.word	0x58025458
 8002b04:	5802546c 	.word	0x5802546c
 8002b08:	58025480 	.word	0x58025480
 8002b0c:	58025494 	.word	0x58025494

08002b10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e205      	b.n	8002f2e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d004      	beq.n	8002b38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e1fa      	b.n	8002f2e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a8c      	ldr	r2, [pc, #560]	; (8002d70 <HAL_DMA_Abort_IT+0x260>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d04a      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a8b      	ldr	r2, [pc, #556]	; (8002d74 <HAL_DMA_Abort_IT+0x264>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d045      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a89      	ldr	r2, [pc, #548]	; (8002d78 <HAL_DMA_Abort_IT+0x268>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d040      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a88      	ldr	r2, [pc, #544]	; (8002d7c <HAL_DMA_Abort_IT+0x26c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d03b      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a86      	ldr	r2, [pc, #536]	; (8002d80 <HAL_DMA_Abort_IT+0x270>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d036      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a85      	ldr	r2, [pc, #532]	; (8002d84 <HAL_DMA_Abort_IT+0x274>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d031      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a83      	ldr	r2, [pc, #524]	; (8002d88 <HAL_DMA_Abort_IT+0x278>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02c      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a82      	ldr	r2, [pc, #520]	; (8002d8c <HAL_DMA_Abort_IT+0x27c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d027      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a80      	ldr	r2, [pc, #512]	; (8002d90 <HAL_DMA_Abort_IT+0x280>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d022      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7f      	ldr	r2, [pc, #508]	; (8002d94 <HAL_DMA_Abort_IT+0x284>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d01d      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a7d      	ldr	r2, [pc, #500]	; (8002d98 <HAL_DMA_Abort_IT+0x288>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d018      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7c      	ldr	r2, [pc, #496]	; (8002d9c <HAL_DMA_Abort_IT+0x28c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a7a      	ldr	r2, [pc, #488]	; (8002da0 <HAL_DMA_Abort_IT+0x290>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00e      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a79      	ldr	r2, [pc, #484]	; (8002da4 <HAL_DMA_Abort_IT+0x294>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a77      	ldr	r2, [pc, #476]	; (8002da8 <HAL_DMA_Abort_IT+0x298>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a76      	ldr	r2, [pc, #472]	; (8002dac <HAL_DMA_Abort_IT+0x29c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d101      	bne.n	8002bdc <HAL_DMA_Abort_IT+0xcc>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_DMA_Abort_IT+0xce>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d065      	beq.n	8002cae <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2204      	movs	r2, #4
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a60      	ldr	r2, [pc, #384]	; (8002d70 <HAL_DMA_Abort_IT+0x260>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d04a      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5e      	ldr	r2, [pc, #376]	; (8002d74 <HAL_DMA_Abort_IT+0x264>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d045      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5d      	ldr	r2, [pc, #372]	; (8002d78 <HAL_DMA_Abort_IT+0x268>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d040      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5b      	ldr	r2, [pc, #364]	; (8002d7c <HAL_DMA_Abort_IT+0x26c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d03b      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5a      	ldr	r2, [pc, #360]	; (8002d80 <HAL_DMA_Abort_IT+0x270>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d036      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <HAL_DMA_Abort_IT+0x274>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d031      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a57      	ldr	r2, [pc, #348]	; (8002d88 <HAL_DMA_Abort_IT+0x278>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d02c      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a55      	ldr	r2, [pc, #340]	; (8002d8c <HAL_DMA_Abort_IT+0x27c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d027      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a54      	ldr	r2, [pc, #336]	; (8002d90 <HAL_DMA_Abort_IT+0x280>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d022      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a52      	ldr	r2, [pc, #328]	; (8002d94 <HAL_DMA_Abort_IT+0x284>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01d      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a51      	ldr	r2, [pc, #324]	; (8002d98 <HAL_DMA_Abort_IT+0x288>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d018      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4f      	ldr	r2, [pc, #316]	; (8002d9c <HAL_DMA_Abort_IT+0x28c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a4e      	ldr	r2, [pc, #312]	; (8002da0 <HAL_DMA_Abort_IT+0x290>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_DMA_Abort_IT+0x294>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d009      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <HAL_DMA_Abort_IT+0x298>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x17a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a49      	ldr	r2, [pc, #292]	; (8002dac <HAL_DMA_Abort_IT+0x29c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d108      	bne.n	8002c9c <HAL_DMA_Abort_IT+0x18c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e147      	b.n	8002f2c <HAL_DMA_Abort_IT+0x41c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e13e      	b.n	8002f2c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 020e 	bic.w	r2, r2, #14
 8002cbc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <HAL_DMA_Abort_IT+0x260>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d04a      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a29      	ldr	r2, [pc, #164]	; (8002d74 <HAL_DMA_Abort_IT+0x264>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d045      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a28      	ldr	r2, [pc, #160]	; (8002d78 <HAL_DMA_Abort_IT+0x268>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d040      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <HAL_DMA_Abort_IT+0x26c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d03b      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a25      	ldr	r2, [pc, #148]	; (8002d80 <HAL_DMA_Abort_IT+0x270>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d036      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <HAL_DMA_Abort_IT+0x274>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d031      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <HAL_DMA_Abort_IT+0x278>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d02c      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <HAL_DMA_Abort_IT+0x27c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d027      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_DMA_Abort_IT+0x280>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <HAL_DMA_Abort_IT+0x284>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01d      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_DMA_Abort_IT+0x288>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d018      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <HAL_DMA_Abort_IT+0x28c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_DMA_Abort_IT+0x290>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00e      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <HAL_DMA_Abort_IT+0x294>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a16      	ldr	r2, [pc, #88]	; (8002da8 <HAL_DMA_Abort_IT+0x298>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d004      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x24e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_DMA_Abort_IT+0x29c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d128      	bne.n	8002db0 <HAL_DMA_Abort_IT+0x2a0>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e027      	b.n	8002dc0 <HAL_DMA_Abort_IT+0x2b0>
 8002d70:	40020010 	.word	0x40020010
 8002d74:	40020028 	.word	0x40020028
 8002d78:	40020040 	.word	0x40020040
 8002d7c:	40020058 	.word	0x40020058
 8002d80:	40020070 	.word	0x40020070
 8002d84:	40020088 	.word	0x40020088
 8002d88:	400200a0 	.word	0x400200a0
 8002d8c:	400200b8 	.word	0x400200b8
 8002d90:	40020410 	.word	0x40020410
 8002d94:	40020428 	.word	0x40020428
 8002d98:	40020440 	.word	0x40020440
 8002d9c:	40020458 	.word	0x40020458
 8002da0:	40020470 	.word	0x40020470
 8002da4:	40020488 	.word	0x40020488
 8002da8:	400204a0 	.word	0x400204a0
 8002dac:	400204b8 	.word	0x400204b8
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a5c      	ldr	r2, [pc, #368]	; (8002f38 <HAL_DMA_Abort_IT+0x428>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d072      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a5b      	ldr	r2, [pc, #364]	; (8002f3c <HAL_DMA_Abort_IT+0x42c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d06d      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a59      	ldr	r2, [pc, #356]	; (8002f40 <HAL_DMA_Abort_IT+0x430>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d068      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_DMA_Abort_IT+0x434>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d063      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a56      	ldr	r2, [pc, #344]	; (8002f48 <HAL_DMA_Abort_IT+0x438>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d05e      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a55      	ldr	r2, [pc, #340]	; (8002f4c <HAL_DMA_Abort_IT+0x43c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d059      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a53      	ldr	r2, [pc, #332]	; (8002f50 <HAL_DMA_Abort_IT+0x440>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d054      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_DMA_Abort_IT+0x444>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d04f      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a50      	ldr	r2, [pc, #320]	; (8002f58 <HAL_DMA_Abort_IT+0x448>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d04a      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a4f      	ldr	r2, [pc, #316]	; (8002f5c <HAL_DMA_Abort_IT+0x44c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d045      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a4d      	ldr	r2, [pc, #308]	; (8002f60 <HAL_DMA_Abort_IT+0x450>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d040      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a4c      	ldr	r2, [pc, #304]	; (8002f64 <HAL_DMA_Abort_IT+0x454>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d03b      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a4a      	ldr	r2, [pc, #296]	; (8002f68 <HAL_DMA_Abort_IT+0x458>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d036      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a49      	ldr	r2, [pc, #292]	; (8002f6c <HAL_DMA_Abort_IT+0x45c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d031      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a47      	ldr	r2, [pc, #284]	; (8002f70 <HAL_DMA_Abort_IT+0x460>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d02c      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a46      	ldr	r2, [pc, #280]	; (8002f74 <HAL_DMA_Abort_IT+0x464>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d027      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a44      	ldr	r2, [pc, #272]	; (8002f78 <HAL_DMA_Abort_IT+0x468>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d022      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a43      	ldr	r2, [pc, #268]	; (8002f7c <HAL_DMA_Abort_IT+0x46c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d01d      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a41      	ldr	r2, [pc, #260]	; (8002f80 <HAL_DMA_Abort_IT+0x470>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d018      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a40      	ldr	r2, [pc, #256]	; (8002f84 <HAL_DMA_Abort_IT+0x474>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3e      	ldr	r2, [pc, #248]	; (8002f88 <HAL_DMA_Abort_IT+0x478>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00e      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a3d      	ldr	r2, [pc, #244]	; (8002f8c <HAL_DMA_Abort_IT+0x47c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a3b      	ldr	r2, [pc, #236]	; (8002f90 <HAL_DMA_Abort_IT+0x480>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x3a0>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a3a      	ldr	r2, [pc, #232]	; (8002f94 <HAL_DMA_Abort_IT+0x484>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_DMA_Abort_IT+0x3a4>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_DMA_Abort_IT+0x3a6>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2201      	movs	r2, #1
 8002eda:	409a      	lsls	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ee8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00c      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40020010 	.word	0x40020010
 8002f3c:	40020028 	.word	0x40020028
 8002f40:	40020040 	.word	0x40020040
 8002f44:	40020058 	.word	0x40020058
 8002f48:	40020070 	.word	0x40020070
 8002f4c:	40020088 	.word	0x40020088
 8002f50:	400200a0 	.word	0x400200a0
 8002f54:	400200b8 	.word	0x400200b8
 8002f58:	40020410 	.word	0x40020410
 8002f5c:	40020428 	.word	0x40020428
 8002f60:	40020440 	.word	0x40020440
 8002f64:	40020458 	.word	0x40020458
 8002f68:	40020470 	.word	0x40020470
 8002f6c:	40020488 	.word	0x40020488
 8002f70:	400204a0 	.word	0x400204a0
 8002f74:	400204b8 	.word	0x400204b8
 8002f78:	58025408 	.word	0x58025408
 8002f7c:	5802541c 	.word	0x5802541c
 8002f80:	58025430 	.word	0x58025430
 8002f84:	58025444 	.word	0x58025444
 8002f88:	58025458 	.word	0x58025458
 8002f8c:	5802546c 	.word	0x5802546c
 8002f90:	58025480 	.word	0x58025480
 8002f94:	58025494 	.word	0x58025494

08002f98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	; 0x28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa4:	4b67      	ldr	r3, [pc, #412]	; (8003144 <HAL_DMA_IRQHandler+0x1ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a67      	ldr	r2, [pc, #412]	; (8003148 <HAL_DMA_IRQHandler+0x1b0>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0a9b      	lsrs	r3, r3, #10
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a5f      	ldr	r2, [pc, #380]	; (800314c <HAL_DMA_IRQHandler+0x1b4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d04a      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5d      	ldr	r2, [pc, #372]	; (8003150 <HAL_DMA_IRQHandler+0x1b8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d045      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a5c      	ldr	r2, [pc, #368]	; (8003154 <HAL_DMA_IRQHandler+0x1bc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d040      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5a      	ldr	r2, [pc, #360]	; (8003158 <HAL_DMA_IRQHandler+0x1c0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d03b      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a59      	ldr	r2, [pc, #356]	; (800315c <HAL_DMA_IRQHandler+0x1c4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d036      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a57      	ldr	r2, [pc, #348]	; (8003160 <HAL_DMA_IRQHandler+0x1c8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d031      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a56      	ldr	r2, [pc, #344]	; (8003164 <HAL_DMA_IRQHandler+0x1cc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d02c      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a54      	ldr	r2, [pc, #336]	; (8003168 <HAL_DMA_IRQHandler+0x1d0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d027      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a53      	ldr	r2, [pc, #332]	; (800316c <HAL_DMA_IRQHandler+0x1d4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d022      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a51      	ldr	r2, [pc, #324]	; (8003170 <HAL_DMA_IRQHandler+0x1d8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01d      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a50      	ldr	r2, [pc, #320]	; (8003174 <HAL_DMA_IRQHandler+0x1dc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d018      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a4e      	ldr	r2, [pc, #312]	; (8003178 <HAL_DMA_IRQHandler+0x1e0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a4d      	ldr	r2, [pc, #308]	; (800317c <HAL_DMA_IRQHandler+0x1e4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a4b      	ldr	r2, [pc, #300]	; (8003180 <HAL_DMA_IRQHandler+0x1e8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a4a      	ldr	r2, [pc, #296]	; (8003184 <HAL_DMA_IRQHandler+0x1ec>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_DMA_IRQHandler+0xd2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a48      	ldr	r2, [pc, #288]	; (8003188 <HAL_DMA_IRQHandler+0x1f0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_DMA_IRQHandler+0xd6>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_DMA_IRQHandler+0xd8>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 842b 	beq.w	80038cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2208      	movs	r2, #8
 8003080:	409a      	lsls	r2, r3
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80a2 	beq.w	80031d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2e      	ldr	r2, [pc, #184]	; (800314c <HAL_DMA_IRQHandler+0x1b4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d04a      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2d      	ldr	r2, [pc, #180]	; (8003150 <HAL_DMA_IRQHandler+0x1b8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d045      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2b      	ldr	r2, [pc, #172]	; (8003154 <HAL_DMA_IRQHandler+0x1bc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d040      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2a      	ldr	r2, [pc, #168]	; (8003158 <HAL_DMA_IRQHandler+0x1c0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d03b      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a28      	ldr	r2, [pc, #160]	; (800315c <HAL_DMA_IRQHandler+0x1c4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d036      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a27      	ldr	r2, [pc, #156]	; (8003160 <HAL_DMA_IRQHandler+0x1c8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d031      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a25      	ldr	r2, [pc, #148]	; (8003164 <HAL_DMA_IRQHandler+0x1cc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d02c      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a24      	ldr	r2, [pc, #144]	; (8003168 <HAL_DMA_IRQHandler+0x1d0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d027      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_DMA_IRQHandler+0x1d4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d022      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a21      	ldr	r2, [pc, #132]	; (8003170 <HAL_DMA_IRQHandler+0x1d8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d01d      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <HAL_DMA_IRQHandler+0x1dc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d018      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <HAL_DMA_IRQHandler+0x1e0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d013      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1c      	ldr	r2, [pc, #112]	; (800317c <HAL_DMA_IRQHandler+0x1e4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00e      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <HAL_DMA_IRQHandler+0x1e8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a19      	ldr	r2, [pc, #100]	; (8003184 <HAL_DMA_IRQHandler+0x1ec>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <HAL_DMA_IRQHandler+0x194>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a18      	ldr	r2, [pc, #96]	; (8003188 <HAL_DMA_IRQHandler+0x1f0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d12f      	bne.n	800318c <HAL_DMA_IRQHandler+0x1f4>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	e02e      	b.n	80031a0 <HAL_DMA_IRQHandler+0x208>
 8003142:	bf00      	nop
 8003144:	2400041c 	.word	0x2400041c
 8003148:	1b4e81b5 	.word	0x1b4e81b5
 800314c:	40020010 	.word	0x40020010
 8003150:	40020028 	.word	0x40020028
 8003154:	40020040 	.word	0x40020040
 8003158:	40020058 	.word	0x40020058
 800315c:	40020070 	.word	0x40020070
 8003160:	40020088 	.word	0x40020088
 8003164:	400200a0 	.word	0x400200a0
 8003168:	400200b8 	.word	0x400200b8
 800316c:	40020410 	.word	0x40020410
 8003170:	40020428 	.word	0x40020428
 8003174:	40020440 	.word	0x40020440
 8003178:	40020458 	.word	0x40020458
 800317c:	40020470 	.word	0x40020470
 8003180:	40020488 	.word	0x40020488
 8003184:	400204a0 	.word	0x400204a0
 8003188:	400204b8 	.word	0x400204b8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf14      	ite	ne
 800319a:	2301      	movne	r3, #1
 800319c:	2300      	moveq	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d015      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0204 	bic.w	r2, r2, #4
 80031b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	2208      	movs	r2, #8
 80031be:	409a      	lsls	r2, r3
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	f043 0201 	orr.w	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d06e      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a69      	ldr	r2, [pc, #420]	; (8003390 <HAL_DMA_IRQHandler+0x3f8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d04a      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a67      	ldr	r2, [pc, #412]	; (8003394 <HAL_DMA_IRQHandler+0x3fc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d045      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a66      	ldr	r2, [pc, #408]	; (8003398 <HAL_DMA_IRQHandler+0x400>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d040      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a64      	ldr	r2, [pc, #400]	; (800339c <HAL_DMA_IRQHandler+0x404>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d03b      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a63      	ldr	r2, [pc, #396]	; (80033a0 <HAL_DMA_IRQHandler+0x408>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d036      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a61      	ldr	r2, [pc, #388]	; (80033a4 <HAL_DMA_IRQHandler+0x40c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d031      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a60      	ldr	r2, [pc, #384]	; (80033a8 <HAL_DMA_IRQHandler+0x410>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d02c      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5e      	ldr	r2, [pc, #376]	; (80033ac <HAL_DMA_IRQHandler+0x414>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d027      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a5d      	ldr	r2, [pc, #372]	; (80033b0 <HAL_DMA_IRQHandler+0x418>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d022      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a5b      	ldr	r2, [pc, #364]	; (80033b4 <HAL_DMA_IRQHandler+0x41c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01d      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a5a      	ldr	r2, [pc, #360]	; (80033b8 <HAL_DMA_IRQHandler+0x420>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d018      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_DMA_IRQHandler+0x424>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <HAL_DMA_IRQHandler+0x428>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a55      	ldr	r2, [pc, #340]	; (80033c4 <HAL_DMA_IRQHandler+0x42c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d009      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a54      	ldr	r2, [pc, #336]	; (80033c8 <HAL_DMA_IRQHandler+0x430>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2ee>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a52      	ldr	r2, [pc, #328]	; (80033cc <HAL_DMA_IRQHandler+0x434>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10a      	bne.n	800329c <HAL_DMA_IRQHandler+0x304>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e003      	b.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2201      	movs	r2, #1
 80032b2:	409a      	lsls	r2, r3
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f043 0202 	orr.w	r2, r3, #2
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	2204      	movs	r2, #4
 80032ce:	409a      	lsls	r2, r3
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 808f 	beq.w	80033f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2c      	ldr	r2, [pc, #176]	; (8003390 <HAL_DMA_IRQHandler+0x3f8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d04a      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2a      	ldr	r2, [pc, #168]	; (8003394 <HAL_DMA_IRQHandler+0x3fc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d045      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a29      	ldr	r2, [pc, #164]	; (8003398 <HAL_DMA_IRQHandler+0x400>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d040      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a27      	ldr	r2, [pc, #156]	; (800339c <HAL_DMA_IRQHandler+0x404>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d03b      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <HAL_DMA_IRQHandler+0x408>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d036      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <HAL_DMA_IRQHandler+0x40c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d031      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <HAL_DMA_IRQHandler+0x410>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d02c      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <HAL_DMA_IRQHandler+0x414>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d027      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <HAL_DMA_IRQHandler+0x418>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d022      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <HAL_DMA_IRQHandler+0x41c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01d      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <HAL_DMA_IRQHandler+0x420>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d018      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <HAL_DMA_IRQHandler+0x424>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <HAL_DMA_IRQHandler+0x428>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00e      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_DMA_IRQHandler+0x42c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_DMA_IRQHandler+0x430>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_DMA_IRQHandler+0x3e2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a15      	ldr	r2, [pc, #84]	; (80033cc <HAL_DMA_IRQHandler+0x434>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d12a      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x438>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e023      	b.n	80033d8 <HAL_DMA_IRQHandler+0x440>
 8003390:	40020010 	.word	0x40020010
 8003394:	40020028 	.word	0x40020028
 8003398:	40020040 	.word	0x40020040
 800339c:	40020058 	.word	0x40020058
 80033a0:	40020070 	.word	0x40020070
 80033a4:	40020088 	.word	0x40020088
 80033a8:	400200a0 	.word	0x400200a0
 80033ac:	400200b8 	.word	0x400200b8
 80033b0:	40020410 	.word	0x40020410
 80033b4:	40020428 	.word	0x40020428
 80033b8:	40020440 	.word	0x40020440
 80033bc:	40020458 	.word	0x40020458
 80033c0:	40020470 	.word	0x40020470
 80033c4:	40020488 	.word	0x40020488
 80033c8:	400204a0 	.word	0x400204a0
 80033cc:	400204b8 	.word	0x400204b8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	2204      	movs	r2, #4
 80033e6:	409a      	lsls	r2, r3
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f043 0204 	orr.w	r2, r3, #4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	2210      	movs	r2, #16
 8003402:	409a      	lsls	r2, r3
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a6 	beq.w	800355a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a85      	ldr	r2, [pc, #532]	; (8003628 <HAL_DMA_IRQHandler+0x690>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d04a      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a83      	ldr	r2, [pc, #524]	; (800362c <HAL_DMA_IRQHandler+0x694>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d045      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a82      	ldr	r2, [pc, #520]	; (8003630 <HAL_DMA_IRQHandler+0x698>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d040      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a80      	ldr	r2, [pc, #512]	; (8003634 <HAL_DMA_IRQHandler+0x69c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d03b      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7f      	ldr	r2, [pc, #508]	; (8003638 <HAL_DMA_IRQHandler+0x6a0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d036      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7d      	ldr	r2, [pc, #500]	; (800363c <HAL_DMA_IRQHandler+0x6a4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d031      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7c      	ldr	r2, [pc, #496]	; (8003640 <HAL_DMA_IRQHandler+0x6a8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d02c      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a7a      	ldr	r2, [pc, #488]	; (8003644 <HAL_DMA_IRQHandler+0x6ac>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d027      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a79      	ldr	r2, [pc, #484]	; (8003648 <HAL_DMA_IRQHandler+0x6b0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d022      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a77      	ldr	r2, [pc, #476]	; (800364c <HAL_DMA_IRQHandler+0x6b4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01d      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a76      	ldr	r2, [pc, #472]	; (8003650 <HAL_DMA_IRQHandler+0x6b8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d018      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a74      	ldr	r2, [pc, #464]	; (8003654 <HAL_DMA_IRQHandler+0x6bc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a73      	ldr	r2, [pc, #460]	; (8003658 <HAL_DMA_IRQHandler+0x6c0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00e      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a71      	ldr	r2, [pc, #452]	; (800365c <HAL_DMA_IRQHandler+0x6c4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d009      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a70      	ldr	r2, [pc, #448]	; (8003660 <HAL_DMA_IRQHandler+0x6c8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_DMA_IRQHandler+0x516>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6e      	ldr	r2, [pc, #440]	; (8003664 <HAL_DMA_IRQHandler+0x6cc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10a      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x52c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e009      	b.n	80034d8 <HAL_DMA_IRQHandler+0x540>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d03e      	beq.n	800355a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2210      	movs	r2, #16
 80034e6:	409a      	lsls	r2, r3
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d018      	beq.n	800352c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d108      	bne.n	800351a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d024      	beq.n	800355a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	e01f      	b.n	800355a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01b      	beq.n	800355a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
 800352a:	e016      	b.n	800355a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0208 	bic.w	r2, r2, #8
 8003548:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2220      	movs	r2, #32
 8003564:	409a      	lsls	r2, r3
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8110 	beq.w	8003790 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2c      	ldr	r2, [pc, #176]	; (8003628 <HAL_DMA_IRQHandler+0x690>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d04a      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2b      	ldr	r2, [pc, #172]	; (800362c <HAL_DMA_IRQHandler+0x694>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d045      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a29      	ldr	r2, [pc, #164]	; (8003630 <HAL_DMA_IRQHandler+0x698>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d040      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a28      	ldr	r2, [pc, #160]	; (8003634 <HAL_DMA_IRQHandler+0x69c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d03b      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a26      	ldr	r2, [pc, #152]	; (8003638 <HAL_DMA_IRQHandler+0x6a0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d036      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a25      	ldr	r2, [pc, #148]	; (800363c <HAL_DMA_IRQHandler+0x6a4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d031      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a23      	ldr	r2, [pc, #140]	; (8003640 <HAL_DMA_IRQHandler+0x6a8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d02c      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a22      	ldr	r2, [pc, #136]	; (8003644 <HAL_DMA_IRQHandler+0x6ac>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d027      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <HAL_DMA_IRQHandler+0x6b0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d022      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1f      	ldr	r2, [pc, #124]	; (800364c <HAL_DMA_IRQHandler+0x6b4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d01d      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <HAL_DMA_IRQHandler+0x6b8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d018      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_DMA_IRQHandler+0x6bc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <HAL_DMA_IRQHandler+0x6c0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00e      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a19      	ldr	r2, [pc, #100]	; (800365c <HAL_DMA_IRQHandler+0x6c4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <HAL_DMA_IRQHandler+0x6c8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <HAL_DMA_IRQHandler+0x678>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a16      	ldr	r2, [pc, #88]	; (8003664 <HAL_DMA_IRQHandler+0x6cc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d12b      	bne.n	8003668 <HAL_DMA_IRQHandler+0x6d0>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf14      	ite	ne
 800361e:	2301      	movne	r3, #1
 8003620:	2300      	moveq	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	e02a      	b.n	800367c <HAL_DMA_IRQHandler+0x6e4>
 8003626:	bf00      	nop
 8003628:	40020010 	.word	0x40020010
 800362c:	40020028 	.word	0x40020028
 8003630:	40020040 	.word	0x40020040
 8003634:	40020058 	.word	0x40020058
 8003638:	40020070 	.word	0x40020070
 800363c:	40020088 	.word	0x40020088
 8003640:	400200a0 	.word	0x400200a0
 8003644:	400200b8 	.word	0x400200b8
 8003648:	40020410 	.word	0x40020410
 800364c:	40020428 	.word	0x40020428
 8003650:	40020440 	.word	0x40020440
 8003654:	40020458 	.word	0x40020458
 8003658:	40020470 	.word	0x40020470
 800365c:	40020488 	.word	0x40020488
 8003660:	400204a0 	.word	0x400204a0
 8003664:	400204b8 	.word	0x400204b8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8087 	beq.w	8003790 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	2220      	movs	r2, #32
 800368c:	409a      	lsls	r2, r3
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b04      	cmp	r3, #4
 800369c:	d139      	bne.n	8003712 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0216 	bic.w	r2, r2, #22
 80036ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695a      	ldr	r2, [r3, #20]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <HAL_DMA_IRQHandler+0x736>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0208 	bic.w	r2, r2, #8
 80036dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	223f      	movs	r2, #63	; 0x3f
 80036e8:	409a      	lsls	r2, r3
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 834a 	beq.w	8003d9c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
          }
          return;
 8003710:	e344      	b.n	8003d9c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d018      	beq.n	8003752 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	2b00      	cmp	r3, #0
 8003734:	d02c      	beq.n	8003790 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e027      	b.n	8003790 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d023      	beq.n	8003790 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e01e      	b.n	8003790 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10f      	bne.n	8003780 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0210 	bic.w	r2, r2, #16
 800376e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8306 	beq.w	8003da6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8088 	beq.w	80038b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2204      	movs	r2, #4
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a7a      	ldr	r2, [pc, #488]	; (80039a0 <HAL_DMA_IRQHandler+0xa08>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d04a      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a79      	ldr	r2, [pc, #484]	; (80039a4 <HAL_DMA_IRQHandler+0xa0c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d045      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a77      	ldr	r2, [pc, #476]	; (80039a8 <HAL_DMA_IRQHandler+0xa10>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d040      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a76      	ldr	r2, [pc, #472]	; (80039ac <HAL_DMA_IRQHandler+0xa14>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d03b      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a74      	ldr	r2, [pc, #464]	; (80039b0 <HAL_DMA_IRQHandler+0xa18>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d036      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a73      	ldr	r2, [pc, #460]	; (80039b4 <HAL_DMA_IRQHandler+0xa1c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d031      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a71      	ldr	r2, [pc, #452]	; (80039b8 <HAL_DMA_IRQHandler+0xa20>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d02c      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a70      	ldr	r2, [pc, #448]	; (80039bc <HAL_DMA_IRQHandler+0xa24>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d027      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6e      	ldr	r2, [pc, #440]	; (80039c0 <HAL_DMA_IRQHandler+0xa28>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d022      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6d      	ldr	r2, [pc, #436]	; (80039c4 <HAL_DMA_IRQHandler+0xa2c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d01d      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6b      	ldr	r2, [pc, #428]	; (80039c8 <HAL_DMA_IRQHandler+0xa30>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d018      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6a      	ldr	r2, [pc, #424]	; (80039cc <HAL_DMA_IRQHandler+0xa34>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d013      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a68      	ldr	r2, [pc, #416]	; (80039d0 <HAL_DMA_IRQHandler+0xa38>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00e      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a67      	ldr	r2, [pc, #412]	; (80039d4 <HAL_DMA_IRQHandler+0xa3c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a65      	ldr	r2, [pc, #404]	; (80039d8 <HAL_DMA_IRQHandler+0xa40>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_DMA_IRQHandler+0x8b8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a64      	ldr	r2, [pc, #400]	; (80039dc <HAL_DMA_IRQHandler+0xa44>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d108      	bne.n	8003862 <HAL_DMA_IRQHandler+0x8ca>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e007      	b.n	8003872 <HAL_DMA_IRQHandler+0x8da>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3301      	adds	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387a:	429a      	cmp	r2, r3
 800387c:	d307      	bcc.n	800388e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f2      	bne.n	8003872 <HAL_DMA_IRQHandler+0x8da>
 800388c:	e000      	b.n	8003890 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800388e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d004      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2203      	movs	r2, #3
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038a6:	e003      	b.n	80038b0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8272 	beq.w	8003da6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
 80038ca:	e26c      	b.n	8003da6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a43      	ldr	r2, [pc, #268]	; (80039e0 <HAL_DMA_IRQHandler+0xa48>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d022      	beq.n	800391c <HAL_DMA_IRQHandler+0x984>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a42      	ldr	r2, [pc, #264]	; (80039e4 <HAL_DMA_IRQHandler+0xa4c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d01d      	beq.n	800391c <HAL_DMA_IRQHandler+0x984>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a40      	ldr	r2, [pc, #256]	; (80039e8 <HAL_DMA_IRQHandler+0xa50>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <HAL_DMA_IRQHandler+0x984>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a3f      	ldr	r2, [pc, #252]	; (80039ec <HAL_DMA_IRQHandler+0xa54>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <HAL_DMA_IRQHandler+0x984>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a3d      	ldr	r2, [pc, #244]	; (80039f0 <HAL_DMA_IRQHandler+0xa58>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <HAL_DMA_IRQHandler+0x984>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a3c      	ldr	r2, [pc, #240]	; (80039f4 <HAL_DMA_IRQHandler+0xa5c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_DMA_IRQHandler+0x984>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3a      	ldr	r2, [pc, #232]	; (80039f8 <HAL_DMA_IRQHandler+0xa60>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_DMA_IRQHandler+0x984>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a39      	ldr	r2, [pc, #228]	; (80039fc <HAL_DMA_IRQHandler+0xa64>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_DMA_IRQHandler+0x988>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_DMA_IRQHandler+0x98a>
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 823f 	beq.w	8003da6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	2204      	movs	r2, #4
 800393a:	409a      	lsls	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80cd 	beq.w	8003ae0 <HAL_DMA_IRQHandler+0xb48>
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80c7 	beq.w	8003ae0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2204      	movs	r2, #4
 800395c:	409a      	lsls	r2, r3
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d049      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8210 	beq.w	8003da0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003988:	e20a      	b.n	8003da0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8206 	beq.w	8003da0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800399c:	e200      	b.n	8003da0 <HAL_DMA_IRQHandler+0xe08>
 800399e:	bf00      	nop
 80039a0:	40020010 	.word	0x40020010
 80039a4:	40020028 	.word	0x40020028
 80039a8:	40020040 	.word	0x40020040
 80039ac:	40020058 	.word	0x40020058
 80039b0:	40020070 	.word	0x40020070
 80039b4:	40020088 	.word	0x40020088
 80039b8:	400200a0 	.word	0x400200a0
 80039bc:	400200b8 	.word	0x400200b8
 80039c0:	40020410 	.word	0x40020410
 80039c4:	40020428 	.word	0x40020428
 80039c8:	40020440 	.word	0x40020440
 80039cc:	40020458 	.word	0x40020458
 80039d0:	40020470 	.word	0x40020470
 80039d4:	40020488 	.word	0x40020488
 80039d8:	400204a0 	.word	0x400204a0
 80039dc:	400204b8 	.word	0x400204b8
 80039e0:	58025408 	.word	0x58025408
 80039e4:	5802541c 	.word	0x5802541c
 80039e8:	58025430 	.word	0x58025430
 80039ec:	58025444 	.word	0x58025444
 80039f0:	58025458 	.word	0x58025458
 80039f4:	5802546c 	.word	0x5802546c
 80039f8:	58025480 	.word	0x58025480
 80039fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d160      	bne.n	8003acc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a8c      	ldr	r2, [pc, #560]	; (8003c40 <HAL_DMA_IRQHandler+0xca8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d04a      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a8a      	ldr	r2, [pc, #552]	; (8003c44 <HAL_DMA_IRQHandler+0xcac>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d045      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a89      	ldr	r2, [pc, #548]	; (8003c48 <HAL_DMA_IRQHandler+0xcb0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d040      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a87      	ldr	r2, [pc, #540]	; (8003c4c <HAL_DMA_IRQHandler+0xcb4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d03b      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a86      	ldr	r2, [pc, #536]	; (8003c50 <HAL_DMA_IRQHandler+0xcb8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d036      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a84      	ldr	r2, [pc, #528]	; (8003c54 <HAL_DMA_IRQHandler+0xcbc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a83      	ldr	r2, [pc, #524]	; (8003c58 <HAL_DMA_IRQHandler+0xcc0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d02c      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a81      	ldr	r2, [pc, #516]	; (8003c5c <HAL_DMA_IRQHandler+0xcc4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d027      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a80      	ldr	r2, [pc, #512]	; (8003c60 <HAL_DMA_IRQHandler+0xcc8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a7e      	ldr	r2, [pc, #504]	; (8003c64 <HAL_DMA_IRQHandler+0xccc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a7d      	ldr	r2, [pc, #500]	; (8003c68 <HAL_DMA_IRQHandler+0xcd0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a7b      	ldr	r2, [pc, #492]	; (8003c6c <HAL_DMA_IRQHandler+0xcd4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7a      	ldr	r2, [pc, #488]	; (8003c70 <HAL_DMA_IRQHandler+0xcd8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a78      	ldr	r2, [pc, #480]	; (8003c74 <HAL_DMA_IRQHandler+0xcdc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a77      	ldr	r2, [pc, #476]	; (8003c78 <HAL_DMA_IRQHandler+0xce0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xb12>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a75      	ldr	r2, [pc, #468]	; (8003c7c <HAL_DMA_IRQHandler+0xce4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d108      	bne.n	8003abc <HAL_DMA_IRQHandler+0xb24>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0208 	bic.w	r2, r2, #8
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e007      	b.n	8003acc <HAL_DMA_IRQHandler+0xb34>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0204 	bic.w	r2, r2, #4
 8003aca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8165 	beq.w	8003da0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ade:	e15f      	b.n	8003da0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2202      	movs	r2, #2
 8003aea:	409a      	lsls	r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80c5 	beq.w	8003c80 <HAL_DMA_IRQHandler+0xce8>
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80bf 	beq.w	8003c80 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d018      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 813a 	beq.w	8003da4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b38:	e134      	b.n	8003da4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8130 	beq.w	8003da4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b4c:	e12a      	b.n	8003da4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d168      	bne.n	8003c2a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a38      	ldr	r2, [pc, #224]	; (8003c40 <HAL_DMA_IRQHandler+0xca8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d04a      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a37      	ldr	r2, [pc, #220]	; (8003c44 <HAL_DMA_IRQHandler+0xcac>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d045      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a35      	ldr	r2, [pc, #212]	; (8003c48 <HAL_DMA_IRQHandler+0xcb0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d040      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <HAL_DMA_IRQHandler+0xcb4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d03b      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a32      	ldr	r2, [pc, #200]	; (8003c50 <HAL_DMA_IRQHandler+0xcb8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d036      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a31      	ldr	r2, [pc, #196]	; (8003c54 <HAL_DMA_IRQHandler+0xcbc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d031      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <HAL_DMA_IRQHandler+0xcc0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02c      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2e      	ldr	r2, [pc, #184]	; (8003c5c <HAL_DMA_IRQHandler+0xcc4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d027      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2c      	ldr	r2, [pc, #176]	; (8003c60 <HAL_DMA_IRQHandler+0xcc8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d022      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2b      	ldr	r2, [pc, #172]	; (8003c64 <HAL_DMA_IRQHandler+0xccc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d01d      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <HAL_DMA_IRQHandler+0xcd0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d018      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <HAL_DMA_IRQHandler+0xcd4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <HAL_DMA_IRQHandler+0xcd8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <HAL_DMA_IRQHandler+0xcdc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d009      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a23      	ldr	r2, [pc, #140]	; (8003c78 <HAL_DMA_IRQHandler+0xce0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc60>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <HAL_DMA_IRQHandler+0xce4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d108      	bne.n	8003c0a <HAL_DMA_IRQHandler+0xc72>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0214 	bic.w	r2, r2, #20
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e007      	b.n	8003c1a <HAL_DMA_IRQHandler+0xc82>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 020a 	bic.w	r2, r2, #10
 8003c18:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80b8 	beq.w	8003da4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c3c:	e0b2      	b.n	8003da4 <HAL_DMA_IRQHandler+0xe0c>
 8003c3e:	bf00      	nop
 8003c40:	40020010 	.word	0x40020010
 8003c44:	40020028 	.word	0x40020028
 8003c48:	40020040 	.word	0x40020040
 8003c4c:	40020058 	.word	0x40020058
 8003c50:	40020070 	.word	0x40020070
 8003c54:	40020088 	.word	0x40020088
 8003c58:	400200a0 	.word	0x400200a0
 8003c5c:	400200b8 	.word	0x400200b8
 8003c60:	40020410 	.word	0x40020410
 8003c64:	40020428 	.word	0x40020428
 8003c68:	40020440 	.word	0x40020440
 8003c6c:	40020458 	.word	0x40020458
 8003c70:	40020470 	.word	0x40020470
 8003c74:	40020488 	.word	0x40020488
 8003c78:	400204a0 	.word	0x400204a0
 8003c7c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2208      	movs	r2, #8
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8088 	beq.w	8003da6 <HAL_DMA_IRQHandler+0xe0e>
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8082 	beq.w	8003da6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a41      	ldr	r2, [pc, #260]	; (8003dac <HAL_DMA_IRQHandler+0xe14>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d04a      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a3f      	ldr	r2, [pc, #252]	; (8003db0 <HAL_DMA_IRQHandler+0xe18>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d045      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a3e      	ldr	r2, [pc, #248]	; (8003db4 <HAL_DMA_IRQHandler+0xe1c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d040      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a3c      	ldr	r2, [pc, #240]	; (8003db8 <HAL_DMA_IRQHandler+0xe20>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d03b      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3b      	ldr	r2, [pc, #236]	; (8003dbc <HAL_DMA_IRQHandler+0xe24>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d036      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a39      	ldr	r2, [pc, #228]	; (8003dc0 <HAL_DMA_IRQHandler+0xe28>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d031      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a38      	ldr	r2, [pc, #224]	; (8003dc4 <HAL_DMA_IRQHandler+0xe2c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d02c      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a36      	ldr	r2, [pc, #216]	; (8003dc8 <HAL_DMA_IRQHandler+0xe30>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d027      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a35      	ldr	r2, [pc, #212]	; (8003dcc <HAL_DMA_IRQHandler+0xe34>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d022      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a33      	ldr	r2, [pc, #204]	; (8003dd0 <HAL_DMA_IRQHandler+0xe38>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01d      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a32      	ldr	r2, [pc, #200]	; (8003dd4 <HAL_DMA_IRQHandler+0xe3c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d018      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a30      	ldr	r2, [pc, #192]	; (8003dd8 <HAL_DMA_IRQHandler+0xe40>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a2f      	ldr	r2, [pc, #188]	; (8003ddc <HAL_DMA_IRQHandler+0xe44>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2d      	ldr	r2, [pc, #180]	; (8003de0 <HAL_DMA_IRQHandler+0xe48>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2c      	ldr	r2, [pc, #176]	; (8003de4 <HAL_DMA_IRQHandler+0xe4c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xdaa>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <HAL_DMA_IRQHandler+0xe50>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <HAL_DMA_IRQHandler+0xdbc>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 021c 	bic.w	r2, r2, #28
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e007      	b.n	8003d64 <HAL_DMA_IRQHandler+0xdcc>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 020e 	bic.w	r2, r2, #14
 8003d62:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
 8003d9a:	e004      	b.n	8003da6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d9c:	bf00      	nop
 8003d9e:	e002      	b.n	8003da6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da0:	bf00      	nop
 8003da2:	e000      	b.n	8003da6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003da6:	3728      	adds	r7, #40	; 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40020010 	.word	0x40020010
 8003db0:	40020028 	.word	0x40020028
 8003db4:	40020040 	.word	0x40020040
 8003db8:	40020058 	.word	0x40020058
 8003dbc:	40020070 	.word	0x40020070
 8003dc0:	40020088 	.word	0x40020088
 8003dc4:	400200a0 	.word	0x400200a0
 8003dc8:	400200b8 	.word	0x400200b8
 8003dcc:	40020410 	.word	0x40020410
 8003dd0:	40020428 	.word	0x40020428
 8003dd4:	40020440 	.word	0x40020440
 8003dd8:	40020458 	.word	0x40020458
 8003ddc:	40020470 	.word	0x40020470
 8003de0:	40020488 	.word	0x40020488
 8003de4:	400204a0 	.word	0x400204a0
 8003de8:	400204b8 	.word	0x400204b8

08003dec <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dfa:	b2db      	uxtb	r3, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a84      	ldr	r2, [pc, #528]	; (8004050 <DMA_SetConfig+0x230>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d072      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a82      	ldr	r2, [pc, #520]	; (8004054 <DMA_SetConfig+0x234>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d06d      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a81      	ldr	r2, [pc, #516]	; (8004058 <DMA_SetConfig+0x238>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d068      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a7f      	ldr	r2, [pc, #508]	; (800405c <DMA_SetConfig+0x23c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d063      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a7e      	ldr	r2, [pc, #504]	; (8004060 <DMA_SetConfig+0x240>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d05e      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7c      	ldr	r2, [pc, #496]	; (8004064 <DMA_SetConfig+0x244>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d059      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a7b      	ldr	r2, [pc, #492]	; (8004068 <DMA_SetConfig+0x248>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d054      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a79      	ldr	r2, [pc, #484]	; (800406c <DMA_SetConfig+0x24c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d04f      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a78      	ldr	r2, [pc, #480]	; (8004070 <DMA_SetConfig+0x250>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d04a      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a76      	ldr	r2, [pc, #472]	; (8004074 <DMA_SetConfig+0x254>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d045      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a75      	ldr	r2, [pc, #468]	; (8004078 <DMA_SetConfig+0x258>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d040      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a73      	ldr	r2, [pc, #460]	; (800407c <DMA_SetConfig+0x25c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d03b      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a72      	ldr	r2, [pc, #456]	; (8004080 <DMA_SetConfig+0x260>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d036      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a70      	ldr	r2, [pc, #448]	; (8004084 <DMA_SetConfig+0x264>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d031      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a6f      	ldr	r2, [pc, #444]	; (8004088 <DMA_SetConfig+0x268>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d02c      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6d      	ldr	r2, [pc, #436]	; (800408c <DMA_SetConfig+0x26c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d027      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6c      	ldr	r2, [pc, #432]	; (8004090 <DMA_SetConfig+0x270>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6a      	ldr	r2, [pc, #424]	; (8004094 <DMA_SetConfig+0x274>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01d      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a69      	ldr	r2, [pc, #420]	; (8004098 <DMA_SetConfig+0x278>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a67      	ldr	r2, [pc, #412]	; (800409c <DMA_SetConfig+0x27c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a66      	ldr	r2, [pc, #408]	; (80040a0 <DMA_SetConfig+0x280>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a64      	ldr	r2, [pc, #400]	; (80040a4 <DMA_SetConfig+0x284>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a63      	ldr	r2, [pc, #396]	; (80040a8 <DMA_SetConfig+0x288>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <DMA_SetConfig+0x10a>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a61      	ldr	r2, [pc, #388]	; (80040ac <DMA_SetConfig+0x28c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <DMA_SetConfig+0x10e>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <DMA_SetConfig+0x110>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00d      	beq.n	8003f50 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f3c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d004      	beq.n	8003f50 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f4e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3e      	ldr	r2, [pc, #248]	; (8004050 <DMA_SetConfig+0x230>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d04a      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3d      	ldr	r2, [pc, #244]	; (8004054 <DMA_SetConfig+0x234>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d045      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a3b      	ldr	r2, [pc, #236]	; (8004058 <DMA_SetConfig+0x238>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d040      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a3a      	ldr	r2, [pc, #232]	; (800405c <DMA_SetConfig+0x23c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d03b      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a38      	ldr	r2, [pc, #224]	; (8004060 <DMA_SetConfig+0x240>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d036      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a37      	ldr	r2, [pc, #220]	; (8004064 <DMA_SetConfig+0x244>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d031      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a35      	ldr	r2, [pc, #212]	; (8004068 <DMA_SetConfig+0x248>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02c      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a34      	ldr	r2, [pc, #208]	; (800406c <DMA_SetConfig+0x24c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d027      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a32      	ldr	r2, [pc, #200]	; (8004070 <DMA_SetConfig+0x250>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a31      	ldr	r2, [pc, #196]	; (8004074 <DMA_SetConfig+0x254>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d01d      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2f      	ldr	r2, [pc, #188]	; (8004078 <DMA_SetConfig+0x258>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2e      	ldr	r2, [pc, #184]	; (800407c <DMA_SetConfig+0x25c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	; (8004080 <DMA_SetConfig+0x260>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <DMA_SetConfig+0x264>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a29      	ldr	r2, [pc, #164]	; (8004088 <DMA_SetConfig+0x268>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <DMA_SetConfig+0x1d0>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a28      	ldr	r2, [pc, #160]	; (800408c <DMA_SetConfig+0x26c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d101      	bne.n	8003ff4 <DMA_SetConfig+0x1d4>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <DMA_SetConfig+0x1d6>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d05a      	beq.n	80040b0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	223f      	movs	r2, #63	; 0x3f
 8004004:	409a      	lsls	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004018:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	d108      	bne.n	800403c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800403a:	e087      	b.n	800414c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	60da      	str	r2, [r3, #12]
}
 800404c:	e07e      	b.n	800414c <DMA_SetConfig+0x32c>
 800404e:	bf00      	nop
 8004050:	40020010 	.word	0x40020010
 8004054:	40020028 	.word	0x40020028
 8004058:	40020040 	.word	0x40020040
 800405c:	40020058 	.word	0x40020058
 8004060:	40020070 	.word	0x40020070
 8004064:	40020088 	.word	0x40020088
 8004068:	400200a0 	.word	0x400200a0
 800406c:	400200b8 	.word	0x400200b8
 8004070:	40020410 	.word	0x40020410
 8004074:	40020428 	.word	0x40020428
 8004078:	40020440 	.word	0x40020440
 800407c:	40020458 	.word	0x40020458
 8004080:	40020470 	.word	0x40020470
 8004084:	40020488 	.word	0x40020488
 8004088:	400204a0 	.word	0x400204a0
 800408c:	400204b8 	.word	0x400204b8
 8004090:	58025408 	.word	0x58025408
 8004094:	5802541c 	.word	0x5802541c
 8004098:	58025430 	.word	0x58025430
 800409c:	58025444 	.word	0x58025444
 80040a0:	58025458 	.word	0x58025458
 80040a4:	5802546c 	.word	0x5802546c
 80040a8:	58025480 	.word	0x58025480
 80040ac:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a28      	ldr	r2, [pc, #160]	; (8004158 <DMA_SetConfig+0x338>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d022      	beq.n	8004100 <DMA_SetConfig+0x2e0>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a27      	ldr	r2, [pc, #156]	; (800415c <DMA_SetConfig+0x33c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d01d      	beq.n	8004100 <DMA_SetConfig+0x2e0>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a25      	ldr	r2, [pc, #148]	; (8004160 <DMA_SetConfig+0x340>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <DMA_SetConfig+0x2e0>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a24      	ldr	r2, [pc, #144]	; (8004164 <DMA_SetConfig+0x344>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <DMA_SetConfig+0x2e0>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a22      	ldr	r2, [pc, #136]	; (8004168 <DMA_SetConfig+0x348>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00e      	beq.n	8004100 <DMA_SetConfig+0x2e0>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a21      	ldr	r2, [pc, #132]	; (800416c <DMA_SetConfig+0x34c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <DMA_SetConfig+0x2e0>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <DMA_SetConfig+0x350>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <DMA_SetConfig+0x2e0>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <DMA_SetConfig+0x354>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <DMA_SetConfig+0x2e4>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <DMA_SetConfig+0x2e6>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d020      	beq.n	800414c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	2201      	movs	r2, #1
 8004114:	409a      	lsls	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b40      	cmp	r3, #64	; 0x40
 8004128:	d108      	bne.n	800413c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	60da      	str	r2, [r3, #12]
}
 800413a:	e007      	b.n	800414c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	60da      	str	r2, [r3, #12]
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	58025408 	.word	0x58025408
 800415c:	5802541c 	.word	0x5802541c
 8004160:	58025430 	.word	0x58025430
 8004164:	58025444 	.word	0x58025444
 8004168:	58025458 	.word	0x58025458
 800416c:	5802546c 	.word	0x5802546c
 8004170:	58025480 	.word	0x58025480
 8004174:	58025494 	.word	0x58025494

08004178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a42      	ldr	r2, [pc, #264]	; (8004290 <DMA_CalcBaseAndBitshift+0x118>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d04a      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a41      	ldr	r2, [pc, #260]	; (8004294 <DMA_CalcBaseAndBitshift+0x11c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d045      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3f      	ldr	r2, [pc, #252]	; (8004298 <DMA_CalcBaseAndBitshift+0x120>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d040      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a3e      	ldr	r2, [pc, #248]	; (800429c <DMA_CalcBaseAndBitshift+0x124>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d03b      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3c      	ldr	r2, [pc, #240]	; (80042a0 <DMA_CalcBaseAndBitshift+0x128>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d036      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a3b      	ldr	r2, [pc, #236]	; (80042a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d031      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a39      	ldr	r2, [pc, #228]	; (80042a8 <DMA_CalcBaseAndBitshift+0x130>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d02c      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a38      	ldr	r2, [pc, #224]	; (80042ac <DMA_CalcBaseAndBitshift+0x134>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d027      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a36      	ldr	r2, [pc, #216]	; (80042b0 <DMA_CalcBaseAndBitshift+0x138>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d022      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a35      	ldr	r2, [pc, #212]	; (80042b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d01d      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a33      	ldr	r2, [pc, #204]	; (80042b8 <DMA_CalcBaseAndBitshift+0x140>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d018      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a32      	ldr	r2, [pc, #200]	; (80042bc <DMA_CalcBaseAndBitshift+0x144>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a30      	ldr	r2, [pc, #192]	; (80042c0 <DMA_CalcBaseAndBitshift+0x148>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a2f      	ldr	r2, [pc, #188]	; (80042c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d009      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2d      	ldr	r2, [pc, #180]	; (80042c8 <DMA_CalcBaseAndBitshift+0x150>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <DMA_CalcBaseAndBitshift+0xa8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <DMA_CalcBaseAndBitshift+0x154>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d101      	bne.n	8004224 <DMA_CalcBaseAndBitshift+0xac>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <DMA_CalcBaseAndBitshift+0xae>
 8004224:	2300      	movs	r3, #0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d024      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	3b10      	subs	r3, #16
 8004232:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <DMA_CalcBaseAndBitshift+0x158>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	4a24      	ldr	r2, [pc, #144]	; (80042d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004244:	5cd3      	ldrb	r3, [r2, r3]
 8004246:	461a      	mov	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b03      	cmp	r3, #3
 8004250:	d908      	bls.n	8004264 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <DMA_CalcBaseAndBitshift+0x160>)
 800425a:	4013      	ands	r3, r2
 800425c:	1d1a      	adds	r2, r3, #4
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	659a      	str	r2, [r3, #88]	; 0x58
 8004262:	e00d      	b.n	8004280 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <DMA_CalcBaseAndBitshift+0x160>)
 800426c:	4013      	ands	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6593      	str	r3, [r2, #88]	; 0x58
 8004272:	e005      	b.n	8004280 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40020010 	.word	0x40020010
 8004294:	40020028 	.word	0x40020028
 8004298:	40020040 	.word	0x40020040
 800429c:	40020058 	.word	0x40020058
 80042a0:	40020070 	.word	0x40020070
 80042a4:	40020088 	.word	0x40020088
 80042a8:	400200a0 	.word	0x400200a0
 80042ac:	400200b8 	.word	0x400200b8
 80042b0:	40020410 	.word	0x40020410
 80042b4:	40020428 	.word	0x40020428
 80042b8:	40020440 	.word	0x40020440
 80042bc:	40020458 	.word	0x40020458
 80042c0:	40020470 	.word	0x40020470
 80042c4:	40020488 	.word	0x40020488
 80042c8:	400204a0 	.word	0x400204a0
 80042cc:	400204b8 	.word	0x400204b8
 80042d0:	aaaaaaab 	.word	0xaaaaaaab
 80042d4:	0800d2f8 	.word	0x0800d2f8
 80042d8:	fffffc00 	.word	0xfffffc00

080042dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d120      	bne.n	8004332 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d858      	bhi.n	80043aa <DMA_CheckFifoParam+0xce>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <DMA_CheckFifoParam+0x24>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004311 	.word	0x08004311
 8004304:	08004323 	.word	0x08004323
 8004308:	08004311 	.word	0x08004311
 800430c:	080043ab 	.word	0x080043ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d048      	beq.n	80043ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004320:	e045      	b.n	80043ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800432a:	d142      	bne.n	80043b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004330:	e03f      	b.n	80043b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433a:	d123      	bne.n	8004384 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	2b03      	cmp	r3, #3
 8004342:	d838      	bhi.n	80043b6 <DMA_CheckFifoParam+0xda>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <DMA_CheckFifoParam+0x70>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	0800435d 	.word	0x0800435d
 8004350:	08004363 	.word	0x08004363
 8004354:	0800435d 	.word	0x0800435d
 8004358:	08004375 	.word	0x08004375
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
        break;
 8004360:	e030      	b.n	80043c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d025      	beq.n	80043ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004372:	e022      	b.n	80043ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800437c:	d11f      	bne.n	80043be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004382:	e01c      	b.n	80043be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	2b02      	cmp	r3, #2
 800438a:	d902      	bls.n	8004392 <DMA_CheckFifoParam+0xb6>
 800438c:	2b03      	cmp	r3, #3
 800438e:	d003      	beq.n	8004398 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004390:	e018      	b.n	80043c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
        break;
 8004396:	e015      	b.n	80043c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00e      	beq.n	80043c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
    break;
 80043a8:	e00b      	b.n	80043c2 <DMA_CheckFifoParam+0xe6>
        break;
 80043aa:	bf00      	nop
 80043ac:	e00a      	b.n	80043c4 <DMA_CheckFifoParam+0xe8>
        break;
 80043ae:	bf00      	nop
 80043b0:	e008      	b.n	80043c4 <DMA_CheckFifoParam+0xe8>
        break;
 80043b2:	bf00      	nop
 80043b4:	e006      	b.n	80043c4 <DMA_CheckFifoParam+0xe8>
        break;
 80043b6:	bf00      	nop
 80043b8:	e004      	b.n	80043c4 <DMA_CheckFifoParam+0xe8>
        break;
 80043ba:	bf00      	nop
 80043bc:	e002      	b.n	80043c4 <DMA_CheckFifoParam+0xe8>
        break;
 80043be:	bf00      	nop
 80043c0:	e000      	b.n	80043c4 <DMA_CheckFifoParam+0xe8>
    break;
 80043c2:	bf00      	nop
    }
  }

  return status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop

080043d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a38      	ldr	r2, [pc, #224]	; (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d022      	beq.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a36      	ldr	r2, [pc, #216]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01d      	beq.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a35      	ldr	r2, [pc, #212]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d018      	beq.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a33      	ldr	r2, [pc, #204]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a32      	ldr	r2, [pc, #200]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a30      	ldr	r2, [pc, #192]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2f      	ldr	r2, [pc, #188]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2d      	ldr	r2, [pc, #180]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004436:	2300      	movs	r3, #0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	3b08      	subs	r3, #8
 8004444:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4b26      	ldr	r3, [pc, #152]	; (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	461a      	mov	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a24      	ldr	r2, [pc, #144]	; (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004460:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2201      	movs	r2, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004470:	e024      	b.n	80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	3b10      	subs	r3, #16
 800447a:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4a1c      	ldr	r2, [pc, #112]	; (80044f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d806      	bhi.n	800449a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4a1b      	ldr	r2, [pc, #108]	; (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d902      	bls.n	800449a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3308      	adds	r3, #8
 8004498:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4b18      	ldr	r3, [pc, #96]	; (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a16      	ldr	r2, [pc, #88]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2201      	movs	r2, #1
 80044b6:	409a      	lsls	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	58025408 	.word	0x58025408
 80044cc:	5802541c 	.word	0x5802541c
 80044d0:	58025430 	.word	0x58025430
 80044d4:	58025444 	.word	0x58025444
 80044d8:	58025458 	.word	0x58025458
 80044dc:	5802546c 	.word	0x5802546c
 80044e0:	58025480 	.word	0x58025480
 80044e4:	58025494 	.word	0x58025494
 80044e8:	cccccccd 	.word	0xcccccccd
 80044ec:	16009600 	.word	0x16009600
 80044f0:	58025880 	.word	0x58025880
 80044f4:	aaaaaaab 	.word	0xaaaaaaab
 80044f8:	400204b8 	.word	0x400204b8
 80044fc:	4002040f 	.word	0x4002040f
 8004500:	10008200 	.word	0x10008200
 8004504:	40020880 	.word	0x40020880

08004508 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d04a      	beq.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d847      	bhi.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a25      	ldr	r2, [pc, #148]	; (80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d022      	beq.n	8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a24      	ldr	r2, [pc, #144]	; (80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d01d      	beq.n	8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d018      	beq.n	8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a21      	ldr	r2, [pc, #132]	; (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1b      	ldr	r2, [pc, #108]	; (80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004590:	671a      	str	r2, [r3, #112]	; 0x70
 8004592:	e009      	b.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	461a      	mov	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a11      	ldr	r2, [pc, #68]	; (80045ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	2201      	movs	r2, #1
 80045ae:	409a      	lsls	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	58025408 	.word	0x58025408
 80045c4:	5802541c 	.word	0x5802541c
 80045c8:	58025430 	.word	0x58025430
 80045cc:	58025444 	.word	0x58025444
 80045d0:	58025458 	.word	0x58025458
 80045d4:	5802546c 	.word	0x5802546c
 80045d8:	58025480 	.word	0x58025480
 80045dc:	58025494 	.word	0x58025494
 80045e0:	1600963f 	.word	0x1600963f
 80045e4:	58025940 	.word	0x58025940
 80045e8:	1000823f 	.word	0x1000823f
 80045ec:	40020940 	.word	0x40020940

080045f0 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	7a1b      	ldrb	r3, [r3, #8]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d155      	bne.n	80046b6 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a4b      	ldr	r2, [pc, #300]	; (800473c <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d049      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a49      	ldr	r2, [pc, #292]	; (8004740 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d044      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a48      	ldr	r2, [pc, #288]	; (8004744 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d03f      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a46      	ldr	r2, [pc, #280]	; (8004748 <HAL_DMAEx_ConfigMuxSync+0x158>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d03a      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a45      	ldr	r2, [pc, #276]	; (800474c <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d035      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a43      	ldr	r2, [pc, #268]	; (8004750 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d030      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a42      	ldr	r2, [pc, #264]	; (8004754 <HAL_DMAEx_ConfigMuxSync+0x164>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d02b      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a40      	ldr	r2, [pc, #256]	; (8004758 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d026      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3f      	ldr	r2, [pc, #252]	; (800475c <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d021      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3d      	ldr	r2, [pc, #244]	; (8004760 <HAL_DMAEx_ConfigMuxSync+0x170>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01c      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a3c      	ldr	r2, [pc, #240]	; (8004764 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d017      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a3a      	ldr	r2, [pc, #232]	; (8004768 <HAL_DMAEx_ConfigMuxSync+0x178>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d012      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a39      	ldr	r2, [pc, #228]	; (800476c <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00d      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a37      	ldr	r2, [pc, #220]	; (8004770 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d008      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a36      	ldr	r2, [pc, #216]	; (8004774 <HAL_DMAEx_ConfigMuxSync+0x184>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a34      	ldr	r2, [pc, #208]	; (8004778 <HAL_DMAEx_ConfigMuxSync+0x188>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d131      	bne.n	8004726 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_DMAEx_ConfigMuxSync+0xe0>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e02f      	b.n	8004730 <HAL_DMAEx_ConfigMuxSync+0x140>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e2:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 80046e6:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	b2d9      	uxtb	r1, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	061a      	lsls	r2, r3, #24
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	04db      	lsls	r3, r3, #19
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	431a      	orrs	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	7a1b      	ldrb	r3, [r3, #8]
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	431a      	orrs	r2, r3
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	7a5b      	ldrb	r3, [r3, #9]
 800470e:	025b      	lsls	r3, r3, #9
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e004      	b.n	8004730 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800472c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
  }
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8

0800477c <HAL_DMAEx_ConfigMuxRequestGenerator>:
  *         contains the request generator parameters.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma, HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_DMA_StateTypeDef temp_state = hdma->State;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800478c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a47      	ldr	r2, [pc, #284]	; (80048b0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x134>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d049      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a45      	ldr	r2, [pc, #276]	; (80048b4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x138>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d044      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a44      	ldr	r2, [pc, #272]	; (80048b8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x13c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d03f      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a42      	ldr	r2, [pc, #264]	; (80048bc <HAL_DMAEx_ConfigMuxRequestGenerator+0x140>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d03a      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a41      	ldr	r2, [pc, #260]	; (80048c0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x144>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d035      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a3f      	ldr	r2, [pc, #252]	; (80048c4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x148>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d030      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a3e      	ldr	r2, [pc, #248]	; (80048c8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x14c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d02b      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a3c      	ldr	r2, [pc, #240]	; (80048cc <HAL_DMAEx_ConfigMuxRequestGenerator+0x150>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d026      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a3b      	ldr	r2, [pc, #236]	; (80048d0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x154>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d021      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a39      	ldr	r2, [pc, #228]	; (80048d4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x158>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01c      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a38      	ldr	r2, [pc, #224]	; (80048d8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x15c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d017      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a36      	ldr	r2, [pc, #216]	; (80048dc <HAL_DMAEx_ConfigMuxRequestGenerator+0x160>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d012      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a35      	ldr	r2, [pc, #212]	; (80048e0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x164>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00d      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a33      	ldr	r2, [pc, #204]	; (80048e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x168>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d008      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a32      	ldr	r2, [pc, #200]	; (80048e8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x16c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a30      	ldr	r2, [pc, #192]	; (80048ec <HAL_DMAEx_ConfigMuxRequestGenerator+0x170>)
 800482a:	4293      	cmp	r3, r2
 800482c:	bf00      	nop
  assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if(hdma->DMAmuxRequestGen == 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d105      	bne.n	8004842 <HAL_DMAEx_ConfigMuxRequestGenerator+0xc6>
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2240      	movs	r2, #64	; 0x40
 800483a:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
 8004840:	e02e      	b.n	80048a0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
  }
  else if(((hdma->DMAmuxRequestGen->RGCR & DMAMUX_RGxCR_GE) == 0U) && (temp_state == HAL_DMA_STATE_READY))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d121      	bne.n	8004894 <HAL_DMAEx_ConfigMuxRequestGenerator+0x118>
 8004850:	7bbb      	ldrb	r3, [r7, #14]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d11e      	bne.n	8004894 <HAL_DMAEx_ConfigMuxRequestGenerator+0x118>
  {
    /* RequestGenerator must be disable prior to the configuration i.e GE bit is 0 */

    /* Process Locked */
    __HAL_LOCK(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_DMAEx_ConfigMuxRequestGenerator+0xe8>
 8004860:	2302      	movs	r3, #2
 8004862:	e01e      	b.n	80048a2 <HAL_DMAEx_ConfigMuxRequestGenerator+0x126>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the request generator new parameters */
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	3b01      	subs	r3, #1
 8004876:	04db      	lsls	r3, r3, #19
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8004878:	ea42 0103 	orr.w	r1, r2, r3
                                  pRequestGeneratorConfig->Polarity;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
 8004884:	430a      	orrs	r2, r1
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8004886:	601a      	str	r2, [r3, #0]
    /* Process Locked */
    __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e006      	b.n	80048a2 <HAL_DMAEx_ConfigMuxRequestGenerator+0x126>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800489a:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40020010 	.word	0x40020010
 80048b4:	40020028 	.word	0x40020028
 80048b8:	40020040 	.word	0x40020040
 80048bc:	40020058 	.word	0x40020058
 80048c0:	40020070 	.word	0x40020070
 80048c4:	40020088 	.word	0x40020088
 80048c8:	400200a0 	.word	0x400200a0
 80048cc:	400200b8 	.word	0x400200b8
 80048d0:	40020410 	.word	0x40020410
 80048d4:	40020428 	.word	0x40020428
 80048d8:	40020440 	.word	0x40020440
 80048dc:	40020458 	.word	0x40020458
 80048e0:	40020470 	.word	0x40020470
 80048e4:	40020488 	.word	0x40020488
 80048e8:	400204a0 	.word	0x400204a0
 80048ec:	400204b8 	.word	0x400204b8

080048f0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01a      	beq.n	800493e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004916:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004920:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d022      	beq.n	800498c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01a      	beq.n	800498c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004964:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800496e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004974:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
      }
    }
  }
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80049a2:	4b86      	ldr	r3, [pc, #536]	; (8004bbc <HAL_GPIO_Init+0x228>)
 80049a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049a6:	e18c      	b.n	8004cc2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	2101      	movs	r1, #1
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 817e 	beq.w	8004cbc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d005      	beq.n	80049d8 <HAL_GPIO_Init+0x44>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d130      	bne.n	8004a3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	2203      	movs	r2, #3
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a0e:	2201      	movs	r2, #1
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43db      	mvns	r3, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 0201 	and.w	r2, r3, #1
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d017      	beq.n	8004a76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	2203      	movs	r2, #3
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d123      	bne.n	8004aca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	08da      	lsrs	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3208      	adds	r2, #8
 8004a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	220f      	movs	r2, #15
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	08da      	lsrs	r2, r3, #3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3208      	adds	r2, #8
 8004ac4:	69b9      	ldr	r1, [r7, #24]
 8004ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 0203 	and.w	r2, r3, #3
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80d8 	beq.w	8004cbc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	; (8004bc0 <HAL_GPIO_Init+0x22c>)
 8004b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b12:	4a2b      	ldr	r2, [pc, #172]	; (8004bc0 <HAL_GPIO_Init+0x22c>)
 8004b14:	f043 0302 	orr.w	r3, r3, #2
 8004b18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b1c:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <HAL_GPIO_Init+0x22c>)
 8004b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b2a:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <HAL_GPIO_Init+0x230>)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	3302      	adds	r3, #2
 8004b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	220f      	movs	r2, #15
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43db      	mvns	r3, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <HAL_GPIO_Init+0x234>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d04a      	beq.n	8004bec <HAL_GPIO_Init+0x258>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <HAL_GPIO_Init+0x238>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d02b      	beq.n	8004bb6 <HAL_GPIO_Init+0x222>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <HAL_GPIO_Init+0x23c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d025      	beq.n	8004bb2 <HAL_GPIO_Init+0x21e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <HAL_GPIO_Init+0x240>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01f      	beq.n	8004bae <HAL_GPIO_Init+0x21a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <HAL_GPIO_Init+0x244>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d019      	beq.n	8004baa <HAL_GPIO_Init+0x216>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <HAL_GPIO_Init+0x248>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <HAL_GPIO_Init+0x212>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <HAL_GPIO_Init+0x24c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00d      	beq.n	8004ba2 <HAL_GPIO_Init+0x20e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <HAL_GPIO_Init+0x250>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <HAL_GPIO_Init+0x20a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <HAL_GPIO_Init+0x254>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_GPIO_Init+0x206>
 8004b96:	2309      	movs	r3, #9
 8004b98:	e029      	b.n	8004bee <HAL_GPIO_Init+0x25a>
 8004b9a:	230a      	movs	r3, #10
 8004b9c:	e027      	b.n	8004bee <HAL_GPIO_Init+0x25a>
 8004b9e:	2307      	movs	r3, #7
 8004ba0:	e025      	b.n	8004bee <HAL_GPIO_Init+0x25a>
 8004ba2:	2306      	movs	r3, #6
 8004ba4:	e023      	b.n	8004bee <HAL_GPIO_Init+0x25a>
 8004ba6:	2305      	movs	r3, #5
 8004ba8:	e021      	b.n	8004bee <HAL_GPIO_Init+0x25a>
 8004baa:	2304      	movs	r3, #4
 8004bac:	e01f      	b.n	8004bee <HAL_GPIO_Init+0x25a>
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e01d      	b.n	8004bee <HAL_GPIO_Init+0x25a>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e01b      	b.n	8004bee <HAL_GPIO_Init+0x25a>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e019      	b.n	8004bee <HAL_GPIO_Init+0x25a>
 8004bba:	bf00      	nop
 8004bbc:	58000080 	.word	0x58000080
 8004bc0:	58024400 	.word	0x58024400
 8004bc4:	58000400 	.word	0x58000400
 8004bc8:	58020000 	.word	0x58020000
 8004bcc:	58020400 	.word	0x58020400
 8004bd0:	58020800 	.word	0x58020800
 8004bd4:	58020c00 	.word	0x58020c00
 8004bd8:	58021000 	.word	0x58021000
 8004bdc:	58021400 	.word	0x58021400
 8004be0:	58021800 	.word	0x58021800
 8004be4:	58021c00 	.word	0x58021c00
 8004be8:	58022400 	.word	0x58022400
 8004bec:	2300      	movs	r3, #0
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	f002 0203 	and.w	r2, r2, #3
 8004bf4:	0092      	lsls	r2, r2, #2
 8004bf6:	4093      	lsls	r3, r2
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bfe:	4938      	ldr	r1, [pc, #224]	; (8004ce0 <HAL_GPIO_Init+0x34c>)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	089b      	lsrs	r3, r3, #2
 8004c04:	3302      	adds	r3, #2
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4013      	ands	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f47f ae6b 	bne.w	80049a8 <HAL_GPIO_Init+0x14>
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	3724      	adds	r7, #36	; 0x24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	58000400 	.word	0x58000400

08004ce4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cf2:	4b72      	ldr	r3, [pc, #456]	; (8004ebc <HAL_GPIO_DeInit+0x1d8>)
 8004cf4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004cf6:	e0d3      	b.n	8004ea0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	4013      	ands	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80c6 	beq.w	8004e9a <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d0e:	4a6c      	ldr	r2, [pc, #432]	; (8004ec0 <HAL_GPIO_DeInit+0x1dc>)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	3302      	adds	r3, #2
 8004d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	220f      	movs	r2, #15
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a64      	ldr	r2, [pc, #400]	; (8004ec4 <HAL_GPIO_DeInit+0x1e0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d031      	beq.n	8004d9c <HAL_GPIO_DeInit+0xb8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a63      	ldr	r2, [pc, #396]	; (8004ec8 <HAL_GPIO_DeInit+0x1e4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d02b      	beq.n	8004d98 <HAL_GPIO_DeInit+0xb4>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a62      	ldr	r2, [pc, #392]	; (8004ecc <HAL_GPIO_DeInit+0x1e8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d025      	beq.n	8004d94 <HAL_GPIO_DeInit+0xb0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a61      	ldr	r2, [pc, #388]	; (8004ed0 <HAL_GPIO_DeInit+0x1ec>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01f      	beq.n	8004d90 <HAL_GPIO_DeInit+0xac>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a60      	ldr	r2, [pc, #384]	; (8004ed4 <HAL_GPIO_DeInit+0x1f0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d019      	beq.n	8004d8c <HAL_GPIO_DeInit+0xa8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a5f      	ldr	r2, [pc, #380]	; (8004ed8 <HAL_GPIO_DeInit+0x1f4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <HAL_GPIO_DeInit+0xa4>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a5e      	ldr	r2, [pc, #376]	; (8004edc <HAL_GPIO_DeInit+0x1f8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00d      	beq.n	8004d84 <HAL_GPIO_DeInit+0xa0>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a5d      	ldr	r2, [pc, #372]	; (8004ee0 <HAL_GPIO_DeInit+0x1fc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <HAL_GPIO_DeInit+0x9c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a5c      	ldr	r2, [pc, #368]	; (8004ee4 <HAL_GPIO_DeInit+0x200>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_GPIO_DeInit+0x98>
 8004d78:	2309      	movs	r3, #9
 8004d7a:	e010      	b.n	8004d9e <HAL_GPIO_DeInit+0xba>
 8004d7c:	230a      	movs	r3, #10
 8004d7e:	e00e      	b.n	8004d9e <HAL_GPIO_DeInit+0xba>
 8004d80:	2307      	movs	r3, #7
 8004d82:	e00c      	b.n	8004d9e <HAL_GPIO_DeInit+0xba>
 8004d84:	2306      	movs	r3, #6
 8004d86:	e00a      	b.n	8004d9e <HAL_GPIO_DeInit+0xba>
 8004d88:	2305      	movs	r3, #5
 8004d8a:	e008      	b.n	8004d9e <HAL_GPIO_DeInit+0xba>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	e006      	b.n	8004d9e <HAL_GPIO_DeInit+0xba>
 8004d90:	2303      	movs	r3, #3
 8004d92:	e004      	b.n	8004d9e <HAL_GPIO_DeInit+0xba>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e002      	b.n	8004d9e <HAL_GPIO_DeInit+0xba>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <HAL_GPIO_DeInit+0xba>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	f002 0203 	and.w	r2, r2, #3
 8004da4:	0092      	lsls	r2, r2, #2
 8004da6:	4093      	lsls	r3, r2
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d136      	bne.n	8004e1c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	43db      	mvns	r3, r3
 8004db6:	401a      	ands	r2, r3
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dd8:	4013      	ands	r3, r2
 8004dda:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	43db      	mvns	r3, r3
 8004de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dea:	4013      	ands	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	220f      	movs	r2, #15
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004dfe:	4a30      	ldr	r2, [pc, #192]	; (8004ec0 <HAL_GPIO_DeInit+0x1dc>)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	089b      	lsrs	r3, r3, #2
 8004e04:	3302      	adds	r3, #2
 8004e06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	43da      	mvns	r2, r3
 8004e0e:	482c      	ldr	r0, [pc, #176]	; (8004ec0 <HAL_GPIO_DeInit+0x1dc>)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	400a      	ands	r2, r1
 8004e16:	3302      	adds	r3, #2
 8004e18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	2103      	movs	r1, #3
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	08da      	lsrs	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3208      	adds	r2, #8
 8004e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	220f      	movs	r2, #15
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	08d2      	lsrs	r2, r2, #3
 8004e50:	4019      	ands	r1, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3208      	adds	r2, #8
 8004e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	2103      	movs	r1, #3
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	2101      	movs	r1, #1
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	401a      	ands	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	2103      	movs	r1, #3
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	401a      	ands	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f47f af25 	bne.w	8004cf8 <HAL_GPIO_DeInit+0x14>
  }
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	58000080 	.word	0x58000080
 8004ec0:	58000400 	.word	0x58000400
 8004ec4:	58020000 	.word	0x58020000
 8004ec8:	58020400 	.word	0x58020400
 8004ecc:	58020800 	.word	0x58020800
 8004ed0:	58020c00 	.word	0x58020c00
 8004ed4:	58021000 	.word	0x58021000
 8004ed8:	58021400 	.word	0x58021400
 8004edc:	58021800 	.word	0x58021800
 8004ee0:	58021c00 	.word	0x58021c00
 8004ee4:	58022400 	.word	0x58022400

08004ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ef8:	787b      	ldrb	r3, [r7, #1]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004efe:	887a      	ldrh	r2, [r7, #2]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f04:	e003      	b.n	8004f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	041a      	lsls	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	619a      	str	r2, [r3, #24]
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	4603      	mov	r3, r0
 8004f22:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f804 	bl	8004f4e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	4603      	mov	r3, r0
 8004f56:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e07f      	b.n	8005076 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f005 fda6 	bl	800aadc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	; 0x24
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	e006      	b.n	8004fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d104      	bne.n	8004ffe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ffc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <HAL_I2C_Init+0x11c>)
 800500a:	430b      	orrs	r3, r1
 800500c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800501c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	02008000 	.word	0x02008000

08005084 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e021      	b.n	80050da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2224      	movs	r2, #36	; 0x24
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f005 fd82 	bl	800abb8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	461a      	mov	r2, r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	817b      	strh	r3, [r7, #10]
 80050f6:	460b      	mov	r3, r1
 80050f8:	813b      	strh	r3, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b20      	cmp	r3, #32
 8005108:	f040 80f9 	bne.w	80052fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_I2C_Mem_Write+0x34>
 8005112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800511e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0ed      	b.n	8005300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_I2C_Mem_Write+0x4e>
 800512e:	2302      	movs	r3, #2
 8005130:	e0e6      	b.n	8005300 <HAL_I2C_Mem_Write+0x21c>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800513a:	f7fc fced 	bl	8001b18 <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2319      	movs	r3, #25
 8005146:	2201      	movs	r2, #1
 8005148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f001 f8ac 	bl	80062aa <I2C_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0d1      	b.n	8005300 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2221      	movs	r2, #33	; 0x21
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2240      	movs	r2, #64	; 0x40
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a3a      	ldr	r2, [r7, #32]
 8005176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800517c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005184:	88f8      	ldrh	r0, [r7, #6]
 8005186:	893a      	ldrh	r2, [r7, #8]
 8005188:	8979      	ldrh	r1, [r7, #10]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	4603      	mov	r3, r0
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 fb77 	bl	8005888 <I2C_RequestMemoryWrite>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0a9      	b.n	8005300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2bff      	cmp	r3, #255	; 0xff
 80051b4:	d90e      	bls.n	80051d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	22ff      	movs	r2, #255	; 0xff
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	8979      	ldrh	r1, [r7, #10]
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f001 fa15 	bl	80065fc <I2C_TransferConfig>
 80051d2:	e00f      	b.n	80051f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	8979      	ldrh	r1, [r7, #10]
 80051e6:	2300      	movs	r3, #0
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f001 fa04 	bl	80065fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f001 f896 	bl	800632a <I2C_WaitOnTXISFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e07b      	b.n	8005300 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d034      	beq.n	80052ac <HAL_I2C_Mem_Write+0x1c8>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005246:	2b00      	cmp	r3, #0
 8005248:	d130      	bne.n	80052ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	2200      	movs	r2, #0
 8005252:	2180      	movs	r1, #128	; 0x80
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f001 f828 	bl	80062aa <I2C_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e04d      	b.n	8005300 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	2bff      	cmp	r3, #255	; 0xff
 800526c:	d90e      	bls.n	800528c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	22ff      	movs	r2, #255	; 0xff
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005278:	b2da      	uxtb	r2, r3
 800527a:	8979      	ldrh	r1, [r7, #10]
 800527c:	2300      	movs	r3, #0
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f001 f9b9 	bl	80065fc <I2C_TransferConfig>
 800528a:	e00f      	b.n	80052ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	b2da      	uxtb	r2, r3
 800529c:	8979      	ldrh	r1, [r7, #10]
 800529e:	2300      	movs	r3, #0
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f001 f9a8 	bl	80065fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d19e      	bne.n	80051f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f001 f875 	bl	80063aa <I2C_WaitOnSTOPFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e01a      	b.n	8005300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2220      	movs	r2, #32
 80052d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <HAL_I2C_Mem_Write+0x224>)
 80052de:	400b      	ands	r3, r1
 80052e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e000      	b.n	8005300 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80052fe:	2302      	movs	r3, #2
  }
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	fe00e800 	.word	0xfe00e800

0800530c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	4608      	mov	r0, r1
 8005316:	4611      	mov	r1, r2
 8005318:	461a      	mov	r2, r3
 800531a:	4603      	mov	r3, r0
 800531c:	817b      	strh	r3, [r7, #10]
 800531e:	460b      	mov	r3, r1
 8005320:	813b      	strh	r3, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b20      	cmp	r3, #32
 8005330:	f040 80fd 	bne.w	800552e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_I2C_Mem_Read+0x34>
 800533a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d105      	bne.n	800534c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005346:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0f1      	b.n	8005530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_I2C_Mem_Read+0x4e>
 8005356:	2302      	movs	r3, #2
 8005358:	e0ea      	b.n	8005530 <HAL_I2C_Mem_Read+0x224>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005362:	f7fc fbd9 	bl	8001b18 <HAL_GetTick>
 8005366:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	2319      	movs	r3, #25
 800536e:	2201      	movs	r2, #1
 8005370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 ff98 	bl	80062aa <I2C_WaitOnFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0d5      	b.n	8005530 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2222      	movs	r2, #34	; 0x22
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2240      	movs	r2, #64	; 0x40
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a3a      	ldr	r2, [r7, #32]
 800539e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053ac:	88f8      	ldrh	r0, [r7, #6]
 80053ae:	893a      	ldrh	r2, [r7, #8]
 80053b0:	8979      	ldrh	r1, [r7, #10]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	4603      	mov	r3, r0
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fab7 	bl	8005930 <I2C_RequestMemoryRead>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0ad      	b.n	8005530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2bff      	cmp	r3, #255	; 0xff
 80053dc:	d90e      	bls.n	80053fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	22ff      	movs	r2, #255	; 0xff
 80053e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	8979      	ldrh	r1, [r7, #10]
 80053ec:	4b52      	ldr	r3, [pc, #328]	; (8005538 <HAL_I2C_Mem_Read+0x22c>)
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f001 f901 	bl	80065fc <I2C_TransferConfig>
 80053fa:	e00f      	b.n	800541c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540a:	b2da      	uxtb	r2, r3
 800540c:	8979      	ldrh	r1, [r7, #10]
 800540e:	4b4a      	ldr	r3, [pc, #296]	; (8005538 <HAL_I2C_Mem_Read+0x22c>)
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f001 f8f0 	bl	80065fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	2200      	movs	r2, #0
 8005424:	2104      	movs	r1, #4
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 ff3f 	bl	80062aa <I2C_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07c      	b.n	8005530 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d034      	beq.n	80054dc <HAL_I2C_Mem_Read+0x1d0>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005476:	2b00      	cmp	r3, #0
 8005478:	d130      	bne.n	80054dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	2200      	movs	r2, #0
 8005482:	2180      	movs	r1, #128	; 0x80
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 ff10 	bl	80062aa <I2C_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e04d      	b.n	8005530 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29b      	uxth	r3, r3
 800549a:	2bff      	cmp	r3, #255	; 0xff
 800549c:	d90e      	bls.n	80054bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	22ff      	movs	r2, #255	; 0xff
 80054a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	8979      	ldrh	r1, [r7, #10]
 80054ac:	2300      	movs	r3, #0
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f001 f8a1 	bl	80065fc <I2C_TransferConfig>
 80054ba:	e00f      	b.n	80054dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	8979      	ldrh	r1, [r7, #10]
 80054ce:	2300      	movs	r3, #0
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f001 f890 	bl	80065fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d19a      	bne.n	800541c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 ff5d 	bl	80063aa <I2C_WaitOnSTOPFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e01a      	b.n	8005530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2220      	movs	r2, #32
 8005500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6859      	ldr	r1, [r3, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_I2C_Mem_Read+0x230>)
 800550e:	400b      	ands	r3, r1
 8005510:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	e000      	b.n	8005530 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800552e:	2302      	movs	r3, #2
  }
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	80002400 	.word	0x80002400
 800553c:	fe00e800 	.word	0xfe00e800

08005540 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d010      	beq.n	8005586 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	09db      	lsrs	r3, r3, #7
 8005568:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005574:	f043 0201 	orr.w	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005584:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	0a9b      	lsrs	r3, r3, #10
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d010      	beq.n	80055b4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	09db      	lsrs	r3, r3, #7
 8005596:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	f043 0208 	orr.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	0a5b      	lsrs	r3, r3, #9
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d010      	beq.n	80055e2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	09db      	lsrs	r3, r3, #7
 80055c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d0:	f043 0202 	orr.w	r2, r3, #2
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 030b 	and.w	r3, r3, #11
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fd1f 	bl	8006038 <I2C_ITError>
  }
}
 80055fa:	bf00      	nop
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	70fb      	strb	r3, [r7, #3]
 8005636:	4613      	mov	r3, r2
 8005638:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <I2C_Slave_ISR_IT+0x24>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e0ec      	b.n	8005880 <I2C_Slave_ISR_IT+0x1fe>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80056c6:	6939      	ldr	r1, [r7, #16]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fa67 	bl	8005b9c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d04d      	beq.n	8005776 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d047      	beq.n	8005776 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d128      	bne.n	8005742 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b28      	cmp	r3, #40	; 0x28
 80056fa:	d108      	bne.n	800570e <I2C_Slave_ISR_IT+0x8c>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005702:	d104      	bne.n	800570e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005704:	6939      	ldr	r1, [r7, #16]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fc40 	bl	8005f8c <I2C_ITListenCplt>
 800570c:	e032      	b.n	8005774 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b29      	cmp	r3, #41	; 0x29
 8005718:	d10e      	bne.n	8005738 <I2C_Slave_ISR_IT+0xb6>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005720:	d00a      	beq.n	8005738 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2210      	movs	r2, #16
 8005728:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fd7b 	bl	8006226 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f9d5 	bl	8005ae0 <I2C_ITSlaveSeqCplt>
 8005736:	e01d      	b.n	8005774 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2210      	movs	r2, #16
 800573e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005740:	e096      	b.n	8005870 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2210      	movs	r2, #16
 8005748:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <I2C_Slave_ISR_IT+0xe4>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005762:	f040 8085 	bne.w	8005870 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576a:	4619      	mov	r1, r3
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fc63 	bl	8006038 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005772:	e07d      	b.n	8005870 <I2C_Slave_ISR_IT+0x1ee>
 8005774:	e07c      	b.n	8005870 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	089b      	lsrs	r3, r3, #2
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d030      	beq.n	80057e4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800578a:	2b00      	cmp	r3, #0
 800578c:	d02a      	beq.n	80057e4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d018      	beq.n	80057ca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d14f      	bne.n	8005874 <I2C_Slave_ISR_IT+0x1f2>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057da:	d04b      	beq.n	8005874 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f97f 	bl	8005ae0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80057e2:	e047      	b.n	8005874 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	08db      	lsrs	r3, r3, #3
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	08db      	lsrs	r3, r3, #3
 80057f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80057fc:	6939      	ldr	r1, [r7, #16]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f8ea 	bl	80059d8 <I2C_ITAddrCplt>
 8005804:	e037      	b.n	8005876 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d031      	beq.n	8005876 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02b      	beq.n	8005876 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d018      	beq.n	800585a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	781a      	ldrb	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	851a      	strh	r2, [r3, #40]	; 0x28
 8005858:	e00d      	b.n	8005876 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005860:	d002      	beq.n	8005868 <I2C_Slave_ISR_IT+0x1e6>
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f939 	bl	8005ae0 <I2C_ITSlaveSeqCplt>
 800586e:	e002      	b.n	8005876 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005874:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af02      	add	r7, sp, #8
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	4608      	mov	r0, r1
 8005892:	4611      	mov	r1, r2
 8005894:	461a      	mov	r2, r3
 8005896:	4603      	mov	r3, r0
 8005898:	817b      	strh	r3, [r7, #10]
 800589a:	460b      	mov	r3, r1
 800589c:	813b      	strh	r3, [r7, #8]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	8979      	ldrh	r1, [r7, #10]
 80058a8:	4b20      	ldr	r3, [pc, #128]	; (800592c <I2C_RequestMemoryWrite+0xa4>)
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fea3 	bl	80065fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	69b9      	ldr	r1, [r7, #24]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fd35 	bl	800632a <I2C_WaitOnTXISFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e02c      	b.n	8005924 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d105      	bne.n	80058dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058d0:	893b      	ldrh	r3, [r7, #8]
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	629a      	str	r2, [r3, #40]	; 0x28
 80058da:	e015      	b.n	8005908 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058dc:	893b      	ldrh	r3, [r7, #8]
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	69b9      	ldr	r1, [r7, #24]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fd1b 	bl	800632a <I2C_WaitOnTXISFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e012      	b.n	8005924 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058fe:	893b      	ldrh	r3, [r7, #8]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2200      	movs	r2, #0
 8005910:	2180      	movs	r1, #128	; 0x80
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fcc9 	bl	80062aa <I2C_WaitOnFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	80002000 	.word	0x80002000

08005930 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4603      	mov	r3, r0
 8005940:	817b      	strh	r3, [r7, #10]
 8005942:	460b      	mov	r3, r1
 8005944:	813b      	strh	r3, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	b2da      	uxtb	r2, r3
 800594e:	8979      	ldrh	r1, [r7, #10]
 8005950:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <I2C_RequestMemoryRead+0xa4>)
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2300      	movs	r3, #0
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fe50 	bl	80065fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	69b9      	ldr	r1, [r7, #24]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fce2 	bl	800632a <I2C_WaitOnTXISFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e02c      	b.n	80059ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d105      	bne.n	8005982 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005976:	893b      	ldrh	r3, [r7, #8]
 8005978:	b2da      	uxtb	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	629a      	str	r2, [r3, #40]	; 0x28
 8005980:	e015      	b.n	80059ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005982:	893b      	ldrh	r3, [r7, #8]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	b29b      	uxth	r3, r3
 8005988:	b2da      	uxtb	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	69b9      	ldr	r1, [r7, #24]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fcc8 	bl	800632a <I2C_WaitOnTXISFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e012      	b.n	80059ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059a4:	893b      	ldrh	r3, [r7, #8]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2200      	movs	r2, #0
 80059b6:	2140      	movs	r1, #64	; 0x40
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fc76 	bl	80062aa <I2C_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	80002000 	.word	0x80002000

080059d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059ee:	2b28      	cmp	r3, #40	; 0x28
 80059f0:	d16a      	bne.n	8005ac8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	0c1b      	lsrs	r3, r3, #16
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005a10:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005a2c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d138      	bne.n	8005aa8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005a36:	897b      	ldrh	r3, [r7, #10]
 8005a38:	09db      	lsrs	r3, r3, #7
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	89bb      	ldrh	r3, [r7, #12]
 8005a3e:	4053      	eors	r3, r2
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f003 0306 	and.w	r3, r3, #6
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d11c      	bne.n	8005a84 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005a4a:	897b      	ldrh	r3, [r7, #10]
 8005a4c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d13b      	bne.n	8005ad8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a76:	89ba      	ldrh	r2, [r7, #12]
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff fdd4 	bl	800562a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a82:	e029      	b.n	8005ad8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005a84:	893b      	ldrh	r3, [r7, #8]
 8005a86:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fde7 	bl	8006660 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a9a:	89ba      	ldrh	r2, [r7, #12]
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fdc2 	bl	800562a <HAL_I2C_AddrCallback>
}
 8005aa6:	e017      	b.n	8005ad8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fdd7 	bl	8006660 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005aba:	89ba      	ldrh	r2, [r7, #12]
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff fdb2 	bl	800562a <HAL_I2C_AddrCallback>
}
 8005ac6:	e007      	b.n	8005ad8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2208      	movs	r2, #8
 8005ace:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	0b9b      	lsrs	r3, r3, #14
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e00d      	b.n	8005b32 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	0bdb      	lsrs	r3, r3, #15
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b29      	cmp	r3, #41	; 0x29
 8005b3c:	d112      	bne.n	8005b64 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2228      	movs	r2, #40	; 0x28
 8005b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2221      	movs	r2, #33	; 0x21
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fd86 	bl	8006660 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fd50 	bl	8005602 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b62:	e017      	b.n	8005b94 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b6e:	d111      	bne.n	8005b94 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2228      	movs	r2, #40	; 0x28
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2222      	movs	r2, #34	; 0x22
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b7e:	2102      	movs	r1, #2
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fd6d 	bl	8006660 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff fd41 	bl	8005616 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b21      	cmp	r3, #33	; 0x21
 8005bc6:	d002      	beq.n	8005bce <I2C_ITSlaveCplt+0x32>
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b29      	cmp	r3, #41	; 0x29
 8005bcc:	d108      	bne.n	8005be0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005bce:	f248 0101 	movw	r1, #32769	; 0x8001
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fd44 	bl	8006660 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2221      	movs	r2, #33	; 0x21
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8005bde:	e00d      	b.n	8005bfc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2b22      	cmp	r3, #34	; 0x22
 8005be4:	d002      	beq.n	8005bec <I2C_ITSlaveCplt+0x50>
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bea:	d107      	bne.n	8005bfc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005bec:	f248 0102 	movw	r1, #32770	; 0x8002
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fd35 	bl	8006660 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2222      	movs	r2, #34	; 0x22
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6859      	ldr	r1, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b80      	ldr	r3, [pc, #512]	; (8005e18 <I2C_ITSlaveCplt+0x27c>)
 8005c18:	400b      	ands	r3, r1
 8005c1a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fb02 	bl	8006226 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	0b9b      	lsrs	r3, r3, #14
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d07a      	beq.n	8005d24 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 8111 	beq.w	8005e6a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a73      	ldr	r2, [pc, #460]	; (8005e1c <I2C_ITSlaveCplt+0x280>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d059      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a71      	ldr	r2, [pc, #452]	; (8005e20 <I2C_ITSlaveCplt+0x284>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d053      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a6f      	ldr	r2, [pc, #444]	; (8005e24 <I2C_ITSlaveCplt+0x288>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d04d      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a6d      	ldr	r2, [pc, #436]	; (8005e28 <I2C_ITSlaveCplt+0x28c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d047      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a6b      	ldr	r2, [pc, #428]	; (8005e2c <I2C_ITSlaveCplt+0x290>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d041      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a69      	ldr	r2, [pc, #420]	; (8005e30 <I2C_ITSlaveCplt+0x294>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d03b      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a67      	ldr	r2, [pc, #412]	; (8005e34 <I2C_ITSlaveCplt+0x298>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d035      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a65      	ldr	r2, [pc, #404]	; (8005e38 <I2C_ITSlaveCplt+0x29c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d02f      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a63      	ldr	r2, [pc, #396]	; (8005e3c <I2C_ITSlaveCplt+0x2a0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d029      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a61      	ldr	r2, [pc, #388]	; (8005e40 <I2C_ITSlaveCplt+0x2a4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d023      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a5f      	ldr	r2, [pc, #380]	; (8005e44 <I2C_ITSlaveCplt+0x2a8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d01d      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a5d      	ldr	r2, [pc, #372]	; (8005e48 <I2C_ITSlaveCplt+0x2ac>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d017      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a5b      	ldr	r2, [pc, #364]	; (8005e4c <I2C_ITSlaveCplt+0x2b0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d011      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a59      	ldr	r2, [pc, #356]	; (8005e50 <I2C_ITSlaveCplt+0x2b4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00b      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a57      	ldr	r2, [pc, #348]	; (8005e54 <I2C_ITSlaveCplt+0x2b8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d005      	beq.n	8005d08 <I2C_ITSlaveCplt+0x16c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a55      	ldr	r2, [pc, #340]	; (8005e58 <I2C_ITSlaveCplt+0x2bc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d105      	bne.n	8005d14 <I2C_ITSlaveCplt+0x178>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	e004      	b.n	8005d1e <I2C_ITSlaveCplt+0x182>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	8553      	strh	r3, [r2, #42]	; 0x2a
 8005d22:	e0a2      	b.n	8005e6a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	0bdb      	lsrs	r3, r3, #15
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 809c 	beq.w	8005e6a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d40:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 808f 	beq.w	8005e6a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a32      	ldr	r2, [pc, #200]	; (8005e1c <I2C_ITSlaveCplt+0x280>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d059      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a30      	ldr	r2, [pc, #192]	; (8005e20 <I2C_ITSlaveCplt+0x284>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d053      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2e      	ldr	r2, [pc, #184]	; (8005e24 <I2C_ITSlaveCplt+0x288>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d04d      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <I2C_ITSlaveCplt+0x28c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d047      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a2a      	ldr	r2, [pc, #168]	; (8005e2c <I2C_ITSlaveCplt+0x290>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d041      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a28      	ldr	r2, [pc, #160]	; (8005e30 <I2C_ITSlaveCplt+0x294>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d03b      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a26      	ldr	r2, [pc, #152]	; (8005e34 <I2C_ITSlaveCplt+0x298>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d035      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <I2C_ITSlaveCplt+0x29c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d02f      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a22      	ldr	r2, [pc, #136]	; (8005e3c <I2C_ITSlaveCplt+0x2a0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d029      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a20      	ldr	r2, [pc, #128]	; (8005e40 <I2C_ITSlaveCplt+0x2a4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d023      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1e      	ldr	r2, [pc, #120]	; (8005e44 <I2C_ITSlaveCplt+0x2a8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d01d      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <I2C_ITSlaveCplt+0x2ac>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d017      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1a      	ldr	r2, [pc, #104]	; (8005e4c <I2C_ITSlaveCplt+0x2b0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d011      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <I2C_ITSlaveCplt+0x2b4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a16      	ldr	r2, [pc, #88]	; (8005e54 <I2C_ITSlaveCplt+0x2b8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d005      	beq.n	8005e0c <I2C_ITSlaveCplt+0x270>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a14      	ldr	r2, [pc, #80]	; (8005e58 <I2C_ITSlaveCplt+0x2bc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d127      	bne.n	8005e5c <I2C_ITSlaveCplt+0x2c0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	e026      	b.n	8005e66 <I2C_ITSlaveCplt+0x2ca>
 8005e18:	fe00e800 	.word	0xfe00e800
 8005e1c:	40020010 	.word	0x40020010
 8005e20:	40020028 	.word	0x40020028
 8005e24:	40020040 	.word	0x40020040
 8005e28:	40020058 	.word	0x40020058
 8005e2c:	40020070 	.word	0x40020070
 8005e30:	40020088 	.word	0x40020088
 8005e34:	400200a0 	.word	0x400200a0
 8005e38:	400200b8 	.word	0x400200b8
 8005e3c:	40020410 	.word	0x40020410
 8005e40:	40020428 	.word	0x40020428
 8005e44:	40020440 	.word	0x40020440
 8005e48:	40020458 	.word	0x40020458
 8005e4c:	40020470 	.word	0x40020470
 8005e50:	40020488 	.word	0x40020488
 8005e54:	400204a0 	.word	0x400204a0
 8005e58:	400204b8 	.word	0x400204b8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d020      	beq.n	8005eb8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 0304 	bic.w	r3, r3, #4
 8005e7c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	f043 0204 	orr.w	r2, r3, #4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d010      	beq.n	8005f06 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f8a4 	bl	8006038 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b28      	cmp	r3, #40	; 0x28
 8005efa:	d141      	bne.n	8005f80 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005efc:	6979      	ldr	r1, [r7, #20]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f844 	bl	8005f8c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f04:	e03c      	b.n	8005f80 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f0e:	d014      	beq.n	8005f3a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff fde5 	bl	8005ae0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1b      	ldr	r2, [pc, #108]	; (8005f88 <I2C_ITSlaveCplt+0x3ec>)
 8005f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fb87 	bl	8005646 <HAL_I2C_ListenCpltCallback>
}
 8005f38:	e022      	b.n	8005f80 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b22      	cmp	r3, #34	; 0x22
 8005f44:	d10e      	bne.n	8005f64 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff fb5a 	bl	8005616 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f62:	e00d      	b.n	8005f80 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fb41 	bl	8005602 <HAL_I2C_SlaveTxCpltCallback>
}
 8005f80:	bf00      	nop
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	ffff0000 	.word	0xffff0000

08005f8c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a26      	ldr	r2, [pc, #152]	; (8006034 <I2C_ITListenCplt+0xa8>)
 8005f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	089b      	lsrs	r3, r3, #2
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d022      	beq.n	800600a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d012      	beq.n	800600a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	f043 0204 	orr.w	r2, r3, #4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800600a:	f248 0103 	movw	r1, #32771	; 0x8003
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fb26 	bl	8006660 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2210      	movs	r2, #16
 800601a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff fb0e 	bl	8005646 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	ffff0000 	.word	0xffff0000

08006038 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006048:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a5d      	ldr	r2, [pc, #372]	; (80061cc <I2C_ITError+0x194>)
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b28      	cmp	r3, #40	; 0x28
 800606e:	d005      	beq.n	800607c <I2C_ITError+0x44>
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b29      	cmp	r3, #41	; 0x29
 8006074:	d002      	beq.n	800607c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	2b2a      	cmp	r3, #42	; 0x2a
 800607a:	d10b      	bne.n	8006094 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800607c:	2103      	movs	r1, #3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 faee 	bl	8006660 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2228      	movs	r2, #40	; 0x28
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a50      	ldr	r2, [pc, #320]	; (80061d0 <I2C_ITError+0x198>)
 8006090:	635a      	str	r2, [r3, #52]	; 0x34
 8006092:	e011      	b.n	80060b8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006094:	f248 0103 	movw	r1, #32771	; 0x8003
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fae1 	bl	8006660 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b60      	cmp	r3, #96	; 0x60
 80060a8:	d003      	beq.n	80060b2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d039      	beq.n	800613a <I2C_ITError+0x102>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b11      	cmp	r3, #17
 80060ca:	d002      	beq.n	80060d2 <I2C_ITError+0x9a>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b21      	cmp	r3, #33	; 0x21
 80060d0:	d133      	bne.n	800613a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e0:	d107      	bne.n	80060f2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fd fe78 	bl	8003dec <HAL_DMA_GetState>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d017      	beq.n	8006132 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	4a33      	ldr	r2, [pc, #204]	; (80061d4 <I2C_ITError+0x19c>)
 8006108:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	4618      	mov	r0, r3
 8006118:	f7fc fcfa 	bl	8002b10 <HAL_DMA_Abort_IT>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d04d      	beq.n	80061be <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800612c:	4610      	mov	r0, r2
 800612e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006130:	e045      	b.n	80061be <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f850 	bl	80061d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006138:	e041      	b.n	80061be <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d039      	beq.n	80061b6 <I2C_ITError+0x17e>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b12      	cmp	r3, #18
 8006146:	d002      	beq.n	800614e <I2C_ITError+0x116>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b22      	cmp	r3, #34	; 0x22
 800614c:	d133      	bne.n	80061b6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615c:	d107      	bne.n	800616e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800616c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	4618      	mov	r0, r3
 8006174:	f7fd fe3a 	bl	8003dec <HAL_DMA_GetState>
 8006178:	4603      	mov	r3, r0
 800617a:	2b01      	cmp	r3, #1
 800617c:	d017      	beq.n	80061ae <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	4a14      	ldr	r2, [pc, #80]	; (80061d4 <I2C_ITError+0x19c>)
 8006184:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	4618      	mov	r0, r3
 8006194:	f7fc fcbc 	bl	8002b10 <HAL_DMA_Abort_IT>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d011      	beq.n	80061c2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061a8:	4610      	mov	r0, r2
 80061aa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061ac:	e009      	b.n	80061c2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f812 	bl	80061d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061b4:	e005      	b.n	80061c2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f80e 	bl	80061d8 <I2C_TreatErrorCallback>
  }
}
 80061bc:	e002      	b.n	80061c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80061be:	bf00      	nop
 80061c0:	e000      	b.n	80061c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061c2:	bf00      	nop
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	ffff0000 	.word	0xffff0000
 80061d0:	08005683 	.word	0x08005683
 80061d4:	0800626f 	.word	0x0800626f

080061d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b60      	cmp	r3, #96	; 0x60
 80061ea:	d10e      	bne.n	800620a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff fa33 	bl	800566e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006208:	e009      	b.n	800621e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff fa1e 	bl	800565a <HAL_I2C_ErrorCallback>
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b02      	cmp	r3, #2
 800623a:	d103      	bne.n	8006244 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2200      	movs	r2, #0
 8006242:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b01      	cmp	r3, #1
 8006250:	d007      	beq.n	8006262 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699a      	ldr	r2, [r3, #24]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0201 	orr.w	r2, r2, #1
 8006260:	619a      	str	r2, [r3, #24]
  }
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	2200      	movs	r2, #0
 800628a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006298:	2200      	movs	r2, #0
 800629a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff ff9b 	bl	80061d8 <I2C_TreatErrorCallback>
}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	4613      	mov	r3, r2
 80062b8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062ba:	e022      	b.n	8006302 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c2:	d01e      	beq.n	8006302 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c4:	f7fb fc28 	bl	8001b18 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d302      	bcc.n	80062da <I2C_WaitOnFlagUntilTimeout+0x30>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d113      	bne.n	8006302 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	f043 0220 	orr.w	r2, r3, #32
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e00f      	b.n	8006322 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4013      	ands	r3, r2
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	429a      	cmp	r2, r3
 8006310:	bf0c      	ite	eq
 8006312:	2301      	moveq	r3, #1
 8006314:	2300      	movne	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	429a      	cmp	r2, r3
 800631e:	d0cd      	beq.n	80062bc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006336:	e02c      	b.n	8006392 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f871 	bl	8006424 <I2C_IsErrorOccurred>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e02a      	b.n	80063a2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006352:	d01e      	beq.n	8006392 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006354:	f7fb fbe0 	bl	8001b18 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	429a      	cmp	r2, r3
 8006362:	d302      	bcc.n	800636a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d113      	bne.n	8006392 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636e:	f043 0220 	orr.w	r2, r3, #32
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2220      	movs	r2, #32
 800637a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e007      	b.n	80063a2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b02      	cmp	r3, #2
 800639e:	d1cb      	bne.n	8006338 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063b6:	e028      	b.n	800640a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f831 	bl	8006424 <I2C_IsErrorOccurred>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e026      	b.n	800641a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063cc:	f7fb fba4 	bl	8001b18 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d302      	bcc.n	80063e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d113      	bne.n	800640a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	f043 0220 	orr.w	r2, r3, #32
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e007      	b.n	800641a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b20      	cmp	r3, #32
 8006416:	d1cf      	bne.n	80063b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b00      	cmp	r3, #0
 800644e:	d075      	beq.n	800653c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2210      	movs	r2, #16
 8006456:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006458:	e056      	b.n	8006508 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006460:	d052      	beq.n	8006508 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006462:	f7fb fb59 	bl	8001b18 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	d302      	bcc.n	8006478 <I2C_IsErrorOccurred+0x54>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d147      	bne.n	8006508 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006482:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800648a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800649a:	d12e      	bne.n	80064fa <I2C_IsErrorOccurred+0xd6>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064a2:	d02a      	beq.n	80064fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80064a4:	7cfb      	ldrb	r3, [r7, #19]
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d027      	beq.n	80064fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064b8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80064ba:	f7fb fb2d 	bl	8001b18 <HAL_GetTick>
 80064be:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064c0:	e01b      	b.n	80064fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80064c2:	f7fb fb29 	bl	8001b18 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b19      	cmp	r3, #25
 80064ce:	d914      	bls.n	80064fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d4:	f043 0220 	orr.w	r2, r3, #32
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b20      	cmp	r3, #32
 8006506:	d1dc      	bne.n	80064c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b20      	cmp	r3, #32
 8006514:	d003      	beq.n	800651e <I2C_IsErrorOccurred+0xfa>
 8006516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800651a:	2b00      	cmp	r3, #0
 800651c:	d09d      	beq.n	800645a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800651e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006522:	2b00      	cmp	r3, #0
 8006524:	d103      	bne.n	800652e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2220      	movs	r2, #32
 800652c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	f043 0304 	orr.w	r3, r3, #4
 8006534:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800655e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	f043 0308 	orr.w	r3, r3, #8
 8006576:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006580:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80065aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01c      	beq.n	80065ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff fe37 	bl	8006226 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6859      	ldr	r1, [r3, #4]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <I2C_IsErrorOccurred+0x1d4>)
 80065c4:	400b      	ands	r3, r1
 80065c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	431a      	orrs	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80065ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3728      	adds	r7, #40	; 0x28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	fe00e800 	.word	0xfe00e800

080065fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	607b      	str	r3, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	817b      	strh	r3, [r7, #10]
 800660a:	4613      	mov	r3, r2
 800660c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800660e:	897b      	ldrh	r3, [r7, #10]
 8006610:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006614:	7a7b      	ldrb	r3, [r7, #9]
 8006616:	041b      	lsls	r3, r3, #16
 8006618:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800661c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	4313      	orrs	r3, r2
 8006626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800662a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	0d5b      	lsrs	r3, r3, #21
 8006636:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800663a:	4b08      	ldr	r3, [pc, #32]	; (800665c <I2C_TransferConfig+0x60>)
 800663c:	430b      	orrs	r3, r1
 800663e:	43db      	mvns	r3, r3
 8006640:	ea02 0103 	and.w	r1, r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	03ff63ff 	.word	0x03ff63ff

08006660 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00f      	beq.n	800669a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006680:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800668e:	2b28      	cmp	r3, #40	; 0x28
 8006690:	d003      	beq.n	800669a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006698:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800669a:	887b      	ldrh	r3, [r7, #2]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00f      	beq.n	80066c4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80066aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80066b8:	2b28      	cmp	r3, #40	; 0x28
 80066ba:	d003      	beq.n	80066c4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80066c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80066c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	da03      	bge.n	80066d4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80066d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80066d4:	887b      	ldrh	r3, [r7, #2]
 80066d6:	2b10      	cmp	r3, #16
 80066d8:	d103      	bne.n	80066e2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80066e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80066e2:	887b      	ldrh	r3, [r7, #2]
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d103      	bne.n	80066f0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f043 0320 	orr.w	r3, r3, #32
 80066ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80066f0:	887b      	ldrh	r3, [r7, #2]
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d103      	bne.n	80066fe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066fc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6819      	ldr	r1, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	43da      	mvns	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	400a      	ands	r2, r1
 800670e:	601a      	str	r2, [r3, #0]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b20      	cmp	r3, #32
 8006730:	d138      	bne.n	80067a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800673c:	2302      	movs	r3, #2
 800673e:	e032      	b.n	80067a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2224      	movs	r2, #36	; 0x24
 800674c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800676e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6819      	ldr	r1, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0201 	orr.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e000      	b.n	80067a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
  }
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d139      	bne.n	800683c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e033      	b.n	800683e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2224      	movs	r2, #36	; 0x24
 80067e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0201 	bic.w	r2, r2, #1
 80067f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	e000      	b.n	800683e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800683c:	2302      	movs	r3, #2
  }
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
	...

0800684c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006854:	4b29      	ldr	r3, [pc, #164]	; (80068fc <HAL_PWREx_ConfigSupply+0xb0>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	2b06      	cmp	r3, #6
 800685e:	d00a      	beq.n	8006876 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006860:	4b26      	ldr	r3, [pc, #152]	; (80068fc <HAL_PWREx_ConfigSupply+0xb0>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d001      	beq.n	8006872 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e03f      	b.n	80068f2 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	e03d      	b.n	80068f2 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006876:	4b21      	ldr	r3, [pc, #132]	; (80068fc <HAL_PWREx_ConfigSupply+0xb0>)
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800687e:	491f      	ldr	r1, [pc, #124]	; (80068fc <HAL_PWREx_ConfigSupply+0xb0>)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4313      	orrs	r3, r2
 8006884:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006886:	f7fb f947 	bl	8001b18 <HAL_GetTick>
 800688a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800688c:	e009      	b.n	80068a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800688e:	f7fb f943 	bl	8001b18 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800689c:	d901      	bls.n	80068a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e027      	b.n	80068f2 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068a2:	4b16      	ldr	r3, [pc, #88]	; (80068fc <HAL_PWREx_ConfigSupply+0xb0>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ae:	d1ee      	bne.n	800688e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b1e      	cmp	r3, #30
 80068b4:	d008      	beq.n	80068c8 <HAL_PWREx_ConfigSupply+0x7c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b2e      	cmp	r3, #46	; 0x2e
 80068ba:	d005      	beq.n	80068c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b1d      	cmp	r3, #29
 80068c0:	d002      	beq.n	80068c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b2d      	cmp	r3, #45	; 0x2d
 80068c6:	d113      	bne.n	80068f0 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80068c8:	f7fb f926 	bl	8001b18 <HAL_GetTick>
 80068cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80068ce:	e009      	b.n	80068e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068d0:	f7fb f922 	bl	8001b18 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068de:	d901      	bls.n	80068e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e006      	b.n	80068f2 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80068e4:	4b05      	ldr	r3, [pc, #20]	; (80068fc <HAL_PWREx_ConfigSupply+0xb0>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0311 	and.w	r3, r3, #17
 80068ec:	2b11      	cmp	r3, #17
 80068ee:	d1ef      	bne.n	80068d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	58024800 	.word	0x58024800

08006900 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e02d      	b.n	800696e <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2202      	movs	r2, #2
 8006916:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0220 	bic.w	r2, r2, #32
 8006926:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6812      	ldr	r2, [r2, #0]
 8006936:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800693a:	f023 030f 	bic.w	r3, r3, #15
 800693e:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 021c 	bic.w	r2, r2, #28
 800694e:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0207 	bic.w	r2, r2, #7
 800695e:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
	...

0800697c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08c      	sub	sp, #48	; 0x30
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e397      	b.n	80070be <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8087 	beq.w	8006aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800699c:	4b9e      	ldr	r3, [pc, #632]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069a6:	4b9c      	ldr	r3, [pc, #624]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d007      	beq.n	80069c2 <HAL_RCC_OscConfig+0x46>
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	2b18      	cmp	r3, #24
 80069b6:	d110      	bne.n	80069da <HAL_RCC_OscConfig+0x5e>
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d10b      	bne.n	80069da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c2:	4b95      	ldr	r3, [pc, #596]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d06c      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x12c>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d168      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e371      	b.n	80070be <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e2:	d106      	bne.n	80069f2 <HAL_RCC_OscConfig+0x76>
 80069e4:	4b8c      	ldr	r3, [pc, #560]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a8b      	ldr	r2, [pc, #556]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 80069ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	e02e      	b.n	8006a50 <HAL_RCC_OscConfig+0xd4>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10c      	bne.n	8006a14 <HAL_RCC_OscConfig+0x98>
 80069fa:	4b87      	ldr	r3, [pc, #540]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a86      	ldr	r2, [pc, #536]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	4b84      	ldr	r3, [pc, #528]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a83      	ldr	r2, [pc, #524]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	e01d      	b.n	8006a50 <HAL_RCC_OscConfig+0xd4>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCC_OscConfig+0xbc>
 8006a1e:	4b7e      	ldr	r3, [pc, #504]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a7d      	ldr	r2, [pc, #500]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	4b7b      	ldr	r3, [pc, #492]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a7a      	ldr	r2, [pc, #488]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	e00b      	b.n	8006a50 <HAL_RCC_OscConfig+0xd4>
 8006a38:	4b77      	ldr	r3, [pc, #476]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a76      	ldr	r2, [pc, #472]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	4b74      	ldr	r3, [pc, #464]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a73      	ldr	r2, [pc, #460]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d013      	beq.n	8006a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fb f85e 	bl	8001b18 <HAL_GetTick>
 8006a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a60:	f7fb f85a 	bl	8001b18 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b64      	cmp	r3, #100	; 0x64
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e325      	b.n	80070be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a72:	4b69      	ldr	r3, [pc, #420]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0f0      	beq.n	8006a60 <HAL_RCC_OscConfig+0xe4>
 8006a7e:	e014      	b.n	8006aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fb f84a 	bl	8001b18 <HAL_GetTick>
 8006a84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a88:	f7fb f846 	bl	8001b18 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b64      	cmp	r3, #100	; 0x64
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e311      	b.n	80070be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a9a:	4b5f      	ldr	r3, [pc, #380]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f0      	bne.n	8006a88 <HAL_RCC_OscConfig+0x10c>
 8006aa6:	e000      	b.n	8006aaa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 808a 	beq.w	8006bcc <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ab8:	4b57      	ldr	r3, [pc, #348]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ac0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ac2:	4b55      	ldr	r3, [pc, #340]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <HAL_RCC_OscConfig+0x162>
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	2b18      	cmp	r3, #24
 8006ad2:	d137      	bne.n	8006b44 <HAL_RCC_OscConfig+0x1c8>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d132      	bne.n	8006b44 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ade:	4b4e      	ldr	r3, [pc, #312]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_RCC_OscConfig+0x17a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e2e3      	b.n	80070be <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006af6:	4b48      	ldr	r3, [pc, #288]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f023 0219 	bic.w	r2, r3, #25
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	4945      	ldr	r1, [pc, #276]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b08:	f7fb f806 	bl	8001b18 <HAL_GetTick>
 8006b0c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b10:	f7fb f802 	bl	8001b18 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e2cd      	b.n	80070be <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b22:	4b3d      	ldr	r3, [pc, #244]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f0      	beq.n	8006b10 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b2e:	4b3a      	ldr	r3, [pc, #232]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	061b      	lsls	r3, r3, #24
 8006b3c:	4936      	ldr	r1, [pc, #216]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b42:	e043      	b.n	8006bcc <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d026      	beq.n	8006b9a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b4c:	4b32      	ldr	r3, [pc, #200]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f023 0219 	bic.w	r2, r3, #25
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	492f      	ldr	r1, [pc, #188]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5e:	f7fa ffdb 	bl	8001b18 <HAL_GetTick>
 8006b62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b66:	f7fa ffd7 	bl	8001b18 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e2a2      	b.n	80070be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b78:	4b27      	ldr	r3, [pc, #156]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0f0      	beq.n	8006b66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b84:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	061b      	lsls	r3, r3, #24
 8006b92:	4921      	ldr	r1, [pc, #132]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	604b      	str	r3, [r1, #4]
 8006b98:	e018      	b.n	8006bcc <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b9a:	4b1f      	ldr	r3, [pc, #124]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006ba0:	f023 0301 	bic.w	r3, r3, #1
 8006ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba6:	f7fa ffb7 	bl	8001b18 <HAL_GetTick>
 8006baa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bae:	f7fa ffb3 	bl	8001b18 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e27e      	b.n	80070be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bc0:	4b15      	ldr	r3, [pc, #84]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f0      	bne.n	8006bae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d06d      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bd8:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006be0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006be2:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b08      	cmp	r3, #8
 8006bec:	d007      	beq.n	8006bfe <HAL_RCC_OscConfig+0x282>
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b18      	cmp	r3, #24
 8006bf2:	d11e      	bne.n	8006c32 <HAL_RCC_OscConfig+0x2b6>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d119      	bne.n	8006c32 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bfe:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <HAL_RCC_OscConfig+0x29c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d008      	beq.n	8006c1c <HAL_RCC_OscConfig+0x2a0>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	2b80      	cmp	r3, #128	; 0x80
 8006c10:	d004      	beq.n	8006c1c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e253      	b.n	80070be <HAL_RCC_OscConfig+0x742>
 8006c16:	bf00      	nop
 8006c18:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c1c:	4ba3      	ldr	r3, [pc, #652]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	061b      	lsls	r3, r3, #24
 8006c2a:	49a0      	ldr	r1, [pc, #640]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c30:	e040      	b.n	8006cb4 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d023      	beq.n	8006c82 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c3a:	4b9c      	ldr	r3, [pc, #624]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a9b      	ldr	r2, [pc, #620]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c46:	f7fa ff67 	bl	8001b18 <HAL_GetTick>
 8006c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c4e:	f7fa ff63 	bl	8001b18 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e22e      	b.n	80070be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c60:	4b92      	ldr	r3, [pc, #584]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c6c:	4b8f      	ldr	r3, [pc, #572]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	061b      	lsls	r3, r3, #24
 8006c7a:	498c      	ldr	r1, [pc, #560]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60cb      	str	r3, [r1, #12]
 8006c80:	e018      	b.n	8006cb4 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c82:	4b8a      	ldr	r3, [pc, #552]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a89      	ldr	r2, [pc, #548]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8e:	f7fa ff43 	bl	8001b18 <HAL_GetTick>
 8006c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c96:	f7fa ff3f 	bl	8001b18 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e20a      	b.n	80070be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ca8:	4b80      	ldr	r3, [pc, #512]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1f0      	bne.n	8006c96 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d036      	beq.n	8006d2e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d019      	beq.n	8006cfc <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cc8:	4b78      	ldr	r3, [pc, #480]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ccc:	4a77      	ldr	r2, [pc, #476]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006cce:	f043 0301 	orr.w	r3, r3, #1
 8006cd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd4:	f7fa ff20 	bl	8001b18 <HAL_GetTick>
 8006cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cdc:	f7fa ff1c 	bl	8001b18 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e1e7      	b.n	80070be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cee:	4b6f      	ldr	r3, [pc, #444]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f0      	beq.n	8006cdc <HAL_RCC_OscConfig+0x360>
 8006cfa:	e018      	b.n	8006d2e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cfc:	4b6b      	ldr	r3, [pc, #428]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d00:	4a6a      	ldr	r2, [pc, #424]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d08:	f7fa ff06 	bl	8001b18 <HAL_GetTick>
 8006d0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d10:	f7fa ff02 	bl	8001b18 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e1cd      	b.n	80070be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d22:	4b62      	ldr	r3, [pc, #392]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1f0      	bne.n	8006d10 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d036      	beq.n	8006da8 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d019      	beq.n	8006d76 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d42:	4b5a      	ldr	r3, [pc, #360]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a59      	ldr	r2, [pc, #356]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d4e:	f7fa fee3 	bl	8001b18 <HAL_GetTick>
 8006d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d56:	f7fa fedf 	bl	8001b18 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e1aa      	b.n	80070be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d68:	4b50      	ldr	r3, [pc, #320]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0f0      	beq.n	8006d56 <HAL_RCC_OscConfig+0x3da>
 8006d74:	e018      	b.n	8006da8 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d76:	4b4d      	ldr	r3, [pc, #308]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a4c      	ldr	r2, [pc, #304]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d82:	f7fa fec9 	bl	8001b18 <HAL_GetTick>
 8006d86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d8a:	f7fa fec5 	bl	8001b18 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e190      	b.n	80070be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d9c:	4b43      	ldr	r3, [pc, #268]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f0      	bne.n	8006d8a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8085 	beq.w	8006ec0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006db6:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <HAL_RCC_OscConfig+0x534>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a3d      	ldr	r2, [pc, #244]	; (8006eb0 <HAL_RCC_OscConfig+0x534>)
 8006dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dc2:	f7fa fea9 	bl	8001b18 <HAL_GetTick>
 8006dc6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dc8:	e008      	b.n	8006ddc <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006dca:	f7fa fea5 	bl	8001b18 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b64      	cmp	r3, #100	; 0x64
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e170      	b.n	80070be <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ddc:	4b34      	ldr	r3, [pc, #208]	; (8006eb0 <HAL_RCC_OscConfig+0x534>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0f0      	beq.n	8006dca <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d106      	bne.n	8006dfe <HAL_RCC_OscConfig+0x482>
 8006df0:	4b2e      	ldr	r3, [pc, #184]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	4a2d      	ldr	r2, [pc, #180]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006df6:	f043 0301 	orr.w	r3, r3, #1
 8006dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8006dfc:	e02d      	b.n	8006e5a <HAL_RCC_OscConfig+0x4de>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10c      	bne.n	8006e20 <HAL_RCC_OscConfig+0x4a4>
 8006e06:	4b29      	ldr	r3, [pc, #164]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0a:	4a28      	ldr	r2, [pc, #160]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e0c:	f023 0301 	bic.w	r3, r3, #1
 8006e10:	6713      	str	r3, [r2, #112]	; 0x70
 8006e12:	4b26      	ldr	r3, [pc, #152]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	4a25      	ldr	r2, [pc, #148]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e18:	f023 0304 	bic.w	r3, r3, #4
 8006e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1e:	e01c      	b.n	8006e5a <HAL_RCC_OscConfig+0x4de>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	2b05      	cmp	r3, #5
 8006e26:	d10c      	bne.n	8006e42 <HAL_RCC_OscConfig+0x4c6>
 8006e28:	4b20      	ldr	r3, [pc, #128]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2c:	4a1f      	ldr	r2, [pc, #124]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e2e:	f043 0304 	orr.w	r3, r3, #4
 8006e32:	6713      	str	r3, [r2, #112]	; 0x70
 8006e34:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e38:	4a1c      	ldr	r2, [pc, #112]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e40:	e00b      	b.n	8006e5a <HAL_RCC_OscConfig+0x4de>
 8006e42:	4b1a      	ldr	r3, [pc, #104]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e46:	4a19      	ldr	r2, [pc, #100]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e4e:	4b17      	ldr	r3, [pc, #92]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e52:	4a16      	ldr	r2, [pc, #88]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e54:	f023 0304 	bic.w	r3, r3, #4
 8006e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d015      	beq.n	8006e8e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e62:	f7fa fe59 	bl	8001b18 <HAL_GetTick>
 8006e66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e68:	e00a      	b.n	8006e80 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e6a:	f7fa fe55 	bl	8001b18 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e11e      	b.n	80070be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e80:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <HAL_RCC_OscConfig+0x530>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0ee      	beq.n	8006e6a <HAL_RCC_OscConfig+0x4ee>
 8006e8c:	e018      	b.n	8006ec0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e8e:	f7fa fe43 	bl	8001b18 <HAL_GetTick>
 8006e92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e94:	e00e      	b.n	8006eb4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e96:	f7fa fe3f 	bl	8001b18 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d905      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e108      	b.n	80070be <HAL_RCC_OscConfig+0x742>
 8006eac:	58024400 	.word	0x58024400
 8006eb0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006eb4:	4b84      	ldr	r3, [pc, #528]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1ea      	bne.n	8006e96 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 80f9 	beq.w	80070bc <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006eca:	4b7f      	ldr	r3, [pc, #508]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ed2:	2b18      	cmp	r3, #24
 8006ed4:	f000 80b4 	beq.w	8007040 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	f040 8095 	bne.w	800700c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee2:	4b79      	ldr	r3, [pc, #484]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a78      	ldr	r2, [pc, #480]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006ee8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eee:	f7fa fe13 	bl	8001b18 <HAL_GetTick>
 8006ef2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ef6:	f7fa fe0f 	bl	8001b18 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e0da      	b.n	80070be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f08:	4b6f      	ldr	r3, [pc, #444]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1f0      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f14:	4b6c      	ldr	r3, [pc, #432]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f18:	4b6c      	ldr	r3, [pc, #432]	; (80070cc <HAL_RCC_OscConfig+0x750>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f24:	0112      	lsls	r2, r2, #4
 8006f26:	430a      	orrs	r2, r1
 8006f28:	4967      	ldr	r1, [pc, #412]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	628b      	str	r3, [r1, #40]	; 0x28
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	3b01      	subs	r3, #1
 8006f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	025b      	lsls	r3, r3, #9
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	041b      	lsls	r3, r3, #16
 8006f4c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	3b01      	subs	r3, #1
 8006f58:	061b      	lsls	r3, r3, #24
 8006f5a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f5e:	495a      	ldr	r1, [pc, #360]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f64:	4b58      	ldr	r3, [pc, #352]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4a57      	ldr	r2, [pc, #348]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f6a:	f023 0301 	bic.w	r3, r3, #1
 8006f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f70:	4b55      	ldr	r3, [pc, #340]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f74:	4b56      	ldr	r3, [pc, #344]	; (80070d0 <HAL_RCC_OscConfig+0x754>)
 8006f76:	4013      	ands	r3, r2
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f7c:	00d2      	lsls	r2, r2, #3
 8006f7e:	4952      	ldr	r1, [pc, #328]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f84:	4b50      	ldr	r3, [pc, #320]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	f023 020c 	bic.w	r2, r3, #12
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	494d      	ldr	r1, [pc, #308]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f96:	4b4c      	ldr	r3, [pc, #304]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	f023 0202 	bic.w	r2, r3, #2
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa2:	4949      	ldr	r1, [pc, #292]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fa8:	4b47      	ldr	r3, [pc, #284]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	4a46      	ldr	r2, [pc, #280]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb4:	4b44      	ldr	r3, [pc, #272]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	4a43      	ldr	r2, [pc, #268]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006fc0:	4b41      	ldr	r3, [pc, #260]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4a40      	ldr	r2, [pc, #256]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006fcc:	4b3e      	ldr	r3, [pc, #248]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	4a3d      	ldr	r2, [pc, #244]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006fd2:	f043 0301 	orr.w	r3, r3, #1
 8006fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fd8:	4b3b      	ldr	r3, [pc, #236]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a3a      	ldr	r2, [pc, #232]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8006fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fa fd98 	bl	8001b18 <HAL_GetTick>
 8006fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fec:	f7fa fd94 	bl	8001b18 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e05f      	b.n	80070be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ffe:	4b32      	ldr	r3, [pc, #200]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f0      	beq.n	8006fec <HAL_RCC_OscConfig+0x670>
 800700a:	e057      	b.n	80070bc <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800700c:	4b2e      	ldr	r3, [pc, #184]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a2d      	ldr	r2, [pc, #180]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8007012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fa fd7e 	bl	8001b18 <HAL_GetTick>
 800701c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007020:	f7fa fd7a 	bl	8001b18 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e045      	b.n	80070be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007032:	4b25      	ldr	r3, [pc, #148]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f0      	bne.n	8007020 <HAL_RCC_OscConfig+0x6a4>
 800703e:	e03d      	b.n	80070bc <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007040:	4b21      	ldr	r3, [pc, #132]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007046:	4b20      	ldr	r3, [pc, #128]	; (80070c8 <HAL_RCC_OscConfig+0x74c>)
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	2b01      	cmp	r3, #1
 8007052:	d031      	beq.n	80070b8 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f003 0203 	and.w	r2, r3, #3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800705e:	429a      	cmp	r2, r3
 8007060:	d12a      	bne.n	80070b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	091b      	lsrs	r3, r3, #4
 8007066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706e:	429a      	cmp	r2, r3
 8007070:	d122      	bne.n	80070b8 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800707e:	429a      	cmp	r2, r3
 8007080:	d11a      	bne.n	80070b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	0a5b      	lsrs	r3, r3, #9
 8007086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007090:	429a      	cmp	r2, r3
 8007092:	d111      	bne.n	80070b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	0c1b      	lsrs	r3, r3, #16
 8007098:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d108      	bne.n	80070b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	0e1b      	lsrs	r3, r3, #24
 80070aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d001      	beq.n	80070bc <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e000      	b.n	80070be <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3730      	adds	r7, #48	; 0x30
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	58024400 	.word	0x58024400
 80070cc:	fffffc0c 	.word	0xfffffc0c
 80070d0:	ffff0007 	.word	0xffff0007

080070d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e19c      	b.n	8007422 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070e8:	4b8a      	ldr	r3, [pc, #552]	; (8007314 <HAL_RCC_ClockConfig+0x240>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 030f 	and.w	r3, r3, #15
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d910      	bls.n	8007118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f6:	4b87      	ldr	r3, [pc, #540]	; (8007314 <HAL_RCC_ClockConfig+0x240>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f023 020f 	bic.w	r2, r3, #15
 80070fe:	4985      	ldr	r1, [pc, #532]	; (8007314 <HAL_RCC_ClockConfig+0x240>)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	4313      	orrs	r3, r2
 8007104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007106:	4b83      	ldr	r3, [pc, #524]	; (8007314 <HAL_RCC_ClockConfig+0x240>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d001      	beq.n	8007118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e184      	b.n	8007422 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b00      	cmp	r3, #0
 8007122:	d010      	beq.n	8007146 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691a      	ldr	r2, [r3, #16]
 8007128:	4b7b      	ldr	r3, [pc, #492]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007130:	429a      	cmp	r2, r3
 8007132:	d908      	bls.n	8007146 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007134:	4b78      	ldr	r3, [pc, #480]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	4975      	ldr	r1, [pc, #468]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007142:	4313      	orrs	r3, r2
 8007144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d010      	beq.n	8007174 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695a      	ldr	r2, [r3, #20]
 8007156:	4b70      	ldr	r3, [pc, #448]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800715e:	429a      	cmp	r2, r3
 8007160:	d908      	bls.n	8007174 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007162:	4b6d      	ldr	r3, [pc, #436]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	496a      	ldr	r1, [pc, #424]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007170:	4313      	orrs	r3, r2
 8007172:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b00      	cmp	r3, #0
 800717e:	d010      	beq.n	80071a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699a      	ldr	r2, [r3, #24]
 8007184:	4b64      	ldr	r3, [pc, #400]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800718c:	429a      	cmp	r2, r3
 800718e:	d908      	bls.n	80071a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007190:	4b61      	ldr	r3, [pc, #388]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	495e      	ldr	r1, [pc, #376]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d010      	beq.n	80071d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69da      	ldr	r2, [r3, #28]
 80071b2:	4b59      	ldr	r3, [pc, #356]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d908      	bls.n	80071d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80071be:	4b56      	ldr	r3, [pc, #344]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	4953      	ldr	r1, [pc, #332]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d010      	beq.n	80071fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	4b4d      	ldr	r3, [pc, #308]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d908      	bls.n	80071fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071ec:	4b4a      	ldr	r3, [pc, #296]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f023 020f 	bic.w	r2, r3, #15
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	4947      	ldr	r1, [pc, #284]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d055      	beq.n	80072b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800720a:	4b43      	ldr	r3, [pc, #268]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	4940      	ldr	r1, [pc, #256]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007218:	4313      	orrs	r3, r2
 800721a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d107      	bne.n	8007234 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007224:	4b3c      	ldr	r3, [pc, #240]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d121      	bne.n	8007274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e0f6      	b.n	8007422 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b03      	cmp	r3, #3
 800723a:	d107      	bne.n	800724c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800723c:	4b36      	ldr	r3, [pc, #216]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d115      	bne.n	8007274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e0ea      	b.n	8007422 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d107      	bne.n	8007264 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007254:	4b30      	ldr	r3, [pc, #192]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d109      	bne.n	8007274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e0de      	b.n	8007422 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007264:	4b2c      	ldr	r3, [pc, #176]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e0d6      	b.n	8007422 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007274:	4b28      	ldr	r3, [pc, #160]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f023 0207 	bic.w	r2, r3, #7
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4925      	ldr	r1, [pc, #148]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 8007282:	4313      	orrs	r3, r2
 8007284:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007286:	f7fa fc47 	bl	8001b18 <HAL_GetTick>
 800728a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800728c:	e00a      	b.n	80072a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800728e:	f7fa fc43 	bl	8001b18 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	f241 3288 	movw	r2, #5000	; 0x1388
 800729c:	4293      	cmp	r3, r2
 800729e:	d901      	bls.n	80072a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e0be      	b.n	8007422 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a4:	4b1c      	ldr	r3, [pc, #112]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d1eb      	bne.n	800728e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d010      	beq.n	80072e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d208      	bcs.n	80072e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072d2:	4b11      	ldr	r3, [pc, #68]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f023 020f 	bic.w	r2, r3, #15
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	490e      	ldr	r1, [pc, #56]	; (8007318 <HAL_RCC_ClockConfig+0x244>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <HAL_RCC_ClockConfig+0x240>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d214      	bcs.n	800731c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072f2:	4b08      	ldr	r3, [pc, #32]	; (8007314 <HAL_RCC_ClockConfig+0x240>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f023 020f 	bic.w	r2, r3, #15
 80072fa:	4906      	ldr	r1, [pc, #24]	; (8007314 <HAL_RCC_ClockConfig+0x240>)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	4313      	orrs	r3, r2
 8007300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007302:	4b04      	ldr	r3, [pc, #16]	; (8007314 <HAL_RCC_ClockConfig+0x240>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d005      	beq.n	800731c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e086      	b.n	8007422 <HAL_RCC_ClockConfig+0x34e>
 8007314:	52002000 	.word	0x52002000
 8007318:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d010      	beq.n	800734a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691a      	ldr	r2, [r3, #16]
 800732c:	4b3f      	ldr	r3, [pc, #252]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007334:	429a      	cmp	r2, r3
 8007336:	d208      	bcs.n	800734a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007338:	4b3c      	ldr	r3, [pc, #240]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	4939      	ldr	r1, [pc, #228]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 8007346:	4313      	orrs	r3, r2
 8007348:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d010      	beq.n	8007378 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695a      	ldr	r2, [r3, #20]
 800735a:	4b34      	ldr	r3, [pc, #208]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007362:	429a      	cmp	r2, r3
 8007364:	d208      	bcs.n	8007378 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007366:	4b31      	ldr	r3, [pc, #196]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	492e      	ldr	r1, [pc, #184]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 8007374:	4313      	orrs	r3, r2
 8007376:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	2b00      	cmp	r3, #0
 8007382:	d010      	beq.n	80073a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	699a      	ldr	r2, [r3, #24]
 8007388:	4b28      	ldr	r3, [pc, #160]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007390:	429a      	cmp	r2, r3
 8007392:	d208      	bcs.n	80073a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007394:	4b25      	ldr	r3, [pc, #148]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	4922      	ldr	r1, [pc, #136]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d010      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69da      	ldr	r2, [r3, #28]
 80073b6:	4b1d      	ldr	r3, [pc, #116]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073be:	429a      	cmp	r2, r3
 80073c0:	d208      	bcs.n	80073d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073c2:	4b1a      	ldr	r3, [pc, #104]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	4917      	ldr	r1, [pc, #92]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073d4:	f000 f834 	bl	8007440 <HAL_RCC_GetSysClockFreq>
 80073d8:	4602      	mov	r2, r0
 80073da:	4b14      	ldr	r3, [pc, #80]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	0a1b      	lsrs	r3, r3, #8
 80073e0:	f003 030f 	and.w	r3, r3, #15
 80073e4:	4912      	ldr	r1, [pc, #72]	; (8007430 <HAL_RCC_ClockConfig+0x35c>)
 80073e6:	5ccb      	ldrb	r3, [r1, r3]
 80073e8:	f003 031f 	and.w	r3, r3, #31
 80073ec:	fa22 f303 	lsr.w	r3, r2, r3
 80073f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073f2:	4b0e      	ldr	r3, [pc, #56]	; (800742c <HAL_RCC_ClockConfig+0x358>)
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	4a0d      	ldr	r2, [pc, #52]	; (8007430 <HAL_RCC_ClockConfig+0x35c>)
 80073fc:	5cd3      	ldrb	r3, [r2, r3]
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
 8007408:	4a0a      	ldr	r2, [pc, #40]	; (8007434 <HAL_RCC_ClockConfig+0x360>)
 800740a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800740c:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <HAL_RCC_ClockConfig+0x364>)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007412:	4b0a      	ldr	r3, [pc, #40]	; (800743c <HAL_RCC_ClockConfig+0x368>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f7fa fb34 	bl	8001a84 <HAL_InitTick>
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	58024400 	.word	0x58024400
 8007430:	0800d300 	.word	0x0800d300
 8007434:	24000420 	.word	0x24000420
 8007438:	2400041c 	.word	0x2400041c
 800743c:	2400040c 	.word	0x2400040c

08007440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007440:	b480      	push	{r7}
 8007442:	b089      	sub	sp, #36	; 0x24
 8007444:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007446:	4bb3      	ldr	r3, [pc, #716]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800744e:	2b18      	cmp	r3, #24
 8007450:	f200 8155 	bhi.w	80076fe <HAL_RCC_GetSysClockFreq+0x2be>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	080074c1 	.word	0x080074c1
 8007460:	080076ff 	.word	0x080076ff
 8007464:	080076ff 	.word	0x080076ff
 8007468:	080076ff 	.word	0x080076ff
 800746c:	080076ff 	.word	0x080076ff
 8007470:	080076ff 	.word	0x080076ff
 8007474:	080076ff 	.word	0x080076ff
 8007478:	080076ff 	.word	0x080076ff
 800747c:	080074e7 	.word	0x080074e7
 8007480:	080076ff 	.word	0x080076ff
 8007484:	080076ff 	.word	0x080076ff
 8007488:	080076ff 	.word	0x080076ff
 800748c:	080076ff 	.word	0x080076ff
 8007490:	080076ff 	.word	0x080076ff
 8007494:	080076ff 	.word	0x080076ff
 8007498:	080076ff 	.word	0x080076ff
 800749c:	080074ed 	.word	0x080074ed
 80074a0:	080076ff 	.word	0x080076ff
 80074a4:	080076ff 	.word	0x080076ff
 80074a8:	080076ff 	.word	0x080076ff
 80074ac:	080076ff 	.word	0x080076ff
 80074b0:	080076ff 	.word	0x080076ff
 80074b4:	080076ff 	.word	0x080076ff
 80074b8:	080076ff 	.word	0x080076ff
 80074bc:	080074f3 	.word	0x080074f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c0:	4b94      	ldr	r3, [pc, #592]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d009      	beq.n	80074e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074cc:	4b91      	ldr	r3, [pc, #580]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	08db      	lsrs	r3, r3, #3
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	4a90      	ldr	r2, [pc, #576]	; (8007718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074d8:	fa22 f303 	lsr.w	r3, r2, r3
 80074dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80074de:	e111      	b.n	8007704 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074e0:	4b8d      	ldr	r3, [pc, #564]	; (8007718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074e2:	61bb      	str	r3, [r7, #24]
    break;
 80074e4:	e10e      	b.n	8007704 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80074e6:	4b8d      	ldr	r3, [pc, #564]	; (800771c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80074e8:	61bb      	str	r3, [r7, #24]
    break;
 80074ea:	e10b      	b.n	8007704 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80074ec:	4b8c      	ldr	r3, [pc, #560]	; (8007720 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80074ee:	61bb      	str	r3, [r7, #24]
    break;
 80074f0:	e108      	b.n	8007704 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074f2:	4b88      	ldr	r3, [pc, #544]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80074fc:	4b85      	ldr	r3, [pc, #532]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	091b      	lsrs	r3, r3, #4
 8007502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007506:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007508:	4b82      	ldr	r3, [pc, #520]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007512:	4b80      	ldr	r3, [pc, #512]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007516:	08db      	lsrs	r3, r3, #3
 8007518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	fb02 f303 	mul.w	r3, r2, r3
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80e1 	beq.w	80076f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b02      	cmp	r3, #2
 800753a:	f000 8083 	beq.w	8007644 <HAL_RCC_GetSysClockFreq+0x204>
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b02      	cmp	r3, #2
 8007542:	f200 80a1 	bhi.w	8007688 <HAL_RCC_GetSysClockFreq+0x248>
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_RCC_GetSysClockFreq+0x114>
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d056      	beq.n	8007600 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007552:	e099      	b.n	8007688 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007554:	4b6f      	ldr	r3, [pc, #444]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	d02d      	beq.n	80075bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007560:	4b6c      	ldr	r3, [pc, #432]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	08db      	lsrs	r3, r3, #3
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	4a6b      	ldr	r2, [pc, #428]	; (8007718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800756c:	fa22 f303 	lsr.w	r3, r2, r3
 8007570:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	ee07 3a90 	vmov	s15, r3
 8007578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758a:	4b62      	ldr	r3, [pc, #392]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759a:	ed97 6a02 	vldr	s12, [r7, #8]
 800759e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80075ba:	e087      	b.n	80076cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007728 <HAL_RCC_GetSysClockFreq+0x2e8>
 80075ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ce:	4b51      	ldr	r3, [pc, #324]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075de:	ed97 6a02 	vldr	s12, [r7, #8]
 80075e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075fe:	e065      	b.n	80076cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800772c <HAL_RCC_GetSysClockFreq+0x2ec>
 800760e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007612:	4b40      	ldr	r3, [pc, #256]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007622:	ed97 6a02 	vldr	s12, [r7, #8]
 8007626:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800762a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007642:	e043      	b.n	80076cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007730 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007656:	4b2f      	ldr	r3, [pc, #188]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007666:	ed97 6a02 	vldr	s12, [r7, #8]
 800766a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800766e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800767a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007686:	e021      	b.n	80076cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	eddf 6a26 	vldr	s13, [pc, #152]	; 800772c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769a:	4b1e      	ldr	r3, [pc, #120]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80076cc:	4b11      	ldr	r3, [pc, #68]	; (8007714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	0a5b      	lsrs	r3, r3, #9
 80076d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d6:	3301      	adds	r3, #1
 80076d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076f0:	ee17 3a90 	vmov	r3, s15
 80076f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80076f6:	e005      	b.n	8007704 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61bb      	str	r3, [r7, #24]
    break;
 80076fc:	e002      	b.n	8007704 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007700:	61bb      	str	r3, [r7, #24]
    break;
 8007702:	bf00      	nop
  }

  return sysclockfreq;
 8007704:	69bb      	ldr	r3, [r7, #24]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3724      	adds	r7, #36	; 0x24
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	58024400 	.word	0x58024400
 8007718:	03d09000 	.word	0x03d09000
 800771c:	003d0900 	.word	0x003d0900
 8007720:	017d7840 	.word	0x017d7840
 8007724:	46000000 	.word	0x46000000
 8007728:	4c742400 	.word	0x4c742400
 800772c:	4a742400 	.word	0x4a742400
 8007730:	4bbebc20 	.word	0x4bbebc20

08007734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800773a:	f7ff fe81 	bl	8007440 <HAL_RCC_GetSysClockFreq>
 800773e:	4602      	mov	r2, r0
 8007740:	4b10      	ldr	r3, [pc, #64]	; (8007784 <HAL_RCC_GetHCLKFreq+0x50>)
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	0a1b      	lsrs	r3, r3, #8
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	490f      	ldr	r1, [pc, #60]	; (8007788 <HAL_RCC_GetHCLKFreq+0x54>)
 800774c:	5ccb      	ldrb	r3, [r1, r3]
 800774e:	f003 031f 	and.w	r3, r3, #31
 8007752:	fa22 f303 	lsr.w	r3, r2, r3
 8007756:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <HAL_RCC_GetHCLKFreq+0x50>)
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	f003 030f 	and.w	r3, r3, #15
 8007760:	4a09      	ldr	r2, [pc, #36]	; (8007788 <HAL_RCC_GetHCLKFreq+0x54>)
 8007762:	5cd3      	ldrb	r3, [r2, r3]
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	fa22 f303 	lsr.w	r3, r2, r3
 800776e:	4a07      	ldr	r2, [pc, #28]	; (800778c <HAL_RCC_GetHCLKFreq+0x58>)
 8007770:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007772:	4a07      	ldr	r2, [pc, #28]	; (8007790 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007778:	4b04      	ldr	r3, [pc, #16]	; (800778c <HAL_RCC_GetHCLKFreq+0x58>)
 800777a:	681b      	ldr	r3, [r3, #0]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	58024400 	.word	0x58024400
 8007788:	0800d300 	.word	0x0800d300
 800778c:	24000420 	.word	0x24000420
 8007790:	2400041c 	.word	0x2400041c

08007794 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800779c:	2300      	movs	r3, #0
 800779e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077a0:	2300      	movs	r3, #0
 80077a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d03f      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077b8:	d02a      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80077ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077be:	d824      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80077c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077c4:	d018      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80077c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077ca:	d81e      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80077d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077d4:	d007      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80077d6:	e018      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077d8:	4bab      	ldr	r3, [pc, #684]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	4aaa      	ldr	r2, [pc, #680]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077e4:	e015      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3304      	adds	r3, #4
 80077ea:	2102      	movs	r1, #2
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 feff 	bl	80095f0 <RCCEx_PLL2_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077f6:	e00c      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3324      	adds	r3, #36	; 0x24
 80077fc:	2102      	movs	r1, #2
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 ffa8 	bl	8009754 <RCCEx_PLL3_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007808:	e003      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	75fb      	strb	r3, [r7, #23]
      break;
 800780e:	e000      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d109      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007818:	4b9b      	ldr	r3, [pc, #620]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800781a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007824:	4998      	ldr	r1, [pc, #608]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007826:	4313      	orrs	r3, r2
 8007828:	650b      	str	r3, [r1, #80]	; 0x50
 800782a:	e001      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007838:	2b00      	cmp	r3, #0
 800783a:	d03d      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007840:	2b04      	cmp	r3, #4
 8007842:	d826      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007844:	a201      	add	r2, pc, #4	; (adr r2, 800784c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	08007861 	.word	0x08007861
 8007850:	0800786f 	.word	0x0800786f
 8007854:	08007881 	.word	0x08007881
 8007858:	08007899 	.word	0x08007899
 800785c:	08007899 	.word	0x08007899
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007860:	4b89      	ldr	r3, [pc, #548]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	4a88      	ldr	r2, [pc, #544]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800786a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800786c:	e015      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3304      	adds	r3, #4
 8007872:	2100      	movs	r1, #0
 8007874:	4618      	mov	r0, r3
 8007876:	f001 febb 	bl	80095f0 <RCCEx_PLL2_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800787e:	e00c      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3324      	adds	r3, #36	; 0x24
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f001 ff64 	bl	8009754 <RCCEx_PLL3_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007890:	e003      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
      break;
 8007896:	e000      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d109      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078a0:	4b79      	ldr	r3, [pc, #484]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a4:	f023 0207 	bic.w	r2, r3, #7
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	4976      	ldr	r1, [pc, #472]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	650b      	str	r3, [r1, #80]	; 0x50
 80078b2:	e001      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d051      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078ca:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80078ce:	d036      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80078d0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80078d4:	d830      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80078d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078da:	d032      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80078dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078e0:	d82a      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80078e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078e6:	d02e      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80078e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078ec:	d824      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80078ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078f2:	d018      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80078f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078f8:	d81e      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80078fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007902:	d007      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007904:	e018      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007906:	4b60      	ldr	r3, [pc, #384]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	4a5f      	ldr	r2, [pc, #380]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800790c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007910:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007912:	e019      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3304      	adds	r3, #4
 8007918:	2100      	movs	r1, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f001 fe68 	bl	80095f0 <RCCEx_PLL2_Config>
 8007920:	4603      	mov	r3, r0
 8007922:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007924:	e010      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3324      	adds	r3, #36	; 0x24
 800792a:	2100      	movs	r1, #0
 800792c:	4618      	mov	r0, r3
 800792e:	f001 ff11 	bl	8009754 <RCCEx_PLL3_Config>
 8007932:	4603      	mov	r3, r0
 8007934:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007936:	e007      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	75fb      	strb	r3, [r7, #23]
      break;
 800793c:	e004      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800793e:	bf00      	nop
 8007940:	e002      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007942:	bf00      	nop
 8007944:	e000      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800794e:	4b4e      	ldr	r3, [pc, #312]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007952:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800795c:	494a      	ldr	r1, [pc, #296]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800795e:	4313      	orrs	r3, r2
 8007960:	658b      	str	r3, [r1, #88]	; 0x58
 8007962:	e001      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007970:	2b00      	cmp	r3, #0
 8007972:	d051      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800797a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800797e:	d036      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007980:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007984:	d830      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800798a:	d032      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800798c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007990:	d82a      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007992:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007996:	d02e      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007998:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800799c:	d824      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800799e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079a2:	d018      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80079a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079a8:	d81e      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80079ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079b2:	d007      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80079b4:	e018      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b6:	4b34      	ldr	r3, [pc, #208]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	4a33      	ldr	r2, [pc, #204]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079c2:	e019      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3304      	adds	r3, #4
 80079c8:	2100      	movs	r1, #0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f001 fe10 	bl	80095f0 <RCCEx_PLL2_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80079d4:	e010      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3324      	adds	r3, #36	; 0x24
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f001 feb9 	bl	8009754 <RCCEx_PLL3_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079e6:	e007      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	75fb      	strb	r3, [r7, #23]
      break;
 80079ec:	e004      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80079ee:	bf00      	nop
 80079f0:	e002      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80079f2:	bf00      	nop
 80079f4:	e000      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80079f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10a      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80079fe:	4b22      	ldr	r3, [pc, #136]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a02:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a0c:	491e      	ldr	r1, [pc, #120]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	658b      	str	r3, [r1, #88]	; 0x58
 8007a12:	e001      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d035      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a28:	2b30      	cmp	r3, #48	; 0x30
 8007a2a:	d01c      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007a2c:	2b30      	cmp	r3, #48	; 0x30
 8007a2e:	d817      	bhi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d00c      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	d813      	bhi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d016      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8007a3c:	2b10      	cmp	r3, #16
 8007a3e:	d10f      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a40:	4b11      	ldr	r3, [pc, #68]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	4a10      	ldr	r2, [pc, #64]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007a4c:	e00e      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3304      	adds	r3, #4
 8007a52:	2102      	movs	r1, #2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 fdcb 	bl	80095f0 <RCCEx_PLL2_Config>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007a5e:	e005      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	75fb      	strb	r3, [r7, #23]
      break;
 8007a64:	e002      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007a66:	bf00      	nop
 8007a68:	e000      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10c      	bne.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007a72:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7e:	4902      	ldr	r1, [pc, #8]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a84:	e004      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007a86:	bf00      	nop
 8007a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d047      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aa4:	d030      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aaa:	d82a      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007aac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ab0:	d02c      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007ab2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ab6:	d824      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007abc:	d018      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ac2:	d81e      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007acc:	d007      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007ace:	e018      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad0:	4bac      	ldr	r3, [pc, #688]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	4aab      	ldr	r2, [pc, #684]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007adc:	e017      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 fd83 	bl	80095f0 <RCCEx_PLL2_Config>
 8007aea:	4603      	mov	r3, r0
 8007aec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007aee:	e00e      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3324      	adds	r3, #36	; 0x24
 8007af4:	2100      	movs	r1, #0
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 fe2c 	bl	8009754 <RCCEx_PLL3_Config>
 8007afc:	4603      	mov	r3, r0
 8007afe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b00:	e005      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	75fb      	strb	r3, [r7, #23]
      break;
 8007b06:	e002      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e000      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d109      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007b14:	4b9b      	ldr	r3, [pc, #620]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b18:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b20:	4998      	ldr	r1, [pc, #608]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	650b      	str	r3, [r1, #80]	; 0x50
 8007b26:	e001      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d049      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b40:	d02e      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b46:	d828      	bhi.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007b48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b4c:	d02a      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b52:	d822      	bhi.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007b54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b58:	d026      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007b5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b5e:	d81c      	bhi.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b64:	d010      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007b66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b6a:	d816      	bhi.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01d      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b74:	d111      	bne.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 fd37 	bl	80095f0 <RCCEx_PLL2_Config>
 8007b82:	4603      	mov	r3, r0
 8007b84:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b86:	e012      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3324      	adds	r3, #36	; 0x24
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 fde0 	bl	8009754 <RCCEx_PLL3_Config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b98:	e009      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9e:	e006      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007ba0:	bf00      	nop
 8007ba2:	e004      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e002      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e000      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007bb4:	4b73      	ldr	r3, [pc, #460]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc0:	4970      	ldr	r1, [pc, #448]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8007bc6:	e001      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d04b      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007be2:	d02e      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007be8:	d828      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bee:	d02a      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf4:	d822      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007bf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bfa:	d026      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007bfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c00:	d81c      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c06:	d010      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c0c:	d816      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d01d      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c16:	d111      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 fce6 	bl	80095f0 <RCCEx_PLL2_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c28:	e012      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3324      	adds	r3, #36	; 0x24
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 fd8f 	bl	8009754 <RCCEx_PLL3_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c3a:	e009      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c40:	e006      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007c42:	bf00      	nop
 8007c44:	e004      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007c46:	bf00      	nop
 8007c48:	e002      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007c4a:	bf00      	nop
 8007c4c:	e000      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c56:	4b4b      	ldr	r3, [pc, #300]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c64:	4947      	ldr	r1, [pc, #284]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	658b      	str	r3, [r1, #88]	; 0x58
 8007c6a:	e001      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d02f      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c84:	d00e      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c8a:	d814      	bhi.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d015      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007c90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c94:	d10f      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c96:	4b3b      	ldr	r3, [pc, #236]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	4a3a      	ldr	r2, [pc, #232]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007ca2:	e00c      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	2101      	movs	r1, #1
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 fca0 	bl	80095f0 <RCCEx_PLL2_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007cb4:	e003      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cba:	e000      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d109      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cc4:	4b2f      	ldr	r3, [pc, #188]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cd0:	492c      	ldr	r1, [pc, #176]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	650b      	str	r3, [r1, #80]	; 0x50
 8007cd6:	e001      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d032      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d81b      	bhi.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d2f 	.word	0x08007d2f
 8007cfc:	08007d09 	.word	0x08007d09
 8007d00:	08007d17 	.word	0x08007d17
 8007d04:	08007d2f 	.word	0x08007d2f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d08:	4b1e      	ldr	r3, [pc, #120]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007d14:	e00c      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	2102      	movs	r1, #2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 fc67 	bl	80095f0 <RCCEx_PLL2_Config>
 8007d22:	4603      	mov	r3, r0
 8007d24:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007d26:	e003      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d2c:	e000      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d109      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007d36:	4b13      	ldr	r3, [pc, #76]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3a:	f023 0203 	bic.w	r2, r3, #3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d42:	4910      	ldr	r1, [pc, #64]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d48:	e001      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 808a 	beq.w	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a09      	ldr	r2, [pc, #36]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d68:	f7f9 fed6 	bl	8001b18 <HAL_GetTick>
 8007d6c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d6e:	e00d      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d70:	f7f9 fed2 	bl	8001b18 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b64      	cmp	r3, #100	; 0x64
 8007d7c:	d906      	bls.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	75fb      	strb	r3, [r7, #23]
        break;
 8007d82:	e009      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007d84:	58024400 	.word	0x58024400
 8007d88:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d8c:	4bb9      	ldr	r3, [pc, #740]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0eb      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d166      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d9e:	4bb6      	ldr	r3, [pc, #728]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007da8:	4053      	eors	r3, r2
 8007daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d013      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007db2:	4bb1      	ldr	r3, [pc, #708]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007dbc:	4bae      	ldr	r3, [pc, #696]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc0:	4aad      	ldr	r2, [pc, #692]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007dc8:	4bab      	ldr	r3, [pc, #684]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dcc:	4aaa      	ldr	r2, [pc, #680]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007dd4:	4aa8      	ldr	r2, [pc, #672]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de4:	d115      	bne.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de6:	f7f9 fe97 	bl	8001b18 <HAL_GetTick>
 8007dea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dec:	e00b      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dee:	f7f9 fe93 	bl	8001b18 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d902      	bls.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	75fb      	strb	r3, [r7, #23]
            break;
 8007e04:	e005      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e06:	4b9c      	ldr	r3, [pc, #624]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0ed      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d126      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e26:	d10d      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007e28:	4b93      	ldr	r3, [pc, #588]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e36:	0919      	lsrs	r1, r3, #4
 8007e38:	4b90      	ldr	r3, [pc, #576]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007e3a:	400b      	ands	r3, r1
 8007e3c:	498e      	ldr	r1, [pc, #568]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	610b      	str	r3, [r1, #16]
 8007e42:	e005      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007e44:	4b8c      	ldr	r3, [pc, #560]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	4a8b      	ldr	r2, [pc, #556]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e4e:	6113      	str	r3, [r2, #16]
 8007e50:	4b89      	ldr	r3, [pc, #548]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e5e:	4986      	ldr	r1, [pc, #536]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	670b      	str	r3, [r1, #112]	; 0x70
 8007e64:	e004      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	75bb      	strb	r3, [r7, #22]
 8007e6a:	e001      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d07e      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e80:	2b28      	cmp	r3, #40	; 0x28
 8007e82:	d867      	bhi.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007e84:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007f5b 	.word	0x08007f5b
 8007e90:	08007f55 	.word	0x08007f55
 8007e94:	08007f55 	.word	0x08007f55
 8007e98:	08007f55 	.word	0x08007f55
 8007e9c:	08007f55 	.word	0x08007f55
 8007ea0:	08007f55 	.word	0x08007f55
 8007ea4:	08007f55 	.word	0x08007f55
 8007ea8:	08007f55 	.word	0x08007f55
 8007eac:	08007f31 	.word	0x08007f31
 8007eb0:	08007f55 	.word	0x08007f55
 8007eb4:	08007f55 	.word	0x08007f55
 8007eb8:	08007f55 	.word	0x08007f55
 8007ebc:	08007f55 	.word	0x08007f55
 8007ec0:	08007f55 	.word	0x08007f55
 8007ec4:	08007f55 	.word	0x08007f55
 8007ec8:	08007f55 	.word	0x08007f55
 8007ecc:	08007f43 	.word	0x08007f43
 8007ed0:	08007f55 	.word	0x08007f55
 8007ed4:	08007f55 	.word	0x08007f55
 8007ed8:	08007f55 	.word	0x08007f55
 8007edc:	08007f55 	.word	0x08007f55
 8007ee0:	08007f55 	.word	0x08007f55
 8007ee4:	08007f55 	.word	0x08007f55
 8007ee8:	08007f55 	.word	0x08007f55
 8007eec:	08007f5b 	.word	0x08007f5b
 8007ef0:	08007f55 	.word	0x08007f55
 8007ef4:	08007f55 	.word	0x08007f55
 8007ef8:	08007f55 	.word	0x08007f55
 8007efc:	08007f55 	.word	0x08007f55
 8007f00:	08007f55 	.word	0x08007f55
 8007f04:	08007f55 	.word	0x08007f55
 8007f08:	08007f55 	.word	0x08007f55
 8007f0c:	08007f5b 	.word	0x08007f5b
 8007f10:	08007f55 	.word	0x08007f55
 8007f14:	08007f55 	.word	0x08007f55
 8007f18:	08007f55 	.word	0x08007f55
 8007f1c:	08007f55 	.word	0x08007f55
 8007f20:	08007f55 	.word	0x08007f55
 8007f24:	08007f55 	.word	0x08007f55
 8007f28:	08007f55 	.word	0x08007f55
 8007f2c:	08007f5b 	.word	0x08007f5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3304      	adds	r3, #4
 8007f34:	2101      	movs	r1, #1
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 fb5a 	bl	80095f0 <RCCEx_PLL2_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f40:	e00c      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3324      	adds	r3, #36	; 0x24
 8007f46:	2101      	movs	r1, #1
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f001 fc03 	bl	8009754 <RCCEx_PLL3_Config>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f52:	e003      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	75fb      	strb	r3, [r7, #23]
      break;
 8007f58:	e000      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d109      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f62:	4b45      	ldr	r3, [pc, #276]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6e:	4942      	ldr	r1, [pc, #264]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	654b      	str	r3, [r1, #84]	; 0x54
 8007f74:	e001      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d037      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	d820      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007f8e:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08007fd7 	.word	0x08007fd7
 8007f98:	08007fad 	.word	0x08007fad
 8007f9c:	08007fbf 	.word	0x08007fbf
 8007fa0:	08007fd7 	.word	0x08007fd7
 8007fa4:	08007fd7 	.word	0x08007fd7
 8007fa8:	08007fd7 	.word	0x08007fd7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f001 fb1c 	bl	80095f0 <RCCEx_PLL2_Config>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007fbc:	e00c      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3324      	adds	r3, #36	; 0x24
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 fbc5 	bl	8009754 <RCCEx_PLL3_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007fce:	e003      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd4:	e000      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007fde:	4b26      	ldr	r3, [pc, #152]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe2:	f023 0207 	bic.w	r2, r3, #7
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fea:	4923      	ldr	r1, [pc, #140]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	654b      	str	r3, [r1, #84]	; 0x54
 8007ff0:	e001      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d040      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008008:	2b05      	cmp	r3, #5
 800800a:	d821      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800800c:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800800e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008012:	bf00      	nop
 8008014:	08008057 	.word	0x08008057
 8008018:	0800802d 	.word	0x0800802d
 800801c:	0800803f 	.word	0x0800803f
 8008020:	08008057 	.word	0x08008057
 8008024:	08008057 	.word	0x08008057
 8008028:	08008057 	.word	0x08008057
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3304      	adds	r3, #4
 8008030:	2101      	movs	r1, #1
 8008032:	4618      	mov	r0, r3
 8008034:	f001 fadc 	bl	80095f0 <RCCEx_PLL2_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800803c:	e00c      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3324      	adds	r3, #36	; 0x24
 8008042:	2101      	movs	r1, #1
 8008044:	4618      	mov	r0, r3
 8008046:	f001 fb85 	bl	8009754 <RCCEx_PLL3_Config>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800804e:	e003      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]
      break;
 8008054:	e000      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8008056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d110      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800805e:	4b06      	ldr	r3, [pc, #24]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008062:	f023 0207 	bic.w	r2, r3, #7
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800806c:	4902      	ldr	r1, [pc, #8]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800806e:	4313      	orrs	r3, r2
 8008070:	658b      	str	r3, [r1, #88]	; 0x58
 8008072:	e007      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008074:	58024800 	.word	0x58024800
 8008078:	58024400 	.word	0x58024400
 800807c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	2b00      	cmp	r3, #0
 800808e:	d04b      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800809a:	d02e      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x966>
 800809c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080a0:	d828      	bhi.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80080a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a6:	d02a      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80080a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ac:	d822      	bhi.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80080ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080b2:	d026      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80080b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080b8:	d81c      	bhi.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80080ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080be:	d010      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80080c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080c4:	d816      	bhi.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d01d      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80080ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ce:	d111      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	2100      	movs	r1, #0
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 fa8a 	bl	80095f0 <RCCEx_PLL2_Config>
 80080dc:	4603      	mov	r3, r0
 80080de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080e0:	e012      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3324      	adds	r3, #36	; 0x24
 80080e6:	2102      	movs	r1, #2
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 fb33 	bl	8009754 <RCCEx_PLL3_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080f2:	e009      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	75fb      	strb	r3, [r7, #23]
      break;
 80080f8:	e006      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80080fa:	bf00      	nop
 80080fc:	e004      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80080fe:	bf00      	nop
 8008100:	e002      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008102:	bf00      	nop
 8008104:	e000      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10a      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800810e:	4bb2      	ldr	r3, [pc, #712]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008112:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811c:	49ae      	ldr	r1, [pc, #696]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800811e:	4313      	orrs	r3, r2
 8008120:	654b      	str	r3, [r1, #84]	; 0x54
 8008122:	e001      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d04b      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800813a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800813e:	d02e      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008140:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008144:	d828      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814a:	d02a      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800814c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008150:	d822      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008156:	d026      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800815c:	d81c      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800815e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008162:	d010      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008168:	d816      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d01d      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800816e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008172:	d111      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3304      	adds	r3, #4
 8008178:	2100      	movs	r1, #0
 800817a:	4618      	mov	r0, r3
 800817c:	f001 fa38 	bl	80095f0 <RCCEx_PLL2_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008184:	e012      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3324      	adds	r3, #36	; 0x24
 800818a:	2102      	movs	r1, #2
 800818c:	4618      	mov	r0, r3
 800818e:	f001 fae1 	bl	8009754 <RCCEx_PLL3_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008196:	e009      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	75fb      	strb	r3, [r7, #23]
      break;
 800819c:	e006      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800819e:	bf00      	nop
 80081a0:	e004      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80081a2:	bf00      	nop
 80081a4:	e002      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80081a6:	bf00      	nop
 80081a8:	e000      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80081aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081b2:	4b89      	ldr	r3, [pc, #548]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081c0:	4985      	ldr	r1, [pc, #532]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	658b      	str	r3, [r1, #88]	; 0x58
 80081c6:	e001      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d04b      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081e2:	d02e      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80081e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081e8:	d828      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80081ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ee:	d02a      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80081f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081f4:	d822      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80081f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081fa:	d026      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80081fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008200:	d81c      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008206:	d010      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800820c:	d816      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800820e:	2b00      	cmp	r3, #0
 8008210:	d01d      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8008212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008216:	d111      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	2100      	movs	r1, #0
 800821e:	4618      	mov	r0, r3
 8008220:	f001 f9e6 	bl	80095f0 <RCCEx_PLL2_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008228:	e012      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3324      	adds	r3, #36	; 0x24
 800822e:	2102      	movs	r1, #2
 8008230:	4618      	mov	r0, r3
 8008232:	f001 fa8f 	bl	8009754 <RCCEx_PLL3_Config>
 8008236:	4603      	mov	r3, r0
 8008238:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800823a:	e009      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	75fb      	strb	r3, [r7, #23]
      break;
 8008240:	e006      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008242:	bf00      	nop
 8008244:	e004      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008246:	bf00      	nop
 8008248:	e002      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800824a:	bf00      	nop
 800824c:	e000      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800824e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10a      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008256:	4b60      	ldr	r3, [pc, #384]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008264:	495c      	ldr	r1, [pc, #368]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008266:	4313      	orrs	r3, r2
 8008268:	658b      	str	r3, [r1, #88]	; 0x58
 800826a:	e001      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0308 	and.w	r3, r3, #8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d018      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008284:	d10a      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3324      	adds	r3, #36	; 0x24
 800828a:	2102      	movs	r1, #2
 800828c:	4618      	mov	r0, r3
 800828e:	f001 fa61 	bl	8009754 <RCCEx_PLL3_Config>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800829c:	4b4e      	ldr	r3, [pc, #312]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800829e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a8:	494b      	ldr	r1, [pc, #300]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0310 	and.w	r3, r3, #16
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01a      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082c4:	d10a      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3324      	adds	r3, #36	; 0x24
 80082ca:	2102      	movs	r1, #2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 fa41 	bl	8009754 <RCCEx_PLL3_Config>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082dc:	4b3e      	ldr	r3, [pc, #248]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80082de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ea:	493b      	ldr	r1, [pc, #236]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d034      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008306:	d01d      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800830c:	d817      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008316:	d009      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008318:	e011      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3304      	adds	r3, #4
 800831e:	2100      	movs	r1, #0
 8008320:	4618      	mov	r0, r3
 8008322:	f001 f965 	bl	80095f0 <RCCEx_PLL2_Config>
 8008326:	4603      	mov	r3, r0
 8008328:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800832a:	e00c      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3324      	adds	r3, #36	; 0x24
 8008330:	2102      	movs	r1, #2
 8008332:	4618      	mov	r0, r3
 8008334:	f001 fa0e 	bl	8009754 <RCCEx_PLL3_Config>
 8008338:	4603      	mov	r3, r0
 800833a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800833c:	e003      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	75fb      	strb	r3, [r7, #23]
      break;
 8008342:	e000      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800834c:	4b22      	ldr	r3, [pc, #136]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800834e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800835a:	491f      	ldr	r1, [pc, #124]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800835c:	4313      	orrs	r3, r2
 800835e:	658b      	str	r3, [r1, #88]	; 0x58
 8008360:	e001      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d036      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008378:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800837c:	d01c      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800837e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008382:	d816      	bhi.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008388:	d003      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800838a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800838e:	d007      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008390:	e00f      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008392:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008396:	4a10      	ldr	r2, [pc, #64]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800839c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800839e:	e00c      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3324      	adds	r3, #36	; 0x24
 80083a4:	2101      	movs	r1, #1
 80083a6:	4618      	mov	r0, r3
 80083a8:	f001 f9d4 	bl	8009754 <RCCEx_PLL3_Config>
 80083ac:	4603      	mov	r3, r0
 80083ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80083b0:	e003      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	75fb      	strb	r3, [r7, #23]
      break;
 80083b6:	e000      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80083b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10d      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083c0:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80083c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083ce:	4902      	ldr	r1, [pc, #8]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	654b      	str	r3, [r1, #84]	; 0x54
 80083d4:	e004      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80083d6:	bf00      	nop
 80083d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d029      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80083f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f8:	d007      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80083fa:	e00f      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083fc:	4b61      	ldr	r3, [pc, #388]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	4a60      	ldr	r2, [pc, #384]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008408:	e00b      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3304      	adds	r3, #4
 800840e:	2102      	movs	r1, #2
 8008410:	4618      	mov	r0, r3
 8008412:	f001 f8ed 	bl	80095f0 <RCCEx_PLL2_Config>
 8008416:	4603      	mov	r3, r0
 8008418:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800841a:	e002      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	75fb      	strb	r3, [r7, #23]
      break;
 8008420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008422:	7dfb      	ldrb	r3, [r7, #23]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d109      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008428:	4b56      	ldr	r3, [pc, #344]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800842a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800842c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008434:	4953      	ldr	r1, [pc, #332]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008436:	4313      	orrs	r3, r2
 8008438:	64cb      	str	r3, [r1, #76]	; 0x4c
 800843a:	e001      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3324      	adds	r3, #36	; 0x24
 8008450:	2102      	movs	r1, #2
 8008452:	4618      	mov	r0, r3
 8008454:	f001 f97e 	bl	8009754 <RCCEx_PLL3_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d030      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008476:	d017      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800847c:	d811      	bhi.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800847e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008482:	d013      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008488:	d80b      	bhi.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d010      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800848e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008492:	d106      	bne.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008494:	4b3b      	ldr	r3, [pc, #236]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	4a3a      	ldr	r2, [pc, #232]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800849a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800849e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80084a0:	e007      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	75fb      	strb	r3, [r7, #23]
      break;
 80084a6:	e004      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80084a8:	bf00      	nop
 80084aa:	e002      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80084ac:	bf00      	nop
 80084ae:	e000      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80084b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d109      	bne.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084b8:	4b32      	ldr	r3, [pc, #200]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084c4:	492f      	ldr	r1, [pc, #188]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	654b      	str	r3, [r1, #84]	; 0x54
 80084ca:	e001      	b.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d008      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084dc:	4b29      	ldr	r3, [pc, #164]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e8:	4926      	ldr	r1, [pc, #152]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084fa:	4b22      	ldr	r3, [pc, #136]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008506:	491f      	ldr	r1, [pc, #124]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008508:	4313      	orrs	r3, r2
 800850a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00d      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008518:	4b1a      	ldr	r3, [pc, #104]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	4a19      	ldr	r2, [pc, #100]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800851e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008522:	6113      	str	r3, [r2, #16]
 8008524:	4b17      	ldr	r3, [pc, #92]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008526:	691a      	ldr	r2, [r3, #16]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800852e:	4915      	ldr	r1, [pc, #84]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008530:	4313      	orrs	r3, r2
 8008532:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	da08      	bge.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800853c:	4b11      	ldr	r3, [pc, #68]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800853e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008540:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008548:	490e      	ldr	r1, [pc, #56]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800854a:	4313      	orrs	r3, r2
 800854c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800855a:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800855c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008568:	4906      	ldr	r1, [pc, #24]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800856a:	4313      	orrs	r3, r2
 800856c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800856e:	7dbb      	ldrb	r3, [r7, #22]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	e000      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	58024400 	.word	0x58024400

08008588 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b090      	sub	sp, #64	; 0x40
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008596:	f040 8089 	bne.w	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800859a:	4b95      	ldr	r3, [pc, #596]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800859c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	633b      	str	r3, [r7, #48]	; 0x30
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d87d      	bhi.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80085aa:	a201      	add	r2, pc, #4	; (adr r2, 80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80085ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b0:	080085c5 	.word	0x080085c5
 80085b4:	080085e9 	.word	0x080085e9
 80085b8:	0800860d 	.word	0x0800860d
 80085bc:	080086a1 	.word	0x080086a1
 80085c0:	08008631 	.word	0x08008631

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085c4:	4b8a      	ldr	r3, [pc, #552]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085d0:	d107      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 feb8 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085e0:	e3ed      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085e6:	e3ea      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085e8:	4b81      	ldr	r3, [pc, #516]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085f4:	d107      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085f6:	f107 0318 	add.w	r3, r7, #24
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fbfe 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008604:	e3db      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800860a:	e3d8      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800860c:	4b78      	ldr	r3, [pc, #480]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008618:	d107      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800861a:	f107 030c 	add.w	r3, r7, #12
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fd40 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008628:	e3c9      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800862e:	e3c6      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008630:	4b6f      	ldr	r3, [pc, #444]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008638:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800863a:	4b6d      	ldr	r3, [pc, #436]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	2b04      	cmp	r3, #4
 8008644:	d10c      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800864c:	4b68      	ldr	r3, [pc, #416]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	08db      	lsrs	r3, r3, #3
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	4a67      	ldr	r2, [pc, #412]	; (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008658:	fa22 f303 	lsr.w	r3, r2, r3
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800865e:	e01e      	b.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008660:	4b63      	ldr	r3, [pc, #396]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800866c:	d106      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800866e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008674:	d102      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008676:	4b60      	ldr	r3, [pc, #384]	; (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800867a:	e010      	b.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800867c:	4b5c      	ldr	r3, [pc, #368]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008688:	d106      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800868a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800868c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008690:	d102      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008692:	4b5a      	ldr	r3, [pc, #360]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008696:	e002      	b.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800869c:	e38f      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800869e:	e38e      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80086a0:	4b57      	ldr	r3, [pc, #348]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086a4:	e38b      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086aa:	e388      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b2:	f040 80a7 	bne.w	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80086b6:	4b4e      	ldr	r3, [pc, #312]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80086be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086c6:	d054      	beq.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086ce:	f200 808b 	bhi.w	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086d8:	f000 8083 	beq.w	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086e2:	f200 8081 	bhi.w	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086ec:	d02f      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086f4:	d878      	bhi.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d004      	beq.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008702:	d012      	beq.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008704:	e070      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008706:	4b3a      	ldr	r3, [pc, #232]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800870e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008712:	d107      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fe17 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008722:	e34c      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008728:	e349      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800872a:	4b31      	ldr	r3, [pc, #196]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008736:	d107      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008738:	f107 0318 	add.w	r3, r7, #24
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fb5d 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008746:	e33a      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800874c:	e337      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800874e:	4b28      	ldr	r3, [pc, #160]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800875a:	d107      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800875c:	f107 030c 	add.w	r3, r7, #12
 8008760:	4618      	mov	r0, r3
 8008762:	f000 fc9f 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800876a:	e328      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008770:	e325      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008772:	4b1f      	ldr	r3, [pc, #124]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008776:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800877a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800877c:	4b1c      	ldr	r3, [pc, #112]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b04      	cmp	r3, #4
 8008786:	d10c      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878a:	2b00      	cmp	r3, #0
 800878c:	d109      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800878e:	4b18      	ldr	r3, [pc, #96]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	08db      	lsrs	r3, r3, #3
 8008794:	f003 0303 	and.w	r3, r3, #3
 8008798:	4a16      	ldr	r2, [pc, #88]	; (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800879a:	fa22 f303 	lsr.w	r3, r2, r3
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087a0:	e01e      	b.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087a2:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ae:	d106      	bne.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80087b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087b6:	d102      	bne.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80087b8:	4b0f      	ldr	r3, [pc, #60]	; (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087bc:	e010      	b.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087be:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ca:	d106      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80087cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087d2:	d102      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80087d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d8:	e002      	b.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80087de:	e2ee      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80087e0:	e2ed      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80087e2:	4b07      	ldr	r3, [pc, #28]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087e6:	e2ea      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087ec:	e2e7      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80087ee:	bf00      	nop
 80087f0:	58024400 	.word	0x58024400
 80087f4:	03d09000 	.word	0x03d09000
 80087f8:	003d0900 	.word	0x003d0900
 80087fc:	017d7840 	.word	0x017d7840
 8008800:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800880a:	f040 809c 	bne.w	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800880e:	4b9e      	ldr	r3, [pc, #632]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008812:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008816:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800881e:	d054      	beq.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008826:	f200 808b 	bhi.w	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008830:	f000 8083 	beq.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800883a:	f200 8081 	bhi.w	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008844:	d02f      	beq.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800884c:	d878      	bhi.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800885a:	d012      	beq.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800885c:	e070      	b.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800885e:	4b8a      	ldr	r3, [pc, #552]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800886a:	d107      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800886c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fd6b 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800887a:	e2a0      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008880:	e29d      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008882:	4b81      	ldr	r3, [pc, #516]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800888a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800888e:	d107      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008890:	f107 0318 	add.w	r3, r7, #24
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fab1 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800889e:	e28e      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088a4:	e28b      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088a6:	4b78      	ldr	r3, [pc, #480]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b2:	d107      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088b4:	f107 030c 	add.w	r3, r7, #12
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 fbf3 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088c2:	e27c      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088c8:	e279      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088ca:	4b6f      	ldr	r3, [pc, #444]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088d2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088d4:	4b6c      	ldr	r3, [pc, #432]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d10c      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80088e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d109      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088e6:	4b68      	ldr	r3, [pc, #416]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	08db      	lsrs	r3, r3, #3
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	4a66      	ldr	r2, [pc, #408]	; (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80088f2:	fa22 f303 	lsr.w	r3, r2, r3
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088f8:	e01e      	b.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088fa:	4b63      	ldr	r3, [pc, #396]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008906:	d106      	bne.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8008908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800890e:	d102      	bne.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008910:	4b5f      	ldr	r3, [pc, #380]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008914:	e010      	b.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008916:	4b5c      	ldr	r3, [pc, #368]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800891e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008922:	d106      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800892a:	d102      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800892c:	4b59      	ldr	r3, [pc, #356]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008930:	e002      	b.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008936:	e242      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008938:	e241      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800893a:	4b57      	ldr	r3, [pc, #348]	; (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800893e:	e23e      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008944:	e23b      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800894c:	f040 80a6 	bne.w	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008950:	4b4d      	ldr	r3, [pc, #308]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008954:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008958:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008960:	d054      	beq.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008968:	f200 808b 	bhi.w	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800896c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008972:	f000 8083 	beq.w	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800897c:	f200 8081 	bhi.w	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008986:	d02f      	beq.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800898e:	d878      	bhi.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800899c:	d012      	beq.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800899e:	e070      	b.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089a0:	4b39      	ldr	r3, [pc, #228]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089ac:	d107      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fcca 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089bc:	e1ff      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089c2:	e1fc      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089c4:	4b30      	ldr	r3, [pc, #192]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089d0:	d107      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d2:	f107 0318 	add.w	r3, r7, #24
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fa10 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089e0:	e1ed      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089e6:	e1ea      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089e8:	4b27      	ldr	r3, [pc, #156]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f4:	d107      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089f6:	f107 030c 	add.w	r3, r7, #12
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fb52 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a04:	e1db      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a0a:	e1d8      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a0c:	4b1e      	ldr	r3, [pc, #120]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a14:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a16:	4b1c      	ldr	r3, [pc, #112]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0304 	and.w	r3, r3, #4
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d10c      	bne.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8008a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d109      	bne.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a28:	4b17      	ldr	r3, [pc, #92]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	08db      	lsrs	r3, r3, #3
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008a34:	fa22 f303 	lsr.w	r3, r2, r3
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a3a:	e01e      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a3c:	4b12      	ldr	r3, [pc, #72]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a48:	d106      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a50:	d102      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a52:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a56:	e010      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a58:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a64:	d106      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a6c:	d102      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a72:	e002      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a78:	e1a1      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a7a:	e1a0      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a80:	e19d      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a86:	e19a      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a88:	58024400 	.word	0x58024400
 8008a8c:	03d09000 	.word	0x03d09000
 8008a90:	003d0900 	.word	0x003d0900
 8008a94:	017d7840 	.word	0x017d7840
 8008a98:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008aa2:	d173      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008aa4:	4b9a      	ldr	r3, [pc, #616]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008aac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ab4:	d02f      	beq.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008abc:	d863      	bhi.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d004      	beq.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aca:	d012      	beq.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008acc:	e05b      	b.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ace:	4b90      	ldr	r3, [pc, #576]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ada:	d107      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008adc:	f107 0318 	add.w	r3, r7, #24
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 f98b 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008aea:	e168      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af0:	e165      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008af2:	4b87      	ldr	r3, [pc, #540]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008afe:	d107      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b00:	f107 030c 	add.w	r3, r7, #12
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 facd 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b0e:	e156      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b14:	e153      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b16:	4b7e      	ldr	r3, [pc, #504]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b1e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b20:	4b7b      	ldr	r3, [pc, #492]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0304 	and.w	r3, r3, #4
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d10c      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d109      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b32:	4b77      	ldr	r3, [pc, #476]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	08db      	lsrs	r3, r3, #3
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	4a75      	ldr	r2, [pc, #468]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b44:	e01e      	b.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b46:	4b72      	ldr	r3, [pc, #456]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b52:	d106      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b5a:	d102      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008b5c:	4b6e      	ldr	r3, [pc, #440]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b60:	e010      	b.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b62:	4b6b      	ldr	r3, [pc, #428]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b6e:	d106      	bne.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b76:	d102      	bne.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008b78:	4b68      	ldr	r3, [pc, #416]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b7c:	e002      	b.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b82:	e11c      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008b84:	e11b      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b8a:	e118      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b92:	d133      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008b94:	4b5e      	ldr	r3, [pc, #376]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b9c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008baa:	d012      	beq.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008bac:	e023      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bae:	4b58      	ldr	r3, [pc, #352]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bba:	d107      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fbc3 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bca:	e0f8      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd0:	e0f5      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bd2:	4b4f      	ldr	r3, [pc, #316]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bde:	d107      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008be0:	f107 0318 	add.w	r3, r7, #24
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 f909 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bee:	e0e6      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bf4:	e0e3      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bfa:	e0e0      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c02:	f040 808d 	bne.w	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008c06:	4b42      	ldr	r3, [pc, #264]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c0a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008c0e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c16:	d06b      	beq.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c1e:	d874      	bhi.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c26:	d056      	beq.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c2e:	d86c      	bhi.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c36:	d03b      	beq.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c3e:	d864      	bhi.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c46:	d021      	beq.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c4e:	d85c      	bhi.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d004      	beq.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c5c:	d004      	beq.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008c5e:	e054      	b.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008c60:	f000 f8b6 	bl	8008dd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c64:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008c66:	e0aa      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c68:	4b29      	ldr	r3, [pc, #164]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c74:	d107      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c76:	f107 0318 	add.w	r3, r7, #24
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 f8be 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c84:	e09b      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c8a:	e098      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c8c:	4b20      	ldr	r3, [pc, #128]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c98:	d107      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9a:	f107 030c 	add.w	r3, r7, #12
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fa00 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ca8:	e089      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cae:	e086      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cb0:	4b17      	ldr	r3, [pc, #92]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0304 	and.w	r3, r3, #4
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	d109      	bne.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cbc:	4b14      	ldr	r3, [pc, #80]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	08db      	lsrs	r3, r3, #3
 8008cc2:	f003 0303 	and.w	r3, r3, #3
 8008cc6:	4a13      	ldr	r2, [pc, #76]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008cce:	e076      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cd4:	e073      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008cd6:	4b0e      	ldr	r3, [pc, #56]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ce2:	d102      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ce8:	e069      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cee:	e066      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cf0:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cfc:	d102      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008cfe:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008d00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d02:	e05c      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d08:	e059      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d0e:	e056      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008d10:	58024400 	.word	0x58024400
 8008d14:	03d09000 	.word	0x03d09000
 8008d18:	003d0900 	.word	0x003d0900
 8008d1c:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d26:	d148      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008d28:	4b27      	ldr	r3, [pc, #156]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d38:	d02a      	beq.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d40:	d838      	bhi.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d004      	beq.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d4e:	d00d      	beq.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008d50:	e030      	b.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d52:	4b1d      	ldr	r3, [pc, #116]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d5e:	d102      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008d60:	4b1a      	ldr	r3, [pc, #104]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008d62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d64:	e02b      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d6a:	e028      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d6c:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d78:	d107      	bne.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fae4 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d88:	e019      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d8e:	e016      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d90:	4b0d      	ldr	r3, [pc, #52]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d9c:	d107      	bne.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d9e:	f107 0318 	add.w	r3, r7, #24
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 f82a 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008dac:	e007      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008db2:	e004      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008db8:	e001      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3740      	adds	r7, #64	; 0x40
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	017d7840 	.word	0x017d7840

08008dd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008dd4:	f7fe fcae 	bl	8007734 <HAL_RCC_GetHCLKFreq>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	091b      	lsrs	r3, r3, #4
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	4904      	ldr	r1, [pc, #16]	; (8008df8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008de6:	5ccb      	ldrb	r3, [r1, r3]
 8008de8:	f003 031f 	and.w	r3, r3, #31
 8008dec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	58024400 	.word	0x58024400
 8008df8:	0800d300 	.word	0x0800d300

08008dfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b089      	sub	sp, #36	; 0x24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e04:	4ba1      	ldr	r3, [pc, #644]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e08:	f003 0303 	and.w	r3, r3, #3
 8008e0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008e0e:	4b9f      	ldr	r3, [pc, #636]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e12:	0b1b      	lsrs	r3, r3, #12
 8008e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008e1a:	4b9c      	ldr	r3, [pc, #624]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	091b      	lsrs	r3, r3, #4
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008e26:	4b99      	ldr	r3, [pc, #612]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2a:	08db      	lsrs	r3, r3, #3
 8008e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	fb02 f303 	mul.w	r3, r2, r3
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8111 	beq.w	800906c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	f000 8083 	beq.w	8008f58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	f200 80a1 	bhi.w	8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d056      	beq.n	8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e66:	e099      	b.n	8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e68:	4b88      	ldr	r3, [pc, #544]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d02d      	beq.n	8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e74:	4b85      	ldr	r3, [pc, #532]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	08db      	lsrs	r3, r3, #3
 8008e7a:	f003 0303 	and.w	r3, r3, #3
 8008e7e:	4a84      	ldr	r2, [pc, #528]	; (8009090 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e80:	fa22 f303 	lsr.w	r3, r2, r3
 8008e84:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e9e:	4b7b      	ldr	r3, [pc, #492]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea6:	ee07 3a90 	vmov	s15, r3
 8008eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008ece:	e087      	b.n	8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009098 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee2:	4b6a      	ldr	r3, [pc, #424]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ef6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f12:	e065      	b.n	8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800909c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f26:	4b59      	ldr	r3, [pc, #356]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f56:	e043      	b.n	8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6a:	4b48      	ldr	r3, [pc, #288]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f9a:	e021      	b.n	8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800909c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fae:	4b37      	ldr	r3, [pc, #220]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008fe0:	4b2a      	ldr	r3, [pc, #168]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	0a5b      	lsrs	r3, r3, #9
 8008fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009006:	ee17 2a90 	vmov	r2, s15
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800900e:	4b1f      	ldr	r3, [pc, #124]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	0c1b      	lsrs	r3, r3, #16
 8009014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009018:	ee07 3a90 	vmov	s15, r3
 800901c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009020:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009024:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009028:	edd7 6a07 	vldr	s13, [r7, #28]
 800902c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009034:	ee17 2a90 	vmov	r2, s15
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800903c:	4b13      	ldr	r3, [pc, #76]	; (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	0e1b      	lsrs	r3, r3, #24
 8009042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009056:	edd7 6a07 	vldr	s13, [r7, #28]
 800905a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800905e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009062:	ee17 2a90 	vmov	r2, s15
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800906a:	e008      	b.n	800907e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	609a      	str	r2, [r3, #8]
}
 800907e:	bf00      	nop
 8009080:	3724      	adds	r7, #36	; 0x24
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	58024400 	.word	0x58024400
 8009090:	03d09000 	.word	0x03d09000
 8009094:	46000000 	.word	0x46000000
 8009098:	4c742400 	.word	0x4c742400
 800909c:	4a742400 	.word	0x4a742400
 80090a0:	4bbebc20 	.word	0x4bbebc20

080090a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b089      	sub	sp, #36	; 0x24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090ac:	4ba1      	ldr	r3, [pc, #644]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b0:	f003 0303 	and.w	r3, r3, #3
 80090b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80090b6:	4b9f      	ldr	r3, [pc, #636]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ba:	0d1b      	lsrs	r3, r3, #20
 80090bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80090c2:	4b9c      	ldr	r3, [pc, #624]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	0a1b      	lsrs	r3, r3, #8
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80090ce:	4b99      	ldr	r3, [pc, #612]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d2:	08db      	lsrs	r3, r3, #3
 80090d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	fb02 f303 	mul.w	r3, r2, r3
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 8111 	beq.w	8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	f000 8083 	beq.w	8009200 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	f200 80a1 	bhi.w	8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d056      	beq.n	80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800910e:	e099      	b.n	8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009110:	4b88      	ldr	r3, [pc, #544]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0320 	and.w	r3, r3, #32
 8009118:	2b00      	cmp	r3, #0
 800911a:	d02d      	beq.n	8009178 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800911c:	4b85      	ldr	r3, [pc, #532]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	08db      	lsrs	r3, r3, #3
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	4a84      	ldr	r2, [pc, #528]	; (8009338 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009128:	fa22 f303 	lsr.w	r3, r2, r3
 800912c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	ee07 3a90 	vmov	s15, r3
 8009134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009146:	4b7b      	ldr	r3, [pc, #492]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009156:	ed97 6a03 	vldr	s12, [r7, #12]
 800915a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800933c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800915e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009172:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009176:	e087      	b.n	8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009182:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009340 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918a:	4b6a      	ldr	r3, [pc, #424]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919a:	ed97 6a03 	vldr	s12, [r7, #12]
 800919e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800933c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091ba:	e065      	b.n	8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80091ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ce:	4b59      	ldr	r3, [pc, #356]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091de:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800933c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091fe:	e043      	b.n	8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800920e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009212:	4b48      	ldr	r3, [pc, #288]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009222:	ed97 6a03 	vldr	s12, [r7, #12]
 8009226:	eddf 5a45 	vldr	s11, [pc, #276]	; 800933c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800922a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800922e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800923e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009242:	e021      	b.n	8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	ee07 3a90 	vmov	s15, r3
 800924a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009256:	4b37      	ldr	r3, [pc, #220]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009266:	ed97 6a03 	vldr	s12, [r7, #12]
 800926a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800933c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800926e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800927a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800927e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009282:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009286:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009288:	4b2a      	ldr	r3, [pc, #168]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800928a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928c:	0a5b      	lsrs	r3, r3, #9
 800928e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009292:	ee07 3a90 	vmov	s15, r3
 8009296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800929e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ae:	ee17 2a90 	vmov	r2, s15
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80092b6:	4b1f      	ldr	r3, [pc, #124]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	0c1b      	lsrs	r3, r3, #16
 80092bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092dc:	ee17 2a90 	vmov	r2, s15
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80092e4:	4b13      	ldr	r3, [pc, #76]	; (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e8:	0e1b      	lsrs	r3, r3, #24
 80092ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800930a:	ee17 2a90 	vmov	r2, s15
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009312:	e008      	b.n	8009326 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	609a      	str	r2, [r3, #8]
}
 8009326:	bf00      	nop
 8009328:	3724      	adds	r7, #36	; 0x24
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	58024400 	.word	0x58024400
 8009338:	03d09000 	.word	0x03d09000
 800933c:	46000000 	.word	0x46000000
 8009340:	4c742400 	.word	0x4c742400
 8009344:	4a742400 	.word	0x4a742400
 8009348:	4bbebc20 	.word	0x4bbebc20

0800934c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800934c:	b480      	push	{r7}
 800934e:	b089      	sub	sp, #36	; 0x24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009354:	4ba0      	ldr	r3, [pc, #640]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009358:	f003 0303 	and.w	r3, r3, #3
 800935c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800935e:	4b9e      	ldr	r3, [pc, #632]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009362:	091b      	lsrs	r3, r3, #4
 8009364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009368:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800936a:	4b9b      	ldr	r3, [pc, #620]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009374:	4b98      	ldr	r3, [pc, #608]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009378:	08db      	lsrs	r3, r3, #3
 800937a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	fb02 f303 	mul.w	r3, r2, r3
 8009384:	ee07 3a90 	vmov	s15, r3
 8009388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8111 	beq.w	80095ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	2b02      	cmp	r3, #2
 800939c:	f000 8083 	beq.w	80094a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	f200 80a1 	bhi.w	80094ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d056      	beq.n	8009462 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80093b4:	e099      	b.n	80094ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093b6:	4b88      	ldr	r3, [pc, #544]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 0320 	and.w	r3, r3, #32
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d02d      	beq.n	800941e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093c2:	4b85      	ldr	r3, [pc, #532]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	08db      	lsrs	r3, r3, #3
 80093c8:	f003 0303 	and.w	r3, r3, #3
 80093cc:	4a83      	ldr	r2, [pc, #524]	; (80095dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80093ce:	fa22 f303 	lsr.w	r3, r2, r3
 80093d2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	ee07 3a90 	vmov	s15, r3
 80093e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ec:	4b7a      	ldr	r3, [pc, #488]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f4:	ee07 3a90 	vmov	s15, r3
 80093f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009400:	eddf 5a77 	vldr	s11, [pc, #476]	; 80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009418:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800941c:	e087      	b.n	800952e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009428:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800942c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009430:	4b69      	ldr	r3, [pc, #420]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009438:	ee07 3a90 	vmov	s15, r3
 800943c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009440:	ed97 6a03 	vldr	s12, [r7, #12]
 8009444:	eddf 5a66 	vldr	s11, [pc, #408]	; 80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009460:	e065      	b.n	800952e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	ee07 3a90 	vmov	s15, r3
 8009468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80095e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009474:	4b58      	ldr	r3, [pc, #352]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947c:	ee07 3a90 	vmov	s15, r3
 8009480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009484:	ed97 6a03 	vldr	s12, [r7, #12]
 8009488:	eddf 5a55 	vldr	s11, [pc, #340]	; 80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800948c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094a4:	e043      	b.n	800952e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	ee07 3a90 	vmov	s15, r3
 80094ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80095ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80094b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094b8:	4b47      	ldr	r3, [pc, #284]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c0:	ee07 3a90 	vmov	s15, r3
 80094c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80094cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094e8:	e021      	b.n	800952e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	ee07 3a90 	vmov	s15, r3
 80094f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80094f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094fc:	4b36      	ldr	r3, [pc, #216]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009504:	ee07 3a90 	vmov	s15, r3
 8009508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800950c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009510:	eddf 5a33 	vldr	s11, [pc, #204]	; 80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800951c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009528:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800952c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800952e:	4b2a      	ldr	r3, [pc, #168]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	0a5b      	lsrs	r3, r3, #9
 8009534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009548:	edd7 6a07 	vldr	s13, [r7, #28]
 800954c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009554:	ee17 2a90 	vmov	r2, s15
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800955c:	4b1e      	ldr	r3, [pc, #120]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800955e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009560:	0c1b      	lsrs	r3, r3, #16
 8009562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009576:	edd7 6a07 	vldr	s13, [r7, #28]
 800957a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800957e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009582:	ee17 2a90 	vmov	r2, s15
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800958a:	4b13      	ldr	r3, [pc, #76]	; (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800958c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958e:	0e1b      	lsrs	r3, r3, #24
 8009590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009594:	ee07 3a90 	vmov	s15, r3
 8009598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b0:	ee17 2a90 	vmov	r2, s15
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80095b8:	e008      	b.n	80095cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	609a      	str	r2, [r3, #8]
}
 80095cc:	bf00      	nop
 80095ce:	3724      	adds	r7, #36	; 0x24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	58024400 	.word	0x58024400
 80095dc:	03d09000 	.word	0x03d09000
 80095e0:	46000000 	.word	0x46000000
 80095e4:	4c742400 	.word	0x4c742400
 80095e8:	4a742400 	.word	0x4a742400
 80095ec:	4bbebc20 	.word	0x4bbebc20

080095f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095fe:	4b53      	ldr	r3, [pc, #332]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	2b03      	cmp	r3, #3
 8009608:	d101      	bne.n	800960e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e099      	b.n	8009742 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800960e:	4b4f      	ldr	r3, [pc, #316]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a4e      	ldr	r2, [pc, #312]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800961a:	f7f8 fa7d 	bl	8001b18 <HAL_GetTick>
 800961e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009620:	e008      	b.n	8009634 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009622:	f7f8 fa79 	bl	8001b18 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d901      	bls.n	8009634 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e086      	b.n	8009742 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009634:	4b45      	ldr	r3, [pc, #276]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1f0      	bne.n	8009622 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009640:	4b42      	ldr	r3, [pc, #264]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009644:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	031b      	lsls	r3, r3, #12
 800964e:	493f      	ldr	r1, [pc, #252]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009650:	4313      	orrs	r3, r2
 8009652:	628b      	str	r3, [r1, #40]	; 0x28
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	3b01      	subs	r3, #1
 800965a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	3b01      	subs	r3, #1
 8009664:	025b      	lsls	r3, r3, #9
 8009666:	b29b      	uxth	r3, r3
 8009668:	431a      	orrs	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	3b01      	subs	r3, #1
 8009670:	041b      	lsls	r3, r3, #16
 8009672:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009676:	431a      	orrs	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	3b01      	subs	r3, #1
 800967e:	061b      	lsls	r3, r3, #24
 8009680:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009684:	4931      	ldr	r1, [pc, #196]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009686:	4313      	orrs	r3, r2
 8009688:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800968a:	4b30      	ldr	r3, [pc, #192]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	492d      	ldr	r1, [pc, #180]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009698:	4313      	orrs	r3, r2
 800969a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800969c:	4b2b      	ldr	r3, [pc, #172]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	f023 0220 	bic.w	r2, r3, #32
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	4928      	ldr	r1, [pc, #160]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80096ae:	4b27      	ldr	r3, [pc, #156]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b2:	4a26      	ldr	r2, [pc, #152]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096b4:	f023 0310 	bic.w	r3, r3, #16
 80096b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80096ba:	4b24      	ldr	r3, [pc, #144]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096be:	4b24      	ldr	r3, [pc, #144]	; (8009750 <RCCEx_PLL2_Config+0x160>)
 80096c0:	4013      	ands	r3, r2
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	69d2      	ldr	r2, [r2, #28]
 80096c6:	00d2      	lsls	r2, r2, #3
 80096c8:	4920      	ldr	r1, [pc, #128]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80096ce:	4b1f      	ldr	r3, [pc, #124]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d2:	4a1e      	ldr	r2, [pc, #120]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096d4:	f043 0310 	orr.w	r3, r3, #16
 80096d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d106      	bne.n	80096ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096e0:	4b1a      	ldr	r3, [pc, #104]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	4a19      	ldr	r2, [pc, #100]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096ec:	e00f      	b.n	800970e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d106      	bne.n	8009702 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096f4:	4b15      	ldr	r3, [pc, #84]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f8:	4a14      	ldr	r2, [pc, #80]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 80096fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009700:	e005      	b.n	800970e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009702:	4b12      	ldr	r3, [pc, #72]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009706:	4a11      	ldr	r2, [pc, #68]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009708:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800970c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800970e:	4b0f      	ldr	r3, [pc, #60]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a0e      	ldr	r2, [pc, #56]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800971a:	f7f8 f9fd 	bl	8001b18 <HAL_GetTick>
 800971e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009720:	e008      	b.n	8009734 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009722:	f7f8 f9f9 	bl	8001b18 <HAL_GetTick>
 8009726:	4602      	mov	r2, r0
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	2b02      	cmp	r3, #2
 800972e:	d901      	bls.n	8009734 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e006      	b.n	8009742 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009734:	4b05      	ldr	r3, [pc, #20]	; (800974c <RCCEx_PLL2_Config+0x15c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0f0      	beq.n	8009722 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	58024400 	.word	0x58024400
 8009750:	ffff0007 	.word	0xffff0007

08009754 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009762:	4b53      	ldr	r3, [pc, #332]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009766:	f003 0303 	and.w	r3, r3, #3
 800976a:	2b03      	cmp	r3, #3
 800976c:	d101      	bne.n	8009772 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e099      	b.n	80098a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009772:	4b4f      	ldr	r3, [pc, #316]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a4e      	ldr	r2, [pc, #312]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800977c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800977e:	f7f8 f9cb 	bl	8001b18 <HAL_GetTick>
 8009782:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009784:	e008      	b.n	8009798 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009786:	f7f8 f9c7 	bl	8001b18 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	2b02      	cmp	r3, #2
 8009792:	d901      	bls.n	8009798 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e086      	b.n	80098a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009798:	4b45      	ldr	r3, [pc, #276]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1f0      	bne.n	8009786 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80097a4:	4b42      	ldr	r3, [pc, #264]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	051b      	lsls	r3, r3, #20
 80097b2:	493f      	ldr	r1, [pc, #252]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	628b      	str	r3, [r1, #40]	; 0x28
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	3b01      	subs	r3, #1
 80097be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	025b      	lsls	r3, r3, #9
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	431a      	orrs	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	041b      	lsls	r3, r3, #16
 80097d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097da:	431a      	orrs	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	061b      	lsls	r3, r3, #24
 80097e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097e8:	4931      	ldr	r1, [pc, #196]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097ee:	4b30      	ldr	r3, [pc, #192]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	492d      	ldr	r1, [pc, #180]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009800:	4b2b      	ldr	r3, [pc, #172]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	4928      	ldr	r1, [pc, #160]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800980e:	4313      	orrs	r3, r2
 8009810:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009812:	4b27      	ldr	r3, [pc, #156]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	4a26      	ldr	r2, [pc, #152]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800981c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800981e:	4b24      	ldr	r3, [pc, #144]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009822:	4b24      	ldr	r3, [pc, #144]	; (80098b4 <RCCEx_PLL3_Config+0x160>)
 8009824:	4013      	ands	r3, r2
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	69d2      	ldr	r2, [r2, #28]
 800982a:	00d2      	lsls	r2, r2, #3
 800982c:	4920      	ldr	r1, [pc, #128]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800982e:	4313      	orrs	r3, r2
 8009830:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009832:	4b1f      	ldr	r3, [pc, #124]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009836:	4a1e      	ldr	r2, [pc, #120]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800983c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d106      	bne.n	8009852 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009844:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	4a19      	ldr	r2, [pc, #100]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800984a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800984e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009850:	e00f      	b.n	8009872 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d106      	bne.n	8009866 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009858:	4b15      	ldr	r3, [pc, #84]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a14      	ldr	r2, [pc, #80]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800985e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009862:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009864:	e005      	b.n	8009872 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009866:	4b12      	ldr	r3, [pc, #72]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986a:	4a11      	ldr	r2, [pc, #68]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800986c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009870:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009872:	4b0f      	ldr	r3, [pc, #60]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a0e      	ldr	r2, [pc, #56]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800987c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800987e:	f7f8 f94b 	bl	8001b18 <HAL_GetTick>
 8009882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009884:	e008      	b.n	8009898 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009886:	f7f8 f947 	bl	8001b18 <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	2b02      	cmp	r3, #2
 8009892:	d901      	bls.n	8009898 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e006      	b.n	80098a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0f0      	beq.n	8009886 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	58024400 	.word	0x58024400
 80098b4:	ffff0007 	.word	0xffff0007

080098b8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d904      	bls.n	80098d6 <HAL_SAI_InitProtocol+0x1e>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	3b03      	subs	r3, #3
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d812      	bhi.n	80098fa <HAL_SAI_InitProtocol+0x42>
 80098d4:	e008      	b.n	80098e8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	68b9      	ldr	r1, [r7, #8]
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 fac5 	bl	8009e6c <SAI_InitI2S>
 80098e2:	4603      	mov	r3, r0
 80098e4:	75fb      	strb	r3, [r7, #23]
      break;
 80098e6:	e00b      	b.n	8009900 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	68b9      	ldr	r1, [r7, #8]
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 fb6e 	bl	8009fd0 <SAI_InitPCM>
 80098f4:	4603      	mov	r3, r0
 80098f6:	75fb      	strb	r3, [r7, #23]
      break;
 80098f8:	e002      	b.n	8009900 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
      break;
 80098fe:	bf00      	nop
  }

  if (status == HAL_OK)
 8009900:	7dfb      	ldrb	r3, [r7, #23]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d104      	bne.n	8009910 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 f808 	bl	800991c <HAL_SAI_Init>
 800990c:	4603      	mov	r3, r0
 800990e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009910:	7dfb      	ldrb	r3, [r7, #23]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b08a      	sub	sp, #40	; 0x28
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e1fb      	b.n	8009d26 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009934:	2b01      	cmp	r3, #1
 8009936:	d113      	bne.n	8009960 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a96      	ldr	r2, [pc, #600]	; (8009b98 <HAL_SAI_Init+0x27c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d004      	beq.n	800994c <HAL_SAI_Init+0x30>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a95      	ldr	r2, [pc, #596]	; (8009b9c <HAL_SAI_Init+0x280>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d107      	bne.n	800995c <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009950:	2b01      	cmp	r3, #1
 8009952:	d103      	bne.n	800995c <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e1e2      	b.n	8009d26 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a8c      	ldr	r2, [pc, #560]	; (8009b98 <HAL_SAI_Init+0x27c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d004      	beq.n	8009974 <HAL_SAI_Init+0x58>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a8c      	ldr	r2, [pc, #560]	; (8009ba0 <HAL_SAI_Init+0x284>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d102      	bne.n	800997a <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8009974:	4b8b      	ldr	r3, [pc, #556]	; (8009ba4 <HAL_SAI_Init+0x288>)
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	e00e      	b.n	8009998 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a87      	ldr	r2, [pc, #540]	; (8009b9c <HAL_SAI_Init+0x280>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d004      	beq.n	800998e <HAL_SAI_Init+0x72>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a87      	ldr	r2, [pc, #540]	; (8009ba8 <HAL_SAI_Init+0x28c>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d102      	bne.n	8009994 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800998e:	4b87      	ldr	r3, [pc, #540]	; (8009bac <HAL_SAI_Init+0x290>)
 8009990:	61bb      	str	r3, [r7, #24]
 8009992:	e001      	b.n	8009998 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e1c6      	b.n	8009d26 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d106      	bne.n	80099b2 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 f92b 	bl	800ac08 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fbc6 	bl	800a144 <SAI_Disable>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e1b1      	b.n	8009d26 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2202      	movs	r2, #2
 80099c6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d00c      	beq.n	80099ec <HAL_SAI_Init+0xd0>
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d80d      	bhi.n	80099f2 <HAL_SAI_Init+0xd6>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <HAL_SAI_Init+0xc4>
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d003      	beq.n	80099e6 <HAL_SAI_Init+0xca>
 80099de:	e008      	b.n	80099f2 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80099e4:	e008      	b.n	80099f8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80099e6:	2310      	movs	r3, #16
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80099ea:	e005      	b.n	80099f8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80099ec:	2320      	movs	r3, #32
 80099ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80099f0:	e002      	b.n	80099f8 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80099f6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	2b05      	cmp	r3, #5
 80099fe:	d822      	bhi.n	8009a46 <HAL_SAI_Init+0x12a>
 8009a00:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <HAL_SAI_Init+0xec>)
 8009a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a06:	bf00      	nop
 8009a08:	08009a21 	.word	0x08009a21
 8009a0c:	08009a27 	.word	0x08009a27
 8009a10:	08009a2f 	.word	0x08009a2f
 8009a14:	08009a47 	.word	0x08009a47
 8009a18:	08009a47 	.word	0x08009a47
 8009a1c:	08009a37 	.word	0x08009a37
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009a20:	2300      	movs	r3, #0
 8009a22:	61fb      	str	r3, [r7, #28]
      break;
 8009a24:	e012      	b.n	8009a4c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a2a:	61fb      	str	r3, [r7, #28]
      break;
 8009a2c:	e00e      	b.n	8009a4c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009a2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a32:	61fb      	str	r3, [r7, #28]
      break;
 8009a34:	e00a      	b.n	8009a4c <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a3a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	f043 0303 	orr.w	r3, r3, #3
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009a44:	e002      	b.n	8009a4c <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61fb      	str	r3, [r7, #28]
      break;
 8009a4a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a50:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 8084 	beq.w	8009b64 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a4c      	ldr	r2, [pc, #304]	; (8009b98 <HAL_SAI_Init+0x27c>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d004      	beq.n	8009a74 <HAL_SAI_Init+0x158>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a4c      	ldr	r2, [pc, #304]	; (8009ba0 <HAL_SAI_Init+0x284>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d104      	bne.n	8009a7e <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009a74:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009a78:	f7fe fd86 	bl	8008588 <HAL_RCCEx_GetPeriphCLKFreq>
 8009a7c:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a46      	ldr	r2, [pc, #280]	; (8009b9c <HAL_SAI_Init+0x280>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d104      	bne.n	8009a92 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009a88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009a8c:	f7fe fd7c 	bl	8008588 <HAL_RCCEx_GetPeriphCLKFreq>
 8009a90:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a44      	ldr	r2, [pc, #272]	; (8009ba8 <HAL_SAI_Init+0x28c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d104      	bne.n	8009aa6 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009a9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009aa0:	f7fe fd72 	bl	8008588 <HAL_RCCEx_GetPeriphCLKFreq>
 8009aa4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009aae:	d120      	bne.n	8009af2 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab4:	2b04      	cmp	r3, #4
 8009ab6:	d102      	bne.n	8009abe <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8009ab8:	2340      	movs	r3, #64	; 0x40
 8009aba:	60fb      	str	r3, [r7, #12]
 8009abc:	e00a      	b.n	8009ad4 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac2:	2b08      	cmp	r3, #8
 8009ac4:	d103      	bne.n	8009ace <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8009ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e002      	b.n	8009ad4 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	4619      	mov	r1, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	fb02 f303 	mul.w	r3, r2, r3
 8009aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8009aee:	613b      	str	r3, [r7, #16]
 8009af0:	e017      	b.n	8009b22 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009afa:	d101      	bne.n	8009b00 <HAL_SAI_Init+0x1e4>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e000      	b.n	8009b02 <HAL_SAI_Init+0x1e6>
 8009b00:	2301      	movs	r3, #1
 8009b02:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	4613      	mov	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	4619      	mov	r1, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	fb02 f303 	mul.w	r3, r2, r3
 8009b1a:	021b      	lsls	r3, r3, #8
 8009b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b20:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	4a22      	ldr	r2, [pc, #136]	; (8009bb0 <HAL_SAI_Init+0x294>)
 8009b26:	fba2 2303 	umull	r2, r3, r2, r3
 8009b2a:	08da      	lsrs	r2, r3, #3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009b30:	6939      	ldr	r1, [r7, #16]
 8009b32:	4b1f      	ldr	r3, [pc, #124]	; (8009bb0 <HAL_SAI_Init+0x294>)
 8009b34:	fba3 2301 	umull	r2, r3, r3, r1
 8009b38:	08da      	lsrs	r2, r3, #3
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4413      	add	r3, r2
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	1aca      	subs	r2, r1, r3
 8009b44:	2a08      	cmp	r2, #8
 8009b46:	d904      	bls.n	8009b52 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b56:	2b04      	cmp	r3, #4
 8009b58:	d104      	bne.n	8009b64 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	085a      	lsrs	r2, r3, #1
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d003      	beq.n	8009b74 <HAL_SAI_Init+0x258>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d109      	bne.n	8009b88 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_SAI_Init+0x264>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	e001      	b.n	8009b84 <HAL_SAI_Init+0x268>
 8009b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b84:	623b      	str	r3, [r7, #32]
 8009b86:	e017      	b.n	8009bb8 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d111      	bne.n	8009bb4 <HAL_SAI_Init+0x298>
 8009b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b94:	e00f      	b.n	8009bb6 <HAL_SAI_Init+0x29a>
 8009b96:	bf00      	nop
 8009b98:	40015804 	.word	0x40015804
 8009b9c:	58005404 	.word	0x58005404
 8009ba0:	40015824 	.word	0x40015824
 8009ba4:	40015800 	.word	0x40015800
 8009ba8:	58005424 	.word	0x58005424
 8009bac:	58005400 	.word	0x58005400
 8009bb0:	cccccccd 	.word	0xcccccccd
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6819      	ldr	r1, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b5b      	ldr	r3, [pc, #364]	; (8009d30 <HAL_SAI_Init+0x414>)
 8009bc4:	400b      	ands	r3, r1
 8009bc6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6819      	ldr	r1, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009bdc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be2:	431a      	orrs	r2, r3
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8009bf0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009bfc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	051b      	lsls	r3, r3, #20
 8009c04:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009c0a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6859      	ldr	r1, [r3, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	4b43      	ldr	r3, [pc, #268]	; (8009d34 <HAL_SAI_Init+0x418>)
 8009c26:	400b      	ands	r3, r1
 8009c28:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6859      	ldr	r1, [r3, #4]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	69da      	ldr	r2, [r3, #28]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	430a      	orrs	r2, r1
 8009c46:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6899      	ldr	r1, [r3, #8]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	4b39      	ldr	r3, [pc, #228]	; (8009d38 <HAL_SAI_Init+0x41c>)
 8009c54:	400b      	ands	r3, r1
 8009c56:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6899      	ldr	r1, [r3, #8]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c62:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009c68:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009c6e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009c74:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009c7e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68d9      	ldr	r1, [r3, #12]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009c96:	400b      	ands	r3, r1
 8009c98:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68d9      	ldr	r1, [r3, #12]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ca8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cae:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009cb0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a1c      	ldr	r2, [pc, #112]	; (8009d3c <HAL_SAI_Init+0x420>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d004      	beq.n	8009cd8 <HAL_SAI_Init+0x3bc>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a1b      	ldr	r2, [pc, #108]	; (8009d40 <HAL_SAI_Init+0x424>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d119      	bne.n	8009d0c <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cdc:	f023 0201 	bic.w	r2, r3, #1
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d10e      	bne.n	8009d0c <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d04:	f043 0201 	orr.w	r2, r3, #1
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3728      	adds	r7, #40	; 0x28
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	f005c010 	.word	0xf005c010
 8009d34:	ffff1ff0 	.word	0xffff1ff0
 8009d38:	fff88000 	.word	0xfff88000
 8009d3c:	40015804 	.word	0x40015804
 8009d40:	58005404 	.word	0x58005404

08009d44 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <HAL_SAI_Receive_DMA+0x1a>
 8009d58:	88fb      	ldrh	r3, [r7, #6]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e079      	b.n	8009e56 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d172      	bne.n	8009e54 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d101      	bne.n	8009d7c <HAL_SAI_Receive_DMA+0x38>
 8009d78:	2302      	movs	r3, #2
 8009d7a:	e06c      	b.n	8009e56 <HAL_SAI_Receive_DMA+0x112>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	88fa      	ldrh	r2, [r7, #6]
 8009d8e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	88fa      	ldrh	r2, [r7, #6]
 8009d96:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2222      	movs	r2, #34	; 0x22
 8009da6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009db0:	4a2b      	ldr	r2, [pc, #172]	; (8009e60 <HAL_SAI_Receive_DMA+0x11c>)
 8009db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dba:	4a2a      	ldr	r2, [pc, #168]	; (8009e64 <HAL_SAI_Receive_DMA+0x120>)
 8009dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dc4:	4a28      	ldr	r2, [pc, #160]	; (8009e68 <HAL_SAI_Receive_DMA+0x124>)
 8009dc6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dce:	2200      	movs	r2, #0
 8009dd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	331c      	adds	r3, #28
 8009dde:	4619      	mov	r1, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009de4:	461a      	mov	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009dec:	f7f8 fc26 	bl	800263c <HAL_DMA_Start_IT>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d005      	beq.n	8009e02 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e029      	b.n	8009e56 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009e02:	2100      	movs	r1, #0
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 f965 	bl	800a0d4 <SAI_InterruptFlag>
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	691a      	ldr	r2, [r3, #16]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009e28:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d107      	bne.n	8009e48 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009e46:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	e000      	b.n	8009e56 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8009e54:	2302      	movs	r3, #2
  }
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	0800a219 	.word	0x0800a219
 8009e64:	0800a1b9 	.word	0x0800a1b9
 8009e68:	0800a235 	.word	0x0800a235

08009e6c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
 8009e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <SAI_InitI2S+0x2e>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d103      	bne.n	8009ea2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	651a      	str	r2, [r3, #80]	; 0x50
 8009ea0:	e002      	b.n	8009ea8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009eae:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009eb6:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e077      	b.n	8009fc2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d107      	bne.n	8009ee8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009ee4:	665a      	str	r2, [r3, #100]	; 0x64
 8009ee6:	e006      	b.n	8009ef6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009eee:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	665a      	str	r2, [r3, #100]	; 0x64
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d84f      	bhi.n	8009f9c <SAI_InitI2S+0x130>
 8009efc:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <SAI_InitI2S+0x98>)
 8009efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f02:	bf00      	nop
 8009f04:	08009f15 	.word	0x08009f15
 8009f08:	08009f37 	.word	0x08009f37
 8009f0c:	08009f59 	.word	0x08009f59
 8009f10:	08009f7b 	.word	0x08009f7b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2280      	movs	r2, #128	; 0x80
 8009f18:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	085b      	lsrs	r3, r3, #1
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	085b      	lsrs	r3, r3, #1
 8009f28:	011a      	lsls	r2, r3, #4
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2240      	movs	r2, #64	; 0x40
 8009f32:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009f34:	e035      	b.n	8009fa2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2280      	movs	r2, #128	; 0x80
 8009f3a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	085b      	lsrs	r3, r3, #1
 8009f40:	019a      	lsls	r2, r3, #6
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	085b      	lsrs	r3, r3, #1
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2280      	movs	r2, #128	; 0x80
 8009f54:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009f56:	e024      	b.n	8009fa2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	22c0      	movs	r2, #192	; 0xc0
 8009f5c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	085b      	lsrs	r3, r3, #1
 8009f62:	019a      	lsls	r2, r3, #6
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2280      	movs	r2, #128	; 0x80
 8009f76:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009f78:	e013      	b.n	8009fa2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	22e0      	movs	r2, #224	; 0xe0
 8009f7e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	085b      	lsrs	r3, r3, #1
 8009f84:	019a      	lsls	r2, r3, #6
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	085b      	lsrs	r3, r3, #1
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2280      	movs	r2, #128	; 0x80
 8009f98:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009f9a:	e002      	b.n	8009fa2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d10b      	bne.n	8009fc0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d102      	bne.n	8009fb4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2210      	movs	r2, #16
 8009fb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d102      	bne.n	8009fc0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2208      	movs	r2, #8
 8009fbe:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop

08009fd0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <SAI_InitPCM+0x2e>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d103      	bne.n	800a006 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	651a      	str	r2, [r3, #80]	; 0x50
 800a004:	e002      	b.n	800a00c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a018:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a020:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a034:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b04      	cmp	r3, #4
 800a03a:	d103      	bne.n	800a044 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2201      	movs	r2, #1
 800a040:	659a      	str	r2, [r3, #88]	; 0x58
 800a042:	e002      	b.n	800a04a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	220d      	movs	r2, #13
 800a048:	659a      	str	r2, [r3, #88]	; 0x58
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d837      	bhi.n	800a0c0 <SAI_InitPCM+0xf0>
 800a050:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <SAI_InitPCM+0x88>)
 800a052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a056:	bf00      	nop
 800a058:	0800a069 	.word	0x0800a069
 800a05c:	0800a07f 	.word	0x0800a07f
 800a060:	0800a095 	.word	0x0800a095
 800a064:	0800a0ab 	.word	0x0800a0ab
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2280      	movs	r2, #128	; 0x80
 800a06c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	011a      	lsls	r2, r3, #4
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2240      	movs	r2, #64	; 0x40
 800a07a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a07c:	e023      	b.n	800a0c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2280      	movs	r2, #128	; 0x80
 800a082:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2280      	movs	r2, #128	; 0x80
 800a090:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a092:	e018      	b.n	800a0c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	22c0      	movs	r2, #192	; 0xc0
 800a098:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2280      	movs	r2, #128	; 0x80
 800a0a6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a0a8:	e00d      	b.n	800a0c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	22e0      	movs	r2, #224	; 0xe0
 800a0ae:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2280      	movs	r2, #128	; 0x80
 800a0bc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a0be:	e002      	b.n	800a0c6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c4:	bf00      	nop
  }

  return status;
 800a0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	371c      	adds	r7, #28
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	460b      	mov	r3, r1
 800a0de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d103      	bne.n	800a0f2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f043 0308 	orr.w	r3, r3, #8
 800a0f0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f6:	2b08      	cmp	r3, #8
 800a0f8:	d10b      	bne.n	800a112 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d003      	beq.n	800a10a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d103      	bne.n	800a112 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f043 0310 	orr.w	r3, r3, #16
 800a110:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2b03      	cmp	r3, #3
 800a118:	d003      	beq.n	800a122 <SAI_InterruptFlag+0x4e>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d104      	bne.n	800a12c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	e003      	b.n	800a134 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f043 0304 	orr.w	r3, r3, #4
 800a132:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a134:	68fb      	ldr	r3, [r7, #12]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
	...

0800a144 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a14c:	4b18      	ldr	r3, [pc, #96]	; (800a1b0 <SAI_Disable+0x6c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a18      	ldr	r2, [pc, #96]	; (800a1b4 <SAI_Disable+0x70>)
 800a152:	fba2 2303 	umull	r2, r3, r2, r3
 800a156:	0b1b      	lsrs	r3, r3, #12
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a16e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10a      	bne.n	800a18c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a17c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	72fb      	strb	r3, [r7, #11]
      break;
 800a18a:	e009      	b.n	800a1a0 <SAI_Disable+0x5c>
    }
    count--;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3b01      	subs	r3, #1
 800a190:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e7      	bne.n	800a170 <SAI_Disable+0x2c>

  return status;
 800a1a0:	7afb      	ldrb	r3, [r7, #11]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	2400041c 	.word	0x2400041c
 800a1b4:	95cbec1b 	.word	0x95cbec1b

0800a1b8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ce:	d01c      	beq.n	800a20a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a1de:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff ff72 	bl	800a0d4 <SAI_InterruptFlag>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	43d9      	mvns	r1, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	691a      	ldr	r2, [r3, #16]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	400a      	ands	r2, r1
 800a200:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7f7 fbd5 	bl	80019ba <HAL_SAI_RxCpltCallback>
#endif
}
 800a210:	bf00      	nop
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a224:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7f7 fbbc 	bl	80019a4 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800a22c:	bf00      	nop
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7f9 fde0 	bl	8003e08 <HAL_DMA_GetError>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d01d      	beq.n	800a28a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a254:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a26c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f7ff ff68 	bl	800a144 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f7f7 fb6d 	bl	8001964 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800a28a:	bf00      	nop
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a298:	f7f7 fbb8 	bl	8001a0c <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 800a29c:	2000      	movs	r0, #0
 800a29e:	f7f7 fac7 	bl	8001830 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800a2a2:	2001      	movs	r0, #1
 800a2a4:	f7f7 fac4 	bl	8001830 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	f7f7 fb3d 	bl	8001928 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	f7f7 fb3a 	bl	8001928 <BSP_LED_Off>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a2b4:	f000 f846 	bl	800a344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a2b8:	f000 fb08 	bl	800a8cc <MX_GPIO_Init>
  MX_BDMA_Init();
 800a2bc:	f000 fa1c 	bl	800a6f8 <MX_BDMA_Init>
  MX_SAI4_Init();
 800a2c0:	f000 f9bc 	bl	800a63c <MX_SAI4_Init>
  MX_CRC_Init();
 800a2c4:	f000 f8d0 	bl	800a468 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 800a2c8:	f000 fba2 	bl	800aa10 <MX_PDM2PCM_Init>
  MX_DMA_Init();
 800a2cc:	f000 fa2e 	bl	800a72c <MX_DMA_Init>
  MX_SAI1_Init();
 800a2d0:	f000 f97e 	bl	800a5d0 <MX_SAI1_Init>
  MX_RAMECC_Init();
 800a2d4:	f000 f94a 	bl	800a56c <MX_RAMECC_Init>
  MX_I2C4_Init();
 800a2d8:	f000 f908 	bl	800a4ec <MX_I2C4_Init>
//  MX_DFSDM1_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 800a2dc:	f000 f8a0 	bl	800a420 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CODEC_Init();
 800a2e0:	f000 fb60 	bl	800a9a4 <CODEC_Init>
//  HAL_SAI_Init(&hsai_BlockA4);
//

  // need to move data from D3 into D2 (where SAI1 is)

  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, input_buffer, pdm_buffer, NUM_BYTES);
 800a2e4:	4b10      	ldr	r3, [pc, #64]	; (800a328 <main+0x94>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4b10      	ldr	r3, [pc, #64]	; (800a32c <main+0x98>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	2320      	movs	r3, #32
 800a2f2:	480f      	ldr	r0, [pc, #60]	; (800a330 <main+0x9c>)
 800a2f4:	f7f8 f9a2 	bl	800263c <HAL_DMA_Start_IT>
  if(HAL_SAI_Receive_DMA(&hsai_BlockA4, input_buffer, NUM_BYTES) == HAL_OK)
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <main+0x94>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	4619      	mov	r1, r3
 800a300:	480c      	ldr	r0, [pc, #48]	; (800a334 <main+0xa0>)
 800a302:	f7ff fd1f 	bl	8009d44 <HAL_SAI_Receive_DMA>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10c      	bne.n	800a326 <main+0x92>
  {
	  HAL_SAI_MspInit(&hsai_BlockB1);
 800a30c:	480a      	ldr	r0, [pc, #40]	; (800a338 <main+0xa4>)
 800a30e:	f000 fc7b 	bl	800ac08 <HAL_SAI_MspInit>
	  PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 800a312:	4b06      	ldr	r3, [pc, #24]	; (800a32c <main+0x98>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a09      	ldr	r2, [pc, #36]	; (800a33c <main+0xa8>)
 800a318:	4909      	ldr	r1, [pc, #36]	; (800a340 <main+0xac>)
 800a31a:	4618      	mov	r0, r3
 800a31c:	f002 fdb0 	bl	800ce80 <PDM_Filter>
	  BSP_LED_On(LED2);
 800a320:	2001      	movs	r0, #1
 800a322:	f7f7 fae3 	bl	80018ec <BSP_LED_On>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800a326:	e7fe      	b.n	800a326 <main+0x92>
 800a328:	24000414 	.word	0x24000414
 800a32c:	24000418 	.word	0x24000418
 800a330:	24000590 	.word	0x24000590
 800a334:	2400073c 	.word	0x2400073c
 800a338:	240006a4 	.word	0x240006a4
 800a33c:	2400094c 	.word	0x2400094c
 800a340:	240004a8 	.word	0x240004a8

0800a344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b09c      	sub	sp, #112	; 0x70
 800a348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a34a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a34e:	224c      	movs	r2, #76	; 0x4c
 800a350:	2100      	movs	r1, #0
 800a352:	4618      	mov	r0, r3
 800a354:	f002 fdd8 	bl	800cf08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a358:	1d3b      	adds	r3, r7, #4
 800a35a:	2220      	movs	r2, #32
 800a35c:	2100      	movs	r1, #0
 800a35e:	4618      	mov	r0, r3
 800a360:	f002 fdd2 	bl	800cf08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800a364:	2004      	movs	r0, #4
 800a366:	f7fc fa71 	bl	800684c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a36a:	2300      	movs	r3, #0
 800a36c:	603b      	str	r3, [r7, #0]
 800a36e:	4b2b      	ldr	r3, [pc, #172]	; (800a41c <SystemClock_Config+0xd8>)
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	4a2a      	ldr	r2, [pc, #168]	; (800a41c <SystemClock_Config+0xd8>)
 800a374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a378:	6193      	str	r3, [r2, #24]
 800a37a:	4b28      	ldr	r3, [pc, #160]	; (800a41c <SystemClock_Config+0xd8>)
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a382:	603b      	str	r3, [r7, #0]
 800a384:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a386:	bf00      	nop
 800a388:	4b24      	ldr	r3, [pc, #144]	; (800a41c <SystemClock_Config+0xd8>)
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a394:	d1f8      	bne.n	800a388 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a396:	2302      	movs	r3, #2
 800a398:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800a39a:	2301      	movs	r3, #1
 800a39c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a39e:	2340      	movs	r3, #64	; 0x40
 800a3a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a3aa:	2304      	movs	r3, #4
 800a3ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800a3ae:	2318      	movs	r3, #24
 800a3b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 800a3b6:	237d      	movs	r3, #125	; 0x7d
 800a3b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a3be:	230c      	movs	r3, #12
 800a3c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a3ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fc fad4 	bl	800697c <HAL_RCC_OscConfig>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800a3da:	f000 fb13 	bl	800aa04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a3de:	233f      	movs	r3, #63	; 0x3f
 800a3e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a3ea:	2308      	movs	r3, #8
 800a3ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a3ee:	2340      	movs	r3, #64	; 0x40
 800a3f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a3f2:	2340      	movs	r3, #64	; 0x40
 800a3f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a3f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a3fc:	2340      	movs	r3, #64	; 0x40
 800a3fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a400:	1d3b      	adds	r3, r7, #4
 800a402:	2102      	movs	r1, #2
 800a404:	4618      	mov	r0, r3
 800a406:	f7fc fe65 	bl	80070d4 <HAL_RCC_ClockConfig>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800a410:	f000 faf8 	bl	800aa04 <Error_Handler>
  }
}
 800a414:	bf00      	nop
 800a416:	3770      	adds	r7, #112	; 0x70
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	58024800 	.word	0x58024800

0800a420 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 800a424:	2200      	movs	r2, #0
 800a426:	2100      	movs	r1, #0
 800a428:	2082      	movs	r0, #130	; 0x82
 800a42a:	f7f7 fc80 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 800a42e:	2082      	movs	r0, #130	; 0x82
 800a430:	f7f7 fc97 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800a434:	2200      	movs	r2, #0
 800a436:	2100      	movs	r1, #0
 800a438:	2038      	movs	r0, #56	; 0x38
 800a43a:	f7f7 fc78 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800a43e:	2038      	movs	r0, #56	; 0x38
 800a440:	f7f7 fc8f 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800a444:	2200      	movs	r2, #0
 800a446:	2100      	movs	r1, #0
 800a448:	2006      	movs	r0, #6
 800a44a:	f7f7 fc70 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a44e:	2006      	movs	r0, #6
 800a450:	f7f7 fc87 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 800a454:	2200      	movs	r2, #0
 800a456:	2100      	movs	r1, #0
 800a458:	2080      	movs	r0, #128	; 0x80
 800a45a:	f7f7 fc68 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 800a45e:	2080      	movs	r0, #128	; 0x80
 800a460:	f7f7 fc7f 	bl	8001d62 <HAL_NVIC_EnableIRQ>
}
 800a464:	bf00      	nop
 800a466:	bd80      	pop	{r7, pc}

0800a468 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a46e:	4b1c      	ldr	r3, [pc, #112]	; (800a4e0 <MX_CRC_Init+0x78>)
 800a470:	4a1c      	ldr	r2, [pc, #112]	; (800a4e4 <MX_CRC_Init+0x7c>)
 800a472:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a474:	4b1a      	ldr	r3, [pc, #104]	; (800a4e0 <MX_CRC_Init+0x78>)
 800a476:	2200      	movs	r2, #0
 800a478:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800a47a:	4b19      	ldr	r3, [pc, #100]	; (800a4e0 <MX_CRC_Init+0x78>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800a480:	4b17      	ldr	r3, [pc, #92]	; (800a4e0 <MX_CRC_Init+0x78>)
 800a482:	2200      	movs	r2, #0
 800a484:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800a486:	4b16      	ldr	r3, [pc, #88]	; (800a4e0 <MX_CRC_Init+0x78>)
 800a488:	2200      	movs	r2, #0
 800a48a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800a48c:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <MX_CRC_Init+0x78>)
 800a48e:	2201      	movs	r2, #1
 800a490:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a492:	4813      	ldr	r0, [pc, #76]	; (800a4e0 <MX_CRC_Init+0x78>)
 800a494:	f7f7 fc8e 	bl	8001db4 <HAL_CRC_Init>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800a49e:	f000 fab1 	bl	800aa04 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <MX_CRC_Init+0x78>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689a      	ldr	r2, [r3, #8]
 800a4a8:	4b0d      	ldr	r3, [pc, #52]	; (800a4e0 <MX_CRC_Init+0x78>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0201 	orr.w	r2, r2, #1
 800a4b0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800a4b2:	4b0d      	ldr	r3, [pc, #52]	; (800a4e8 <MX_CRC_Init+0x80>)
 800a4b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4b8:	4a0b      	ldr	r2, [pc, #44]	; (800a4e8 <MX_CRC_Init+0x80>)
 800a4ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a4c2:	4b09      	ldr	r3, [pc, #36]	; (800a4e8 <MX_CRC_Init+0x80>)
 800a4c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4cc:	607b      	str	r3, [r7, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 800a4d0:	4803      	ldr	r0, [pc, #12]	; (800a4e0 <MX_CRC_Init+0x78>)
 800a4d2:	f000 fae1 	bl	800aa98 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 800a4d6:	bf00      	nop
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	24000680 	.word	0x24000680
 800a4e4:	58024c00 	.word	0x58024c00
 800a4e8:	58024400 	.word	0x58024400

0800a4ec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800a4f0:	4b1b      	ldr	r3, [pc, #108]	; (800a560 <MX_I2C4_Init+0x74>)
 800a4f2:	4a1c      	ldr	r2, [pc, #112]	; (800a564 <MX_I2C4_Init+0x78>)
 800a4f4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10B0DCFB;
 800a4f6:	4b1a      	ldr	r3, [pc, #104]	; (800a560 <MX_I2C4_Init+0x74>)
 800a4f8:	4a1b      	ldr	r2, [pc, #108]	; (800a568 <MX_I2C4_Init+0x7c>)
 800a4fa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 104;
 800a4fc:	4b18      	ldr	r3, [pc, #96]	; (800a560 <MX_I2C4_Init+0x74>)
 800a4fe:	2268      	movs	r2, #104	; 0x68
 800a500:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a502:	4b17      	ldr	r3, [pc, #92]	; (800a560 <MX_I2C4_Init+0x74>)
 800a504:	2201      	movs	r2, #1
 800a506:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a508:	4b15      	ldr	r3, [pc, #84]	; (800a560 <MX_I2C4_Init+0x74>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800a50e:	4b14      	ldr	r3, [pc, #80]	; (800a560 <MX_I2C4_Init+0x74>)
 800a510:	2200      	movs	r2, #0
 800a512:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a514:	4b12      	ldr	r3, [pc, #72]	; (800a560 <MX_I2C4_Init+0x74>)
 800a516:	2200      	movs	r2, #0
 800a518:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a51a:	4b11      	ldr	r3, [pc, #68]	; (800a560 <MX_I2C4_Init+0x74>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a520:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <MX_I2C4_Init+0x74>)
 800a522:	2200      	movs	r2, #0
 800a524:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800a526:	480e      	ldr	r0, [pc, #56]	; (800a560 <MX_I2C4_Init+0x74>)
 800a528:	f7fa fd1c 	bl	8004f64 <HAL_I2C_Init>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800a532:	f000 fa67 	bl	800aa04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a536:	2100      	movs	r1, #0
 800a538:	4809      	ldr	r0, [pc, #36]	; (800a560 <MX_I2C4_Init+0x74>)
 800a53a:	f7fc f8ef 	bl	800671c <HAL_I2CEx_ConfigAnalogFilter>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800a544:	f000 fa5e 	bl	800aa04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800a548:	2100      	movs	r1, #0
 800a54a:	4805      	ldr	r0, [pc, #20]	; (800a560 <MX_I2C4_Init+0x74>)
 800a54c:	f7fc f931 	bl	80067b2 <HAL_I2CEx_ConfigDigitalFilter>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800a556:	f000 fa55 	bl	800aa04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800a55a:	bf00      	nop
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	24000534 	.word	0x24000534
 800a564:	58001c00 	.word	0x58001c00
 800a568:	10b0dcfb 	.word	0x10b0dcfb

0800a56c <MX_RAMECC_Init>:
  * @brief RAMECC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RAMECC_Init(void)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RAMECC_Init 1 */

  /* USER CODE END RAMECC_Init 1 */
  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 800a570:	4b11      	ldr	r3, [pc, #68]	; (800a5b8 <MX_RAMECC_Init+0x4c>)
 800a572:	4a12      	ldr	r2, [pc, #72]	; (800a5bc <MX_RAMECC_Init+0x50>)
 800a574:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 800a576:	4810      	ldr	r0, [pc, #64]	; (800a5b8 <MX_RAMECC_Init+0x4c>)
 800a578:	f7fc f9c2 	bl	8006900 <HAL_RAMECC_Init>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 800a582:	f000 fa3f 	bl	800aa04 <Error_Handler>
  }
  /** Initialize RAMECC2 M2 : SRAM2_0
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 800a586:	4b0e      	ldr	r3, [pc, #56]	; (800a5c0 <MX_RAMECC_Init+0x54>)
 800a588:	4a0e      	ldr	r2, [pc, #56]	; (800a5c4 <MX_RAMECC_Init+0x58>)
 800a58a:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 800a58c:	480c      	ldr	r0, [pc, #48]	; (800a5c0 <MX_RAMECC_Init+0x54>)
 800a58e:	f7fc f9b7 	bl	8006900 <HAL_RAMECC_Init>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 800a598:	f000 fa34 	bl	800aa04 <Error_Handler>
  }
  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 800a59c:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <MX_RAMECC_Init+0x5c>)
 800a59e:	4a0b      	ldr	r2, [pc, #44]	; (800a5cc <MX_RAMECC_Init+0x60>)
 800a5a0:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 800a5a2:	4809      	ldr	r0, [pc, #36]	; (800a5c8 <MX_RAMECC_Init+0x5c>)
 800a5a4:	f7fc f9ac 	bl	8006900 <HAL_RAMECC_Init>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 800a5ae:	f000 fa29 	bl	800aa04 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 800a5b2:	bf00      	nop
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	2400085c 	.word	0x2400085c
 800a5bc:	48023020 	.word	0x48023020
 800a5c0:	240007d4 	.word	0x240007d4
 800a5c4:	48023040 	.word	0x48023040
 800a5c8:	24000580 	.word	0x24000580
 800a5cc:	58027020 	.word	0x58027020

0800a5d0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800a5d4:	4b16      	ldr	r3, [pc, #88]	; (800a630 <MX_SAI1_Init+0x60>)
 800a5d6:	4a17      	ldr	r2, [pc, #92]	; (800a634 <MX_SAI1_Init+0x64>)
 800a5d8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800a5da:	4b15      	ldr	r3, [pc, #84]	; (800a630 <MX_SAI1_Init+0x60>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800a5e0:	4b13      	ldr	r3, [pc, #76]	; (800a630 <MX_SAI1_Init+0x60>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a5e6:	4b12      	ldr	r3, [pc, #72]	; (800a630 <MX_SAI1_Init+0x60>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800a5ec:	4b10      	ldr	r3, [pc, #64]	; (800a630 <MX_SAI1_Init+0x60>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800a5f2:	4b0f      	ldr	r3, [pc, #60]	; (800a630 <MX_SAI1_Init+0x60>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800a5f8:	4b0d      	ldr	r3, [pc, #52]	; (800a630 <MX_SAI1_Init+0x60>)
 800a5fa:	4a0f      	ldr	r2, [pc, #60]	; (800a638 <MX_SAI1_Init+0x68>)
 800a5fc:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a5fe:	4b0c      	ldr	r3, [pc, #48]	; (800a630 <MX_SAI1_Init+0x60>)
 800a600:	2200      	movs	r2, #0
 800a602:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800a604:	4b0a      	ldr	r3, [pc, #40]	; (800a630 <MX_SAI1_Init+0x60>)
 800a606:	2200      	movs	r2, #0
 800a608:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <MX_SAI1_Init+0x60>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a610:	4b07      	ldr	r3, [pc, #28]	; (800a630 <MX_SAI1_Init+0x60>)
 800a612:	2200      	movs	r2, #0
 800a614:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800a616:	2302      	movs	r3, #2
 800a618:	2200      	movs	r2, #0
 800a61a:	2100      	movs	r1, #0
 800a61c:	4804      	ldr	r0, [pc, #16]	; (800a630 <MX_SAI1_Init+0x60>)
 800a61e:	f7ff f94b 	bl	80098b8 <HAL_SAI_InitProtocol>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 800a628:	f000 f9ec 	bl	800aa04 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800a62c:	bf00      	nop
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	240006a4 	.word	0x240006a4
 800a634:	40015824 	.word	0x40015824
 800a638:	0002ee00 	.word	0x0002ee00

0800a63c <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 800a640:	4b2b      	ldr	r3, [pc, #172]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a642:	4a2c      	ldr	r2, [pc, #176]	; (800a6f4 <MX_SAI4_Init+0xb8>)
 800a644:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 800a646:	4b2a      	ldr	r3, [pc, #168]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a648:	2200      	movs	r2, #0
 800a64a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 800a64c:	4b28      	ldr	r3, [pc, #160]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a64e:	2201      	movs	r2, #1
 800a650:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_8;
 800a652:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a654:	2240      	movs	r2, #64	; 0x40
 800a656:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800a658:	4b25      	ldr	r3, [pc, #148]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a65e:	4b24      	ldr	r3, [pc, #144]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a660:	2200      	movs	r2, #0
 800a662:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 800a664:	4b22      	ldr	r3, [pc, #136]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a666:	2200      	movs	r2, #0
 800a668:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a66a:	4b21      	ldr	r3, [pc, #132]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 800a670:	4b1f      	ldr	r3, [pc, #124]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a672:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a676:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800a678:	4b1d      	ldr	r3, [pc, #116]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 800a67e:	4b1c      	ldr	r3, [pc, #112]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a680:	2200      	movs	r2, #0
 800a682:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 800a684:	4b1a      	ldr	r3, [pc, #104]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a686:	2200      	movs	r2, #0
 800a688:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 800a68a:	4b19      	ldr	r3, [pc, #100]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 800a692:	4b17      	ldr	r3, [pc, #92]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a694:	2202      	movs	r2, #2
 800a696:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 800a698:	4b15      	ldr	r3, [pc, #84]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a69a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a69e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 8;
 800a6a0:	4b13      	ldr	r3, [pc, #76]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a6a2:	2208      	movs	r2, #8
 800a6a4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 800a6a6:	4b12      	ldr	r3, [pc, #72]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800a6ac:	4b10      	ldr	r3, [pc, #64]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a6b2:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a6b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a6b8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800a6ba:	4b0d      	ldr	r3, [pc, #52]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800a6c6:	4b0a      	ldr	r3, [pc, #40]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 800a6cc:	4b08      	ldr	r3, [pc, #32]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 800a6d2:	4b07      	ldr	r3, [pc, #28]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a6d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6d8:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 800a6da:	4805      	ldr	r0, [pc, #20]	; (800a6f0 <MX_SAI4_Init+0xb4>)
 800a6dc:	f7ff f91e 	bl	800991c <HAL_SAI_Init>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <MX_SAI4_Init+0xae>
  {
    Error_Handler();
 800a6e6:	f000 f98d 	bl	800aa04 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 800a6ea:	bf00      	nop
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	2400073c 	.word	0x2400073c
 800a6f4:	58005404 	.word	0x58005404

0800a6f8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800a6fe:	4b0a      	ldr	r3, [pc, #40]	; (800a728 <MX_BDMA_Init+0x30>)
 800a700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a704:	4a08      	ldr	r2, [pc, #32]	; (800a728 <MX_BDMA_Init+0x30>)
 800a706:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a70a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a70e:	4b06      	ldr	r3, [pc, #24]	; (800a728 <MX_BDMA_Init+0x30>)
 800a710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a718:	607b      	str	r3, [r7, #4]
 800a71a:	687b      	ldr	r3, [r7, #4]

}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	58024400 	.word	0x58024400

0800a72c <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08a      	sub	sp, #40	; 0x28
 800a730:	af00      	add	r7, sp, #0

  /* Local variables */
  HAL_DMA_MuxRequestGeneratorConfigTypeDef pRequestGeneratorConfig = {0};
 800a732:	f107 031c 	add.w	r3, r7, #28
 800a736:	2200      	movs	r2, #0
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	605a      	str	r2, [r3, #4]
 800a73c:	609a      	str	r2, [r3, #8]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig = {0};
 800a73e:	f107 030c 	add.w	r3, r7, #12
 800a742:	2200      	movs	r2, #0
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	605a      	str	r2, [r3, #4]
 800a748:	609a      	str	r2, [r3, #8]
 800a74a:	60da      	str	r2, [r3, #12]

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a74c:	4b5a      	ldr	r3, [pc, #360]	; (800a8b8 <MX_DMA_Init+0x18c>)
 800a74e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a752:	4a59      	ldr	r2, [pc, #356]	; (800a8b8 <MX_DMA_Init+0x18c>)
 800a754:	f043 0302 	orr.w	r3, r3, #2
 800a758:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a75c:	4b56      	ldr	r3, [pc, #344]	; (800a8b8 <MX_DMA_Init+0x18c>)
 800a75e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a762:	f003 0302 	and.w	r3, r3, #2
 800a766:	60bb      	str	r3, [r7, #8]
 800a768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a76a:	4b53      	ldr	r3, [pc, #332]	; (800a8b8 <MX_DMA_Init+0x18c>)
 800a76c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a770:	4a51      	ldr	r2, [pc, #324]	; (800a8b8 <MX_DMA_Init+0x18c>)
 800a772:	f043 0301 	orr.w	r3, r3, #1
 800a776:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a77a:	4b4f      	ldr	r3, [pc, #316]	; (800a8b8 <MX_DMA_Init+0x18c>)
 800a77c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	607b      	str	r3, [r7, #4]
 800a786:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800a788:	4b4c      	ldr	r3, [pc, #304]	; (800a8bc <MX_DMA_Init+0x190>)
 800a78a:	4a4d      	ldr	r2, [pc, #308]	; (800a8c0 <MX_DMA_Init+0x194>)
 800a78c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 800a78e:	4b4b      	ldr	r3, [pc, #300]	; (800a8bc <MX_DMA_Init+0x190>)
 800a790:	2200      	movs	r2, #0
 800a792:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800a794:	4b49      	ldr	r3, [pc, #292]	; (800a8bc <MX_DMA_Init+0x190>)
 800a796:	2280      	movs	r2, #128	; 0x80
 800a798:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800a79a:	4b48      	ldr	r3, [pc, #288]	; (800a8bc <MX_DMA_Init+0x190>)
 800a79c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7a0:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800a7a2:	4b46      	ldr	r3, [pc, #280]	; (800a8bc <MX_DMA_Init+0x190>)
 800a7a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7a8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a7aa:	4b44      	ldr	r3, [pc, #272]	; (800a8bc <MX_DMA_Init+0x190>)
 800a7ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a7b0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a7b2:	4b42      	ldr	r3, [pc, #264]	; (800a8bc <MX_DMA_Init+0x190>)
 800a7b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a7b8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800a7ba:	4b40      	ldr	r3, [pc, #256]	; (800a8bc <MX_DMA_Init+0x190>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800a7c0:	4b3e      	ldr	r3, [pc, #248]	; (800a8bc <MX_DMA_Init+0x190>)
 800a7c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a7c6:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a7c8:	4b3c      	ldr	r3, [pc, #240]	; (800a8bc <MX_DMA_Init+0x190>)
 800a7ca:	2204      	movs	r2, #4
 800a7cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a7ce:	4b3b      	ldr	r3, [pc, #236]	; (800a8bc <MX_DMA_Init+0x190>)
 800a7d0:	2203      	movs	r2, #3
 800a7d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800a7d4:	4b39      	ldr	r3, [pc, #228]	; (800a8bc <MX_DMA_Init+0x190>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800a7da:	4b38      	ldr	r3, [pc, #224]	; (800a8bc <MX_DMA_Init+0x190>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800a7e0:	4836      	ldr	r0, [pc, #216]	; (800a8bc <MX_DMA_Init+0x190>)
 800a7e2:	f7f7 fbd1 	bl	8001f88 <HAL_DMA_Init>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <MX_DMA_Init+0xc4>
  {
    Error_Handler( );
 800a7ec:	f000 f90a 	bl	800aa04 <Error_Handler>
  }

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 800a7f0:	4b34      	ldr	r3, [pc, #208]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a7f2:	4a35      	ldr	r2, [pc, #212]	; (800a8c8 <MX_DMA_Init+0x19c>)
 800a7f4:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 800a7f6:	4b33      	ldr	r3, [pc, #204]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7fc:	4b31      	ldr	r3, [pc, #196]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a7fe:	2240      	movs	r2, #64	; 0x40
 800a800:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 800a802:	4b30      	ldr	r3, [pc, #192]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a804:	2200      	movs	r2, #0
 800a806:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 800a808:	4b2e      	ldr	r3, [pc, #184]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a80a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a80e:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a810:	4b2c      	ldr	r3, [pc, #176]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a812:	2200      	movs	r2, #0
 800a814:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a816:	4b2b      	ldr	r3, [pc, #172]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a818:	2200      	movs	r2, #0
 800a81a:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 800a81c:	4b29      	ldr	r3, [pc, #164]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a81e:	2200      	movs	r2, #0
 800a820:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_HIGH;
 800a822:	4b28      	ldr	r3, [pc, #160]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a824:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a828:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a82a:	4b26      	ldr	r3, [pc, #152]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 800a830:	4824      	ldr	r0, [pc, #144]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a832:	f7f7 fba9 	bl	8001f88 <HAL_DMA_Init>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <MX_DMA_Init+0x114>
  {
    Error_Handler( );
 800a83c:	f000 f8e2 	bl	800aa04 <Error_Handler>
  }

  /* Configure the DMAMUX request generator for the selected DMA stream */
  pRequestGeneratorConfig.SignalID = HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT;
 800a840:	2301      	movs	r3, #1
 800a842:	61fb      	str	r3, [r7, #28]
  pRequestGeneratorConfig.Polarity = HAL_DMAMUX_REQ_GEN_RISING;
 800a844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a848:	623b      	str	r3, [r7, #32]
  pRequestGeneratorConfig.RequestNumber = 1;
 800a84a:	2301      	movs	r3, #1
 800a84c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DMAEx_ConfigMuxRequestGenerator(&hdma_dma_generator0, &pRequestGeneratorConfig) != HAL_OK)
 800a84e:	f107 031c 	add.w	r3, r7, #28
 800a852:	4619      	mov	r1, r3
 800a854:	481b      	ldr	r0, [pc, #108]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a856:	f7f9 ff91 	bl	800477c <HAL_DMAEx_ConfigMuxRequestGenerator>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <MX_DMA_Init+0x138>
  {
    Error_Handler( );
 800a860:	f000 f8d0 	bl	800aa04 <Error_Handler>
  }

  /* Configure the DMAMUX synchronization parameters for the selected DMA stream */
  pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800a864:	2306      	movs	r3, #6
 800a866:	60fb      	str	r3, [r7, #12]
  pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 800a868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a86c:	613b      	str	r3, [r7, #16]
  pSyncConfig.SyncEnable = DISABLE;
 800a86e:	2300      	movs	r3, #0
 800a870:	753b      	strb	r3, [r7, #20]
  pSyncConfig.EventEnable = ENABLE;
 800a872:	2301      	movs	r3, #1
 800a874:	757b      	strb	r3, [r7, #21]
  pSyncConfig.RequestNumber = 1;
 800a876:	2301      	movs	r3, #1
 800a878:	61bb      	str	r3, [r7, #24]
  if (HAL_DMAEx_ConfigMuxSync(&hdma_dma_generator0, &pSyncConfig) != HAL_OK)
 800a87a:	f107 030c 	add.w	r3, r7, #12
 800a87e:	4619      	mov	r1, r3
 800a880:	4810      	ldr	r0, [pc, #64]	; (800a8c4 <MX_DMA_Init+0x198>)
 800a882:	f7f9 feb5 	bl	80045f0 <HAL_DMAEx_ConfigMuxSync>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <MX_DMA_Init+0x164>
  {
    Error_Handler( );
 800a88c:	f000 f8ba 	bl	800aa04 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a890:	2200      	movs	r2, #0
 800a892:	2100      	movs	r1, #0
 800a894:	200c      	movs	r0, #12
 800a896:	f7f7 fa4a 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a89a:	200c      	movs	r0, #12
 800a89c:	f7f7 fa61 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	2066      	movs	r0, #102	; 0x66
 800a8a6:	f7f7 fa42 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800a8aa:	2066      	movs	r0, #102	; 0x66
 800a8ac:	f7f7 fa59 	bl	8001d62 <HAL_NVIC_EnableIRQ>

}
 800a8b0:	bf00      	nop
 800a8b2:	3728      	adds	r7, #40	; 0x28
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	58024400 	.word	0x58024400
 800a8bc:	24000590 	.word	0x24000590
 800a8c0:	40020410 	.word	0x40020410
 800a8c4:	24000608 	.word	0x24000608
 800a8c8:	40020010 	.word	0x40020010

0800a8cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08a      	sub	sp, #40	; 0x28
 800a8d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8d2:	f107 0314 	add.w	r3, r7, #20
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	601a      	str	r2, [r3, #0]
 800a8da:	605a      	str	r2, [r3, #4]
 800a8dc:	609a      	str	r2, [r3, #8]
 800a8de:	60da      	str	r2, [r3, #12]
 800a8e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8e2:	4b2e      	ldr	r3, [pc, #184]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a8e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8e8:	4a2c      	ldr	r2, [pc, #176]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a8ea:	f043 0302 	orr.w	r3, r3, #2
 800a8ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a8f2:	4b2a      	ldr	r3, [pc, #168]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a8f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8f8:	f003 0302 	and.w	r3, r3, #2
 800a8fc:	613b      	str	r3, [r7, #16]
 800a8fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a900:	4b26      	ldr	r3, [pc, #152]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a906:	4a25      	ldr	r2, [pc, #148]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a908:	f043 0301 	orr.w	r3, r3, #1
 800a90c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a910:	4b22      	ldr	r3, [pc, #136]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a91e:	4b1f      	ldr	r3, [pc, #124]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a924:	4a1d      	ldr	r2, [pc, #116]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a926:	f043 0310 	orr.w	r3, r3, #16
 800a92a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a92e:	4b1b      	ldr	r3, [pc, #108]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a934:	f003 0310 	and.w	r3, r3, #16
 800a938:	60bb      	str	r3, [r7, #8]
 800a93a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a93c:	4b17      	ldr	r3, [pc, #92]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a93e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a942:	4a16      	ldr	r2, [pc, #88]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a944:	f043 0308 	orr.w	r3, r3, #8
 800a948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a94c:	4b13      	ldr	r3, [pc, #76]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a94e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a952:	f003 0308 	and.w	r3, r3, #8
 800a956:	607b      	str	r3, [r7, #4]
 800a958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a95a:	4b10      	ldr	r3, [pc, #64]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a95c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a960:	4a0e      	ldr	r2, [pc, #56]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a962:	f043 0320 	orr.w	r3, r3, #32
 800a966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a96a:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <MX_GPIO_Init+0xd0>)
 800a96c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a970:	f003 0320 	and.w	r3, r3, #32
 800a974:	603b      	str	r3, [r7, #0]
 800a976:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a978:	2301      	movs	r3, #1
 800a97a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a97c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a982:	2300      	movs	r3, #0
 800a984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a986:	f107 0314 	add.w	r3, r7, #20
 800a98a:	4619      	mov	r1, r3
 800a98c:	4804      	ldr	r0, [pc, #16]	; (800a9a0 <MX_GPIO_Init+0xd4>)
 800a98e:	f7fa f801 	bl	8004994 <HAL_GPIO_Init>

}
 800a992:	bf00      	nop
 800a994:	3728      	adds	r7, #40	; 0x28
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	58024400 	.word	0x58024400
 800a9a0:	58021000 	.word	0x58021000

0800a9a4 <CODEC_Init>:

/* USER CODE BEGIN 4 */

static void CODEC_Init(void) {
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b08c      	sub	sp, #48	; 0x30
 800a9a8:	af00      	add	r7, sp, #0

	// cancel up to 1khz
	int32_t ret = BSP_ERROR_NONE;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	// WM8994_Object_t hcodec;
	WM8994_Init_t hcodec_init;
	WM8994_IO_t	  hcodec_io;
	uint32_t id;

	hcodec_io.Address	 = CODEC_I2C;
 800a9ae:	2334      	movs	r3, #52	; 0x34
 800a9b0:	813b      	strh	r3, [r7, #8]
	hcodec_io.ReadReg	 = HAL_I2C_Mem_Read;
 800a9b2:	4b0e      	ldr	r3, [pc, #56]	; (800a9ec <CODEC_Init+0x48>)
 800a9b4:	613b      	str	r3, [r7, #16]
	hcodec_io.WriteReg	 = HAL_I2C_Mem_Write;
 800a9b6:	4b0e      	ldr	r3, [pc, #56]	; (800a9f0 <CODEC_Init+0x4c>)
 800a9b8:	60fb      	str	r3, [r7, #12]
	hcodec_io.Init		 = HAL_I2C_Init;
 800a9ba:	4b0e      	ldr	r3, [pc, #56]	; (800a9f4 <CODEC_Init+0x50>)
 800a9bc:	603b      	str	r3, [r7, #0]
	hcodec_io.DeInit	 = HAL_I2C_DeInit;
 800a9be:	4b0e      	ldr	r3, [pc, #56]	; (800a9f8 <CODEC_Init+0x54>)
 800a9c0:	607b      	str	r3, [r7, #4]
	hcodec_io.GetTick	 = HAL_GetTick;
 800a9c2:	4b0e      	ldr	r3, [pc, #56]	; (800a9fc <CODEC_Init+0x58>)
 800a9c4:	617b      	str	r3, [r7, #20]

	WM8994_RegisterBusIO(&hcodec, &hcodec_io);
 800a9c6:	463b      	mov	r3, r7
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	480d      	ldr	r0, [pc, #52]	; (800aa00 <CODEC_Init+0x5c>)
 800a9cc:	f7f6 fdac 	bl	8001528 <WM8994_RegisterBusIO>
	WM8994_Init(&hcodec, &hcodec_init);
 800a9d0:	f107 0318 	add.w	r3, r7, #24
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	480a      	ldr	r0, [pc, #40]	; (800aa00 <CODEC_Init+0x5c>)
 800a9d8:	f7f5 fc9a 	bl	8000310 <WM8994_Init>
	WM8994_Reset(&hcodec);
 800a9dc:	4808      	ldr	r0, [pc, #32]	; (800aa00 <CODEC_Init+0x5c>)
 800a9de:	f7f6 fd8b 	bl	80014f8 <WM8994_Reset>
//	WM8994_Play(&hcodec);
}
 800a9e2:	bf00      	nop
 800a9e4:	3730      	adds	r7, #48	; 0x30
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0800530d 	.word	0x0800530d
 800a9f0:	080050e5 	.word	0x080050e5
 800a9f4:	08004f65 	.word	0x08004f65
 800a9f8:	08005085 	.word	0x08005085
 800a9fc:	08001b19 	.word	0x08001b19
 800aa00:	2400091c 	.word	0x2400091c

0800aa04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800aa08:	b672      	cpsid	i
}
 800aa0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800aa0c:	e7fe      	b.n	800aa0c <Error_Handler+0x8>
	...

0800aa10 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800aa14:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <MX_PDM2PCM_Init+0x48>)
 800aa16:	2201      	movs	r2, #1
 800aa18:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800aa1a:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <MX_PDM2PCM_Init+0x48>)
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800aa20:	4b0d      	ldr	r3, [pc, #52]	; (800aa58 <MX_PDM2PCM_Init+0x48>)
 800aa22:	4a0e      	ldr	r2, [pc, #56]	; (800aa5c <MX_PDM2PCM_Init+0x4c>)
 800aa24:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800aa26:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <MX_PDM2PCM_Init+0x48>)
 800aa28:	2201      	movs	r2, #1
 800aa2a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <MX_PDM2PCM_Init+0x48>)
 800aa2e:	2201      	movs	r2, #1
 800aa30:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800aa32:	4809      	ldr	r0, [pc, #36]	; (800aa58 <MX_PDM2PCM_Init+0x48>)
 800aa34:	f002 f85a 	bl	800caec <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800aa38:	4b09      	ldr	r3, [pc, #36]	; (800aa60 <MX_PDM2PCM_Init+0x50>)
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800aa3e:	4b08      	ldr	r3, [pc, #32]	; (800aa60 <MX_PDM2PCM_Init+0x50>)
 800aa40:	2210      	movs	r2, #16
 800aa42:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800aa44:	4b06      	ldr	r3, [pc, #24]	; (800aa60 <MX_PDM2PCM_Init+0x50>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800aa4a:	4905      	ldr	r1, [pc, #20]	; (800aa60 <MX_PDM2PCM_Init+0x50>)
 800aa4c:	4802      	ldr	r0, [pc, #8]	; (800aa58 <MX_PDM2PCM_Init+0x48>)
 800aa4e:	f002 f91d 	bl	800cc8c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800aa52:	bf00      	nop
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	2400094c 	.word	0x2400094c
 800aa5c:	7d70a3d6 	.word	0x7d70a3d6
 800aa60:	24000944 	.word	0x24000944

0800aa64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa6a:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <HAL_MspInit+0x30>)
 800aa6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa70:	4a08      	ldr	r2, [pc, #32]	; (800aa94 <HAL_MspInit+0x30>)
 800aa72:	f043 0302 	orr.w	r3, r3, #2
 800aa76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800aa7a:	4b06      	ldr	r3, [pc, #24]	; (800aa94 <HAL_MspInit+0x30>)
 800aa7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	58024400 	.word	0x58024400

0800aa98 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a0b      	ldr	r2, [pc, #44]	; (800aad4 <HAL_CRC_MspInit+0x3c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d10e      	bne.n	800aac8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800aaaa:	4b0b      	ldr	r3, [pc, #44]	; (800aad8 <HAL_CRC_MspInit+0x40>)
 800aaac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aab0:	4a09      	ldr	r2, [pc, #36]	; (800aad8 <HAL_CRC_MspInit+0x40>)
 800aab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aaba:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <HAL_CRC_MspInit+0x40>)
 800aabc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aac4:	60fb      	str	r3, [r7, #12]
 800aac6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800aac8:	bf00      	nop
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	58024c00 	.word	0x58024c00
 800aad8:	58024400 	.word	0x58024400

0800aadc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b0b6      	sub	sp, #216	; 0xd8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aae4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]
 800aaec:	605a      	str	r2, [r3, #4]
 800aaee:	609a      	str	r2, [r3, #8]
 800aaf0:	60da      	str	r2, [r3, #12]
 800aaf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aaf4:	f107 0310 	add.w	r3, r7, #16
 800aaf8:	22b4      	movs	r2, #180	; 0xb4
 800aafa:	2100      	movs	r1, #0
 800aafc:	4618      	mov	r0, r3
 800aafe:	f002 fa03 	bl	800cf08 <memset>
  if(hi2c->Instance==I2C4)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a29      	ldr	r2, [pc, #164]	; (800abac <HAL_I2C_MspInit+0xd0>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d14a      	bne.n	800aba2 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800ab0c:	2310      	movs	r3, #16
 800ab0e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800ab10:	2300      	movs	r3, #0
 800ab12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ab16:	f107 0310 	add.w	r3, r7, #16
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fc fe3a 	bl	8007794 <HAL_RCCEx_PeriphCLKConfig>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800ab26:	f7ff ff6d 	bl	800aa04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab2a:	4b21      	ldr	r3, [pc, #132]	; (800abb0 <HAL_I2C_MspInit+0xd4>)
 800ab2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab30:	4a1f      	ldr	r2, [pc, #124]	; (800abb0 <HAL_I2C_MspInit+0xd4>)
 800ab32:	f043 0302 	orr.w	r3, r3, #2
 800ab36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ab3a:	4b1d      	ldr	r3, [pc, #116]	; (800abb0 <HAL_I2C_MspInit+0xd4>)
 800ab3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	60fb      	str	r3, [r7, #12]
 800ab46:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ab48:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ab50:	2312      	movs	r3, #18
 800ab52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab56:	2300      	movs	r3, #0
 800ab58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800ab62:	2306      	movs	r3, #6
 800ab64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4811      	ldr	r0, [pc, #68]	; (800abb4 <HAL_I2C_MspInit+0xd8>)
 800ab70:	f7f9 ff10 	bl	8004994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800ab74:	4b0e      	ldr	r3, [pc, #56]	; (800abb0 <HAL_I2C_MspInit+0xd4>)
 800ab76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab7a:	4a0d      	ldr	r2, [pc, #52]	; (800abb0 <HAL_I2C_MspInit+0xd4>)
 800ab7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab80:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ab84:	4b0a      	ldr	r3, [pc, #40]	; (800abb0 <HAL_I2C_MspInit+0xd4>)
 800ab86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab8e:	60bb      	str	r3, [r7, #8]
 800ab90:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800ab92:	2200      	movs	r2, #0
 800ab94:	2100      	movs	r1, #0
 800ab96:	2060      	movs	r0, #96	; 0x60
 800ab98:	f7f7 f8c9 	bl	8001d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800ab9c:	2060      	movs	r0, #96	; 0x60
 800ab9e:	f7f7 f8e0 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800aba2:	bf00      	nop
 800aba4:	37d8      	adds	r7, #216	; 0xd8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	58001c00 	.word	0x58001c00
 800abb0:	58024400 	.word	0x58024400
 800abb4:	58020400 	.word	0x58020400

0800abb8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a0d      	ldr	r2, [pc, #52]	; (800abfc <HAL_I2C_MspDeInit+0x44>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d114      	bne.n	800abf4 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800abca:	4b0d      	ldr	r3, [pc, #52]	; (800ac00 <HAL_I2C_MspDeInit+0x48>)
 800abcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800abd0:	4a0b      	ldr	r2, [pc, #44]	; (800ac00 <HAL_I2C_MspDeInit+0x48>)
 800abd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800abda:	f44f 7180 	mov.w	r1, #256	; 0x100
 800abde:	4809      	ldr	r0, [pc, #36]	; (800ac04 <HAL_I2C_MspDeInit+0x4c>)
 800abe0:	f7fa f880 	bl	8004ce4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800abe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800abe8:	4806      	ldr	r0, [pc, #24]	; (800ac04 <HAL_I2C_MspDeInit+0x4c>)
 800abea:	f7fa f87b 	bl	8004ce4 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 800abee:	2060      	movs	r0, #96	; 0x60
 800abf0:	f7f7 f8c5 	bl	8001d7e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800abf4:	bf00      	nop
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	58001c00 	.word	0x58001c00
 800ac00:	58024400 	.word	0x58024400
 800ac04:	58020400 	.word	0x58020400

0800ac08 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b0ba      	sub	sp, #232	; 0xe8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac10:	f107 0310 	add.w	r3, r7, #16
 800ac14:	22b4      	movs	r2, #180	; 0xb4
 800ac16:	2100      	movs	r1, #0
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f002 f975 	bl	800cf08 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4aaa      	ldr	r2, [pc, #680]	; (800aecc <HAL_SAI_MspInit+0x2c4>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	f040 80a5 	bne.w	800ad74 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800ac2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac2e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac34:	f107 0310 	add.w	r3, r7, #16
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fc fdab 	bl	8007794 <HAL_RCCEx_PeriphCLKConfig>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 800ac44:	f7ff fede 	bl	800aa04 <Error_Handler>
    }

      if (SAI1_client == 0)
 800ac48:	4ba1      	ldr	r3, [pc, #644]	; (800aed0 <HAL_SAI_MspInit+0x2c8>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10e      	bne.n	800ac6e <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800ac50:	4ba0      	ldr	r3, [pc, #640]	; (800aed4 <HAL_SAI_MspInit+0x2cc>)
 800ac52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac56:	4a9f      	ldr	r2, [pc, #636]	; (800aed4 <HAL_SAI_MspInit+0x2cc>)
 800ac58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ac5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ac60:	4b9c      	ldr	r3, [pc, #624]	; (800aed4 <HAL_SAI_MspInit+0x2cc>)
 800ac62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800ac6e:	4b98      	ldr	r3, [pc, #608]	; (800aed0 <HAL_SAI_MspInit+0x2c8>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3301      	adds	r3, #1
 800ac74:	4a96      	ldr	r2, [pc, #600]	; (800aed0 <HAL_SAI_MspInit+0x2c8>)
 800ac76:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ac78:	2308      	movs	r3, #8
 800ac7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac84:	2300      	movs	r3, #0
 800ac86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800ac90:	2306      	movs	r3, #6
 800ac92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ac96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	488e      	ldr	r0, [pc, #568]	; (800aed8 <HAL_SAI_MspInit+0x2d0>)
 800ac9e:	f7f9 fe79 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800aca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acaa:	2302      	movs	r3, #2
 800acac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acb0:	2300      	movs	r3, #0
 800acb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acb6:	2300      	movs	r3, #0
 800acb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800acbc:	2306      	movs	r3, #6
 800acbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800acc2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800acc6:	4619      	mov	r1, r3
 800acc8:	4884      	ldr	r0, [pc, #528]	; (800aedc <HAL_SAI_MspInit+0x2d4>)
 800acca:	f7f9 fe63 	bl	8004994 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800acce:	4b84      	ldr	r3, [pc, #528]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800acd0:	4a84      	ldr	r2, [pc, #528]	; (800aee4 <HAL_SAI_MspInit+0x2dc>)
 800acd2:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800acd4:	4b82      	ldr	r3, [pc, #520]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800acd6:	2258      	movs	r2, #88	; 0x58
 800acd8:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acda:	4b81      	ldr	r3, [pc, #516]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800acdc:	2240      	movs	r2, #64	; 0x40
 800acde:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800ace0:	4b7f      	ldr	r3, [pc, #508]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800ace6:	4b7e      	ldr	r3, [pc, #504]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ace8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acec:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800acee:	4b7c      	ldr	r3, [pc, #496]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800acf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800acf4:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800acf6:	4b7a      	ldr	r3, [pc, #488]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800acf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800acfc:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 800acfe:	4b78      	ldr	r3, [pc, #480]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800ad04:	4b76      	ldr	r3, [pc, #472]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ad06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ad0a:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ad0c:	4b74      	ldr	r3, [pc, #464]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800ad12:	4873      	ldr	r0, [pc, #460]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ad14:	f7f7 f938 	bl	8001f88 <HAL_DMA_Init>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <HAL_SAI_MspInit+0x11a>
    {
      Error_Handler();
 800ad1e:	f7ff fe71 	bl	800aa04 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800ad22:	2306      	movs	r3, #6
 800ad24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 800ad28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800ad30:	2300      	movs	r3, #0
 800ad32:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800ad36:	2301      	movs	r3, #1
 800ad38:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800ad42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ad46:	4619      	mov	r1, r3
 800ad48:	4865      	ldr	r0, [pc, #404]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ad4a:	f7f9 fc51 	bl	80045f0 <HAL_DMAEx_ConfigMuxSync>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d001      	beq.n	800ad58 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 800ad54:	f7ff fe56 	bl	800aa04 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a61      	ldr	r2, [pc, #388]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ad5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ad60:	4a5f      	ldr	r2, [pc, #380]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a5d      	ldr	r2, [pc, #372]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ad6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800ad6e:	4a5c      	ldr	r2, [pc, #368]	; (800aee0 <HAL_SAI_MspInit+0x2d8>)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a5b      	ldr	r2, [pc, #364]	; (800aee8 <HAL_SAI_MspInit+0x2e0>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	f040 80a1 	bne.w	800aec2 <HAL_SAI_MspInit+0x2ba>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800ad80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad8c:	f107 0310 	add.w	r3, r7, #16
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fc fcff 	bl	8007794 <HAL_RCCEx_PeriphCLKConfig>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 800ad9c:	f7ff fe32 	bl	800aa04 <Error_Handler>
    }

    if (SAI4_client == 0)
 800ada0:	4b52      	ldr	r3, [pc, #328]	; (800aeec <HAL_SAI_MspInit+0x2e4>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10e      	bne.n	800adc6 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800ada8:	4b4a      	ldr	r3, [pc, #296]	; (800aed4 <HAL_SAI_MspInit+0x2cc>)
 800adaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adae:	4a49      	ldr	r2, [pc, #292]	; (800aed4 <HAL_SAI_MspInit+0x2cc>)
 800adb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800adb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800adb8:	4b46      	ldr	r3, [pc, #280]	; (800aed4 <HAL_SAI_MspInit+0x2cc>)
 800adba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adc2:	60bb      	str	r3, [r7, #8]
 800adc4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 800adc6:	4b49      	ldr	r3, [pc, #292]	; (800aeec <HAL_SAI_MspInit+0x2e4>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3301      	adds	r3, #1
 800adcc:	4a47      	ldr	r2, [pc, #284]	; (800aeec <HAL_SAI_MspInit+0x2e4>)
 800adce:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800add0:	2330      	movs	r3, #48	; 0x30
 800add2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800add6:	2302      	movs	r3, #2
 800add8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800addc:	2300      	movs	r3, #0
 800adde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ade2:	2300      	movs	r3, #0
 800ade4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800ade8:	230a      	movs	r3, #10
 800adea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800adee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800adf2:	4619      	mov	r1, r3
 800adf4:	4838      	ldr	r0, [pc, #224]	; (800aed8 <HAL_SAI_MspInit+0x2d0>)
 800adf6:	f7f9 fdcd 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800adfa:	2340      	movs	r3, #64	; 0x40
 800adfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae00:	2302      	movs	r3, #2
 800ae02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800ae12:	2301      	movs	r3, #1
 800ae14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	4834      	ldr	r0, [pc, #208]	; (800aef0 <HAL_SAI_MspInit+0x2e8>)
 800ae20:	f7f9 fdb8 	bl	8004994 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 800ae24:	4b33      	ldr	r3, [pc, #204]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae26:	4a34      	ldr	r2, [pc, #208]	; (800aef8 <HAL_SAI_MspInit+0x2f0>)
 800ae28:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800ae2a:	4b32      	ldr	r3, [pc, #200]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae2c:	220f      	movs	r2, #15
 800ae2e:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae30:	4b30      	ldr	r3, [pc, #192]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae36:	4b2f      	ldr	r3, [pc, #188]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800ae3c:	4b2d      	ldr	r3, [pc, #180]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae42:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae44:	4b2b      	ldr	r3, [pc, #172]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ae4a:	4b2a      	ldr	r3, [pc, #168]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae50:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800ae52:	4b28      	ldr	r3, [pc, #160]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae58:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ae5a:	4b26      	ldr	r3, [pc, #152]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ae60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800ae62:	4824      	ldr	r0, [pc, #144]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae64:	f7f7 f890 	bl	8001f88 <HAL_DMA_Init>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <HAL_SAI_MspInit+0x26a>
    {
      Error_Handler();
 800ae6e:	f7ff fdc9 	bl	800aa04 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800ae72:	230e      	movs	r3, #14
 800ae74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 800ae90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ae94:	4619      	mov	r1, r3
 800ae96:	4817      	ldr	r0, [pc, #92]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800ae98:	f7f9 fbaa 	bl	80045f0 <HAL_DMAEx_ConfigMuxSync>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <HAL_SAI_MspInit+0x29e>
    {
      Error_Handler();
 800aea2:	f7ff fdaf 	bl	800aa04 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a12      	ldr	r2, [pc, #72]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800aeaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800aeae:	4a11      	ldr	r2, [pc, #68]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a0f      	ldr	r2, [pc, #60]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800aeb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800aebc:	4a0d      	ldr	r2, [pc, #52]	; (800aef4 <HAL_SAI_MspInit+0x2ec>)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800aec2:	bf00      	nop
 800aec4:	37e8      	adds	r7, #232	; 0xe8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	40015824 	.word	0x40015824
 800aed0:	24000528 	.word	0x24000528
 800aed4:	58024400 	.word	0x58024400
 800aed8:	58021000 	.word	0x58021000
 800aedc:	58021400 	.word	0x58021400
 800aee0:	240008a4 	.word	0x240008a4
 800aee4:	40020028 	.word	0x40020028
 800aee8:	58005404 	.word	0x58005404
 800aeec:	2400052c 	.word	0x2400052c
 800aef0:	58020c00 	.word	0x58020c00
 800aef4:	240007e4 	.word	0x240007e4
 800aef8:	5802541c 	.word	0x5802541c

0800aefc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800af00:	e7fe      	b.n	800af00 <NMI_Handler+0x4>

0800af02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af02:	b480      	push	{r7}
 800af04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800af06:	e7fe      	b.n	800af06 <HardFault_Handler+0x4>

0800af08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af08:	b480      	push	{r7}
 800af0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800af0c:	e7fe      	b.n	800af0c <MemManage_Handler+0x4>

0800af0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af0e:	b480      	push	{r7}
 800af10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800af12:	e7fe      	b.n	800af12 <BusFault_Handler+0x4>

0800af14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af14:	b480      	push	{r7}
 800af16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800af18:	e7fe      	b.n	800af18 <UsageFault_Handler+0x4>

0800af1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800af1a:	b480      	push	{r7}
 800af1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800af1e:	bf00      	nop
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800af2c:	bf00      	nop
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800af36:	b480      	push	{r7}
 800af38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800af3a:	bf00      	nop
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800af48:	f7f6 fdd2 	bl	8001af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800af4c:	bf00      	nop
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BSP_LED_On(LED1);
 800af54:	2000      	movs	r0, #0
 800af56:	f7f6 fcc9 	bl	80018ec <BSP_LED_On>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800af5a:	2001      	movs	r0, #1
 800af5c:	f7f9 ffdd 	bl	8004f1a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 800af60:	bf00      	nop
 800af62:	bd80      	pop	{r7, pc}

0800af64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800af68:	4802      	ldr	r0, [pc, #8]	; (800af74 <DMA1_Stream1_IRQHandler+0x10>)
 800af6a:	f7f8 f815 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800af6e:	bf00      	nop
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	240008a4 	.word	0x240008a4

0800af78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800af7c:	4803      	ldr	r0, [pc, #12]	; (800af8c <DMA2_Stream0_IRQHandler+0x14>)
 800af7e:	f7f8 f80b 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  BSP_LED_On(LED1);
 800af82:	2000      	movs	r0, #0
 800af84:	f7f6 fcb2 	bl	80018ec <BSP_LED_On>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800af88:	bf00      	nop
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	24000590 	.word	0x24000590

0800af90 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800af94:	4802      	ldr	r0, [pc, #8]	; (800afa0 <I2C4_ER_IRQHandler+0x10>)
 800af96:	f7fa fad3 	bl	8005540 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800af9a:	bf00      	nop
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	24000534 	.word	0x24000534

0800afa4 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 800afa8:	4802      	ldr	r0, [pc, #8]	; (800afb4 <DMAMUX1_OVR_IRQHandler+0x10>)
 800afaa:	f7f9 fca1 	bl	80048f0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800afae:	bf00      	nop
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	240008a4 	.word	0x240008a4

0800afb8 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 800afbc:	4802      	ldr	r0, [pc, #8]	; (800afc8 <DMAMUX2_OVR_IRQHandler+0x10>)
 800afbe:	f7f9 fc97 	bl	80048f0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */
  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800afc2:	bf00      	nop
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	240007e4 	.word	0x240007e4

0800afcc <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 800afd0:	4803      	ldr	r0, [pc, #12]	; (800afe0 <BDMA_Channel1_IRQHandler+0x14>)
 800afd2:	f7f7 ffe1 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */
  BSP_LED_On(LED2);
 800afd6:	2001      	movs	r0, #1
 800afd8:	f7f6 fc88 	bl	80018ec <BSP_LED_On>
  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 800afdc:	bf00      	nop
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	240007e4 	.word	0x240007e4

0800afe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800afe4:	b480      	push	{r7}
 800afe6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800afe8:	4b32      	ldr	r3, [pc, #200]	; (800b0b4 <SystemInit+0xd0>)
 800afea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afee:	4a31      	ldr	r2, [pc, #196]	; (800b0b4 <SystemInit+0xd0>)
 800aff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800aff8:	4b2f      	ldr	r3, [pc, #188]	; (800b0b8 <SystemInit+0xd4>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 030f 	and.w	r3, r3, #15
 800b000:	2b06      	cmp	r3, #6
 800b002:	d807      	bhi.n	800b014 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b004:	4b2c      	ldr	r3, [pc, #176]	; (800b0b8 <SystemInit+0xd4>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f023 030f 	bic.w	r3, r3, #15
 800b00c:	4a2a      	ldr	r2, [pc, #168]	; (800b0b8 <SystemInit+0xd4>)
 800b00e:	f043 0307 	orr.w	r3, r3, #7
 800b012:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b014:	4b29      	ldr	r3, [pc, #164]	; (800b0bc <SystemInit+0xd8>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a28      	ldr	r2, [pc, #160]	; (800b0bc <SystemInit+0xd8>)
 800b01a:	f043 0301 	orr.w	r3, r3, #1
 800b01e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b020:	4b26      	ldr	r3, [pc, #152]	; (800b0bc <SystemInit+0xd8>)
 800b022:	2200      	movs	r2, #0
 800b024:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b026:	4b25      	ldr	r3, [pc, #148]	; (800b0bc <SystemInit+0xd8>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	4924      	ldr	r1, [pc, #144]	; (800b0bc <SystemInit+0xd8>)
 800b02c:	4b24      	ldr	r3, [pc, #144]	; (800b0c0 <SystemInit+0xdc>)
 800b02e:	4013      	ands	r3, r2
 800b030:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b032:	4b21      	ldr	r3, [pc, #132]	; (800b0b8 <SystemInit+0xd4>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0308 	and.w	r3, r3, #8
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d007      	beq.n	800b04e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b03e:	4b1e      	ldr	r3, [pc, #120]	; (800b0b8 <SystemInit+0xd4>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f023 030f 	bic.w	r3, r3, #15
 800b046:	4a1c      	ldr	r2, [pc, #112]	; (800b0b8 <SystemInit+0xd4>)
 800b048:	f043 0307 	orr.w	r3, r3, #7
 800b04c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b04e:	4b1b      	ldr	r3, [pc, #108]	; (800b0bc <SystemInit+0xd8>)
 800b050:	2200      	movs	r2, #0
 800b052:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b054:	4b19      	ldr	r3, [pc, #100]	; (800b0bc <SystemInit+0xd8>)
 800b056:	2200      	movs	r2, #0
 800b058:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b05a:	4b18      	ldr	r3, [pc, #96]	; (800b0bc <SystemInit+0xd8>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b060:	4b16      	ldr	r3, [pc, #88]	; (800b0bc <SystemInit+0xd8>)
 800b062:	4a18      	ldr	r2, [pc, #96]	; (800b0c4 <SystemInit+0xe0>)
 800b064:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b066:	4b15      	ldr	r3, [pc, #84]	; (800b0bc <SystemInit+0xd8>)
 800b068:	4a17      	ldr	r2, [pc, #92]	; (800b0c8 <SystemInit+0xe4>)
 800b06a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b06c:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <SystemInit+0xd8>)
 800b06e:	4a17      	ldr	r2, [pc, #92]	; (800b0cc <SystemInit+0xe8>)
 800b070:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b072:	4b12      	ldr	r3, [pc, #72]	; (800b0bc <SystemInit+0xd8>)
 800b074:	2200      	movs	r2, #0
 800b076:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b078:	4b10      	ldr	r3, [pc, #64]	; (800b0bc <SystemInit+0xd8>)
 800b07a:	4a14      	ldr	r2, [pc, #80]	; (800b0cc <SystemInit+0xe8>)
 800b07c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b07e:	4b0f      	ldr	r3, [pc, #60]	; (800b0bc <SystemInit+0xd8>)
 800b080:	2200      	movs	r2, #0
 800b082:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b084:	4b0d      	ldr	r3, [pc, #52]	; (800b0bc <SystemInit+0xd8>)
 800b086:	4a11      	ldr	r2, [pc, #68]	; (800b0cc <SystemInit+0xe8>)
 800b088:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b08a:	4b0c      	ldr	r3, [pc, #48]	; (800b0bc <SystemInit+0xd8>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b090:	4b0a      	ldr	r3, [pc, #40]	; (800b0bc <SystemInit+0xd8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a09      	ldr	r2, [pc, #36]	; (800b0bc <SystemInit+0xd8>)
 800b096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b09a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b09c:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <SystemInit+0xd8>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b0a2:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <SystemInit+0xec>)
 800b0a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b0a8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b0aa:	bf00      	nop
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	e000ed00 	.word	0xe000ed00
 800b0b8:	52002000 	.word	0x52002000
 800b0bc:	58024400 	.word	0x58024400
 800b0c0:	eaf6ed7f 	.word	0xeaf6ed7f
 800b0c4:	02020200 	.word	0x02020200
 800b0c8:	01ff0000 	.word	0x01ff0000
 800b0cc:	01010280 	.word	0x01010280
 800b0d0:	52004000 	.word	0x52004000

0800b0d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800b0d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b10c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b0d8:	f7ff ff84 	bl	800afe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b0dc:	480c      	ldr	r0, [pc, #48]	; (800b110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b0de:	490d      	ldr	r1, [pc, #52]	; (800b114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b0e0:	4a0d      	ldr	r2, [pc, #52]	; (800b118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b0e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b0e4:	e002      	b.n	800b0ec <LoopCopyDataInit>

0800b0e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b0e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b0e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b0ea:	3304      	adds	r3, #4

0800b0ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b0ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b0ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b0f0:	d3f9      	bcc.n	800b0e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b0f2:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b0f4:	4c0a      	ldr	r4, [pc, #40]	; (800b120 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b0f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b0f8:	e001      	b.n	800b0fe <LoopFillZerobss>

0800b0fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b0fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b0fc:	3204      	adds	r2, #4

0800b0fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b0fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b100:	d3fb      	bcc.n	800b0fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b102:	f001 fedd 	bl	800cec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b106:	f7ff f8c5 	bl	800a294 <main>
  bx  lr
 800b10a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b10c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800b110:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800b114:	24000488 	.word	0x24000488
  ldr r2, =_sidata
 800b118:	0800d588 	.word	0x0800d588
  ldr r2, =_sbss
 800b11c:	24000488 	.word	0x24000488
  ldr r4, =_ebss
 800b120:	24000998 	.word	0x24000998

0800b124 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b124:	e7fe      	b.n	800b124 <ADC3_IRQHandler>
	...

0800b128 <D16_GENERIC>:
 800b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	b089      	sub	sp, #36	; 0x24
 800b12e:	6993      	ldr	r3, [r2, #24]
 800b130:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b132:	9103      	str	r1, [sp, #12]
 800b134:	9307      	str	r3, [sp, #28]
 800b136:	69d3      	ldr	r3, [r2, #28]
 800b138:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800b13c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800b140:	9106      	str	r1, [sp, #24]
 800b142:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800b146:	2d00      	cmp	r5, #0
 800b148:	d063      	beq.n	800b212 <D16_GENERIC+0xea>
 800b14a:	f001 0520 	and.w	r5, r1, #32
 800b14e:	f001 0110 	and.w	r1, r1, #16
 800b152:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800b234 <D16_GENERIC+0x10c>
 800b156:	46c1      	mov	r9, r8
 800b158:	9104      	str	r1, [sp, #16]
 800b15a:	2100      	movs	r1, #0
 800b15c:	9505      	str	r5, [sp, #20]
 800b15e:	e04d      	b.n	800b1fc <D16_GENERIC+0xd4>
 800b160:	5d87      	ldrb	r7, [r0, r6]
 800b162:	7805      	ldrb	r5, [r0, #0]
 800b164:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800b168:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800b16c:	b2fe      	uxtb	r6, r7
 800b16e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800b172:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800b176:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800b17a:	441d      	add	r5, r3
 800b17c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800b180:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b184:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800b188:	0a9b      	lsrs	r3, r3, #10
 800b18a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800b18e:	4d27      	ldr	r5, [pc, #156]	; (800b22c <D16_GENERIC+0x104>)
 800b190:	fb26 c505 	smlad	r5, r6, r5, ip
 800b194:	4f26      	ldr	r7, [pc, #152]	; (800b230 <D16_GENERIC+0x108>)
 800b196:	fb26 fc07 	smuad	ip, r6, r7
 800b19a:	9e04      	ldr	r6, [sp, #16]
 800b19c:	f101 0801 	add.w	r8, r1, #1
 800b1a0:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800b1a4:	b1ae      	cbz	r6, 800b1d2 <D16_GENERIC+0xaa>
 800b1a6:	442c      	add	r4, r5
 800b1a8:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800b1ac:	eba4 040a 	sub.w	r4, r4, sl
 800b1b0:	46aa      	mov	sl, r5
 800b1b2:	17e7      	asrs	r7, r4, #31
 800b1b4:	fba4 450b 	umull	r4, r5, r4, fp
 800b1b8:	e9cd 4500 	strd	r4, r5, [sp]
 800b1bc:	fb0b 5407 	mla	r4, fp, r7, r5
 800b1c0:	9401      	str	r4, [sp, #4]
 800b1c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b1c6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b1ca:	f145 0500 	adc.w	r5, r5, #0
 800b1ce:	006c      	lsls	r4, r5, #1
 800b1d0:	4625      	mov	r5, r4
 800b1d2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800b1d6:	042d      	lsls	r5, r5, #16
 800b1d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b1dc:	2700      	movs	r7, #0
 800b1de:	fb01 fb0b 	mul.w	fp, r1, fp
 800b1e2:	fa1f f188 	uxth.w	r1, r8
 800b1e6:	fbc9 6705 	smlal	r6, r7, r9, r5
 800b1ea:	9e03      	ldr	r6, [sp, #12]
 800b1ec:	10bd      	asrs	r5, r7, #2
 800b1ee:	f305 050f 	ssat	r5, #16, r5
 800b1f2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b1f6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b1f8:	428d      	cmp	r5, r1
 800b1fa:	d90a      	bls.n	800b212 <D16_GENERIC+0xea>
 800b1fc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b1fe:	2d01      	cmp	r5, #1
 800b200:	b2ee      	uxtb	r6, r5
 800b202:	d1ad      	bne.n	800b160 <D16_GENERIC+0x38>
 800b204:	9d05      	ldr	r5, [sp, #20]
 800b206:	f850 7b02 	ldr.w	r7, [r0], #2
 800b20a:	2d00      	cmp	r5, #0
 800b20c:	d0ae      	beq.n	800b16c <D16_GENERIC+0x44>
 800b20e:	ba7f      	rev16	r7, r7
 800b210:	e7ac      	b.n	800b16c <D16_GENERIC+0x44>
 800b212:	2000      	movs	r0, #0
 800b214:	9906      	ldr	r1, [sp, #24]
 800b216:	61d3      	str	r3, [r2, #28]
 800b218:	9b07      	ldr	r3, [sp, #28]
 800b21a:	f8c2 c008 	str.w	ip, [r2, #8]
 800b21e:	60d1      	str	r1, [r2, #12]
 800b220:	6193      	str	r3, [r2, #24]
 800b222:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800b226:	b009      	add	sp, #36	; 0x24
 800b228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22c:	00030001 	.word	0x00030001
 800b230:	00010003 	.word	0x00010003
 800b234:	24000000 	.word	0x24000000

0800b238 <D24_GENERIC>:
 800b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800b240:	b089      	sub	sp, #36	; 0x24
 800b242:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b244:	9303      	str	r3, [sp, #12]
 800b246:	6993      	ldr	r3, [r2, #24]
 800b248:	9104      	str	r1, [sp, #16]
 800b24a:	9307      	str	r3, [sp, #28]
 800b24c:	69d1      	ldr	r1, [r2, #28]
 800b24e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800b252:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800b256:	2e00      	cmp	r6, #0
 800b258:	f000 8088 	beq.w	800b36c <D24_GENERIC+0x134>
 800b25c:	f005 0620 	and.w	r6, r5, #32
 800b260:	f005 0510 	and.w	r5, r5, #16
 800b264:	f04f 0c00 	mov.w	ip, #0
 800b268:	f8df e140 	ldr.w	lr, [pc, #320]	; 800b3ac <D24_GENERIC+0x174>
 800b26c:	9606      	str	r6, [sp, #24]
 800b26e:	9505      	str	r5, [sp, #20]
 800b270:	e064      	b.n	800b33c <D24_GENERIC+0x104>
 800b272:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800b276:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800b27a:	f810 b007 	ldrb.w	fp, [r0, r7]
 800b27e:	042d      	lsls	r5, r5, #16
 800b280:	19f0      	adds	r0, r6, r7
 800b282:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800b286:	44a9      	add	r9, r5
 800b288:	fa5f f689 	uxtb.w	r6, r9
 800b28c:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800b290:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800b294:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800b298:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800b29c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800b2a0:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800b2a4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800b2a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b2ac:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800b2b0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b2b4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b2b8:	4d3a      	ldr	r5, [pc, #232]	; (800b3a4 <D24_GENERIC+0x16c>)
 800b2ba:	fb26 8705 	smlad	r7, r6, r5, r8
 800b2be:	4d3a      	ldr	r5, [pc, #232]	; (800b3a8 <D24_GENERIC+0x170>)
 800b2c0:	fb26 3805 	smlad	r8, r6, r5, r3
 800b2c4:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800b2c8:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800b2d2:	fb26 f603 	smuad	r6, r6, r3
 800b2d6:	eb0c 0903 	add.w	r9, ip, r3
 800b2da:	eb0b 0306 	add.w	r3, fp, r6
 800b2de:	9e05      	ldr	r6, [sp, #20]
 800b2e0:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800b2e4:	b1ae      	cbz	r6, 800b312 <D24_GENERIC+0xda>
 800b2e6:	442c      	add	r4, r5
 800b2e8:	9e03      	ldr	r6, [sp, #12]
 800b2ea:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800b2ee:	1ba4      	subs	r4, r4, r6
 800b2f0:	9503      	str	r5, [sp, #12]
 800b2f2:	17e7      	asrs	r7, r4, #31
 800b2f4:	fba4 450b 	umull	r4, r5, r4, fp
 800b2f8:	e9cd 4500 	strd	r4, r5, [sp]
 800b2fc:	fb0b 5407 	mla	r4, fp, r7, r5
 800b300:	9401      	str	r4, [sp, #4]
 800b302:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b306:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b30a:	f145 0500 	adc.w	r5, r5, #0
 800b30e:	006c      	lsls	r4, r5, #1
 800b310:	4625      	mov	r5, r4
 800b312:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800b316:	03ad      	lsls	r5, r5, #14
 800b318:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b31c:	2700      	movs	r7, #0
 800b31e:	fb0c fb0b 	mul.w	fp, ip, fp
 800b322:	fa1f fc89 	uxth.w	ip, r9
 800b326:	fbca 6705 	smlal	r6, r7, sl, r5
 800b32a:	9e04      	ldr	r6, [sp, #16]
 800b32c:	10bd      	asrs	r5, r7, #2
 800b32e:	f305 050f 	ssat	r5, #16, r5
 800b332:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b336:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b338:	4565      	cmp	r5, ip
 800b33a:	d917      	bls.n	800b36c <D24_GENERIC+0x134>
 800b33c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b33e:	f890 9000 	ldrb.w	r9, [r0]
 800b342:	b2ef      	uxtb	r7, r5
 800b344:	2d01      	cmp	r5, #1
 800b346:	b23e      	sxth	r6, r7
 800b348:	d193      	bne.n	800b272 <D24_GENERIC+0x3a>
 800b34a:	9d06      	ldr	r5, [sp, #24]
 800b34c:	b1dd      	cbz	r5, 800b386 <D24_GENERIC+0x14e>
 800b34e:	78c7      	ldrb	r7, [r0, #3]
 800b350:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800b354:	f01c 0f01 	tst.w	ip, #1
 800b358:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800b35c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800b360:	d11a      	bne.n	800b398 <D24_GENERIC+0x160>
 800b362:	f890 9001 	ldrb.w	r9, [r0, #1]
 800b366:	3002      	adds	r0, #2
 800b368:	44b1      	add	r9, r6
 800b36a:	e78d      	b.n	800b288 <D24_GENERIC+0x50>
 800b36c:	6093      	str	r3, [r2, #8]
 800b36e:	2000      	movs	r0, #0
 800b370:	9b03      	ldr	r3, [sp, #12]
 800b372:	f8c2 800c 	str.w	r8, [r2, #12]
 800b376:	6153      	str	r3, [r2, #20]
 800b378:	9b07      	ldr	r3, [sp, #28]
 800b37a:	61d1      	str	r1, [r2, #28]
 800b37c:	6114      	str	r4, [r2, #16]
 800b37e:	6193      	str	r3, [r2, #24]
 800b380:	b009      	add	sp, #36	; 0x24
 800b382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b386:	7845      	ldrb	r5, [r0, #1]
 800b388:	3003      	adds	r0, #3
 800b38a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800b38e:	022d      	lsls	r5, r5, #8
 800b390:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800b394:	44a9      	add	r9, r5
 800b396:	e777      	b.n	800b288 <D24_GENERIC+0x50>
 800b398:	7886      	ldrb	r6, [r0, #2]
 800b39a:	3004      	adds	r0, #4
 800b39c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800b3a0:	44a9      	add	r9, r5
 800b3a2:	e771      	b.n	800b288 <D24_GENERIC+0x50>
 800b3a4:	00030001 	.word	0x00030001
 800b3a8:	00060007 	.word	0x00060007
 800b3ac:	24000000 	.word	0x24000000

0800b3b0 <D32_GENERIC>:
 800b3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b4:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800b3b8:	b089      	sub	sp, #36	; 0x24
 800b3ba:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b3bc:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b3be:	9302      	str	r3, [sp, #8]
 800b3c0:	6993      	ldr	r3, [r2, #24]
 800b3c2:	9104      	str	r1, [sp, #16]
 800b3c4:	9307      	str	r3, [sp, #28]
 800b3c6:	9503      	str	r5, [sp, #12]
 800b3c8:	69d1      	ldr	r1, [r2, #28]
 800b3ca:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b3cc:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800b3d0:	2e00      	cmp	r6, #0
 800b3d2:	f000 8097 	beq.w	800b504 <D32_GENERIC+0x154>
 800b3d6:	f005 0620 	and.w	r6, r5, #32
 800b3da:	f005 0510 	and.w	r5, r5, #16
 800b3de:	f04f 0e00 	mov.w	lr, #0
 800b3e2:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b534 <D32_GENERIC+0x184>
 800b3e6:	9606      	str	r6, [sp, #24]
 800b3e8:	9505      	str	r5, [sp, #20]
 800b3ea:	e079      	b.n	800b4e0 <D32_GENERIC+0x130>
 800b3ec:	783d      	ldrb	r5, [r7, #0]
 800b3ee:	f810 b009 	ldrb.w	fp, [r0, r9]
 800b3f2:	042d      	lsls	r5, r5, #16
 800b3f4:	f810 a006 	ldrb.w	sl, [r0, r6]
 800b3f8:	f890 9000 	ldrb.w	r9, [r0]
 800b3fc:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800b400:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800b404:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800b408:	44a9      	add	r9, r5
 800b40a:	fa5f f789 	uxtb.w	r7, r9
 800b40e:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800b412:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800b416:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800b41a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b41e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800b422:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800b426:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800b42a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800b42e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b432:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800b436:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800b43a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b43e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800b442:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b446:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800b44a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800b44e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b452:	4d34      	ldr	r5, [pc, #208]	; (800b524 <D32_GENERIC+0x174>)
 800b454:	fb29 8805 	smlad	r8, r9, r5, r8
 800b458:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800b45c:	fb26 8705 	smlad	r7, r6, r5, r8
 800b460:	4d31      	ldr	r5, [pc, #196]	; (800b528 <D32_GENERIC+0x178>)
 800b462:	fb29 3305 	smlad	r3, r9, r5, r3
 800b466:	4d31      	ldr	r5, [pc, #196]	; (800b52c <D32_GENERIC+0x17c>)
 800b468:	fb26 3805 	smlad	r8, r6, r5, r3
 800b46c:	2301      	movs	r3, #1
 800b46e:	fb29 f903 	smuad	r9, r9, r3
 800b472:	4b2f      	ldr	r3, [pc, #188]	; (800b530 <D32_GENERIC+0x180>)
 800b474:	fb26 9303 	smlad	r3, r6, r3, r9
 800b478:	9e05      	ldr	r6, [sp, #20]
 800b47a:	f10e 0901 	add.w	r9, lr, #1
 800b47e:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800b482:	b1ae      	cbz	r6, 800b4b0 <D32_GENERIC+0x100>
 800b484:	442c      	add	r4, r5
 800b486:	9e02      	ldr	r6, [sp, #8]
 800b488:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b48c:	1ba4      	subs	r4, r4, r6
 800b48e:	9502      	str	r5, [sp, #8]
 800b490:	17e7      	asrs	r7, r4, #31
 800b492:	fba4 450a 	umull	r4, r5, r4, sl
 800b496:	e9cd 4500 	strd	r4, r5, [sp]
 800b49a:	fb0a 5407 	mla	r4, sl, r7, r5
 800b49e:	9401      	str	r4, [sp, #4]
 800b4a0:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b4a4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b4a8:	f145 0500 	adc.w	r5, r5, #0
 800b4ac:	006c      	lsls	r4, r5, #1
 800b4ae:	4625      	mov	r5, r4
 800b4b0:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800b4b4:	036d      	lsls	r5, r5, #13
 800b4b6:	9f03      	ldr	r7, [sp, #12]
 800b4b8:	fb0e fb0a 	mul.w	fp, lr, sl
 800b4bc:	fa1f fe89 	uxth.w	lr, r9
 800b4c0:	f04f 0a00 	mov.w	sl, #0
 800b4c4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b4c8:	9e04      	ldr	r6, [sp, #16]
 800b4ca:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800b4ce:	4657      	mov	r7, sl
 800b4d0:	10bd      	asrs	r5, r7, #2
 800b4d2:	f305 050f 	ssat	r5, #16, r5
 800b4d6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b4da:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b4dc:	4575      	cmp	r5, lr
 800b4de:	d911      	bls.n	800b504 <D32_GENERIC+0x154>
 800b4e0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b4e2:	b2ee      	uxtb	r6, r5
 800b4e4:	2d01      	cmp	r5, #1
 800b4e6:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800b4ea:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800b4ee:	f47f af7d 	bne.w	800b3ec <D32_GENERIC+0x3c>
 800b4f2:	1d05      	adds	r5, r0, #4
 800b4f4:	f8d0 9000 	ldr.w	r9, [r0]
 800b4f8:	9806      	ldr	r0, [sp, #24]
 800b4fa:	b180      	cbz	r0, 800b51e <D32_GENERIC+0x16e>
 800b4fc:	fa99 f999 	rev16.w	r9, r9
 800b500:	4628      	mov	r0, r5
 800b502:	e782      	b.n	800b40a <D32_GENERIC+0x5a>
 800b504:	6093      	str	r3, [r2, #8]
 800b506:	2000      	movs	r0, #0
 800b508:	9b02      	ldr	r3, [sp, #8]
 800b50a:	f8c2 800c 	str.w	r8, [r2, #12]
 800b50e:	6153      	str	r3, [r2, #20]
 800b510:	9b07      	ldr	r3, [sp, #28]
 800b512:	61d1      	str	r1, [r2, #28]
 800b514:	6114      	str	r4, [r2, #16]
 800b516:	6193      	str	r3, [r2, #24]
 800b518:	b009      	add	sp, #36	; 0x24
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	4628      	mov	r0, r5
 800b520:	e773      	b.n	800b40a <D32_GENERIC+0x5a>
 800b522:	bf00      	nop
 800b524:	00060003 	.word	0x00060003
 800b528:	000a000c 	.word	0x000a000c
 800b52c:	000c000a 	.word	0x000c000a
 800b530:	00030006 	.word	0x00030006
 800b534:	24000000 	.word	0x24000000

0800b538 <D48_GENERIC>:
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	6913      	ldr	r3, [r2, #16]
 800b53e:	b089      	sub	sp, #36	; 0x24
 800b540:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	6953      	ldr	r3, [r2, #20]
 800b546:	9104      	str	r1, [sp, #16]
 800b548:	9302      	str	r3, [sp, #8]
 800b54a:	6993      	ldr	r3, [r2, #24]
 800b54c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800b550:	9307      	str	r3, [sp, #28]
 800b552:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800b556:	9100      	str	r1, [sp, #0]
 800b558:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b55a:	9103      	str	r1, [sp, #12]
 800b55c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b55e:	2c00      	cmp	r4, #0
 800b560:	f000 80be 	beq.w	800b6e0 <D48_GENERIC+0x1a8>
 800b564:	f001 0420 	and.w	r4, r1, #32
 800b568:	f001 0110 	and.w	r1, r1, #16
 800b56c:	f04f 0e00 	mov.w	lr, #0
 800b570:	9105      	str	r1, [sp, #20]
 800b572:	9406      	str	r4, [sp, #24]
 800b574:	4962      	ldr	r1, [pc, #392]	; (800b700 <D48_GENERIC+0x1c8>)
 800b576:	e0a0      	b.n	800b6ba <D48_GENERIC+0x182>
 800b578:	eb00 0608 	add.w	r6, r0, r8
 800b57c:	f810 a008 	ldrb.w	sl, [r0, r8]
 800b580:	f810 9005 	ldrb.w	r9, [r0, r5]
 800b584:	5df4      	ldrb	r4, [r6, r7]
 800b586:	443e      	add	r6, r7
 800b588:	f890 b000 	ldrb.w	fp, [r0]
 800b58c:	0420      	lsls	r0, r4, #16
 800b58e:	eb06 0408 	add.w	r4, r6, r8
 800b592:	f816 6008 	ldrb.w	r6, [r6, r8]
 800b596:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800b59a:	f814 8007 	ldrb.w	r8, [r4, r7]
 800b59e:	4427      	add	r7, r4
 800b5a0:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800b5a4:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800b5a8:	eb0a 040b 	add.w	r4, sl, fp
 800b5ac:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800b5b0:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b5b4:	b2f7      	uxtb	r7, r6
 800b5b6:	b2e6      	uxtb	r6, r4
 800b5b8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800b5bc:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800b5c0:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800b5c4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b5c8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800b5cc:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800b5d0:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800b5d4:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800b5d8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800b5dc:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b5e0:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800b5e4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b5e8:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800b5ec:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b5f0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800b5f4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b5f8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b5fc:	9d00      	ldr	r5, [sp, #0]
 800b5fe:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b602:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b606:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800b60a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b60e:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800b612:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800b616:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800b61a:	4c3a      	ldr	r4, [pc, #232]	; (800b704 <D48_GENERIC+0x1cc>)
 800b61c:	fb26 5a04 	smlad	sl, r6, r4, r5
 800b620:	4c39      	ldr	r4, [pc, #228]	; (800b708 <D48_GENERIC+0x1d0>)
 800b622:	fb29 aa04 	smlad	sl, r9, r4, sl
 800b626:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800b62a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800b62e:	4c37      	ldr	r4, [pc, #220]	; (800b70c <D48_GENERIC+0x1d4>)
 800b630:	fb26 3304 	smlad	r3, r6, r4, r3
 800b634:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800b638:	fb29 3304 	smlad	r3, r9, r4, r3
 800b63c:	4c34      	ldr	r4, [pc, #208]	; (800b710 <D48_GENERIC+0x1d8>)
 800b63e:	fb27 3304 	smlad	r3, r7, r4, r3
 800b642:	2501      	movs	r5, #1
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	fb26 f605 	smuad	r6, r6, r5
 800b64a:	4b32      	ldr	r3, [pc, #200]	; (800b714 <D48_GENERIC+0x1dc>)
 800b64c:	fb29 6903 	smlad	r9, r9, r3, r6
 800b650:	4b31      	ldr	r3, [pc, #196]	; (800b718 <D48_GENERIC+0x1e0>)
 800b652:	fb27 9303 	smlad	r3, r7, r3, r9
 800b656:	9c05      	ldr	r4, [sp, #20]
 800b658:	eb0e 0805 	add.w	r8, lr, r5
 800b65c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800b660:	b19c      	cbz	r4, 800b68a <D48_GENERIC+0x152>
 800b662:	9c01      	ldr	r4, [sp, #4]
 800b664:	9d02      	ldr	r5, [sp, #8]
 800b666:	4454      	add	r4, sl
 800b668:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800b66c:	f8cd a008 	str.w	sl, [sp, #8]
 800b670:	1b64      	subs	r4, r4, r5
 800b672:	fba4 ab09 	umull	sl, fp, r4, r9
 800b676:	17e7      	asrs	r7, r4, #31
 800b678:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800b67c:	fb09 bb07 	mla	fp, r9, r7, fp
 800b680:	f14b 0500 	adc.w	r5, fp, #0
 800b684:	006c      	lsls	r4, r5, #1
 800b686:	46a2      	mov	sl, r4
 800b688:	9401      	str	r4, [sp, #4]
 800b68a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800b68c:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800b690:	9d03      	ldr	r5, [sp, #12]
 800b692:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b696:	fb0e f606 	mul.w	r6, lr, r6
 800b69a:	fa1f fe88 	uxth.w	lr, r8
 800b69e:	f04f 0800 	mov.w	r8, #0
 800b6a2:	fbc5 780a 	smlal	r7, r8, r5, sl
 800b6a6:	4645      	mov	r5, r8
 800b6a8:	10ac      	asrs	r4, r5, #2
 800b6aa:	9d04      	ldr	r5, [sp, #16]
 800b6ac:	f304 040f 	ssat	r4, #16, r4
 800b6b0:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800b6b4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b6b6:	4574      	cmp	r4, lr
 800b6b8:	d912      	bls.n	800b6e0 <D48_GENERIC+0x1a8>
 800b6ba:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b6bc:	b2e5      	uxtb	r5, r4
 800b6be:	2c01      	cmp	r4, #1
 800b6c0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800b6c4:	f1c5 0700 	rsb	r7, r5, #0
 800b6c8:	f47f af56 	bne.w	800b578 <D48_GENERIC+0x40>
 800b6cc:	9d06      	ldr	r5, [sp, #24]
 800b6ce:	e9d0 4600 	ldrd	r4, r6, [r0]
 800b6d2:	3006      	adds	r0, #6
 800b6d4:	2d00      	cmp	r5, #0
 800b6d6:	f43f af6b 	beq.w	800b5b0 <D48_GENERIC+0x78>
 800b6da:	ba64      	rev16	r4, r4
 800b6dc:	ba76      	rev16	r6, r6
 800b6de:	e767      	b.n	800b5b0 <D48_GENERIC+0x78>
 800b6e0:	6093      	str	r3, [r2, #8]
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	9b00      	ldr	r3, [sp, #0]
 800b6e6:	f8c2 c01c 	str.w	ip, [r2, #28]
 800b6ea:	60d3      	str	r3, [r2, #12]
 800b6ec:	9b01      	ldr	r3, [sp, #4]
 800b6ee:	6113      	str	r3, [r2, #16]
 800b6f0:	9b02      	ldr	r3, [sp, #8]
 800b6f2:	6153      	str	r3, [r2, #20]
 800b6f4:	9b07      	ldr	r3, [sp, #28]
 800b6f6:	6193      	str	r3, [r2, #24]
 800b6f8:	b009      	add	sp, #36	; 0x24
 800b6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fe:	bf00      	nop
 800b700:	24000000 	.word	0x24000000
 800b704:	000f000a 	.word	0x000f000a
 800b708:	00060003 	.word	0x00060003
 800b70c:	00150019 	.word	0x00150019
 800b710:	00190015 	.word	0x00190015
 800b714:	00030006 	.word	0x00030006
 800b718:	000a000f 	.word	0x000a000f

0800b71c <D64_GENERIC>:
 800b71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b720:	6913      	ldr	r3, [r2, #16]
 800b722:	b089      	sub	sp, #36	; 0x24
 800b724:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	6953      	ldr	r3, [r2, #20]
 800b72a:	9105      	str	r1, [sp, #20]
 800b72c:	9303      	str	r3, [sp, #12]
 800b72e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800b730:	6993      	ldr	r3, [r2, #24]
 800b732:	69d4      	ldr	r4, [r2, #28]
 800b734:	9307      	str	r3, [sp, #28]
 800b736:	9504      	str	r5, [sp, #16]
 800b738:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800b73c:	2900      	cmp	r1, #0
 800b73e:	f000 80e8 	beq.w	800b912 <D64_GENERIC+0x1f6>
 800b742:	6a11      	ldr	r1, [r2, #32]
 800b744:	2500      	movs	r5, #0
 800b746:	46b3      	mov	fp, r6
 800b748:	9302      	str	r3, [sp, #8]
 800b74a:	9106      	str	r1, [sp, #24]
 800b74c:	4978      	ldr	r1, [pc, #480]	; (800b930 <D64_GENERIC+0x214>)
 800b74e:	e0cc      	b.n	800b8ea <D64_GENERIC+0x1ce>
 800b750:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800b754:	f1ce 0c00 	rsb	ip, lr, #0
 800b758:	f890 9000 	ldrb.w	r9, [r0]
 800b75c:	eb00 0708 	add.w	r7, r0, r8
 800b760:	f810 6008 	ldrb.w	r6, [r0, r8]
 800b764:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800b768:	f817 000c 	ldrb.w	r0, [r7, ip]
 800b76c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800b770:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800b774:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800b778:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800b77c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800b780:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800b784:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800b788:	0400      	lsls	r0, r0, #16
 800b78a:	4467      	add	r7, ip
 800b78c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800b790:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800b794:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800b798:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800b79c:	444e      	add	r6, r9
 800b79e:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800b7a2:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800b7a6:	44c2      	add	sl, r8
 800b7a8:	b2f7      	uxtb	r7, r6
 800b7aa:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b7ae:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800b7b2:	0e36      	lsrs	r6, r6, #24
 800b7b4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b7b8:	fa5f fc8a 	uxtb.w	ip, sl
 800b7bc:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800b7c0:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800b7c4:	443c      	add	r4, r7
 800b7c6:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800b7ca:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b7ce:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800b7d2:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800b7d6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b7da:	4b56      	ldr	r3, [pc, #344]	; (800b934 <D64_GENERIC+0x218>)
 800b7dc:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800b7e0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b7e4:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800b7e8:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800b7ec:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b7f0:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800b7f4:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800b7f8:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b7fc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b800:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b804:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b808:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800b80c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b810:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800b814:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800b818:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b81c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b820:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800b824:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b828:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800b82c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800b830:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800b834:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800b838:	fb28 b903 	smlad	r9, r8, r3, fp
 800b83c:	4b3e      	ldr	r3, [pc, #248]	; (800b938 <D64_GENERIC+0x21c>)
 800b83e:	fb26 9903 	smlad	r9, r6, r3, r9
 800b842:	4b3e      	ldr	r3, [pc, #248]	; (800b93c <D64_GENERIC+0x220>)
 800b844:	fb2c 9703 	smlad	r7, ip, r3, r9
 800b848:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800b84c:	fb2a 7909 	smlad	r9, sl, r9, r7
 800b850:	4f3b      	ldr	r7, [pc, #236]	; (800b940 <D64_GENERIC+0x224>)
 800b852:	9b02      	ldr	r3, [sp, #8]
 800b854:	fb28 3307 	smlad	r3, r8, r7, r3
 800b858:	fb2a 3317 	smladx	r3, sl, r7, r3
 800b85c:	4f39      	ldr	r7, [pc, #228]	; (800b944 <D64_GENERIC+0x228>)
 800b85e:	fb26 3307 	smlad	r3, r6, r7, r3
 800b862:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800b866:	f04f 0e01 	mov.w	lr, #1
 800b86a:	fb28 f80e 	smuad	r8, r8, lr
 800b86e:	4b36      	ldr	r3, [pc, #216]	; (800b948 <D64_GENERIC+0x22c>)
 800b870:	fb26 8603 	smlad	r6, r6, r3, r8
 800b874:	4b35      	ldr	r3, [pc, #212]	; (800b94c <D64_GENERIC+0x230>)
 800b876:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800b87a:	4b35      	ldr	r3, [pc, #212]	; (800b950 <D64_GENERIC+0x234>)
 800b87c:	fb2a c303 	smlad	r3, sl, r3, ip
 800b880:	9f06      	ldr	r7, [sp, #24]
 800b882:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800b886:	9302      	str	r3, [sp, #8]
 800b888:	b1cf      	cbz	r7, 800b8be <D64_GENERIC+0x1a2>
 800b88a:	9b00      	ldr	r3, [sp, #0]
 800b88c:	444b      	add	r3, r9
 800b88e:	461e      	mov	r6, r3
 800b890:	9b03      	ldr	r3, [sp, #12]
 800b892:	f8cd 900c 	str.w	r9, [sp, #12]
 800b896:	1af6      	subs	r6, r6, r3
 800b898:	46b0      	mov	r8, r6
 800b89a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b89e:	e9cd 8900 	strd	r8, r9, [sp]
 800b8a2:	fba6 8907 	umull	r8, r9, r6, r7
 800b8a6:	9e01      	ldr	r6, [sp, #4]
 800b8a8:	fb07 9306 	mla	r3, r7, r6, r9
 800b8ac:	4646      	mov	r6, r8
 800b8ae:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800b8b2:	f143 0700 	adc.w	r7, r3, #0
 800b8b6:	fa07 f30e 	lsl.w	r3, r7, lr
 800b8ba:	4699      	mov	r9, r3
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800b8c2:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b8c6:	9b04      	ldr	r3, [sp, #16]
 800b8c8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b8cc:	2700      	movs	r7, #0
 800b8ce:	fb05 fc0c 	mul.w	ip, r5, ip
 800b8d2:	3501      	adds	r5, #1
 800b8d4:	fbc3 6709 	smlal	r6, r7, r3, r9
 800b8d8:	9b05      	ldr	r3, [sp, #20]
 800b8da:	10be      	asrs	r6, r7, #2
 800b8dc:	f306 060f 	ssat	r6, #16, r6
 800b8e0:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800b8e4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b8e6:	42ae      	cmp	r6, r5
 800b8e8:	dd11      	ble.n	800b90e <D64_GENERIC+0x1f2>
 800b8ea:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800b8ee:	f1be 0f01 	cmp.w	lr, #1
 800b8f2:	f47f af2d 	bne.w	800b750 <D64_GENERIC+0x34>
 800b8f6:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b8f8:	f100 0c08 	add.w	ip, r0, #8
 800b8fc:	06bb      	lsls	r3, r7, #26
 800b8fe:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800b902:	d513      	bpl.n	800b92c <D64_GENERIC+0x210>
 800b904:	ba76      	rev16	r6, r6
 800b906:	fa9a fa9a 	rev16.w	sl, sl
 800b90a:	4660      	mov	r0, ip
 800b90c:	e74c      	b.n	800b7a8 <D64_GENERIC+0x8c>
 800b90e:	465e      	mov	r6, fp
 800b910:	9b02      	ldr	r3, [sp, #8]
 800b912:	6093      	str	r3, [r2, #8]
 800b914:	2000      	movs	r0, #0
 800b916:	9b00      	ldr	r3, [sp, #0]
 800b918:	60d6      	str	r6, [r2, #12]
 800b91a:	6113      	str	r3, [r2, #16]
 800b91c:	9b03      	ldr	r3, [sp, #12]
 800b91e:	61d4      	str	r4, [r2, #28]
 800b920:	6153      	str	r3, [r2, #20]
 800b922:	9b07      	ldr	r3, [sp, #28]
 800b924:	6193      	str	r3, [r2, #24]
 800b926:	b009      	add	sp, #36	; 0x24
 800b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92c:	4660      	mov	r0, ip
 800b92e:	e73b      	b.n	800b7a8 <D64_GENERIC+0x8c>
 800b930:	24000000 	.word	0x24000000
 800b934:	001c0015 	.word	0x001c0015
 800b938:	000f000a 	.word	0x000f000a
 800b93c:	00060003 	.word	0x00060003
 800b940:	0024002a 	.word	0x0024002a
 800b944:	002e0030 	.word	0x002e0030
 800b948:	00030006 	.word	0x00030006
 800b94c:	000a000f 	.word	0x000a000f
 800b950:	0015001c 	.word	0x0015001c

0800b954 <D80_GENERIC>:
 800b954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b958:	b08b      	sub	sp, #44	; 0x2c
 800b95a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b95c:	9107      	str	r1, [sp, #28]
 800b95e:	6911      	ldr	r1, [r2, #16]
 800b960:	9104      	str	r1, [sp, #16]
 800b962:	6951      	ldr	r1, [r2, #20]
 800b964:	9105      	str	r1, [sp, #20]
 800b966:	6991      	ldr	r1, [r2, #24]
 800b968:	9109      	str	r1, [sp, #36]	; 0x24
 800b96a:	69d1      	ldr	r1, [r2, #28]
 800b96c:	9102      	str	r1, [sp, #8]
 800b96e:	6891      	ldr	r1, [r2, #8]
 800b970:	9103      	str	r1, [sp, #12]
 800b972:	68d1      	ldr	r1, [r2, #12]
 800b974:	9101      	str	r1, [sp, #4]
 800b976:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b978:	9106      	str	r1, [sp, #24]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f000 810b 	beq.w	800bb96 <D80_GENERIC+0x242>
 800b980:	6a13      	ldr	r3, [r2, #32]
 800b982:	f04f 0800 	mov.w	r8, #0
 800b986:	f8df c260 	ldr.w	ip, [pc, #608]	; 800bbe8 <D80_GENERIC+0x294>
 800b98a:	9308      	str	r3, [sp, #32]
 800b98c:	9200      	str	r2, [sp, #0]
 800b98e:	e0ee      	b.n	800bb6e <D80_GENERIC+0x21a>
 800b990:	b2db      	uxtb	r3, r3
 800b992:	f890 e000 	ldrb.w	lr, [r0]
 800b996:	b219      	sxth	r1, r3
 800b998:	425c      	negs	r4, r3
 800b99a:	f810 9003 	ldrb.w	r9, [r0, r3]
 800b99e:	004e      	lsls	r6, r1, #1
 800b9a0:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800b9a4:	4431      	add	r1, r6
 800b9a6:	1843      	adds	r3, r0, r1
 800b9a8:	f810 b001 	ldrb.w	fp, [r0, r1]
 800b9ac:	1919      	adds	r1, r3, r4
 800b9ae:	5d1b      	ldrb	r3, [r3, r4]
 800b9b0:	1948      	adds	r0, r1, r5
 800b9b2:	f811 a005 	ldrb.w	sl, [r1, r5]
 800b9b6:	041b      	lsls	r3, r3, #16
 800b9b8:	1907      	adds	r7, r0, r4
 800b9ba:	5d01      	ldrb	r1, [r0, r4]
 800b9bc:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b9c0:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800b9c4:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800b9c8:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800b9cc:	0409      	lsls	r1, r1, #16
 800b9ce:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800b9d2:	eb0b 0905 	add.w	r9, fp, r5
 800b9d6:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b9da:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800b9de:	eb09 0b04 	add.w	fp, r9, r4
 800b9e2:	f819 4004 	ldrb.w	r4, [r9, r4]
 800b9e6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800b9ea:	4473      	add	r3, lr
 800b9ec:	eb0b 0006 	add.w	r0, fp, r6
 800b9f0:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800b9f4:	4439      	add	r1, r7
 800b9f6:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800b9fa:	b2df      	uxtb	r7, r3
 800b9fc:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800ba00:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800ba04:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800ba08:	fa5f fa81 	uxtb.w	sl, r1
 800ba0c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800ba10:	9c02      	ldr	r4, [sp, #8]
 800ba12:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800ba16:	441c      	add	r4, r3
 800ba18:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800ba1c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800ba20:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800ba24:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800ba28:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800ba2c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ba30:	b2ed      	uxtb	r5, r5
 800ba32:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800ba36:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ba3a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800ba3e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800ba42:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800ba46:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800ba4a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800ba4e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800ba52:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800ba56:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800ba5a:	0e09      	lsrs	r1, r1, #24
 800ba5c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800ba60:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800ba64:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800ba68:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ba6c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800ba70:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ba74:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ba78:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800ba7c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ba80:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800ba84:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ba88:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ba8c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800ba90:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800ba94:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ba98:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800ba9c:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800baa0:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800baa4:	9202      	str	r2, [sp, #8]
 800baa6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800baaa:	4a43      	ldr	r2, [pc, #268]	; (800bbb8 <D80_GENERIC+0x264>)
 800baac:	9f01      	ldr	r7, [sp, #4]
 800baae:	fb23 7a02 	smlad	sl, r3, r2, r7
 800bab2:	4a42      	ldr	r2, [pc, #264]	; (800bbbc <D80_GENERIC+0x268>)
 800bab4:	fb26 aa02 	smlad	sl, r6, r2, sl
 800bab8:	4a41      	ldr	r2, [pc, #260]	; (800bbc0 <D80_GENERIC+0x26c>)
 800baba:	fb24 aa02 	smlad	sl, r4, r2, sl
 800babe:	4a41      	ldr	r2, [pc, #260]	; (800bbc4 <D80_GENERIC+0x270>)
 800bac0:	fb21 a702 	smlad	r7, r1, r2, sl
 800bac4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800bac8:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800bacc:	4a3e      	ldr	r2, [pc, #248]	; (800bbc8 <D80_GENERIC+0x274>)
 800bace:	9f03      	ldr	r7, [sp, #12]
 800bad0:	fb23 7e02 	smlad	lr, r3, r2, r7
 800bad4:	4a3d      	ldr	r2, [pc, #244]	; (800bbcc <D80_GENERIC+0x278>)
 800bad6:	fb26 ee02 	smlad	lr, r6, r2, lr
 800bada:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800bade:	fb24 e707 	smlad	r7, r4, r7, lr
 800bae2:	4a3b      	ldr	r2, [pc, #236]	; (800bbd0 <D80_GENERIC+0x27c>)
 800bae4:	fb21 7702 	smlad	r7, r1, r2, r7
 800bae8:	4a3a      	ldr	r2, [pc, #232]	; (800bbd4 <D80_GENERIC+0x280>)
 800baea:	fb25 7202 	smlad	r2, r5, r2, r7
 800baee:	f04f 0901 	mov.w	r9, #1
 800baf2:	9201      	str	r2, [sp, #4]
 800baf4:	fb23 f909 	smuad	r9, r3, r9
 800baf8:	4b37      	ldr	r3, [pc, #220]	; (800bbd8 <D80_GENERIC+0x284>)
 800bafa:	fb26 9603 	smlad	r6, r6, r3, r9
 800bafe:	4f37      	ldr	r7, [pc, #220]	; (800bbdc <D80_GENERIC+0x288>)
 800bb00:	fb24 6407 	smlad	r4, r4, r7, r6
 800bb04:	4f36      	ldr	r7, [pc, #216]	; (800bbe0 <D80_GENERIC+0x28c>)
 800bb06:	fb21 4707 	smlad	r7, r1, r7, r4
 800bb0a:	4936      	ldr	r1, [pc, #216]	; (800bbe4 <D80_GENERIC+0x290>)
 800bb0c:	fb25 7301 	smlad	r3, r5, r1, r7
 800bb10:	9303      	str	r3, [sp, #12]
 800bb12:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800bb16:	9b08      	ldr	r3, [sp, #32]
 800bb18:	b193      	cbz	r3, 800bb40 <D80_GENERIC+0x1ec>
 800bb1a:	9a04      	ldr	r2, [sp, #16]
 800bb1c:	4452      	add	r2, sl
 800bb1e:	4614      	mov	r4, r2
 800bb20:	9a05      	ldr	r2, [sp, #20]
 800bb22:	f8cd a014 	str.w	sl, [sp, #20]
 800bb26:	1aa4      	subs	r4, r4, r2
 800bb28:	fba4 1203 	umull	r1, r2, r4, r3
 800bb2c:	17e7      	asrs	r7, r4, #31
 800bb2e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800bb32:	fb03 2207 	mla	r2, r3, r7, r2
 800bb36:	f142 0500 	adc.w	r5, r2, #0
 800bb3a:	006b      	lsls	r3, r5, #1
 800bb3c:	469a      	mov	sl, r3
 800bb3e:	9304      	str	r3, [sp, #16]
 800bb40:	9e00      	ldr	r6, [sp, #0]
 800bb42:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800bb46:	9a06      	ldr	r2, [sp, #24]
 800bb48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bb4c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800bb4e:	2500      	movs	r5, #0
 800bb50:	fb08 f303 	mul.w	r3, r8, r3
 800bb54:	fbc2 450a 	smlal	r4, r5, r2, sl
 800bb58:	9a07      	ldr	r2, [sp, #28]
 800bb5a:	f108 0801 	add.w	r8, r8, #1
 800bb5e:	10a9      	asrs	r1, r5, #2
 800bb60:	f301 010f 	ssat	r1, #16, r1
 800bb64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bb68:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800bb6a:	4543      	cmp	r3, r8
 800bb6c:	dd12      	ble.n	800bb94 <D80_GENERIC+0x240>
 800bb6e:	9b00      	ldr	r3, [sp, #0]
 800bb70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	f47f af0c 	bne.w	800b990 <D80_GENERIC+0x3c>
 800bb78:	9b00      	ldr	r3, [sp, #0]
 800bb7a:	6885      	ldr	r5, [r0, #8]
 800bb7c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800bb7e:	06b2      	lsls	r2, r6, #26
 800bb80:	e9d0 3100 	ldrd	r3, r1, [r0]
 800bb84:	f100 000a 	add.w	r0, r0, #10
 800bb88:	f57f af35 	bpl.w	800b9f6 <D80_GENERIC+0xa2>
 800bb8c:	ba5b      	rev16	r3, r3
 800bb8e:	ba49      	rev16	r1, r1
 800bb90:	ba6d      	rev16	r5, r5
 800bb92:	e730      	b.n	800b9f6 <D80_GENERIC+0xa2>
 800bb94:	4632      	mov	r2, r6
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	2000      	movs	r0, #0
 800bb9a:	6093      	str	r3, [r2, #8]
 800bb9c:	9b01      	ldr	r3, [sp, #4]
 800bb9e:	60d3      	str	r3, [r2, #12]
 800bba0:	9b02      	ldr	r3, [sp, #8]
 800bba2:	61d3      	str	r3, [r2, #28]
 800bba4:	9b04      	ldr	r3, [sp, #16]
 800bba6:	6113      	str	r3, [r2, #16]
 800bba8:	9b05      	ldr	r3, [sp, #20]
 800bbaa:	6153      	str	r3, [r2, #20]
 800bbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbae:	6193      	str	r3, [r2, #24]
 800bbb0:	b00b      	add	sp, #44	; 0x2c
 800bbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb6:	bf00      	nop
 800bbb8:	002d0024 	.word	0x002d0024
 800bbbc:	001c0015 	.word	0x001c0015
 800bbc0:	000f000a 	.word	0x000f000a
 800bbc4:	00060003 	.word	0x00060003
 800bbc8:	0037003f 	.word	0x0037003f
 800bbcc:	00450049 	.word	0x00450049
 800bbd0:	00490045 	.word	0x00490045
 800bbd4:	003f0037 	.word	0x003f0037
 800bbd8:	00030006 	.word	0x00030006
 800bbdc:	000a000f 	.word	0x000a000f
 800bbe0:	0015001c 	.word	0x0015001c
 800bbe4:	0024002d 	.word	0x0024002d
 800bbe8:	24000000 	.word	0x24000000

0800bbec <D128_GENERIC>:
 800bbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf0:	b08d      	sub	sp, #52	; 0x34
 800bbf2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bbf4:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800bbf8:	9109      	str	r1, [sp, #36]	; 0x24
 800bbfa:	6911      	ldr	r1, [r2, #16]
 800bbfc:	9201      	str	r2, [sp, #4]
 800bbfe:	9106      	str	r1, [sp, #24]
 800bc00:	6951      	ldr	r1, [r2, #20]
 800bc02:	9107      	str	r1, [sp, #28]
 800bc04:	6991      	ldr	r1, [r2, #24]
 800bc06:	910b      	str	r1, [sp, #44]	; 0x2c
 800bc08:	6891      	ldr	r1, [r2, #8]
 800bc0a:	9103      	str	r1, [sp, #12]
 800bc0c:	68d1      	ldr	r1, [r2, #12]
 800bc0e:	9102      	str	r1, [sp, #8]
 800bc10:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800bc12:	9108      	str	r1, [sp, #32]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 8183 	beq.w	800bf20 <D128_GENERIC+0x334>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	6a12      	ldr	r2, [r2, #32]
 800bc1e:	4681      	mov	r9, r0
 800bc20:	920a      	str	r2, [sp, #40]	; 0x28
 800bc22:	e9cd a304 	strd	sl, r3, [sp, #16]
 800bc26:	e165      	b.n	800bef4 <D128_GENERIC+0x308>
 800bc28:	b2d2      	uxtb	r2, r2
 800bc2a:	f899 b000 	ldrb.w	fp, [r9]
 800bc2e:	b213      	sxth	r3, r2
 800bc30:	4255      	negs	r5, r2
 800bc32:	f819 0002 	ldrb.w	r0, [r9, r2]
 800bc36:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800bc3a:	009f      	lsls	r7, r3, #2
 800bc3c:	eb09 0402 	add.w	r4, r9, r2
 800bc40:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800bc44:	f819 8002 	ldrb.w	r8, [r9, r2]
 800bc48:	443b      	add	r3, r7
 800bc4a:	1962      	adds	r2, r4, r5
 800bc4c:	5d64      	ldrb	r4, [r4, r5]
 800bc4e:	eb02 0c03 	add.w	ip, r2, r3
 800bc52:	0424      	lsls	r4, r4, #16
 800bc54:	5cd3      	ldrb	r3, [r2, r3]
 800bc56:	eb0c 0e05 	add.w	lr, ip, r5
 800bc5a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800bc5e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800bc62:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800bc66:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800bc6a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800bc6e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800bc72:	eb0c 0e06 	add.w	lr, ip, r6
 800bc76:	f81c a006 	ldrb.w	sl, [ip, r6]
 800bc7a:	0412      	lsls	r2, r2, #16
 800bc7c:	445c      	add	r4, fp
 800bc7e:	eb0e 0c05 	add.w	ip, lr, r5
 800bc82:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800bc86:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800bc8a:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800bc8e:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800bc92:	041b      	lsls	r3, r3, #16
 800bc94:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800bc98:	eb00 0b06 	add.w	fp, r0, r6
 800bc9c:	5d80      	ldrb	r0, [r0, r6]
 800bc9e:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800bca2:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800bca6:	eb0b 0a05 	add.w	sl, fp, r5
 800bcaa:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800bcae:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800bcb2:	0436      	lsls	r6, r6, #16
 800bcb4:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800bcb8:	4442      	add	r2, r8
 800bcba:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800bcbe:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800bcc2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800bcc6:	44b9      	add	r9, r7
 800bcc8:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800bccc:	4463      	add	r3, ip
 800bcce:	eb06 0508 	add.w	r5, r6, r8
 800bcd2:	b2e7      	uxtb	r7, r4
 800bcd4:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800bcd8:	499b      	ldr	r1, [pc, #620]	; (800bf48 <D128_GENERIC+0x35c>)
 800bcda:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800bcde:	0e24      	lsrs	r4, r4, #24
 800bce0:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800bce4:	b2d7      	uxtb	r7, r2
 800bce6:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800bcea:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800bcee:	9904      	ldr	r1, [sp, #16]
 800bcf0:	4461      	add	r1, ip
 800bcf2:	468c      	mov	ip, r1
 800bcf4:	4994      	ldr	r1, [pc, #592]	; (800bf48 <D128_GENERIC+0x35c>)
 800bcf6:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800bcfa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800bcfe:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800bd02:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800bd06:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800bd0a:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800bd0e:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800bd12:	0e12      	lsrs	r2, r2, #24
 800bd14:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800bd18:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800bd1c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800bd20:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bd24:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800bd28:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bd32:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800bd36:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bd3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bd3e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800bd42:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800bd46:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800bd4a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800bd4e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bd52:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800bd56:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800bd5a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800bd5e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bd62:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800bd66:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bd6a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800bd6e:	0e1b      	lsrs	r3, r3, #24
 800bd70:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800bd74:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bd78:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800bd7c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800bd80:	b2eb      	uxtb	r3, r5
 800bd82:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bd86:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800bd8a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800bd8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd92:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800bd96:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800bd9a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800bd9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bda2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bda6:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800bdaa:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800bdae:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800bdb2:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800bdb6:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800bdba:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bdbe:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800bdc2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bdc6:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800bdca:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800bdce:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800bdd2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bdd6:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800bdda:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bdde:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800bde2:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800bde6:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800bdea:	9104      	str	r1, [sp, #16]
 800bdec:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800bdf0:	9902      	ldr	r1, [sp, #8]
 800bdf2:	4a56      	ldr	r2, [pc, #344]	; (800bf4c <D128_GENERIC+0x360>)
 800bdf4:	fb2b 1202 	smlad	r2, fp, r2, r1
 800bdf8:	4955      	ldr	r1, [pc, #340]	; (800bf50 <D128_GENERIC+0x364>)
 800bdfa:	fb28 2201 	smlad	r2, r8, r1, r2
 800bdfe:	4955      	ldr	r1, [pc, #340]	; (800bf54 <D128_GENERIC+0x368>)
 800be00:	fb27 2201 	smlad	r2, r7, r1, r2
 800be04:	4954      	ldr	r1, [pc, #336]	; (800bf58 <D128_GENERIC+0x36c>)
 800be06:	fb26 2201 	smlad	r2, r6, r1, r2
 800be0a:	4954      	ldr	r1, [pc, #336]	; (800bf5c <D128_GENERIC+0x370>)
 800be0c:	fb24 2201 	smlad	r2, r4, r1, r2
 800be10:	4953      	ldr	r1, [pc, #332]	; (800bf60 <D128_GENERIC+0x374>)
 800be12:	fb20 2201 	smlad	r2, r0, r1, r2
 800be16:	4953      	ldr	r1, [pc, #332]	; (800bf64 <D128_GENERIC+0x378>)
 800be18:	fb23 2201 	smlad	r2, r3, r1, r2
 800be1c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800be20:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800be24:	4950      	ldr	r1, [pc, #320]	; (800bf68 <D128_GENERIC+0x37c>)
 800be26:	9a03      	ldr	r2, [sp, #12]
 800be28:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800be2c:	4a4f      	ldr	r2, [pc, #316]	; (800bf6c <D128_GENERIC+0x380>)
 800be2e:	fb28 ce02 	smlad	lr, r8, r2, ip
 800be32:	f8df c150 	ldr.w	ip, [pc, #336]	; 800bf84 <D128_GENERIC+0x398>
 800be36:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800be3a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800bf88 <D128_GENERIC+0x39c>
 800be3e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800be42:	f8df e148 	ldr.w	lr, [pc, #328]	; 800bf8c <D128_GENERIC+0x3a0>
 800be46:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800be4a:	f8df c144 	ldr.w	ip, [pc, #324]	; 800bf90 <D128_GENERIC+0x3a4>
 800be4e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800be52:	f8df c140 	ldr.w	ip, [pc, #320]	; 800bf94 <D128_GENERIC+0x3a8>
 800be56:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800be5a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800bf98 <D128_GENERIC+0x3ac>
 800be5e:	fb25 c20e 	smlad	r2, r5, lr, ip
 800be62:	f04f 0c01 	mov.w	ip, #1
 800be66:	9202      	str	r2, [sp, #8]
 800be68:	fb2b fb0c 	smuad	fp, fp, ip
 800be6c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800bf9c <D128_GENERIC+0x3b0>
 800be70:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800be74:	f8df c128 	ldr.w	ip, [pc, #296]	; 800bfa0 <D128_GENERIC+0x3b4>
 800be78:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800be7c:	4f3c      	ldr	r7, [pc, #240]	; (800bf70 <D128_GENERIC+0x384>)
 800be7e:	fb26 bb07 	smlad	fp, r6, r7, fp
 800be82:	4f3c      	ldr	r7, [pc, #240]	; (800bf74 <D128_GENERIC+0x388>)
 800be84:	fb24 bb07 	smlad	fp, r4, r7, fp
 800be88:	4f3b      	ldr	r7, [pc, #236]	; (800bf78 <D128_GENERIC+0x38c>)
 800be8a:	fb20 bb07 	smlad	fp, r0, r7, fp
 800be8e:	4f3b      	ldr	r7, [pc, #236]	; (800bf7c <D128_GENERIC+0x390>)
 800be90:	fb23 bb07 	smlad	fp, r3, r7, fp
 800be94:	4b3a      	ldr	r3, [pc, #232]	; (800bf80 <D128_GENERIC+0x394>)
 800be96:	fb25 b303 	smlad	r3, r5, r3, fp
 800be9a:	9303      	str	r3, [sp, #12]
 800be9c:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800bea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bea2:	b183      	cbz	r3, 800bec6 <D128_GENERIC+0x2da>
 800bea4:	9a06      	ldr	r2, [sp, #24]
 800bea6:	9907      	ldr	r1, [sp, #28]
 800bea8:	4422      	add	r2, r4
 800beaa:	9407      	str	r4, [sp, #28]
 800beac:	1a52      	subs	r2, r2, r1
 800beae:	fba2 0103 	umull	r0, r1, r2, r3
 800beb2:	17d5      	asrs	r5, r2, #31
 800beb4:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800beb8:	fb03 1105 	mla	r1, r3, r5, r1
 800bebc:	f141 0300 	adc.w	r3, r1, #0
 800bec0:	005b      	lsls	r3, r3, #1
 800bec2:	461c      	mov	r4, r3
 800bec4:	9306      	str	r3, [sp, #24]
 800bec6:	9d01      	ldr	r5, [sp, #4]
 800bec8:	01e4      	lsls	r4, r4, #7
 800beca:	9e05      	ldr	r6, [sp, #20]
 800becc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bed0:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800bed2:	2300      	movs	r3, #0
 800bed4:	9908      	ldr	r1, [sp, #32]
 800bed6:	fb06 f000 	mul.w	r0, r6, r0
 800beda:	3601      	adds	r6, #1
 800bedc:	fbc1 2304 	smlal	r2, r3, r1, r4
 800bee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bee2:	109b      	asrs	r3, r3, #2
 800bee4:	9605      	str	r6, [sp, #20]
 800bee6:	f303 030f 	ssat	r3, #16, r3
 800beea:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800beee:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800bef0:	42b3      	cmp	r3, r6
 800bef2:	dd13      	ble.n	800bf1c <D128_GENERIC+0x330>
 800bef4:	9b01      	ldr	r3, [sp, #4]
 800bef6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bef8:	2a01      	cmp	r2, #1
 800befa:	f47f ae95 	bne.w	800bc28 <D128_GENERIC+0x3c>
 800befe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bf00:	f109 0610 	add.w	r6, r9, #16
 800bf04:	0681      	lsls	r1, r0, #26
 800bf06:	e9d9 4200 	ldrd	r4, r2, [r9]
 800bf0a:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800bf0e:	d518      	bpl.n	800bf42 <D128_GENERIC+0x356>
 800bf10:	ba64      	rev16	r4, r4
 800bf12:	ba52      	rev16	r2, r2
 800bf14:	ba5b      	rev16	r3, r3
 800bf16:	ba6d      	rev16	r5, r5
 800bf18:	46b1      	mov	r9, r6
 800bf1a:	e6da      	b.n	800bcd2 <D128_GENERIC+0xe6>
 800bf1c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bf20:	9b01      	ldr	r3, [sp, #4]
 800bf22:	2000      	movs	r0, #0
 800bf24:	9903      	ldr	r1, [sp, #12]
 800bf26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf28:	6099      	str	r1, [r3, #8]
 800bf2a:	9902      	ldr	r1, [sp, #8]
 800bf2c:	f8c3 a01c 	str.w	sl, [r3, #28]
 800bf30:	60d9      	str	r1, [r3, #12]
 800bf32:	9906      	ldr	r1, [sp, #24]
 800bf34:	619a      	str	r2, [r3, #24]
 800bf36:	6119      	str	r1, [r3, #16]
 800bf38:	9907      	ldr	r1, [sp, #28]
 800bf3a:	6159      	str	r1, [r3, #20]
 800bf3c:	b00d      	add	sp, #52	; 0x34
 800bf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf42:	46b1      	mov	r9, r6
 800bf44:	e6c5      	b.n	800bcd2 <D128_GENERIC+0xe6>
 800bf46:	bf00      	nop
 800bf48:	24000000 	.word	0x24000000
 800bf4c:	00780069 	.word	0x00780069
 800bf50:	005b004e 	.word	0x005b004e
 800bf54:	00420037 	.word	0x00420037
 800bf58:	002d0024 	.word	0x002d0024
 800bf5c:	001c0015 	.word	0x001c0015
 800bf60:	000f000a 	.word	0x000f000a
 800bf64:	00060003 	.word	0x00060003
 800bf68:	00880096 	.word	0x00880096
 800bf6c:	00a200ac 	.word	0x00a200ac
 800bf70:	0015001c 	.word	0x0015001c
 800bf74:	0024002d 	.word	0x0024002d
 800bf78:	00370042 	.word	0x00370042
 800bf7c:	004e005b 	.word	0x004e005b
 800bf80:	00690078 	.word	0x00690078
 800bf84:	00b400ba 	.word	0x00b400ba
 800bf88:	00be00c0 	.word	0x00be00c0
 800bf8c:	00c000be 	.word	0x00c000be
 800bf90:	00ba00b4 	.word	0x00ba00b4
 800bf94:	00ac00a2 	.word	0x00ac00a2
 800bf98:	00960088 	.word	0x00960088
 800bf9c:	00030006 	.word	0x00030006
 800bfa0:	000a000f 	.word	0x000a000f

0800bfa4 <D16_1CH_HTONS_VOL_HP>:
 800bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa8:	6993      	ldr	r3, [r2, #24]
 800bfaa:	b087      	sub	sp, #28
 800bfac:	4682      	mov	sl, r0
 800bfae:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800bfb6:	69d3      	ldr	r3, [r2, #28]
 800bfb8:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800bfbc:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800bfc0:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800bfc4:	9403      	str	r4, [sp, #12]
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d054      	beq.n	800c074 <D16_1CH_HTONS_VOL_HP+0xd0>
 800bfca:	f1a1 0902 	sub.w	r9, r1, #2
 800bfce:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800bfd2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800c080 <D16_1CH_HTONS_VOL_HP+0xdc>
 800bfd6:	4650      	mov	r0, sl
 800bfd8:	9101      	str	r1, [sp, #4]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	f8cd b008 	str.w	fp, [sp, #8]
 800bfe0:	9205      	str	r2, [sp, #20]
 800bfe2:	f850 3b02 	ldr.w	r3, [r0], #2
 800bfe6:	ba5b      	rev16	r3, r3
 800bfe8:	b2dc      	uxtb	r4, r3
 800bfea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bfee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bff2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800bff6:	4419      	add	r1, r3
 800bff8:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800bffc:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800c000:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800c004:	0aa1      	lsrs	r1, r4, #10
 800c006:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800c00a:	4a1b      	ldr	r2, [pc, #108]	; (800c078 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800c00c:	fb23 5402 	smlad	r4, r3, r2, r5
 800c010:	4a1a      	ldr	r2, [pc, #104]	; (800c07c <D16_1CH_HTONS_VOL_HP+0xd8>)
 800c012:	fb23 f502 	smuad	r5, r3, r2
 800c016:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800c01a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800c01e:	f04f 0b00 	mov.w	fp, #0
 800c022:	19a2      	adds	r2, r4, r6
 800c024:	eba2 020c 	sub.w	r2, r2, ip
 800c028:	46a4      	mov	ip, r4
 800c02a:	17d7      	asrs	r7, r2, #31
 800c02c:	fba2 230e 	umull	r2, r3, r2, lr
 800c030:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800c034:	fb0e 3307 	mla	r3, lr, r7, r3
 800c038:	f143 0700 	adc.w	r7, r3, #0
 800c03c:	9b02      	ldr	r3, [sp, #8]
 800c03e:	047a      	lsls	r2, r7, #17
 800c040:	007e      	lsls	r6, r7, #1
 800c042:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800c046:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800c04a:	f303 030f 	ssat	r3, #16, r3
 800c04e:	f829 3f02 	strh.w	r3, [r9, #2]!
 800c052:	9b01      	ldr	r3, [sp, #4]
 800c054:	4298      	cmp	r0, r3
 800c056:	d1c4      	bne.n	800bfe2 <D16_1CH_HTONS_VOL_HP+0x3e>
 800c058:	460b      	mov	r3, r1
 800c05a:	9a05      	ldr	r2, [sp, #20]
 800c05c:	2000      	movs	r0, #0
 800c05e:	9903      	ldr	r1, [sp, #12]
 800c060:	61d3      	str	r3, [r2, #28]
 800c062:	9b04      	ldr	r3, [sp, #16]
 800c064:	6095      	str	r5, [r2, #8]
 800c066:	60d1      	str	r1, [r2, #12]
 800c068:	6193      	str	r3, [r2, #24]
 800c06a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800c06e:	b007      	add	sp, #28
 800c070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c074:	4664      	mov	r4, ip
 800c076:	e7f1      	b.n	800c05c <D16_1CH_HTONS_VOL_HP+0xb8>
 800c078:	00030001 	.word	0x00030001
 800c07c:	00010003 	.word	0x00010003
 800c080:	24000000 	.word	0x24000000

0800c084 <D24_1CH_HTONS_VOL_HP>:
 800c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c088:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800c08a:	b089      	sub	sp, #36	; 0x24
 800c08c:	6993      	ldr	r3, [r2, #24]
 800c08e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c090:	9604      	str	r6, [sp, #16]
 800c092:	6a16      	ldr	r6, [r2, #32]
 800c094:	9306      	str	r3, [sp, #24]
 800c096:	9505      	str	r5, [sp, #20]
 800c098:	69d3      	ldr	r3, [r2, #28]
 800c09a:	9600      	str	r6, [sp, #0]
 800c09c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800c0a0:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800c0a4:	2d00      	cmp	r5, #0
 800c0a6:	f000 8083 	beq.w	800c1b0 <D24_1CH_HTONS_VOL_HP+0x12c>
 800c0aa:	9207      	str	r2, [sp, #28]
 800c0ac:	2600      	movs	r6, #0
 800c0ae:	4622      	mov	r2, r4
 800c0b0:	f1a1 0b02 	sub.w	fp, r1, #2
 800c0b4:	4f3f      	ldr	r7, [pc, #252]	; (800c1b4 <D24_1CH_HTONS_VOL_HP+0x130>)
 800c0b6:	461d      	mov	r5, r3
 800c0b8:	f8cd a00c 	str.w	sl, [sp, #12]
 800c0bc:	9c00      	ldr	r4, [sp, #0]
 800c0be:	e056      	b.n	800c16e <D24_1CH_HTONS_VOL_HP+0xea>
 800c0c0:	7841      	ldrb	r1, [r0, #1]
 800c0c2:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800c0c6:	3002      	adds	r0, #2
 800c0c8:	4488      	add	r8, r1
 800c0ca:	fa5f f388 	uxtb.w	r3, r8
 800c0ce:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800c0d2:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800c0d6:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800c0da:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800c0de:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800c0e2:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800c0e6:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c0ea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c0ee:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800c0f2:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800c0f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0fa:	492f      	ldr	r1, [pc, #188]	; (800c1b8 <D24_1CH_HTONS_VOL_HP+0x134>)
 800c0fc:	fb23 e901 	smlad	r9, r3, r1, lr
 800c100:	492e      	ldr	r1, [pc, #184]	; (800c1bc <D24_1CH_HTONS_VOL_HP+0x138>)
 800c102:	fb23 ce01 	smlad	lr, r3, r1, ip
 800c106:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800c10a:	2101      	movs	r1, #1
 800c10c:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800c110:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800c114:	fb23 f301 	smuad	r3, r3, r1
 800c118:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800c11c:	eb08 0c03 	add.w	ip, r8, r3
 800c120:	9b03      	ldr	r3, [sp, #12]
 800c122:	f04f 0a00 	mov.w	sl, #0
 800c126:	440a      	add	r2, r1
 800c128:	3601      	adds	r6, #1
 800c12a:	9103      	str	r1, [sp, #12]
 800c12c:	1ad2      	subs	r2, r2, r3
 800c12e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c132:	fba2 2304 	umull	r2, r3, r2, r4
 800c136:	e9cd 2300 	strd	r2, r3, [sp]
 800c13a:	fb04 3309 	mla	r3, r4, r9, r3
 800c13e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800c142:	9301      	str	r3, [sp, #4]
 800c144:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c148:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c14c:	f143 0300 	adc.w	r3, r3, #0
 800c150:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800c154:	005a      	lsls	r2, r3, #1
 800c156:	9b04      	ldr	r3, [sp, #16]
 800c158:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800c15c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800c160:	f303 030f 	ssat	r3, #16, r3
 800c164:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800c168:	9b05      	ldr	r3, [sp, #20]
 800c16a:	429e      	cmp	r6, r3
 800c16c:	d010      	beq.n	800c190 <D24_1CH_HTONS_VOL_HP+0x10c>
 800c16e:	f890 9003 	ldrb.w	r9, [r0, #3]
 800c172:	f016 0f01 	tst.w	r6, #1
 800c176:	7801      	ldrb	r1, [r0, #0]
 800c178:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800c17c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800c180:	d09e      	beq.n	800c0c0 <D24_1CH_HTONS_VOL_HP+0x3c>
 800c182:	f890 8002 	ldrb.w	r8, [r0, #2]
 800c186:	3004      	adds	r0, #4
 800c188:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800c18c:	4488      	add	r8, r1
 800c18e:	e79c      	b.n	800c0ca <D24_1CH_HTONS_VOL_HP+0x46>
 800c190:	4614      	mov	r4, r2
 800c192:	462b      	mov	r3, r5
 800c194:	9a07      	ldr	r2, [sp, #28]
 800c196:	2000      	movs	r0, #0
 800c198:	61d3      	str	r3, [r2, #28]
 800c19a:	9b06      	ldr	r3, [sp, #24]
 800c19c:	f8c2 c008 	str.w	ip, [r2, #8]
 800c1a0:	f8c2 e00c 	str.w	lr, [r2, #12]
 800c1a4:	6193      	str	r3, [r2, #24]
 800c1a6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800c1aa:	b009      	add	sp, #36	; 0x24
 800c1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b0:	4651      	mov	r1, sl
 800c1b2:	e7f0      	b.n	800c196 <D24_1CH_HTONS_VOL_HP+0x112>
 800c1b4:	24000000 	.word	0x24000000
 800c1b8:	00030001 	.word	0x00030001
 800c1bc:	00060007 	.word	0x00060007

0800c1c0 <D32_1CH_HTONS_VOL_HP>:
 800c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c4:	6993      	ldr	r3, [r2, #24]
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	4683      	mov	fp, r0
 800c1ca:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800c1cc:	9304      	str	r3, [sp, #16]
 800c1ce:	69d5      	ldr	r5, [r2, #28]
 800c1d0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c1d2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800c1d6:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800c1da:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d077      	beq.n	800c2d2 <D32_1CH_HTONS_VOL_HP+0x112>
 800c1e2:	460f      	mov	r7, r1
 800c1e4:	46f1      	mov	r9, lr
 800c1e6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800c1ea:	f8cd 8000 	str.w	r8, [sp]
 800c1ee:	4e3a      	ldr	r6, [pc, #232]	; (800c2d8 <D32_1CH_HTONS_VOL_HP+0x118>)
 800c1f0:	469e      	mov	lr, r3
 800c1f2:	46a0      	mov	r8, r4
 800c1f4:	9103      	str	r1, [sp, #12]
 800c1f6:	9205      	str	r2, [sp, #20]
 800c1f8:	f85b 4b04 	ldr.w	r4, [fp], #4
 800c1fc:	ba64      	rev16	r4, r4
 800c1fe:	b2e0      	uxtb	r0, r4
 800c200:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800c204:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800c208:	0e24      	lsrs	r4, r4, #24
 800c20a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800c20e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c212:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800c216:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c21a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800c21e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800c222:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c226:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800c22a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c22e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c232:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c236:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c23a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800c23e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c242:	4826      	ldr	r0, [pc, #152]	; (800c2dc <D32_1CH_HTONS_VOL_HP+0x11c>)
 800c244:	fb23 c400 	smlad	r4, r3, r0, ip
 800c248:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c24c:	fb21 4402 	smlad	r4, r1, r2, r4
 800c250:	4823      	ldr	r0, [pc, #140]	; (800c2e0 <D32_1CH_HTONS_VOL_HP+0x120>)
 800c252:	fb23 ec00 	smlad	ip, r3, r0, lr
 800c256:	4823      	ldr	r0, [pc, #140]	; (800c2e4 <D32_1CH_HTONS_VOL_HP+0x124>)
 800c258:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c25c:	2201      	movs	r2, #1
 800c25e:	fb23 f302 	smuad	r3, r3, r2
 800c262:	4821      	ldr	r0, [pc, #132]	; (800c2e8 <D32_1CH_HTONS_VOL_HP+0x128>)
 800c264:	fb21 3e00 	smlad	lr, r1, r0, r3
 800c268:	9b00      	ldr	r3, [sp, #0]
 800c26a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800c26e:	4423      	add	r3, r4
 800c270:	eba3 0209 	sub.w	r2, r3, r9
 800c274:	46a1      	mov	r9, r4
 800c276:	17d1      	asrs	r1, r2, #31
 800c278:	fba2 230a 	umull	r2, r3, r2, sl
 800c27c:	e9cd 2300 	strd	r2, r3, [sp]
 800c280:	fb0a 3301 	mla	r3, sl, r1, r3
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c28a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c28e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c292:	f143 0300 	adc.w	r3, r3, #0
 800c296:	0399      	lsls	r1, r3, #14
 800c298:	005b      	lsls	r3, r3, #1
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	2300      	movs	r3, #0
 800c29e:	fbc8 2301 	smlal	r2, r3, r8, r1
 800c2a2:	109b      	asrs	r3, r3, #2
 800c2a4:	f303 030f 	ssat	r3, #16, r3
 800c2a8:	f827 3b02 	strh.w	r3, [r7], #2
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	429f      	cmp	r7, r3
 800c2b0:	d1a2      	bne.n	800c1f8 <D32_1CH_HTONS_VOL_HP+0x38>
 800c2b2:	4673      	mov	r3, lr
 800c2b4:	f8dd 8000 	ldr.w	r8, [sp]
 800c2b8:	9a05      	ldr	r2, [sp, #20]
 800c2ba:	6093      	str	r3, [r2, #8]
 800c2bc:	2000      	movs	r0, #0
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c2c4:	61d5      	str	r5, [r2, #28]
 800c2c6:	6193      	str	r3, [r2, #24]
 800c2c8:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800c2cc:	b007      	add	sp, #28
 800c2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d2:	4674      	mov	r4, lr
 800c2d4:	e7f1      	b.n	800c2ba <D32_1CH_HTONS_VOL_HP+0xfa>
 800c2d6:	bf00      	nop
 800c2d8:	24000000 	.word	0x24000000
 800c2dc:	00060003 	.word	0x00060003
 800c2e0:	000a000c 	.word	0x000a000c
 800c2e4:	000c000a 	.word	0x000c000a
 800c2e8:	00030006 	.word	0x00030006

0800c2ec <D48_1CH_HTONS_VOL_HP>:
 800c2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800c2f2:	b087      	sub	sp, #28
 800c2f4:	6993      	ldr	r3, [r2, #24]
 800c2f6:	9701      	str	r7, [sp, #4]
 800c2f8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c2fa:	6a17      	ldr	r7, [r2, #32]
 800c2fc:	9304      	str	r3, [sp, #16]
 800c2fe:	69d6      	ldr	r6, [r2, #28]
 800c300:	9702      	str	r7, [sp, #8]
 800c302:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800c306:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800c30a:	2d00      	cmp	r5, #0
 800c30c:	f000 8093 	beq.w	800c436 <D48_1CH_HTONS_VOL_HP+0x14a>
 800c310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c314:	f1a1 0b02 	sub.w	fp, r1, #2
 800c318:	46f2      	mov	sl, lr
 800c31a:	4f48      	ldr	r7, [pc, #288]	; (800c43c <D48_1CH_HTONS_VOL_HP+0x150>)
 800c31c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800c320:	469e      	mov	lr, r3
 800c322:	9205      	str	r2, [sp, #20]
 800c324:	9103      	str	r1, [sp, #12]
 800c326:	e9d0 3200 	ldrd	r3, r2, [r0]
 800c32a:	3006      	adds	r0, #6
 800c32c:	ba5b      	rev16	r3, r3
 800c32e:	fa92 f992 	rev16.w	r9, r2
 800c332:	b2dd      	uxtb	r5, r3
 800c334:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c338:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c33c:	0e1b      	lsrs	r3, r3, #24
 800c33e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800c342:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800c346:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800c34a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800c34e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800c352:	fa5f f289 	uxtb.w	r2, r9
 800c356:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800c35a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800c35e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800c362:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800c366:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c36a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800c36e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c372:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800c376:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c37a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800c37e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800c382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c386:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800c38a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c38e:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800c392:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800c396:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800c39a:	4b29      	ldr	r3, [pc, #164]	; (800c440 <D48_1CH_HTONS_VOL_HP+0x154>)
 800c39c:	fb28 c103 	smlad	r1, r8, r3, ip
 800c3a0:	4b28      	ldr	r3, [pc, #160]	; (800c444 <D48_1CH_HTONS_VOL_HP+0x158>)
 800c3a2:	fb25 1103 	smlad	r1, r5, r3, r1
 800c3a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c3aa:	fb22 1903 	smlad	r9, r2, r3, r1
 800c3ae:	4b26      	ldr	r3, [pc, #152]	; (800c448 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800c3b0:	fb28 ec03 	smlad	ip, r8, r3, lr
 800c3b4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800c3b8:	fb25 cc03 	smlad	ip, r5, r3, ip
 800c3bc:	4b23      	ldr	r3, [pc, #140]	; (800c44c <D48_1CH_HTONS_VOL_HP+0x160>)
 800c3be:	fb22 cc03 	smlad	ip, r2, r3, ip
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	fb28 f801 	smuad	r8, r8, r1
 800c3c8:	4b21      	ldr	r3, [pc, #132]	; (800c450 <D48_1CH_HTONS_VOL_HP+0x164>)
 800c3ca:	fb25 8503 	smlad	r5, r5, r3, r8
 800c3ce:	4b21      	ldr	r3, [pc, #132]	; (800c454 <D48_1CH_HTONS_VOL_HP+0x168>)
 800c3d0:	fb22 5e03 	smlad	lr, r2, r3, r5
 800c3d4:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800c3d8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c3dc:	190a      	adds	r2, r1, r4
 800c3de:	9c02      	ldr	r4, [sp, #8]
 800c3e0:	eba2 020a 	sub.w	r2, r2, sl
 800c3e4:	468a      	mov	sl, r1
 800c3e6:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c3ea:	fba2 2304 	umull	r2, r3, r2, r4
 800c3ee:	fb04 3309 	mla	r3, r4, r9, r3
 800c3f2:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800c3f6:	f04f 0900 	mov.w	r9, #0
 800c3fa:	f143 0500 	adc.w	r5, r3, #0
 800c3fe:	9b01      	ldr	r3, [sp, #4]
 800c400:	032a      	lsls	r2, r5, #12
 800c402:	006c      	lsls	r4, r5, #1
 800c404:	fbc3 8902 	smlal	r8, r9, r3, r2
 800c408:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800c40c:	f303 030f 	ssat	r3, #16, r3
 800c410:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800c414:	9b03      	ldr	r3, [sp, #12]
 800c416:	4283      	cmp	r3, r0
 800c418:	d185      	bne.n	800c326 <D48_1CH_HTONS_VOL_HP+0x3a>
 800c41a:	4673      	mov	r3, lr
 800c41c:	9a05      	ldr	r2, [sp, #20]
 800c41e:	6093      	str	r3, [r2, #8]
 800c420:	2000      	movs	r0, #0
 800c422:	9b04      	ldr	r3, [sp, #16]
 800c424:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c428:	61d6      	str	r6, [r2, #28]
 800c42a:	6193      	str	r3, [r2, #24]
 800c42c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800c430:	b007      	add	sp, #28
 800c432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c436:	4671      	mov	r1, lr
 800c438:	e7f1      	b.n	800c41e <D48_1CH_HTONS_VOL_HP+0x132>
 800c43a:	bf00      	nop
 800c43c:	24000000 	.word	0x24000000
 800c440:	000f000a 	.word	0x000f000a
 800c444:	00060003 	.word	0x00060003
 800c448:	00150019 	.word	0x00150019
 800c44c:	00190015 	.word	0x00190015
 800c450:	00030006 	.word	0x00030006
 800c454:	000a000f 	.word	0x000a000f

0800c458 <D64_1CH_HTONS_VOL_HP>:
 800c458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800c45e:	b089      	sub	sp, #36	; 0x24
 800c460:	6993      	ldr	r3, [r2, #24]
 800c462:	4686      	mov	lr, r0
 800c464:	9503      	str	r5, [sp, #12]
 800c466:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800c468:	6a15      	ldr	r5, [r2, #32]
 800c46a:	9306      	str	r3, [sp, #24]
 800c46c:	69d6      	ldr	r6, [r2, #28]
 800c46e:	9504      	str	r5, [sp, #16]
 800c470:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800c474:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800c478:	2800      	cmp	r0, #0
 800c47a:	f000 80a4 	beq.w	800c5c6 <D64_1CH_HTONS_VOL_HP+0x16e>
 800c47e:	460f      	mov	r7, r1
 800c480:	46f1      	mov	r9, lr
 800c482:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800c486:	4d56      	ldr	r5, [pc, #344]	; (800c5e0 <D64_1CH_HTONS_VOL_HP+0x188>)
 800c488:	46a2      	mov	sl, r4
 800c48a:	469e      	mov	lr, r3
 800c48c:	9105      	str	r1, [sp, #20]
 800c48e:	9207      	str	r2, [sp, #28]
 800c490:	f859 1b08 	ldr.w	r1, [r9], #8
 800c494:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800c498:	ba49      	rev16	r1, r1
 800c49a:	fa93 fb93 	rev16.w	fp, r3
 800c49e:	b2cb      	uxtb	r3, r1
 800c4a0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c4a4:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800c4a8:	0e09      	lsrs	r1, r1, #24
 800c4aa:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800c4ae:	fa5f f38b 	uxtb.w	r3, fp
 800c4b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c4b6:	4426      	add	r6, r4
 800c4b8:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800c4bc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800c4c0:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800c4c4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800c4c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c4cc:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800c4d0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800c4d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c4d8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800c4dc:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800c4e0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c4e4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800c4e8:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800c4ec:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800c4f0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c4f4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c4f8:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800c4fc:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800c500:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c504:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800c508:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c50c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800c510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c514:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800c518:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800c51c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c520:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800c524:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800c528:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800c52c:	482d      	ldr	r0, [pc, #180]	; (800c5e4 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800c52e:	fb22 cc00 	smlad	ip, r2, r0, ip
 800c532:	482d      	ldr	r0, [pc, #180]	; (800c5e8 <D64_1CH_HTONS_VOL_HP+0x190>)
 800c534:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c538:	482c      	ldr	r0, [pc, #176]	; (800c5ec <D64_1CH_HTONS_VOL_HP+0x194>)
 800c53a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800c53e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800c542:	fb2b c404 	smlad	r4, fp, r4, ip
 800c546:	482a      	ldr	r0, [pc, #168]	; (800c5f0 <D64_1CH_HTONS_VOL_HP+0x198>)
 800c548:	fb22 ec00 	smlad	ip, r2, r0, lr
 800c54c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800c550:	4828      	ldr	r0, [pc, #160]	; (800c5f4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800c552:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c556:	fb23 cc10 	smladx	ip, r3, r0, ip
 800c55a:	f04f 0e01 	mov.w	lr, #1
 800c55e:	fb22 f20e 	smuad	r2, r2, lr
 800c562:	4825      	ldr	r0, [pc, #148]	; (800c5f8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800c564:	fb21 2100 	smlad	r1, r1, r0, r2
 800c568:	4a24      	ldr	r2, [pc, #144]	; (800c5fc <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800c56a:	fb23 1302 	smlad	r3, r3, r2, r1
 800c56e:	4a24      	ldr	r2, [pc, #144]	; (800c600 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800c570:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800c574:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800c578:	eb04 0208 	add.w	r2, r4, r8
 800c57c:	eba2 020a 	sub.w	r2, r2, sl
 800c580:	46a2      	mov	sl, r4
 800c582:	4610      	mov	r0, r2
 800c584:	17d1      	asrs	r1, r2, #31
 800c586:	e9cd 0100 	strd	r0, r1, [sp]
 800c58a:	9904      	ldr	r1, [sp, #16]
 800c58c:	9801      	ldr	r0, [sp, #4]
 800c58e:	fba2 2301 	umull	r2, r3, r2, r1
 800c592:	fb01 3300 	mla	r3, r1, r0, r3
 800c596:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800c59a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c59e:	f143 0100 	adc.w	r1, r3, #0
 800c5a2:	9b03      	ldr	r3, [sp, #12]
 800c5a4:	02ca      	lsls	r2, r1, #11
 800c5a6:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c5b0:	108b      	asrs	r3, r1, #2
 800c5b2:	f303 030f 	ssat	r3, #16, r3
 800c5b6:	f827 3b02 	strh.w	r3, [r7], #2
 800c5ba:	9b05      	ldr	r3, [sp, #20]
 800c5bc:	429f      	cmp	r7, r3
 800c5be:	f47f af67 	bne.w	800c490 <D64_1CH_HTONS_VOL_HP+0x38>
 800c5c2:	4673      	mov	r3, lr
 800c5c4:	9a07      	ldr	r2, [sp, #28]
 800c5c6:	6093      	str	r3, [r2, #8]
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	9b06      	ldr	r3, [sp, #24]
 800c5cc:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c5d0:	61d6      	str	r6, [r2, #28]
 800c5d2:	6193      	str	r3, [r2, #24]
 800c5d4:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800c5d8:	b009      	add	sp, #36	; 0x24
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	bf00      	nop
 800c5e0:	24000000 	.word	0x24000000
 800c5e4:	001c0015 	.word	0x001c0015
 800c5e8:	000f000a 	.word	0x000f000a
 800c5ec:	00060003 	.word	0x00060003
 800c5f0:	0024002a 	.word	0x0024002a
 800c5f4:	002e0030 	.word	0x002e0030
 800c5f8:	00030006 	.word	0x00030006
 800c5fc:	000a000f 	.word	0x000a000f
 800c600:	0015001c 	.word	0x0015001c

0800c604 <D80_1CH_HTONS_VOL_HP>:
 800c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c608:	6913      	ldr	r3, [r2, #16]
 800c60a:	b089      	sub	sp, #36	; 0x24
 800c60c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	9603      	str	r6, [sp, #12]
 800c612:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800c614:	6a16      	ldr	r6, [r2, #32]
 800c616:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800c61a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800c61e:	9306      	str	r3, [sp, #24]
 800c620:	9604      	str	r6, [sp, #16]
 800c622:	69d3      	ldr	r3, [r2, #28]
 800c624:	2c00      	cmp	r4, #0
 800c626:	f000 80ce 	beq.w	800c7c6 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800c62a:	3902      	subs	r1, #2
 800c62c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c630:	4e66      	ldr	r6, [pc, #408]	; (800c7cc <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800c632:	469e      	mov	lr, r3
 800c634:	9102      	str	r1, [sp, #8]
 800c636:	46aa      	mov	sl, r5
 800c638:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800c63c:	9207      	str	r2, [sp, #28]
 800c63e:	9105      	str	r1, [sp, #20]
 800c640:	6883      	ldr	r3, [r0, #8]
 800c642:	e9d0 4200 	ldrd	r4, r2, [r0]
 800c646:	300a      	adds	r0, #10
 800c648:	ba64      	rev16	r4, r4
 800c64a:	ba52      	rev16	r2, r2
 800c64c:	fa93 fb93 	rev16.w	fp, r3
 800c650:	b2e5      	uxtb	r5, r4
 800c652:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800c656:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800c65a:	0e24      	lsrs	r4, r4, #24
 800c65c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800c660:	b2d5      	uxtb	r5, r2
 800c662:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c666:	44c6      	add	lr, r8
 800c668:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c66c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800c670:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800c674:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c678:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c67c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800c680:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c688:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800c68c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c690:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800c694:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800c698:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800c69c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800c6a0:	0e12      	lsrs	r2, r2, #24
 800c6a2:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800c6a6:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800c6aa:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c6ae:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c6b2:	fa5f fb8b 	uxtb.w	fp, fp
 800c6b6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c6ba:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c6be:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800c6c2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c6c6:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800c6ca:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c6ce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c6d2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800c6d6:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800c6da:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c6de:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c6e2:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800c6e6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800c6ea:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800c6ee:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800c6f2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800c6f6:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800c6fa:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800c6fe:	4934      	ldr	r1, [pc, #208]	; (800c7d0 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800c700:	fb23 cc01 	smlad	ip, r3, r1, ip
 800c704:	4933      	ldr	r1, [pc, #204]	; (800c7d4 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800c706:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c70a:	4933      	ldr	r1, [pc, #204]	; (800c7d8 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800c70c:	fb28 cc01 	smlad	ip, r8, r1, ip
 800c710:	4932      	ldr	r1, [pc, #200]	; (800c7dc <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800c712:	fb22 cc01 	smlad	ip, r2, r1, ip
 800c716:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c71a:	fb2b c901 	smlad	r9, fp, r1, ip
 800c71e:	4930      	ldr	r1, [pc, #192]	; (800c7e0 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800c720:	fb23 7701 	smlad	r7, r3, r1, r7
 800c724:	492f      	ldr	r1, [pc, #188]	; (800c7e4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800c726:	fb24 7701 	smlad	r7, r4, r1, r7
 800c72a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800c72e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800c732:	492d      	ldr	r1, [pc, #180]	; (800c7e8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800c734:	fb22 cc01 	smlad	ip, r2, r1, ip
 800c738:	492c      	ldr	r1, [pc, #176]	; (800c7ec <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800c73a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800c73e:	2101      	movs	r1, #1
 800c740:	fb23 f301 	smuad	r3, r3, r1
 800c744:	492a      	ldr	r1, [pc, #168]	; (800c7f0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800c746:	fb24 3401 	smlad	r4, r4, r1, r3
 800c74a:	492a      	ldr	r1, [pc, #168]	; (800c7f4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800c74c:	fb28 4101 	smlad	r1, r8, r1, r4
 800c750:	4f29      	ldr	r7, [pc, #164]	; (800c7f8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800c752:	fb22 1207 	smlad	r2, r2, r7, r1
 800c756:	4f29      	ldr	r7, [pc, #164]	; (800c7fc <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800c758:	fb2b 2707 	smlad	r7, fp, r7, r2
 800c75c:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800c760:	9b01      	ldr	r3, [sp, #4]
 800c762:	9c04      	ldr	r4, [sp, #16]
 800c764:	440b      	add	r3, r1
 800c766:	eba3 020a 	sub.w	r2, r3, sl
 800c76a:	468a      	mov	sl, r1
 800c76c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c770:	fba2 2304 	umull	r2, r3, r2, r4
 800c774:	fb04 3309 	mla	r3, r4, r9, r3
 800c778:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800c77c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c780:	f143 0500 	adc.w	r5, r3, #0
 800c784:	006b      	lsls	r3, r5, #1
 800c786:	02aa      	lsls	r2, r5, #10
 800c788:	2500      	movs	r5, #0
 800c78a:	9301      	str	r3, [sp, #4]
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	fbc3 4502 	smlal	r4, r5, r3, r2
 800c792:	9a02      	ldr	r2, [sp, #8]
 800c794:	10ab      	asrs	r3, r5, #2
 800c796:	f303 030f 	ssat	r3, #16, r3
 800c79a:	f822 3f02 	strh.w	r3, [r2, #2]!
 800c79e:	9b05      	ldr	r3, [sp, #20]
 800c7a0:	9202      	str	r2, [sp, #8]
 800c7a2:	4298      	cmp	r0, r3
 800c7a4:	f47f af4c 	bne.w	800c640 <D80_1CH_HTONS_VOL_HP+0x3c>
 800c7a8:	4673      	mov	r3, lr
 800c7aa:	9a07      	ldr	r2, [sp, #28]
 800c7ac:	61d3      	str	r3, [r2, #28]
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	9b01      	ldr	r3, [sp, #4]
 800c7b2:	6097      	str	r7, [r2, #8]
 800c7b4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c7b8:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800c7bc:	9b06      	ldr	r3, [sp, #24]
 800c7be:	6193      	str	r3, [r2, #24]
 800c7c0:	b009      	add	sp, #36	; 0x24
 800c7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	e7f0      	b.n	800c7ac <D80_1CH_HTONS_VOL_HP+0x1a8>
 800c7ca:	bf00      	nop
 800c7cc:	24000000 	.word	0x24000000
 800c7d0:	002d0024 	.word	0x002d0024
 800c7d4:	001c0015 	.word	0x001c0015
 800c7d8:	000f000a 	.word	0x000f000a
 800c7dc:	00060003 	.word	0x00060003
 800c7e0:	0037003f 	.word	0x0037003f
 800c7e4:	00450049 	.word	0x00450049
 800c7e8:	00490045 	.word	0x00490045
 800c7ec:	003f0037 	.word	0x003f0037
 800c7f0:	00030006 	.word	0x00030006
 800c7f4:	000a000f 	.word	0x000a000f
 800c7f8:	0015001c 	.word	0x0015001c
 800c7fc:	0024002d 	.word	0x0024002d

0800c800 <D128_1CH_HTONS_VOL_HP>:
 800c800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c804:	6914      	ldr	r4, [r2, #16]
 800c806:	b08d      	sub	sp, #52	; 0x34
 800c808:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c80a:	9404      	str	r4, [sp, #16]
 800c80c:	6954      	ldr	r4, [r2, #20]
 800c80e:	920b      	str	r2, [sp, #44]	; 0x2c
 800c810:	9405      	str	r4, [sp, #20]
 800c812:	6994      	ldr	r4, [r2, #24]
 800c814:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800c818:	940a      	str	r4, [sp, #40]	; 0x28
 800c81a:	6894      	ldr	r4, [r2, #8]
 800c81c:	9403      	str	r4, [sp, #12]
 800c81e:	68d4      	ldr	r4, [r2, #12]
 800c820:	9402      	str	r4, [sp, #8]
 800c822:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c824:	6a12      	ldr	r2, [r2, #32]
 800c826:	9407      	str	r4, [sp, #28]
 800c828:	9208      	str	r2, [sp, #32]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f000 812e 	beq.w	800ca8c <D128_1CH_HTONS_VOL_HP+0x28c>
 800c830:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c834:	f100 0b10 	add.w	fp, r0, #16
 800c838:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800cacc <D128_1CH_HTONS_VOL_HP+0x2cc>
 800c83c:	9106      	str	r1, [sp, #24]
 800c83e:	9309      	str	r3, [sp, #36]	; 0x24
 800c840:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800c844:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800c848:	ba40      	rev16	r0, r0
 800c84a:	ba52      	rev16	r2, r2
 800c84c:	ba5b      	rev16	r3, r3
 800c84e:	ba76      	rev16	r6, r6
 800c850:	b2c5      	uxtb	r5, r0
 800c852:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800c856:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800c85a:	0e00      	lsrs	r0, r0, #24
 800c85c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800c860:	b2d5      	uxtb	r5, r2
 800c862:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800c866:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c86a:	44bc      	add	ip, r7
 800c86c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c870:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800c874:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c878:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800c87c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800c880:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800c884:	0e12      	lsrs	r2, r2, #24
 800c886:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800c88a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c88e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c892:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c896:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800c89a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800c89e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800c8a8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c8ac:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800c8b0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800c8b4:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800c8b8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c8bc:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c8c0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c8c4:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800c8c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c8cc:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800c8d0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800c8d4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800c8d8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c8dc:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800c8e0:	0e1b      	lsrs	r3, r3, #24
 800c8e2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c8e6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c8ea:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800c8ee:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800c8f2:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800c8f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c8fa:	b2f3      	uxtb	r3, r6
 800c8fc:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800c900:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800c904:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c908:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800c90c:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800c910:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800c914:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c918:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c91c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c920:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800c924:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800c928:	0e36      	lsrs	r6, r6, #24
 800c92a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c92e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c932:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800c936:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c93a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800c93e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c942:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800c946:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800c94a:	9101      	str	r1, [sp, #4]
 800c94c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800c950:	9b02      	ldr	r3, [sp, #8]
 800c952:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800c956:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c95a:	4611      	mov	r1, r2
 800c95c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800c960:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800c964:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800c968:	4a49      	ldr	r2, [pc, #292]	; (800ca90 <D128_1CH_HTONS_VOL_HP+0x290>)
 800c96a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800c96e:	4b49      	ldr	r3, [pc, #292]	; (800ca94 <D128_1CH_HTONS_VOL_HP+0x294>)
 800c970:	fb27 2203 	smlad	r2, r7, r3, r2
 800c974:	4b48      	ldr	r3, [pc, #288]	; (800ca98 <D128_1CH_HTONS_VOL_HP+0x298>)
 800c976:	fb25 2203 	smlad	r2, r5, r3, r2
 800c97a:	4b48      	ldr	r3, [pc, #288]	; (800ca9c <D128_1CH_HTONS_VOL_HP+0x29c>)
 800c97c:	fb24 2203 	smlad	r2, r4, r3, r2
 800c980:	4b47      	ldr	r3, [pc, #284]	; (800caa0 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800c982:	fb20 2803 	smlad	r8, r0, r3, r2
 800c986:	4b47      	ldr	r3, [pc, #284]	; (800caa4 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800c988:	9a01      	ldr	r2, [sp, #4]
 800c98a:	fb22 8203 	smlad	r2, r2, r3, r8
 800c98e:	4b46      	ldr	r3, [pc, #280]	; (800caa8 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800c990:	9102      	str	r1, [sp, #8]
 800c992:	fb21 2203 	smlad	r2, r1, r3, r2
 800c996:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800c99a:	fb26 2308 	smlad	r3, r6, r8, r2
 800c99e:	4619      	mov	r1, r3
 800c9a0:	9a03      	ldr	r2, [sp, #12]
 800c9a2:	4b42      	ldr	r3, [pc, #264]	; (800caac <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800c9a4:	fb2e 2803 	smlad	r8, lr, r3, r2
 800c9a8:	4b41      	ldr	r3, [pc, #260]	; (800cab0 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800c9aa:	fb27 8a03 	smlad	sl, r7, r3, r8
 800c9ae:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800cad0 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800c9b2:	fb25 a808 	smlad	r8, r5, r8, sl
 800c9b6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800cad4 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800c9ba:	fb24 880a 	smlad	r8, r4, sl, r8
 800c9be:	f8df a118 	ldr.w	sl, [pc, #280]	; 800cad8 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800c9c2:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800c9c6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800cadc <D128_1CH_HTONS_VOL_HP+0x2dc>
 800c9ca:	9b01      	ldr	r3, [sp, #4]
 800c9cc:	fb23 aa08 	smlad	sl, r3, r8, sl
 800c9d0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800cae0 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800c9d4:	9a02      	ldr	r2, [sp, #8]
 800c9d6:	fb22 a808 	smlad	r8, r2, r8, sl
 800c9da:	f8df a108 	ldr.w	sl, [pc, #264]	; 800cae4 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800c9de:	fb26 830a 	smlad	r3, r6, sl, r8
 800c9e2:	f04f 0801 	mov.w	r8, #1
 800c9e6:	9302      	str	r3, [sp, #8]
 800c9e8:	fb2e fe08 	smuad	lr, lr, r8
 800c9ec:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800cae8 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800c9f0:	fb27 ee08 	smlad	lr, r7, r8, lr
 800c9f4:	4f2f      	ldr	r7, [pc, #188]	; (800cab4 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800c9f6:	fb25 ee07 	smlad	lr, r5, r7, lr
 800c9fa:	4f2f      	ldr	r7, [pc, #188]	; (800cab8 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800c9fc:	fb24 ee07 	smlad	lr, r4, r7, lr
 800ca00:	4f2e      	ldr	r7, [pc, #184]	; (800cabc <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800ca02:	fb20 ee07 	smlad	lr, r0, r7, lr
 800ca06:	4f2e      	ldr	r7, [pc, #184]	; (800cac0 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800ca08:	9b01      	ldr	r3, [sp, #4]
 800ca0a:	fb23 ee07 	smlad	lr, r3, r7, lr
 800ca0e:	4f2d      	ldr	r7, [pc, #180]	; (800cac4 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800ca10:	fb22 e707 	smlad	r7, r2, r7, lr
 800ca14:	4b2c      	ldr	r3, [pc, #176]	; (800cac8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800ca16:	fb26 7303 	smlad	r3, r6, r3, r7
 800ca1a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800ca1e:	9303      	str	r3, [sp, #12]
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ca26:	9f08      	ldr	r7, [sp, #32]
 800ca28:	2100      	movs	r1, #0
 800ca2a:	4433      	add	r3, r6
 800ca2c:	f10b 0b10 	add.w	fp, fp, #16
 800ca30:	461a      	mov	r2, r3
 800ca32:	9b05      	ldr	r3, [sp, #20]
 800ca34:	9605      	str	r6, [sp, #20]
 800ca36:	1ad2      	subs	r2, r2, r3
 800ca38:	17d5      	asrs	r5, r2, #31
 800ca3a:	fba2 2307 	umull	r2, r3, r2, r7
 800ca3e:	1814      	adds	r4, r2, r0
 800ca40:	fb07 3305 	mla	r3, r7, r5, r3
 800ca44:	eb43 0501 	adc.w	r5, r3, r1
 800ca48:	006b      	lsls	r3, r5, #1
 800ca4a:	022a      	lsls	r2, r5, #8
 800ca4c:	9304      	str	r3, [sp, #16]
 800ca4e:	9b07      	ldr	r3, [sp, #28]
 800ca50:	fbc3 0102 	smlal	r0, r1, r3, r2
 800ca54:	9a06      	ldr	r2, [sp, #24]
 800ca56:	108b      	asrs	r3, r1, #2
 800ca58:	f303 030f 	ssat	r3, #16, r3
 800ca5c:	f822 3b02 	strh.w	r3, [r2], #2
 800ca60:	4613      	mov	r3, r2
 800ca62:	9206      	str	r2, [sp, #24]
 800ca64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca66:	4293      	cmp	r3, r2
 800ca68:	f47f aeea 	bne.w	800c840 <D128_1CH_HTONS_VOL_HP+0x40>
 800ca6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca6e:	2000      	movs	r0, #0
 800ca70:	9903      	ldr	r1, [sp, #12]
 800ca72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca74:	6099      	str	r1, [r3, #8]
 800ca76:	9902      	ldr	r1, [sp, #8]
 800ca78:	f8c3 c01c 	str.w	ip, [r3, #28]
 800ca7c:	60d9      	str	r1, [r3, #12]
 800ca7e:	9904      	ldr	r1, [sp, #16]
 800ca80:	619a      	str	r2, [r3, #24]
 800ca82:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800ca86:	b00d      	add	sp, #52	; 0x34
 800ca88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8c:	9e05      	ldr	r6, [sp, #20]
 800ca8e:	e7ed      	b.n	800ca6c <D128_1CH_HTONS_VOL_HP+0x26c>
 800ca90:	00780069 	.word	0x00780069
 800ca94:	005b004e 	.word	0x005b004e
 800ca98:	00420037 	.word	0x00420037
 800ca9c:	002d0024 	.word	0x002d0024
 800caa0:	001c0015 	.word	0x001c0015
 800caa4:	000f000a 	.word	0x000f000a
 800caa8:	00060003 	.word	0x00060003
 800caac:	00880096 	.word	0x00880096
 800cab0:	00a200ac 	.word	0x00a200ac
 800cab4:	000a000f 	.word	0x000a000f
 800cab8:	0015001c 	.word	0x0015001c
 800cabc:	0024002d 	.word	0x0024002d
 800cac0:	00370042 	.word	0x00370042
 800cac4:	004e005b 	.word	0x004e005b
 800cac8:	00690078 	.word	0x00690078
 800cacc:	24000000 	.word	0x24000000
 800cad0:	00b400ba 	.word	0x00b400ba
 800cad4:	00be00c0 	.word	0x00be00c0
 800cad8:	00c000be 	.word	0x00c000be
 800cadc:	00ba00b4 	.word	0x00ba00b4
 800cae0:	00ac00a2 	.word	0x00ac00a2
 800cae4:	00960088 	.word	0x00960088
 800cae8:	00030006 	.word	0x00030006

0800caec <PDM_Filter_Init>:
 800caec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caee:	2240      	movs	r2, #64	; 0x40
 800caf0:	2100      	movs	r1, #0
 800caf2:	4604      	mov	r4, r0
 800caf4:	300c      	adds	r0, #12
 800caf6:	f000 fa07 	bl	800cf08 <memset>
 800cafa:	4a56      	ldr	r2, [pc, #344]	; (800cc54 <PDM_Filter_Init+0x168>)
 800cafc:	4856      	ldr	r0, [pc, #344]	; (800cc58 <PDM_Filter_Init+0x16c>)
 800cafe:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800cb02:	6813      	ldr	r3, [r2, #0]
 800cb04:	f24c 2540 	movw	r5, #49728	; 0xc240
 800cb08:	f023 0301 	bic.w	r3, r3, #1
 800cb0c:	6013      	str	r3, [r2, #0]
 800cb0e:	6803      	ldr	r3, [r0, #0]
 800cb10:	400b      	ands	r3, r1
 800cb12:	42ab      	cmp	r3, r5
 800cb14:	d040      	beq.n	800cb98 <PDM_Filter_Init+0xac>
 800cb16:	6803      	ldr	r3, [r0, #0]
 800cb18:	f24c 2270 	movw	r2, #49776	; 0xc270
 800cb1c:	4019      	ands	r1, r3
 800cb1e:	4291      	cmp	r1, r2
 800cb20:	d03a      	beq.n	800cb98 <PDM_Filter_Init+0xac>
 800cb22:	4b4e      	ldr	r3, [pc, #312]	; (800cc5c <PDM_Filter_Init+0x170>)
 800cb24:	2101      	movs	r1, #1
 800cb26:	461a      	mov	r2, r3
 800cb28:	6019      	str	r1, [r3, #0]
 800cb2a:	6813      	ldr	r3, [r2, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1fc      	bne.n	800cb2a <PDM_Filter_Init+0x3e>
 800cb30:	4b4b      	ldr	r3, [pc, #300]	; (800cc60 <PDM_Filter_Init+0x174>)
 800cb32:	494c      	ldr	r1, [pc, #304]	; (800cc64 <PDM_Filter_Init+0x178>)
 800cb34:	4a4c      	ldr	r2, [pc, #304]	; (800cc68 <PDM_Filter_Init+0x17c>)
 800cb36:	6019      	str	r1, [r3, #0]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	8820      	ldrh	r0, [r4, #0]
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	8961      	ldrh	r1, [r4, #10]
 800cb40:	f04f 0300 	mov.w	r3, #0
 800cb44:	8922      	ldrh	r2, [r4, #8]
 800cb46:	bf14      	ite	ne
 800cb48:	2500      	movne	r5, #0
 800cb4a:	4d47      	ldreq	r5, [pc, #284]	; (800cc68 <PDM_Filter_Init+0x17c>)
 800cb4c:	2801      	cmp	r0, #1
 800cb4e:	61a3      	str	r3, [r4, #24]
 800cb50:	6465      	str	r5, [r4, #68]	; 0x44
 800cb52:	60e3      	str	r3, [r4, #12]
 800cb54:	6263      	str	r3, [r4, #36]	; 0x24
 800cb56:	6423      	str	r3, [r4, #64]	; 0x40
 800cb58:	86a1      	strh	r1, [r4, #52]	; 0x34
 800cb5a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800cb5c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800cb60:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800cb64:	d936      	bls.n	800cbd4 <PDM_Filter_Init+0xe8>
 800cb66:	2003      	movs	r0, #3
 800cb68:	2302      	movs	r3, #2
 800cb6a:	8862      	ldrh	r2, [r4, #2]
 800cb6c:	2a01      	cmp	r2, #1
 800cb6e:	d92e      	bls.n	800cbce <PDM_Filter_Init+0xe2>
 800cb70:	2140      	movs	r1, #64	; 0x40
 800cb72:	2300      	movs	r3, #0
 800cb74:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cb76:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800cb7a:	d101      	bne.n	800cb80 <PDM_Filter_Init+0x94>
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	6421      	str	r1, [r4, #64]	; 0x40
 800cb80:	6862      	ldr	r2, [r4, #4]
 800cb82:	b11a      	cbz	r2, 800cb8c <PDM_Filter_Init+0xa0>
 800cb84:	f043 0310 	orr.w	r3, r3, #16
 800cb88:	62e2      	str	r2, [r4, #44]	; 0x2c
 800cb8a:	6423      	str	r3, [r4, #64]	; 0x40
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	8722      	strh	r2, [r4, #56]	; 0x38
 800cb90:	b908      	cbnz	r0, 800cb96 <PDM_Filter_Init+0xaa>
 800cb92:	3380      	adds	r3, #128	; 0x80
 800cb94:	6423      	str	r3, [r4, #64]	; 0x40
 800cb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb98:	4b34      	ldr	r3, [pc, #208]	; (800cc6c <PDM_Filter_Init+0x180>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1c0      	bne.n	800cb22 <PDM_Filter_Init+0x36>
 800cba0:	4a33      	ldr	r2, [pc, #204]	; (800cc70 <PDM_Filter_Init+0x184>)
 800cba2:	6813      	ldr	r3, [r2, #0]
 800cba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cba8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cbac:	d006      	beq.n	800cbbc <PDM_Filter_Init+0xd0>
 800cbae:	6813      	ldr	r3, [r2, #0]
 800cbb0:	f240 4283 	movw	r2, #1155	; 0x483
 800cbb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d1b2      	bne.n	800cb22 <PDM_Filter_Init+0x36>
 800cbbc:	4b2d      	ldr	r3, [pc, #180]	; (800cc74 <PDM_Filter_Init+0x188>)
 800cbbe:	2101      	movs	r1, #1
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	6019      	str	r1, [r3, #0]
 800cbc4:	6813      	ldr	r3, [r2, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1fc      	bne.n	800cbc4 <PDM_Filter_Init+0xd8>
 800cbca:	4b2b      	ldr	r3, [pc, #172]	; (800cc78 <PDM_Filter_Init+0x18c>)
 800cbcc:	e7b1      	b.n	800cb32 <PDM_Filter_Init+0x46>
 800cbce:	d03a      	beq.n	800cc46 <PDM_Filter_Init+0x15a>
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	e7cd      	b.n	800cb70 <PDM_Filter_Init+0x84>
 800cbd4:	4d29      	ldr	r5, [pc, #164]	; (800cc7c <PDM_Filter_Init+0x190>)
 800cbd6:	782a      	ldrb	r2, [r5, #0]
 800cbd8:	d01b      	beq.n	800cc12 <PDM_Filter_Init+0x126>
 800cbda:	2a01      	cmp	r2, #1
 800cbdc:	d001      	beq.n	800cbe2 <PDM_Filter_Init+0xf6>
 800cbde:	2001      	movs	r0, #1
 800cbe0:	e7c3      	b.n	800cb6a <PDM_Filter_Init+0x7e>
 800cbe2:	4927      	ldr	r1, [pc, #156]	; (800cc80 <PDM_Filter_Init+0x194>)
 800cbe4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800cc88 <PDM_Filter_Init+0x19c>
 800cbe8:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800cbec:	4e25      	ldr	r6, [pc, #148]	; (800cc84 <PDM_Filter_Init+0x198>)
 800cbee:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800cbf2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800cbf6:	ea02 0006 	and.w	r0, r2, r6
 800cbfa:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800cbfe:	428f      	cmp	r7, r1
 800cc00:	ea43 0300 	orr.w	r3, r3, r0
 800cc04:	4413      	add	r3, r2
 800cc06:	600b      	str	r3, [r1, #0]
 800cc08:	d1f1      	bne.n	800cbee <PDM_Filter_Init+0x102>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	2001      	movs	r0, #1
 800cc0e:	702b      	strb	r3, [r5, #0]
 800cc10:	e7ab      	b.n	800cb6a <PDM_Filter_Init+0x7e>
 800cc12:	2a00      	cmp	r2, #0
 800cc14:	d1a9      	bne.n	800cb6a <PDM_Filter_Init+0x7e>
 800cc16:	491a      	ldr	r1, [pc, #104]	; (800cc80 <PDM_Filter_Init+0x194>)
 800cc18:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800cc88 <PDM_Filter_Init+0x19c>
 800cc1c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800cc20:	4e18      	ldr	r6, [pc, #96]	; (800cc84 <PDM_Filter_Init+0x198>)
 800cc22:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800cc26:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800cc2a:	ea02 0006 	and.w	r0, r2, r6
 800cc2e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800cc32:	428f      	cmp	r7, r1
 800cc34:	ea43 0300 	orr.w	r3, r3, r0
 800cc38:	4413      	add	r3, r2
 800cc3a:	600b      	str	r3, [r1, #0]
 800cc3c:	d1f1      	bne.n	800cc22 <PDM_Filter_Init+0x136>
 800cc3e:	2001      	movs	r0, #1
 800cc40:	2300      	movs	r3, #0
 800cc42:	7028      	strb	r0, [r5, #0]
 800cc44:	e791      	b.n	800cb6a <PDM_Filter_Init+0x7e>
 800cc46:	2220      	movs	r2, #32
 800cc48:	4618      	mov	r0, r3
 800cc4a:	2160      	movs	r1, #96	; 0x60
 800cc4c:	6422      	str	r2, [r4, #64]	; 0x40
 800cc4e:	4613      	mov	r3, r2
 800cc50:	e790      	b.n	800cb74 <PDM_Filter_Init+0x88>
 800cc52:	bf00      	nop
 800cc54:	e0002000 	.word	0xe0002000
 800cc58:	e000ed00 	.word	0xe000ed00
 800cc5c:	40023008 	.word	0x40023008
 800cc60:	40023000 	.word	0x40023000
 800cc64:	f407a5c2 	.word	0xf407a5c2
 800cc68:	b5e8b5cd 	.word	0xb5e8b5cd
 800cc6c:	e0042000 	.word	0xe0042000
 800cc70:	5c001000 	.word	0x5c001000
 800cc74:	58024c08 	.word	0x58024c08
 800cc78:	58024c00 	.word	0x58024c00
 800cc7c:	240004a4 	.word	0x240004a4
 800cc80:	23fffffc 	.word	0x23fffffc
 800cc84:	000ffc00 	.word	0x000ffc00
 800cc88:	3ff00000 	.word	0x3ff00000

0800cc8c <PDM_Filter_setConfig>:
 800cc8c:	4b67      	ldr	r3, [pc, #412]	; (800ce2c <PDM_Filter_setConfig+0x1a0>)
 800cc8e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d128      	bne.n	800cce6 <PDM_Filter_setConfig+0x5a>
 800cc94:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800cc96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc98:	880e      	ldrh	r6, [r1, #0]
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800cca2:	1e73      	subs	r3, r6, #1
 800cca4:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800cca8:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800ccac:	2b06      	cmp	r3, #6
 800ccae:	ed2d 8b02 	vpush	{d8}
 800ccb2:	6421      	str	r1, [r4, #64]	; 0x40
 800ccb4:	b083      	sub	sp, #12
 800ccb6:	d820      	bhi.n	800ccfa <PDM_Filter_setConfig+0x6e>
 800ccb8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ccba:	42b3      	cmp	r3, r6
 800ccbc:	d03d      	beq.n	800cd3a <PDM_Filter_setConfig+0xae>
 800ccbe:	4b5c      	ldr	r3, [pc, #368]	; (800ce30 <PDM_Filter_setConfig+0x1a4>)
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	4333      	orrs	r3, r6
 800ccc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ccc8:	6423      	str	r3, [r4, #64]	; 0x40
 800ccca:	f003 030f 	and.w	r3, r3, #15
 800ccce:	2a70      	cmp	r2, #112	; 0x70
 800ccd0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ccd4:	d009      	beq.n	800ccea <PDM_Filter_setConfig+0x5e>
 800ccd6:	2b06      	cmp	r3, #6
 800ccd8:	d824      	bhi.n	800cd24 <PDM_Filter_setConfig+0x98>
 800ccda:	e8df f003 	tbb	[pc, r3]
 800ccde:	878a      	.short	0x878a
 800cce0:	7b7e8184 	.word	0x7b7e8184
 800cce4:	78          	.byte	0x78
 800cce5:	00          	.byte	0x00
 800cce6:	2004      	movs	r0, #4
 800cce8:	4770      	bx	lr
 800ccea:	2b06      	cmp	r3, #6
 800ccec:	d81a      	bhi.n	800cd24 <PDM_Filter_setConfig+0x98>
 800ccee:	e8df f003 	tbb	[pc, r3]
 800ccf2:	8f92      	.short	0x8f92
 800ccf4:	8617898c 	.word	0x8617898c
 800ccf8:	83          	.byte	0x83
 800ccf9:	00          	.byte	0x00
 800ccfa:	4287      	cmp	r7, r0
 800ccfc:	f000 808e 	beq.w	800ce1c <PDM_Filter_setConfig+0x190>
 800cd00:	f117 0f0c 	cmn.w	r7, #12
 800cd04:	f04f 0008 	mov.w	r0, #8
 800cd08:	da11      	bge.n	800cd2e <PDM_Filter_setConfig+0xa2>
 800cd0a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800cd0e:	3040      	adds	r0, #64	; 0x40
 800cd10:	80ab      	strh	r3, [r5, #4]
 800cd12:	886b      	ldrh	r3, [r5, #2]
 800cd14:	8626      	strh	r6, [r4, #48]	; 0x30
 800cd16:	8663      	strh	r3, [r4, #50]	; 0x32
 800cd18:	b003      	add	sp, #12
 800cd1a:	ecbd 8b02 	vpop	{d8}
 800cd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd20:	4b44      	ldr	r3, [pc, #272]	; (800ce34 <PDM_Filter_setConfig+0x1a8>)
 800cd22:	64a3      	str	r3, [r4, #72]	; 0x48
 800cd24:	f117 0f0c 	cmn.w	r7, #12
 800cd28:	f04f 0000 	mov.w	r0, #0
 800cd2c:	dbed      	blt.n	800cd0a <PDM_Filter_setConfig+0x7e>
 800cd2e:	2f33      	cmp	r7, #51	; 0x33
 800cd30:	dd10      	ble.n	800cd54 <PDM_Filter_setConfig+0xc8>
 800cd32:	2333      	movs	r3, #51	; 0x33
 800cd34:	3040      	adds	r0, #64	; 0x40
 800cd36:	80ab      	strh	r3, [r5, #4]
 800cd38:	e7eb      	b.n	800cd12 <PDM_Filter_setConfig+0x86>
 800cd3a:	4287      	cmp	r7, r0
 800cd3c:	d1f2      	bne.n	800cd24 <PDM_Filter_setConfig+0x98>
 800cd3e:	886b      	ldrh	r3, [r5, #2]
 800cd40:	8663      	strh	r3, [r4, #50]	; 0x32
 800cd42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd44:	2000      	movs	r0, #0
 800cd46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd4a:	6423      	str	r3, [r4, #64]	; 0x40
 800cd4c:	b003      	add	sp, #12
 800cd4e:	ecbd 8b02 	vpop	{d8}
 800cd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd56:	f003 030f 	and.w	r3, r3, #15
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	2b06      	cmp	r3, #6
 800cd5e:	d831      	bhi.n	800cdc4 <PDM_Filter_setConfig+0x138>
 800cd60:	4a35      	ldr	r2, [pc, #212]	; (800ce38 <PDM_Filter_setConfig+0x1ac>)
 800cd62:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800cd66:	eddf 0a35 	vldr	s1, [pc, #212]	; 800ce3c <PDM_Filter_setConfig+0x1b0>
 800cd6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd6e:	9001      	str	r0, [sp, #4]
 800cd70:	edd3 7a07 	vldr	s15, [r3, #28]
 800cd74:	ed93 8a00 	vldr	s16, [r3]
 800cd78:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cd7c:	f000 f8e4 	bl	800cf48 <powf>
 800cd80:	eef0 8a40 	vmov.f32	s17, s0
 800cd84:	9801      	ldr	r0, [sp, #4]
 800cd86:	ee07 7a90 	vmov	s15, r7
 800cd8a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800cd8e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cd92:	9001      	str	r0, [sp, #4]
 800cd94:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800cd98:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ce40 <PDM_Filter_setConfig+0x1b4>
 800cd9c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cda0:	f000 f8d2 	bl	800cf48 <powf>
 800cda4:	ee28 8a00 	vmul.f32	s16, s16, s0
 800cda8:	886b      	ldrh	r3, [r5, #2]
 800cdaa:	9801      	ldr	r0, [sp, #4]
 800cdac:	feb8 8a48 	vrinta.f32	s16, s16
 800cdb0:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800cdb4:	8727      	strh	r7, [r4, #56]	; 0x38
 800cdb6:	8663      	strh	r3, [r4, #50]	; 0x32
 800cdb8:	8626      	strh	r6, [r4, #48]	; 0x30
 800cdba:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d0bf      	beq.n	800cd42 <PDM_Filter_setConfig+0xb6>
 800cdc2:	e7a9      	b.n	800cd18 <PDM_Filter_setConfig+0x8c>
 800cdc4:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800ce44 <PDM_Filter_setConfig+0x1b8>
 800cdc8:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800ce48 <PDM_Filter_setConfig+0x1bc>
 800cdcc:	e7db      	b.n	800cd86 <PDM_Filter_setConfig+0xfa>
 800cdce:	4b1f      	ldr	r3, [pc, #124]	; (800ce4c <PDM_Filter_setConfig+0x1c0>)
 800cdd0:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdd2:	e7a7      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800cdd4:	4b1e      	ldr	r3, [pc, #120]	; (800ce50 <PDM_Filter_setConfig+0x1c4>)
 800cdd6:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdd8:	e7a4      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800cdda:	4b1e      	ldr	r3, [pc, #120]	; (800ce54 <PDM_Filter_setConfig+0x1c8>)
 800cddc:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdde:	e7a1      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800cde0:	4b1d      	ldr	r3, [pc, #116]	; (800ce58 <PDM_Filter_setConfig+0x1cc>)
 800cde2:	64a3      	str	r3, [r4, #72]	; 0x48
 800cde4:	e79e      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800cde6:	4b1d      	ldr	r3, [pc, #116]	; (800ce5c <PDM_Filter_setConfig+0x1d0>)
 800cde8:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdea:	e79b      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800cdec:	4b1c      	ldr	r3, [pc, #112]	; (800ce60 <PDM_Filter_setConfig+0x1d4>)
 800cdee:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdf0:	e798      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800cdf2:	4b1c      	ldr	r3, [pc, #112]	; (800ce64 <PDM_Filter_setConfig+0x1d8>)
 800cdf4:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdf6:	e795      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800cdf8:	4b1b      	ldr	r3, [pc, #108]	; (800ce68 <PDM_Filter_setConfig+0x1dc>)
 800cdfa:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdfc:	e792      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800cdfe:	4b1b      	ldr	r3, [pc, #108]	; (800ce6c <PDM_Filter_setConfig+0x1e0>)
 800ce00:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce02:	e78f      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800ce04:	4b1a      	ldr	r3, [pc, #104]	; (800ce70 <PDM_Filter_setConfig+0x1e4>)
 800ce06:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce08:	e78c      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800ce0a:	4b1a      	ldr	r3, [pc, #104]	; (800ce74 <PDM_Filter_setConfig+0x1e8>)
 800ce0c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce0e:	e789      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800ce10:	4b19      	ldr	r3, [pc, #100]	; (800ce78 <PDM_Filter_setConfig+0x1ec>)
 800ce12:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce14:	e786      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800ce16:	4b19      	ldr	r3, [pc, #100]	; (800ce7c <PDM_Filter_setConfig+0x1f0>)
 800ce18:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce1a:	e783      	b.n	800cd24 <PDM_Filter_setConfig+0x98>
 800ce1c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ce1e:	42b3      	cmp	r3, r6
 800ce20:	f47f af6e 	bne.w	800cd00 <PDM_Filter_setConfig+0x74>
 800ce24:	886b      	ldrh	r3, [r5, #2]
 800ce26:	2008      	movs	r0, #8
 800ce28:	8663      	strh	r3, [r4, #50]	; 0x32
 800ce2a:	e775      	b.n	800cd18 <PDM_Filter_setConfig+0x8c>
 800ce2c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ce30:	fffffef0 	.word	0xfffffef0
 800ce34:	0800bfa5 	.word	0x0800bfa5
 800ce38:	0800d2b8 	.word	0x0800d2b8
 800ce3c:	42000000 	.word	0x42000000
 800ce40:	3d4ccccd 	.word	0x3d4ccccd
 800ce44:	4f800000 	.word	0x4f800000
 800ce48:	00000000 	.word	0x00000000
 800ce4c:	0800b3b1 	.word	0x0800b3b1
 800ce50:	0800b239 	.word	0x0800b239
 800ce54:	0800b129 	.word	0x0800b129
 800ce58:	0800bbed 	.word	0x0800bbed
 800ce5c:	0800b955 	.word	0x0800b955
 800ce60:	0800b71d 	.word	0x0800b71d
 800ce64:	0800b539 	.word	0x0800b539
 800ce68:	0800c1c1 	.word	0x0800c1c1
 800ce6c:	0800c085 	.word	0x0800c085
 800ce70:	0800c801 	.word	0x0800c801
 800ce74:	0800c605 	.word	0x0800c605
 800ce78:	0800c459 	.word	0x0800c459
 800ce7c:	0800c2ed 	.word	0x0800c2ed

0800ce80 <PDM_Filter>:
 800ce80:	b410      	push	{r4}
 800ce82:	4b0b      	ldr	r3, [pc, #44]	; (800ceb0 <PDM_Filter+0x30>)
 800ce84:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800ce86:	429c      	cmp	r4, r3
 800ce88:	d107      	bne.n	800ce9a <PDM_Filter+0x1a>
 800ce8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ce8c:	05dc      	lsls	r4, r3, #23
 800ce8e:	d508      	bpl.n	800cea2 <PDM_Filter+0x22>
 800ce90:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800ce92:	320c      	adds	r2, #12
 800ce94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce98:	4718      	bx	r3
 800ce9a:	2004      	movs	r0, #4
 800ce9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cea6:	bf14      	ite	ne
 800cea8:	2020      	movne	r0, #32
 800ceaa:	2030      	moveq	r0, #48	; 0x30
 800ceac:	e7f6      	b.n	800ce9c <PDM_Filter+0x1c>
 800ceae:	bf00      	nop
 800ceb0:	b5e8b5cd 	.word	0xb5e8b5cd

0800ceb4 <__errno>:
 800ceb4:	4b01      	ldr	r3, [pc, #4]	; (800cebc <__errno+0x8>)
 800ceb6:	6818      	ldr	r0, [r3, #0]
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	24000424 	.word	0x24000424

0800cec0 <__libc_init_array>:
 800cec0:	b570      	push	{r4, r5, r6, lr}
 800cec2:	4d0d      	ldr	r5, [pc, #52]	; (800cef8 <__libc_init_array+0x38>)
 800cec4:	4c0d      	ldr	r4, [pc, #52]	; (800cefc <__libc_init_array+0x3c>)
 800cec6:	1b64      	subs	r4, r4, r5
 800cec8:	10a4      	asrs	r4, r4, #2
 800ceca:	2600      	movs	r6, #0
 800cecc:	42a6      	cmp	r6, r4
 800cece:	d109      	bne.n	800cee4 <__libc_init_array+0x24>
 800ced0:	4d0b      	ldr	r5, [pc, #44]	; (800cf00 <__libc_init_array+0x40>)
 800ced2:	4c0c      	ldr	r4, [pc, #48]	; (800cf04 <__libc_init_array+0x44>)
 800ced4:	f000 f9e4 	bl	800d2a0 <_init>
 800ced8:	1b64      	subs	r4, r4, r5
 800ceda:	10a4      	asrs	r4, r4, #2
 800cedc:	2600      	movs	r6, #0
 800cede:	42a6      	cmp	r6, r4
 800cee0:	d105      	bne.n	800ceee <__libc_init_array+0x2e>
 800cee2:	bd70      	pop	{r4, r5, r6, pc}
 800cee4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cee8:	4798      	blx	r3
 800ceea:	3601      	adds	r6, #1
 800ceec:	e7ee      	b.n	800cecc <__libc_init_array+0xc>
 800ceee:	f855 3b04 	ldr.w	r3, [r5], #4
 800cef2:	4798      	blx	r3
 800cef4:	3601      	adds	r6, #1
 800cef6:	e7f2      	b.n	800cede <__libc_init_array+0x1e>
 800cef8:	0800d580 	.word	0x0800d580
 800cefc:	0800d580 	.word	0x0800d580
 800cf00:	0800d580 	.word	0x0800d580
 800cf04:	0800d584 	.word	0x0800d584

0800cf08 <memset>:
 800cf08:	4402      	add	r2, r0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d100      	bne.n	800cf12 <memset+0xa>
 800cf10:	4770      	bx	lr
 800cf12:	f803 1b01 	strb.w	r1, [r3], #1
 800cf16:	e7f9      	b.n	800cf0c <memset+0x4>

0800cf18 <checkint>:
 800cf18:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800cf1c:	2b7e      	cmp	r3, #126	; 0x7e
 800cf1e:	dd10      	ble.n	800cf42 <checkint+0x2a>
 800cf20:	2b96      	cmp	r3, #150	; 0x96
 800cf22:	dc0c      	bgt.n	800cf3e <checkint+0x26>
 800cf24:	2201      	movs	r2, #1
 800cf26:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cf2a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf2e:	1e5a      	subs	r2, r3, #1
 800cf30:	4202      	tst	r2, r0
 800cf32:	d106      	bne.n	800cf42 <checkint+0x2a>
 800cf34:	4203      	tst	r3, r0
 800cf36:	bf0c      	ite	eq
 800cf38:	2002      	moveq	r0, #2
 800cf3a:	2001      	movne	r0, #1
 800cf3c:	4770      	bx	lr
 800cf3e:	2002      	movs	r0, #2
 800cf40:	4770      	bx	lr
 800cf42:	2000      	movs	r0, #0
 800cf44:	4770      	bx	lr
	...

0800cf48 <powf>:
 800cf48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf4a:	ee10 1a10 	vmov	r1, s0
 800cf4e:	ee10 6a90 	vmov	r6, s1
 800cf52:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800cf56:	0072      	lsls	r2, r6, #1
 800cf58:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800cf5c:	b085      	sub	sp, #20
 800cf5e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800cf62:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800cf66:	d256      	bcs.n	800d016 <powf+0xce>
 800cf68:	4298      	cmp	r0, r3
 800cf6a:	d256      	bcs.n	800d01a <powf+0xd2>
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800cf72:	4ea3      	ldr	r6, [pc, #652]	; (800d200 <powf+0x2b8>)
 800cf74:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800cf78:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800cf7c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800cf80:	0dd2      	lsrs	r2, r2, #23
 800cf82:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800cf86:	05d2      	lsls	r2, r2, #23
 800cf88:	1a8b      	subs	r3, r1, r2
 800cf8a:	ed97 5b00 	vldr	d5, [r7]
 800cf8e:	ee07 3a90 	vmov	s15, r3
 800cf92:	15d2      	asrs	r2, r2, #23
 800cf94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cf98:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cf9c:	ed97 5b02 	vldr	d5, [r7, #8]
 800cfa0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800cfa4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800cfa8:	ee07 2a90 	vmov	s15, r2
 800cfac:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800cfb0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cfb4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cfb8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800cfbc:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800cfc0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cfc4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800cfc8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cfcc:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800cfd0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800cfd4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800cfd8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800cfdc:	eea5 7b01 	vfma.f64	d7, d5, d1
 800cfe0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cfe4:	ee10 1a90 	vmov	r1, s1
 800cfe8:	2300      	movs	r3, #0
 800cfea:	2700      	movs	r7, #0
 800cfec:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800cff0:	f248 06be 	movw	r6, #32958	; 0x80be
 800cff4:	429f      	cmp	r7, r3
 800cff6:	bf08      	it	eq
 800cff8:	4296      	cmpeq	r6, r2
 800cffa:	f080 80b1 	bcs.w	800d160 <powf+0x218>
 800cffe:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800d1e0 <powf+0x298>
 800d002:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00a:	dd79      	ble.n	800d100 <powf+0x1b8>
 800d00c:	b005      	add	sp, #20
 800d00e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d012:	f000 b91f 	b.w	800d254 <__math_oflowf>
 800d016:	4298      	cmp	r0, r3
 800d018:	d32d      	bcc.n	800d076 <powf+0x12e>
 800d01a:	b952      	cbnz	r2, 800d032 <powf+0xea>
 800d01c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800d020:	005b      	lsls	r3, r3, #1
 800d022:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800d026:	f240 80cd 	bls.w	800d1c4 <powf+0x27c>
 800d02a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800d02e:	b005      	add	sp, #20
 800d030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d032:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800d036:	d105      	bne.n	800d044 <powf+0xfc>
 800d038:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800d03c:	0076      	lsls	r6, r6, #1
 800d03e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800d042:	e7f0      	b.n	800d026 <powf+0xde>
 800d044:	004b      	lsls	r3, r1, #1
 800d046:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800d04a:	d8ee      	bhi.n	800d02a <powf+0xe2>
 800d04c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800d050:	d1eb      	bne.n	800d02a <powf+0xe2>
 800d052:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d056:	f000 80b5 	beq.w	800d1c4 <powf+0x27c>
 800d05a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d05e:	ea6f 0606 	mvn.w	r6, r6
 800d062:	bf34      	ite	cc
 800d064:	2300      	movcc	r3, #0
 800d066:	2301      	movcs	r3, #1
 800d068:	0ff6      	lsrs	r6, r6, #31
 800d06a:	42b3      	cmp	r3, r6
 800d06c:	f040 80ad 	bne.w	800d1ca <powf+0x282>
 800d070:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800d074:	e7db      	b.n	800d02e <powf+0xe6>
 800d076:	004f      	lsls	r7, r1, #1
 800d078:	1e7a      	subs	r2, r7, #1
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d31c      	bcc.n	800d0b8 <powf+0x170>
 800d07e:	2900      	cmp	r1, #0
 800d080:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d084:	da0f      	bge.n	800d0a6 <powf+0x15e>
 800d086:	ee10 0a90 	vmov	r0, s1
 800d08a:	f7ff ff45 	bl	800cf18 <checkint>
 800d08e:	2801      	cmp	r0, #1
 800d090:	d109      	bne.n	800d0a6 <powf+0x15e>
 800d092:	eeb1 0a40 	vneg.f32	s0, s0
 800d096:	b947      	cbnz	r7, 800d0aa <powf+0x162>
 800d098:	2e00      	cmp	r6, #0
 800d09a:	dac8      	bge.n	800d02e <powf+0xe6>
 800d09c:	b005      	add	sp, #20
 800d09e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d0a2:	f000 b8dd 	b.w	800d260 <__math_divzerof>
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	e7f5      	b.n	800d096 <powf+0x14e>
 800d0aa:	2e00      	cmp	r6, #0
 800d0ac:	dabf      	bge.n	800d02e <powf+0xe6>
 800d0ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d0b2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d0b6:	e7ba      	b.n	800d02e <powf+0xe6>
 800d0b8:	2900      	cmp	r1, #0
 800d0ba:	da1f      	bge.n	800d0fc <powf+0x1b4>
 800d0bc:	ee10 0a90 	vmov	r0, s1
 800d0c0:	f7ff ff2a 	bl	800cf18 <checkint>
 800d0c4:	b920      	cbnz	r0, 800d0d0 <powf+0x188>
 800d0c6:	b005      	add	sp, #20
 800d0c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d0cc:	f000 b8d8 	b.w	800d280 <__math_invalidf>
 800d0d0:	2801      	cmp	r0, #1
 800d0d2:	bf14      	ite	ne
 800d0d4:	2000      	movne	r0, #0
 800d0d6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d0da:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d0de:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800d0e2:	f4bf af44 	bcs.w	800cf6e <powf+0x26>
 800d0e6:	eddf 7a47 	vldr	s15, [pc, #284]	; 800d204 <powf+0x2bc>
 800d0ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d0ee:	ee10 3a10 	vmov	r3, s0
 800d0f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0f6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800d0fa:	e738      	b.n	800cf6e <powf+0x26>
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	e7ee      	b.n	800d0de <powf+0x196>
 800d100:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800d1e8 <powf+0x2a0>
 800d104:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10c:	dd10      	ble.n	800d130 <powf+0x1e8>
 800d10e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800d112:	2800      	cmp	r0, #0
 800d114:	d15c      	bne.n	800d1d0 <powf+0x288>
 800d116:	9302      	str	r3, [sp, #8]
 800d118:	eddd 7a02 	vldr	s15, [sp, #8]
 800d11c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d120:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d124:	eef4 7a47 	vcmp.f32	s15, s14
 800d128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d12c:	f47f af6e 	bne.w	800d00c <powf+0xc4>
 800d130:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d1f0 <powf+0x2a8>
 800d134:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d13c:	d804      	bhi.n	800d148 <powf+0x200>
 800d13e:	b005      	add	sp, #20
 800d140:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d144:	f000 b87a 	b.w	800d23c <__math_uflowf>
 800d148:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800d1f8 <powf+0x2b0>
 800d14c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d154:	d504      	bpl.n	800d160 <powf+0x218>
 800d156:	b005      	add	sp, #20
 800d158:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d15c:	f000 b874 	b.w	800d248 <__math_may_uflowf>
 800d160:	4b29      	ldr	r3, [pc, #164]	; (800d208 <powf+0x2c0>)
 800d162:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800d166:	ee30 6b07 	vadd.f64	d6, d0, d7
 800d16a:	ed8d 6b00 	vstr	d6, [sp]
 800d16e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d172:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d176:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d17a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d17e:	f006 011f 	and.w	r1, r6, #31
 800d182:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d186:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800d18a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800d18e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800d192:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800d196:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d19a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800d19e:	1836      	adds	r6, r6, r0
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	eb13 040c 	adds.w	r4, r3, ip
 800d1a6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800d1aa:	eb41 050e 	adc.w	r5, r1, lr
 800d1ae:	eea7 0b04 	vfma.f64	d0, d7, d4
 800d1b2:	ec45 4b17 	vmov	d7, r4, r5
 800d1b6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800d1ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d1be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d1c2:	e734      	b.n	800d02e <powf+0xe6>
 800d1c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d1c8:	e731      	b.n	800d02e <powf+0xe6>
 800d1ca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d20c <powf+0x2c4>
 800d1ce:	e72e      	b.n	800d02e <powf+0xe6>
 800d1d0:	9303      	str	r3, [sp, #12]
 800d1d2:	eddd 7a03 	vldr	s15, [sp, #12]
 800d1d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d1da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1de:	e7a1      	b.n	800d124 <powf+0x1dc>
 800d1e0:	ffd1d571 	.word	0xffd1d571
 800d1e4:	405fffff 	.word	0x405fffff
 800d1e8:	ffa3aae2 	.word	0xffa3aae2
 800d1ec:	405fffff 	.word	0x405fffff
 800d1f0:	00000000 	.word	0x00000000
 800d1f4:	c062c000 	.word	0xc062c000
 800d1f8:	00000000 	.word	0x00000000
 800d1fc:	c062a000 	.word	0xc062a000
 800d200:	0800d310 	.word	0x0800d310
 800d204:	4b000000 	.word	0x4b000000
 800d208:	0800d438 	.word	0x0800d438
 800d20c:	00000000 	.word	0x00000000

0800d210 <with_errnof>:
 800d210:	b513      	push	{r0, r1, r4, lr}
 800d212:	4604      	mov	r4, r0
 800d214:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d218:	f7ff fe4c 	bl	800ceb4 <__errno>
 800d21c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d220:	6004      	str	r4, [r0, #0]
 800d222:	b002      	add	sp, #8
 800d224:	bd10      	pop	{r4, pc}

0800d226 <xflowf>:
 800d226:	b130      	cbz	r0, 800d236 <xflowf+0x10>
 800d228:	eef1 7a40 	vneg.f32	s15, s0
 800d22c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d230:	2022      	movs	r0, #34	; 0x22
 800d232:	f7ff bfed 	b.w	800d210 <with_errnof>
 800d236:	eef0 7a40 	vmov.f32	s15, s0
 800d23a:	e7f7      	b.n	800d22c <xflowf+0x6>

0800d23c <__math_uflowf>:
 800d23c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d244 <__math_uflowf+0x8>
 800d240:	f7ff bff1 	b.w	800d226 <xflowf>
 800d244:	10000000 	.word	0x10000000

0800d248 <__math_may_uflowf>:
 800d248:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d250 <__math_may_uflowf+0x8>
 800d24c:	f7ff bfeb 	b.w	800d226 <xflowf>
 800d250:	1a200000 	.word	0x1a200000

0800d254 <__math_oflowf>:
 800d254:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d25c <__math_oflowf+0x8>
 800d258:	f7ff bfe5 	b.w	800d226 <xflowf>
 800d25c:	70000000 	.word	0x70000000

0800d260 <__math_divzerof>:
 800d260:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d264:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d268:	2800      	cmp	r0, #0
 800d26a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d26e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d27c <__math_divzerof+0x1c>
 800d272:	2022      	movs	r0, #34	; 0x22
 800d274:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d278:	f7ff bfca 	b.w	800d210 <with_errnof>
 800d27c:	00000000 	.word	0x00000000

0800d280 <__math_invalidf>:
 800d280:	eef0 7a40 	vmov.f32	s15, s0
 800d284:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d288:	eef4 7a67 	vcmp.f32	s15, s15
 800d28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d290:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d294:	d602      	bvs.n	800d29c <__math_invalidf+0x1c>
 800d296:	2021      	movs	r0, #33	; 0x21
 800d298:	f7ff bfba 	b.w	800d210 <with_errnof>
 800d29c:	4770      	bx	lr
	...

0800d2a0 <_init>:
 800d2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a2:	bf00      	nop
 800d2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2a6:	bc08      	pop	{r3}
 800d2a8:	469e      	mov	lr, r3
 800d2aa:	4770      	bx	lr

0800d2ac <_fini>:
 800d2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ae:	bf00      	nop
 800d2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2b2:	bc08      	pop	{r3}
 800d2b4:	469e      	mov	lr, r3
 800d2b6:	4770      	bx	lr
