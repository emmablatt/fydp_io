
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009420  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080096f0  080096f0  000196f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000474  24000000  080099b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006e4  24000474  08009e2c  00020474  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000b58  08009e2c  00020b58  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001faa6  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002f26  00000000  00000000  0003ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d20  00000000  00000000  00042e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c30  00000000  00000000  00043b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000035a3  00000000  00000000  000447c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013348  00000000  00000000  00047d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015030d  00000000  00000000  0005b0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001ab3b8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000036a4  00000000  00000000  001ab48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080096d8 	.word	0x080096d8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	080096d8 	.word	0x080096d8

08000310 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d002      	beq.n	800032e <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8000328:	f06f 0301 	mvn.w	r3, #1
 800032c:	e085      	b.n	800043a <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 800032e:	4b45      	ldr	r3, [pc, #276]	; (8000444 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000334:	4a43      	ldr	r2, [pc, #268]	; (8000444 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800033a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033e:	4b41      	ldr	r3, [pc, #260]	; (8000444 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e06e      	b.n	8000430 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8000352:	4a3d      	ldr	r2, [pc, #244]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	214c      	movs	r1, #76	; 0x4c
 8000358:	fb01 f303 	mul.w	r3, r1, r3
 800035c:	4413      	add	r3, r2
 800035e:	2201      	movs	r2, #1
 8000360:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8000362:	4a39      	ldr	r2, [pc, #228]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	214c      	movs	r1, #76	; 0x4c
 8000368:	fb01 f303 	mul.w	r3, r1, r3
 800036c:	4413      	add	r3, r2
 800036e:	3302      	adds	r3, #2
 8000370:	2200      	movs	r2, #0
 8000372:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8000374:	4a34      	ldr	r2, [pc, #208]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	214c      	movs	r1, #76	; 0x4c
 800037a:	fb01 f303 	mul.w	r3, r1, r3
 800037e:	4413      	add	r3, r2
 8000380:	3304      	adds	r3, #4
 8000382:	4a32      	ldr	r2, [pc, #200]	; (800044c <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 8000384:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	b298      	uxth	r0, r3
 800038a:	4a2f      	ldr	r2, [pc, #188]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	214c      	movs	r1, #76	; 0x4c
 8000390:	fb01 f303 	mul.w	r3, r1, r3
 8000394:	4413      	add	r3, r2
 8000396:	330a      	adds	r3, #10
 8000398:	4602      	mov	r2, r0
 800039a:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	b298      	uxth	r0, r3
 80003a0:	4a29      	ldr	r2, [pc, #164]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	214c      	movs	r1, #76	; 0x4c
 80003a6:	fb01 f303 	mul.w	r3, r1, r3
 80003aa:	4413      	add	r3, r2
 80003ac:	3308      	adds	r3, #8
 80003ae:	4602      	mov	r2, r0
 80003b0:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	224c      	movs	r2, #76	; 0x4c
 80003b6:	fb02 f303 	mul.w	r3, r2, r3
 80003ba:	4a23      	ldr	r2, [pc, #140]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003bc:	4413      	add	r3, r2
 80003be:	4618      	mov	r0, r3
 80003c0:	f008 fdca 	bl	8008f58 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	4a22      	ldr	r2, [pc, #136]	; (8000450 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 80003c8:	fba2 2303 	umull	r2, r3, r2, r3
 80003cc:	099b      	lsrs	r3, r3, #6
 80003ce:	b298      	uxth	r0, r3
 80003d0:	4920      	ldr	r1, [pc, #128]	; (8000454 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80003d2:	697a      	ldr	r2, [r7, #20]
 80003d4:	4613      	mov	r3, r2
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	4413      	add	r3, r2
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	440b      	add	r3, r1
 80003de:	3302      	adds	r3, #2
 80003e0:	4602      	mov	r2, r0
 80003e2:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 80003e4:	491b      	ldr	r1, [pc, #108]	; (8000454 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80003e6:	697a      	ldr	r2, [r7, #20]
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	440b      	add	r3, r1
 80003f2:	3304      	adds	r3, #4
 80003f4:	2218      	movs	r2, #24
 80003f6:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 80003f8:	4916      	ldr	r1, [pc, #88]	; (8000454 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	4613      	mov	r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4413      	add	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	440b      	add	r3, r1
 8000406:	2207      	movs	r2, #7
 8000408:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	224c      	movs	r2, #76	; 0x4c
 800040e:	fb02 f303 	mul.w	r3, r2, r3
 8000412:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000414:	1898      	adds	r0, r3, r2
 8000416:	697a      	ldr	r2, [r7, #20]
 8000418:	4613      	mov	r3, r2
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	4413      	add	r3, r2
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	4a0c      	ldr	r2, [pc, #48]	; (8000454 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8000422:	4413      	add	r3, r2
 8000424:	4619      	mov	r1, r3
 8000426:	f008 fe67 	bl	80090f8 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	3301      	adds	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	697a      	ldr	r2, [r7, #20]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	429a      	cmp	r2, r3
 8000436:	d38c      	bcc.n	8000352 <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	3718      	adds	r7, #24
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	58024400 	.word	0x58024400
 8000448:	240006b0 	.word	0x240006b0
 800044c:	7e809d48 	.word	0x7e809d48
 8000450:	10624dd3 	.word	0x10624dd3
 8000454:	24000748 	.word	0x24000748

08000458 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d003      	beq.n	8000476 <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800046e:	f06f 0301 	mvn.w	r3, #1
 8000472:	617b      	str	r3, [r7, #20]
 8000474:	e01d      	b.n	80004b2 <BSP_AUDIO_IN_RecordPDM+0x5a>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[Instance], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	22b4      	movs	r2, #180	; 0xb4
 800047a:	fb02 f303 	mul.w	r3, r2, r3
 800047e:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <BSP_AUDIO_IN_RecordPDM+0x64>)
 8000480:	1898      	adds	r0, r3, r2
 8000482:	490f      	ldr	r1, [pc, #60]	; (80004c0 <BSP_AUDIO_IN_RecordPDM+0x68>)
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	4613      	mov	r3, r2
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	4413      	add	r3, r2
 800048c:	011b      	lsls	r3, r3, #4
 800048e:	440b      	add	r3, r1
 8000490:	330c      	adds	r3, #12
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	fbb2 f3f3 	udiv	r3, r2, r3
 800049c:	b29b      	uxth	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	68b9      	ldr	r1, [r7, #8]
 80004a2:	f006 f8ab 	bl	80065fc <HAL_SAI_Receive_DMA>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <BSP_AUDIO_IN_RecordPDM+0x5a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80004ac:	f06f 0303 	mvn.w	r3, #3
 80004b0:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 80004b2:	697b      	ldr	r3, [r7, #20]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3718      	adds	r7, #24
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	24000548 	.word	0x24000548
 80004c0:	240009b0 	.word	0x240009b0

080004c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ca:	2003      	movs	r0, #3
 80004cc:	f000 f95c 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80004d0:	f003 fbea 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 80004d4:	4602      	mov	r2, r0
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <HAL_Init+0x68>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	f003 030f 	and.w	r3, r3, #15
 80004e0:	4913      	ldr	r1, [pc, #76]	; (8000530 <HAL_Init+0x6c>)
 80004e2:	5ccb      	ldrb	r3, [r1, r3]
 80004e4:	f003 031f 	and.w	r3, r3, #31
 80004e8:	fa22 f303 	lsr.w	r3, r2, r3
 80004ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_Init+0x68>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 030f 	and.w	r3, r3, #15
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_Init+0x6c>)
 80004f8:	5cd3      	ldrb	r3, [r2, r3]
 80004fa:	f003 031f 	and.w	r3, r3, #31
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	fa22 f303 	lsr.w	r3, r2, r3
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <HAL_Init+0x70>)
 8000506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <HAL_Init+0x74>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800050e:	2000      	movs	r0, #0
 8000510:	f000 f814 	bl	800053c <HAL_InitTick>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800051a:	2301      	movs	r3, #1
 800051c:	e002      	b.n	8000524 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800051e:	f006 fd91 	bl	8007044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	58024400 	.word	0x58024400
 8000530:	08009730 	.word	0x08009730
 8000534:	2400040c 	.word	0x2400040c
 8000538:	24000408 	.word	0x24000408

0800053c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_InitTick+0x60>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d101      	bne.n	8000550 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800054c:	2301      	movs	r3, #1
 800054e:	e021      	b.n	8000594 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <HAL_InitTick+0x64>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_InitTick+0x60>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f941 	bl	80007ee <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 f90b 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x68>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	24000404 	.word	0x24000404
 80005a0:	24000408 	.word	0x24000408
 80005a4:	24000400 	.word	0x24000400

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	24000404 	.word	0x24000404
 80005cc:	24000a40 	.word	0x24000a40

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	24000a40 	.word	0x24000a40

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <__NVIC_SetPriorityGrouping+0x40>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	4313      	orrs	r3, r2
 8000614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <__NVIC_SetPriorityGrouping+0x40>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	60d3      	str	r3, [r2, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00
 800062c:	05fa0000 	.word	0x05fa0000

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db0b      	blt.n	8000676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	4907      	ldr	r1, [pc, #28]	; (8000684 <__NVIC_EnableIRQ+0x38>)
 8000666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	2001      	movs	r0, #1
 800066e:	fa00 f202 	lsl.w	r2, r0, r2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	490c      	ldr	r1, [pc, #48]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 80006a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43da      	mvns	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	401a      	ands	r2, r3
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43d9      	mvns	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000768:	f7ff ff8e 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff29 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff40 	bl	8000630 <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff90 	bl	80006dc <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5f 	bl	8000688 <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff33 	bl	800064c <__NVIC_EnableIRQ>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffa4 	bl	8000744 <SysTick_Config>
 80007fc:	4603      	mov	r3, r0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e054      	b.n	80008c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7f5b      	ldrb	r3, [r3, #29]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d105      	bne.n	8000830 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f006 fc24 	bl	8007078 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2202      	movs	r2, #2
 8000834:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10c      	bne.n	8000858 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_CRC_Init+0xc4>)
 8000844:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f022 0218 	bic.w	r2, r2, #24
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	e00c      	b.n	8000872 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6899      	ldr	r1, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	461a      	mov	r2, r3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f834 	bl	80008d0 <HAL_CRCEx_Polynomial_Set>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e028      	b.n	80008c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	795b      	ldrb	r3, [r3, #5]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d105      	bne.n	8000886 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	e004      	b.n	8000890 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	6912      	ldr	r2, [r2, #16]
 800088e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	430a      	orrs	r2, r1
 80008a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	699a      	ldr	r2, [r3, #24]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	04c11db7 	.word	0x04c11db7

080008d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008dc:	2300      	movs	r3, #0
 80008de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80008e0:	231f      	movs	r3, #31
 80008e2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80008e4:	bf00      	nop
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	613a      	str	r2, [r7, #16]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d009      	beq.n	8000904 <HAL_CRCEx_Polynomial_Set+0x34>
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	f003 031f 	and.w	r3, r3, #31
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	fa22 f303 	lsr.w	r3, r2, r3
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f0      	beq.n	80008e6 <HAL_CRCEx_Polynomial_Set+0x16>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b18      	cmp	r3, #24
 8000908:	d846      	bhi.n	8000998 <HAL_CRCEx_Polynomial_Set+0xc8>
 800090a:	a201      	add	r2, pc, #4	; (adr r2, 8000910 <HAL_CRCEx_Polynomial_Set+0x40>)
 800090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000910:	0800099f 	.word	0x0800099f
 8000914:	08000999 	.word	0x08000999
 8000918:	08000999 	.word	0x08000999
 800091c:	08000999 	.word	0x08000999
 8000920:	08000999 	.word	0x08000999
 8000924:	08000999 	.word	0x08000999
 8000928:	08000999 	.word	0x08000999
 800092c:	08000999 	.word	0x08000999
 8000930:	0800098d 	.word	0x0800098d
 8000934:	08000999 	.word	0x08000999
 8000938:	08000999 	.word	0x08000999
 800093c:	08000999 	.word	0x08000999
 8000940:	08000999 	.word	0x08000999
 8000944:	08000999 	.word	0x08000999
 8000948:	08000999 	.word	0x08000999
 800094c:	08000999 	.word	0x08000999
 8000950:	08000981 	.word	0x08000981
 8000954:	08000999 	.word	0x08000999
 8000958:	08000999 	.word	0x08000999
 800095c:	08000999 	.word	0x08000999
 8000960:	08000999 	.word	0x08000999
 8000964:	08000999 	.word	0x08000999
 8000968:	08000999 	.word	0x08000999
 800096c:	08000999 	.word	0x08000999
 8000970:	08000975 	.word	0x08000975
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	2b06      	cmp	r3, #6
 8000978:	d913      	bls.n	80009a2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800097e:	e010      	b.n	80009a2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	2b07      	cmp	r3, #7
 8000984:	d90f      	bls.n	80009a6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800098a:	e00c      	b.n	80009a6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d90b      	bls.n	80009aa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000996:	e008      	b.n	80009aa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	75fb      	strb	r3, [r7, #23]
      break;
 800099c:	e006      	b.n	80009ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800099e:	bf00      	nop
 80009a0:	e004      	b.n	80009ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80009a2:	bf00      	nop
 80009a4:	e002      	b.n	80009ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80009a6:	bf00      	nop
 80009a8:	e000      	b.n	80009ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80009aa:	bf00      	nop
  }
  if (status == HAL_OK)
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10d      	bne.n	80009ce <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f023 0118 	bic.w	r1, r3, #24
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff fdf4 	bl	80005d0 <HAL_GetTick>
 80009e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d101      	bne.n	80009f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e314      	b.n	800101e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a66      	ldr	r2, [pc, #408]	; (8000b94 <HAL_DMA_Init+0x1b8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d04a      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a65      	ldr	r2, [pc, #404]	; (8000b98 <HAL_DMA_Init+0x1bc>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d045      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a63      	ldr	r2, [pc, #396]	; (8000b9c <HAL_DMA_Init+0x1c0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d040      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a62      	ldr	r2, [pc, #392]	; (8000ba0 <HAL_DMA_Init+0x1c4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d03b      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a60      	ldr	r2, [pc, #384]	; (8000ba4 <HAL_DMA_Init+0x1c8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d036      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a5f      	ldr	r2, [pc, #380]	; (8000ba8 <HAL_DMA_Init+0x1cc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d031      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a5d      	ldr	r2, [pc, #372]	; (8000bac <HAL_DMA_Init+0x1d0>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d02c      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a5c      	ldr	r2, [pc, #368]	; (8000bb0 <HAL_DMA_Init+0x1d4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d027      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a5a      	ldr	r2, [pc, #360]	; (8000bb4 <HAL_DMA_Init+0x1d8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d022      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a59      	ldr	r2, [pc, #356]	; (8000bb8 <HAL_DMA_Init+0x1dc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d01d      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a57      	ldr	r2, [pc, #348]	; (8000bbc <HAL_DMA_Init+0x1e0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d018      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a56      	ldr	r2, [pc, #344]	; (8000bc0 <HAL_DMA_Init+0x1e4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d013      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a54      	ldr	r2, [pc, #336]	; (8000bc4 <HAL_DMA_Init+0x1e8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00e      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <HAL_DMA_Init+0x1ec>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d009      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <HAL_DMA_Init+0x1f0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d004      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_DMA_Init+0x1f4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d101      	bne.n	8000a98 <HAL_DMA_Init+0xbc>
 8000a94:	2301      	movs	r3, #1
 8000a96:	e000      	b.n	8000a9a <HAL_DMA_Init+0xbe>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 813c 	beq.w	8000d18 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <HAL_DMA_Init+0x1b8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d04a      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <HAL_DMA_Init+0x1bc>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d045      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <HAL_DMA_Init+0x1c0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d040      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a33      	ldr	r2, [pc, #204]	; (8000ba0 <HAL_DMA_Init+0x1c4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d03b      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a31      	ldr	r2, [pc, #196]	; (8000ba4 <HAL_DMA_Init+0x1c8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d036      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <HAL_DMA_Init+0x1cc>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d031      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a2e      	ldr	r2, [pc, #184]	; (8000bac <HAL_DMA_Init+0x1d0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d02c      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a2d      	ldr	r2, [pc, #180]	; (8000bb0 <HAL_DMA_Init+0x1d4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d027      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <HAL_DMA_Init+0x1d8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d022      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a2a      	ldr	r2, [pc, #168]	; (8000bb8 <HAL_DMA_Init+0x1dc>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d01d      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <HAL_DMA_Init+0x1e0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d018      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a27      	ldr	r2, [pc, #156]	; (8000bc0 <HAL_DMA_Init+0x1e4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d013      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a25      	ldr	r2, [pc, #148]	; (8000bc4 <HAL_DMA_Init+0x1e8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d00e      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <HAL_DMA_Init+0x1ec>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d009      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <HAL_DMA_Init+0x1f0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d004      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a21      	ldr	r2, [pc, #132]	; (8000bd0 <HAL_DMA_Init+0x1f4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d108      	bne.n	8000b62 <HAL_DMA_Init+0x186>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0201 	bic.w	r2, r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	e007      	b.n	8000b72 <HAL_DMA_Init+0x196>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0201 	bic.w	r2, r2, #1
 8000b70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000b72:	e02f      	b.n	8000bd4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b74:	f7ff fd2c 	bl	80005d0 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d928      	bls.n	8000bd4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2220      	movs	r2, #32
 8000b86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e244      	b.n	800101e <HAL_DMA_Init+0x642>
 8000b94:	40020010 	.word	0x40020010
 8000b98:	40020028 	.word	0x40020028
 8000b9c:	40020040 	.word	0x40020040
 8000ba0:	40020058 	.word	0x40020058
 8000ba4:	40020070 	.word	0x40020070
 8000ba8:	40020088 	.word	0x40020088
 8000bac:	400200a0 	.word	0x400200a0
 8000bb0:	400200b8 	.word	0x400200b8
 8000bb4:	40020410 	.word	0x40020410
 8000bb8:	40020428 	.word	0x40020428
 8000bbc:	40020440 	.word	0x40020440
 8000bc0:	40020458 	.word	0x40020458
 8000bc4:	40020470 	.word	0x40020470
 8000bc8:	40020488 	.word	0x40020488
 8000bcc:	400204a0 	.word	0x400204a0
 8000bd0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1c8      	bne.n	8000b74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	4b84      	ldr	r3, [pc, #528]	; (8000e00 <HAL_DMA_Init+0x424>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000bfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d107      	bne.n	8000c38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	4313      	orrs	r3, r2
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b28      	cmp	r3, #40	; 0x28
 8000c3e:	d903      	bls.n	8000c48 <HAL_DMA_Init+0x26c>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b2e      	cmp	r3, #46	; 0x2e
 8000c46:	d91f      	bls.n	8000c88 <HAL_DMA_Init+0x2ac>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b3e      	cmp	r3, #62	; 0x3e
 8000c4e:	d903      	bls.n	8000c58 <HAL_DMA_Init+0x27c>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b42      	cmp	r3, #66	; 0x42
 8000c56:	d917      	bls.n	8000c88 <HAL_DMA_Init+0x2ac>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b46      	cmp	r3, #70	; 0x46
 8000c5e:	d903      	bls.n	8000c68 <HAL_DMA_Init+0x28c>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b48      	cmp	r3, #72	; 0x48
 8000c66:	d90f      	bls.n	8000c88 <HAL_DMA_Init+0x2ac>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b4e      	cmp	r3, #78	; 0x4e
 8000c6e:	d903      	bls.n	8000c78 <HAL_DMA_Init+0x29c>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b52      	cmp	r3, #82	; 0x52
 8000c76:	d907      	bls.n	8000c88 <HAL_DMA_Init+0x2ac>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b73      	cmp	r3, #115	; 0x73
 8000c7e:	d905      	bls.n	8000c8c <HAL_DMA_Init+0x2b0>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b77      	cmp	r3, #119	; 0x77
 8000c86:	d801      	bhi.n	8000c8c <HAL_DMA_Init+0x2b0>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_DMA_Init+0x2b2>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c98:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f023 0307 	bic.w	r3, r3, #7
 8000cb0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d117      	bne.n	8000cf4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00e      	beq.n	8000cf4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f001 fde0 	bl	800289c <DMA_CheckFifoParam>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d008      	beq.n	8000cf4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2240      	movs	r2, #64	; 0x40
 8000ce6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2201      	movs	r2, #1
 8000cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e194      	b.n	800101e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f001 fd1b 	bl	8002738 <DMA_CalcBaseAndBitshift>
 8000d02:	4603      	mov	r3, r0
 8000d04:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d0a:	f003 031f 	and.w	r3, r3, #31
 8000d0e:	223f      	movs	r2, #63	; 0x3f
 8000d10:	409a      	lsls	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	e0ca      	b.n	8000eae <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a39      	ldr	r2, [pc, #228]	; (8000e04 <HAL_DMA_Init+0x428>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d022      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a38      	ldr	r2, [pc, #224]	; (8000e08 <HAL_DMA_Init+0x42c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d01d      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a36      	ldr	r2, [pc, #216]	; (8000e0c <HAL_DMA_Init+0x430>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d018      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a35      	ldr	r2, [pc, #212]	; (8000e10 <HAL_DMA_Init+0x434>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d013      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a33      	ldr	r2, [pc, #204]	; (8000e14 <HAL_DMA_Init+0x438>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00e      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a32      	ldr	r2, [pc, #200]	; (8000e18 <HAL_DMA_Init+0x43c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d009      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a30      	ldr	r2, [pc, #192]	; (8000e1c <HAL_DMA_Init+0x440>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d004      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <HAL_DMA_Init+0x444>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d101      	bne.n	8000d6c <HAL_DMA_Init+0x390>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <HAL_DMA_Init+0x392>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8094 	beq.w	8000e9c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <HAL_DMA_Init+0x428>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d021      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <HAL_DMA_Init+0x42c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d01c      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_DMA_Init+0x430>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d017      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <HAL_DMA_Init+0x434>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d012      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <HAL_DMA_Init+0x438>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <HAL_DMA_Init+0x43c>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d008      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_DMA_Init+0x440>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d003      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_DMA_Init+0x444>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_DMA_Init+0x448>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	2b40      	cmp	r3, #64	; 0x40
 8000dea:	d01d      	beq.n	8000e28 <HAL_DMA_Init+0x44c>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2b80      	cmp	r3, #128	; 0x80
 8000df2:	d102      	bne.n	8000dfa <HAL_DMA_Init+0x41e>
 8000df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000df8:	e017      	b.n	8000e2a <HAL_DMA_Init+0x44e>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e015      	b.n	8000e2a <HAL_DMA_Init+0x44e>
 8000dfe:	bf00      	nop
 8000e00:	fe10803f 	.word	0xfe10803f
 8000e04:	58025408 	.word	0x58025408
 8000e08:	5802541c 	.word	0x5802541c
 8000e0c:	58025430 	.word	0x58025430
 8000e10:	58025444 	.word	0x58025444
 8000e14:	58025458 	.word	0x58025458
 8000e18:	5802546c 	.word	0x5802546c
 8000e1c:	58025480 	.word	0x58025480
 8000e20:	58025494 	.word	0x58025494
 8000e24:	fffe000f 	.word	0xfffe000f
 8000e28:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68d2      	ldr	r2, [r2, #12]
 8000e2e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000e58:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b6e      	ldr	r3, [pc, #440]	; (8001028 <HAL_DMA_Init+0x64c>)
 8000e70:	4413      	add	r3, r2
 8000e72:	4a6e      	ldr	r2, [pc, #440]	; (800102c <HAL_DMA_Init+0x650>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	009a      	lsls	r2, r3, #2
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f001 fc59 	bl	8002738 <DMA_CalcBaseAndBitshift>
 8000e86:	4603      	mov	r3, r0
 8000e88:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	2201      	movs	r2, #1
 8000e94:	409a      	lsls	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	e008      	b.n	8000eae <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2240      	movs	r2, #64	; 0x40
 8000ea0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e0b7      	b.n	800101e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a5f      	ldr	r2, [pc, #380]	; (8001030 <HAL_DMA_Init+0x654>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d072      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a5d      	ldr	r2, [pc, #372]	; (8001034 <HAL_DMA_Init+0x658>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d06d      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a5c      	ldr	r2, [pc, #368]	; (8001038 <HAL_DMA_Init+0x65c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d068      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a5a      	ldr	r2, [pc, #360]	; (800103c <HAL_DMA_Init+0x660>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d063      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a59      	ldr	r2, [pc, #356]	; (8001040 <HAL_DMA_Init+0x664>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d05e      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a57      	ldr	r2, [pc, #348]	; (8001044 <HAL_DMA_Init+0x668>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d059      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a56      	ldr	r2, [pc, #344]	; (8001048 <HAL_DMA_Init+0x66c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d054      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a54      	ldr	r2, [pc, #336]	; (800104c <HAL_DMA_Init+0x670>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d04f      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a53      	ldr	r2, [pc, #332]	; (8001050 <HAL_DMA_Init+0x674>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d04a      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a51      	ldr	r2, [pc, #324]	; (8001054 <HAL_DMA_Init+0x678>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d045      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a50      	ldr	r2, [pc, #320]	; (8001058 <HAL_DMA_Init+0x67c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d040      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a4e      	ldr	r2, [pc, #312]	; (800105c <HAL_DMA_Init+0x680>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d03b      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a4d      	ldr	r2, [pc, #308]	; (8001060 <HAL_DMA_Init+0x684>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d036      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a4b      	ldr	r2, [pc, #300]	; (8001064 <HAL_DMA_Init+0x688>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d031      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a4a      	ldr	r2, [pc, #296]	; (8001068 <HAL_DMA_Init+0x68c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d02c      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a48      	ldr	r2, [pc, #288]	; (800106c <HAL_DMA_Init+0x690>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d027      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a47      	ldr	r2, [pc, #284]	; (8001070 <HAL_DMA_Init+0x694>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d022      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a45      	ldr	r2, [pc, #276]	; (8001074 <HAL_DMA_Init+0x698>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01d      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a44      	ldr	r2, [pc, #272]	; (8001078 <HAL_DMA_Init+0x69c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d018      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a42      	ldr	r2, [pc, #264]	; (800107c <HAL_DMA_Init+0x6a0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a41      	ldr	r2, [pc, #260]	; (8001080 <HAL_DMA_Init+0x6a4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d00e      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a3f      	ldr	r2, [pc, #252]	; (8001084 <HAL_DMA_Init+0x6a8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d009      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a3e      	ldr	r2, [pc, #248]	; (8001088 <HAL_DMA_Init+0x6ac>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d004      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a3c      	ldr	r2, [pc, #240]	; (800108c <HAL_DMA_Init+0x6b0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_DMA_Init+0x5c6>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_DMA_Init+0x5c8>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d032      	beq.n	800100e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f001 fcf3 	bl	8002994 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b80      	cmp	r3, #128	; 0x80
 8000fb4:	d102      	bne.n	8000fbc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000fd0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d010      	beq.n	8000ffc <HAL_DMA_Init+0x620>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d80c      	bhi.n	8000ffc <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 fd70 	bl	8002ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	e008      	b.n	800100e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	a7fdabf8 	.word	0xa7fdabf8
 800102c:	cccccccd 	.word	0xcccccccd
 8001030:	40020010 	.word	0x40020010
 8001034:	40020028 	.word	0x40020028
 8001038:	40020040 	.word	0x40020040
 800103c:	40020058 	.word	0x40020058
 8001040:	40020070 	.word	0x40020070
 8001044:	40020088 	.word	0x40020088
 8001048:	400200a0 	.word	0x400200a0
 800104c:	400200b8 	.word	0x400200b8
 8001050:	40020410 	.word	0x40020410
 8001054:	40020428 	.word	0x40020428
 8001058:	40020440 	.word	0x40020440
 800105c:	40020458 	.word	0x40020458
 8001060:	40020470 	.word	0x40020470
 8001064:	40020488 	.word	0x40020488
 8001068:	400204a0 	.word	0x400204a0
 800106c:	400204b8 	.word	0x400204b8
 8001070:	58025408 	.word	0x58025408
 8001074:	5802541c 	.word	0x5802541c
 8001078:	58025430 	.word	0x58025430
 800107c:	58025444 	.word	0x58025444
 8001080:	58025458 	.word	0x58025458
 8001084:	5802546c 	.word	0x5802546c
 8001088:	58025480 	.word	0x58025480
 800108c:	58025494 	.word	0x58025494

08001090 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e226      	b.n	80014fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_DMA_Start_IT+0x2a>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e21f      	b.n	80014fa <HAL_DMA_Start_IT+0x46a>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	f040 820a 	bne.w	80014e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a68      	ldr	r2, [pc, #416]	; (8001284 <HAL_DMA_Start_IT+0x1f4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d04a      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a66      	ldr	r2, [pc, #408]	; (8001288 <HAL_DMA_Start_IT+0x1f8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d045      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a65      	ldr	r2, [pc, #404]	; (800128c <HAL_DMA_Start_IT+0x1fc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d040      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a63      	ldr	r2, [pc, #396]	; (8001290 <HAL_DMA_Start_IT+0x200>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d03b      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a62      	ldr	r2, [pc, #392]	; (8001294 <HAL_DMA_Start_IT+0x204>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d036      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a60      	ldr	r2, [pc, #384]	; (8001298 <HAL_DMA_Start_IT+0x208>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d031      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a5f      	ldr	r2, [pc, #380]	; (800129c <HAL_DMA_Start_IT+0x20c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d02c      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a5d      	ldr	r2, [pc, #372]	; (80012a0 <HAL_DMA_Start_IT+0x210>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d027      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a5c      	ldr	r2, [pc, #368]	; (80012a4 <HAL_DMA_Start_IT+0x214>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d022      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a5a      	ldr	r2, [pc, #360]	; (80012a8 <HAL_DMA_Start_IT+0x218>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01d      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a59      	ldr	r2, [pc, #356]	; (80012ac <HAL_DMA_Start_IT+0x21c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d018      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a57      	ldr	r2, [pc, #348]	; (80012b0 <HAL_DMA_Start_IT+0x220>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <HAL_DMA_Start_IT+0x224>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d00e      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a54      	ldr	r2, [pc, #336]	; (80012b8 <HAL_DMA_Start_IT+0x228>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d009      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a53      	ldr	r2, [pc, #332]	; (80012bc <HAL_DMA_Start_IT+0x22c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d004      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a51      	ldr	r2, [pc, #324]	; (80012c0 <HAL_DMA_Start_IT+0x230>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d108      	bne.n	8001190 <HAL_DMA_Start_IT+0x100>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_DMA_Start_IT+0x110>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f001 f912 	bl	80023d0 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a34      	ldr	r2, [pc, #208]	; (8001284 <HAL_DMA_Start_IT+0x1f4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d04a      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a33      	ldr	r2, [pc, #204]	; (8001288 <HAL_DMA_Start_IT+0x1f8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d045      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a31      	ldr	r2, [pc, #196]	; (800128c <HAL_DMA_Start_IT+0x1fc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d040      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a30      	ldr	r2, [pc, #192]	; (8001290 <HAL_DMA_Start_IT+0x200>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d03b      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2e      	ldr	r2, [pc, #184]	; (8001294 <HAL_DMA_Start_IT+0x204>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d036      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a2d      	ldr	r2, [pc, #180]	; (8001298 <HAL_DMA_Start_IT+0x208>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d031      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a2b      	ldr	r2, [pc, #172]	; (800129c <HAL_DMA_Start_IT+0x20c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d02c      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <HAL_DMA_Start_IT+0x210>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d027      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <HAL_DMA_Start_IT+0x214>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d022      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <HAL_DMA_Start_IT+0x218>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d01d      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a25      	ldr	r2, [pc, #148]	; (80012ac <HAL_DMA_Start_IT+0x21c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d018      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_DMA_Start_IT+0x220>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d013      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <HAL_DMA_Start_IT+0x224>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00e      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <HAL_DMA_Start_IT+0x228>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d009      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_DMA_Start_IT+0x22c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d004      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <HAL_DMA_Start_IT+0x230>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d101      	bne.n	8001250 <HAL_DMA_Start_IT+0x1c0>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <HAL_DMA_Start_IT+0x1c2>
 8001250:	2300      	movs	r3, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d036      	beq.n	80012c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 021e 	bic.w	r2, r3, #30
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0216 	orr.w	r2, r2, #22
 8001268:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03e      	beq.n	80012f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0208 	orr.w	r2, r2, #8
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e035      	b.n	80012f0 <HAL_DMA_Start_IT+0x260>
 8001284:	40020010 	.word	0x40020010
 8001288:	40020028 	.word	0x40020028
 800128c:	40020040 	.word	0x40020040
 8001290:	40020058 	.word	0x40020058
 8001294:	40020070 	.word	0x40020070
 8001298:	40020088 	.word	0x40020088
 800129c:	400200a0 	.word	0x400200a0
 80012a0:	400200b8 	.word	0x400200b8
 80012a4:	40020410 	.word	0x40020410
 80012a8:	40020428 	.word	0x40020428
 80012ac:	40020440 	.word	0x40020440
 80012b0:	40020458 	.word	0x40020458
 80012b4:	40020470 	.word	0x40020470
 80012b8:	40020488 	.word	0x40020488
 80012bc:	400204a0 	.word	0x400204a0
 80012c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 020e 	bic.w	r2, r3, #14
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 020a 	orr.w	r2, r2, #10
 80012d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d007      	beq.n	80012f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0204 	orr.w	r2, r2, #4
 80012ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a83      	ldr	r2, [pc, #524]	; (8001504 <HAL_DMA_Start_IT+0x474>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d072      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a82      	ldr	r2, [pc, #520]	; (8001508 <HAL_DMA_Start_IT+0x478>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d06d      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a80      	ldr	r2, [pc, #512]	; (800150c <HAL_DMA_Start_IT+0x47c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d068      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a7f      	ldr	r2, [pc, #508]	; (8001510 <HAL_DMA_Start_IT+0x480>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d063      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a7d      	ldr	r2, [pc, #500]	; (8001514 <HAL_DMA_Start_IT+0x484>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d05e      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7c      	ldr	r2, [pc, #496]	; (8001518 <HAL_DMA_Start_IT+0x488>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d059      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a7a      	ldr	r2, [pc, #488]	; (800151c <HAL_DMA_Start_IT+0x48c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d054      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a79      	ldr	r2, [pc, #484]	; (8001520 <HAL_DMA_Start_IT+0x490>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d04f      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a77      	ldr	r2, [pc, #476]	; (8001524 <HAL_DMA_Start_IT+0x494>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d04a      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a76      	ldr	r2, [pc, #472]	; (8001528 <HAL_DMA_Start_IT+0x498>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d045      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a74      	ldr	r2, [pc, #464]	; (800152c <HAL_DMA_Start_IT+0x49c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d040      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a73      	ldr	r2, [pc, #460]	; (8001530 <HAL_DMA_Start_IT+0x4a0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d03b      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a71      	ldr	r2, [pc, #452]	; (8001534 <HAL_DMA_Start_IT+0x4a4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d036      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a70      	ldr	r2, [pc, #448]	; (8001538 <HAL_DMA_Start_IT+0x4a8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d031      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a6e      	ldr	r2, [pc, #440]	; (800153c <HAL_DMA_Start_IT+0x4ac>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d02c      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a6d      	ldr	r2, [pc, #436]	; (8001540 <HAL_DMA_Start_IT+0x4b0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d027      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a6b      	ldr	r2, [pc, #428]	; (8001544 <HAL_DMA_Start_IT+0x4b4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d022      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6a      	ldr	r2, [pc, #424]	; (8001548 <HAL_DMA_Start_IT+0x4b8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d01d      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a68      	ldr	r2, [pc, #416]	; (800154c <HAL_DMA_Start_IT+0x4bc>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d018      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a67      	ldr	r2, [pc, #412]	; (8001550 <HAL_DMA_Start_IT+0x4c0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d013      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a65      	ldr	r2, [pc, #404]	; (8001554 <HAL_DMA_Start_IT+0x4c4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00e      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a64      	ldr	r2, [pc, #400]	; (8001558 <HAL_DMA_Start_IT+0x4c8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d009      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a62      	ldr	r2, [pc, #392]	; (800155c <HAL_DMA_Start_IT+0x4cc>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d004      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a61      	ldr	r2, [pc, #388]	; (8001560 <HAL_DMA_Start_IT+0x4d0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d101      	bne.n	80013e4 <HAL_DMA_Start_IT+0x354>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_DMA_Start_IT+0x356>
 80013e4:	2300      	movs	r3, #0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d01a      	beq.n	8001420 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001406:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800141a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800141e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a37      	ldr	r2, [pc, #220]	; (8001504 <HAL_DMA_Start_IT+0x474>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d04a      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a36      	ldr	r2, [pc, #216]	; (8001508 <HAL_DMA_Start_IT+0x478>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d045      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a34      	ldr	r2, [pc, #208]	; (800150c <HAL_DMA_Start_IT+0x47c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d040      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a33      	ldr	r2, [pc, #204]	; (8001510 <HAL_DMA_Start_IT+0x480>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d03b      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a31      	ldr	r2, [pc, #196]	; (8001514 <HAL_DMA_Start_IT+0x484>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d036      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a30      	ldr	r2, [pc, #192]	; (8001518 <HAL_DMA_Start_IT+0x488>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a2e      	ldr	r2, [pc, #184]	; (800151c <HAL_DMA_Start_IT+0x48c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d02c      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <HAL_DMA_Start_IT+0x490>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d027      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <HAL_DMA_Start_IT+0x494>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d022      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <HAL_DMA_Start_IT+0x498>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d01d      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a28      	ldr	r2, [pc, #160]	; (800152c <HAL_DMA_Start_IT+0x49c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d018      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_DMA_Start_IT+0x4a0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d013      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a25      	ldr	r2, [pc, #148]	; (8001534 <HAL_DMA_Start_IT+0x4a4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00e      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a24      	ldr	r2, [pc, #144]	; (8001538 <HAL_DMA_Start_IT+0x4a8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d009      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_DMA_Start_IT+0x4ac>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d004      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a21      	ldr	r2, [pc, #132]	; (8001540 <HAL_DMA_Start_IT+0x4b0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d108      	bne.n	80014d2 <HAL_DMA_Start_IT+0x442>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e012      	b.n	80014f8 <HAL_DMA_Start_IT+0x468>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e009      	b.n	80014f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40020010 	.word	0x40020010
 8001508:	40020028 	.word	0x40020028
 800150c:	40020040 	.word	0x40020040
 8001510:	40020058 	.word	0x40020058
 8001514:	40020070 	.word	0x40020070
 8001518:	40020088 	.word	0x40020088
 800151c:	400200a0 	.word	0x400200a0
 8001520:	400200b8 	.word	0x400200b8
 8001524:	40020410 	.word	0x40020410
 8001528:	40020428 	.word	0x40020428
 800152c:	40020440 	.word	0x40020440
 8001530:	40020458 	.word	0x40020458
 8001534:	40020470 	.word	0x40020470
 8001538:	40020488 	.word	0x40020488
 800153c:	400204a0 	.word	0x400204a0
 8001540:	400204b8 	.word	0x400204b8
 8001544:	58025408 	.word	0x58025408
 8001548:	5802541c 	.word	0x5802541c
 800154c:	58025430 	.word	0x58025430
 8001550:	58025444 	.word	0x58025444
 8001554:	58025458 	.word	0x58025458
 8001558:	5802546c 	.word	0x5802546c
 800155c:	58025480 	.word	0x58025480
 8001560:	58025494 	.word	0x58025494

08001564 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001570:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_DMA_IRQHandler+0x1ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a67      	ldr	r2, [pc, #412]	; (8001714 <HAL_DMA_IRQHandler+0x1b0>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a9b      	lsrs	r3, r3, #10
 800157c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5f      	ldr	r2, [pc, #380]	; (8001718 <HAL_DMA_IRQHandler+0x1b4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d04a      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a5d      	ldr	r2, [pc, #372]	; (800171c <HAL_DMA_IRQHandler+0x1b8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d045      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5c      	ldr	r2, [pc, #368]	; (8001720 <HAL_DMA_IRQHandler+0x1bc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d040      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a5a      	ldr	r2, [pc, #360]	; (8001724 <HAL_DMA_IRQHandler+0x1c0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d03b      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a59      	ldr	r2, [pc, #356]	; (8001728 <HAL_DMA_IRQHandler+0x1c4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d036      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a57      	ldr	r2, [pc, #348]	; (800172c <HAL_DMA_IRQHandler+0x1c8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d031      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a56      	ldr	r2, [pc, #344]	; (8001730 <HAL_DMA_IRQHandler+0x1cc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d02c      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a54      	ldr	r2, [pc, #336]	; (8001734 <HAL_DMA_IRQHandler+0x1d0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d027      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a53      	ldr	r2, [pc, #332]	; (8001738 <HAL_DMA_IRQHandler+0x1d4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d022      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a51      	ldr	r2, [pc, #324]	; (800173c <HAL_DMA_IRQHandler+0x1d8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01d      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a50      	ldr	r2, [pc, #320]	; (8001740 <HAL_DMA_IRQHandler+0x1dc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d018      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a4e      	ldr	r2, [pc, #312]	; (8001744 <HAL_DMA_IRQHandler+0x1e0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a4d      	ldr	r2, [pc, #308]	; (8001748 <HAL_DMA_IRQHandler+0x1e4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d00e      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_DMA_IRQHandler+0x1e8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d009      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <HAL_DMA_IRQHandler+0x1ec>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d004      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a48      	ldr	r2, [pc, #288]	; (8001754 <HAL_DMA_IRQHandler+0x1f0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_DMA_IRQHandler+0xd6>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_DMA_IRQHandler+0xd8>
 800163a:	2300      	movs	r3, #0
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 842b 	beq.w	8001e98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	2208      	movs	r2, #8
 800164c:	409a      	lsls	r2, r3
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80a2 	beq.w	800179c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a2e      	ldr	r2, [pc, #184]	; (8001718 <HAL_DMA_IRQHandler+0x1b4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d04a      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a2d      	ldr	r2, [pc, #180]	; (800171c <HAL_DMA_IRQHandler+0x1b8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d045      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2b      	ldr	r2, [pc, #172]	; (8001720 <HAL_DMA_IRQHandler+0x1bc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d040      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <HAL_DMA_IRQHandler+0x1c0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d03b      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <HAL_DMA_IRQHandler+0x1c4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d036      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a27      	ldr	r2, [pc, #156]	; (800172c <HAL_DMA_IRQHandler+0x1c8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d031      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <HAL_DMA_IRQHandler+0x1cc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d02c      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a24      	ldr	r2, [pc, #144]	; (8001734 <HAL_DMA_IRQHandler+0x1d0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d027      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_DMA_IRQHandler+0x1d4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d022      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a21      	ldr	r2, [pc, #132]	; (800173c <HAL_DMA_IRQHandler+0x1d8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d01d      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <HAL_DMA_IRQHandler+0x1dc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d018      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_DMA_IRQHandler+0x1e0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d013      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <HAL_DMA_IRQHandler+0x1e4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00e      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_DMA_IRQHandler+0x1e8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d009      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	; (8001750 <HAL_DMA_IRQHandler+0x1ec>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d004      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_DMA_IRQHandler+0x1f0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d12f      	bne.n	8001758 <HAL_DMA_IRQHandler+0x1f4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	bf14      	ite	ne
 8001706:	2301      	movne	r3, #1
 8001708:	2300      	moveq	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	e02e      	b.n	800176c <HAL_DMA_IRQHandler+0x208>
 800170e:	bf00      	nop
 8001710:	24000408 	.word	0x24000408
 8001714:	1b4e81b5 	.word	0x1b4e81b5
 8001718:	40020010 	.word	0x40020010
 800171c:	40020028 	.word	0x40020028
 8001720:	40020040 	.word	0x40020040
 8001724:	40020058 	.word	0x40020058
 8001728:	40020070 	.word	0x40020070
 800172c:	40020088 	.word	0x40020088
 8001730:	400200a0 	.word	0x400200a0
 8001734:	400200b8 	.word	0x400200b8
 8001738:	40020410 	.word	0x40020410
 800173c:	40020428 	.word	0x40020428
 8001740:	40020440 	.word	0x40020440
 8001744:	40020458 	.word	0x40020458
 8001748:	40020470 	.word	0x40020470
 800174c:	40020488 	.word	0x40020488
 8001750:	400204a0 	.word	0x400204a0
 8001754:	400204b8 	.word	0x400204b8
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d015      	beq.n	800179c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0204 	bic.w	r2, r2, #4
 800177e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	2208      	movs	r2, #8
 800178a:	409a      	lsls	r2, r3
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d06e      	beq.n	8001890 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a69      	ldr	r2, [pc, #420]	; (800195c <HAL_DMA_IRQHandler+0x3f8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04a      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a67      	ldr	r2, [pc, #412]	; (8001960 <HAL_DMA_IRQHandler+0x3fc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d045      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a66      	ldr	r2, [pc, #408]	; (8001964 <HAL_DMA_IRQHandler+0x400>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d040      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a64      	ldr	r2, [pc, #400]	; (8001968 <HAL_DMA_IRQHandler+0x404>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d03b      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a63      	ldr	r2, [pc, #396]	; (800196c <HAL_DMA_IRQHandler+0x408>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d036      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a61      	ldr	r2, [pc, #388]	; (8001970 <HAL_DMA_IRQHandler+0x40c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a60      	ldr	r2, [pc, #384]	; (8001974 <HAL_DMA_IRQHandler+0x410>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d02c      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <HAL_DMA_IRQHandler+0x414>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d027      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a5d      	ldr	r2, [pc, #372]	; (800197c <HAL_DMA_IRQHandler+0x418>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d022      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a5b      	ldr	r2, [pc, #364]	; (8001980 <HAL_DMA_IRQHandler+0x41c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01d      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a5a      	ldr	r2, [pc, #360]	; (8001984 <HAL_DMA_IRQHandler+0x420>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d018      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a58      	ldr	r2, [pc, #352]	; (8001988 <HAL_DMA_IRQHandler+0x424>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a57      	ldr	r2, [pc, #348]	; (800198c <HAL_DMA_IRQHandler+0x428>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00e      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a55      	ldr	r2, [pc, #340]	; (8001990 <HAL_DMA_IRQHandler+0x42c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a54      	ldr	r2, [pc, #336]	; (8001994 <HAL_DMA_IRQHandler+0x430>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d004      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_DMA_IRQHandler+0x434>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d10a      	bne.n	8001868 <HAL_DMA_IRQHandler+0x304>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf14      	ite	ne
 8001860:	2301      	movne	r3, #1
 8001862:	2300      	moveq	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	e003      	b.n	8001870 <HAL_DMA_IRQHandler+0x30c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2300      	movs	r3, #0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00d      	beq.n	8001890 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	2201      	movs	r2, #1
 800187e:	409a      	lsls	r2, r3
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001888:	f043 0202 	orr.w	r2, r3, #2
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2204      	movs	r2, #4
 800189a:	409a      	lsls	r2, r3
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 808f 	beq.w	80019c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2c      	ldr	r2, [pc, #176]	; (800195c <HAL_DMA_IRQHandler+0x3f8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d04a      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2a      	ldr	r2, [pc, #168]	; (8001960 <HAL_DMA_IRQHandler+0x3fc>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d045      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a29      	ldr	r2, [pc, #164]	; (8001964 <HAL_DMA_IRQHandler+0x400>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d040      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a27      	ldr	r2, [pc, #156]	; (8001968 <HAL_DMA_IRQHandler+0x404>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d03b      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a26      	ldr	r2, [pc, #152]	; (800196c <HAL_DMA_IRQHandler+0x408>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d036      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a24      	ldr	r2, [pc, #144]	; (8001970 <HAL_DMA_IRQHandler+0x40c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d031      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a23      	ldr	r2, [pc, #140]	; (8001974 <HAL_DMA_IRQHandler+0x410>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d02c      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a21      	ldr	r2, [pc, #132]	; (8001978 <HAL_DMA_IRQHandler+0x414>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d027      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <HAL_DMA_IRQHandler+0x418>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d022      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_DMA_IRQHandler+0x41c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01d      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <HAL_DMA_IRQHandler+0x420>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d018      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_DMA_IRQHandler+0x424>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1a      	ldr	r2, [pc, #104]	; (800198c <HAL_DMA_IRQHandler+0x428>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00e      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_DMA_IRQHandler+0x42c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d009      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_DMA_IRQHandler+0x430>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d004      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_DMA_IRQHandler+0x434>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12a      	bne.n	800199c <HAL_DMA_IRQHandler+0x438>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf14      	ite	ne
 8001954:	2301      	movne	r3, #1
 8001956:	2300      	moveq	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	e023      	b.n	80019a4 <HAL_DMA_IRQHandler+0x440>
 800195c:	40020010 	.word	0x40020010
 8001960:	40020028 	.word	0x40020028
 8001964:	40020040 	.word	0x40020040
 8001968:	40020058 	.word	0x40020058
 800196c:	40020070 	.word	0x40020070
 8001970:	40020088 	.word	0x40020088
 8001974:	400200a0 	.word	0x400200a0
 8001978:	400200b8 	.word	0x400200b8
 800197c:	40020410 	.word	0x40020410
 8001980:	40020428 	.word	0x40020428
 8001984:	40020440 	.word	0x40020440
 8001988:	40020458 	.word	0x40020458
 800198c:	40020470 	.word	0x40020470
 8001990:	40020488 	.word	0x40020488
 8001994:	400204a0 	.word	0x400204a0
 8001998:	400204b8 	.word	0x400204b8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2204      	movs	r2, #4
 80019b2:	409a      	lsls	r2, r3
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019bc:	f043 0204 	orr.w	r2, r3, #4
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2210      	movs	r2, #16
 80019ce:	409a      	lsls	r2, r3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80a6 	beq.w	8001b26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a85      	ldr	r2, [pc, #532]	; (8001bf4 <HAL_DMA_IRQHandler+0x690>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04a      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_DMA_IRQHandler+0x694>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d045      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a82      	ldr	r2, [pc, #520]	; (8001bfc <HAL_DMA_IRQHandler+0x698>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d040      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a80      	ldr	r2, [pc, #512]	; (8001c00 <HAL_DMA_IRQHandler+0x69c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d03b      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7f      	ldr	r2, [pc, #508]	; (8001c04 <HAL_DMA_IRQHandler+0x6a0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d036      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a7d      	ldr	r2, [pc, #500]	; (8001c08 <HAL_DMA_IRQHandler+0x6a4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d031      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7c      	ldr	r2, [pc, #496]	; (8001c0c <HAL_DMA_IRQHandler+0x6a8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d02c      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_DMA_IRQHandler+0x6ac>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d027      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a79      	ldr	r2, [pc, #484]	; (8001c14 <HAL_DMA_IRQHandler+0x6b0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d022      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a77      	ldr	r2, [pc, #476]	; (8001c18 <HAL_DMA_IRQHandler+0x6b4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01d      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a76      	ldr	r2, [pc, #472]	; (8001c1c <HAL_DMA_IRQHandler+0x6b8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d018      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a74      	ldr	r2, [pc, #464]	; (8001c20 <HAL_DMA_IRQHandler+0x6bc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a73      	ldr	r2, [pc, #460]	; (8001c24 <HAL_DMA_IRQHandler+0x6c0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00e      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a71      	ldr	r2, [pc, #452]	; (8001c28 <HAL_DMA_IRQHandler+0x6c4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a70      	ldr	r2, [pc, #448]	; (8001c2c <HAL_DMA_IRQHandler+0x6c8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d004      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_DMA_IRQHandler+0x6cc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10a      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x52c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf14      	ite	ne
 8001a88:	2301      	movne	r3, #1
 8001a8a:	2300      	moveq	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	e009      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x540>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf14      	ite	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	2300      	moveq	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d03e      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d018      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d108      	bne.n	8001ae6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d024      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
 8001ae4:	e01f      	b.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01b      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4798      	blx	r3
 8001af6:	e016      	b.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d107      	bne.n	8001b16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0208 	bic.w	r2, r2, #8
 8001b14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2220      	movs	r2, #32
 8001b30:	409a      	lsls	r2, r3
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8110 	beq.w	8001d5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <HAL_DMA_IRQHandler+0x690>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d04a      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <HAL_DMA_IRQHandler+0x694>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d045      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_DMA_IRQHandler+0x698>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d040      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a28      	ldr	r2, [pc, #160]	; (8001c00 <HAL_DMA_IRQHandler+0x69c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d03b      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <HAL_DMA_IRQHandler+0x6a0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d036      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <HAL_DMA_IRQHandler+0x6a4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d031      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <HAL_DMA_IRQHandler+0x6a8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02c      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_DMA_IRQHandler+0x6ac>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d027      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <HAL_DMA_IRQHandler+0x6b0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_DMA_IRQHandler+0x6b4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01d      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_DMA_IRQHandler+0x6b8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_DMA_IRQHandler+0x6bc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_DMA_IRQHandler+0x6c0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_DMA_IRQHandler+0x6c4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_DMA_IRQHandler+0x6c8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_DMA_IRQHandler+0x6cc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d12b      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x6d0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	e02a      	b.n	8001c48 <HAL_DMA_IRQHandler+0x6e4>
 8001bf2:	bf00      	nop
 8001bf4:	40020010 	.word	0x40020010
 8001bf8:	40020028 	.word	0x40020028
 8001bfc:	40020040 	.word	0x40020040
 8001c00:	40020058 	.word	0x40020058
 8001c04:	40020070 	.word	0x40020070
 8001c08:	40020088 	.word	0x40020088
 8001c0c:	400200a0 	.word	0x400200a0
 8001c10:	400200b8 	.word	0x400200b8
 8001c14:	40020410 	.word	0x40020410
 8001c18:	40020428 	.word	0x40020428
 8001c1c:	40020440 	.word	0x40020440
 8001c20:	40020458 	.word	0x40020458
 8001c24:	40020470 	.word	0x40020470
 8001c28:	40020488 	.word	0x40020488
 8001c2c:	400204a0 	.word	0x400204a0
 8001c30:	400204b8 	.word	0x400204b8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf14      	ite	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	2300      	moveq	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8087 	beq.w	8001d5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2220      	movs	r2, #32
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d139      	bne.n	8001cde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0216 	bic.w	r2, r2, #22
 8001c78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <HAL_DMA_IRQHandler+0x736>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0208 	bic.w	r2, r2, #8
 8001ca8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	223f      	movs	r2, #63	; 0x3f
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 834a 	beq.w	8002368 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
          }
          return;
 8001cdc:	e344      	b.n	8002368 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d018      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d108      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02c      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	e027      	b.n	8001d5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
 8001d1c:	e01e      	b.n	8001d5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10f      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0210 	bic.w	r2, r2, #16
 8001d3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8306 	beq.w	8002372 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8088 	beq.w	8001e84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a7a      	ldr	r2, [pc, #488]	; (8001f6c <HAL_DMA_IRQHandler+0xa08>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d04a      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a79      	ldr	r2, [pc, #484]	; (8001f70 <HAL_DMA_IRQHandler+0xa0c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d045      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a77      	ldr	r2, [pc, #476]	; (8001f74 <HAL_DMA_IRQHandler+0xa10>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d040      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a76      	ldr	r2, [pc, #472]	; (8001f78 <HAL_DMA_IRQHandler+0xa14>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d03b      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a74      	ldr	r2, [pc, #464]	; (8001f7c <HAL_DMA_IRQHandler+0xa18>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d036      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a73      	ldr	r2, [pc, #460]	; (8001f80 <HAL_DMA_IRQHandler+0xa1c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d031      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a71      	ldr	r2, [pc, #452]	; (8001f84 <HAL_DMA_IRQHandler+0xa20>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d02c      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a70      	ldr	r2, [pc, #448]	; (8001f88 <HAL_DMA_IRQHandler+0xa24>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d027      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_DMA_IRQHandler+0xa28>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d022      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6d      	ldr	r2, [pc, #436]	; (8001f90 <HAL_DMA_IRQHandler+0xa2c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d01d      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a6b      	ldr	r2, [pc, #428]	; (8001f94 <HAL_DMA_IRQHandler+0xa30>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d018      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a6a      	ldr	r2, [pc, #424]	; (8001f98 <HAL_DMA_IRQHandler+0xa34>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a68      	ldr	r2, [pc, #416]	; (8001f9c <HAL_DMA_IRQHandler+0xa38>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00e      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a67      	ldr	r2, [pc, #412]	; (8001fa0 <HAL_DMA_IRQHandler+0xa3c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a65      	ldr	r2, [pc, #404]	; (8001fa4 <HAL_DMA_IRQHandler+0xa40>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a64      	ldr	r2, [pc, #400]	; (8001fa8 <HAL_DMA_IRQHandler+0xa44>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d108      	bne.n	8001e2e <HAL_DMA_IRQHandler+0x8ca>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e007      	b.n	8001e3e <HAL_DMA_IRQHandler+0x8da>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d307      	bcc.n	8001e5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f2      	bne.n	8001e3e <HAL_DMA_IRQHandler+0x8da>
 8001e58:	e000      	b.n	8001e5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001e5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d004      	beq.n	8001e74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001e72:	e003      	b.n	8001e7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8272 	beq.w	8002372 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
 8001e96:	e26c      	b.n	8002372 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a43      	ldr	r2, [pc, #268]	; (8001fac <HAL_DMA_IRQHandler+0xa48>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d022      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a42      	ldr	r2, [pc, #264]	; (8001fb0 <HAL_DMA_IRQHandler+0xa4c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d01d      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <HAL_DMA_IRQHandler+0xa50>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d018      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a3f      	ldr	r2, [pc, #252]	; (8001fb8 <HAL_DMA_IRQHandler+0xa54>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3d      	ldr	r2, [pc, #244]	; (8001fbc <HAL_DMA_IRQHandler+0xa58>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <HAL_DMA_IRQHandler+0xa5c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a3a      	ldr	r2, [pc, #232]	; (8001fc4 <HAL_DMA_IRQHandler+0xa60>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a39      	ldr	r2, [pc, #228]	; (8001fc8 <HAL_DMA_IRQHandler+0xa64>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_DMA_IRQHandler+0x988>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_DMA_IRQHandler+0x98a>
 8001eec:	2300      	movs	r3, #0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 823f 	beq.w	8002372 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2204      	movs	r2, #4
 8001f06:	409a      	lsls	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80cd 	beq.w	80020ac <HAL_DMA_IRQHandler+0xb48>
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80c7 	beq.w	80020ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2204      	movs	r2, #4
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d049      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8210 	beq.w	800236c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f54:	e20a      	b.n	800236c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8206 	beq.w	800236c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f68:	e200      	b.n	800236c <HAL_DMA_IRQHandler+0xe08>
 8001f6a:	bf00      	nop
 8001f6c:	40020010 	.word	0x40020010
 8001f70:	40020028 	.word	0x40020028
 8001f74:	40020040 	.word	0x40020040
 8001f78:	40020058 	.word	0x40020058
 8001f7c:	40020070 	.word	0x40020070
 8001f80:	40020088 	.word	0x40020088
 8001f84:	400200a0 	.word	0x400200a0
 8001f88:	400200b8 	.word	0x400200b8
 8001f8c:	40020410 	.word	0x40020410
 8001f90:	40020428 	.word	0x40020428
 8001f94:	40020440 	.word	0x40020440
 8001f98:	40020458 	.word	0x40020458
 8001f9c:	40020470 	.word	0x40020470
 8001fa0:	40020488 	.word	0x40020488
 8001fa4:	400204a0 	.word	0x400204a0
 8001fa8:	400204b8 	.word	0x400204b8
 8001fac:	58025408 	.word	0x58025408
 8001fb0:	5802541c 	.word	0x5802541c
 8001fb4:	58025430 	.word	0x58025430
 8001fb8:	58025444 	.word	0x58025444
 8001fbc:	58025458 	.word	0x58025458
 8001fc0:	5802546c 	.word	0x5802546c
 8001fc4:	58025480 	.word	0x58025480
 8001fc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d160      	bne.n	8002098 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a8c      	ldr	r2, [pc, #560]	; (800220c <HAL_DMA_IRQHandler+0xca8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d04a      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a8a      	ldr	r2, [pc, #552]	; (8002210 <HAL_DMA_IRQHandler+0xcac>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d045      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a89      	ldr	r2, [pc, #548]	; (8002214 <HAL_DMA_IRQHandler+0xcb0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d040      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a87      	ldr	r2, [pc, #540]	; (8002218 <HAL_DMA_IRQHandler+0xcb4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d03b      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a86      	ldr	r2, [pc, #536]	; (800221c <HAL_DMA_IRQHandler+0xcb8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d036      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a84      	ldr	r2, [pc, #528]	; (8002220 <HAL_DMA_IRQHandler+0xcbc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d031      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a83      	ldr	r2, [pc, #524]	; (8002224 <HAL_DMA_IRQHandler+0xcc0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d02c      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a81      	ldr	r2, [pc, #516]	; (8002228 <HAL_DMA_IRQHandler+0xcc4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d027      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a80      	ldr	r2, [pc, #512]	; (800222c <HAL_DMA_IRQHandler+0xcc8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d022      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a7e      	ldr	r2, [pc, #504]	; (8002230 <HAL_DMA_IRQHandler+0xccc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01d      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a7d      	ldr	r2, [pc, #500]	; (8002234 <HAL_DMA_IRQHandler+0xcd0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d018      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a7b      	ldr	r2, [pc, #492]	; (8002238 <HAL_DMA_IRQHandler+0xcd4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7a      	ldr	r2, [pc, #488]	; (800223c <HAL_DMA_IRQHandler+0xcd8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00e      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a78      	ldr	r2, [pc, #480]	; (8002240 <HAL_DMA_IRQHandler+0xcdc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d009      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a77      	ldr	r2, [pc, #476]	; (8002244 <HAL_DMA_IRQHandler+0xce0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_DMA_IRQHandler+0xce4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d108      	bne.n	8002088 <HAL_DMA_IRQHandler+0xb24>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0208 	bic.w	r2, r2, #8
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e007      	b.n	8002098 <HAL_DMA_IRQHandler+0xb34>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8165 	beq.w	800236c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80020aa:	e15f      	b.n	800236c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2202      	movs	r2, #2
 80020b6:	409a      	lsls	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80c5 	beq.w	800224c <HAL_DMA_IRQHandler+0xce8>
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80bf 	beq.w	800224c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2202      	movs	r2, #2
 80020d8:	409a      	lsls	r2, r3
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d018      	beq.n	800211a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 813a 	beq.w	8002370 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002104:	e134      	b.n	8002370 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8130 	beq.w	8002370 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002118:	e12a      	b.n	8002370 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d168      	bne.n	80021f6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a38      	ldr	r2, [pc, #224]	; (800220c <HAL_DMA_IRQHandler+0xca8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d04a      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a37      	ldr	r2, [pc, #220]	; (8002210 <HAL_DMA_IRQHandler+0xcac>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d045      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a35      	ldr	r2, [pc, #212]	; (8002214 <HAL_DMA_IRQHandler+0xcb0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d040      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_DMA_IRQHandler+0xcb4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d03b      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_DMA_IRQHandler+0xcb8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d036      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a31      	ldr	r2, [pc, #196]	; (8002220 <HAL_DMA_IRQHandler+0xcbc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d031      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2f      	ldr	r2, [pc, #188]	; (8002224 <HAL_DMA_IRQHandler+0xcc0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02c      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2e      	ldr	r2, [pc, #184]	; (8002228 <HAL_DMA_IRQHandler+0xcc4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d027      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2c      	ldr	r2, [pc, #176]	; (800222c <HAL_DMA_IRQHandler+0xcc8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d022      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <HAL_DMA_IRQHandler+0xccc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d01d      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a29      	ldr	r2, [pc, #164]	; (8002234 <HAL_DMA_IRQHandler+0xcd0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d018      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a28      	ldr	r2, [pc, #160]	; (8002238 <HAL_DMA_IRQHandler+0xcd4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a26      	ldr	r2, [pc, #152]	; (800223c <HAL_DMA_IRQHandler+0xcd8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00e      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a25      	ldr	r2, [pc, #148]	; (8002240 <HAL_DMA_IRQHandler+0xcdc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a23      	ldr	r2, [pc, #140]	; (8002244 <HAL_DMA_IRQHandler+0xce0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_DMA_IRQHandler+0xce4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d108      	bne.n	80021d6 <HAL_DMA_IRQHandler+0xc72>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0214 	bic.w	r2, r2, #20
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e007      	b.n	80021e6 <HAL_DMA_IRQHandler+0xc82>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 020a 	bic.w	r2, r2, #10
 80021e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80b8 	beq.w	8002370 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002208:	e0b2      	b.n	8002370 <HAL_DMA_IRQHandler+0xe0c>
 800220a:	bf00      	nop
 800220c:	40020010 	.word	0x40020010
 8002210:	40020028 	.word	0x40020028
 8002214:	40020040 	.word	0x40020040
 8002218:	40020058 	.word	0x40020058
 800221c:	40020070 	.word	0x40020070
 8002220:	40020088 	.word	0x40020088
 8002224:	400200a0 	.word	0x400200a0
 8002228:	400200b8 	.word	0x400200b8
 800222c:	40020410 	.word	0x40020410
 8002230:	40020428 	.word	0x40020428
 8002234:	40020440 	.word	0x40020440
 8002238:	40020458 	.word	0x40020458
 800223c:	40020470 	.word	0x40020470
 8002240:	40020488 	.word	0x40020488
 8002244:	400204a0 	.word	0x400204a0
 8002248:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2208      	movs	r2, #8
 8002256:	409a      	lsls	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8088 	beq.w	8002372 <HAL_DMA_IRQHandler+0xe0e>
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8082 	beq.w	8002372 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a41      	ldr	r2, [pc, #260]	; (8002378 <HAL_DMA_IRQHandler+0xe14>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d04a      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a3f      	ldr	r2, [pc, #252]	; (800237c <HAL_DMA_IRQHandler+0xe18>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d045      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a3e      	ldr	r2, [pc, #248]	; (8002380 <HAL_DMA_IRQHandler+0xe1c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d040      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3c      	ldr	r2, [pc, #240]	; (8002384 <HAL_DMA_IRQHandler+0xe20>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d03b      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a3b      	ldr	r2, [pc, #236]	; (8002388 <HAL_DMA_IRQHandler+0xe24>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d036      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a39      	ldr	r2, [pc, #228]	; (800238c <HAL_DMA_IRQHandler+0xe28>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d031      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a38      	ldr	r2, [pc, #224]	; (8002390 <HAL_DMA_IRQHandler+0xe2c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d02c      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a36      	ldr	r2, [pc, #216]	; (8002394 <HAL_DMA_IRQHandler+0xe30>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d027      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a35      	ldr	r2, [pc, #212]	; (8002398 <HAL_DMA_IRQHandler+0xe34>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d022      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a33      	ldr	r2, [pc, #204]	; (800239c <HAL_DMA_IRQHandler+0xe38>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01d      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a32      	ldr	r2, [pc, #200]	; (80023a0 <HAL_DMA_IRQHandler+0xe3c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d018      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a30      	ldr	r2, [pc, #192]	; (80023a4 <HAL_DMA_IRQHandler+0xe40>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <HAL_DMA_IRQHandler+0xe44>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00e      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <HAL_DMA_IRQHandler+0xe48>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d009      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2c      	ldr	r2, [pc, #176]	; (80023b0 <HAL_DMA_IRQHandler+0xe4c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2a      	ldr	r2, [pc, #168]	; (80023b4 <HAL_DMA_IRQHandler+0xe50>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d108      	bne.n	8002320 <HAL_DMA_IRQHandler+0xdbc>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 021c 	bic.w	r2, r2, #28
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e007      	b.n	8002330 <HAL_DMA_IRQHandler+0xdcc>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 020e 	bic.w	r2, r2, #14
 800232e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2201      	movs	r2, #1
 800233a:	409a      	lsls	r2, r3
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
 8002366:	e004      	b.n	8002372 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002368:	bf00      	nop
 800236a:	e002      	b.n	8002372 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800236c:	bf00      	nop
 800236e:	e000      	b.n	8002372 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002370:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40020010 	.word	0x40020010
 800237c:	40020028 	.word	0x40020028
 8002380:	40020040 	.word	0x40020040
 8002384:	40020058 	.word	0x40020058
 8002388:	40020070 	.word	0x40020070
 800238c:	40020088 	.word	0x40020088
 8002390:	400200a0 	.word	0x400200a0
 8002394:	400200b8 	.word	0x400200b8
 8002398:	40020410 	.word	0x40020410
 800239c:	40020428 	.word	0x40020428
 80023a0:	40020440 	.word	0x40020440
 80023a4:	40020458 	.word	0x40020458
 80023a8:	40020470 	.word	0x40020470
 80023ac:	40020488 	.word	0x40020488
 80023b0:	400204a0 	.word	0x400204a0
 80023b4:	400204b8 	.word	0x400204b8

080023b8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b08b      	sub	sp, #44	; 0x2c
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	623b      	str	r3, [r7, #32]

  uint32_t srcdata = &SrcAddress;
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t srcaddr = SrcAddress;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
  uint32_t destdata = &DstAddress;
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	617b      	str	r3, [r7, #20]
  uint32_t destaddr = DstAddress;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	613b      	str	r3, [r7, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a83      	ldr	r2, [pc, #524]	; (8002610 <DMA_SetConfig+0x240>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d072      	beq.n	80024ec <DMA_SetConfig+0x11c>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a82      	ldr	r2, [pc, #520]	; (8002614 <DMA_SetConfig+0x244>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d06d      	beq.n	80024ec <DMA_SetConfig+0x11c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a80      	ldr	r2, [pc, #512]	; (8002618 <DMA_SetConfig+0x248>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d068      	beq.n	80024ec <DMA_SetConfig+0x11c>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7f      	ldr	r2, [pc, #508]	; (800261c <DMA_SetConfig+0x24c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d063      	beq.n	80024ec <DMA_SetConfig+0x11c>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7d      	ldr	r2, [pc, #500]	; (8002620 <DMA_SetConfig+0x250>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d05e      	beq.n	80024ec <DMA_SetConfig+0x11c>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7c      	ldr	r2, [pc, #496]	; (8002624 <DMA_SetConfig+0x254>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d059      	beq.n	80024ec <DMA_SetConfig+0x11c>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <DMA_SetConfig+0x258>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d054      	beq.n	80024ec <DMA_SetConfig+0x11c>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a79      	ldr	r2, [pc, #484]	; (800262c <DMA_SetConfig+0x25c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d04f      	beq.n	80024ec <DMA_SetConfig+0x11c>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a77      	ldr	r2, [pc, #476]	; (8002630 <DMA_SetConfig+0x260>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d04a      	beq.n	80024ec <DMA_SetConfig+0x11c>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a76      	ldr	r2, [pc, #472]	; (8002634 <DMA_SetConfig+0x264>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d045      	beq.n	80024ec <DMA_SetConfig+0x11c>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a74      	ldr	r2, [pc, #464]	; (8002638 <DMA_SetConfig+0x268>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d040      	beq.n	80024ec <DMA_SetConfig+0x11c>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a73      	ldr	r2, [pc, #460]	; (800263c <DMA_SetConfig+0x26c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d03b      	beq.n	80024ec <DMA_SetConfig+0x11c>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a71      	ldr	r2, [pc, #452]	; (8002640 <DMA_SetConfig+0x270>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d036      	beq.n	80024ec <DMA_SetConfig+0x11c>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a70      	ldr	r2, [pc, #448]	; (8002644 <DMA_SetConfig+0x274>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d031      	beq.n	80024ec <DMA_SetConfig+0x11c>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <DMA_SetConfig+0x278>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d02c      	beq.n	80024ec <DMA_SetConfig+0x11c>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6d      	ldr	r2, [pc, #436]	; (800264c <DMA_SetConfig+0x27c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d027      	beq.n	80024ec <DMA_SetConfig+0x11c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6b      	ldr	r2, [pc, #428]	; (8002650 <DMA_SetConfig+0x280>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d022      	beq.n	80024ec <DMA_SetConfig+0x11c>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6a      	ldr	r2, [pc, #424]	; (8002654 <DMA_SetConfig+0x284>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d01d      	beq.n	80024ec <DMA_SetConfig+0x11c>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a68      	ldr	r2, [pc, #416]	; (8002658 <DMA_SetConfig+0x288>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d018      	beq.n	80024ec <DMA_SetConfig+0x11c>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a67      	ldr	r2, [pc, #412]	; (800265c <DMA_SetConfig+0x28c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d013      	beq.n	80024ec <DMA_SetConfig+0x11c>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a65      	ldr	r2, [pc, #404]	; (8002660 <DMA_SetConfig+0x290>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00e      	beq.n	80024ec <DMA_SetConfig+0x11c>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a64      	ldr	r2, [pc, #400]	; (8002664 <DMA_SetConfig+0x294>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d009      	beq.n	80024ec <DMA_SetConfig+0x11c>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a62      	ldr	r2, [pc, #392]	; (8002668 <DMA_SetConfig+0x298>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <DMA_SetConfig+0x11c>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a61      	ldr	r2, [pc, #388]	; (800266c <DMA_SetConfig+0x29c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <DMA_SetConfig+0x120>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <DMA_SetConfig+0x122>
 80024f0:	2300      	movs	r3, #0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00d      	beq.n	8002512 <DMA_SetConfig+0x142>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024fe:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <DMA_SetConfig+0x142>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002510:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a3e      	ldr	r2, [pc, #248]	; (8002610 <DMA_SetConfig+0x240>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04a      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a3c      	ldr	r2, [pc, #240]	; (8002614 <DMA_SetConfig+0x244>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d045      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a3b      	ldr	r2, [pc, #236]	; (8002618 <DMA_SetConfig+0x248>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d040      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a39      	ldr	r2, [pc, #228]	; (800261c <DMA_SetConfig+0x24c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d03b      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a38      	ldr	r2, [pc, #224]	; (8002620 <DMA_SetConfig+0x250>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d036      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a36      	ldr	r2, [pc, #216]	; (8002624 <DMA_SetConfig+0x254>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a35      	ldr	r2, [pc, #212]	; (8002628 <DMA_SetConfig+0x258>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d02c      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a33      	ldr	r2, [pc, #204]	; (800262c <DMA_SetConfig+0x25c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d027      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a32      	ldr	r2, [pc, #200]	; (8002630 <DMA_SetConfig+0x260>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a30      	ldr	r2, [pc, #192]	; (8002634 <DMA_SetConfig+0x264>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01d      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a2f      	ldr	r2, [pc, #188]	; (8002638 <DMA_SetConfig+0x268>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2d      	ldr	r2, [pc, #180]	; (800263c <DMA_SetConfig+0x26c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a2c      	ldr	r2, [pc, #176]	; (8002640 <DMA_SetConfig+0x270>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <DMA_SetConfig+0x274>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a29      	ldr	r2, [pc, #164]	; (8002648 <DMA_SetConfig+0x278>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <DMA_SetConfig+0x1e2>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <DMA_SetConfig+0x27c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <DMA_SetConfig+0x1e6>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <DMA_SetConfig+0x1e8>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d059      	beq.n	8002670 <DMA_SetConfig+0x2a0>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	223f      	movs	r2, #63	; 0x3f
 80025c6:	409a      	lsls	r2, r3
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025da:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b40      	cmp	r3, #64	; 0x40
 80025ea:	d108      	bne.n	80025fe <DMA_SetConfig+0x22e>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80025fc:	e086      	b.n	800270c <DMA_SetConfig+0x33c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	60da      	str	r2, [r3, #12]
}
 800260e:	e07d      	b.n	800270c <DMA_SetConfig+0x33c>
 8002610:	40020010 	.word	0x40020010
 8002614:	40020028 	.word	0x40020028
 8002618:	40020040 	.word	0x40020040
 800261c:	40020058 	.word	0x40020058
 8002620:	40020070 	.word	0x40020070
 8002624:	40020088 	.word	0x40020088
 8002628:	400200a0 	.word	0x400200a0
 800262c:	400200b8 	.word	0x400200b8
 8002630:	40020410 	.word	0x40020410
 8002634:	40020428 	.word	0x40020428
 8002638:	40020440 	.word	0x40020440
 800263c:	40020458 	.word	0x40020458
 8002640:	40020470 	.word	0x40020470
 8002644:	40020488 	.word	0x40020488
 8002648:	400204a0 	.word	0x400204a0
 800264c:	400204b8 	.word	0x400204b8
 8002650:	58025408 	.word	0x58025408
 8002654:	5802541c 	.word	0x5802541c
 8002658:	58025430 	.word	0x58025430
 800265c:	58025444 	.word	0x58025444
 8002660:	58025458 	.word	0x58025458
 8002664:	5802546c 	.word	0x5802546c
 8002668:	58025480 	.word	0x58025480
 800266c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <DMA_SetConfig+0x348>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d022      	beq.n	80026c0 <DMA_SetConfig+0x2f0>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a27      	ldr	r2, [pc, #156]	; (800271c <DMA_SetConfig+0x34c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d01d      	beq.n	80026c0 <DMA_SetConfig+0x2f0>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a25      	ldr	r2, [pc, #148]	; (8002720 <DMA_SetConfig+0x350>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d018      	beq.n	80026c0 <DMA_SetConfig+0x2f0>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a24      	ldr	r2, [pc, #144]	; (8002724 <DMA_SetConfig+0x354>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d013      	beq.n	80026c0 <DMA_SetConfig+0x2f0>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a22      	ldr	r2, [pc, #136]	; (8002728 <DMA_SetConfig+0x358>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00e      	beq.n	80026c0 <DMA_SetConfig+0x2f0>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a21      	ldr	r2, [pc, #132]	; (800272c <DMA_SetConfig+0x35c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d009      	beq.n	80026c0 <DMA_SetConfig+0x2f0>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1f      	ldr	r2, [pc, #124]	; (8002730 <DMA_SetConfig+0x360>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d004      	beq.n	80026c0 <DMA_SetConfig+0x2f0>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <DMA_SetConfig+0x364>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d101      	bne.n	80026c4 <DMA_SetConfig+0x2f4>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <DMA_SetConfig+0x2f6>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d020      	beq.n	800270c <DMA_SetConfig+0x33c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2201      	movs	r2, #1
 80026d4:	409a      	lsls	r2, r3
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d108      	bne.n	80026fc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	60da      	str	r2, [r3, #12]
}
 80026fa:	e007      	b.n	800270c <DMA_SetConfig+0x33c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]
}
 800270c:	bf00      	nop
 800270e:	372c      	adds	r7, #44	; 0x2c
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	58025408 	.word	0x58025408
 800271c:	5802541c 	.word	0x5802541c
 8002720:	58025430 	.word	0x58025430
 8002724:	58025444 	.word	0x58025444
 8002728:	58025458 	.word	0x58025458
 800272c:	5802546c 	.word	0x5802546c
 8002730:	58025480 	.word	0x58025480
 8002734:	58025494 	.word	0x58025494

08002738 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a42      	ldr	r2, [pc, #264]	; (8002850 <DMA_CalcBaseAndBitshift+0x118>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d04a      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a41      	ldr	r2, [pc, #260]	; (8002854 <DMA_CalcBaseAndBitshift+0x11c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d045      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <DMA_CalcBaseAndBitshift+0x120>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d040      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3e      	ldr	r2, [pc, #248]	; (800285c <DMA_CalcBaseAndBitshift+0x124>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d03b      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3c      	ldr	r2, [pc, #240]	; (8002860 <DMA_CalcBaseAndBitshift+0x128>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d036      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a3b      	ldr	r2, [pc, #236]	; (8002864 <DMA_CalcBaseAndBitshift+0x12c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d031      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a39      	ldr	r2, [pc, #228]	; (8002868 <DMA_CalcBaseAndBitshift+0x130>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d02c      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a38      	ldr	r2, [pc, #224]	; (800286c <DMA_CalcBaseAndBitshift+0x134>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d027      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a36      	ldr	r2, [pc, #216]	; (8002870 <DMA_CalcBaseAndBitshift+0x138>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d022      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a35      	ldr	r2, [pc, #212]	; (8002874 <DMA_CalcBaseAndBitshift+0x13c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d01d      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a33      	ldr	r2, [pc, #204]	; (8002878 <DMA_CalcBaseAndBitshift+0x140>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d018      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a32      	ldr	r2, [pc, #200]	; (800287c <DMA_CalcBaseAndBitshift+0x144>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d013      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a30      	ldr	r2, [pc, #192]	; (8002880 <DMA_CalcBaseAndBitshift+0x148>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00e      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2f      	ldr	r2, [pc, #188]	; (8002884 <DMA_CalcBaseAndBitshift+0x14c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d009      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2d      	ldr	r2, [pc, #180]	; (8002888 <DMA_CalcBaseAndBitshift+0x150>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <DMA_CalcBaseAndBitshift+0xa8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2c      	ldr	r2, [pc, #176]	; (800288c <DMA_CalcBaseAndBitshift+0x154>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <DMA_CalcBaseAndBitshift+0xac>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <DMA_CalcBaseAndBitshift+0xae>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d024      	beq.n	8002834 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	3b10      	subs	r3, #16
 80027f2:	4a27      	ldr	r2, [pc, #156]	; (8002890 <DMA_CalcBaseAndBitshift+0x158>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	4a24      	ldr	r2, [pc, #144]	; (8002894 <DMA_CalcBaseAndBitshift+0x15c>)
 8002804:	5cd3      	ldrb	r3, [r2, r3]
 8002806:	461a      	mov	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d908      	bls.n	8002824 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <DMA_CalcBaseAndBitshift+0x160>)
 800281a:	4013      	ands	r3, r2
 800281c:	1d1a      	adds	r2, r3, #4
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	659a      	str	r2, [r3, #88]	; 0x58
 8002822:	e00d      	b.n	8002840 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <DMA_CalcBaseAndBitshift+0x160>)
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
 8002832:	e005      	b.n	8002840 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40020010 	.word	0x40020010
 8002854:	40020028 	.word	0x40020028
 8002858:	40020040 	.word	0x40020040
 800285c:	40020058 	.word	0x40020058
 8002860:	40020070 	.word	0x40020070
 8002864:	40020088 	.word	0x40020088
 8002868:	400200a0 	.word	0x400200a0
 800286c:	400200b8 	.word	0x400200b8
 8002870:	40020410 	.word	0x40020410
 8002874:	40020428 	.word	0x40020428
 8002878:	40020440 	.word	0x40020440
 800287c:	40020458 	.word	0x40020458
 8002880:	40020470 	.word	0x40020470
 8002884:	40020488 	.word	0x40020488
 8002888:	400204a0 	.word	0x400204a0
 800288c:	400204b8 	.word	0x400204b8
 8002890:	aaaaaaab 	.word	0xaaaaaaab
 8002894:	08009728 	.word	0x08009728
 8002898:	fffffc00 	.word	0xfffffc00

0800289c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d120      	bne.n	80028f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d858      	bhi.n	800296a <DMA_CheckFifoParam+0xce>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <DMA_CheckFifoParam+0x24>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028d1 	.word	0x080028d1
 80028c4:	080028e3 	.word	0x080028e3
 80028c8:	080028d1 	.word	0x080028d1
 80028cc:	0800296b 	.word	0x0800296b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d048      	beq.n	800296e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80028e0:	e045      	b.n	800296e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ea:	d142      	bne.n	8002972 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80028f0:	e03f      	b.n	8002972 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fa:	d123      	bne.n	8002944 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	2b03      	cmp	r3, #3
 8002902:	d838      	bhi.n	8002976 <DMA_CheckFifoParam+0xda>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <DMA_CheckFifoParam+0x70>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800291d 	.word	0x0800291d
 8002910:	08002923 	.word	0x08002923
 8002914:	0800291d 	.word	0x0800291d
 8002918:	08002935 	.word	0x08002935
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
        break;
 8002920:	e030      	b.n	8002984 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d025      	beq.n	800297a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002932:	e022      	b.n	800297a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800293c:	d11f      	bne.n	800297e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002942:	e01c      	b.n	800297e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	2b02      	cmp	r3, #2
 800294a:	d902      	bls.n	8002952 <DMA_CheckFifoParam+0xb6>
 800294c:	2b03      	cmp	r3, #3
 800294e:	d003      	beq.n	8002958 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002950:	e018      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
        break;
 8002956:	e015      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
    break;
 8002968:	e00b      	b.n	8002982 <DMA_CheckFifoParam+0xe6>
        break;
 800296a:	bf00      	nop
 800296c:	e00a      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
        break;
 800296e:	bf00      	nop
 8002970:	e008      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
        break;
 8002972:	bf00      	nop
 8002974:	e006      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
        break;
 8002976:	bf00      	nop
 8002978:	e004      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
        break;
 800297a:	bf00      	nop
 800297c:	e002      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
        break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
    break;
 8002982:	bf00      	nop
    }
  }

  return status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop

08002994 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a38      	ldr	r2, [pc, #224]	; (8002a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01d      	beq.n	80029f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a35      	ldr	r2, [pc, #212]	; (8002a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d018      	beq.n	80029f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a33      	ldr	r2, [pc, #204]	; (8002a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a32      	ldr	r2, [pc, #200]	; (8002a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a30      	ldr	r2, [pc, #192]	; (8002a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80029f6:	2300      	movs	r3, #0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01a      	beq.n	8002a32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3b08      	subs	r3, #8
 8002a04:	4a28      	ldr	r2, [pc, #160]	; (8002aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	461a      	mov	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002a20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2201      	movs	r2, #1
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002a30:	e024      	b.n	8002a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	3b10      	subs	r3, #16
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d806      	bhi.n	8002a5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d902      	bls.n	8002a5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3308      	adds	r3, #8
 8002a58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	461a      	mov	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002a6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	58025408 	.word	0x58025408
 8002a8c:	5802541c 	.word	0x5802541c
 8002a90:	58025430 	.word	0x58025430
 8002a94:	58025444 	.word	0x58025444
 8002a98:	58025458 	.word	0x58025458
 8002a9c:	5802546c 	.word	0x5802546c
 8002aa0:	58025480 	.word	0x58025480
 8002aa4:	58025494 	.word	0x58025494
 8002aa8:	cccccccd 	.word	0xcccccccd
 8002aac:	16009600 	.word	0x16009600
 8002ab0:	58025880 	.word	0x58025880
 8002ab4:	aaaaaaab 	.word	0xaaaaaaab
 8002ab8:	400204b8 	.word	0x400204b8
 8002abc:	4002040f 	.word	0x4002040f
 8002ac0:	10008200 	.word	0x10008200
 8002ac4:	40020880 	.word	0x40020880

08002ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04a      	beq.n	8002b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d847      	bhi.n	8002b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a25      	ldr	r2, [pc, #148]	; (8002b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d022      	beq.n	8002b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d01d      	beq.n	8002b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d018      	beq.n	8002b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a21      	ldr	r2, [pc, #132]	; (8002b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d013      	beq.n	8002b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00e      	beq.n	8002b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1e      	ldr	r2, [pc, #120]	; (8002b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d009      	beq.n	8002b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002b50:	671a      	str	r2, [r3, #112]	; 0x70
 8002b52:	e009      	b.n	8002b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a11      	ldr	r2, [pc, #68]	; (8002bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002b66:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	58025408 	.word	0x58025408
 8002b84:	5802541c 	.word	0x5802541c
 8002b88:	58025430 	.word	0x58025430
 8002b8c:	58025444 	.word	0x58025444
 8002b90:	58025458 	.word	0x58025458
 8002b94:	5802546c 	.word	0x5802546c
 8002b98:	58025480 	.word	0x58025480
 8002b9c:	58025494 	.word	0x58025494
 8002ba0:	1600963f 	.word	0x1600963f
 8002ba4:	58025940 	.word	0x58025940
 8002ba8:	1000823f 	.word	0x1000823f
 8002bac:	40020940 	.word	0x40020940

08002bb0 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	7a1b      	ldrb	r3, [r3, #8]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d155      	bne.n	8002c76 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d049      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a49      	ldr	r2, [pc, #292]	; (8002d00 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d044      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a48      	ldr	r2, [pc, #288]	; (8002d04 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d03f      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a46      	ldr	r2, [pc, #280]	; (8002d08 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d03a      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a45      	ldr	r2, [pc, #276]	; (8002d0c <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d035      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a43      	ldr	r2, [pc, #268]	; (8002d10 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d030      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a42      	ldr	r2, [pc, #264]	; (8002d14 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d02b      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a40      	ldr	r2, [pc, #256]	; (8002d18 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d026      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a3f      	ldr	r2, [pc, #252]	; (8002d1c <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d021      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01c      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a3c      	ldr	r2, [pc, #240]	; (8002d24 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d017      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a3a      	ldr	r2, [pc, #232]	; (8002d28 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d012      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a39      	ldr	r2, [pc, #228]	; (8002d2c <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00d      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a37      	ldr	r2, [pc, #220]	; (8002d30 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d008      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a36      	ldr	r2, [pc, #216]	; (8002d34 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a34      	ldr	r2, [pc, #208]	; (8002d38 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d131      	bne.n	8002ce6 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e02f      	b.n	8002cf0 <HAL_DMAEx_ConfigMuxSync+0x140>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca2:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b2d9      	uxtb	r1, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	061a      	lsls	r2, r3, #24
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	04db      	lsls	r3, r3, #19
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	7a1b      	ldrb	r3, [r3, #8]
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	7a5b      	ldrb	r3, [r3, #9]
 8002cce:	025b      	lsls	r3, r3, #9
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e004      	b.n	8002cf0 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40020010 	.word	0x40020010
 8002d00:	40020028 	.word	0x40020028
 8002d04:	40020040 	.word	0x40020040
 8002d08:	40020058 	.word	0x40020058
 8002d0c:	40020070 	.word	0x40020070
 8002d10:	40020088 	.word	0x40020088
 8002d14:	400200a0 	.word	0x400200a0
 8002d18:	400200b8 	.word	0x400200b8
 8002d1c:	40020410 	.word	0x40020410
 8002d20:	40020428 	.word	0x40020428
 8002d24:	40020440 	.word	0x40020440
 8002d28:	40020458 	.word	0x40020458
 8002d2c:	40020470 	.word	0x40020470
 8002d30:	40020488 	.word	0x40020488
 8002d34:	400204a0 	.word	0x400204a0
 8002d38:	400204b8 	.word	0x400204b8

08002d3c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01a      	beq.n	8002d8a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d022      	beq.n	8002dd8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01a      	beq.n	8002dd8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	4798      	blx	r3
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	; 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002dee:	4b86      	ldr	r3, [pc, #536]	; (8003008 <HAL_GPIO_Init+0x228>)
 8002df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002df2:	e18c      	b.n	800310e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2101      	movs	r1, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 817e 	beq.w	8003108 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d005      	beq.n	8002e24 <HAL_GPIO_Init+0x44>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d130      	bne.n	8002e86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f003 0201 	and.w	r2, r3, #1
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d017      	beq.n	8002ec2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d123      	bne.n	8002f16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	08da      	lsrs	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3208      	adds	r2, #8
 8002ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	220f      	movs	r2, #15
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	08da      	lsrs	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3208      	adds	r2, #8
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	2203      	movs	r2, #3
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0203 	and.w	r2, r3, #3
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80d8 	beq.w	8003108 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f58:	4b2c      	ldr	r3, [pc, #176]	; (800300c <HAL_GPIO_Init+0x22c>)
 8002f5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f5e:	4a2b      	ldr	r2, [pc, #172]	; (800300c <HAL_GPIO_Init+0x22c>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f68:	4b28      	ldr	r3, [pc, #160]	; (800300c <HAL_GPIO_Init+0x22c>)
 8002f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f76:	4a26      	ldr	r2, [pc, #152]	; (8003010 <HAL_GPIO_Init+0x230>)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	; (8003014 <HAL_GPIO_Init+0x234>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d04a      	beq.n	8003038 <HAL_GPIO_Init+0x258>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <HAL_GPIO_Init+0x238>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d02b      	beq.n	8003002 <HAL_GPIO_Init+0x222>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1b      	ldr	r2, [pc, #108]	; (800301c <HAL_GPIO_Init+0x23c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d025      	beq.n	8002ffe <HAL_GPIO_Init+0x21e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1a      	ldr	r2, [pc, #104]	; (8003020 <HAL_GPIO_Init+0x240>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01f      	beq.n	8002ffa <HAL_GPIO_Init+0x21a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	; (8003024 <HAL_GPIO_Init+0x244>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d019      	beq.n	8002ff6 <HAL_GPIO_Init+0x216>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a18      	ldr	r2, [pc, #96]	; (8003028 <HAL_GPIO_Init+0x248>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_GPIO_Init+0x212>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_GPIO_Init+0x24c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00d      	beq.n	8002fee <HAL_GPIO_Init+0x20e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a16      	ldr	r2, [pc, #88]	; (8003030 <HAL_GPIO_Init+0x250>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <HAL_GPIO_Init+0x20a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a15      	ldr	r2, [pc, #84]	; (8003034 <HAL_GPIO_Init+0x254>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_GPIO_Init+0x206>
 8002fe2:	2309      	movs	r3, #9
 8002fe4:	e029      	b.n	800303a <HAL_GPIO_Init+0x25a>
 8002fe6:	230a      	movs	r3, #10
 8002fe8:	e027      	b.n	800303a <HAL_GPIO_Init+0x25a>
 8002fea:	2307      	movs	r3, #7
 8002fec:	e025      	b.n	800303a <HAL_GPIO_Init+0x25a>
 8002fee:	2306      	movs	r3, #6
 8002ff0:	e023      	b.n	800303a <HAL_GPIO_Init+0x25a>
 8002ff2:	2305      	movs	r3, #5
 8002ff4:	e021      	b.n	800303a <HAL_GPIO_Init+0x25a>
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	e01f      	b.n	800303a <HAL_GPIO_Init+0x25a>
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e01d      	b.n	800303a <HAL_GPIO_Init+0x25a>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e01b      	b.n	800303a <HAL_GPIO_Init+0x25a>
 8003002:	2301      	movs	r3, #1
 8003004:	e019      	b.n	800303a <HAL_GPIO_Init+0x25a>
 8003006:	bf00      	nop
 8003008:	58000080 	.word	0x58000080
 800300c:	58024400 	.word	0x58024400
 8003010:	58000400 	.word	0x58000400
 8003014:	58020000 	.word	0x58020000
 8003018:	58020400 	.word	0x58020400
 800301c:	58020800 	.word	0x58020800
 8003020:	58020c00 	.word	0x58020c00
 8003024:	58021000 	.word	0x58021000
 8003028:	58021400 	.word	0x58021400
 800302c:	58021800 	.word	0x58021800
 8003030:	58021c00 	.word	0x58021c00
 8003034:	58022400 	.word	0x58022400
 8003038:	2300      	movs	r3, #0
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	f002 0203 	and.w	r2, r2, #3
 8003040:	0092      	lsls	r2, r2, #2
 8003042:	4093      	lsls	r3, r2
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800304a:	4938      	ldr	r1, [pc, #224]	; (800312c <HAL_GPIO_Init+0x34c>)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	3302      	adds	r3, #2
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800307e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	3301      	adds	r3, #1
 800310c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	f47f ae6b 	bne.w	8002df4 <HAL_GPIO_Init+0x14>
  }
}
 800311e:	bf00      	nop
 8003120:	bf00      	nop
 8003122:	3724      	adds	r7, #36	; 0x24
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	58000400 	.word	0x58000400

08003130 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003138:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	2b06      	cmp	r3, #6
 8003142:	d00a      	beq.n	800315a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003144:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	429a      	cmp	r2, r3
 8003150:	d001      	beq.n	8003156 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e03f      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e03d      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800315a:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003162:	491f      	ldr	r1, [pc, #124]	; (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4313      	orrs	r3, r2
 8003168:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800316a:	f7fd fa31 	bl	80005d0 <HAL_GetTick>
 800316e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003170:	e009      	b.n	8003186 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003172:	f7fd fa2d 	bl	80005d0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003180:	d901      	bls.n	8003186 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e027      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800318e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003192:	d1ee      	bne.n	8003172 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b1e      	cmp	r3, #30
 8003198:	d008      	beq.n	80031ac <HAL_PWREx_ConfigSupply+0x7c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b2e      	cmp	r3, #46	; 0x2e
 800319e:	d005      	beq.n	80031ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b1d      	cmp	r3, #29
 80031a4:	d002      	beq.n	80031ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b2d      	cmp	r3, #45	; 0x2d
 80031aa:	d113      	bne.n	80031d4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80031ac:	f7fd fa10 	bl	80005d0 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031b2:	e009      	b.n	80031c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031b4:	f7fd fa0c 	bl	80005d0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031c2:	d901      	bls.n	80031c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e006      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0311 	and.w	r3, r3, #17
 80031d0:	2b11      	cmp	r3, #17
 80031d2:	d1ef      	bne.n	80031b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	58024800 	.word	0x58024800

080031e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e397      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8087 	beq.w	8003312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003204:	4b9e      	ldr	r3, [pc, #632]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800320e:	4b9c      	ldr	r3, [pc, #624]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	2b10      	cmp	r3, #16
 8003218:	d007      	beq.n	800322a <HAL_RCC_OscConfig+0x46>
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	2b18      	cmp	r3, #24
 800321e:	d110      	bne.n	8003242 <HAL_RCC_OscConfig+0x5e>
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d10b      	bne.n	8003242 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322a:	4b95      	ldr	r3, [pc, #596]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d06c      	beq.n	8003310 <HAL_RCC_OscConfig+0x12c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d168      	bne.n	8003310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e371      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324a:	d106      	bne.n	800325a <HAL_RCC_OscConfig+0x76>
 800324c:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a8b      	ldr	r2, [pc, #556]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	e02e      	b.n	80032b8 <HAL_RCC_OscConfig+0xd4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x98>
 8003262:	4b87      	ldr	r3, [pc, #540]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a86      	ldr	r2, [pc, #536]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b84      	ldr	r3, [pc, #528]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a83      	ldr	r2, [pc, #524]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e01d      	b.n	80032b8 <HAL_RCC_OscConfig+0xd4>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0xbc>
 8003286:	4b7e      	ldr	r3, [pc, #504]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a7d      	ldr	r2, [pc, #500]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800328c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b7b      	ldr	r3, [pc, #492]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7a      	ldr	r2, [pc, #488]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0xd4>
 80032a0:	4b77      	ldr	r3, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a76      	ldr	r2, [pc, #472]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b74      	ldr	r3, [pc, #464]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a73      	ldr	r2, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fd f986 	bl	80005d0 <HAL_GetTick>
 80032c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fd f982 	bl	80005d0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e325      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032da:	4b69      	ldr	r3, [pc, #420]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0xe4>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fd f972 	bl	80005d0 <HAL_GetTick>
 80032ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f0:	f7fd f96e 	bl	80005d0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e311      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003302:	4b5f      	ldr	r3, [pc, #380]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x10c>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 808a 	beq.w	8003434 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003320:	4b57      	ldr	r3, [pc, #348]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003328:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800332a:	4b55      	ldr	r3, [pc, #340]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_RCC_OscConfig+0x162>
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	2b18      	cmp	r3, #24
 800333a:	d137      	bne.n	80033ac <HAL_RCC_OscConfig+0x1c8>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d132      	bne.n	80033ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003346:	4b4e      	ldr	r3, [pc, #312]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x17a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e2e3      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800335e:	4b48      	ldr	r3, [pc, #288]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0219 	bic.w	r2, r3, #25
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	4945      	ldr	r1, [pc, #276]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003370:	f7fd f92e 	bl	80005d0 <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003378:	f7fd f92a 	bl	80005d0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e2cd      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	061b      	lsls	r3, r3, #24
 80033a4:	4936      	ldr	r1, [pc, #216]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033aa:	e043      	b.n	8003434 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d026      	beq.n	8003402 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033b4:	4b32      	ldr	r3, [pc, #200]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 0219 	bic.w	r2, r3, #25
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	492f      	ldr	r1, [pc, #188]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd f903 	bl	80005d0 <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ce:	f7fd f8ff 	bl	80005d0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e2a2      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	4921      	ldr	r1, [pc, #132]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
 8003400:	e018      	b.n	8003434 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003402:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1e      	ldr	r2, [pc, #120]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fd f8df 	bl	80005d0 <HAL_GetTick>
 8003412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003416:	f7fd f8db 	bl	80005d0 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e27e      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003428:	4b15      	ldr	r3, [pc, #84]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d06d      	beq.n	800351c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003448:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b08      	cmp	r3, #8
 8003454:	d007      	beq.n	8003466 <HAL_RCC_OscConfig+0x282>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b18      	cmp	r3, #24
 800345a:	d11e      	bne.n	800349a <HAL_RCC_OscConfig+0x2b6>
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d119      	bne.n	800349a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_RCC_OscConfig+0x2a0>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	2b80      	cmp	r3, #128	; 0x80
 8003478:	d004      	beq.n	8003484 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e253      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
 800347e:	bf00      	nop
 8003480:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003484:	4ba3      	ldr	r3, [pc, #652]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	49a0      	ldr	r1, [pc, #640]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003494:	4313      	orrs	r3, r2
 8003496:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003498:	e040      	b.n	800351c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d023      	beq.n	80034ea <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034a2:	4b9c      	ldr	r3, [pc, #624]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a9b      	ldr	r2, [pc, #620]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80034a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fd f88f 	bl	80005d0 <HAL_GetTick>
 80034b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034b6:	f7fd f88b 	bl	80005d0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e22e      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034c8:	4b92      	ldr	r3, [pc, #584]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d4:	4b8f      	ldr	r3, [pc, #572]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	498c      	ldr	r1, [pc, #560]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60cb      	str	r3, [r1, #12]
 80034e8:	e018      	b.n	800351c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034ea:	4b8a      	ldr	r3, [pc, #552]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a89      	ldr	r2, [pc, #548]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80034f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fd f86b 	bl	80005d0 <HAL_GetTick>
 80034fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034fe:	f7fd f867 	bl	80005d0 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e20a      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003510:	4b80      	ldr	r3, [pc, #512]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f0      	bne.n	80034fe <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d036      	beq.n	8003596 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d019      	beq.n	8003564 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003530:	4b78      	ldr	r3, [pc, #480]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	4a77      	ldr	r2, [pc, #476]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fd f848 	bl	80005d0 <HAL_GetTick>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003544:	f7fd f844 	bl	80005d0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e1e7      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003556:	4b6f      	ldr	r3, [pc, #444]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x360>
 8003562:	e018      	b.n	8003596 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003564:	4b6b      	ldr	r3, [pc, #428]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003568:	4a6a      	ldr	r2, [pc, #424]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fd f82e 	bl	80005d0 <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003578:	f7fd f82a 	bl	80005d0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e1cd      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800358a:	4b62      	ldr	r3, [pc, #392]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d036      	beq.n	8003610 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d019      	beq.n	80035de <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035aa:	4b5a      	ldr	r3, [pc, #360]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a59      	ldr	r2, [pc, #356]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80035b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035b6:	f7fd f80b 	bl	80005d0 <HAL_GetTick>
 80035ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035be:	f7fd f807 	bl	80005d0 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e1aa      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035d0:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x3da>
 80035dc:	e018      	b.n	8003610 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035de:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a4c      	ldr	r2, [pc, #304]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80035e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035ea:	f7fc fff1 	bl	80005d0 <HAL_GetTick>
 80035ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035f2:	f7fc ffed 	bl	80005d0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e190      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003604:	4b43      	ldr	r3, [pc, #268]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8085 	beq.w	8003728 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800361e:	4b3e      	ldr	r3, [pc, #248]	; (8003718 <HAL_RCC_OscConfig+0x534>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a3d      	ldr	r2, [pc, #244]	; (8003718 <HAL_RCC_OscConfig+0x534>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800362a:	f7fc ffd1 	bl	80005d0 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7fc ffcd 	bl	80005d0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b64      	cmp	r3, #100	; 0x64
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e170      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <HAL_RCC_OscConfig+0x534>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d106      	bne.n	8003666 <HAL_RCC_OscConfig+0x482>
 8003658:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a2d      	ldr	r2, [pc, #180]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	e02d      	b.n	80036c2 <HAL_RCC_OscConfig+0x4de>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x4a4>
 800366e:	4b29      	ldr	r3, [pc, #164]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a28      	ldr	r2, [pc, #160]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
 800367a:	4b26      	ldr	r3, [pc, #152]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	4a25      	ldr	r2, [pc, #148]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6713      	str	r3, [r2, #112]	; 0x70
 8003686:	e01c      	b.n	80036c2 <HAL_RCC_OscConfig+0x4de>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x4c6>
 8003690:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6713      	str	r3, [r2, #112]	; 0x70
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0x4de>
 80036aa:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a19      	ldr	r2, [pc, #100]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d015      	beq.n	80036f6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7fc ff81 	bl	80005d0 <HAL_GetTick>
 80036ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fc ff7d 	bl	80005d0 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e11e      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_RCC_OscConfig+0x530>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ee      	beq.n	80036d2 <HAL_RCC_OscConfig+0x4ee>
 80036f4:	e018      	b.n	8003728 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f6:	f7fc ff6b 	bl	80005d0 <HAL_GetTick>
 80036fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036fc:	e00e      	b.n	800371c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fc ff67 	bl	80005d0 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	; 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d905      	bls.n	800371c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e108      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
 8003714:	58024400 	.word	0x58024400
 8003718:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800371c:	4b84      	ldr	r3, [pc, #528]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ea      	bne.n	80036fe <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80f9 	beq.w	8003924 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003732:	4b7f      	ldr	r3, [pc, #508]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800373a:	2b18      	cmp	r3, #24
 800373c:	f000 80b4 	beq.w	80038a8 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 8095 	bne.w	8003874 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b79      	ldr	r3, [pc, #484]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a78      	ldr	r2, [pc, #480]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fc ff3b 	bl	80005d0 <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375e:	f7fc ff37 	bl	80005d0 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0da      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003770:	4b6f      	ldr	r3, [pc, #444]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800377c:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 800377e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003780:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <HAL_RCC_OscConfig+0x750>)
 8003782:	4013      	ands	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	430a      	orrs	r2, r1
 8003790:	4967      	ldr	r1, [pc, #412]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	628b      	str	r3, [r1, #40]	; 0x28
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	3b01      	subs	r3, #1
 800379c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	3b01      	subs	r3, #1
 80037a6:	025b      	lsls	r3, r3, #9
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	3b01      	subs	r3, #1
 80037b2:	041b      	lsls	r3, r3, #16
 80037b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	3b01      	subs	r3, #1
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037c6:	495a      	ldr	r1, [pc, #360]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80037cc:	4b58      	ldr	r3, [pc, #352]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	4a57      	ldr	r2, [pc, #348]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037d8:	4b55      	ldr	r3, [pc, #340]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 80037da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037dc:	4b56      	ldr	r3, [pc, #344]	; (8003938 <HAL_RCC_OscConfig+0x754>)
 80037de:	4013      	ands	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037e4:	00d2      	lsls	r2, r2, #3
 80037e6:	4952      	ldr	r1, [pc, #328]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037ec:	4b50      	ldr	r3, [pc, #320]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	f023 020c 	bic.w	r2, r3, #12
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	494d      	ldr	r1, [pc, #308]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037fe:	4b4c      	ldr	r3, [pc, #304]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f023 0202 	bic.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	4949      	ldr	r1, [pc, #292]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003810:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4a46      	ldr	r2, [pc, #280]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800381c:	4b44      	ldr	r3, [pc, #272]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	4a43      	ldr	r2, [pc, #268]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003828:	4b41      	ldr	r3, [pc, #260]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4a40      	ldr	r2, [pc, #256]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 800382e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003834:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	4a3d      	ldr	r2, [pc, #244]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003840:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a3a      	ldr	r2, [pc, #232]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fc fec0 	bl	80005d0 <HAL_GetTick>
 8003850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003854:	f7fc febc 	bl	80005d0 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e05f      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003866:	4b32      	ldr	r3, [pc, #200]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x670>
 8003872:	e057      	b.n	8003924 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a2d      	ldr	r2, [pc, #180]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 800387a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800387e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fc fea6 	bl	80005d0 <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fc fea2 	bl	80005d0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e045      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800389a:	4b25      	ldr	r3, [pc, #148]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x6a4>
 80038a6:	e03d      	b.n	8003924 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038a8:	4b21      	ldr	r3, [pc, #132]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_RCC_OscConfig+0x74c>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d031      	beq.n	8003920 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f003 0203 	and.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d12a      	bne.n	8003920 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d122      	bne.n	8003920 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d11a      	bne.n	8003920 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	0a5b      	lsrs	r3, r3, #9
 80038ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d111      	bne.n	8003920 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d108      	bne.n	8003920 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3730      	adds	r7, #48	; 0x30
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
 8003934:	fffffc0c 	.word	0xfffffc0c
 8003938:	ffff0007 	.word	0xffff0007

0800393c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e19c      	b.n	8003c8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b8a      	ldr	r3, [pc, #552]	; (8003b7c <HAL_RCC_ClockConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b87      	ldr	r3, [pc, #540]	; (8003b7c <HAL_RCC_ClockConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 020f 	bic.w	r2, r3, #15
 8003966:	4985      	ldr	r1, [pc, #532]	; (8003b7c <HAL_RCC_ClockConfig+0x240>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b83      	ldr	r3, [pc, #524]	; (8003b7c <HAL_RCC_ClockConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e184      	b.n	8003c8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d010      	beq.n	80039ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	4b7b      	ldr	r3, [pc, #492]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003998:	429a      	cmp	r2, r3
 800399a:	d908      	bls.n	80039ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800399c:	4b78      	ldr	r3, [pc, #480]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	4975      	ldr	r1, [pc, #468]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d010      	beq.n	80039dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	4b70      	ldr	r3, [pc, #448]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d908      	bls.n	80039dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039ca:	4b6d      	ldr	r3, [pc, #436]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	496a      	ldr	r1, [pc, #424]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d010      	beq.n	8003a0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699a      	ldr	r2, [r3, #24]
 80039ec:	4b64      	ldr	r3, [pc, #400]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d908      	bls.n	8003a0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	495e      	ldr	r1, [pc, #376]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d010      	beq.n	8003a38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d908      	bls.n	8003a38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a26:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4953      	ldr	r1, [pc, #332]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d010      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	4b4d      	ldr	r3, [pc, #308]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d908      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f023 020f 	bic.w	r2, r3, #15
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4947      	ldr	r1, [pc, #284]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d055      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a72:	4b43      	ldr	r3, [pc, #268]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	4940      	ldr	r1, [pc, #256]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d107      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a8c:	4b3c      	ldr	r3, [pc, #240]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d121      	bne.n	8003adc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0f6      	b.n	8003c8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aa4:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d115      	bne.n	8003adc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0ea      	b.n	8003c8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003abc:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0de      	b.n	8003c8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003acc:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0d6      	b.n	8003c8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003adc:	4b28      	ldr	r3, [pc, #160]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f023 0207 	bic.w	r2, r3, #7
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4925      	ldr	r1, [pc, #148]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fc fd6f 	bl	80005d0 <HAL_GetTick>
 8003af2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af6:	f7fc fd6b 	bl	80005d0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0be      	b.n	8003c8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d1eb      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d010      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d208      	bcs.n	8003b4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f023 020f 	bic.w	r2, r3, #15
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	490e      	ldr	r1, [pc, #56]	; (8003b80 <HAL_RCC_ClockConfig+0x244>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x240>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d214      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_RCC_ClockConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 020f 	bic.w	r2, r3, #15
 8003b62:	4906      	ldr	r1, [pc, #24]	; (8003b7c <HAL_RCC_ClockConfig+0x240>)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <HAL_RCC_ClockConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e086      	b.n	8003c8a <HAL_RCC_ClockConfig+0x34e>
 8003b7c:	52002000 	.word	0x52002000
 8003b80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d010      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	4b3f      	ldr	r3, [pc, #252]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d208      	bcs.n	8003bb2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ba0:	4b3c      	ldr	r3, [pc, #240]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	4939      	ldr	r1, [pc, #228]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d208      	bcs.n	8003be0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	492e      	ldr	r1, [pc, #184]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699a      	ldr	r2, [r3, #24]
 8003bf0:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d208      	bcs.n	8003c0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	4922      	ldr	r1, [pc, #136]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d010      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d208      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c2a:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	4917      	ldr	r1, [pc, #92]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c3c:	f000 f834 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	4912      	ldr	r1, [pc, #72]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
 8003c58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c5a:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <HAL_RCC_ClockConfig+0x358>)
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003c64:	5cd3      	ldrb	r3, [r2, r3]
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <HAL_RCC_ClockConfig+0x360>)
 8003c72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <HAL_RCC_ClockConfig+0x364>)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <HAL_RCC_ClockConfig+0x368>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fc fc5c 	bl	800053c <HAL_InitTick>
 8003c84:	4603      	mov	r3, r0
 8003c86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	58024400 	.word	0x58024400
 8003c98:	08009730 	.word	0x08009730
 8003c9c:	2400040c 	.word	0x2400040c
 8003ca0:	24000408 	.word	0x24000408
 8003ca4:	24000400 	.word	0x24000400

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b089      	sub	sp, #36	; 0x24
 8003cac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cae:	4bb3      	ldr	r3, [pc, #716]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb6:	2b18      	cmp	r3, #24
 8003cb8:	f200 8155 	bhi.w	8003f66 <HAL_RCC_GetSysClockFreq+0x2be>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003d29 	.word	0x08003d29
 8003cc8:	08003f67 	.word	0x08003f67
 8003ccc:	08003f67 	.word	0x08003f67
 8003cd0:	08003f67 	.word	0x08003f67
 8003cd4:	08003f67 	.word	0x08003f67
 8003cd8:	08003f67 	.word	0x08003f67
 8003cdc:	08003f67 	.word	0x08003f67
 8003ce0:	08003f67 	.word	0x08003f67
 8003ce4:	08003d4f 	.word	0x08003d4f
 8003ce8:	08003f67 	.word	0x08003f67
 8003cec:	08003f67 	.word	0x08003f67
 8003cf0:	08003f67 	.word	0x08003f67
 8003cf4:	08003f67 	.word	0x08003f67
 8003cf8:	08003f67 	.word	0x08003f67
 8003cfc:	08003f67 	.word	0x08003f67
 8003d00:	08003f67 	.word	0x08003f67
 8003d04:	08003d55 	.word	0x08003d55
 8003d08:	08003f67 	.word	0x08003f67
 8003d0c:	08003f67 	.word	0x08003f67
 8003d10:	08003f67 	.word	0x08003f67
 8003d14:	08003f67 	.word	0x08003f67
 8003d18:	08003f67 	.word	0x08003f67
 8003d1c:	08003f67 	.word	0x08003f67
 8003d20:	08003f67 	.word	0x08003f67
 8003d24:	08003d5b 	.word	0x08003d5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d28:	4b94      	ldr	r3, [pc, #592]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d009      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d34:	4b91      	ldr	r3, [pc, #580]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	08db      	lsrs	r3, r3, #3
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	4a90      	ldr	r2, [pc, #576]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
 8003d44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d46:	e111      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d48:	4b8d      	ldr	r3, [pc, #564]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d4a:	61bb      	str	r3, [r7, #24]
    break;
 8003d4c:	e10e      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d4e:	4b8d      	ldr	r3, [pc, #564]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d50:	61bb      	str	r3, [r7, #24]
    break;
 8003d52:	e10b      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d54:	4b8c      	ldr	r3, [pc, #560]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d56:	61bb      	str	r3, [r7, #24]
    break;
 8003d58:	e108      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d5a:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d64:	4b85      	ldr	r3, [pc, #532]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d70:	4b82      	ldr	r3, [pc, #520]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d7a:	4b80      	ldr	r3, [pc, #512]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	08db      	lsrs	r3, r3, #3
 8003d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80e1 	beq.w	8003f60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	f000 8083 	beq.w	8003eac <HAL_RCC_GetSysClockFreq+0x204>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	f200 80a1 	bhi.w	8003ef0 <HAL_RCC_GetSysClockFreq+0x248>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x114>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d056      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003dba:	e099      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dbc:	4b6f      	ldr	r3, [pc, #444]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d02d      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dc8:	4b6c      	ldr	r3, [pc, #432]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	08db      	lsrs	r3, r3, #3
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	4a6b      	ldr	r2, [pc, #428]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	ee07 3a90 	vmov	s15, r3
 8003de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df2:	4b62      	ldr	r3, [pc, #392]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e22:	e087      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e36:	4b51      	ldr	r3, [pc, #324]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e66:	e065      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e7a:	4b40      	ldr	r3, [pc, #256]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eaa:	e043      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ebe:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ed2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eee:	e021      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f32:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	0a5b      	lsrs	r3, r3, #9
 8003f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3e:	3301      	adds	r3, #1
 8003f40:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	ee07 3a90 	vmov	s15, r3
 8003f48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f58:	ee17 3a90 	vmov	r3, s15
 8003f5c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f5e:	e005      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
    break;
 8003f64:	e002      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f68:	61bb      	str	r3, [r7, #24]
    break;
 8003f6a:	bf00      	nop
  }

  return sysclockfreq;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	; 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	03d09000 	.word	0x03d09000
 8003f84:	003d0900 	.word	0x003d0900
 8003f88:	017d7840 	.word	0x017d7840
 8003f8c:	46000000 	.word	0x46000000
 8003f90:	4c742400 	.word	0x4c742400
 8003f94:	4a742400 	.word	0x4a742400
 8003f98:	4bbebc20 	.word	0x4bbebc20

08003f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003fa2:	f7ff fe81 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_RCC_GetHCLKFreq+0x50>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	490f      	ldr	r1, [pc, #60]	; (8003ff0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fb4:	5ccb      	ldrb	r3, [r1, r3]
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RCC_GetHCLKFreq+0x50>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fca:	5cd3      	ldrb	r3, [r2, r3]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fda:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	58024400 	.word	0x58024400
 8003ff0:	08009730 	.word	0x08009730
 8003ff4:	2400040c 	.word	0x2400040c
 8003ff8:	24000408 	.word	0x24000408

08003ffc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004004:	2300      	movs	r3, #0
 8004006:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004008:	2300      	movs	r3, #0
 800400a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d03f      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004020:	d02a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004022:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004026:	d824      	bhi.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800402c:	d018      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800402e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004032:	d81e      	bhi.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403c:	d007      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800403e:	e018      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004040:	4bab      	ldr	r3, [pc, #684]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4aaa      	ldr	r2, [pc, #680]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800404c:	e015      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3304      	adds	r3, #4
 8004052:	2102      	movs	r1, #2
 8004054:	4618      	mov	r0, r3
 8004056:	f001 feff 	bl	8005e58 <RCCEx_PLL2_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800405e:	e00c      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3324      	adds	r3, #36	; 0x24
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f001 ffa8 	bl	8005fbc <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004070:	e003      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
      break;
 8004076:	e000      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004080:	4b9b      	ldr	r3, [pc, #620]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004084:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	4998      	ldr	r1, [pc, #608]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	650b      	str	r3, [r1, #80]	; 0x50
 8004092:	e001      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03d      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d826      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040c9 	.word	0x080040c9
 80040b8:	080040d7 	.word	0x080040d7
 80040bc:	080040e9 	.word	0x080040e9
 80040c0:	08004101 	.word	0x08004101
 80040c4:	08004101 	.word	0x08004101
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c8:	4b89      	ldr	r3, [pc, #548]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	4a88      	ldr	r2, [pc, #544]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040d4:	e015      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3304      	adds	r3, #4
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 febb 	bl	8005e58 <RCCEx_PLL2_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040e6:	e00c      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3324      	adds	r3, #36	; 0x24
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 ff64 	bl	8005fbc <RCCEx_PLL3_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
      break;
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d109      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004108:	4b79      	ldr	r3, [pc, #484]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800410a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410c:	f023 0207 	bic.w	r2, r3, #7
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	4976      	ldr	r1, [pc, #472]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004116:	4313      	orrs	r3, r2
 8004118:	650b      	str	r3, [r1, #80]	; 0x50
 800411a:	e001      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004128:	2b00      	cmp	r3, #0
 800412a:	d051      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004132:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004136:	d036      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004138:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800413c:	d830      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800413e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004142:	d032      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004144:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004148:	d82a      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800414a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800414e:	d02e      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004150:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004154:	d824      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800415a:	d018      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800415c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004160:	d81e      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800416a:	d007      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800416c:	e018      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416e:	4b60      	ldr	r3, [pc, #384]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	4a5f      	ldr	r2, [pc, #380]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800417a:	e019      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f001 fe68 	bl	8005e58 <RCCEx_PLL2_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800418c:	e010      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3324      	adds	r3, #36	; 0x24
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f001 ff11 	bl	8005fbc <RCCEx_PLL3_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800419e:	e007      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75fb      	strb	r3, [r7, #23]
      break;
 80041a4:	e004      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10a      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80041b6:	4b4e      	ldr	r3, [pc, #312]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041c4:	494a      	ldr	r1, [pc, #296]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	658b      	str	r3, [r1, #88]	; 0x58
 80041ca:	e001      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d051      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041e2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80041e6:	d036      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80041e8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80041ec:	d830      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80041ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041f2:	d032      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80041f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041f8:	d82a      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80041fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041fe:	d02e      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004200:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004204:	d824      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800420a:	d018      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800420c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004210:	d81e      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004216:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800421a:	d007      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800421c:	e018      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421e:	4b34      	ldr	r3, [pc, #208]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	4a33      	ldr	r2, [pc, #204]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004228:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800422a:	e019      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f001 fe10 	bl	8005e58 <RCCEx_PLL2_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800423c:	e010      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3324      	adds	r3, #36	; 0x24
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f001 feb9 	bl	8005fbc <RCCEx_PLL3_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800424e:	e007      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
      break;
 8004254:	e004      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004256:	bf00      	nop
 8004258:	e002      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800425a:	bf00      	nop
 800425c:	e000      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800425e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004266:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004274:	491e      	ldr	r1, [pc, #120]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004276:	4313      	orrs	r3, r2
 8004278:	658b      	str	r3, [r1, #88]	; 0x58
 800427a:	e001      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d035      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004290:	2b30      	cmp	r3, #48	; 0x30
 8004292:	d01c      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004294:	2b30      	cmp	r3, #48	; 0x30
 8004296:	d817      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004298:	2b20      	cmp	r3, #32
 800429a:	d00c      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800429c:	2b20      	cmp	r3, #32
 800429e:	d813      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d10f      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a8:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80042b4:	e00e      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2102      	movs	r1, #2
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 fdcb 	bl	8005e58 <RCCEx_PLL2_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80042c6:	e005      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
      break;
 80042cc:	e002      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80042d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80042da:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e6:	4902      	ldr	r1, [pc, #8]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042ec:	e004      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80042ee:	bf00      	nop
 80042f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d047      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800430c:	d030      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800430e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004312:	d82a      	bhi.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004314:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004318:	d02c      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800431a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800431e:	d824      	bhi.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d018      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432a:	d81e      	bhi.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004334:	d007      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004336:	e018      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004338:	4bac      	ldr	r3, [pc, #688]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	4aab      	ldr	r2, [pc, #684]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800433e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004342:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004344:	e017      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fd83 	bl	8005e58 <RCCEx_PLL2_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004356:	e00e      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3324      	adds	r3, #36	; 0x24
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f001 fe2c 	bl	8005fbc <RCCEx_PLL3_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004368:	e005      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
      break;
 800436e:	e002      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800437c:	4b9b      	ldr	r3, [pc, #620]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	4998      	ldr	r1, [pc, #608]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	650b      	str	r3, [r1, #80]	; 0x50
 800438e:	e001      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d049      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a8:	d02e      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ae:	d828      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043b4:	d02a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80043b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043ba:	d822      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043c0:	d026      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80043c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043c6:	d81c      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043cc:	d010      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80043ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043d2:	d816      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01d      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d111      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2101      	movs	r1, #1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fd37 	bl	8005e58 <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80043ee:	e012      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3324      	adds	r3, #36	; 0x24
 80043f4:	2101      	movs	r1, #1
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 fde0 	bl	8005fbc <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004400:	e009      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	75fb      	strb	r3, [r7, #23]
      break;
 8004406:	e006      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004408:	bf00      	nop
 800440a:	e004      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800440c:	bf00      	nop
 800440e:	e002      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004410:	bf00      	nop
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004416:	7dfb      	ldrb	r3, [r7, #23]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800441c:	4b73      	ldr	r3, [pc, #460]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800441e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004420:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	4970      	ldr	r1, [pc, #448]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	650b      	str	r3, [r1, #80]	; 0x50
 800442e:	e001      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d04b      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800444a:	d02e      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800444c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004450:	d828      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004456:	d02a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d822      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800445e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004462:	d026      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004464:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004468:	d81c      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800446a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800446e:	d010      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004474:	d816      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01d      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800447a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800447e:	d111      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	2101      	movs	r1, #1
 8004486:	4618      	mov	r0, r3
 8004488:	f001 fce6 	bl	8005e58 <RCCEx_PLL2_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004490:	e012      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3324      	adds	r3, #36	; 0x24
 8004496:	2101      	movs	r1, #1
 8004498:	4618      	mov	r0, r3
 800449a:	f001 fd8f 	bl	8005fbc <RCCEx_PLL3_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80044a2:	e009      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	75fb      	strb	r3, [r7, #23]
      break;
 80044a8:	e006      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044aa:	bf00      	nop
 80044ac:	e004      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80044be:	4b4b      	ldr	r3, [pc, #300]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044cc:	4947      	ldr	r1, [pc, #284]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	658b      	str	r3, [r1, #88]	; 0x58
 80044d2:	e001      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02f      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ec:	d00e      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x510>
 80044ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f2:	d814      	bhi.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80044f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044fc:	d10f      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fe:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	4a3a      	ldr	r2, [pc, #232]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004508:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800450a:	e00c      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f001 fca0 	bl	8005e58 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800451c:	e003      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
      break;
 8004522:	e000      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d109      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800452c:	4b2f      	ldr	r3, [pc, #188]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800452e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004530:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004538:	492c      	ldr	r1, [pc, #176]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800453a:	4313      	orrs	r3, r2
 800453c:	650b      	str	r3, [r1, #80]	; 0x50
 800453e:	e001      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d032      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	2b03      	cmp	r3, #3
 8004556:	d81b      	bhi.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004597 	.word	0x08004597
 8004564:	08004571 	.word	0x08004571
 8004568:	0800457f 	.word	0x0800457f
 800456c:	08004597 	.word	0x08004597
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004570:	4b1e      	ldr	r3, [pc, #120]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800457c:	e00c      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3304      	adds	r3, #4
 8004582:	2102      	movs	r1, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f001 fc67 	bl	8005e58 <RCCEx_PLL2_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	75fb      	strb	r3, [r7, #23]
      break;
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	f023 0203 	bic.w	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	4910      	ldr	r1, [pc, #64]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045b0:	e001      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 808a 	beq.w	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045d0:	f7fb fffe 	bl	80005d0 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045d6:	e00d      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d8:	f7fb fffa 	bl	80005d0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d906      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	75fb      	strb	r3, [r7, #23]
        break;
 80045ea:	e009      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80045ec:	58024400 	.word	0x58024400
 80045f0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045f4:	4bb9      	ldr	r3, [pc, #740]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0eb      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d166      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004606:	4bb6      	ldr	r3, [pc, #728]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004610:	4053      	eors	r3, r2
 8004612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004616:	2b00      	cmp	r3, #0
 8004618:	d013      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800461a:	4bb1      	ldr	r3, [pc, #708]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004622:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004624:	4bae      	ldr	r3, [pc, #696]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	4aad      	ldr	r2, [pc, #692]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800462a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004630:	4bab      	ldr	r3, [pc, #684]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	4aaa      	ldr	r2, [pc, #680]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800463c:	4aa8      	ldr	r2, [pc, #672]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464c:	d115      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fb ffbf 	bl	80005d0 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004654:	e00b      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004656:	f7fb ffbb 	bl	80005d0 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f241 3288 	movw	r2, #5000	; 0x1388
 8004664:	4293      	cmp	r3, r2
 8004666:	d902      	bls.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	75fb      	strb	r3, [r7, #23]
            break;
 800466c:	e005      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800466e:	4b9c      	ldr	r3, [pc, #624]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ed      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800467a:	7dfb      	ldrb	r3, [r7, #23]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d126      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468e:	d10d      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004690:	4b93      	ldr	r3, [pc, #588]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800469e:	0919      	lsrs	r1, r3, #4
 80046a0:	4b90      	ldr	r3, [pc, #576]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80046a2:	400b      	ands	r3, r1
 80046a4:	498e      	ldr	r1, [pc, #568]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	610b      	str	r3, [r1, #16]
 80046aa:	e005      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80046ac:	4b8c      	ldr	r3, [pc, #560]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	4a8b      	ldr	r2, [pc, #556]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046b6:	6113      	str	r3, [r2, #16]
 80046b8:	4b89      	ldr	r3, [pc, #548]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c6:	4986      	ldr	r1, [pc, #536]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	670b      	str	r3, [r1, #112]	; 0x70
 80046cc:	e004      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	75bb      	strb	r3, [r7, #22]
 80046d2:	e001      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d07e      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e8:	2b28      	cmp	r3, #40	; 0x28
 80046ea:	d867      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	080047c3 	.word	0x080047c3
 80046f8:	080047bd 	.word	0x080047bd
 80046fc:	080047bd 	.word	0x080047bd
 8004700:	080047bd 	.word	0x080047bd
 8004704:	080047bd 	.word	0x080047bd
 8004708:	080047bd 	.word	0x080047bd
 800470c:	080047bd 	.word	0x080047bd
 8004710:	080047bd 	.word	0x080047bd
 8004714:	08004799 	.word	0x08004799
 8004718:	080047bd 	.word	0x080047bd
 800471c:	080047bd 	.word	0x080047bd
 8004720:	080047bd 	.word	0x080047bd
 8004724:	080047bd 	.word	0x080047bd
 8004728:	080047bd 	.word	0x080047bd
 800472c:	080047bd 	.word	0x080047bd
 8004730:	080047bd 	.word	0x080047bd
 8004734:	080047ab 	.word	0x080047ab
 8004738:	080047bd 	.word	0x080047bd
 800473c:	080047bd 	.word	0x080047bd
 8004740:	080047bd 	.word	0x080047bd
 8004744:	080047bd 	.word	0x080047bd
 8004748:	080047bd 	.word	0x080047bd
 800474c:	080047bd 	.word	0x080047bd
 8004750:	080047bd 	.word	0x080047bd
 8004754:	080047c3 	.word	0x080047c3
 8004758:	080047bd 	.word	0x080047bd
 800475c:	080047bd 	.word	0x080047bd
 8004760:	080047bd 	.word	0x080047bd
 8004764:	080047bd 	.word	0x080047bd
 8004768:	080047bd 	.word	0x080047bd
 800476c:	080047bd 	.word	0x080047bd
 8004770:	080047bd 	.word	0x080047bd
 8004774:	080047c3 	.word	0x080047c3
 8004778:	080047bd 	.word	0x080047bd
 800477c:	080047bd 	.word	0x080047bd
 8004780:	080047bd 	.word	0x080047bd
 8004784:	080047bd 	.word	0x080047bd
 8004788:	080047bd 	.word	0x080047bd
 800478c:	080047bd 	.word	0x080047bd
 8004790:	080047bd 	.word	0x080047bd
 8004794:	080047c3 	.word	0x080047c3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	2101      	movs	r1, #1
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 fb5a 	bl	8005e58 <RCCEx_PLL2_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80047a8:	e00c      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3324      	adds	r3, #36	; 0x24
 80047ae:	2101      	movs	r1, #1
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 fc03 	bl	8005fbc <RCCEx_PLL3_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80047ba:	e003      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	75fb      	strb	r3, [r7, #23]
      break;
 80047c0:	e000      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80047c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047ca:	4b45      	ldr	r3, [pc, #276]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d6:	4942      	ldr	r1, [pc, #264]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	654b      	str	r3, [r1, #84]	; 0x54
 80047dc:	e001      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d037      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d820      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	0800483f 	.word	0x0800483f
 8004800:	08004815 	.word	0x08004815
 8004804:	08004827 	.word	0x08004827
 8004808:	0800483f 	.word	0x0800483f
 800480c:	0800483f 	.word	0x0800483f
 8004810:	0800483f 	.word	0x0800483f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3304      	adds	r3, #4
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f001 fb1c 	bl	8005e58 <RCCEx_PLL2_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004824:	e00c      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3324      	adds	r3, #36	; 0x24
 800482a:	2101      	movs	r1, #1
 800482c:	4618      	mov	r0, r3
 800482e:	f001 fbc5 	bl	8005fbc <RCCEx_PLL3_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004836:	e003      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	75fb      	strb	r3, [r7, #23]
      break;
 800483c:	e000      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800483e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004846:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f023 0207 	bic.w	r2, r3, #7
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	4923      	ldr	r1, [pc, #140]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	654b      	str	r3, [r1, #84]	; 0x54
 8004858:	e001      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d040      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004870:	2b05      	cmp	r3, #5
 8004872:	d821      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004874:	a201      	add	r2, pc, #4	; (adr r2, 800487c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	080048bf 	.word	0x080048bf
 8004880:	08004895 	.word	0x08004895
 8004884:	080048a7 	.word	0x080048a7
 8004888:	080048bf 	.word	0x080048bf
 800488c:	080048bf 	.word	0x080048bf
 8004890:	080048bf 	.word	0x080048bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3304      	adds	r3, #4
 8004898:	2101      	movs	r1, #1
 800489a:	4618      	mov	r0, r3
 800489c:	f001 fadc 	bl	8005e58 <RCCEx_PLL2_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80048a4:	e00c      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3324      	adds	r3, #36	; 0x24
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 fb85 	bl	8005fbc <RCCEx_PLL3_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80048b6:	e003      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
      break;
 80048bc:	e000      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80048be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d110      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	f023 0207 	bic.w	r2, r3, #7
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d4:	4902      	ldr	r1, [pc, #8]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	658b      	str	r3, [r1, #88]	; 0x58
 80048da:	e007      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80048dc:	58024800 	.word	0x58024800
 80048e0:	58024400 	.word	0x58024400
 80048e4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d04b      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004902:	d02e      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004908:	d828      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d02a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004914:	d822      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004916:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800491a:	d026      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800491c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004920:	d81c      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004926:	d010      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800492c:	d816      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01d      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004936:	d111      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f001 fa8a 	bl	8005e58 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004948:	e012      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3324      	adds	r3, #36	; 0x24
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f001 fb33 	bl	8005fbc <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800495a:	e009      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
      break;
 8004960:	e006      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004962:	bf00      	nop
 8004964:	e004      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800496e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004976:	4bb2      	ldr	r3, [pc, #712]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	49ae      	ldr	r1, [pc, #696]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004986:	4313      	orrs	r3, r2
 8004988:	654b      	str	r3, [r1, #84]	; 0x54
 800498a:	e001      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d04b      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049a6:	d02e      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80049a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049ac:	d828      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80049ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b2:	d02a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b8:	d822      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80049ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049be:	d026      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80049c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c4:	d81c      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80049c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ca:	d010      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80049cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d0:	d816      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01d      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80049d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049da:	d111      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f001 fa38 	bl	8005e58 <RCCEx_PLL2_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80049ec:	e012      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3324      	adds	r3, #36	; 0x24
 80049f2:	2102      	movs	r1, #2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 fae1 	bl	8005fbc <RCCEx_PLL3_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80049fe:	e009      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]
      break;
 8004a04:	e006      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a06:	bf00      	nop
 8004a08:	e004      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e002      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a1a:	4b89      	ldr	r3, [pc, #548]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a28:	4985      	ldr	r1, [pc, #532]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	658b      	str	r3, [r1, #88]	; 0x58
 8004a2e:	e001      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d04b      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a46:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a4a:	d02e      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004a4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a50:	d828      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a56:	d02a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5c:	d822      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a62:	d026      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004a64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a68:	d81c      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a6e:	d010      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a74:	d816      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01d      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7e:	d111      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	2100      	movs	r1, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 f9e6 	bl	8005e58 <RCCEx_PLL2_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a90:	e012      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3324      	adds	r3, #36	; 0x24
 8004a96:	2102      	movs	r1, #2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f001 fa8f 	bl	8005fbc <RCCEx_PLL3_Config>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004aa2:	e009      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa8:	e006      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004aaa:	bf00      	nop
 8004aac:	e004      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004abe:	4b60      	ldr	r3, [pc, #384]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004acc:	495c      	ldr	r1, [pc, #368]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	658b      	str	r3, [r1, #88]	; 0x58
 8004ad2:	e001      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d018      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aec:	d10a      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3324      	adds	r3, #36	; 0x24
 8004af2:	2102      	movs	r1, #2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 fa61 	bl	8005fbc <RCCEx_PLL3_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b04:	4b4e      	ldr	r3, [pc, #312]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b10:	494b      	ldr	r1, [pc, #300]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2c:	d10a      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3324      	adds	r3, #36	; 0x24
 8004b32:	2102      	movs	r1, #2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 fa41 	bl	8005fbc <RCCEx_PLL3_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b44:	4b3e      	ldr	r3, [pc, #248]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	493b      	ldr	r1, [pc, #236]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d034      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b6e:	d01d      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b74:	d817      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7e:	d009      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b80:	e011      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	2100      	movs	r1, #0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 f965 	bl	8005e58 <RCCEx_PLL2_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b92:	e00c      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3324      	adds	r3, #36	; 0x24
 8004b98:	2102      	movs	r1, #2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f001 fa0e 	bl	8005fbc <RCCEx_PLL3_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ba4:	e003      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8004baa:	e000      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bb4:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bc2:	491f      	ldr	r1, [pc, #124]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	658b      	str	r3, [r1, #88]	; 0x58
 8004bc8:	e001      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
 8004bcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d036      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004be4:	d01c      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004be6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bea:	d816      	bhi.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bf6:	d007      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004bf8:	e00f      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	4a10      	ldr	r2, [pc, #64]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c06:	e00c      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3324      	adds	r3, #36	; 0x24
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 f9d4 	bl	8005fbc <RCCEx_PLL3_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c18:	e003      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1e:	e000      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10d      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c36:	4902      	ldr	r1, [pc, #8]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	654b      	str	r3, [r1, #84]	; 0x54
 8004c3c:	e004      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004c3e:	bf00      	nop
 8004c40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d029      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c60:	d007      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004c62:	e00f      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c64:	4b61      	ldr	r3, [pc, #388]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	4a60      	ldr	r2, [pc, #384]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c70:	e00b      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	2102      	movs	r1, #2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 f8ed 	bl	8005e58 <RCCEx_PLL2_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c82:	e002      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	75fb      	strb	r3, [r7, #23]
      break;
 8004c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c90:	4b56      	ldr	r3, [pc, #344]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9c:	4953      	ldr	r1, [pc, #332]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ca2:	e001      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
 8004ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3324      	adds	r3, #36	; 0x24
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 f97e 	bl	8005fbc <RCCEx_PLL3_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d030      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cde:	d017      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce4:	d811      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cea:	d013      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf0:	d80b      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d010      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfc:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	4a3a      	ldr	r2, [pc, #232]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004d08:	e007      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d0e:	e004      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d20:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2c:	492f      	ldr	r1, [pc, #188]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	654b      	str	r3, [r1, #84]	; 0x54
 8004d32:	e001      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d44:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d50:	4926      	ldr	r1, [pc, #152]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d6e:	491f      	ldr	r1, [pc, #124]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00d      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d80:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d8a:	6113      	str	r3, [r2, #16]
 8004d8c:	4b17      	ldr	r3, [pc, #92]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d96:	4915      	ldr	r1, [pc, #84]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	da08      	bge.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	490e      	ldr	r1, [pc, #56]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd0:	4906      	ldr	r1, [pc, #24]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004dd6:	7dbb      	ldrb	r3, [r7, #22]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	58024400 	.word	0x58024400

08004df0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b090      	sub	sp, #64	; 0x40
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfe:	f040 8089 	bne.w	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004e02:	4b95      	ldr	r3, [pc, #596]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d87d      	bhi.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004e12:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e2d 	.word	0x08004e2d
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08004e75 	.word	0x08004e75
 8004e24:	08004f09 	.word	0x08004f09
 8004e28:	08004e99 	.word	0x08004e99

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e2c:	4b8a      	ldr	r3, [pc, #552]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e38:	d107      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 feb8 	bl	8005bb4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e48:	e3ed      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e4e:	e3ea      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e50:	4b81      	ldr	r3, [pc, #516]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e5e:	f107 0318 	add.w	r3, r7, #24
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fbfe 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e6c:	e3db      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e72:	e3d8      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e74:	4b78      	ldr	r3, [pc, #480]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e80:	d107      	bne.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e82:	f107 030c 	add.w	r3, r7, #12
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fd40 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e90:	e3c9      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e96:	e3c6      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e98:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ea2:	4b6d      	ldr	r3, [pc, #436]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004eb4:	4b68      	ldr	r3, [pc, #416]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	08db      	lsrs	r3, r3, #3
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	4a67      	ldr	r2, [pc, #412]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec6:	e01e      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ec8:	4b63      	ldr	r3, [pc, #396]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed4:	d106      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004edc:	d102      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ede:	4b60      	ldr	r3, [pc, #384]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee2:	e010      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ee4:	4b5c      	ldr	r3, [pc, #368]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef0:	d106      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef8:	d102      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004efa:	4b5a      	ldr	r3, [pc, #360]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004efe:	e002      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004f04:	e38f      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f06:	e38e      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f08:	4b57      	ldr	r3, [pc, #348]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0c:	e38b      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f12:	e388      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1a:	f040 80a7 	bne.w	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004f1e:	4b4e      	ldr	r3, [pc, #312]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004f26:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f2e:	d054      	beq.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f36:	f200 808b 	bhi.w	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f40:	f000 8083 	beq.w	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f4a:	f200 8081 	bhi.w	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f54:	d02f      	beq.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f5c:	d878      	bhi.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d004      	beq.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f6a:	d012      	beq.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004f6c:	e070      	b.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f6e:	4b3a      	ldr	r3, [pc, #232]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fe17 	bl	8005bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f8a:	e34c      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f90:	e349      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f92:	4b31      	ldr	r3, [pc, #196]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fa0:	f107 0318 	add.w	r3, r7, #24
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fb5d 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fae:	e33a      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fb4:	e337      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fb6:	4b28      	ldr	r3, [pc, #160]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fc4:	f107 030c 	add.w	r3, r7, #12
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fc9f 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fd2:	e328      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fd8:	e325      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004fda:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d10c      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ff6:	4b18      	ldr	r3, [pc, #96]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	08db      	lsrs	r3, r3, #3
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	4a16      	ldr	r2, [pc, #88]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005002:	fa22 f303 	lsr.w	r3, r2, r3
 8005006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005008:	e01e      	b.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005016:	d106      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800501e:	d102      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005024:	e010      	b.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005032:	d106      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800503a:	d102      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800503c:	4b09      	ldr	r3, [pc, #36]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005040:	e002      	b.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005046:	e2ee      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005048:	e2ed      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800504a:	4b07      	ldr	r3, [pc, #28]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800504c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800504e:	e2ea      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005054:	e2e7      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005056:	bf00      	nop
 8005058:	58024400 	.word	0x58024400
 800505c:	03d09000 	.word	0x03d09000
 8005060:	003d0900 	.word	0x003d0900
 8005064:	017d7840 	.word	0x017d7840
 8005068:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005072:	f040 809c 	bne.w	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005076:	4b9e      	ldr	r3, [pc, #632]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800507e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005086:	d054      	beq.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800508e:	f200 808b 	bhi.w	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005098:	f000 8083 	beq.w	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050a2:	f200 8081 	bhi.w	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050ac:	d02f      	beq.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050b4:	d878      	bhi.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050c2:	d012      	beq.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80050c4:	e070      	b.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050c6:	4b8a      	ldr	r3, [pc, #552]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050d2:	d107      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fd6b 	bl	8005bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050e2:	e2a0      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050e8:	e29d      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050ea:	4b81      	ldr	r3, [pc, #516]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f6:	d107      	bne.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050f8:	f107 0318 	add.w	r3, r7, #24
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fab1 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005106:	e28e      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800510c:	e28b      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800510e:	4b78      	ldr	r3, [pc, #480]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511a:	d107      	bne.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800511c:	f107 030c 	add.w	r3, r7, #12
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fbf3 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800512a:	e27c      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005130:	e279      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005132:	4b6f      	ldr	r3, [pc, #444]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005136:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800513a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800513c:	4b6c      	ldr	r3, [pc, #432]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d10c      	bne.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800514e:	4b68      	ldr	r3, [pc, #416]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	08db      	lsrs	r3, r3, #3
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	4a66      	ldr	r2, [pc, #408]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800515a:	fa22 f303 	lsr.w	r3, r2, r3
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005160:	e01e      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005162:	4b63      	ldr	r3, [pc, #396]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516e:	d106      	bne.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005176:	d102      	bne.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005178:	4b5f      	ldr	r3, [pc, #380]	; (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800517c:	e010      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800517e:	4b5c      	ldr	r3, [pc, #368]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800518a:	d106      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005192:	d102      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005194:	4b59      	ldr	r3, [pc, #356]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005198:	e002      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800519e:	e242      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80051a0:	e241      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80051a2:	4b57      	ldr	r3, [pc, #348]	; (8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80051a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a6:	e23e      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ac:	e23b      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b4:	f040 80a6 	bne.w	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80051b8:	4b4d      	ldr	r3, [pc, #308]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80051c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051c8:	d054      	beq.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051d0:	f200 808b 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051da:	f000 8083 	beq.w	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051e4:	f200 8081 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ee:	d02f      	beq.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f6:	d878      	bhi.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005204:	d012      	beq.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8005206:	e070      	b.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005208:	4b39      	ldr	r3, [pc, #228]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005214:	d107      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fcca 	bl	8005bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005224:	e1ff      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800522a:	e1fc      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800522c:	4b30      	ldr	r3, [pc, #192]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005238:	d107      	bne.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800523a:	f107 0318 	add.w	r3, r7, #24
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fa10 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005248:	e1ed      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800524e:	e1ea      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005250:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800525c:	d107      	bne.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800525e:	f107 030c 	add.w	r3, r7, #12
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fb52 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800526c:	e1db      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005272:	e1d8      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005274:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005278:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800527c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800527e:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b04      	cmp	r3, #4
 8005288:	d10c      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800528a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528c:	2b00      	cmp	r3, #0
 800528e:	d109      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005290:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	08db      	lsrs	r3, r3, #3
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052a2:	e01e      	b.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052a4:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b0:	d106      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052b8:	d102      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052ba:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052be:	e010      	b.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052cc:	d106      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d4:	d102      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80052d6:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052da:	e002      	b.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80052e0:	e1a1      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80052e2:	e1a0      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052e8:	e19d      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ee:	e19a      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80052f0:	58024400 	.word	0x58024400
 80052f4:	03d09000 	.word	0x03d09000
 80052f8:	003d0900 	.word	0x003d0900
 80052fc:	017d7840 	.word	0x017d7840
 8005300:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800530a:	d173      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800530c:	4b9a      	ldr	r3, [pc, #616]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005314:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800531c:	d02f      	beq.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005324:	d863      	bhi.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005332:	d012      	beq.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8005334:	e05b      	b.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005336:	4b90      	ldr	r3, [pc, #576]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005342:	d107      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005344:	f107 0318 	add.w	r3, r7, #24
 8005348:	4618      	mov	r0, r3
 800534a:	f000 f98b 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005352:	e168      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005358:	e165      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800535a:	4b87      	ldr	r3, [pc, #540]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005366:	d107      	bne.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005368:	f107 030c 	add.w	r3, r7, #12
 800536c:	4618      	mov	r0, r3
 800536e:	f000 facd 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005376:	e156      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800537c:	e153      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800537e:	4b7e      	ldr	r3, [pc, #504]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005382:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005386:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005388:	4b7b      	ldr	r3, [pc, #492]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b04      	cmp	r3, #4
 8005392:	d10c      	bne.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800539a:	4b77      	ldr	r3, [pc, #476]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	08db      	lsrs	r3, r3, #3
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	4a75      	ldr	r2, [pc, #468]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80053a6:	fa22 f303 	lsr.w	r3, r2, r3
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ac:	e01e      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053ae:	4b72      	ldr	r3, [pc, #456]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ba:	d106      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053c2:	d102      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80053c4:	4b6e      	ldr	r3, [pc, #440]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c8:	e010      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053ca:	4b6b      	ldr	r3, [pc, #428]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053d6:	d106      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053de:	d102      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80053e0:	4b68      	ldr	r3, [pc, #416]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e4:	e002      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80053ea:	e11c      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80053ec:	e11b      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053f2:	e118      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fa:	d133      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80053fc:	4b5e      	ldr	r3, [pc, #376]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005412:	d012      	beq.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005414:	e023      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005416:	4b58      	ldr	r3, [pc, #352]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005422:	d107      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fbc3 	bl	8005bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005432:	e0f8      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005438:	e0f5      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800543a:	4b4f      	ldr	r3, [pc, #316]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005446:	d107      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005448:	f107 0318 	add.w	r3, r7, #24
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f909 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005456:	e0e6      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800545c:	e0e3      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005462:	e0e0      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800546a:	f040 808d 	bne.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800546e:	4b42      	ldr	r3, [pc, #264]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005476:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800547e:	d06b      	beq.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005486:	d874      	bhi.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d056      	beq.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005496:	d86c      	bhi.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800549e:	d03b      	beq.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054a6:	d864      	bhi.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ae:	d021      	beq.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054b6:	d85c      	bhi.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054c4:	d004      	beq.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80054c6:	e054      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80054c8:	f000 f8b6 	bl	8005638 <HAL_RCCEx_GetD3PCLK1Freq>
 80054cc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80054ce:	e0aa      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054d0:	4b29      	ldr	r3, [pc, #164]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054dc:	d107      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054de:	f107 0318 	add.w	r3, r7, #24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f8be 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054ec:	e09b      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f2:	e098      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054f4:	4b20      	ldr	r3, [pc, #128]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005500:	d107      	bne.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005502:	f107 030c 	add.w	r3, r7, #12
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fa00 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005510:	e089      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005516:	e086      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005518:	4b17      	ldr	r3, [pc, #92]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b04      	cmp	r3, #4
 8005522:	d109      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005524:	4b14      	ldr	r3, [pc, #80]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	08db      	lsrs	r3, r3, #3
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005536:	e076      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800553c:	e073      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800553e:	4b0e      	ldr	r3, [pc, #56]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554a:	d102      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800554c:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005550:	e069      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005556:	e066      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005558:	4b07      	ldr	r3, [pc, #28]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005564:	d102      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800556a:	e05c      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005570:	e059      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005576:	e056      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005578:	58024400 	.word	0x58024400
 800557c:	03d09000 	.word	0x03d09000
 8005580:	003d0900 	.word	0x003d0900
 8005584:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558e:	d148      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005590:	4b27      	ldr	r3, [pc, #156]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005598:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a0:	d02a      	beq.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a8:	d838      	bhi.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b6:	d00d      	beq.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80055b8:	e030      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055ba:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c6:	d102      	bne.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80055c8:	4b1a      	ldr	r3, [pc, #104]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055cc:	e02b      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055d2:	e028      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055d4:	4b16      	ldr	r3, [pc, #88]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e0:	d107      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fae4 	bl	8005bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055f0:	e019      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055f6:	e016      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055f8:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005604:	d107      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005606:	f107 0318 	add.w	r3, r7, #24
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f82a 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005614:	e007      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800561a:	e004      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005620:	e001      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005628:	4618      	mov	r0, r3
 800562a:	3740      	adds	r7, #64	; 0x40
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	58024400 	.word	0x58024400
 8005634:	017d7840 	.word	0x017d7840

08005638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800563c:	f7fe fcae 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8005640:	4602      	mov	r2, r0
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4904      	ldr	r1, [pc, #16]	; (8005660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800564e:	5ccb      	ldrb	r3, [r1, r3]
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	58024400 	.word	0x58024400
 8005660:	08009730 	.word	0x08009730

08005664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800566c:	4ba1      	ldr	r3, [pc, #644]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005676:	4b9f      	ldr	r3, [pc, #636]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	0b1b      	lsrs	r3, r3, #12
 800567c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005680:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005682:	4b9c      	ldr	r3, [pc, #624]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800568e:	4b99      	ldr	r3, [pc, #612]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	08db      	lsrs	r3, r3, #3
 8005694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8111 	beq.w	80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	f000 8083 	beq.w	80057c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f200 80a1 	bhi.w	8005804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d056      	beq.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80056ce:	e099      	b.n	8005804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d0:	4b88      	ldr	r3, [pc, #544]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d02d      	beq.n	8005738 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056dc:	4b85      	ldr	r3, [pc, #532]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	08db      	lsrs	r3, r3, #3
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	4a84      	ldr	r2, [pc, #528]	; (80058f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005706:	4b7b      	ldr	r3, [pc, #492]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005716:	ed97 6a03 	vldr	s12, [r7, #12]
 800571a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800571e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800572a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005732:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005736:	e087      	b.n	8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005742:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005900 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574a:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575a:	ed97 6a03 	vldr	s12, [r7, #12]
 800575e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800577a:	e065      	b.n	8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005786:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800578a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578e:	4b59      	ldr	r3, [pc, #356]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579e:	ed97 6a03 	vldr	s12, [r7, #12]
 80057a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057be:	e043      	b.n	8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80057ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d2:	4b48      	ldr	r3, [pc, #288]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005802:	e021      	b.n	8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005816:	4b37      	ldr	r3, [pc, #220]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005826:	ed97 6a03 	vldr	s12, [r7, #12]
 800582a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800582e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800583a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005846:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005848:	4b2a      	ldr	r3, [pc, #168]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	0a5b      	lsrs	r3, r3, #9
 800584e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800585e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005862:	edd7 6a07 	vldr	s13, [r7, #28]
 8005866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800586a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800586e:	ee17 2a90 	vmov	r2, s15
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005876:	4b1f      	ldr	r3, [pc, #124]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005880:	ee07 3a90 	vmov	s15, r3
 8005884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800588c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005890:	edd7 6a07 	vldr	s13, [r7, #28]
 8005894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800589c:	ee17 2a90 	vmov	r2, s15
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80058a4:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	0e1b      	lsrs	r3, r3, #24
 80058aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058be:	edd7 6a07 	vldr	s13, [r7, #28]
 80058c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ca:	ee17 2a90 	vmov	r2, s15
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80058d2:	e008      	b.n	80058e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]
}
 80058e6:	bf00      	nop
 80058e8:	3724      	adds	r7, #36	; 0x24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	58024400 	.word	0x58024400
 80058f8:	03d09000 	.word	0x03d09000
 80058fc:	46000000 	.word	0x46000000
 8005900:	4c742400 	.word	0x4c742400
 8005904:	4a742400 	.word	0x4a742400
 8005908:	4bbebc20 	.word	0x4bbebc20

0800590c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	; 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005914:	4ba1      	ldr	r3, [pc, #644]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800591e:	4b9f      	ldr	r3, [pc, #636]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	0d1b      	lsrs	r3, r3, #20
 8005924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005928:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800592a:	4b9c      	ldr	r3, [pc, #624]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005936:	4b99      	ldr	r3, [pc, #612]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593a:	08db      	lsrs	r3, r3, #3
 800593c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8111 	beq.w	8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b02      	cmp	r3, #2
 800595e:	f000 8083 	beq.w	8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b02      	cmp	r3, #2
 8005966:	f200 80a1 	bhi.w	8005aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d056      	beq.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005976:	e099      	b.n	8005aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005978:	4b88      	ldr	r3, [pc, #544]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d02d      	beq.n	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005984:	4b85      	ldr	r3, [pc, #532]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	08db      	lsrs	r3, r3, #3
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	4a84      	ldr	r2, [pc, #528]	; (8005ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
 8005994:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b7b      	ldr	r3, [pc, #492]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80059de:	e087      	b.n	8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b6a      	ldr	r3, [pc, #424]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a22:	e065      	b.n	8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a36:	4b59      	ldr	r3, [pc, #356]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a66:	e043      	b.n	8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7a:	4b48      	ldr	r3, [pc, #288]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aaa:	e021      	b.n	8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005abe:	4b37      	ldr	r3, [pc, #220]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ad2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005af0:	4b2a      	ldr	r3, [pc, #168]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	0a5b      	lsrs	r3, r3, #9
 8005af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b16:	ee17 2a90 	vmov	r2, s15
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005b1e:	4b1f      	ldr	r3, [pc, #124]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b28:	ee07 3a90 	vmov	s15, r3
 8005b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b44:	ee17 2a90 	vmov	r2, s15
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005b4c:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	0e1b      	lsrs	r3, r3, #24
 8005b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b72:	ee17 2a90 	vmov	r2, s15
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b7a:	e008      	b.n	8005b8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
}
 8005b8e:	bf00      	nop
 8005b90:	3724      	adds	r7, #36	; 0x24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	58024400 	.word	0x58024400
 8005ba0:	03d09000 	.word	0x03d09000
 8005ba4:	46000000 	.word	0x46000000
 8005ba8:	4c742400 	.word	0x4c742400
 8005bac:	4a742400 	.word	0x4a742400
 8005bb0:	4bbebc20 	.word	0x4bbebc20

08005bb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b089      	sub	sp, #36	; 0x24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bbc:	4ba0      	ldr	r3, [pc, #640]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005bc6:	4b9e      	ldr	r3, [pc, #632]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	091b      	lsrs	r3, r3, #4
 8005bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005bd2:	4b9b      	ldr	r3, [pc, #620]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005bdc:	4b98      	ldr	r3, [pc, #608]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	08db      	lsrs	r3, r3, #3
 8005be2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	fb02 f303 	mul.w	r3, r2, r3
 8005bec:	ee07 3a90 	vmov	s15, r3
 8005bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8111 	beq.w	8005e22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	f000 8083 	beq.w	8005d0e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	f200 80a1 	bhi.w	8005d52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d056      	beq.n	8005cca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005c1c:	e099      	b.n	8005d52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c1e:	4b88      	ldr	r3, [pc, #544]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d02d      	beq.n	8005c86 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c2a:	4b85      	ldr	r3, [pc, #532]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	08db      	lsrs	r3, r3, #3
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	4a83      	ldr	r2, [pc, #524]	; (8005e44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005c36:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c54:	4b7a      	ldr	r3, [pc, #488]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5c:	ee07 3a90 	vmov	s15, r3
 8005c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c68:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005e48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c80:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c84:	e087      	b.n	8005d96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c90:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005e4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c98:	4b69      	ldr	r3, [pc, #420]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	ee07 3a90 	vmov	s15, r3
 8005ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005e48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cc8:	e065      	b.n	8005d96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	ee07 3a90 	vmov	s15, r3
 8005cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cdc:	4b58      	ldr	r3, [pc, #352]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce4:	ee07 3a90 	vmov	s15, r3
 8005ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cec:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005e48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d0c:	e043      	b.n	8005d96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d18:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d20:	4b47      	ldr	r3, [pc, #284]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d30:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d34:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005e48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d50:	e021      	b.n	8005d96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	ee07 3a90 	vmov	s15, r3
 8005d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005e4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d64:	4b36      	ldr	r3, [pc, #216]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6c:	ee07 3a90 	vmov	s15, r3
 8005d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d74:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d78:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005e48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d94:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005d96:	4b2a      	ldr	r3, [pc, #168]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	0a5b      	lsrs	r3, r3, #9
 8005d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005db0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dbc:	ee17 2a90 	vmov	r2, s15
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005dc4:	4b1e      	ldr	r3, [pc, #120]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	0c1b      	lsrs	r3, r3, #16
 8005dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8005de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dea:	ee17 2a90 	vmov	r2, s15
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005df2:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df6:	0e1b      	lsrs	r3, r3, #24
 8005df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e18:	ee17 2a90 	vmov	r2, s15
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e20:	e008      	b.n	8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	3724      	adds	r7, #36	; 0x24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	58024400 	.word	0x58024400
 8005e44:	03d09000 	.word	0x03d09000
 8005e48:	46000000 	.word	0x46000000
 8005e4c:	4c742400 	.word	0x4c742400
 8005e50:	4a742400 	.word	0x4a742400
 8005e54:	4bbebc20 	.word	0x4bbebc20

08005e58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e66:	4b53      	ldr	r3, [pc, #332]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d101      	bne.n	8005e76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e099      	b.n	8005faa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e76:	4b4f      	ldr	r3, [pc, #316]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a4e      	ldr	r2, [pc, #312]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005e7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e82:	f7fa fba5 	bl	80005d0 <HAL_GetTick>
 8005e86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e88:	e008      	b.n	8005e9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e8a:	f7fa fba1 	bl	80005d0 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e086      	b.n	8005faa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e9c:	4b45      	ldr	r3, [pc, #276]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1f0      	bne.n	8005e8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ea8:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	031b      	lsls	r3, r3, #12
 8005eb6:	493f      	ldr	r1, [pc, #252]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	628b      	str	r3, [r1, #40]	; 0x28
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	025b      	lsls	r3, r3, #9
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	041b      	lsls	r3, r3, #16
 8005eda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	061b      	lsls	r3, r3, #24
 8005ee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005eec:	4931      	ldr	r1, [pc, #196]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ef2:	4b30      	ldr	r3, [pc, #192]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	492d      	ldr	r1, [pc, #180]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f04:	4b2b      	ldr	r3, [pc, #172]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	f023 0220 	bic.w	r2, r3, #32
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	4928      	ldr	r1, [pc, #160]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f16:	4b27      	ldr	r3, [pc, #156]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	4a26      	ldr	r2, [pc, #152]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f1c:	f023 0310 	bic.w	r3, r3, #16
 8005f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f26:	4b24      	ldr	r3, [pc, #144]	; (8005fb8 <RCCEx_PLL2_Config+0x160>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	69d2      	ldr	r2, [r2, #28]
 8005f2e:	00d2      	lsls	r2, r2, #3
 8005f30:	4920      	ldr	r1, [pc, #128]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f36:	4b1f      	ldr	r3, [pc, #124]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	4a1e      	ldr	r2, [pc, #120]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f3c:	f043 0310 	orr.w	r3, r3, #16
 8005f40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f48:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	4a19      	ldr	r2, [pc, #100]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f54:	e00f      	b.n	8005f76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d106      	bne.n	8005f6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f5c:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f68:	e005      	b.n	8005f76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f6a:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	4a11      	ldr	r2, [pc, #68]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f76:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a0e      	ldr	r2, [pc, #56]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f82:	f7fa fb25 	bl	80005d0 <HAL_GetTick>
 8005f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f88:	e008      	b.n	8005f9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f8a:	f7fa fb21 	bl	80005d0 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e006      	b.n	8005faa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	58024400 	.word	0x58024400
 8005fb8:	ffff0007 	.word	0xffff0007

08005fbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fca:	4b53      	ldr	r3, [pc, #332]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d101      	bne.n	8005fda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e099      	b.n	800610e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005fda:	4b4f      	ldr	r3, [pc, #316]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a4e      	ldr	r2, [pc, #312]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8005fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe6:	f7fa faf3 	bl	80005d0 <HAL_GetTick>
 8005fea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fec:	e008      	b.n	8006000 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005fee:	f7fa faef 	bl	80005d0 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e086      	b.n	800610e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006000:	4b45      	ldr	r3, [pc, #276]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f0      	bne.n	8005fee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800600c:	4b42      	ldr	r3, [pc, #264]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	051b      	lsls	r3, r3, #20
 800601a:	493f      	ldr	r1, [pc, #252]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 800601c:	4313      	orrs	r3, r2
 800601e:	628b      	str	r3, [r1, #40]	; 0x28
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	3b01      	subs	r3, #1
 8006026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	3b01      	subs	r3, #1
 8006030:	025b      	lsls	r3, r3, #9
 8006032:	b29b      	uxth	r3, r3
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	3b01      	subs	r3, #1
 800603c:	041b      	lsls	r3, r3, #16
 800603e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	3b01      	subs	r3, #1
 800604a:	061b      	lsls	r3, r3, #24
 800604c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006050:	4931      	ldr	r1, [pc, #196]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8006052:	4313      	orrs	r3, r2
 8006054:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006056:	4b30      	ldr	r3, [pc, #192]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	492d      	ldr	r1, [pc, #180]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8006064:	4313      	orrs	r3, r2
 8006066:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006068:	4b2b      	ldr	r3, [pc, #172]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	4928      	ldr	r1, [pc, #160]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8006076:	4313      	orrs	r3, r2
 8006078:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800607a:	4b27      	ldr	r3, [pc, #156]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	4a26      	ldr	r2, [pc, #152]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8006080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006086:	4b24      	ldr	r3, [pc, #144]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8006088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608a:	4b24      	ldr	r3, [pc, #144]	; (800611c <RCCEx_PLL3_Config+0x160>)
 800608c:	4013      	ands	r3, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	69d2      	ldr	r2, [r2, #28]
 8006092:	00d2      	lsls	r2, r2, #3
 8006094:	4920      	ldr	r1, [pc, #128]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8006096:	4313      	orrs	r3, r2
 8006098:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800609a:	4b1f      	ldr	r3, [pc, #124]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 80060a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d106      	bne.n	80060ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	4a19      	ldr	r2, [pc, #100]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 80060b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060b8:	e00f      	b.n	80060da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d106      	bne.n	80060ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80060c0:	4b15      	ldr	r3, [pc, #84]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	4a14      	ldr	r2, [pc, #80]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 80060c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060cc:	e005      	b.n	80060da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80060ce:	4b12      	ldr	r3, [pc, #72]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	4a11      	ldr	r2, [pc, #68]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 80060d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80060da:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a0e      	ldr	r2, [pc, #56]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 80060e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e6:	f7fa fa73 	bl	80005d0 <HAL_GetTick>
 80060ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060ec:	e008      	b.n	8006100 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80060ee:	f7fa fa6f 	bl	80005d0 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e006      	b.n	800610e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <RCCEx_PLL3_Config+0x15c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0f0      	beq.n	80060ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800610c:	7bfb      	ldrb	r3, [r7, #15]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	58024400 	.word	0x58024400
 800611c:	ffff0007 	.word	0xffff0007

08006120 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d904      	bls.n	800613e <HAL_SAI_InitProtocol+0x1e>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	3b03      	subs	r3, #3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d812      	bhi.n	8006162 <HAL_SAI_InitProtocol+0x42>
 800613c:	e008      	b.n	8006150 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 fb1f 	bl	8006788 <SAI_InitI2S>
 800614a:	4603      	mov	r3, r0
 800614c:	75fb      	strb	r3, [r7, #23]
      break;
 800614e:	e00b      	b.n	8006168 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fbc8 	bl	80068ec <SAI_InitPCM>
 800615c:	4603      	mov	r3, r0
 800615e:	75fb      	strb	r3, [r7, #23]
      break;
 8006160:	e002      	b.n	8006168 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
      break;
 8006166:	bf00      	nop
  }

  if (status == HAL_OK)
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f808 	bl	8006184 <HAL_SAI_Init>
 8006174:	4603      	mov	r3, r0
 8006176:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006178:	7dfb      	ldrb	r3, [r7, #23]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	; 0x28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e224      	b.n	80065e0 <HAL_SAI_Init+0x45c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800619c:	2b01      	cmp	r3, #1
 800619e:	d113      	bne.n	80061c8 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4aa1      	ldr	r2, [pc, #644]	; (800642c <HAL_SAI_Init+0x2a8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_SAI_Init+0x30>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4aa0      	ldr	r2, [pc, #640]	; (8006430 <HAL_SAI_Init+0x2ac>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d107      	bne.n	80061c4 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d103      	bne.n	80061c4 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e20b      	b.n	80065e0 <HAL_SAI_Init+0x45c>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a97      	ldr	r2, [pc, #604]	; (800642c <HAL_SAI_Init+0x2a8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <HAL_SAI_Init+0x58>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a97      	ldr	r2, [pc, #604]	; (8006434 <HAL_SAI_Init+0x2b0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d102      	bne.n	80061e2 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 80061dc:	4b96      	ldr	r3, [pc, #600]	; (8006438 <HAL_SAI_Init+0x2b4>)
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	e00e      	b.n	8006200 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a92      	ldr	r2, [pc, #584]	; (8006430 <HAL_SAI_Init+0x2ac>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_SAI_Init+0x72>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a92      	ldr	r2, [pc, #584]	; (800643c <HAL_SAI_Init+0x2b8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d102      	bne.n	80061fc <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 80061f6:	4b92      	ldr	r3, [pc, #584]	; (8006440 <HAL_SAI_Init+0x2bc>)
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	e001      	b.n	8006200 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e1ef      	b.n	80065e0 <HAL_SAI_Init+0x45c>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d125      	bne.n	8006258 <HAL_SAI_Init+0xd4>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    /* Reset callback pointers to the weak predefined callbacks */
    hsai->RxCpltCallback     = HAL_SAI_RxCpltCallback;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a8b      	ldr	r2, [pc, #556]	; (8006444 <HAL_SAI_Init+0x2c0>)
 8006218:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    hsai->RxHalfCpltCallback = HAL_SAI_RxHalfCpltCallback;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a8a      	ldr	r2, [pc, #552]	; (8006448 <HAL_SAI_Init+0x2c4>)
 8006220:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    hsai->TxCpltCallback     = HAL_SAI_TxCpltCallback;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a89      	ldr	r2, [pc, #548]	; (800644c <HAL_SAI_Init+0x2c8>)
 8006228:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hsai->TxHalfCpltCallback = HAL_SAI_TxHalfCpltCallback;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a88      	ldr	r2, [pc, #544]	; (8006450 <HAL_SAI_Init+0x2cc>)
 8006230:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hsai->ErrorCallback      = HAL_SAI_ErrorCallback;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a87      	ldr	r2, [pc, #540]	; (8006454 <HAL_SAI_Init+0x2d0>)
 8006238:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    if (hsai->MspInitCallback == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <HAL_SAI_Init+0xca>
    {
      hsai->MspInitCallback = HAL_SAI_MspInit;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a83      	ldr	r2, [pc, #524]	; (8006458 <HAL_SAI_Init+0x2d4>)
 800624a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }
    hsai->MspInitCallback(hsai);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	4798      	blx	r3
    HAL_SAI_MspInit(hsai);
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fc01 	bl	8006a60 <SAI_Disable>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_SAI_Init+0xe4>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e1bb      	b.n	80065e0 <HAL_SAI_Init+0x45c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	2b02      	cmp	r3, #2
 8006276:	d00c      	beq.n	8006292 <HAL_SAI_Init+0x10e>
 8006278:	2b02      	cmp	r3, #2
 800627a:	d80d      	bhi.n	8006298 <HAL_SAI_Init+0x114>
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_SAI_Init+0x102>
 8006280:	2b01      	cmp	r3, #1
 8006282:	d003      	beq.n	800628c <HAL_SAI_Init+0x108>
 8006284:	e008      	b.n	8006298 <HAL_SAI_Init+0x114>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800628a:	e008      	b.n	800629e <HAL_SAI_Init+0x11a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800628c:	2310      	movs	r3, #16
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006290:	e005      	b.n	800629e <HAL_SAI_Init+0x11a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006292:	2320      	movs	r3, #32
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006296:	e002      	b.n	800629e <HAL_SAI_Init+0x11a>
    default:
      tmpregisterGCR = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800629c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	d821      	bhi.n	80062ea <HAL_SAI_Init+0x166>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <HAL_SAI_Init+0x128>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062c5 	.word	0x080062c5
 80062b0:	080062cb 	.word	0x080062cb
 80062b4:	080062d3 	.word	0x080062d3
 80062b8:	080062eb 	.word	0x080062eb
 80062bc:	080062eb 	.word	0x080062eb
 80062c0:	080062db 	.word	0x080062db
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61fb      	str	r3, [r7, #28]
      break;
 80062c8:	e012      	b.n	80062f0 <HAL_SAI_Init+0x16c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80062ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ce:	61fb      	str	r3, [r7, #28]
      break;
 80062d0:	e00e      	b.n	80062f0 <HAL_SAI_Init+0x16c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80062d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062d6:	61fb      	str	r3, [r7, #28]
      break;
 80062d8:	e00a      	b.n	80062f0 <HAL_SAI_Init+0x16c>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80062da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062de:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	f043 0303 	orr.w	r3, r3, #3
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80062e8:	e002      	b.n	80062f0 <HAL_SAI_Init+0x16c>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
      break;
 80062ee:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8084 	beq.w	8006408 <HAL_SAI_Init+0x284>
  {
    uint32_t freq = 0;
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a48      	ldr	r2, [pc, #288]	; (800642c <HAL_SAI_Init+0x2a8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_SAI_Init+0x194>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a48      	ldr	r2, [pc, #288]	; (8006434 <HAL_SAI_Init+0x2b0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d104      	bne.n	8006322 <HAL_SAI_Init+0x19e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006318:	f44f 7080 	mov.w	r0, #256	; 0x100
 800631c:	f7fe fd68 	bl	8004df0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006320:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a42      	ldr	r2, [pc, #264]	; (8006430 <HAL_SAI_Init+0x2ac>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d104      	bne.n	8006336 <HAL_SAI_Init+0x1b2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800632c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006330:	f7fe fd5e 	bl	8004df0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006334:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a40      	ldr	r2, [pc, #256]	; (800643c <HAL_SAI_Init+0x2b8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d104      	bne.n	800634a <HAL_SAI_Init+0x1c6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006340:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006344:	f7fe fd54 	bl	8004df0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006348:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006352:	d120      	bne.n	8006396 <HAL_SAI_Init+0x212>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006358:	2b04      	cmp	r3, #4
 800635a:	d102      	bne.n	8006362 <HAL_SAI_Init+0x1de>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800635c:	2340      	movs	r3, #64	; 0x40
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e00a      	b.n	8006378 <HAL_SAI_Init+0x1f4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006366:	2b08      	cmp	r3, #8
 8006368:	d103      	bne.n	8006372 <HAL_SAI_Init+0x1ee>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800636a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e002      	b.n	8006378 <HAL_SAI_Init+0x1f4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006376:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	4619      	mov	r1, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e017      	b.n	80063c6 <HAL_SAI_Init+0x242>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800639e:	d101      	bne.n	80063a4 <HAL_SAI_Init+0x220>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e000      	b.n	80063a6 <HAL_SAI_Init+0x222>
 80063a4:	2301      	movs	r3, #1
 80063a6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	4619      	mov	r1, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	fb02 f303 	mul.w	r3, r2, r3
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80063c4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4a24      	ldr	r2, [pc, #144]	; (800645c <HAL_SAI_Init+0x2d8>)
 80063ca:	fba2 2303 	umull	r2, r3, r2, r3
 80063ce:	08da      	lsrs	r2, r3, #3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80063d4:	6939      	ldr	r1, [r7, #16]
 80063d6:	4b21      	ldr	r3, [pc, #132]	; (800645c <HAL_SAI_Init+0x2d8>)
 80063d8:	fba3 2301 	umull	r2, r3, r3, r1
 80063dc:	08da      	lsrs	r2, r3, #3
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	1aca      	subs	r2, r1, r3
 80063e8:	2a08      	cmp	r2, #8
 80063ea:	d904      	bls.n	80063f6 <HAL_SAI_Init+0x272>
    {
      hsai->Init.Mckdiv += 1U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d104      	bne.n	8006408 <HAL_SAI_Init+0x284>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	085a      	lsrs	r2, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_SAI_Init+0x294>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d123      	bne.n	8006460 <HAL_SAI_Init+0x2dc>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_SAI_Init+0x2a0>
 8006420:	2300      	movs	r3, #0
 8006422:	e001      	b.n	8006428 <HAL_SAI_Init+0x2a4>
 8006424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	e022      	b.n	8006472 <HAL_SAI_Init+0x2ee>
 800642c:	40015804 	.word	0x40015804
 8006430:	58005404 	.word	0x58005404
 8006434:	40015824 	.word	0x40015824
 8006438:	40015800 	.word	0x40015800
 800643c:	58005424 	.word	0x58005424
 8006440:	58005400 	.word	0x58005400
 8006444:	0800674d 	.word	0x0800674d
 8006448:	08006761 	.word	0x08006761
 800644c:	08006725 	.word	0x08006725
 8006450:	08006739 	.word	0x08006739
 8006454:	08006775 	.word	0x08006775
 8006458:	080070bd 	.word	0x080070bd
 800645c:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006464:	2b01      	cmp	r3, #1
 8006466:	d102      	bne.n	800646e <HAL_SAI_Init+0x2ea>
 8006468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800646c:	e000      	b.n	8006470 <HAL_SAI_Init+0x2ec>
 800646e:	2300      	movs	r3, #0
 8006470:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6819      	ldr	r1, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b5a      	ldr	r3, [pc, #360]	; (80065e8 <HAL_SAI_Init+0x464>)
 800647e:	400b      	ands	r3, r1
 8006480:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6819      	ldr	r1, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006490:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006496:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649c:	431a      	orrs	r2, r3
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80064aa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064b6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	051b      	lsls	r3, r3, #20
 80064be:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064c4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b43      	ldr	r3, [pc, #268]	; (80065ec <HAL_SAI_Init+0x468>)
 80064e0:	400b      	ands	r3, r1
 80064e2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6859      	ldr	r1, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69da      	ldr	r2, [r3, #28]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6899      	ldr	r1, [r3, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b38      	ldr	r3, [pc, #224]	; (80065f0 <HAL_SAI_Init+0x46c>)
 800650e:	400b      	ands	r3, r1
 8006510:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6899      	ldr	r1, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006522:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006528:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800652e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006534:	3b01      	subs	r3, #1
 8006536:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006538:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68d9      	ldr	r1, [r3, #12]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006550:	400b      	ands	r3, r1
 8006552:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68d9      	ldr	r1, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006562:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006568:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800656a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	3b01      	subs	r3, #1
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1c      	ldr	r2, [pc, #112]	; (80065f4 <HAL_SAI_Init+0x470>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d004      	beq.n	8006592 <HAL_SAI_Init+0x40e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1a      	ldr	r2, [pc, #104]	; (80065f8 <HAL_SAI_Init+0x474>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d119      	bne.n	80065c6 <HAL_SAI_Init+0x442>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	f023 0201 	bic.w	r2, r3, #1
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d10e      	bne.n	80065c6 <HAL_SAI_Init+0x442>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b0:	3b01      	subs	r3, #1
 80065b2:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80065b4:	431a      	orrs	r2, r3
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	f043 0201 	orr.w	r2, r3, #1
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3728      	adds	r7, #40	; 0x28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	f005c010 	.word	0xf005c010
 80065ec:	ffff1ff0 	.word	0xffff1ff0
 80065f0:	fff88000 	.word	0xfff88000
 80065f4:	40015804 	.word	0x40015804
 80065f8:	58005404 	.word	0x58005404

080065fc <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_SAI_Receive_DMA+0x1a>
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e079      	b.n	800670e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b01      	cmp	r3, #1
 8006624:	d172      	bne.n	800670c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_SAI_Receive_DMA+0x38>
 8006630:	2302      	movs	r3, #2
 8006632:	e06c      	b.n	800670e <HAL_SAI_Receive_DMA+0x112>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	88fa      	ldrh	r2, [r7, #6]
 8006646:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2222      	movs	r2, #34	; 0x22
 800665e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006668:	4a2b      	ldr	r2, [pc, #172]	; (8006718 <HAL_SAI_Receive_DMA+0x11c>)
 800666a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006672:	4a2a      	ldr	r2, [pc, #168]	; (800671c <HAL_SAI_Receive_DMA+0x120>)
 8006674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667c:	4a28      	ldr	r2, [pc, #160]	; (8006720 <HAL_SAI_Receive_DMA+0x124>)
 800667e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006686:	2200      	movs	r2, #0
 8006688:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */ //TODO
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)&hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	331c      	adds	r3, #28
 8006696:	4619      	mov	r1, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3378      	adds	r3, #120	; 0x78
 800669c:	461a      	mov	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80066a4:	f7fa fcf4 	bl	8001090 <HAL_DMA_Start_IT>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e029      	b.n	800670e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80066ba:	2100      	movs	r1, #0
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f997 	bl	80069f0 <SAI_InterruptFlag>
 80066c2:	4601      	mov	r1, r0
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80066e0:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d107      	bne.n	8006700 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066fe:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	e000      	b.n	800670e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800670c:	2302      	movs	r3, #2
  }
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	08006b39 	.word	0x08006b39
 800671c:	08006ad5 	.word	0x08006ad5
 8006720:	08006b59 	.word	0x08006b59

08006724 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <SAI_InitI2S+0x2e>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d103      	bne.n	80067be <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	651a      	str	r2, [r3, #80]	; 0x50
 80067bc:	e002      	b.n	80067c4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2201      	movs	r2, #1
 80067c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067d2:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e077      	b.n	80068de <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d107      	bne.n	8006804 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006800:	665a      	str	r2, [r3, #100]	; 0x64
 8006802:	e006      	b.n	8006812 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800680a:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	665a      	str	r2, [r3, #100]	; 0x64
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b03      	cmp	r3, #3
 8006816:	d84f      	bhi.n	80068b8 <SAI_InitI2S+0x130>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <SAI_InitI2S+0x98>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006831 	.word	0x08006831
 8006824:	08006853 	.word	0x08006853
 8006828:	08006875 	.word	0x08006875
 800682c:	08006897 	.word	0x08006897

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2280      	movs	r2, #128	; 0x80
 8006834:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	085b      	lsrs	r3, r3, #1
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	011a      	lsls	r2, r3, #4
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2240      	movs	r2, #64	; 0x40
 800684e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006850:	e035      	b.n	80068be <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2280      	movs	r2, #128	; 0x80
 8006856:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	085b      	lsrs	r3, r3, #1
 800685c:	019a      	lsls	r2, r3, #6
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	085b      	lsrs	r3, r3, #1
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2280      	movs	r2, #128	; 0x80
 8006870:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006872:	e024      	b.n	80068be <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	22c0      	movs	r2, #192	; 0xc0
 8006878:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	019a      	lsls	r2, r3, #6
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2280      	movs	r2, #128	; 0x80
 8006892:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006894:	e013      	b.n	80068be <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	22e0      	movs	r2, #224	; 0xe0
 800689a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	019a      	lsls	r2, r3, #6
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2280      	movs	r2, #128	; 0x80
 80068b4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80068b6:	e002      	b.n	80068be <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	75fb      	strb	r3, [r7, #23]
      break;
 80068bc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d10b      	bne.n	80068dc <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d102      	bne.n	80068d0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2210      	movs	r2, #16
 80068ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d102      	bne.n	80068dc <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2208      	movs	r2, #8
 80068da:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop

080068ec <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <SAI_InitPCM+0x2e>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d103      	bne.n	8006922 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	651a      	str	r2, [r3, #80]	; 0x50
 8006920:	e002      	b.n	8006928 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006934:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800693c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006950:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b04      	cmp	r3, #4
 8006956:	d103      	bne.n	8006960 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	659a      	str	r2, [r3, #88]	; 0x58
 800695e:	e002      	b.n	8006966 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	220d      	movs	r2, #13
 8006964:	659a      	str	r2, [r3, #88]	; 0x58
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d837      	bhi.n	80069dc <SAI_InitPCM+0xf0>
 800696c:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <SAI_InitPCM+0x88>)
 800696e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006972:	bf00      	nop
 8006974:	08006985 	.word	0x08006985
 8006978:	0800699b 	.word	0x0800699b
 800697c:	080069b1 	.word	0x080069b1
 8006980:	080069c7 	.word	0x080069c7
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2280      	movs	r2, #128	; 0x80
 8006988:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	011a      	lsls	r2, r3, #4
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2240      	movs	r2, #64	; 0x40
 8006996:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006998:	e023      	b.n	80069e2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2280      	movs	r2, #128	; 0x80
 800699e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2280      	movs	r2, #128	; 0x80
 80069ac:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80069ae:	e018      	b.n	80069e2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	22c0      	movs	r2, #192	; 0xc0
 80069b4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2280      	movs	r2, #128	; 0x80
 80069c2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80069c4:	e00d      	b.n	80069e2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	22e0      	movs	r2, #224	; 0xe0
 80069ca:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2280      	movs	r2, #128	; 0x80
 80069d8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80069da:	e002      	b.n	80069e2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	75fb      	strb	r3, [r7, #23]
      break;
 80069e0:	bf00      	nop
  }

  return status;
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d103      	bne.n	8006a0e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f043 0308 	orr.w	r3, r3, #8
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d10b      	bne.n	8006a2e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d003      	beq.n	8006a26 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d103      	bne.n	8006a2e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f043 0310 	orr.w	r3, r3, #16
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d003      	beq.n	8006a3e <SAI_InterruptFlag+0x4e>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d104      	bne.n	8006a48 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e003      	b.n	8006a50 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006a50:	68fb      	ldr	r3, [r7, #12]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
	...

08006a60 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006a68:	4b18      	ldr	r3, [pc, #96]	; (8006acc <SAI_Disable+0x6c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <SAI_Disable+0x70>)
 8006a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a72:	0b1b      	lsrs	r3, r3, #12
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a8a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	72fb      	strb	r3, [r7, #11]
      break;
 8006aa6:	e009      	b.n	8006abc <SAI_Disable+0x5c>
    }
    count--;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e7      	bne.n	8006a8c <SAI_Disable+0x2c>

  return status;
 8006abc:	7afb      	ldrb	r3, [r7, #11]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	24000408 	.word	0x24000408
 8006ad0:	95cbec1b 	.word	0x95cbec1b

08006ad4 <SAI_DMARxCplt>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
// TODO: Add a function for when it's complete
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aea:	d01c      	beq.n	8006b26 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006afa:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006b04:	2100      	movs	r1, #0
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff ff72 	bl	80069f0 <SAI_InterruptFlag>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	43d9      	mvns	r1, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	400a      	ands	r2, r1
 8006b1c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	4798      	blx	r3
#else
  HAL_SAI_RxCpltCallback(hsai);
#endif
}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	4798      	blx	r3
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
#endif
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fb fc26 	bl	80023b8 <HAL_DMA_GetError>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d01f      	beq.n	8006bb2 <SAI_DMAError+0x5a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006b90:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff ff64 	bl	8006a60 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	4798      	blx	r3
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b0c2      	sub	sp, #264	; 0x108
 8006bc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006bc2:	f7f9 fc7f 	bl	80004c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006bc6:	f000 f833 	bl	8006c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006bca:	f000 f9ed 	bl	8006fa8 <MX_GPIO_Init>
  MX_SAI4_Init();
 8006bce:	f000 f915 	bl	8006dfc <MX_SAI4_Init>
  MX_SAI1_Init();
 8006bd2:	f000 f8dd 	bl	8006d90 <MX_SAI1_Init>

  MX_CRC_Init();
 8006bd6:	f000 f899 	bl	8006d0c <MX_CRC_Init>
  MX_BDMA_Init();
 8006bda:	f000 f995 	bl	8006f08 <MX_BDMA_Init>
  MX_DMA_Init();
 8006bde:	f000 f9bb 	bl	8006f58 <MX_DMA_Init>
  uint8_t mic_buffer[PDM_BUFFER_SIZE];
 // uint16_t speaker_buffer[PCM_BUFFER_SIZE] = {0};

  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM

  Audio_In_Ctx[AUDIO_IN_INSTANCE].Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 8006be2:	4b12      	ldr	r3, [pc, #72]	; (8006c2c <main+0x70>)
 8006be4:	2230      	movs	r2, #48	; 0x30
 8006be6:	635a      	str	r2, [r3, #52]	; 0x34
  Audio_In_Ctx[AUDIO_IN_INSTANCE].ChannelsNbr = 1;
 8006be8:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <main+0x70>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40
  Audio_In_Ctx[AUDIO_IN_INSTANCE].SampleRate = SAI_AUDIO_FREQUENCY_48K;
 8006bee:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <main+0x70>)
 8006bf0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
  Audio_In_Ctx[AUDIO_IN_INSTANCE].BitsPerSample = AUDIO_RESOLUTION_8B;
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <main+0x70>)
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	63da      	str	r2, [r3, #60]	; 0x3c
  Audio_In_Ctx[AUDIO_IN_INSTANCE].Volume = 80;
 8006bfc:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <main+0x70>)
 8006bfe:	2250      	movs	r2, #80	; 0x50
 8006c00:	651a      	str	r2, [r3, #80]	; 0x50


  uint32_t status_init = BSP_AUDIO_IN_PDMToPCM_Init(AUDIO_IN_INSTANCE, SAI_AUDIO_FREQUENCY_16K, 1, 1);
 8006c02:	2301      	movs	r3, #1
 8006c04:	2201      	movs	r2, #1
 8006c06:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	f7f9 fb80 	bl	8000310 <BSP_AUDIO_IN_PDMToPCM_Init>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t status_record = BSP_AUDIO_IN_RecordPDM(AUDIO_IN_INSTANCE, mic_buffer, 64);
 8006c16:	463b      	mov	r3, r7
 8006c18:	2240      	movs	r2, #64	; 0x40
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	f7f9 fc1b 	bl	8000458 <BSP_AUDIO_IN_RecordPDM>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8006c28:	e7fe      	b.n	8006c28 <main+0x6c>
 8006c2a:	bf00      	nop
 8006c2c:	240009b0 	.word	0x240009b0

08006c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b09c      	sub	sp, #112	; 0x70
 8006c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c3a:	224c      	movs	r2, #76	; 0x4c
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f002 fb7e 	bl	8009340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c44:	1d3b      	adds	r3, r7, #4
 8006c46:	2220      	movs	r2, #32
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f002 fb78 	bl	8009340 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8006c50:	2004      	movs	r0, #4
 8006c52:	f7fc fa6d 	bl	8003130 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c56:	2300      	movs	r3, #0
 8006c58:	603b      	str	r3, [r7, #0]
 8006c5a:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <SystemClock_Config+0xd8>)
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	4a2a      	ldr	r2, [pc, #168]	; (8006d08 <SystemClock_Config+0xd8>)
 8006c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c64:	6193      	str	r3, [r2, #24]
 8006c66:	4b28      	ldr	r3, [pc, #160]	; (8006d08 <SystemClock_Config+0xd8>)
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006c72:	bf00      	nop
 8006c74:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <SystemClock_Config+0xd8>)
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c80:	d1f8      	bne.n	8006c74 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c82:	2302      	movs	r3, #2
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006c86:	2301      	movs	r3, #1
 8006c88:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c8a:	2340      	movs	r3, #64	; 0x40
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c92:	2300      	movs	r3, #0
 8006c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006c96:	2304      	movs	r3, #4
 8006c98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8006c9a:	2318      	movs	r3, #24
 8006c9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8006ca2:	237d      	movs	r3, #125	; 0x7d
 8006ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006caa:	230c      	movs	r3, #12
 8006cac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fc fa92 	bl	80031e4 <HAL_RCC_OscConfig>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006cc6:	f000 f9b7 	bl	8007038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006cca:	233f      	movs	r3, #63	; 0x3f
 8006ccc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006cda:	2340      	movs	r3, #64	; 0x40
 8006cdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006cde:	2340      	movs	r3, #64	; 0x40
 8006ce0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006ce8:	2340      	movs	r3, #64	; 0x40
 8006cea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006cec:	1d3b      	adds	r3, r7, #4
 8006cee:	2102      	movs	r1, #2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fc fe23 	bl	800393c <HAL_RCC_ClockConfig>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006cfc:	f000 f99c 	bl	8007038 <Error_Handler>
  }
}
 8006d00:	bf00      	nop
 8006d02:	3770      	adds	r7, #112	; 0x70
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	58024800 	.word	0x58024800

08006d0c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006d12:	4b1c      	ldr	r3, [pc, #112]	; (8006d84 <MX_CRC_Init+0x78>)
 8006d14:	4a1c      	ldr	r2, [pc, #112]	; (8006d88 <MX_CRC_Init+0x7c>)
 8006d16:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006d18:	4b1a      	ldr	r3, [pc, #104]	; (8006d84 <MX_CRC_Init+0x78>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006d1e:	4b19      	ldr	r3, [pc, #100]	; (8006d84 <MX_CRC_Init+0x78>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006d24:	4b17      	ldr	r3, [pc, #92]	; (8006d84 <MX_CRC_Init+0x78>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006d2a:	4b16      	ldr	r3, [pc, #88]	; (8006d84 <MX_CRC_Init+0x78>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006d30:	4b14      	ldr	r3, [pc, #80]	; (8006d84 <MX_CRC_Init+0x78>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006d36:	4813      	ldr	r0, [pc, #76]	; (8006d84 <MX_CRC_Init+0x78>)
 8006d38:	f7f9 fd66 	bl	8000808 <HAL_CRC_Init>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8006d42:	f000 f979 	bl	8007038 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8006d46:	4b0f      	ldr	r3, [pc, #60]	; (8006d84 <MX_CRC_Init+0x78>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <MX_CRC_Init+0x78>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0201 	orr.w	r2, r2, #1
 8006d54:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8006d56:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <MX_CRC_Init+0x80>)
 8006d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d5c:	4a0b      	ldr	r2, [pc, #44]	; (8006d8c <MX_CRC_Init+0x80>)
 8006d5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d66:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <MX_CRC_Init+0x80>)
 8006d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8006d74:	4803      	ldr	r0, [pc, #12]	; (8006d84 <MX_CRC_Init+0x78>)
 8006d76:	f000 f97f 	bl	8007078 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	24000a44 	.word	0x24000a44
 8006d88:	58024c00 	.word	0x58024c00
 8006d8c:	58024400 	.word	0x58024400

08006d90 <MX_SAI1_Init>:
//  * @brief SAI1 Initialization Function
//  * @param None
//  * @retval None
//  */
static void MX_SAI1_Init(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  haudio_out_sai.Instance = SAI1_Block_B;
 8006d94:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006d96:	4a17      	ldr	r2, [pc, #92]	; (8006df4 <MX_SAI1_Init+0x64>)
 8006d98:	601a      	str	r2, [r3, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8006d9a:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8006da0:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006da6:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006dac:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	619a      	str	r2, [r3, #24]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006db2:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	61da      	str	r2, [r3, #28]
  haudio_out_sai.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8006db8:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006dba:	4a0f      	ldr	r2, [pc, #60]	; (8006df8 <MX_SAI1_Init+0x68>)
 8006dbc:	621a      	str	r2, [r3, #32]
  haudio_out_sai.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	60da      	str	r2, [r3, #12]
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8006dca:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&haudio_out_sai, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4804      	ldr	r0, [pc, #16]	; (8006df0 <MX_SAI1_Init+0x60>)
 8006dde:	f7ff f99f 	bl	8006120 <HAL_SAI_InitProtocol>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8006de8:	f000 f926 	bl	8007038 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8006dec:	bf00      	nop
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	24000494 	.word	0x24000494
 8006df4:	40015824 	.word	0x40015824
 8006df8:	0002ee00 	.word	0x0002ee00

08006dfc <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */

  /* USER CODE BEGIN SAI4_Init 2 */
  haudio_in_sai[AUDIO_IN_INSTANCE].Instance = AUDIO_IN_SAI_PDMx;
 8006e00:	4b3e      	ldr	r3, [pc, #248]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e02:	4a3f      	ldr	r2, [pc, #252]	; (8006f00 <MX_SAI4_Init+0x104>)
 8006e04:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.Protocol = SAI_FREE_PROTOCOL;
 8006e08:	4b3c      	ldr	r3, [pc, #240]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.AudioMode = SAI_MODEMASTER_RX;
 8006e10:	4b3a      	ldr	r3, [pc, #232]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.DataSize = SAI_DATASIZE_16;
 8006e18:	4b38      	ldr	r3, [pc, #224]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e1a:	2280      	movs	r2, #128	; 0x80
 8006e1c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006e20:	4b36      	ldr	r3, [pc, #216]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006e28:	4b34      	ldr	r3, [pc, #208]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.Synchro = SAI_ASYNCHRONOUS;
 8006e30:	4b32      	ldr	r3, [pc, #200]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006e38:	4b30      	ldr	r3, [pc, #192]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006e40:	4b2e      	ldr	r3, [pc, #184]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006e48:	4b2c      	ldr	r3, [pc, #176]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006e50:	4b2a      	ldr	r3, [pc, #168]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e52:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006e56:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.MonoStereoMode = SAI_STEREOMODE;
 8006e5a:	4b28      	ldr	r3, [pc, #160]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.CompandingMode = SAI_NOCOMPANDING;
 8006e62:	4b26      	ldr	r3, [pc, #152]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.Activation = ENABLE;
 8006e6a:	4b24      	ldr	r3, [pc, #144]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.MicPairsNbr = 0;
 8006e72:	4b22      	ldr	r3, [pc, #136]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8006e7a:	4b20      	ldr	r3, [pc, #128]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e80:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FrameLength = 16;
 8006e84:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e86:	2210      	movs	r2, #16
 8006e88:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.ActiveFrameLength = 1;
 8006e8c:	4b1b      	ldr	r3, [pc, #108]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8006e94:	4b19      	ldr	r3, [pc, #100]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006e9c:	4b17      	ldr	r3, [pc, #92]	; (8006efc <MX_SAI4_Init+0x100>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8006ea4:	4b15      	ldr	r3, [pc, #84]	; (8006efc <MX_SAI4_Init+0x100>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.FirstBitOffset = 0;
 8006eac:	4b13      	ldr	r3, [pc, #76]	; (8006efc <MX_SAI4_Init+0x100>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006eb4:	4b11      	ldr	r3, [pc, #68]	; (8006efc <MX_SAI4_Init+0x100>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotNumber = 0;
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <MX_SAI4_Init+0x100>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotActive = 0x0000FFFF;
 8006ec4:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <MX_SAI4_Init+0x100>)
 8006ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.Activation = ENABLE;
 8006ece:	4b0b      	ldr	r3, [pc, #44]	; (8006efc <MX_SAI4_Init+0x100>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.MicPairsNbr = 1;
 8006ed6:	4b09      	ldr	r3, [pc, #36]	; (8006efc <MX_SAI4_Init+0x100>)
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8006ede:	4b07      	ldr	r3, [pc, #28]	; (8006efc <MX_SAI4_Init+0x100>)
 8006ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  if (HAL_SAI_Init(&haudio_in_sai[AUDIO_IN_INSTANCE]) != HAL_OK)
 8006ee8:	4806      	ldr	r0, [pc, #24]	; (8006f04 <MX_SAI4_Init+0x108>)
 8006eea:	f7ff f94b 	bl	8006184 <HAL_SAI_Init>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <MX_SAI4_Init+0xfc>
  {
    Error_Handler();
 8006ef4:	f000 f8a0 	bl	8007038 <Error_Handler>
  // 6.144 mhz bit clk frequency
  // 384khz frame sync frequency
  // 0 slots, 16 bits per frame
  /* USER CODE END SAI4_Init 2 */

}
 8006ef8:	bf00      	nop
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	24000548 	.word	0x24000548
 8006f00:	58005404 	.word	0x58005404
 8006f04:	240005fc 	.word	0x240005fc

08006f08 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8006f0e:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <MX_BDMA_Init+0x4c>)
 8006f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f14:	4a0f      	ldr	r2, [pc, #60]	; (8006f54 <MX_BDMA_Init+0x4c>)
 8006f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <MX_BDMA_Init+0x4c>)
 8006f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f28:	607b      	str	r3, [r7, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2100      	movs	r1, #0
 8006f30:	2080      	movs	r0, #128	; 0x80
 8006f32:	f7f9 fc34 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8006f36:	2080      	movs	r0, #128	; 0x80
 8006f38:	f7f9 fc4b 	bl	80007d2 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2100      	movs	r1, #0
 8006f40:	2081      	movs	r0, #129	; 0x81
 8006f42:	f7f9 fc2c 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8006f46:	2081      	movs	r0, #129	; 0x81
 8006f48:	f7f9 fc43 	bl	80007d2 <HAL_NVIC_EnableIRQ>

}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	58024400 	.word	0x58024400

08006f58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f5e:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <MX_DMA_Init+0x4c>)
 8006f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f64:	4a0f      	ldr	r2, [pc, #60]	; (8006fa4 <MX_DMA_Init+0x4c>)
 8006f66:	f043 0301 	orr.w	r3, r3, #1
 8006f6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <MX_DMA_Init+0x4c>)
 8006f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	607b      	str	r3, [r7, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2100      	movs	r1, #0
 8006f80:	200c      	movs	r0, #12
 8006f82:	f7f9 fc0c 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006f86:	200c      	movs	r0, #12
 8006f88:	f7f9 fc23 	bl	80007d2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2100      	movs	r1, #0
 8006f90:	2066      	movs	r0, #102	; 0x66
 8006f92:	f7f9 fc04 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8006f96:	2066      	movs	r0, #102	; 0x66
 8006f98:	f7f9 fc1b 	bl	80007d2 <HAL_NVIC_EnableIRQ>

}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	58024400 	.word	0x58024400

08006fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fae:	4b21      	ldr	r3, [pc, #132]	; (8007034 <MX_GPIO_Init+0x8c>)
 8006fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fb4:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <MX_GPIO_Init+0x8c>)
 8006fb6:	f043 0301 	orr.w	r3, r3, #1
 8006fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fbe:	4b1d      	ldr	r3, [pc, #116]	; (8007034 <MX_GPIO_Init+0x8c>)
 8006fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <MX_GPIO_Init+0x8c>)
 8006fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fd2:	4a18      	ldr	r2, [pc, #96]	; (8007034 <MX_GPIO_Init+0x8c>)
 8006fd4:	f043 0310 	orr.w	r3, r3, #16
 8006fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fdc:	4b15      	ldr	r3, [pc, #84]	; (8007034 <MX_GPIO_Init+0x8c>)
 8006fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	60bb      	str	r3, [r7, #8]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <MX_GPIO_Init+0x8c>)
 8006fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ff0:	4a10      	ldr	r2, [pc, #64]	; (8007034 <MX_GPIO_Init+0x8c>)
 8006ff2:	f043 0308 	orr.w	r3, r3, #8
 8006ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ffa:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <MX_GPIO_Init+0x8c>)
 8006ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	607b      	str	r3, [r7, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <MX_GPIO_Init+0x8c>)
 800700a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800700e:	4a09      	ldr	r2, [pc, #36]	; (8007034 <MX_GPIO_Init+0x8c>)
 8007010:	f043 0320 	orr.w	r3, r3, #32
 8007014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <MX_GPIO_Init+0x8c>)
 800701a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	683b      	ldr	r3, [r7, #0]

}
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	58024400 	.word	0x58024400

08007038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800703c:	b672      	cpsid	i
}
 800703e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007040:	e7fe      	b.n	8007040 <Error_Handler+0x8>
	...

08007044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800704a:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <HAL_MspInit+0x30>)
 800704c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007050:	4a08      	ldr	r2, [pc, #32]	; (8007074 <HAL_MspInit+0x30>)
 8007052:	f043 0302 	orr.w	r3, r3, #2
 8007056:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800705a:	4b06      	ldr	r3, [pc, #24]	; (8007074 <HAL_MspInit+0x30>)
 800705c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	58024400 	.word	0x58024400

08007078 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a0b      	ldr	r2, [pc, #44]	; (80070b4 <HAL_CRC_MspInit+0x3c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d10e      	bne.n	80070a8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800708a:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <HAL_CRC_MspInit+0x40>)
 800708c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007090:	4a09      	ldr	r2, [pc, #36]	; (80070b8 <HAL_CRC_MspInit+0x40>)
 8007092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <HAL_CRC_MspInit+0x40>)
 800709c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80070a8:	bf00      	nop
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	58024c00 	.word	0x58024c00
 80070b8:	58024400 	.word	0x58024400

080070bc <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b0ba      	sub	sp, #232	; 0xe8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80070c4:	f107 0310 	add.w	r3, r7, #16
 80070c8:	22b4      	movs	r2, #180	; 0xb4
 80070ca:	2100      	movs	r1, #0
 80070cc:	4618      	mov	r0, r3
 80070ce:	f002 f937 	bl	8009340 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4aa9      	ldr	r2, [pc, #676]	; (800737c <HAL_SAI_MspInit+0x2c0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	f040 80a5 	bne.w	8007228 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80070de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070e2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80070e4:	2300      	movs	r3, #0
 80070e6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80070e8:	f107 0310 	add.w	r3, r7, #16
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fc ff85 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 80070f8:	f7ff ff9e 	bl	8007038 <Error_Handler>
    }

      if (SAI1_client == 0)
 80070fc:	4ba0      	ldr	r3, [pc, #640]	; (8007380 <HAL_SAI_MspInit+0x2c4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10e      	bne.n	8007122 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8007104:	4b9f      	ldr	r3, [pc, #636]	; (8007384 <HAL_SAI_MspInit+0x2c8>)
 8007106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800710a:	4a9e      	ldr	r2, [pc, #632]	; (8007384 <HAL_SAI_MspInit+0x2c8>)
 800710c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007110:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007114:	4b9b      	ldr	r3, [pc, #620]	; (8007384 <HAL_SAI_MspInit+0x2c8>)
 8007116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800711a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8007122:	4b97      	ldr	r3, [pc, #604]	; (8007380 <HAL_SAI_MspInit+0x2c4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3301      	adds	r3, #1
 8007128:	4a95      	ldr	r2, [pc, #596]	; (8007380 <HAL_SAI_MspInit+0x2c4>)
 800712a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800712c:	2308      	movs	r3, #8
 800712e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007132:	2302      	movs	r3, #2
 8007134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007138:	2300      	movs	r3, #0
 800713a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800713e:	2300      	movs	r3, #0
 8007140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007144:	2306      	movs	r3, #6
 8007146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800714a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800714e:	4619      	mov	r1, r3
 8007150:	488d      	ldr	r0, [pc, #564]	; (8007388 <HAL_SAI_MspInit+0x2cc>)
 8007152:	f7fb fe45 	bl	8002de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8007156:	f44f 7360 	mov.w	r3, #896	; 0x380
 800715a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800715e:	2302      	movs	r3, #2
 8007160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007164:	2300      	movs	r3, #0
 8007166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800716a:	2300      	movs	r3, #0
 800716c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007170:	2306      	movs	r3, #6
 8007172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007176:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800717a:	4619      	mov	r1, r3
 800717c:	4883      	ldr	r0, [pc, #524]	; (800738c <HAL_SAI_MspInit+0x2d0>)
 800717e:	f7fb fe2f 	bl	8002de0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8007182:	4b83      	ldr	r3, [pc, #524]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 8007184:	4a83      	ldr	r2, [pc, #524]	; (8007394 <HAL_SAI_MspInit+0x2d8>)
 8007186:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8007188:	4b81      	ldr	r3, [pc, #516]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 800718a:	2258      	movs	r2, #88	; 0x58
 800718c:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800718e:	4b80      	ldr	r3, [pc, #512]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 8007190:	2240      	movs	r2, #64	; 0x40
 8007192:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8007194:	4b7e      	ldr	r3, [pc, #504]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 8007196:	2200      	movs	r2, #0
 8007198:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800719a:	4b7d      	ldr	r3, [pc, #500]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 800719c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071a0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80071a2:	4b7b      	ldr	r3, [pc, #492]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 80071a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80071aa:	4b79      	ldr	r3, [pc, #484]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 80071ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80071b0:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80071b2:	4b77      	ldr	r3, [pc, #476]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 80071b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071b8:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 80071ba:	4b75      	ldr	r3, [pc, #468]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 80071bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071c0:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80071c2:	4b73      	ldr	r3, [pc, #460]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80071c8:	4871      	ldr	r0, [pc, #452]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 80071ca:	f7f9 fc07 	bl	80009dc <HAL_DMA_Init>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 80071d4:	f7ff ff30 	bl	8007038 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80071d8:	2306      	movs	r3, #6
 80071da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80071de:	2300      	movs	r3, #0
 80071e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 80071f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071fa:	4619      	mov	r1, r3
 80071fc:	4864      	ldr	r0, [pc, #400]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 80071fe:	f7fb fcd7 	bl	8002bb0 <HAL_DMAEx_ConfigMuxSync>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8007208:	f7ff ff16 	bl	8007038 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a60      	ldr	r2, [pc, #384]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 8007210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007214:	4a5e      	ldr	r2, [pc, #376]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a5c      	ldr	r2, [pc, #368]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 800721e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007222:	4a5b      	ldr	r2, [pc, #364]	; (8007390 <HAL_SAI_MspInit+0x2d4>)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a5a      	ldr	r2, [pc, #360]	; (8007398 <HAL_SAI_MspInit+0x2dc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	f040 80a0 	bne.w	8007374 <HAL_SAI_MspInit+0x2b8>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8007234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007238:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800723a:	2300      	movs	r3, #0
 800723c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007240:	f107 0310 	add.w	r3, r7, #16
 8007244:	4618      	mov	r0, r3
 8007246:	f7fc fed9 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8007250:	f7ff fef2 	bl	8007038 <Error_Handler>
    }

    if (SAI4_client == 0)
 8007254:	4b51      	ldr	r3, [pc, #324]	; (800739c <HAL_SAI_MspInit+0x2e0>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10e      	bne.n	800727a <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800725c:	4b49      	ldr	r3, [pc, #292]	; (8007384 <HAL_SAI_MspInit+0x2c8>)
 800725e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007262:	4a48      	ldr	r2, [pc, #288]	; (8007384 <HAL_SAI_MspInit+0x2c8>)
 8007264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007268:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800726c:	4b45      	ldr	r3, [pc, #276]	; (8007384 <HAL_SAI_MspInit+0x2c8>)
 800726e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007276:	60bb      	str	r3, [r7, #8]
 8007278:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 800727a:	4b48      	ldr	r3, [pc, #288]	; (800739c <HAL_SAI_MspInit+0x2e0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3301      	adds	r3, #1
 8007280:	4a46      	ldr	r2, [pc, #280]	; (800739c <HAL_SAI_MspInit+0x2e0>)
 8007282:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007284:	2330      	movs	r3, #48	; 0x30
 8007286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800728a:	2302      	movs	r3, #2
 800728c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007290:	2300      	movs	r3, #0
 8007292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007296:	2300      	movs	r3, #0
 8007298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800729c:	230a      	movs	r3, #10
 800729e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80072a6:	4619      	mov	r1, r3
 80072a8:	4837      	ldr	r0, [pc, #220]	; (8007388 <HAL_SAI_MspInit+0x2cc>)
 80072aa:	f7fb fd99 	bl	8002de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80072ae:	2340      	movs	r3, #64	; 0x40
 80072b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b4:	2302      	movs	r3, #2
 80072b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c0:	2300      	movs	r3, #0
 80072c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80072d0:	4619      	mov	r1, r3
 80072d2:	4833      	ldr	r0, [pc, #204]	; (80073a0 <HAL_SAI_MspInit+0x2e4>)
 80072d4:	f7fb fd84 	bl	8002de0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 80072d8:	4b32      	ldr	r3, [pc, #200]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 80072da:	4a33      	ldr	r2, [pc, #204]	; (80073a8 <HAL_SAI_MspInit+0x2ec>)
 80072dc:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 80072de:	4b31      	ldr	r3, [pc, #196]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 80072e0:	220f      	movs	r2, #15
 80072e2:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072e4:	4b2f      	ldr	r3, [pc, #188]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80072ea:	4b2e      	ldr	r3, [pc, #184]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 80072f0:	4b2c      	ldr	r3, [pc, #176]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 80072f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072f6:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072f8:	4b2a      	ldr	r3, [pc, #168]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072fe:	4b29      	ldr	r3, [pc, #164]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 8007300:	2200      	movs	r2, #0
 8007302:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8007304:	4b27      	ldr	r3, [pc, #156]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 8007306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800730a:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 800730c:	4b25      	ldr	r3, [pc, #148]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 800730e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007312:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8007314:	4823      	ldr	r0, [pc, #140]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 8007316:	f7f9 fb61 	bl	80009dc <HAL_DMA_Init>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <HAL_SAI_MspInit+0x268>
    {
      Error_Handler();
 8007320:	f7ff fe8a 	bl	8007038 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8007324:	230e      	movs	r3, #14
 8007326:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800732a:	2300      	movs	r3, #0
 800732c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8007330:	2300      	movs	r3, #0
 8007332:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800733c:	2301      	movs	r3, #1
 800733e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8007342:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007346:	4619      	mov	r1, r3
 8007348:	4816      	ldr	r0, [pc, #88]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 800734a:	f7fb fc31 	bl	8002bb0 <HAL_DMAEx_ConfigMuxSync>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <HAL_SAI_MspInit+0x29c>
    {
      Error_Handler();
 8007354:	f7ff fe70 	bl	8007038 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a12      	ldr	r2, [pc, #72]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 800735c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007360:	4a10      	ldr	r2, [pc, #64]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a0e      	ldr	r2, [pc, #56]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 800736a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800736e:	4a0d      	ldr	r2, [pc, #52]	; (80073a4 <HAL_SAI_MspInit+0x2e8>)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8007374:	bf00      	nop
 8007376:	37e8      	adds	r7, #232	; 0xe8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40015824 	.word	0x40015824
 8007380:	24000754 	.word	0x24000754
 8007384:	58024400 	.word	0x58024400
 8007388:	58021000 	.word	0x58021000
 800738c:	58021400 	.word	0x58021400
 8007390:	24000ae0 	.word	0x24000ae0
 8007394:	40020028 	.word	0x40020028
 8007398:	58005404 	.word	0x58005404
 800739c:	24000758 	.word	0x24000758
 80073a0:	58020c00 	.word	0x58020c00
 80073a4:	24000a68 	.word	0x24000a68
 80073a8:	58025408 	.word	0x58025408

080073ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80073b0:	e7fe      	b.n	80073b0 <NMI_Handler+0x4>

080073b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073b2:	b480      	push	{r7}
 80073b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073b6:	e7fe      	b.n	80073b6 <HardFault_Handler+0x4>

080073b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073bc:	e7fe      	b.n	80073bc <MemManage_Handler+0x4>

080073be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073be:	b480      	push	{r7}
 80073c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073c2:	e7fe      	b.n	80073c2 <BusFault_Handler+0x4>

080073c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073c8:	e7fe      	b.n	80073c8 <UsageFault_Handler+0x4>

080073ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073ca:	b480      	push	{r7}
 80073cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073ce:	bf00      	nop
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073dc:	bf00      	nop
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80073e6:	b480      	push	{r7}
 80073e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80073ea:	bf00      	nop
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073f8:	f7f9 f8d6 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073fc:	bf00      	nop
 80073fe:	bd80      	pop	{r7, pc}

08007400 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8007404:	4802      	ldr	r0, [pc, #8]	; (8007410 <DMA1_Stream1_IRQHandler+0x10>)
 8007406:	f7fa f8ad 	bl	8001564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800740a:	bf00      	nop
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	24000ae0 	.word	0x24000ae0

08007414 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 8007418:	4802      	ldr	r0, [pc, #8]	; (8007424 <DMAMUX1_OVR_IRQHandler+0x10>)
 800741a:	f7fb fc8f 	bl	8002d3c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800741e:	bf00      	nop
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	24000ae0 	.word	0x24000ae0

08007428 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 800742c:	4802      	ldr	r0, [pc, #8]	; (8007438 <DMAMUX2_OVR_IRQHandler+0x10>)
 800742e:	f7fb fc85 	bl	8002d3c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8007432:	bf00      	nop
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	24000a68 	.word	0x24000a68

0800743c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8007440:	4802      	ldr	r0, [pc, #8]	; (800744c <BDMA_Channel0_IRQHandler+0x10>)
 8007442:	f7fa f88f 	bl	8001564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8007446:	bf00      	nop
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	24000a68 	.word	0x24000a68

08007450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007454:	4b32      	ldr	r3, [pc, #200]	; (8007520 <SystemInit+0xd0>)
 8007456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745a:	4a31      	ldr	r2, [pc, #196]	; (8007520 <SystemInit+0xd0>)
 800745c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007464:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <SystemInit+0xd4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	2b06      	cmp	r3, #6
 800746e:	d807      	bhi.n	8007480 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007470:	4b2c      	ldr	r3, [pc, #176]	; (8007524 <SystemInit+0xd4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f023 030f 	bic.w	r3, r3, #15
 8007478:	4a2a      	ldr	r2, [pc, #168]	; (8007524 <SystemInit+0xd4>)
 800747a:	f043 0307 	orr.w	r3, r3, #7
 800747e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007480:	4b29      	ldr	r3, [pc, #164]	; (8007528 <SystemInit+0xd8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a28      	ldr	r2, [pc, #160]	; (8007528 <SystemInit+0xd8>)
 8007486:	f043 0301 	orr.w	r3, r3, #1
 800748a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800748c:	4b26      	ldr	r3, [pc, #152]	; (8007528 <SystemInit+0xd8>)
 800748e:	2200      	movs	r2, #0
 8007490:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007492:	4b25      	ldr	r3, [pc, #148]	; (8007528 <SystemInit+0xd8>)
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	4924      	ldr	r1, [pc, #144]	; (8007528 <SystemInit+0xd8>)
 8007498:	4b24      	ldr	r3, [pc, #144]	; (800752c <SystemInit+0xdc>)
 800749a:	4013      	ands	r3, r2
 800749c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800749e:	4b21      	ldr	r3, [pc, #132]	; (8007524 <SystemInit+0xd4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0308 	and.w	r3, r3, #8
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80074aa:	4b1e      	ldr	r3, [pc, #120]	; (8007524 <SystemInit+0xd4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f023 030f 	bic.w	r3, r3, #15
 80074b2:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <SystemInit+0xd4>)
 80074b4:	f043 0307 	orr.w	r3, r3, #7
 80074b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <SystemInit+0xd8>)
 80074bc:	2200      	movs	r2, #0
 80074be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80074c0:	4b19      	ldr	r3, [pc, #100]	; (8007528 <SystemInit+0xd8>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80074c6:	4b18      	ldr	r3, [pc, #96]	; (8007528 <SystemInit+0xd8>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80074cc:	4b16      	ldr	r3, [pc, #88]	; (8007528 <SystemInit+0xd8>)
 80074ce:	4a18      	ldr	r2, [pc, #96]	; (8007530 <SystemInit+0xe0>)
 80074d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80074d2:	4b15      	ldr	r3, [pc, #84]	; (8007528 <SystemInit+0xd8>)
 80074d4:	4a17      	ldr	r2, [pc, #92]	; (8007534 <SystemInit+0xe4>)
 80074d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80074d8:	4b13      	ldr	r3, [pc, #76]	; (8007528 <SystemInit+0xd8>)
 80074da:	4a17      	ldr	r2, [pc, #92]	; (8007538 <SystemInit+0xe8>)
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <SystemInit+0xd8>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80074e4:	4b10      	ldr	r3, [pc, #64]	; (8007528 <SystemInit+0xd8>)
 80074e6:	4a14      	ldr	r2, [pc, #80]	; (8007538 <SystemInit+0xe8>)
 80074e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80074ea:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <SystemInit+0xd8>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80074f0:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <SystemInit+0xd8>)
 80074f2:	4a11      	ldr	r2, [pc, #68]	; (8007538 <SystemInit+0xe8>)
 80074f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80074f6:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <SystemInit+0xd8>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <SystemInit+0xd8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a09      	ldr	r2, [pc, #36]	; (8007528 <SystemInit+0xd8>)
 8007502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007506:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007508:	4b07      	ldr	r3, [pc, #28]	; (8007528 <SystemInit+0xd8>)
 800750a:	2200      	movs	r2, #0
 800750c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800750e:	4b0b      	ldr	r3, [pc, #44]	; (800753c <SystemInit+0xec>)
 8007510:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8007514:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8007516:	bf00      	nop
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	e000ed00 	.word	0xe000ed00
 8007524:	52002000 	.word	0x52002000
 8007528:	58024400 	.word	0x58024400
 800752c:	eaf6ed7f 	.word	0xeaf6ed7f
 8007530:	02020200 	.word	0x02020200
 8007534:	01ff0000 	.word	0x01ff0000
 8007538:	01010280 	.word	0x01010280
 800753c:	52004000 	.word	0x52004000

08007540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007578 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007544:	f7ff ff84 	bl	8007450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007548:	480c      	ldr	r0, [pc, #48]	; (800757c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800754a:	490d      	ldr	r1, [pc, #52]	; (8007580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800754c:	4a0d      	ldr	r2, [pc, #52]	; (8007584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800754e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007550:	e002      	b.n	8007558 <LoopCopyDataInit>

08007552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007556:	3304      	adds	r3, #4

08007558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800755a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800755c:	d3f9      	bcc.n	8007552 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800755e:	4a0a      	ldr	r2, [pc, #40]	; (8007588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007560:	4c0a      	ldr	r4, [pc, #40]	; (800758c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007564:	e001      	b.n	800756a <LoopFillZerobss>

08007566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007568:	3204      	adds	r2, #4

0800756a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800756a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800756c:	d3fb      	bcc.n	8007566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800756e:	f001 fec3 	bl	80092f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007572:	f7ff fb23 	bl	8006bbc <main>
  bx  lr
 8007576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007578:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800757c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007580:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8007584:	080099b8 	.word	0x080099b8
  ldr r2, =_sbss
 8007588:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 800758c:	24000b58 	.word	0x24000b58

08007590 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007590:	e7fe      	b.n	8007590 <ADC3_IRQHandler>
	...

08007594 <D16_GENERIC>:
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	b089      	sub	sp, #36	; 0x24
 800759a:	6993      	ldr	r3, [r2, #24]
 800759c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800759e:	9103      	str	r1, [sp, #12]
 80075a0:	9307      	str	r3, [sp, #28]
 80075a2:	69d3      	ldr	r3, [r2, #28]
 80075a4:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 80075a8:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80075ac:	9106      	str	r1, [sp, #24]
 80075ae:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	d063      	beq.n	800767e <D16_GENERIC+0xea>
 80075b6:	f001 0520 	and.w	r5, r1, #32
 80075ba:	f001 0110 	and.w	r1, r1, #16
 80075be:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 80076a0 <D16_GENERIC+0x10c>
 80075c2:	46c1      	mov	r9, r8
 80075c4:	9104      	str	r1, [sp, #16]
 80075c6:	2100      	movs	r1, #0
 80075c8:	9505      	str	r5, [sp, #20]
 80075ca:	e04d      	b.n	8007668 <D16_GENERIC+0xd4>
 80075cc:	5d87      	ldrb	r7, [r0, r6]
 80075ce:	7805      	ldrb	r5, [r0, #0]
 80075d0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80075d4:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 80075d8:	b2fe      	uxtb	r6, r7
 80075da:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80075de:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 80075e2:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 80075e6:	441d      	add	r5, r3
 80075e8:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 80075ec:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80075f0:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80075f4:	0a9b      	lsrs	r3, r3, #10
 80075f6:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80075fa:	4d27      	ldr	r5, [pc, #156]	; (8007698 <D16_GENERIC+0x104>)
 80075fc:	fb26 c505 	smlad	r5, r6, r5, ip
 8007600:	4f26      	ldr	r7, [pc, #152]	; (800769c <D16_GENERIC+0x108>)
 8007602:	fb26 fc07 	smuad	ip, r6, r7
 8007606:	9e04      	ldr	r6, [sp, #16]
 8007608:	f101 0801 	add.w	r8, r1, #1
 800760c:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8007610:	b1ae      	cbz	r6, 800763e <D16_GENERIC+0xaa>
 8007612:	442c      	add	r4, r5
 8007614:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8007618:	eba4 040a 	sub.w	r4, r4, sl
 800761c:	46aa      	mov	sl, r5
 800761e:	17e7      	asrs	r7, r4, #31
 8007620:	fba4 450b 	umull	r4, r5, r4, fp
 8007624:	e9cd 4500 	strd	r4, r5, [sp]
 8007628:	fb0b 5407 	mla	r4, fp, r7, r5
 800762c:	9401      	str	r4, [sp, #4]
 800762e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007632:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007636:	f145 0500 	adc.w	r5, r5, #0
 800763a:	006c      	lsls	r4, r5, #1
 800763c:	4625      	mov	r5, r4
 800763e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8007642:	042d      	lsls	r5, r5, #16
 8007644:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007648:	2700      	movs	r7, #0
 800764a:	fb01 fb0b 	mul.w	fp, r1, fp
 800764e:	fa1f f188 	uxth.w	r1, r8
 8007652:	fbc9 6705 	smlal	r6, r7, r9, r5
 8007656:	9e03      	ldr	r6, [sp, #12]
 8007658:	10bd      	asrs	r5, r7, #2
 800765a:	f305 050f 	ssat	r5, #16, r5
 800765e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8007662:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007664:	428d      	cmp	r5, r1
 8007666:	d90a      	bls.n	800767e <D16_GENERIC+0xea>
 8007668:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800766a:	2d01      	cmp	r5, #1
 800766c:	b2ee      	uxtb	r6, r5
 800766e:	d1ad      	bne.n	80075cc <D16_GENERIC+0x38>
 8007670:	9d05      	ldr	r5, [sp, #20]
 8007672:	f850 7b02 	ldr.w	r7, [r0], #2
 8007676:	2d00      	cmp	r5, #0
 8007678:	d0ae      	beq.n	80075d8 <D16_GENERIC+0x44>
 800767a:	ba7f      	rev16	r7, r7
 800767c:	e7ac      	b.n	80075d8 <D16_GENERIC+0x44>
 800767e:	2000      	movs	r0, #0
 8007680:	9906      	ldr	r1, [sp, #24]
 8007682:	61d3      	str	r3, [r2, #28]
 8007684:	9b07      	ldr	r3, [sp, #28]
 8007686:	f8c2 c008 	str.w	ip, [r2, #8]
 800768a:	60d1      	str	r1, [r2, #12]
 800768c:	6193      	str	r3, [r2, #24]
 800768e:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8007692:	b009      	add	sp, #36	; 0x24
 8007694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007698:	00030001 	.word	0x00030001
 800769c:	00010003 	.word	0x00010003
 80076a0:	24000000 	.word	0x24000000

080076a4 <D24_GENERIC>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80076ac:	b089      	sub	sp, #36	; 0x24
 80076ae:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80076b0:	9303      	str	r3, [sp, #12]
 80076b2:	6993      	ldr	r3, [r2, #24]
 80076b4:	9104      	str	r1, [sp, #16]
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	69d1      	ldr	r1, [r2, #28]
 80076ba:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80076be:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	f000 8088 	beq.w	80077d8 <D24_GENERIC+0x134>
 80076c8:	f005 0620 	and.w	r6, r5, #32
 80076cc:	f005 0510 	and.w	r5, r5, #16
 80076d0:	f04f 0c00 	mov.w	ip, #0
 80076d4:	f8df e140 	ldr.w	lr, [pc, #320]	; 8007818 <D24_GENERIC+0x174>
 80076d8:	9606      	str	r6, [sp, #24]
 80076da:	9505      	str	r5, [sp, #20]
 80076dc:	e064      	b.n	80077a8 <D24_GENERIC+0x104>
 80076de:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80076e2:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80076e6:	f810 b007 	ldrb.w	fp, [r0, r7]
 80076ea:	042d      	lsls	r5, r5, #16
 80076ec:	19f0      	adds	r0, r6, r7
 80076ee:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 80076f2:	44a9      	add	r9, r5
 80076f4:	fa5f f689 	uxtb.w	r6, r9
 80076f8:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80076fc:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8007700:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8007704:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8007708:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800770c:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8007710:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8007714:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007718:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800771c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007720:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007724:	4d3a      	ldr	r5, [pc, #232]	; (8007810 <D24_GENERIC+0x16c>)
 8007726:	fb26 8705 	smlad	r7, r6, r5, r8
 800772a:	4d3a      	ldr	r5, [pc, #232]	; (8007814 <D24_GENERIC+0x170>)
 800772c:	fb26 3805 	smlad	r8, r6, r5, r3
 8007730:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8007734:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8007738:	2301      	movs	r3, #1
 800773a:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800773e:	fb26 f603 	smuad	r6, r6, r3
 8007742:	eb0c 0903 	add.w	r9, ip, r3
 8007746:	eb0b 0306 	add.w	r3, fp, r6
 800774a:	9e05      	ldr	r6, [sp, #20]
 800774c:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8007750:	b1ae      	cbz	r6, 800777e <D24_GENERIC+0xda>
 8007752:	442c      	add	r4, r5
 8007754:	9e03      	ldr	r6, [sp, #12]
 8007756:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800775a:	1ba4      	subs	r4, r4, r6
 800775c:	9503      	str	r5, [sp, #12]
 800775e:	17e7      	asrs	r7, r4, #31
 8007760:	fba4 450b 	umull	r4, r5, r4, fp
 8007764:	e9cd 4500 	strd	r4, r5, [sp]
 8007768:	fb0b 5407 	mla	r4, fp, r7, r5
 800776c:	9401      	str	r4, [sp, #4]
 800776e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007772:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007776:	f145 0500 	adc.w	r5, r5, #0
 800777a:	006c      	lsls	r4, r5, #1
 800777c:	4625      	mov	r5, r4
 800777e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8007782:	03ad      	lsls	r5, r5, #14
 8007784:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007788:	2700      	movs	r7, #0
 800778a:	fb0c fb0b 	mul.w	fp, ip, fp
 800778e:	fa1f fc89 	uxth.w	ip, r9
 8007792:	fbca 6705 	smlal	r6, r7, sl, r5
 8007796:	9e04      	ldr	r6, [sp, #16]
 8007798:	10bd      	asrs	r5, r7, #2
 800779a:	f305 050f 	ssat	r5, #16, r5
 800779e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80077a2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80077a4:	4565      	cmp	r5, ip
 80077a6:	d917      	bls.n	80077d8 <D24_GENERIC+0x134>
 80077a8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80077aa:	f890 9000 	ldrb.w	r9, [r0]
 80077ae:	b2ef      	uxtb	r7, r5
 80077b0:	2d01      	cmp	r5, #1
 80077b2:	b23e      	sxth	r6, r7
 80077b4:	d193      	bne.n	80076de <D24_GENERIC+0x3a>
 80077b6:	9d06      	ldr	r5, [sp, #24]
 80077b8:	b1dd      	cbz	r5, 80077f2 <D24_GENERIC+0x14e>
 80077ba:	78c7      	ldrb	r7, [r0, #3]
 80077bc:	ea4f 2609 	mov.w	r6, r9, lsl #8
 80077c0:	f01c 0f01 	tst.w	ip, #1
 80077c4:	ea4f 2507 	mov.w	r5, r7, lsl #8
 80077c8:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 80077cc:	d11a      	bne.n	8007804 <D24_GENERIC+0x160>
 80077ce:	f890 9001 	ldrb.w	r9, [r0, #1]
 80077d2:	3002      	adds	r0, #2
 80077d4:	44b1      	add	r9, r6
 80077d6:	e78d      	b.n	80076f4 <D24_GENERIC+0x50>
 80077d8:	6093      	str	r3, [r2, #8]
 80077da:	2000      	movs	r0, #0
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	f8c2 800c 	str.w	r8, [r2, #12]
 80077e2:	6153      	str	r3, [r2, #20]
 80077e4:	9b07      	ldr	r3, [sp, #28]
 80077e6:	61d1      	str	r1, [r2, #28]
 80077e8:	6114      	str	r4, [r2, #16]
 80077ea:	6193      	str	r3, [r2, #24]
 80077ec:	b009      	add	sp, #36	; 0x24
 80077ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f2:	7845      	ldrb	r5, [r0, #1]
 80077f4:	3003      	adds	r0, #3
 80077f6:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80077fa:	022d      	lsls	r5, r5, #8
 80077fc:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8007800:	44a9      	add	r9, r5
 8007802:	e777      	b.n	80076f4 <D24_GENERIC+0x50>
 8007804:	7886      	ldrb	r6, [r0, #2]
 8007806:	3004      	adds	r0, #4
 8007808:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800780c:	44a9      	add	r9, r5
 800780e:	e771      	b.n	80076f4 <D24_GENERIC+0x50>
 8007810:	00030001 	.word	0x00030001
 8007814:	00060007 	.word	0x00060007
 8007818:	24000000 	.word	0x24000000

0800781c <D32_GENERIC>:
 800781c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007820:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8007824:	b089      	sub	sp, #36	; 0x24
 8007826:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007828:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800782a:	9302      	str	r3, [sp, #8]
 800782c:	6993      	ldr	r3, [r2, #24]
 800782e:	9104      	str	r1, [sp, #16]
 8007830:	9307      	str	r3, [sp, #28]
 8007832:	9503      	str	r5, [sp, #12]
 8007834:	69d1      	ldr	r1, [r2, #28]
 8007836:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007838:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800783c:	2e00      	cmp	r6, #0
 800783e:	f000 8097 	beq.w	8007970 <D32_GENERIC+0x154>
 8007842:	f005 0620 	and.w	r6, r5, #32
 8007846:	f005 0510 	and.w	r5, r5, #16
 800784a:	f04f 0e00 	mov.w	lr, #0
 800784e:	f8df c150 	ldr.w	ip, [pc, #336]	; 80079a0 <D32_GENERIC+0x184>
 8007852:	9606      	str	r6, [sp, #24]
 8007854:	9505      	str	r5, [sp, #20]
 8007856:	e079      	b.n	800794c <D32_GENERIC+0x130>
 8007858:	783d      	ldrb	r5, [r7, #0]
 800785a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800785e:	042d      	lsls	r5, r5, #16
 8007860:	f810 a006 	ldrb.w	sl, [r0, r6]
 8007864:	f890 9000 	ldrb.w	r9, [r0]
 8007868:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800786c:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8007870:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8007874:	44a9      	add	r9, r5
 8007876:	fa5f f789 	uxtb.w	r7, r9
 800787a:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800787e:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8007882:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007886:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800788a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800788e:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8007892:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8007896:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800789a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800789e:	f3c1 0909 	ubfx	r9, r1, #0, #10
 80078a2:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80078a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80078aa:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 80078ae:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80078b2:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 80078b6:	f3c1 0509 	ubfx	r5, r1, #0, #10
 80078ba:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80078be:	4d34      	ldr	r5, [pc, #208]	; (8007990 <D32_GENERIC+0x174>)
 80078c0:	fb29 8805 	smlad	r8, r9, r5, r8
 80078c4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80078c8:	fb26 8705 	smlad	r7, r6, r5, r8
 80078cc:	4d31      	ldr	r5, [pc, #196]	; (8007994 <D32_GENERIC+0x178>)
 80078ce:	fb29 3305 	smlad	r3, r9, r5, r3
 80078d2:	4d31      	ldr	r5, [pc, #196]	; (8007998 <D32_GENERIC+0x17c>)
 80078d4:	fb26 3805 	smlad	r8, r6, r5, r3
 80078d8:	2301      	movs	r3, #1
 80078da:	fb29 f903 	smuad	r9, r9, r3
 80078de:	4b2f      	ldr	r3, [pc, #188]	; (800799c <D32_GENERIC+0x180>)
 80078e0:	fb26 9303 	smlad	r3, r6, r3, r9
 80078e4:	9e05      	ldr	r6, [sp, #20]
 80078e6:	f10e 0901 	add.w	r9, lr, #1
 80078ea:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80078ee:	b1ae      	cbz	r6, 800791c <D32_GENERIC+0x100>
 80078f0:	442c      	add	r4, r5
 80078f2:	9e02      	ldr	r6, [sp, #8]
 80078f4:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80078f8:	1ba4      	subs	r4, r4, r6
 80078fa:	9502      	str	r5, [sp, #8]
 80078fc:	17e7      	asrs	r7, r4, #31
 80078fe:	fba4 450a 	umull	r4, r5, r4, sl
 8007902:	e9cd 4500 	strd	r4, r5, [sp]
 8007906:	fb0a 5407 	mla	r4, sl, r7, r5
 800790a:	9401      	str	r4, [sp, #4]
 800790c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007910:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007914:	f145 0500 	adc.w	r5, r5, #0
 8007918:	006c      	lsls	r4, r5, #1
 800791a:	4625      	mov	r5, r4
 800791c:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8007920:	036d      	lsls	r5, r5, #13
 8007922:	9f03      	ldr	r7, [sp, #12]
 8007924:	fb0e fb0a 	mul.w	fp, lr, sl
 8007928:	fa1f fe89 	uxth.w	lr, r9
 800792c:	f04f 0a00 	mov.w	sl, #0
 8007930:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8007934:	9e04      	ldr	r6, [sp, #16]
 8007936:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800793a:	4657      	mov	r7, sl
 800793c:	10bd      	asrs	r5, r7, #2
 800793e:	f305 050f 	ssat	r5, #16, r5
 8007942:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8007946:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007948:	4575      	cmp	r5, lr
 800794a:	d911      	bls.n	8007970 <D32_GENERIC+0x154>
 800794c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800794e:	b2ee      	uxtb	r6, r5
 8007950:	2d01      	cmp	r5, #1
 8007952:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8007956:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800795a:	f47f af7d 	bne.w	8007858 <D32_GENERIC+0x3c>
 800795e:	1d05      	adds	r5, r0, #4
 8007960:	f8d0 9000 	ldr.w	r9, [r0]
 8007964:	9806      	ldr	r0, [sp, #24]
 8007966:	b180      	cbz	r0, 800798a <D32_GENERIC+0x16e>
 8007968:	fa99 f999 	rev16.w	r9, r9
 800796c:	4628      	mov	r0, r5
 800796e:	e782      	b.n	8007876 <D32_GENERIC+0x5a>
 8007970:	6093      	str	r3, [r2, #8]
 8007972:	2000      	movs	r0, #0
 8007974:	9b02      	ldr	r3, [sp, #8]
 8007976:	f8c2 800c 	str.w	r8, [r2, #12]
 800797a:	6153      	str	r3, [r2, #20]
 800797c:	9b07      	ldr	r3, [sp, #28]
 800797e:	61d1      	str	r1, [r2, #28]
 8007980:	6114      	str	r4, [r2, #16]
 8007982:	6193      	str	r3, [r2, #24]
 8007984:	b009      	add	sp, #36	; 0x24
 8007986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798a:	4628      	mov	r0, r5
 800798c:	e773      	b.n	8007876 <D32_GENERIC+0x5a>
 800798e:	bf00      	nop
 8007990:	00060003 	.word	0x00060003
 8007994:	000a000c 	.word	0x000a000c
 8007998:	000c000a 	.word	0x000c000a
 800799c:	00030006 	.word	0x00030006
 80079a0:	24000000 	.word	0x24000000

080079a4 <D48_GENERIC>:
 80079a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	6913      	ldr	r3, [r2, #16]
 80079aa:	b089      	sub	sp, #36	; 0x24
 80079ac:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80079ae:	9301      	str	r3, [sp, #4]
 80079b0:	6953      	ldr	r3, [r2, #20]
 80079b2:	9104      	str	r1, [sp, #16]
 80079b4:	9302      	str	r3, [sp, #8]
 80079b6:	6993      	ldr	r3, [r2, #24]
 80079b8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80079bc:	9307      	str	r3, [sp, #28]
 80079be:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 80079c2:	9100      	str	r1, [sp, #0]
 80079c4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80079c6:	9103      	str	r1, [sp, #12]
 80079c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80079ca:	2c00      	cmp	r4, #0
 80079cc:	f000 80be 	beq.w	8007b4c <D48_GENERIC+0x1a8>
 80079d0:	f001 0420 	and.w	r4, r1, #32
 80079d4:	f001 0110 	and.w	r1, r1, #16
 80079d8:	f04f 0e00 	mov.w	lr, #0
 80079dc:	9105      	str	r1, [sp, #20]
 80079de:	9406      	str	r4, [sp, #24]
 80079e0:	4962      	ldr	r1, [pc, #392]	; (8007b6c <D48_GENERIC+0x1c8>)
 80079e2:	e0a0      	b.n	8007b26 <D48_GENERIC+0x182>
 80079e4:	eb00 0608 	add.w	r6, r0, r8
 80079e8:	f810 a008 	ldrb.w	sl, [r0, r8]
 80079ec:	f810 9005 	ldrb.w	r9, [r0, r5]
 80079f0:	5df4      	ldrb	r4, [r6, r7]
 80079f2:	443e      	add	r6, r7
 80079f4:	f890 b000 	ldrb.w	fp, [r0]
 80079f8:	0420      	lsls	r0, r4, #16
 80079fa:	eb06 0408 	add.w	r4, r6, r8
 80079fe:	f816 6008 	ldrb.w	r6, [r6, r8]
 8007a02:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8007a06:	f814 8007 	ldrb.w	r8, [r4, r7]
 8007a0a:	4427      	add	r7, r4
 8007a0c:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8007a10:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8007a14:	eb0a 040b 	add.w	r4, sl, fp
 8007a18:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8007a1c:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8007a20:	b2f7      	uxtb	r7, r6
 8007a22:	b2e6      	uxtb	r6, r4
 8007a24:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8007a28:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8007a2c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8007a30:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007a34:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8007a38:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8007a3c:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8007a40:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8007a44:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8007a48:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007a4c:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8007a50:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007a54:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8007a58:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007a5c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8007a60:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007a64:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007a68:	9d00      	ldr	r5, [sp, #0]
 8007a6a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007a6e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007a72:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8007a76:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007a7a:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8007a7e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8007a82:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007a86:	4c3a      	ldr	r4, [pc, #232]	; (8007b70 <D48_GENERIC+0x1cc>)
 8007a88:	fb26 5a04 	smlad	sl, r6, r4, r5
 8007a8c:	4c39      	ldr	r4, [pc, #228]	; (8007b74 <D48_GENERIC+0x1d0>)
 8007a8e:	fb29 aa04 	smlad	sl, r9, r4, sl
 8007a92:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8007a96:	fb27 aa04 	smlad	sl, r7, r4, sl
 8007a9a:	4c37      	ldr	r4, [pc, #220]	; (8007b78 <D48_GENERIC+0x1d4>)
 8007a9c:	fb26 3304 	smlad	r3, r6, r4, r3
 8007aa0:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8007aa4:	fb29 3304 	smlad	r3, r9, r4, r3
 8007aa8:	4c34      	ldr	r4, [pc, #208]	; (8007b7c <D48_GENERIC+0x1d8>)
 8007aaa:	fb27 3304 	smlad	r3, r7, r4, r3
 8007aae:	2501      	movs	r5, #1
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	fb26 f605 	smuad	r6, r6, r5
 8007ab6:	4b32      	ldr	r3, [pc, #200]	; (8007b80 <D48_GENERIC+0x1dc>)
 8007ab8:	fb29 6903 	smlad	r9, r9, r3, r6
 8007abc:	4b31      	ldr	r3, [pc, #196]	; (8007b84 <D48_GENERIC+0x1e0>)
 8007abe:	fb27 9303 	smlad	r3, r7, r3, r9
 8007ac2:	9c05      	ldr	r4, [sp, #20]
 8007ac4:	eb0e 0805 	add.w	r8, lr, r5
 8007ac8:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8007acc:	b19c      	cbz	r4, 8007af6 <D48_GENERIC+0x152>
 8007ace:	9c01      	ldr	r4, [sp, #4]
 8007ad0:	9d02      	ldr	r5, [sp, #8]
 8007ad2:	4454      	add	r4, sl
 8007ad4:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8007ad8:	f8cd a008 	str.w	sl, [sp, #8]
 8007adc:	1b64      	subs	r4, r4, r5
 8007ade:	fba4 ab09 	umull	sl, fp, r4, r9
 8007ae2:	17e7      	asrs	r7, r4, #31
 8007ae4:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8007ae8:	fb09 bb07 	mla	fp, r9, r7, fp
 8007aec:	f14b 0500 	adc.w	r5, fp, #0
 8007af0:	006c      	lsls	r4, r5, #1
 8007af2:	46a2      	mov	sl, r4
 8007af4:	9401      	str	r4, [sp, #4]
 8007af6:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8007af8:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8007afc:	9d03      	ldr	r5, [sp, #12]
 8007afe:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007b02:	fb0e f606 	mul.w	r6, lr, r6
 8007b06:	fa1f fe88 	uxth.w	lr, r8
 8007b0a:	f04f 0800 	mov.w	r8, #0
 8007b0e:	fbc5 780a 	smlal	r7, r8, r5, sl
 8007b12:	4645      	mov	r5, r8
 8007b14:	10ac      	asrs	r4, r5, #2
 8007b16:	9d04      	ldr	r5, [sp, #16]
 8007b18:	f304 040f 	ssat	r4, #16, r4
 8007b1c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8007b20:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007b22:	4574      	cmp	r4, lr
 8007b24:	d912      	bls.n	8007b4c <D48_GENERIC+0x1a8>
 8007b26:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8007b28:	b2e5      	uxtb	r5, r4
 8007b2a:	2c01      	cmp	r4, #1
 8007b2c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8007b30:	f1c5 0700 	rsb	r7, r5, #0
 8007b34:	f47f af56 	bne.w	80079e4 <D48_GENERIC+0x40>
 8007b38:	9d06      	ldr	r5, [sp, #24]
 8007b3a:	e9d0 4600 	ldrd	r4, r6, [r0]
 8007b3e:	3006      	adds	r0, #6
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	f43f af6b 	beq.w	8007a1c <D48_GENERIC+0x78>
 8007b46:	ba64      	rev16	r4, r4
 8007b48:	ba76      	rev16	r6, r6
 8007b4a:	e767      	b.n	8007a1c <D48_GENERIC+0x78>
 8007b4c:	6093      	str	r3, [r2, #8]
 8007b4e:	2000      	movs	r0, #0
 8007b50:	9b00      	ldr	r3, [sp, #0]
 8007b52:	f8c2 c01c 	str.w	ip, [r2, #28]
 8007b56:	60d3      	str	r3, [r2, #12]
 8007b58:	9b01      	ldr	r3, [sp, #4]
 8007b5a:	6113      	str	r3, [r2, #16]
 8007b5c:	9b02      	ldr	r3, [sp, #8]
 8007b5e:	6153      	str	r3, [r2, #20]
 8007b60:	9b07      	ldr	r3, [sp, #28]
 8007b62:	6193      	str	r3, [r2, #24]
 8007b64:	b009      	add	sp, #36	; 0x24
 8007b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6a:	bf00      	nop
 8007b6c:	24000000 	.word	0x24000000
 8007b70:	000f000a 	.word	0x000f000a
 8007b74:	00060003 	.word	0x00060003
 8007b78:	00150019 	.word	0x00150019
 8007b7c:	00190015 	.word	0x00190015
 8007b80:	00030006 	.word	0x00030006
 8007b84:	000a000f 	.word	0x000a000f

08007b88 <D64_GENERIC>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	6913      	ldr	r3, [r2, #16]
 8007b8e:	b089      	sub	sp, #36	; 0x24
 8007b90:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	6953      	ldr	r3, [r2, #20]
 8007b96:	9105      	str	r1, [sp, #20]
 8007b98:	9303      	str	r3, [sp, #12]
 8007b9a:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8007b9c:	6993      	ldr	r3, [r2, #24]
 8007b9e:	69d4      	ldr	r4, [r2, #28]
 8007ba0:	9307      	str	r3, [sp, #28]
 8007ba2:	9504      	str	r5, [sp, #16]
 8007ba4:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	f000 80e8 	beq.w	8007d7e <D64_GENERIC+0x1f6>
 8007bae:	6a11      	ldr	r1, [r2, #32]
 8007bb0:	2500      	movs	r5, #0
 8007bb2:	46b3      	mov	fp, r6
 8007bb4:	9302      	str	r3, [sp, #8]
 8007bb6:	9106      	str	r1, [sp, #24]
 8007bb8:	4978      	ldr	r1, [pc, #480]	; (8007d9c <D64_GENERIC+0x214>)
 8007bba:	e0cc      	b.n	8007d56 <D64_GENERIC+0x1ce>
 8007bbc:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8007bc0:	f1ce 0c00 	rsb	ip, lr, #0
 8007bc4:	f890 9000 	ldrb.w	r9, [r0]
 8007bc8:	eb00 0708 	add.w	r7, r0, r8
 8007bcc:	f810 6008 	ldrb.w	r6, [r0, r8]
 8007bd0:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8007bd4:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007bd8:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8007bdc:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8007be0:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8007be4:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8007be8:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007bec:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8007bf0:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8007bf4:	0400      	lsls	r0, r0, #16
 8007bf6:	4467      	add	r7, ip
 8007bf8:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8007bfc:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8007c00:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8007c04:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8007c08:	444e      	add	r6, r9
 8007c0a:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8007c0e:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8007c12:	44c2      	add	sl, r8
 8007c14:	b2f7      	uxtb	r7, r6
 8007c16:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8007c1a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8007c1e:	0e36      	lsrs	r6, r6, #24
 8007c20:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007c24:	fa5f fc8a 	uxtb.w	ip, sl
 8007c28:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8007c2c:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8007c30:	443c      	add	r4, r7
 8007c32:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8007c36:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007c3a:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8007c3e:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8007c42:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007c46:	4b56      	ldr	r3, [pc, #344]	; (8007da0 <D64_GENERIC+0x218>)
 8007c48:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8007c4c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007c50:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8007c54:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8007c58:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007c5c:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8007c60:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8007c64:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8007c68:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007c6c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007c70:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007c74:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8007c78:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007c7c:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8007c80:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8007c84:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8007c88:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007c8c:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8007c90:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007c94:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8007c98:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8007c9c:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8007ca0:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8007ca4:	fb28 b903 	smlad	r9, r8, r3, fp
 8007ca8:	4b3e      	ldr	r3, [pc, #248]	; (8007da4 <D64_GENERIC+0x21c>)
 8007caa:	fb26 9903 	smlad	r9, r6, r3, r9
 8007cae:	4b3e      	ldr	r3, [pc, #248]	; (8007da8 <D64_GENERIC+0x220>)
 8007cb0:	fb2c 9703 	smlad	r7, ip, r3, r9
 8007cb4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8007cb8:	fb2a 7909 	smlad	r9, sl, r9, r7
 8007cbc:	4f3b      	ldr	r7, [pc, #236]	; (8007dac <D64_GENERIC+0x224>)
 8007cbe:	9b02      	ldr	r3, [sp, #8]
 8007cc0:	fb28 3307 	smlad	r3, r8, r7, r3
 8007cc4:	fb2a 3317 	smladx	r3, sl, r7, r3
 8007cc8:	4f39      	ldr	r7, [pc, #228]	; (8007db0 <D64_GENERIC+0x228>)
 8007cca:	fb26 3307 	smlad	r3, r6, r7, r3
 8007cce:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8007cd2:	f04f 0e01 	mov.w	lr, #1
 8007cd6:	fb28 f80e 	smuad	r8, r8, lr
 8007cda:	4b36      	ldr	r3, [pc, #216]	; (8007db4 <D64_GENERIC+0x22c>)
 8007cdc:	fb26 8603 	smlad	r6, r6, r3, r8
 8007ce0:	4b35      	ldr	r3, [pc, #212]	; (8007db8 <D64_GENERIC+0x230>)
 8007ce2:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8007ce6:	4b35      	ldr	r3, [pc, #212]	; (8007dbc <D64_GENERIC+0x234>)
 8007ce8:	fb2a c303 	smlad	r3, sl, r3, ip
 8007cec:	9f06      	ldr	r7, [sp, #24]
 8007cee:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8007cf2:	9302      	str	r3, [sp, #8]
 8007cf4:	b1cf      	cbz	r7, 8007d2a <D64_GENERIC+0x1a2>
 8007cf6:	9b00      	ldr	r3, [sp, #0]
 8007cf8:	444b      	add	r3, r9
 8007cfa:	461e      	mov	r6, r3
 8007cfc:	9b03      	ldr	r3, [sp, #12]
 8007cfe:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d02:	1af6      	subs	r6, r6, r3
 8007d04:	46b0      	mov	r8, r6
 8007d06:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8007d0a:	e9cd 8900 	strd	r8, r9, [sp]
 8007d0e:	fba6 8907 	umull	r8, r9, r6, r7
 8007d12:	9e01      	ldr	r6, [sp, #4]
 8007d14:	fb07 9306 	mla	r3, r7, r6, r9
 8007d18:	4646      	mov	r6, r8
 8007d1a:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8007d1e:	f143 0700 	adc.w	r7, r3, #0
 8007d22:	fa07 f30e 	lsl.w	r3, r7, lr
 8007d26:	4699      	mov	r9, r3
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8007d2e:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8007d32:	9b04      	ldr	r3, [sp, #16]
 8007d34:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007d38:	2700      	movs	r7, #0
 8007d3a:	fb05 fc0c 	mul.w	ip, r5, ip
 8007d3e:	3501      	adds	r5, #1
 8007d40:	fbc3 6709 	smlal	r6, r7, r3, r9
 8007d44:	9b05      	ldr	r3, [sp, #20]
 8007d46:	10be      	asrs	r6, r7, #2
 8007d48:	f306 060f 	ssat	r6, #16, r6
 8007d4c:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8007d50:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007d52:	42ae      	cmp	r6, r5
 8007d54:	dd11      	ble.n	8007d7a <D64_GENERIC+0x1f2>
 8007d56:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 8007d5a:	f1be 0f01 	cmp.w	lr, #1
 8007d5e:	f47f af2d 	bne.w	8007bbc <D64_GENERIC+0x34>
 8007d62:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8007d64:	f100 0c08 	add.w	ip, r0, #8
 8007d68:	06bb      	lsls	r3, r7, #26
 8007d6a:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8007d6e:	d513      	bpl.n	8007d98 <D64_GENERIC+0x210>
 8007d70:	ba76      	rev16	r6, r6
 8007d72:	fa9a fa9a 	rev16.w	sl, sl
 8007d76:	4660      	mov	r0, ip
 8007d78:	e74c      	b.n	8007c14 <D64_GENERIC+0x8c>
 8007d7a:	465e      	mov	r6, fp
 8007d7c:	9b02      	ldr	r3, [sp, #8]
 8007d7e:	6093      	str	r3, [r2, #8]
 8007d80:	2000      	movs	r0, #0
 8007d82:	9b00      	ldr	r3, [sp, #0]
 8007d84:	60d6      	str	r6, [r2, #12]
 8007d86:	6113      	str	r3, [r2, #16]
 8007d88:	9b03      	ldr	r3, [sp, #12]
 8007d8a:	61d4      	str	r4, [r2, #28]
 8007d8c:	6153      	str	r3, [r2, #20]
 8007d8e:	9b07      	ldr	r3, [sp, #28]
 8007d90:	6193      	str	r3, [r2, #24]
 8007d92:	b009      	add	sp, #36	; 0x24
 8007d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d98:	4660      	mov	r0, ip
 8007d9a:	e73b      	b.n	8007c14 <D64_GENERIC+0x8c>
 8007d9c:	24000000 	.word	0x24000000
 8007da0:	001c0015 	.word	0x001c0015
 8007da4:	000f000a 	.word	0x000f000a
 8007da8:	00060003 	.word	0x00060003
 8007dac:	0024002a 	.word	0x0024002a
 8007db0:	002e0030 	.word	0x002e0030
 8007db4:	00030006 	.word	0x00030006
 8007db8:	000a000f 	.word	0x000a000f
 8007dbc:	0015001c 	.word	0x0015001c

08007dc0 <D80_GENERIC>:
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	b08b      	sub	sp, #44	; 0x2c
 8007dc6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8007dc8:	9107      	str	r1, [sp, #28]
 8007dca:	6911      	ldr	r1, [r2, #16]
 8007dcc:	9104      	str	r1, [sp, #16]
 8007dce:	6951      	ldr	r1, [r2, #20]
 8007dd0:	9105      	str	r1, [sp, #20]
 8007dd2:	6991      	ldr	r1, [r2, #24]
 8007dd4:	9109      	str	r1, [sp, #36]	; 0x24
 8007dd6:	69d1      	ldr	r1, [r2, #28]
 8007dd8:	9102      	str	r1, [sp, #8]
 8007dda:	6891      	ldr	r1, [r2, #8]
 8007ddc:	9103      	str	r1, [sp, #12]
 8007dde:	68d1      	ldr	r1, [r2, #12]
 8007de0:	9101      	str	r1, [sp, #4]
 8007de2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007de4:	9106      	str	r1, [sp, #24]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 810b 	beq.w	8008002 <D80_GENERIC+0x242>
 8007dec:	6a13      	ldr	r3, [r2, #32]
 8007dee:	f04f 0800 	mov.w	r8, #0
 8007df2:	f8df c260 	ldr.w	ip, [pc, #608]	; 8008054 <D80_GENERIC+0x294>
 8007df6:	9308      	str	r3, [sp, #32]
 8007df8:	9200      	str	r2, [sp, #0]
 8007dfa:	e0ee      	b.n	8007fda <D80_GENERIC+0x21a>
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	f890 e000 	ldrb.w	lr, [r0]
 8007e02:	b219      	sxth	r1, r3
 8007e04:	425c      	negs	r4, r3
 8007e06:	f810 9003 	ldrb.w	r9, [r0, r3]
 8007e0a:	004e      	lsls	r6, r1, #1
 8007e0c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8007e10:	4431      	add	r1, r6
 8007e12:	1843      	adds	r3, r0, r1
 8007e14:	f810 b001 	ldrb.w	fp, [r0, r1]
 8007e18:	1919      	adds	r1, r3, r4
 8007e1a:	5d1b      	ldrb	r3, [r3, r4]
 8007e1c:	1948      	adds	r0, r1, r5
 8007e1e:	f811 a005 	ldrb.w	sl, [r1, r5]
 8007e22:	041b      	lsls	r3, r3, #16
 8007e24:	1907      	adds	r7, r0, r4
 8007e26:	5d01      	ldrb	r1, [r0, r4]
 8007e28:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007e2c:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8007e30:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8007e34:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8007e38:	0409      	lsls	r1, r1, #16
 8007e3a:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8007e3e:	eb0b 0905 	add.w	r9, fp, r5
 8007e42:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8007e46:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8007e4a:	eb09 0b04 	add.w	fp, r9, r4
 8007e4e:	f819 4004 	ldrb.w	r4, [r9, r4]
 8007e52:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007e56:	4473      	add	r3, lr
 8007e58:	eb0b 0006 	add.w	r0, fp, r6
 8007e5c:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8007e60:	4439      	add	r1, r7
 8007e62:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8007e66:	b2df      	uxtb	r7, r3
 8007e68:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8007e6c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8007e70:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8007e74:	fa5f fa81 	uxtb.w	sl, r1
 8007e78:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8007e7c:	9c02      	ldr	r4, [sp, #8]
 8007e7e:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8007e82:	441c      	add	r4, r3
 8007e84:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8007e88:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8007e8c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8007e90:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007e94:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8007e98:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8007e9c:	b2ed      	uxtb	r5, r5
 8007e9e:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8007ea2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007ea6:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8007eaa:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8007eae:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8007eb2:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8007eb6:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8007eba:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007ebe:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8007ec2:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8007ec6:	0e09      	lsrs	r1, r1, #24
 8007ec8:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8007ecc:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007ed0:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007ed4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007ed8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007edc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007ee0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007ee4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007ee8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007eec:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8007ef0:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8007ef4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007ef8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8007efc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007f00:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007f04:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8007f08:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8007f0c:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8007f10:	9202      	str	r2, [sp, #8]
 8007f12:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8007f16:	4a43      	ldr	r2, [pc, #268]	; (8008024 <D80_GENERIC+0x264>)
 8007f18:	9f01      	ldr	r7, [sp, #4]
 8007f1a:	fb23 7a02 	smlad	sl, r3, r2, r7
 8007f1e:	4a42      	ldr	r2, [pc, #264]	; (8008028 <D80_GENERIC+0x268>)
 8007f20:	fb26 aa02 	smlad	sl, r6, r2, sl
 8007f24:	4a41      	ldr	r2, [pc, #260]	; (800802c <D80_GENERIC+0x26c>)
 8007f26:	fb24 aa02 	smlad	sl, r4, r2, sl
 8007f2a:	4a41      	ldr	r2, [pc, #260]	; (8008030 <D80_GENERIC+0x270>)
 8007f2c:	fb21 a702 	smlad	r7, r1, r2, sl
 8007f30:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8007f34:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8007f38:	4a3e      	ldr	r2, [pc, #248]	; (8008034 <D80_GENERIC+0x274>)
 8007f3a:	9f03      	ldr	r7, [sp, #12]
 8007f3c:	fb23 7e02 	smlad	lr, r3, r2, r7
 8007f40:	4a3d      	ldr	r2, [pc, #244]	; (8008038 <D80_GENERIC+0x278>)
 8007f42:	fb26 ee02 	smlad	lr, r6, r2, lr
 8007f46:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8007f4a:	fb24 e707 	smlad	r7, r4, r7, lr
 8007f4e:	4a3b      	ldr	r2, [pc, #236]	; (800803c <D80_GENERIC+0x27c>)
 8007f50:	fb21 7702 	smlad	r7, r1, r2, r7
 8007f54:	4a3a      	ldr	r2, [pc, #232]	; (8008040 <D80_GENERIC+0x280>)
 8007f56:	fb25 7202 	smlad	r2, r5, r2, r7
 8007f5a:	f04f 0901 	mov.w	r9, #1
 8007f5e:	9201      	str	r2, [sp, #4]
 8007f60:	fb23 f909 	smuad	r9, r3, r9
 8007f64:	4b37      	ldr	r3, [pc, #220]	; (8008044 <D80_GENERIC+0x284>)
 8007f66:	fb26 9603 	smlad	r6, r6, r3, r9
 8007f6a:	4f37      	ldr	r7, [pc, #220]	; (8008048 <D80_GENERIC+0x288>)
 8007f6c:	fb24 6407 	smlad	r4, r4, r7, r6
 8007f70:	4f36      	ldr	r7, [pc, #216]	; (800804c <D80_GENERIC+0x28c>)
 8007f72:	fb21 4707 	smlad	r7, r1, r7, r4
 8007f76:	4936      	ldr	r1, [pc, #216]	; (8008050 <D80_GENERIC+0x290>)
 8007f78:	fb25 7301 	smlad	r3, r5, r1, r7
 8007f7c:	9303      	str	r3, [sp, #12]
 8007f7e:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8007f82:	9b08      	ldr	r3, [sp, #32]
 8007f84:	b193      	cbz	r3, 8007fac <D80_GENERIC+0x1ec>
 8007f86:	9a04      	ldr	r2, [sp, #16]
 8007f88:	4452      	add	r2, sl
 8007f8a:	4614      	mov	r4, r2
 8007f8c:	9a05      	ldr	r2, [sp, #20]
 8007f8e:	f8cd a014 	str.w	sl, [sp, #20]
 8007f92:	1aa4      	subs	r4, r4, r2
 8007f94:	fba4 1203 	umull	r1, r2, r4, r3
 8007f98:	17e7      	asrs	r7, r4, #31
 8007f9a:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8007f9e:	fb03 2207 	mla	r2, r3, r7, r2
 8007fa2:	f142 0500 	adc.w	r5, r2, #0
 8007fa6:	006b      	lsls	r3, r5, #1
 8007fa8:	469a      	mov	sl, r3
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	9e00      	ldr	r6, [sp, #0]
 8007fae:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8007fb2:	9a06      	ldr	r2, [sp, #24]
 8007fb4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007fb8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8007fba:	2500      	movs	r5, #0
 8007fbc:	fb08 f303 	mul.w	r3, r8, r3
 8007fc0:	fbc2 450a 	smlal	r4, r5, r2, sl
 8007fc4:	9a07      	ldr	r2, [sp, #28]
 8007fc6:	f108 0801 	add.w	r8, r8, #1
 8007fca:	10a9      	asrs	r1, r5, #2
 8007fcc:	f301 010f 	ssat	r1, #16, r1
 8007fd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007fd4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8007fd6:	4543      	cmp	r3, r8
 8007fd8:	dd12      	ble.n	8008000 <D80_GENERIC+0x240>
 8007fda:	9b00      	ldr	r3, [sp, #0]
 8007fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	f47f af0c 	bne.w	8007dfc <D80_GENERIC+0x3c>
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	6885      	ldr	r5, [r0, #8]
 8007fe8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007fea:	06b2      	lsls	r2, r6, #26
 8007fec:	e9d0 3100 	ldrd	r3, r1, [r0]
 8007ff0:	f100 000a 	add.w	r0, r0, #10
 8007ff4:	f57f af35 	bpl.w	8007e62 <D80_GENERIC+0xa2>
 8007ff8:	ba5b      	rev16	r3, r3
 8007ffa:	ba49      	rev16	r1, r1
 8007ffc:	ba6d      	rev16	r5, r5
 8007ffe:	e730      	b.n	8007e62 <D80_GENERIC+0xa2>
 8008000:	4632      	mov	r2, r6
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	2000      	movs	r0, #0
 8008006:	6093      	str	r3, [r2, #8]
 8008008:	9b01      	ldr	r3, [sp, #4]
 800800a:	60d3      	str	r3, [r2, #12]
 800800c:	9b02      	ldr	r3, [sp, #8]
 800800e:	61d3      	str	r3, [r2, #28]
 8008010:	9b04      	ldr	r3, [sp, #16]
 8008012:	6113      	str	r3, [r2, #16]
 8008014:	9b05      	ldr	r3, [sp, #20]
 8008016:	6153      	str	r3, [r2, #20]
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	6193      	str	r3, [r2, #24]
 800801c:	b00b      	add	sp, #44	; 0x2c
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	bf00      	nop
 8008024:	002d0024 	.word	0x002d0024
 8008028:	001c0015 	.word	0x001c0015
 800802c:	000f000a 	.word	0x000f000a
 8008030:	00060003 	.word	0x00060003
 8008034:	0037003f 	.word	0x0037003f
 8008038:	00450049 	.word	0x00450049
 800803c:	00490045 	.word	0x00490045
 8008040:	003f0037 	.word	0x003f0037
 8008044:	00030006 	.word	0x00030006
 8008048:	000a000f 	.word	0x000a000f
 800804c:	0015001c 	.word	0x0015001c
 8008050:	0024002d 	.word	0x0024002d
 8008054:	24000000 	.word	0x24000000

08008058 <D128_GENERIC>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	b08d      	sub	sp, #52	; 0x34
 800805e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008060:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8008064:	9109      	str	r1, [sp, #36]	; 0x24
 8008066:	6911      	ldr	r1, [r2, #16]
 8008068:	9201      	str	r2, [sp, #4]
 800806a:	9106      	str	r1, [sp, #24]
 800806c:	6951      	ldr	r1, [r2, #20]
 800806e:	9107      	str	r1, [sp, #28]
 8008070:	6991      	ldr	r1, [r2, #24]
 8008072:	910b      	str	r1, [sp, #44]	; 0x2c
 8008074:	6891      	ldr	r1, [r2, #8]
 8008076:	9103      	str	r1, [sp, #12]
 8008078:	68d1      	ldr	r1, [r2, #12]
 800807a:	9102      	str	r1, [sp, #8]
 800807c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800807e:	9108      	str	r1, [sp, #32]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8183 	beq.w	800838c <D128_GENERIC+0x334>
 8008086:	2300      	movs	r3, #0
 8008088:	6a12      	ldr	r2, [r2, #32]
 800808a:	4681      	mov	r9, r0
 800808c:	920a      	str	r2, [sp, #40]	; 0x28
 800808e:	e9cd a304 	strd	sl, r3, [sp, #16]
 8008092:	e165      	b.n	8008360 <D128_GENERIC+0x308>
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	f899 b000 	ldrb.w	fp, [r9]
 800809a:	b213      	sxth	r3, r2
 800809c:	4255      	negs	r5, r2
 800809e:	f819 0002 	ldrb.w	r0, [r9, r2]
 80080a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80080a6:	009f      	lsls	r7, r3, #2
 80080a8:	eb09 0402 	add.w	r4, r9, r2
 80080ac:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 80080b0:	f819 8002 	ldrb.w	r8, [r9, r2]
 80080b4:	443b      	add	r3, r7
 80080b6:	1962      	adds	r2, r4, r5
 80080b8:	5d64      	ldrb	r4, [r4, r5]
 80080ba:	eb02 0c03 	add.w	ip, r2, r3
 80080be:	0424      	lsls	r4, r4, #16
 80080c0:	5cd3      	ldrb	r3, [r2, r3]
 80080c2:	eb0c 0e05 	add.w	lr, ip, r5
 80080c6:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 80080ca:	f81c 2005 	ldrb.w	r2, [ip, r5]
 80080ce:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 80080d2:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 80080d6:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 80080da:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 80080de:	eb0c 0e06 	add.w	lr, ip, r6
 80080e2:	f81c a006 	ldrb.w	sl, [ip, r6]
 80080e6:	0412      	lsls	r2, r2, #16
 80080e8:	445c      	add	r4, fp
 80080ea:	eb0e 0c05 	add.w	ip, lr, r5
 80080ee:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 80080f2:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80080f6:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 80080fa:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80080fe:	041b      	lsls	r3, r3, #16
 8008100:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8008104:	eb00 0b06 	add.w	fp, r0, r6
 8008108:	5d80      	ldrb	r0, [r0, r6]
 800810a:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800810e:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8008112:	eb0b 0a05 	add.w	sl, fp, r5
 8008116:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800811a:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800811e:	0436      	lsls	r6, r6, #16
 8008120:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8008124:	4442      	add	r2, r8
 8008126:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800812a:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800812e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8008132:	44b9      	add	r9, r7
 8008134:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8008138:	4463      	add	r3, ip
 800813a:	eb06 0508 	add.w	r5, r6, r8
 800813e:	b2e7      	uxtb	r7, r4
 8008140:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8008144:	499b      	ldr	r1, [pc, #620]	; (80083b4 <D128_GENERIC+0x35c>)
 8008146:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800814a:	0e24      	lsrs	r4, r4, #24
 800814c:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8008150:	b2d7      	uxtb	r7, r2
 8008152:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8008156:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800815a:	9904      	ldr	r1, [sp, #16]
 800815c:	4461      	add	r1, ip
 800815e:	468c      	mov	ip, r1
 8008160:	4994      	ldr	r1, [pc, #592]	; (80083b4 <D128_GENERIC+0x35c>)
 8008162:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8008166:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800816a:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800816e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008172:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8008176:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800817a:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800817e:	0e12      	lsrs	r2, r2, #24
 8008180:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8008184:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008188:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800818c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008190:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8008194:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008198:	b2da      	uxtb	r2, r3
 800819a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800819e:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 80081a2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80081a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80081aa:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 80081ae:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 80081b2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80081b6:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 80081ba:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80081be:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 80081c2:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 80081c6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80081ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80081ce:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80081d2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80081d6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80081da:	0e1b      	lsrs	r3, r3, #24
 80081dc:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 80081e0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80081e4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80081e8:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 80081ec:	b2eb      	uxtb	r3, r5
 80081ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80081f2:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 80081f6:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80081fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081fe:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8008202:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8008206:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800820a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800820e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008212:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8008216:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800821a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800821e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8008222:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008226:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800822a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800822e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008232:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8008236:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800823a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800823e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008242:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8008246:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800824a:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800824e:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8008252:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8008256:	9104      	str	r1, [sp, #16]
 8008258:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800825c:	9902      	ldr	r1, [sp, #8]
 800825e:	4a56      	ldr	r2, [pc, #344]	; (80083b8 <D128_GENERIC+0x360>)
 8008260:	fb2b 1202 	smlad	r2, fp, r2, r1
 8008264:	4955      	ldr	r1, [pc, #340]	; (80083bc <D128_GENERIC+0x364>)
 8008266:	fb28 2201 	smlad	r2, r8, r1, r2
 800826a:	4955      	ldr	r1, [pc, #340]	; (80083c0 <D128_GENERIC+0x368>)
 800826c:	fb27 2201 	smlad	r2, r7, r1, r2
 8008270:	4954      	ldr	r1, [pc, #336]	; (80083c4 <D128_GENERIC+0x36c>)
 8008272:	fb26 2201 	smlad	r2, r6, r1, r2
 8008276:	4954      	ldr	r1, [pc, #336]	; (80083c8 <D128_GENERIC+0x370>)
 8008278:	fb24 2201 	smlad	r2, r4, r1, r2
 800827c:	4953      	ldr	r1, [pc, #332]	; (80083cc <D128_GENERIC+0x374>)
 800827e:	fb20 2201 	smlad	r2, r0, r1, r2
 8008282:	4953      	ldr	r1, [pc, #332]	; (80083d0 <D128_GENERIC+0x378>)
 8008284:	fb23 2201 	smlad	r2, r3, r1, r2
 8008288:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800828c:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8008290:	4950      	ldr	r1, [pc, #320]	; (80083d4 <D128_GENERIC+0x37c>)
 8008292:	9a03      	ldr	r2, [sp, #12]
 8008294:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8008298:	4a4f      	ldr	r2, [pc, #316]	; (80083d8 <D128_GENERIC+0x380>)
 800829a:	fb28 ce02 	smlad	lr, r8, r2, ip
 800829e:	f8df c150 	ldr.w	ip, [pc, #336]	; 80083f0 <D128_GENERIC+0x398>
 80082a2:	fb27 ec0c 	smlad	ip, r7, ip, lr
 80082a6:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80083f4 <D128_GENERIC+0x39c>
 80082aa:	fb26 cc0e 	smlad	ip, r6, lr, ip
 80082ae:	f8df e148 	ldr.w	lr, [pc, #328]	; 80083f8 <D128_GENERIC+0x3a0>
 80082b2:	fb24 ce0e 	smlad	lr, r4, lr, ip
 80082b6:	f8df c144 	ldr.w	ip, [pc, #324]	; 80083fc <D128_GENERIC+0x3a4>
 80082ba:	fb20 ee0c 	smlad	lr, r0, ip, lr
 80082be:	f8df c140 	ldr.w	ip, [pc, #320]	; 8008400 <D128_GENERIC+0x3a8>
 80082c2:	fb23 ec0c 	smlad	ip, r3, ip, lr
 80082c6:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8008404 <D128_GENERIC+0x3ac>
 80082ca:	fb25 c20e 	smlad	r2, r5, lr, ip
 80082ce:	f04f 0c01 	mov.w	ip, #1
 80082d2:	9202      	str	r2, [sp, #8]
 80082d4:	fb2b fb0c 	smuad	fp, fp, ip
 80082d8:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8008408 <D128_GENERIC+0x3b0>
 80082dc:	fb28 bb0c 	smlad	fp, r8, ip, fp
 80082e0:	f8df c128 	ldr.w	ip, [pc, #296]	; 800840c <D128_GENERIC+0x3b4>
 80082e4:	fb27 bb0c 	smlad	fp, r7, ip, fp
 80082e8:	4f3c      	ldr	r7, [pc, #240]	; (80083dc <D128_GENERIC+0x384>)
 80082ea:	fb26 bb07 	smlad	fp, r6, r7, fp
 80082ee:	4f3c      	ldr	r7, [pc, #240]	; (80083e0 <D128_GENERIC+0x388>)
 80082f0:	fb24 bb07 	smlad	fp, r4, r7, fp
 80082f4:	4f3b      	ldr	r7, [pc, #236]	; (80083e4 <D128_GENERIC+0x38c>)
 80082f6:	fb20 bb07 	smlad	fp, r0, r7, fp
 80082fa:	4f3b      	ldr	r7, [pc, #236]	; (80083e8 <D128_GENERIC+0x390>)
 80082fc:	fb23 bb07 	smlad	fp, r3, r7, fp
 8008300:	4b3a      	ldr	r3, [pc, #232]	; (80083ec <D128_GENERIC+0x394>)
 8008302:	fb25 b303 	smlad	r3, r5, r3, fp
 8008306:	9303      	str	r3, [sp, #12]
 8008308:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800830c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800830e:	b183      	cbz	r3, 8008332 <D128_GENERIC+0x2da>
 8008310:	9a06      	ldr	r2, [sp, #24]
 8008312:	9907      	ldr	r1, [sp, #28]
 8008314:	4422      	add	r2, r4
 8008316:	9407      	str	r4, [sp, #28]
 8008318:	1a52      	subs	r2, r2, r1
 800831a:	fba2 0103 	umull	r0, r1, r2, r3
 800831e:	17d5      	asrs	r5, r2, #31
 8008320:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8008324:	fb03 1105 	mla	r1, r3, r5, r1
 8008328:	f141 0300 	adc.w	r3, r1, #0
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	461c      	mov	r4, r3
 8008330:	9306      	str	r3, [sp, #24]
 8008332:	9d01      	ldr	r5, [sp, #4]
 8008334:	01e4      	lsls	r4, r4, #7
 8008336:	9e05      	ldr	r6, [sp, #20]
 8008338:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800833c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800833e:	2300      	movs	r3, #0
 8008340:	9908      	ldr	r1, [sp, #32]
 8008342:	fb06 f000 	mul.w	r0, r6, r0
 8008346:	3601      	adds	r6, #1
 8008348:	fbc1 2304 	smlal	r2, r3, r1, r4
 800834c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800834e:	109b      	asrs	r3, r3, #2
 8008350:	9605      	str	r6, [sp, #20]
 8008352:	f303 030f 	ssat	r3, #16, r3
 8008356:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800835a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800835c:	42b3      	cmp	r3, r6
 800835e:	dd13      	ble.n	8008388 <D128_GENERIC+0x330>
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008364:	2a01      	cmp	r2, #1
 8008366:	f47f ae95 	bne.w	8008094 <D128_GENERIC+0x3c>
 800836a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800836c:	f109 0610 	add.w	r6, r9, #16
 8008370:	0681      	lsls	r1, r0, #26
 8008372:	e9d9 4200 	ldrd	r4, r2, [r9]
 8008376:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800837a:	d518      	bpl.n	80083ae <D128_GENERIC+0x356>
 800837c:	ba64      	rev16	r4, r4
 800837e:	ba52      	rev16	r2, r2
 8008380:	ba5b      	rev16	r3, r3
 8008382:	ba6d      	rev16	r5, r5
 8008384:	46b1      	mov	r9, r6
 8008386:	e6da      	b.n	800813e <D128_GENERIC+0xe6>
 8008388:	f8dd a010 	ldr.w	sl, [sp, #16]
 800838c:	9b01      	ldr	r3, [sp, #4]
 800838e:	2000      	movs	r0, #0
 8008390:	9903      	ldr	r1, [sp, #12]
 8008392:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008394:	6099      	str	r1, [r3, #8]
 8008396:	9902      	ldr	r1, [sp, #8]
 8008398:	f8c3 a01c 	str.w	sl, [r3, #28]
 800839c:	60d9      	str	r1, [r3, #12]
 800839e:	9906      	ldr	r1, [sp, #24]
 80083a0:	619a      	str	r2, [r3, #24]
 80083a2:	6119      	str	r1, [r3, #16]
 80083a4:	9907      	ldr	r1, [sp, #28]
 80083a6:	6159      	str	r1, [r3, #20]
 80083a8:	b00d      	add	sp, #52	; 0x34
 80083aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ae:	46b1      	mov	r9, r6
 80083b0:	e6c5      	b.n	800813e <D128_GENERIC+0xe6>
 80083b2:	bf00      	nop
 80083b4:	24000000 	.word	0x24000000
 80083b8:	00780069 	.word	0x00780069
 80083bc:	005b004e 	.word	0x005b004e
 80083c0:	00420037 	.word	0x00420037
 80083c4:	002d0024 	.word	0x002d0024
 80083c8:	001c0015 	.word	0x001c0015
 80083cc:	000f000a 	.word	0x000f000a
 80083d0:	00060003 	.word	0x00060003
 80083d4:	00880096 	.word	0x00880096
 80083d8:	00a200ac 	.word	0x00a200ac
 80083dc:	0015001c 	.word	0x0015001c
 80083e0:	0024002d 	.word	0x0024002d
 80083e4:	00370042 	.word	0x00370042
 80083e8:	004e005b 	.word	0x004e005b
 80083ec:	00690078 	.word	0x00690078
 80083f0:	00b400ba 	.word	0x00b400ba
 80083f4:	00be00c0 	.word	0x00be00c0
 80083f8:	00c000be 	.word	0x00c000be
 80083fc:	00ba00b4 	.word	0x00ba00b4
 8008400:	00ac00a2 	.word	0x00ac00a2
 8008404:	00960088 	.word	0x00960088
 8008408:	00030006 	.word	0x00030006
 800840c:	000a000f 	.word	0x000a000f

08008410 <D16_1CH_HTONS_VOL_HP>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	6993      	ldr	r3, [r2, #24]
 8008416:	b087      	sub	sp, #28
 8008418:	4682      	mov	sl, r0
 800841a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8008422:	69d3      	ldr	r3, [r2, #28]
 8008424:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8008428:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800842c:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8008430:	9403      	str	r4, [sp, #12]
 8008432:	2800      	cmp	r0, #0
 8008434:	d054      	beq.n	80084e0 <D16_1CH_HTONS_VOL_HP+0xd0>
 8008436:	f1a1 0902 	sub.w	r9, r1, #2
 800843a:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800843e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80084ec <D16_1CH_HTONS_VOL_HP+0xdc>
 8008442:	4650      	mov	r0, sl
 8008444:	9101      	str	r1, [sp, #4]
 8008446:	4619      	mov	r1, r3
 8008448:	f8cd b008 	str.w	fp, [sp, #8]
 800844c:	9205      	str	r2, [sp, #20]
 800844e:	f850 3b02 	ldr.w	r3, [r0], #2
 8008452:	ba5b      	rev16	r3, r3
 8008454:	b2dc      	uxtb	r4, r3
 8008456:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800845a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800845e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8008462:	4419      	add	r1, r3
 8008464:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8008468:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800846c:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8008470:	0aa1      	lsrs	r1, r4, #10
 8008472:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008476:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8008478:	fb23 5402 	smlad	r4, r3, r2, r5
 800847c:	4a1a      	ldr	r2, [pc, #104]	; (80084e8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800847e:	fb23 f502 	smuad	r5, r3, r2
 8008482:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8008486:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800848a:	f04f 0b00 	mov.w	fp, #0
 800848e:	19a2      	adds	r2, r4, r6
 8008490:	eba2 020c 	sub.w	r2, r2, ip
 8008494:	46a4      	mov	ip, r4
 8008496:	17d7      	asrs	r7, r2, #31
 8008498:	fba2 230e 	umull	r2, r3, r2, lr
 800849c:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 80084a0:	fb0e 3307 	mla	r3, lr, r7, r3
 80084a4:	f143 0700 	adc.w	r7, r3, #0
 80084a8:	9b02      	ldr	r3, [sp, #8]
 80084aa:	047a      	lsls	r2, r7, #17
 80084ac:	007e      	lsls	r6, r7, #1
 80084ae:	fbc3 ab02 	smlal	sl, fp, r3, r2
 80084b2:	ea4f 03ab 	mov.w	r3, fp, asr #2
 80084b6:	f303 030f 	ssat	r3, #16, r3
 80084ba:	f829 3f02 	strh.w	r3, [r9, #2]!
 80084be:	9b01      	ldr	r3, [sp, #4]
 80084c0:	4298      	cmp	r0, r3
 80084c2:	d1c4      	bne.n	800844e <D16_1CH_HTONS_VOL_HP+0x3e>
 80084c4:	460b      	mov	r3, r1
 80084c6:	9a05      	ldr	r2, [sp, #20]
 80084c8:	2000      	movs	r0, #0
 80084ca:	9903      	ldr	r1, [sp, #12]
 80084cc:	61d3      	str	r3, [r2, #28]
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	6095      	str	r5, [r2, #8]
 80084d2:	60d1      	str	r1, [r2, #12]
 80084d4:	6193      	str	r3, [r2, #24]
 80084d6:	e9c2 6404 	strd	r6, r4, [r2, #16]
 80084da:	b007      	add	sp, #28
 80084dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e0:	4664      	mov	r4, ip
 80084e2:	e7f1      	b.n	80084c8 <D16_1CH_HTONS_VOL_HP+0xb8>
 80084e4:	00030001 	.word	0x00030001
 80084e8:	00010003 	.word	0x00010003
 80084ec:	24000000 	.word	0x24000000

080084f0 <D24_1CH_HTONS_VOL_HP>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80084f6:	b089      	sub	sp, #36	; 0x24
 80084f8:	6993      	ldr	r3, [r2, #24]
 80084fa:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80084fc:	9604      	str	r6, [sp, #16]
 80084fe:	6a16      	ldr	r6, [r2, #32]
 8008500:	9306      	str	r3, [sp, #24]
 8008502:	9505      	str	r5, [sp, #20]
 8008504:	69d3      	ldr	r3, [r2, #28]
 8008506:	9600      	str	r6, [sp, #0]
 8008508:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800850c:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8008510:	2d00      	cmp	r5, #0
 8008512:	f000 8083 	beq.w	800861c <D24_1CH_HTONS_VOL_HP+0x12c>
 8008516:	9207      	str	r2, [sp, #28]
 8008518:	2600      	movs	r6, #0
 800851a:	4622      	mov	r2, r4
 800851c:	f1a1 0b02 	sub.w	fp, r1, #2
 8008520:	4f3f      	ldr	r7, [pc, #252]	; (8008620 <D24_1CH_HTONS_VOL_HP+0x130>)
 8008522:	461d      	mov	r5, r3
 8008524:	f8cd a00c 	str.w	sl, [sp, #12]
 8008528:	9c00      	ldr	r4, [sp, #0]
 800852a:	e056      	b.n	80085da <D24_1CH_HTONS_VOL_HP+0xea>
 800852c:	7841      	ldrb	r1, [r0, #1]
 800852e:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8008532:	3002      	adds	r0, #2
 8008534:	4488      	add	r8, r1
 8008536:	fa5f f388 	uxtb.w	r3, r8
 800853a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800853e:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8008542:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8008546:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800854a:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800854e:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8008552:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008556:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800855a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800855e:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008566:	492f      	ldr	r1, [pc, #188]	; (8008624 <D24_1CH_HTONS_VOL_HP+0x134>)
 8008568:	fb23 e901 	smlad	r9, r3, r1, lr
 800856c:	492e      	ldr	r1, [pc, #184]	; (8008628 <D24_1CH_HTONS_VOL_HP+0x138>)
 800856e:	fb23 ce01 	smlad	lr, r3, r1, ip
 8008572:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8008576:	2101      	movs	r1, #1
 8008578:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800857c:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8008580:	fb23 f301 	smuad	r3, r3, r1
 8008584:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8008588:	eb08 0c03 	add.w	ip, r8, r3
 800858c:	9b03      	ldr	r3, [sp, #12]
 800858e:	f04f 0a00 	mov.w	sl, #0
 8008592:	440a      	add	r2, r1
 8008594:	3601      	adds	r6, #1
 8008596:	9103      	str	r1, [sp, #12]
 8008598:	1ad2      	subs	r2, r2, r3
 800859a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800859e:	fba2 2304 	umull	r2, r3, r2, r4
 80085a2:	e9cd 2300 	strd	r2, r3, [sp]
 80085a6:	fb04 3309 	mla	r3, r4, r9, r3
 80085aa:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085b4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80085b8:	f143 0300 	adc.w	r3, r3, #0
 80085bc:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 80085c0:	005a      	lsls	r2, r3, #1
 80085c2:	9b04      	ldr	r3, [sp, #16]
 80085c4:	fbc3 9a08 	smlal	r9, sl, r3, r8
 80085c8:	ea4f 03aa 	mov.w	r3, sl, asr #2
 80085cc:	f303 030f 	ssat	r3, #16, r3
 80085d0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 80085d4:	9b05      	ldr	r3, [sp, #20]
 80085d6:	429e      	cmp	r6, r3
 80085d8:	d010      	beq.n	80085fc <D24_1CH_HTONS_VOL_HP+0x10c>
 80085da:	f890 9003 	ldrb.w	r9, [r0, #3]
 80085de:	f016 0f01 	tst.w	r6, #1
 80085e2:	7801      	ldrb	r1, [r0, #0]
 80085e4:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80085e8:	ea4f 2801 	mov.w	r8, r1, lsl #8
 80085ec:	d09e      	beq.n	800852c <D24_1CH_HTONS_VOL_HP+0x3c>
 80085ee:	f890 8002 	ldrb.w	r8, [r0, #2]
 80085f2:	3004      	adds	r0, #4
 80085f4:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 80085f8:	4488      	add	r8, r1
 80085fa:	e79c      	b.n	8008536 <D24_1CH_HTONS_VOL_HP+0x46>
 80085fc:	4614      	mov	r4, r2
 80085fe:	462b      	mov	r3, r5
 8008600:	9a07      	ldr	r2, [sp, #28]
 8008602:	2000      	movs	r0, #0
 8008604:	61d3      	str	r3, [r2, #28]
 8008606:	9b06      	ldr	r3, [sp, #24]
 8008608:	f8c2 c008 	str.w	ip, [r2, #8]
 800860c:	f8c2 e00c 	str.w	lr, [r2, #12]
 8008610:	6193      	str	r3, [r2, #24]
 8008612:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8008616:	b009      	add	sp, #36	; 0x24
 8008618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861c:	4651      	mov	r1, sl
 800861e:	e7f0      	b.n	8008602 <D24_1CH_HTONS_VOL_HP+0x112>
 8008620:	24000000 	.word	0x24000000
 8008624:	00030001 	.word	0x00030001
 8008628:	00060007 	.word	0x00060007

0800862c <D32_1CH_HTONS_VOL_HP>:
 800862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008630:	6993      	ldr	r3, [r2, #24]
 8008632:	b087      	sub	sp, #28
 8008634:	4683      	mov	fp, r0
 8008636:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	69d5      	ldr	r5, [r2, #28]
 800863c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800863e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8008642:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8008646:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800864a:	2800      	cmp	r0, #0
 800864c:	d077      	beq.n	800873e <D32_1CH_HTONS_VOL_HP+0x112>
 800864e:	460f      	mov	r7, r1
 8008650:	46f1      	mov	r9, lr
 8008652:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008656:	f8cd 8000 	str.w	r8, [sp]
 800865a:	4e3a      	ldr	r6, [pc, #232]	; (8008744 <D32_1CH_HTONS_VOL_HP+0x118>)
 800865c:	469e      	mov	lr, r3
 800865e:	46a0      	mov	r8, r4
 8008660:	9103      	str	r1, [sp, #12]
 8008662:	9205      	str	r2, [sp, #20]
 8008664:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008668:	ba64      	rev16	r4, r4
 800866a:	b2e0      	uxtb	r0, r4
 800866c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008670:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008674:	0e24      	lsrs	r4, r4, #24
 8008676:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800867a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800867e:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8008682:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008686:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800868a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800868e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008692:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8008696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800869a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800869e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80086a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086a6:	f3c5 0009 	ubfx	r0, r5, #0, #10
 80086aa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80086ae:	4826      	ldr	r0, [pc, #152]	; (8008748 <D32_1CH_HTONS_VOL_HP+0x11c>)
 80086b0:	fb23 c400 	smlad	r4, r3, r0, ip
 80086b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80086b8:	fb21 4402 	smlad	r4, r1, r2, r4
 80086bc:	4823      	ldr	r0, [pc, #140]	; (800874c <D32_1CH_HTONS_VOL_HP+0x120>)
 80086be:	fb23 ec00 	smlad	ip, r3, r0, lr
 80086c2:	4823      	ldr	r0, [pc, #140]	; (8008750 <D32_1CH_HTONS_VOL_HP+0x124>)
 80086c4:	fb21 cc00 	smlad	ip, r1, r0, ip
 80086c8:	2201      	movs	r2, #1
 80086ca:	fb23 f302 	smuad	r3, r3, r2
 80086ce:	4821      	ldr	r0, [pc, #132]	; (8008754 <D32_1CH_HTONS_VOL_HP+0x128>)
 80086d0:	fb21 3e00 	smlad	lr, r1, r0, r3
 80086d4:	9b00      	ldr	r3, [sp, #0]
 80086d6:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 80086da:	4423      	add	r3, r4
 80086dc:	eba3 0209 	sub.w	r2, r3, r9
 80086e0:	46a1      	mov	r9, r4
 80086e2:	17d1      	asrs	r1, r2, #31
 80086e4:	fba2 230a 	umull	r2, r3, r2, sl
 80086e8:	e9cd 2300 	strd	r2, r3, [sp]
 80086ec:	fb0a 3301 	mla	r3, sl, r1, r3
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086f6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80086fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086fe:	f143 0300 	adc.w	r3, r3, #0
 8008702:	0399      	lsls	r1, r3, #14
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	2300      	movs	r3, #0
 800870a:	fbc8 2301 	smlal	r2, r3, r8, r1
 800870e:	109b      	asrs	r3, r3, #2
 8008710:	f303 030f 	ssat	r3, #16, r3
 8008714:	f827 3b02 	strh.w	r3, [r7], #2
 8008718:	9b03      	ldr	r3, [sp, #12]
 800871a:	429f      	cmp	r7, r3
 800871c:	d1a2      	bne.n	8008664 <D32_1CH_HTONS_VOL_HP+0x38>
 800871e:	4673      	mov	r3, lr
 8008720:	f8dd 8000 	ldr.w	r8, [sp]
 8008724:	9a05      	ldr	r2, [sp, #20]
 8008726:	6093      	str	r3, [r2, #8]
 8008728:	2000      	movs	r0, #0
 800872a:	9b04      	ldr	r3, [sp, #16]
 800872c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008730:	61d5      	str	r5, [r2, #28]
 8008732:	6193      	str	r3, [r2, #24]
 8008734:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8008738:	b007      	add	sp, #28
 800873a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873e:	4674      	mov	r4, lr
 8008740:	e7f1      	b.n	8008726 <D32_1CH_HTONS_VOL_HP+0xfa>
 8008742:	bf00      	nop
 8008744:	24000000 	.word	0x24000000
 8008748:	00060003 	.word	0x00060003
 800874c:	000a000c 	.word	0x000a000c
 8008750:	000c000a 	.word	0x000c000a
 8008754:	00030006 	.word	0x00030006

08008758 <D48_1CH_HTONS_VOL_HP>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800875e:	b087      	sub	sp, #28
 8008760:	6993      	ldr	r3, [r2, #24]
 8008762:	9701      	str	r7, [sp, #4]
 8008764:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008766:	6a17      	ldr	r7, [r2, #32]
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	69d6      	ldr	r6, [r2, #28]
 800876c:	9702      	str	r7, [sp, #8]
 800876e:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 8008772:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008776:	2d00      	cmp	r5, #0
 8008778:	f000 8093 	beq.w	80088a2 <D48_1CH_HTONS_VOL_HP+0x14a>
 800877c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008780:	f1a1 0b02 	sub.w	fp, r1, #2
 8008784:	46f2      	mov	sl, lr
 8008786:	4f48      	ldr	r7, [pc, #288]	; (80088a8 <D48_1CH_HTONS_VOL_HP+0x150>)
 8008788:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800878c:	469e      	mov	lr, r3
 800878e:	9205      	str	r2, [sp, #20]
 8008790:	9103      	str	r1, [sp, #12]
 8008792:	e9d0 3200 	ldrd	r3, r2, [r0]
 8008796:	3006      	adds	r0, #6
 8008798:	ba5b      	rev16	r3, r3
 800879a:	fa92 f992 	rev16.w	r9, r2
 800879e:	b2dd      	uxtb	r5, r3
 80087a0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80087a4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80087a8:	0e1b      	lsrs	r3, r3, #24
 80087aa:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80087ae:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80087b2:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 80087b6:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 80087ba:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80087be:	fa5f f289 	uxtb.w	r2, r9
 80087c2:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 80087c6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80087ca:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80087ce:	f3c6 0809 	ubfx	r8, r6, #0, #10
 80087d2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80087d6:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 80087da:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80087de:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 80087e2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80087e6:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80087ea:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 80087ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087f2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80087f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80087fa:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80087fe:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8008802:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8008806:	4b29      	ldr	r3, [pc, #164]	; (80088ac <D48_1CH_HTONS_VOL_HP+0x154>)
 8008808:	fb28 c103 	smlad	r1, r8, r3, ip
 800880c:	4b28      	ldr	r3, [pc, #160]	; (80088b0 <D48_1CH_HTONS_VOL_HP+0x158>)
 800880e:	fb25 1103 	smlad	r1, r5, r3, r1
 8008812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008816:	fb22 1903 	smlad	r9, r2, r3, r1
 800881a:	4b26      	ldr	r3, [pc, #152]	; (80088b4 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800881c:	fb28 ec03 	smlad	ip, r8, r3, lr
 8008820:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8008824:	fb25 cc03 	smlad	ip, r5, r3, ip
 8008828:	4b23      	ldr	r3, [pc, #140]	; (80088b8 <D48_1CH_HTONS_VOL_HP+0x160>)
 800882a:	fb22 cc03 	smlad	ip, r2, r3, ip
 800882e:	2101      	movs	r1, #1
 8008830:	fb28 f801 	smuad	r8, r8, r1
 8008834:	4b21      	ldr	r3, [pc, #132]	; (80088bc <D48_1CH_HTONS_VOL_HP+0x164>)
 8008836:	fb25 8503 	smlad	r5, r5, r3, r8
 800883a:	4b21      	ldr	r3, [pc, #132]	; (80088c0 <D48_1CH_HTONS_VOL_HP+0x168>)
 800883c:	fb22 5e03 	smlad	lr, r2, r3, r5
 8008840:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 8008844:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008848:	190a      	adds	r2, r1, r4
 800884a:	9c02      	ldr	r4, [sp, #8]
 800884c:	eba2 020a 	sub.w	r2, r2, sl
 8008850:	468a      	mov	sl, r1
 8008852:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008856:	fba2 2304 	umull	r2, r3, r2, r4
 800885a:	fb04 3309 	mla	r3, r4, r9, r3
 800885e:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8008862:	f04f 0900 	mov.w	r9, #0
 8008866:	f143 0500 	adc.w	r5, r3, #0
 800886a:	9b01      	ldr	r3, [sp, #4]
 800886c:	032a      	lsls	r2, r5, #12
 800886e:	006c      	lsls	r4, r5, #1
 8008870:	fbc3 8902 	smlal	r8, r9, r3, r2
 8008874:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008878:	f303 030f 	ssat	r3, #16, r3
 800887c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	4283      	cmp	r3, r0
 8008884:	d185      	bne.n	8008792 <D48_1CH_HTONS_VOL_HP+0x3a>
 8008886:	4673      	mov	r3, lr
 8008888:	9a05      	ldr	r2, [sp, #20]
 800888a:	6093      	str	r3, [r2, #8]
 800888c:	2000      	movs	r0, #0
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008894:	61d6      	str	r6, [r2, #28]
 8008896:	6193      	str	r3, [r2, #24]
 8008898:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800889c:	b007      	add	sp, #28
 800889e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a2:	4671      	mov	r1, lr
 80088a4:	e7f1      	b.n	800888a <D48_1CH_HTONS_VOL_HP+0x132>
 80088a6:	bf00      	nop
 80088a8:	24000000 	.word	0x24000000
 80088ac:	000f000a 	.word	0x000f000a
 80088b0:	00060003 	.word	0x00060003
 80088b4:	00150019 	.word	0x00150019
 80088b8:	00190015 	.word	0x00190015
 80088bc:	00030006 	.word	0x00030006
 80088c0:	000a000f 	.word	0x000a000f

080088c4 <D64_1CH_HTONS_VOL_HP>:
 80088c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80088ca:	b089      	sub	sp, #36	; 0x24
 80088cc:	6993      	ldr	r3, [r2, #24]
 80088ce:	4686      	mov	lr, r0
 80088d0:	9503      	str	r5, [sp, #12]
 80088d2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80088d4:	6a15      	ldr	r5, [r2, #32]
 80088d6:	9306      	str	r3, [sp, #24]
 80088d8:	69d6      	ldr	r6, [r2, #28]
 80088da:	9504      	str	r5, [sp, #16]
 80088dc:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 80088e0:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f000 80a4 	beq.w	8008a32 <D64_1CH_HTONS_VOL_HP+0x16e>
 80088ea:	460f      	mov	r7, r1
 80088ec:	46f1      	mov	r9, lr
 80088ee:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80088f2:	4d56      	ldr	r5, [pc, #344]	; (8008a4c <D64_1CH_HTONS_VOL_HP+0x188>)
 80088f4:	46a2      	mov	sl, r4
 80088f6:	469e      	mov	lr, r3
 80088f8:	9105      	str	r1, [sp, #20]
 80088fa:	9207      	str	r2, [sp, #28]
 80088fc:	f859 1b08 	ldr.w	r1, [r9], #8
 8008900:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008904:	ba49      	rev16	r1, r1
 8008906:	fa93 fb93 	rev16.w	fp, r3
 800890a:	b2cb      	uxtb	r3, r1
 800890c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8008910:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8008914:	0e09      	lsrs	r1, r1, #24
 8008916:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800891a:	fa5f f38b 	uxtb.w	r3, fp
 800891e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008922:	4426      	add	r6, r4
 8008924:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8008928:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800892c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8008930:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8008934:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008938:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800893c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8008940:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008944:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008948:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800894c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008950:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008954:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8008958:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800895c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008960:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8008964:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8008968:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800896c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008970:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8008974:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008978:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800897c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008980:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8008984:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8008988:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800898c:	f3cb 0009 	ubfx	r0, fp, #0, #10
 8008990:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8008994:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8008998:	482d      	ldr	r0, [pc, #180]	; (8008a50 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800899a:	fb22 cc00 	smlad	ip, r2, r0, ip
 800899e:	482d      	ldr	r0, [pc, #180]	; (8008a54 <D64_1CH_HTONS_VOL_HP+0x190>)
 80089a0:	fb21 cc00 	smlad	ip, r1, r0, ip
 80089a4:	482c      	ldr	r0, [pc, #176]	; (8008a58 <D64_1CH_HTONS_VOL_HP+0x194>)
 80089a6:	fb23 cc00 	smlad	ip, r3, r0, ip
 80089aa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80089ae:	fb2b c404 	smlad	r4, fp, r4, ip
 80089b2:	482a      	ldr	r0, [pc, #168]	; (8008a5c <D64_1CH_HTONS_VOL_HP+0x198>)
 80089b4:	fb22 ec00 	smlad	ip, r2, r0, lr
 80089b8:	fb2b cc10 	smladx	ip, fp, r0, ip
 80089bc:	4828      	ldr	r0, [pc, #160]	; (8008a60 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80089be:	fb21 cc00 	smlad	ip, r1, r0, ip
 80089c2:	fb23 cc10 	smladx	ip, r3, r0, ip
 80089c6:	f04f 0e01 	mov.w	lr, #1
 80089ca:	fb22 f20e 	smuad	r2, r2, lr
 80089ce:	4825      	ldr	r0, [pc, #148]	; (8008a64 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80089d0:	fb21 2100 	smlad	r1, r1, r0, r2
 80089d4:	4a24      	ldr	r2, [pc, #144]	; (8008a68 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80089d6:	fb23 1302 	smlad	r3, r3, r2, r1
 80089da:	4a24      	ldr	r2, [pc, #144]	; (8008a6c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80089dc:	fb2b 3e02 	smlad	lr, fp, r2, r3
 80089e0:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 80089e4:	eb04 0208 	add.w	r2, r4, r8
 80089e8:	eba2 020a 	sub.w	r2, r2, sl
 80089ec:	46a2      	mov	sl, r4
 80089ee:	4610      	mov	r0, r2
 80089f0:	17d1      	asrs	r1, r2, #31
 80089f2:	e9cd 0100 	strd	r0, r1, [sp]
 80089f6:	9904      	ldr	r1, [sp, #16]
 80089f8:	9801      	ldr	r0, [sp, #4]
 80089fa:	fba2 2301 	umull	r2, r3, r2, r1
 80089fe:	fb01 3300 	mla	r3, r1, r0, r3
 8008a02:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 8008a06:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008a0a:	f143 0100 	adc.w	r1, r3, #0
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	02ca      	lsls	r2, r1, #11
 8008a12:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8008a16:	2100      	movs	r1, #0
 8008a18:	fbc3 0102 	smlal	r0, r1, r3, r2
 8008a1c:	108b      	asrs	r3, r1, #2
 8008a1e:	f303 030f 	ssat	r3, #16, r3
 8008a22:	f827 3b02 	strh.w	r3, [r7], #2
 8008a26:	9b05      	ldr	r3, [sp, #20]
 8008a28:	429f      	cmp	r7, r3
 8008a2a:	f47f af67 	bne.w	80088fc <D64_1CH_HTONS_VOL_HP+0x38>
 8008a2e:	4673      	mov	r3, lr
 8008a30:	9a07      	ldr	r2, [sp, #28]
 8008a32:	6093      	str	r3, [r2, #8]
 8008a34:	2000      	movs	r0, #0
 8008a36:	9b06      	ldr	r3, [sp, #24]
 8008a38:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008a3c:	61d6      	str	r6, [r2, #28]
 8008a3e:	6193      	str	r3, [r2, #24]
 8008a40:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8008a44:	b009      	add	sp, #36	; 0x24
 8008a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4a:	bf00      	nop
 8008a4c:	24000000 	.word	0x24000000
 8008a50:	001c0015 	.word	0x001c0015
 8008a54:	000f000a 	.word	0x000f000a
 8008a58:	00060003 	.word	0x00060003
 8008a5c:	0024002a 	.word	0x0024002a
 8008a60:	002e0030 	.word	0x002e0030
 8008a64:	00030006 	.word	0x00030006
 8008a68:	000a000f 	.word	0x000a000f
 8008a6c:	0015001c 	.word	0x0015001c

08008a70 <D80_1CH_HTONS_VOL_HP>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	6913      	ldr	r3, [r2, #16]
 8008a76:	b089      	sub	sp, #36	; 0x24
 8008a78:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	9603      	str	r6, [sp, #12]
 8008a7e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008a80:	6a16      	ldr	r6, [r2, #32]
 8008a82:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 8008a86:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 8008a8a:	9306      	str	r3, [sp, #24]
 8008a8c:	9604      	str	r6, [sp, #16]
 8008a8e:	69d3      	ldr	r3, [r2, #28]
 8008a90:	2c00      	cmp	r4, #0
 8008a92:	f000 80ce 	beq.w	8008c32 <D80_1CH_HTONS_VOL_HP+0x1c2>
 8008a96:	3902      	subs	r1, #2
 8008a98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008a9c:	4e66      	ldr	r6, [pc, #408]	; (8008c38 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 8008a9e:	469e      	mov	lr, r3
 8008aa0:	9102      	str	r1, [sp, #8]
 8008aa2:	46aa      	mov	sl, r5
 8008aa4:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8008aa8:	9207      	str	r2, [sp, #28]
 8008aaa:	9105      	str	r1, [sp, #20]
 8008aac:	6883      	ldr	r3, [r0, #8]
 8008aae:	e9d0 4200 	ldrd	r4, r2, [r0]
 8008ab2:	300a      	adds	r0, #10
 8008ab4:	ba64      	rev16	r4, r4
 8008ab6:	ba52      	rev16	r2, r2
 8008ab8:	fa93 fb93 	rev16.w	fp, r3
 8008abc:	b2e5      	uxtb	r5, r4
 8008abe:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008ac2:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008ac6:	0e24      	lsrs	r4, r4, #24
 8008ac8:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8008acc:	b2d5      	uxtb	r5, r2
 8008ace:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008ad2:	44c6      	add	lr, r8
 8008ad4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008ad8:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8008adc:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8008ae0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8008ae4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008ae8:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8008aec:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008af4:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8008af8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008afc:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8008b00:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8008b04:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8008b08:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8008b0c:	0e12      	lsrs	r2, r2, #24
 8008b0e:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8008b12:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8008b16:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8008b1a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008b1e:	fa5f fb8b 	uxtb.w	fp, fp
 8008b22:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008b26:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008b2a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8008b2e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008b32:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8008b36:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008b3a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008b3e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8008b42:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8008b46:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008b4a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008b4e:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8008b52:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008b56:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8008b5a:	f3ce 0109 	ubfx	r1, lr, #0, #10
 8008b5e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8008b62:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8008b66:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8008b6a:	4934      	ldr	r1, [pc, #208]	; (8008c3c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8008b6c:	fb23 cc01 	smlad	ip, r3, r1, ip
 8008b70:	4933      	ldr	r1, [pc, #204]	; (8008c40 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8008b72:	fb24 cc01 	smlad	ip, r4, r1, ip
 8008b76:	4933      	ldr	r1, [pc, #204]	; (8008c44 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8008b78:	fb28 cc01 	smlad	ip, r8, r1, ip
 8008b7c:	4932      	ldr	r1, [pc, #200]	; (8008c48 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8008b7e:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008b82:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008b86:	fb2b c901 	smlad	r9, fp, r1, ip
 8008b8a:	4930      	ldr	r1, [pc, #192]	; (8008c4c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8008b8c:	fb23 7701 	smlad	r7, r3, r1, r7
 8008b90:	492f      	ldr	r1, [pc, #188]	; (8008c50 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008b92:	fb24 7701 	smlad	r7, r4, r1, r7
 8008b96:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 8008b9a:	fb28 7c0c 	smlad	ip, r8, ip, r7
 8008b9e:	492d      	ldr	r1, [pc, #180]	; (8008c54 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008ba0:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008ba4:	492c      	ldr	r1, [pc, #176]	; (8008c58 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008ba6:	fb2b cc01 	smlad	ip, fp, r1, ip
 8008baa:	2101      	movs	r1, #1
 8008bac:	fb23 f301 	smuad	r3, r3, r1
 8008bb0:	492a      	ldr	r1, [pc, #168]	; (8008c5c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008bb2:	fb24 3401 	smlad	r4, r4, r1, r3
 8008bb6:	492a      	ldr	r1, [pc, #168]	; (8008c60 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008bb8:	fb28 4101 	smlad	r1, r8, r1, r4
 8008bbc:	4f29      	ldr	r7, [pc, #164]	; (8008c64 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008bbe:	fb22 1207 	smlad	r2, r2, r7, r1
 8008bc2:	4f29      	ldr	r7, [pc, #164]	; (8008c68 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008bc4:	fb2b 2707 	smlad	r7, fp, r7, r2
 8008bc8:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8008bcc:	9b01      	ldr	r3, [sp, #4]
 8008bce:	9c04      	ldr	r4, [sp, #16]
 8008bd0:	440b      	add	r3, r1
 8008bd2:	eba3 020a 	sub.w	r2, r3, sl
 8008bd6:	468a      	mov	sl, r1
 8008bd8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008bdc:	fba2 2304 	umull	r2, r3, r2, r4
 8008be0:	fb04 3309 	mla	r3, r4, r9, r3
 8008be4:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8008be8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008bec:	f143 0500 	adc.w	r5, r3, #0
 8008bf0:	006b      	lsls	r3, r5, #1
 8008bf2:	02aa      	lsls	r2, r5, #10
 8008bf4:	2500      	movs	r5, #0
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	fbc3 4502 	smlal	r4, r5, r3, r2
 8008bfe:	9a02      	ldr	r2, [sp, #8]
 8008c00:	10ab      	asrs	r3, r5, #2
 8008c02:	f303 030f 	ssat	r3, #16, r3
 8008c06:	f822 3f02 	strh.w	r3, [r2, #2]!
 8008c0a:	9b05      	ldr	r3, [sp, #20]
 8008c0c:	9202      	str	r2, [sp, #8]
 8008c0e:	4298      	cmp	r0, r3
 8008c10:	f47f af4c 	bne.w	8008aac <D80_1CH_HTONS_VOL_HP+0x3c>
 8008c14:	4673      	mov	r3, lr
 8008c16:	9a07      	ldr	r2, [sp, #28]
 8008c18:	61d3      	str	r3, [r2, #28]
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	9b01      	ldr	r3, [sp, #4]
 8008c1e:	6097      	str	r7, [r2, #8]
 8008c20:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008c24:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8008c28:	9b06      	ldr	r3, [sp, #24]
 8008c2a:	6193      	str	r3, [r2, #24]
 8008c2c:	b009      	add	sp, #36	; 0x24
 8008c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c32:	4629      	mov	r1, r5
 8008c34:	e7f0      	b.n	8008c18 <D80_1CH_HTONS_VOL_HP+0x1a8>
 8008c36:	bf00      	nop
 8008c38:	24000000 	.word	0x24000000
 8008c3c:	002d0024 	.word	0x002d0024
 8008c40:	001c0015 	.word	0x001c0015
 8008c44:	000f000a 	.word	0x000f000a
 8008c48:	00060003 	.word	0x00060003
 8008c4c:	0037003f 	.word	0x0037003f
 8008c50:	00450049 	.word	0x00450049
 8008c54:	00490045 	.word	0x00490045
 8008c58:	003f0037 	.word	0x003f0037
 8008c5c:	00030006 	.word	0x00030006
 8008c60:	000a000f 	.word	0x000a000f
 8008c64:	0015001c 	.word	0x0015001c
 8008c68:	0024002d 	.word	0x0024002d

08008c6c <D128_1CH_HTONS_VOL_HP>:
 8008c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c70:	6914      	ldr	r4, [r2, #16]
 8008c72:	b08d      	sub	sp, #52	; 0x34
 8008c74:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008c76:	9404      	str	r4, [sp, #16]
 8008c78:	6954      	ldr	r4, [r2, #20]
 8008c7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c7c:	9405      	str	r4, [sp, #20]
 8008c7e:	6994      	ldr	r4, [r2, #24]
 8008c80:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8008c84:	940a      	str	r4, [sp, #40]	; 0x28
 8008c86:	6894      	ldr	r4, [r2, #8]
 8008c88:	9403      	str	r4, [sp, #12]
 8008c8a:	68d4      	ldr	r4, [r2, #12]
 8008c8c:	9402      	str	r4, [sp, #8]
 8008c8e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008c90:	6a12      	ldr	r2, [r2, #32]
 8008c92:	9407      	str	r4, [sp, #28]
 8008c94:	9208      	str	r2, [sp, #32]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 812e 	beq.w	8008ef8 <D128_1CH_HTONS_VOL_HP+0x28c>
 8008c9c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008ca0:	f100 0b10 	add.w	fp, r0, #16
 8008ca4:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8008f38 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8008ca8:	9106      	str	r1, [sp, #24]
 8008caa:	9309      	str	r3, [sp, #36]	; 0x24
 8008cac:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8008cb0:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8008cb4:	ba40      	rev16	r0, r0
 8008cb6:	ba52      	rev16	r2, r2
 8008cb8:	ba5b      	rev16	r3, r3
 8008cba:	ba76      	rev16	r6, r6
 8008cbc:	b2c5      	uxtb	r5, r0
 8008cbe:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8008cc2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008cc6:	0e00      	lsrs	r0, r0, #24
 8008cc8:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8008ccc:	b2d5      	uxtb	r5, r2
 8008cce:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8008cd2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008cd6:	44bc      	add	ip, r7
 8008cd8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008cdc:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8008ce0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008ce4:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8008ce8:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8008cec:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008cf0:	0e12      	lsrs	r2, r2, #24
 8008cf2:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8008cf6:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8008cfa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008cfe:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008d02:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8008d06:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8008d0a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8008d14:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008d18:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8008d1c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8008d20:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8008d24:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008d28:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8008d2c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008d30:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8008d34:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008d38:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8008d3c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008d40:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008d44:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008d48:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8008d4c:	0e1b      	lsrs	r3, r3, #24
 8008d4e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8008d52:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008d56:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8008d5a:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8008d5e:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8008d62:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008d66:	b2f3      	uxtb	r3, r6
 8008d68:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8008d6c:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8008d70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d74:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8008d78:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8008d7c:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8008d80:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8008d84:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008d88:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008d8c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8008d90:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8008d94:	0e36      	lsrs	r6, r6, #24
 8008d96:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8008d9a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008d9e:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8008da2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008da6:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8008daa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008dae:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8008db2:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8008db6:	9101      	str	r1, [sp, #4]
 8008db8:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8008dbc:	9b02      	ldr	r3, [sp, #8]
 8008dbe:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8008dc2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8008dcc:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8008dd0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008dd4:	4a49      	ldr	r2, [pc, #292]	; (8008efc <D128_1CH_HTONS_VOL_HP+0x290>)
 8008dd6:	fb2e 3202 	smlad	r2, lr, r2, r3
 8008dda:	4b49      	ldr	r3, [pc, #292]	; (8008f00 <D128_1CH_HTONS_VOL_HP+0x294>)
 8008ddc:	fb27 2203 	smlad	r2, r7, r3, r2
 8008de0:	4b48      	ldr	r3, [pc, #288]	; (8008f04 <D128_1CH_HTONS_VOL_HP+0x298>)
 8008de2:	fb25 2203 	smlad	r2, r5, r3, r2
 8008de6:	4b48      	ldr	r3, [pc, #288]	; (8008f08 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8008de8:	fb24 2203 	smlad	r2, r4, r3, r2
 8008dec:	4b47      	ldr	r3, [pc, #284]	; (8008f0c <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8008dee:	fb20 2803 	smlad	r8, r0, r3, r2
 8008df2:	4b47      	ldr	r3, [pc, #284]	; (8008f10 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8008df4:	9a01      	ldr	r2, [sp, #4]
 8008df6:	fb22 8203 	smlad	r2, r2, r3, r8
 8008dfa:	4b46      	ldr	r3, [pc, #280]	; (8008f14 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8008dfc:	9102      	str	r1, [sp, #8]
 8008dfe:	fb21 2203 	smlad	r2, r1, r3, r2
 8008e02:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8008e06:	fb26 2308 	smlad	r3, r6, r8, r2
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	9a03      	ldr	r2, [sp, #12]
 8008e0e:	4b42      	ldr	r3, [pc, #264]	; (8008f18 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8008e10:	fb2e 2803 	smlad	r8, lr, r3, r2
 8008e14:	4b41      	ldr	r3, [pc, #260]	; (8008f1c <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8008e16:	fb27 8a03 	smlad	sl, r7, r3, r8
 8008e1a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008f3c <D128_1CH_HTONS_VOL_HP+0x2d0>
 8008e1e:	fb25 a808 	smlad	r8, r5, r8, sl
 8008e22:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8008f40 <D128_1CH_HTONS_VOL_HP+0x2d4>
 8008e26:	fb24 880a 	smlad	r8, r4, sl, r8
 8008e2a:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008f44 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8008e2e:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8008e32:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8008f48 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	fb23 aa08 	smlad	sl, r3, r8, sl
 8008e3c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008f4c <D128_1CH_HTONS_VOL_HP+0x2e0>
 8008e40:	9a02      	ldr	r2, [sp, #8]
 8008e42:	fb22 a808 	smlad	r8, r2, r8, sl
 8008e46:	f8df a108 	ldr.w	sl, [pc, #264]	; 8008f50 <D128_1CH_HTONS_VOL_HP+0x2e4>
 8008e4a:	fb26 830a 	smlad	r3, r6, sl, r8
 8008e4e:	f04f 0801 	mov.w	r8, #1
 8008e52:	9302      	str	r3, [sp, #8]
 8008e54:	fb2e fe08 	smuad	lr, lr, r8
 8008e58:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8008f54 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8008e5c:	fb27 ee08 	smlad	lr, r7, r8, lr
 8008e60:	4f2f      	ldr	r7, [pc, #188]	; (8008f20 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8008e62:	fb25 ee07 	smlad	lr, r5, r7, lr
 8008e66:	4f2f      	ldr	r7, [pc, #188]	; (8008f24 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8008e68:	fb24 ee07 	smlad	lr, r4, r7, lr
 8008e6c:	4f2e      	ldr	r7, [pc, #184]	; (8008f28 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8008e6e:	fb20 ee07 	smlad	lr, r0, r7, lr
 8008e72:	4f2e      	ldr	r7, [pc, #184]	; (8008f2c <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8008e74:	9b01      	ldr	r3, [sp, #4]
 8008e76:	fb23 ee07 	smlad	lr, r3, r7, lr
 8008e7a:	4f2d      	ldr	r7, [pc, #180]	; (8008f30 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8008e7c:	fb22 e707 	smlad	r7, r2, r7, lr
 8008e80:	4b2c      	ldr	r3, [pc, #176]	; (8008f34 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008e82:	fb26 7303 	smlad	r3, r6, r3, r7
 8008e86:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8008e8a:	9303      	str	r3, [sp, #12]
 8008e8c:	9b04      	ldr	r3, [sp, #16]
 8008e8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008e92:	9f08      	ldr	r7, [sp, #32]
 8008e94:	2100      	movs	r1, #0
 8008e96:	4433      	add	r3, r6
 8008e98:	f10b 0b10 	add.w	fp, fp, #16
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	9b05      	ldr	r3, [sp, #20]
 8008ea0:	9605      	str	r6, [sp, #20]
 8008ea2:	1ad2      	subs	r2, r2, r3
 8008ea4:	17d5      	asrs	r5, r2, #31
 8008ea6:	fba2 2307 	umull	r2, r3, r2, r7
 8008eaa:	1814      	adds	r4, r2, r0
 8008eac:	fb07 3305 	mla	r3, r7, r5, r3
 8008eb0:	eb43 0501 	adc.w	r5, r3, r1
 8008eb4:	006b      	lsls	r3, r5, #1
 8008eb6:	022a      	lsls	r2, r5, #8
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	9b07      	ldr	r3, [sp, #28]
 8008ebc:	fbc3 0102 	smlal	r0, r1, r3, r2
 8008ec0:	9a06      	ldr	r2, [sp, #24]
 8008ec2:	108b      	asrs	r3, r1, #2
 8008ec4:	f303 030f 	ssat	r3, #16, r3
 8008ec8:	f822 3b02 	strh.w	r3, [r2], #2
 8008ecc:	4613      	mov	r3, r2
 8008ece:	9206      	str	r2, [sp, #24]
 8008ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	f47f aeea 	bne.w	8008cac <D128_1CH_HTONS_VOL_HP+0x40>
 8008ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eda:	2000      	movs	r0, #0
 8008edc:	9903      	ldr	r1, [sp, #12]
 8008ede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ee0:	6099      	str	r1, [r3, #8]
 8008ee2:	9902      	ldr	r1, [sp, #8]
 8008ee4:	f8c3 c01c 	str.w	ip, [r3, #28]
 8008ee8:	60d9      	str	r1, [r3, #12]
 8008eea:	9904      	ldr	r1, [sp, #16]
 8008eec:	619a      	str	r2, [r3, #24]
 8008eee:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8008ef2:	b00d      	add	sp, #52	; 0x34
 8008ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef8:	9e05      	ldr	r6, [sp, #20]
 8008efa:	e7ed      	b.n	8008ed8 <D128_1CH_HTONS_VOL_HP+0x26c>
 8008efc:	00780069 	.word	0x00780069
 8008f00:	005b004e 	.word	0x005b004e
 8008f04:	00420037 	.word	0x00420037
 8008f08:	002d0024 	.word	0x002d0024
 8008f0c:	001c0015 	.word	0x001c0015
 8008f10:	000f000a 	.word	0x000f000a
 8008f14:	00060003 	.word	0x00060003
 8008f18:	00880096 	.word	0x00880096
 8008f1c:	00a200ac 	.word	0x00a200ac
 8008f20:	000a000f 	.word	0x000a000f
 8008f24:	0015001c 	.word	0x0015001c
 8008f28:	0024002d 	.word	0x0024002d
 8008f2c:	00370042 	.word	0x00370042
 8008f30:	004e005b 	.word	0x004e005b
 8008f34:	00690078 	.word	0x00690078
 8008f38:	24000000 	.word	0x24000000
 8008f3c:	00b400ba 	.word	0x00b400ba
 8008f40:	00be00c0 	.word	0x00be00c0
 8008f44:	00c000be 	.word	0x00c000be
 8008f48:	00ba00b4 	.word	0x00ba00b4
 8008f4c:	00ac00a2 	.word	0x00ac00a2
 8008f50:	00960088 	.word	0x00960088
 8008f54:	00030006 	.word	0x00030006

08008f58 <PDM_Filter_Init>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	2240      	movs	r2, #64	; 0x40
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4604      	mov	r4, r0
 8008f60:	300c      	adds	r0, #12
 8008f62:	f000 f9ed 	bl	8009340 <memset>
 8008f66:	4a56      	ldr	r2, [pc, #344]	; (80090c0 <PDM_Filter_Init+0x168>)
 8008f68:	4856      	ldr	r0, [pc, #344]	; (80090c4 <PDM_Filter_Init+0x16c>)
 8008f6a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8008f6e:	6813      	ldr	r3, [r2, #0]
 8008f70:	f24c 2540 	movw	r5, #49728	; 0xc240
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	6803      	ldr	r3, [r0, #0]
 8008f7c:	400b      	ands	r3, r1
 8008f7e:	42ab      	cmp	r3, r5
 8008f80:	d040      	beq.n	8009004 <PDM_Filter_Init+0xac>
 8008f82:	6803      	ldr	r3, [r0, #0]
 8008f84:	f24c 2270 	movw	r2, #49776	; 0xc270
 8008f88:	4019      	ands	r1, r3
 8008f8a:	4291      	cmp	r1, r2
 8008f8c:	d03a      	beq.n	8009004 <PDM_Filter_Init+0xac>
 8008f8e:	4b4e      	ldr	r3, [pc, #312]	; (80090c8 <PDM_Filter_Init+0x170>)
 8008f90:	2101      	movs	r1, #1
 8008f92:	461a      	mov	r2, r3
 8008f94:	6019      	str	r1, [r3, #0]
 8008f96:	6813      	ldr	r3, [r2, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1fc      	bne.n	8008f96 <PDM_Filter_Init+0x3e>
 8008f9c:	4b4b      	ldr	r3, [pc, #300]	; (80090cc <PDM_Filter_Init+0x174>)
 8008f9e:	494c      	ldr	r1, [pc, #304]	; (80090d0 <PDM_Filter_Init+0x178>)
 8008fa0:	4a4c      	ldr	r2, [pc, #304]	; (80090d4 <PDM_Filter_Init+0x17c>)
 8008fa2:	6019      	str	r1, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	8820      	ldrh	r0, [r4, #0]
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	8961      	ldrh	r1, [r4, #10]
 8008fac:	f04f 0300 	mov.w	r3, #0
 8008fb0:	8922      	ldrh	r2, [r4, #8]
 8008fb2:	bf14      	ite	ne
 8008fb4:	2500      	movne	r5, #0
 8008fb6:	4d47      	ldreq	r5, [pc, #284]	; (80090d4 <PDM_Filter_Init+0x17c>)
 8008fb8:	2801      	cmp	r0, #1
 8008fba:	61a3      	str	r3, [r4, #24]
 8008fbc:	6465      	str	r5, [r4, #68]	; 0x44
 8008fbe:	60e3      	str	r3, [r4, #12]
 8008fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8008fc2:	6423      	str	r3, [r4, #64]	; 0x40
 8008fc4:	86a1      	strh	r1, [r4, #52]	; 0x34
 8008fc6:	86e2      	strh	r2, [r4, #54]	; 0x36
 8008fc8:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8008fcc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008fd0:	d936      	bls.n	8009040 <PDM_Filter_Init+0xe8>
 8008fd2:	2003      	movs	r0, #3
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	8862      	ldrh	r2, [r4, #2]
 8008fd8:	2a01      	cmp	r2, #1
 8008fda:	d92e      	bls.n	800903a <PDM_Filter_Init+0xe2>
 8008fdc:	2140      	movs	r1, #64	; 0x40
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008fe2:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8008fe6:	d101      	bne.n	8008fec <PDM_Filter_Init+0x94>
 8008fe8:	460b      	mov	r3, r1
 8008fea:	6421      	str	r1, [r4, #64]	; 0x40
 8008fec:	6862      	ldr	r2, [r4, #4]
 8008fee:	b11a      	cbz	r2, 8008ff8 <PDM_Filter_Init+0xa0>
 8008ff0:	f043 0310 	orr.w	r3, r3, #16
 8008ff4:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008ff6:	6423      	str	r3, [r4, #64]	; 0x40
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	8722      	strh	r2, [r4, #56]	; 0x38
 8008ffc:	b908      	cbnz	r0, 8009002 <PDM_Filter_Init+0xaa>
 8008ffe:	3380      	adds	r3, #128	; 0x80
 8009000:	6423      	str	r3, [r4, #64]	; 0x40
 8009002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009004:	4b34      	ldr	r3, [pc, #208]	; (80090d8 <PDM_Filter_Init+0x180>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1c0      	bne.n	8008f8e <PDM_Filter_Init+0x36>
 800900c:	4a33      	ldr	r2, [pc, #204]	; (80090dc <PDM_Filter_Init+0x184>)
 800900e:	6813      	ldr	r3, [r2, #0]
 8009010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009014:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009018:	d006      	beq.n	8009028 <PDM_Filter_Init+0xd0>
 800901a:	6813      	ldr	r3, [r2, #0]
 800901c:	f240 4283 	movw	r2, #1155	; 0x483
 8009020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009024:	4293      	cmp	r3, r2
 8009026:	d1b2      	bne.n	8008f8e <PDM_Filter_Init+0x36>
 8009028:	4b2d      	ldr	r3, [pc, #180]	; (80090e0 <PDM_Filter_Init+0x188>)
 800902a:	2101      	movs	r1, #1
 800902c:	461a      	mov	r2, r3
 800902e:	6019      	str	r1, [r3, #0]
 8009030:	6813      	ldr	r3, [r2, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1fc      	bne.n	8009030 <PDM_Filter_Init+0xd8>
 8009036:	4b2b      	ldr	r3, [pc, #172]	; (80090e4 <PDM_Filter_Init+0x18c>)
 8009038:	e7b1      	b.n	8008f9e <PDM_Filter_Init+0x46>
 800903a:	d03a      	beq.n	80090b2 <PDM_Filter_Init+0x15a>
 800903c:	4618      	mov	r0, r3
 800903e:	e7cd      	b.n	8008fdc <PDM_Filter_Init+0x84>
 8009040:	4d29      	ldr	r5, [pc, #164]	; (80090e8 <PDM_Filter_Init+0x190>)
 8009042:	782a      	ldrb	r2, [r5, #0]
 8009044:	d01b      	beq.n	800907e <PDM_Filter_Init+0x126>
 8009046:	2a01      	cmp	r2, #1
 8009048:	d001      	beq.n	800904e <PDM_Filter_Init+0xf6>
 800904a:	2001      	movs	r0, #1
 800904c:	e7c3      	b.n	8008fd6 <PDM_Filter_Init+0x7e>
 800904e:	4927      	ldr	r1, [pc, #156]	; (80090ec <PDM_Filter_Init+0x194>)
 8009050:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80090f4 <PDM_Filter_Init+0x19c>
 8009054:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009058:	4e25      	ldr	r6, [pc, #148]	; (80090f0 <PDM_Filter_Init+0x198>)
 800905a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800905e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009062:	ea02 0006 	and.w	r0, r2, r6
 8009066:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800906a:	428f      	cmp	r7, r1
 800906c:	ea43 0300 	orr.w	r3, r3, r0
 8009070:	4413      	add	r3, r2
 8009072:	600b      	str	r3, [r1, #0]
 8009074:	d1f1      	bne.n	800905a <PDM_Filter_Init+0x102>
 8009076:	2300      	movs	r3, #0
 8009078:	2001      	movs	r0, #1
 800907a:	702b      	strb	r3, [r5, #0]
 800907c:	e7ab      	b.n	8008fd6 <PDM_Filter_Init+0x7e>
 800907e:	2a00      	cmp	r2, #0
 8009080:	d1a9      	bne.n	8008fd6 <PDM_Filter_Init+0x7e>
 8009082:	491a      	ldr	r1, [pc, #104]	; (80090ec <PDM_Filter_Init+0x194>)
 8009084:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80090f4 <PDM_Filter_Init+0x19c>
 8009088:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800908c:	4e18      	ldr	r6, [pc, #96]	; (80090f0 <PDM_Filter_Init+0x198>)
 800908e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009092:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009096:	ea02 0006 	and.w	r0, r2, r6
 800909a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800909e:	428f      	cmp	r7, r1
 80090a0:	ea43 0300 	orr.w	r3, r3, r0
 80090a4:	4413      	add	r3, r2
 80090a6:	600b      	str	r3, [r1, #0]
 80090a8:	d1f1      	bne.n	800908e <PDM_Filter_Init+0x136>
 80090aa:	2001      	movs	r0, #1
 80090ac:	2300      	movs	r3, #0
 80090ae:	7028      	strb	r0, [r5, #0]
 80090b0:	e791      	b.n	8008fd6 <PDM_Filter_Init+0x7e>
 80090b2:	2220      	movs	r2, #32
 80090b4:	4618      	mov	r0, r3
 80090b6:	2160      	movs	r1, #96	; 0x60
 80090b8:	6422      	str	r2, [r4, #64]	; 0x40
 80090ba:	4613      	mov	r3, r2
 80090bc:	e790      	b.n	8008fe0 <PDM_Filter_Init+0x88>
 80090be:	bf00      	nop
 80090c0:	e0002000 	.word	0xe0002000
 80090c4:	e000ed00 	.word	0xe000ed00
 80090c8:	40023008 	.word	0x40023008
 80090cc:	40023000 	.word	0x40023000
 80090d0:	f407a5c2 	.word	0xf407a5c2
 80090d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80090d8:	e0042000 	.word	0xe0042000
 80090dc:	5c001000 	.word	0x5c001000
 80090e0:	58024c08 	.word	0x58024c08
 80090e4:	58024c00 	.word	0x58024c00
 80090e8:	24000490 	.word	0x24000490
 80090ec:	23fffffc 	.word	0x23fffffc
 80090f0:	000ffc00 	.word	0x000ffc00
 80090f4:	3ff00000 	.word	0x3ff00000

080090f8 <PDM_Filter_setConfig>:
 80090f8:	4b67      	ldr	r3, [pc, #412]	; (8009298 <PDM_Filter_setConfig+0x1a0>)
 80090fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d128      	bne.n	8009152 <PDM_Filter_setConfig+0x5a>
 8009100:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009104:	880e      	ldrh	r6, [r1, #0]
 8009106:	460d      	mov	r5, r1
 8009108:	4604      	mov	r4, r0
 800910a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800910e:	1e73      	subs	r3, r6, #1
 8009110:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8009114:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 8009118:	2b06      	cmp	r3, #6
 800911a:	ed2d 8b02 	vpush	{d8}
 800911e:	6421      	str	r1, [r4, #64]	; 0x40
 8009120:	b083      	sub	sp, #12
 8009122:	d820      	bhi.n	8009166 <PDM_Filter_setConfig+0x6e>
 8009124:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009126:	42b3      	cmp	r3, r6
 8009128:	d03d      	beq.n	80091a6 <PDM_Filter_setConfig+0xae>
 800912a:	4b5c      	ldr	r3, [pc, #368]	; (800929c <PDM_Filter_setConfig+0x1a4>)
 800912c:	4013      	ands	r3, r2
 800912e:	4333      	orrs	r3, r6
 8009130:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009134:	6423      	str	r3, [r4, #64]	; 0x40
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	2a70      	cmp	r2, #112	; 0x70
 800913c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009140:	d009      	beq.n	8009156 <PDM_Filter_setConfig+0x5e>
 8009142:	2b06      	cmp	r3, #6
 8009144:	d824      	bhi.n	8009190 <PDM_Filter_setConfig+0x98>
 8009146:	e8df f003 	tbb	[pc, r3]
 800914a:	878a      	.short	0x878a
 800914c:	7b7e8184 	.word	0x7b7e8184
 8009150:	78          	.byte	0x78
 8009151:	00          	.byte	0x00
 8009152:	2004      	movs	r0, #4
 8009154:	4770      	bx	lr
 8009156:	2b06      	cmp	r3, #6
 8009158:	d81a      	bhi.n	8009190 <PDM_Filter_setConfig+0x98>
 800915a:	e8df f003 	tbb	[pc, r3]
 800915e:	8f92      	.short	0x8f92
 8009160:	8617898c 	.word	0x8617898c
 8009164:	83          	.byte	0x83
 8009165:	00          	.byte	0x00
 8009166:	4287      	cmp	r7, r0
 8009168:	f000 808e 	beq.w	8009288 <PDM_Filter_setConfig+0x190>
 800916c:	f117 0f0c 	cmn.w	r7, #12
 8009170:	f04f 0008 	mov.w	r0, #8
 8009174:	da11      	bge.n	800919a <PDM_Filter_setConfig+0xa2>
 8009176:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800917a:	3040      	adds	r0, #64	; 0x40
 800917c:	80ab      	strh	r3, [r5, #4]
 800917e:	886b      	ldrh	r3, [r5, #2]
 8009180:	8626      	strh	r6, [r4, #48]	; 0x30
 8009182:	8663      	strh	r3, [r4, #50]	; 0x32
 8009184:	b003      	add	sp, #12
 8009186:	ecbd 8b02 	vpop	{d8}
 800918a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800918c:	4b44      	ldr	r3, [pc, #272]	; (80092a0 <PDM_Filter_setConfig+0x1a8>)
 800918e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009190:	f117 0f0c 	cmn.w	r7, #12
 8009194:	f04f 0000 	mov.w	r0, #0
 8009198:	dbed      	blt.n	8009176 <PDM_Filter_setConfig+0x7e>
 800919a:	2f33      	cmp	r7, #51	; 0x33
 800919c:	dd10      	ble.n	80091c0 <PDM_Filter_setConfig+0xc8>
 800919e:	2333      	movs	r3, #51	; 0x33
 80091a0:	3040      	adds	r0, #64	; 0x40
 80091a2:	80ab      	strh	r3, [r5, #4]
 80091a4:	e7eb      	b.n	800917e <PDM_Filter_setConfig+0x86>
 80091a6:	4287      	cmp	r7, r0
 80091a8:	d1f2      	bne.n	8009190 <PDM_Filter_setConfig+0x98>
 80091aa:	886b      	ldrh	r3, [r5, #2]
 80091ac:	8663      	strh	r3, [r4, #50]	; 0x32
 80091ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091b0:	2000      	movs	r0, #0
 80091b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091b6:	6423      	str	r3, [r4, #64]	; 0x40
 80091b8:	b003      	add	sp, #12
 80091ba:	ecbd 8b02 	vpop	{d8}
 80091be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091c2:	f003 030f 	and.w	r3, r3, #15
 80091c6:	3b01      	subs	r3, #1
 80091c8:	2b06      	cmp	r3, #6
 80091ca:	d831      	bhi.n	8009230 <PDM_Filter_setConfig+0x138>
 80091cc:	4a35      	ldr	r2, [pc, #212]	; (80092a4 <PDM_Filter_setConfig+0x1ac>)
 80091ce:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80091d2:	eddf 0a35 	vldr	s1, [pc, #212]	; 80092a8 <PDM_Filter_setConfig+0x1b0>
 80091d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091da:	9001      	str	r0, [sp, #4]
 80091dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80091e0:	ed93 8a00 	vldr	s16, [r3]
 80091e4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80091e8:	f000 f8ca 	bl	8009380 <powf>
 80091ec:	eef0 8a40 	vmov.f32	s17, s0
 80091f0:	9801      	ldr	r0, [sp, #4]
 80091f2:	ee07 7a90 	vmov	s15, r7
 80091f6:	ee28 8a28 	vmul.f32	s16, s16, s17
 80091fa:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80091fe:	9001      	str	r0, [sp, #4]
 8009200:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8009204:	eddf 7a29 	vldr	s15, [pc, #164]	; 80092ac <PDM_Filter_setConfig+0x1b4>
 8009208:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800920c:	f000 f8b8 	bl	8009380 <powf>
 8009210:	ee28 8a00 	vmul.f32	s16, s16, s0
 8009214:	886b      	ldrh	r3, [r5, #2]
 8009216:	9801      	ldr	r0, [sp, #4]
 8009218:	feb8 8a48 	vrinta.f32	s16, s16
 800921c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8009220:	8727      	strh	r7, [r4, #56]	; 0x38
 8009222:	8663      	strh	r3, [r4, #50]	; 0x32
 8009224:	8626      	strh	r6, [r4, #48]	; 0x30
 8009226:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800922a:	2800      	cmp	r0, #0
 800922c:	d0bf      	beq.n	80091ae <PDM_Filter_setConfig+0xb6>
 800922e:	e7a9      	b.n	8009184 <PDM_Filter_setConfig+0x8c>
 8009230:	eddf 8a1f 	vldr	s17, [pc, #124]	; 80092b0 <PDM_Filter_setConfig+0x1b8>
 8009234:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 80092b4 <PDM_Filter_setConfig+0x1bc>
 8009238:	e7db      	b.n	80091f2 <PDM_Filter_setConfig+0xfa>
 800923a:	4b1f      	ldr	r3, [pc, #124]	; (80092b8 <PDM_Filter_setConfig+0x1c0>)
 800923c:	64a3      	str	r3, [r4, #72]	; 0x48
 800923e:	e7a7      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 8009240:	4b1e      	ldr	r3, [pc, #120]	; (80092bc <PDM_Filter_setConfig+0x1c4>)
 8009242:	64a3      	str	r3, [r4, #72]	; 0x48
 8009244:	e7a4      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 8009246:	4b1e      	ldr	r3, [pc, #120]	; (80092c0 <PDM_Filter_setConfig+0x1c8>)
 8009248:	64a3      	str	r3, [r4, #72]	; 0x48
 800924a:	e7a1      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 800924c:	4b1d      	ldr	r3, [pc, #116]	; (80092c4 <PDM_Filter_setConfig+0x1cc>)
 800924e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009250:	e79e      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 8009252:	4b1d      	ldr	r3, [pc, #116]	; (80092c8 <PDM_Filter_setConfig+0x1d0>)
 8009254:	64a3      	str	r3, [r4, #72]	; 0x48
 8009256:	e79b      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 8009258:	4b1c      	ldr	r3, [pc, #112]	; (80092cc <PDM_Filter_setConfig+0x1d4>)
 800925a:	64a3      	str	r3, [r4, #72]	; 0x48
 800925c:	e798      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 800925e:	4b1c      	ldr	r3, [pc, #112]	; (80092d0 <PDM_Filter_setConfig+0x1d8>)
 8009260:	64a3      	str	r3, [r4, #72]	; 0x48
 8009262:	e795      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 8009264:	4b1b      	ldr	r3, [pc, #108]	; (80092d4 <PDM_Filter_setConfig+0x1dc>)
 8009266:	64a3      	str	r3, [r4, #72]	; 0x48
 8009268:	e792      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 800926a:	4b1b      	ldr	r3, [pc, #108]	; (80092d8 <PDM_Filter_setConfig+0x1e0>)
 800926c:	64a3      	str	r3, [r4, #72]	; 0x48
 800926e:	e78f      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 8009270:	4b1a      	ldr	r3, [pc, #104]	; (80092dc <PDM_Filter_setConfig+0x1e4>)
 8009272:	64a3      	str	r3, [r4, #72]	; 0x48
 8009274:	e78c      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 8009276:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <PDM_Filter_setConfig+0x1e8>)
 8009278:	64a3      	str	r3, [r4, #72]	; 0x48
 800927a:	e789      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 800927c:	4b19      	ldr	r3, [pc, #100]	; (80092e4 <PDM_Filter_setConfig+0x1ec>)
 800927e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009280:	e786      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 8009282:	4b19      	ldr	r3, [pc, #100]	; (80092e8 <PDM_Filter_setConfig+0x1f0>)
 8009284:	64a3      	str	r3, [r4, #72]	; 0x48
 8009286:	e783      	b.n	8009190 <PDM_Filter_setConfig+0x98>
 8009288:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800928a:	42b3      	cmp	r3, r6
 800928c:	f47f af6e 	bne.w	800916c <PDM_Filter_setConfig+0x74>
 8009290:	886b      	ldrh	r3, [r5, #2]
 8009292:	2008      	movs	r0, #8
 8009294:	8663      	strh	r3, [r4, #50]	; 0x32
 8009296:	e775      	b.n	8009184 <PDM_Filter_setConfig+0x8c>
 8009298:	b5e8b5cd 	.word	0xb5e8b5cd
 800929c:	fffffef0 	.word	0xfffffef0
 80092a0:	08008411 	.word	0x08008411
 80092a4:	080096f0 	.word	0x080096f0
 80092a8:	42000000 	.word	0x42000000
 80092ac:	3d4ccccd 	.word	0x3d4ccccd
 80092b0:	4f800000 	.word	0x4f800000
 80092b4:	00000000 	.word	0x00000000
 80092b8:	0800781d 	.word	0x0800781d
 80092bc:	080076a5 	.word	0x080076a5
 80092c0:	08007595 	.word	0x08007595
 80092c4:	08008059 	.word	0x08008059
 80092c8:	08007dc1 	.word	0x08007dc1
 80092cc:	08007b89 	.word	0x08007b89
 80092d0:	080079a5 	.word	0x080079a5
 80092d4:	0800862d 	.word	0x0800862d
 80092d8:	080084f1 	.word	0x080084f1
 80092dc:	08008c6d 	.word	0x08008c6d
 80092e0:	08008a71 	.word	0x08008a71
 80092e4:	080088c5 	.word	0x080088c5
 80092e8:	08008759 	.word	0x08008759

080092ec <__errno>:
 80092ec:	4b01      	ldr	r3, [pc, #4]	; (80092f4 <__errno+0x8>)
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	24000410 	.word	0x24000410

080092f8 <__libc_init_array>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	4d0d      	ldr	r5, [pc, #52]	; (8009330 <__libc_init_array+0x38>)
 80092fc:	4c0d      	ldr	r4, [pc, #52]	; (8009334 <__libc_init_array+0x3c>)
 80092fe:	1b64      	subs	r4, r4, r5
 8009300:	10a4      	asrs	r4, r4, #2
 8009302:	2600      	movs	r6, #0
 8009304:	42a6      	cmp	r6, r4
 8009306:	d109      	bne.n	800931c <__libc_init_array+0x24>
 8009308:	4d0b      	ldr	r5, [pc, #44]	; (8009338 <__libc_init_array+0x40>)
 800930a:	4c0c      	ldr	r4, [pc, #48]	; (800933c <__libc_init_array+0x44>)
 800930c:	f000 f9e4 	bl	80096d8 <_init>
 8009310:	1b64      	subs	r4, r4, r5
 8009312:	10a4      	asrs	r4, r4, #2
 8009314:	2600      	movs	r6, #0
 8009316:	42a6      	cmp	r6, r4
 8009318:	d105      	bne.n	8009326 <__libc_init_array+0x2e>
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009320:	4798      	blx	r3
 8009322:	3601      	adds	r6, #1
 8009324:	e7ee      	b.n	8009304 <__libc_init_array+0xc>
 8009326:	f855 3b04 	ldr.w	r3, [r5], #4
 800932a:	4798      	blx	r3
 800932c:	3601      	adds	r6, #1
 800932e:	e7f2      	b.n	8009316 <__libc_init_array+0x1e>
 8009330:	080099b0 	.word	0x080099b0
 8009334:	080099b0 	.word	0x080099b0
 8009338:	080099b0 	.word	0x080099b0
 800933c:	080099b4 	.word	0x080099b4

08009340 <memset>:
 8009340:	4402      	add	r2, r0
 8009342:	4603      	mov	r3, r0
 8009344:	4293      	cmp	r3, r2
 8009346:	d100      	bne.n	800934a <memset+0xa>
 8009348:	4770      	bx	lr
 800934a:	f803 1b01 	strb.w	r1, [r3], #1
 800934e:	e7f9      	b.n	8009344 <memset+0x4>

08009350 <checkint>:
 8009350:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009354:	2b7e      	cmp	r3, #126	; 0x7e
 8009356:	dd10      	ble.n	800937a <checkint+0x2a>
 8009358:	2b96      	cmp	r3, #150	; 0x96
 800935a:	dc0c      	bgt.n	8009376 <checkint+0x26>
 800935c:	2201      	movs	r2, #1
 800935e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009362:	fa02 f303 	lsl.w	r3, r2, r3
 8009366:	1e5a      	subs	r2, r3, #1
 8009368:	4202      	tst	r2, r0
 800936a:	d106      	bne.n	800937a <checkint+0x2a>
 800936c:	4203      	tst	r3, r0
 800936e:	bf0c      	ite	eq
 8009370:	2002      	moveq	r0, #2
 8009372:	2001      	movne	r0, #1
 8009374:	4770      	bx	lr
 8009376:	2002      	movs	r0, #2
 8009378:	4770      	bx	lr
 800937a:	2000      	movs	r0, #0
 800937c:	4770      	bx	lr
	...

08009380 <powf>:
 8009380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009382:	ee10 1a10 	vmov	r1, s0
 8009386:	ee10 6a90 	vmov	r6, s1
 800938a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800938e:	0072      	lsls	r2, r6, #1
 8009390:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009394:	b085      	sub	sp, #20
 8009396:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800939a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800939e:	d256      	bcs.n	800944e <powf+0xce>
 80093a0:	4298      	cmp	r0, r3
 80093a2:	d256      	bcs.n	8009452 <powf+0xd2>
 80093a4:	2000      	movs	r0, #0
 80093a6:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80093aa:	4ea3      	ldr	r6, [pc, #652]	; (8009638 <powf+0x2b8>)
 80093ac:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80093b0:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80093b4:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 80093b8:	0dd2      	lsrs	r2, r2, #23
 80093ba:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 80093be:	05d2      	lsls	r2, r2, #23
 80093c0:	1a8b      	subs	r3, r1, r2
 80093c2:	ed97 5b00 	vldr	d5, [r7]
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	15d2      	asrs	r2, r2, #23
 80093cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80093d0:	eea5 6b07 	vfma.f64	d6, d5, d7
 80093d4:	ed97 5b02 	vldr	d5, [r7, #8]
 80093d8:	ee26 2b06 	vmul.f64	d2, d6, d6
 80093dc:	ee22 1b02 	vmul.f64	d1, d2, d2
 80093e0:	ee07 2a90 	vmov	s15, r2
 80093e4:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 80093e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80093ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 80093f0:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 80093f4:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 80093f8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80093fc:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8009400:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009404:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8009408:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800940c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009410:	eea2 7b04 	vfma.f64	d7, d2, d4
 8009414:	eea5 7b01 	vfma.f64	d7, d5, d1
 8009418:	ee20 0b07 	vmul.f64	d0, d0, d7
 800941c:	ee10 1a90 	vmov	r1, s1
 8009420:	2300      	movs	r3, #0
 8009422:	2700      	movs	r7, #0
 8009424:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8009428:	f248 06be 	movw	r6, #32958	; 0x80be
 800942c:	429f      	cmp	r7, r3
 800942e:	bf08      	it	eq
 8009430:	4296      	cmpeq	r6, r2
 8009432:	f080 80b1 	bcs.w	8009598 <powf+0x218>
 8009436:	ed9f 7b78 	vldr	d7, [pc, #480]	; 8009618 <powf+0x298>
 800943a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800943e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009442:	dd79      	ble.n	8009538 <powf+0x1b8>
 8009444:	b005      	add	sp, #20
 8009446:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800944a:	f000 b91f 	b.w	800968c <__math_oflowf>
 800944e:	4298      	cmp	r0, r3
 8009450:	d32d      	bcc.n	80094ae <powf+0x12e>
 8009452:	b952      	cbnz	r2, 800946a <powf+0xea>
 8009454:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8009458:	005b      	lsls	r3, r3, #1
 800945a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800945e:	f240 80cd 	bls.w	80095fc <powf+0x27c>
 8009462:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009466:	b005      	add	sp, #20
 8009468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800946a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800946e:	d105      	bne.n	800947c <powf+0xfc>
 8009470:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8009474:	0076      	lsls	r6, r6, #1
 8009476:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800947a:	e7f0      	b.n	800945e <powf+0xde>
 800947c:	004b      	lsls	r3, r1, #1
 800947e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8009482:	d8ee      	bhi.n	8009462 <powf+0xe2>
 8009484:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8009488:	d1eb      	bne.n	8009462 <powf+0xe2>
 800948a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800948e:	f000 80b5 	beq.w	80095fc <powf+0x27c>
 8009492:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009496:	ea6f 0606 	mvn.w	r6, r6
 800949a:	bf34      	ite	cc
 800949c:	2300      	movcc	r3, #0
 800949e:	2301      	movcs	r3, #1
 80094a0:	0ff6      	lsrs	r6, r6, #31
 80094a2:	42b3      	cmp	r3, r6
 80094a4:	f040 80ad 	bne.w	8009602 <powf+0x282>
 80094a8:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80094ac:	e7db      	b.n	8009466 <powf+0xe6>
 80094ae:	004f      	lsls	r7, r1, #1
 80094b0:	1e7a      	subs	r2, r7, #1
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d31c      	bcc.n	80094f0 <powf+0x170>
 80094b6:	2900      	cmp	r1, #0
 80094b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80094bc:	da0f      	bge.n	80094de <powf+0x15e>
 80094be:	ee10 0a90 	vmov	r0, s1
 80094c2:	f7ff ff45 	bl	8009350 <checkint>
 80094c6:	2801      	cmp	r0, #1
 80094c8:	d109      	bne.n	80094de <powf+0x15e>
 80094ca:	eeb1 0a40 	vneg.f32	s0, s0
 80094ce:	b947      	cbnz	r7, 80094e2 <powf+0x162>
 80094d0:	2e00      	cmp	r6, #0
 80094d2:	dac8      	bge.n	8009466 <powf+0xe6>
 80094d4:	b005      	add	sp, #20
 80094d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80094da:	f000 b8dd 	b.w	8009698 <__math_divzerof>
 80094de:	2000      	movs	r0, #0
 80094e0:	e7f5      	b.n	80094ce <powf+0x14e>
 80094e2:	2e00      	cmp	r6, #0
 80094e4:	dabf      	bge.n	8009466 <powf+0xe6>
 80094e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80094ea:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80094ee:	e7ba      	b.n	8009466 <powf+0xe6>
 80094f0:	2900      	cmp	r1, #0
 80094f2:	da1f      	bge.n	8009534 <powf+0x1b4>
 80094f4:	ee10 0a90 	vmov	r0, s1
 80094f8:	f7ff ff2a 	bl	8009350 <checkint>
 80094fc:	b920      	cbnz	r0, 8009508 <powf+0x188>
 80094fe:	b005      	add	sp, #20
 8009500:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009504:	f000 b8d8 	b.w	80096b8 <__math_invalidf>
 8009508:	2801      	cmp	r0, #1
 800950a:	bf14      	ite	ne
 800950c:	2000      	movne	r0, #0
 800950e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009512:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009516:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800951a:	f4bf af44 	bcs.w	80093a6 <powf+0x26>
 800951e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800963c <powf+0x2bc>
 8009522:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009526:	ee10 3a10 	vmov	r3, s0
 800952a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800952e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8009532:	e738      	b.n	80093a6 <powf+0x26>
 8009534:	2000      	movs	r0, #0
 8009536:	e7ee      	b.n	8009516 <powf+0x196>
 8009538:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8009620 <powf+0x2a0>
 800953c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009544:	dd10      	ble.n	8009568 <powf+0x1e8>
 8009546:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800954a:	2800      	cmp	r0, #0
 800954c:	d15c      	bne.n	8009608 <powf+0x288>
 800954e:	9302      	str	r3, [sp, #8]
 8009550:	eddd 7a02 	vldr	s15, [sp, #8]
 8009554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800955c:	eef4 7a47 	vcmp.f32	s15, s14
 8009560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009564:	f47f af6e 	bne.w	8009444 <powf+0xc4>
 8009568:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009628 <powf+0x2a8>
 800956c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009574:	d804      	bhi.n	8009580 <powf+0x200>
 8009576:	b005      	add	sp, #20
 8009578:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800957c:	f000 b87a 	b.w	8009674 <__math_uflowf>
 8009580:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009630 <powf+0x2b0>
 8009584:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958c:	d504      	bpl.n	8009598 <powf+0x218>
 800958e:	b005      	add	sp, #20
 8009590:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009594:	f000 b874 	b.w	8009680 <__math_may_uflowf>
 8009598:	4b29      	ldr	r3, [pc, #164]	; (8009640 <powf+0x2c0>)
 800959a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800959e:	ee30 6b07 	vadd.f64	d6, d0, d7
 80095a2:	ed8d 6b00 	vstr	d6, [sp]
 80095a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80095aa:	ee30 7b47 	vsub.f64	d7, d0, d7
 80095ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80095b2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80095b6:	f006 011f 	and.w	r1, r6, #31
 80095ba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80095be:	e9d1 ce00 	ldrd	ip, lr, [r1]
 80095c2:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80095c6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80095ca:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 80095ce:	eea7 6b05 	vfma.f64	d6, d7, d5
 80095d2:	ee27 5b07 	vmul.f64	d5, d7, d7
 80095d6:	1836      	adds	r6, r6, r0
 80095d8:	2300      	movs	r3, #0
 80095da:	eb13 040c 	adds.w	r4, r3, ip
 80095de:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 80095e2:	eb41 050e 	adc.w	r5, r1, lr
 80095e6:	eea7 0b04 	vfma.f64	d0, d7, d4
 80095ea:	ec45 4b17 	vmov	d7, r4, r5
 80095ee:	eea6 0b05 	vfma.f64	d0, d6, d5
 80095f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80095f6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80095fa:	e734      	b.n	8009466 <powf+0xe6>
 80095fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009600:	e731      	b.n	8009466 <powf+0xe6>
 8009602:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009644 <powf+0x2c4>
 8009606:	e72e      	b.n	8009466 <powf+0xe6>
 8009608:	9303      	str	r3, [sp, #12]
 800960a:	eddd 7a03 	vldr	s15, [sp, #12]
 800960e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009616:	e7a1      	b.n	800955c <powf+0x1dc>
 8009618:	ffd1d571 	.word	0xffd1d571
 800961c:	405fffff 	.word	0x405fffff
 8009620:	ffa3aae2 	.word	0xffa3aae2
 8009624:	405fffff 	.word	0x405fffff
 8009628:	00000000 	.word	0x00000000
 800962c:	c062c000 	.word	0xc062c000
 8009630:	00000000 	.word	0x00000000
 8009634:	c062a000 	.word	0xc062a000
 8009638:	08009740 	.word	0x08009740
 800963c:	4b000000 	.word	0x4b000000
 8009640:	08009868 	.word	0x08009868
 8009644:	00000000 	.word	0x00000000

08009648 <with_errnof>:
 8009648:	b513      	push	{r0, r1, r4, lr}
 800964a:	4604      	mov	r4, r0
 800964c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009650:	f7ff fe4c 	bl	80092ec <__errno>
 8009654:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009658:	6004      	str	r4, [r0, #0]
 800965a:	b002      	add	sp, #8
 800965c:	bd10      	pop	{r4, pc}

0800965e <xflowf>:
 800965e:	b130      	cbz	r0, 800966e <xflowf+0x10>
 8009660:	eef1 7a40 	vneg.f32	s15, s0
 8009664:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009668:	2022      	movs	r0, #34	; 0x22
 800966a:	f7ff bfed 	b.w	8009648 <with_errnof>
 800966e:	eef0 7a40 	vmov.f32	s15, s0
 8009672:	e7f7      	b.n	8009664 <xflowf+0x6>

08009674 <__math_uflowf>:
 8009674:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800967c <__math_uflowf+0x8>
 8009678:	f7ff bff1 	b.w	800965e <xflowf>
 800967c:	10000000 	.word	0x10000000

08009680 <__math_may_uflowf>:
 8009680:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009688 <__math_may_uflowf+0x8>
 8009684:	f7ff bfeb 	b.w	800965e <xflowf>
 8009688:	1a200000 	.word	0x1a200000

0800968c <__math_oflowf>:
 800968c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009694 <__math_oflowf+0x8>
 8009690:	f7ff bfe5 	b.w	800965e <xflowf>
 8009694:	70000000 	.word	0x70000000

08009698 <__math_divzerof>:
 8009698:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800969c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80096a0:	2800      	cmp	r0, #0
 80096a2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80096a6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80096b4 <__math_divzerof+0x1c>
 80096aa:	2022      	movs	r0, #34	; 0x22
 80096ac:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80096b0:	f7ff bfca 	b.w	8009648 <with_errnof>
 80096b4:	00000000 	.word	0x00000000

080096b8 <__math_invalidf>:
 80096b8:	eef0 7a40 	vmov.f32	s15, s0
 80096bc:	ee30 7a40 	vsub.f32	s14, s0, s0
 80096c0:	eef4 7a67 	vcmp.f32	s15, s15
 80096c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80096cc:	d602      	bvs.n	80096d4 <__math_invalidf+0x1c>
 80096ce:	2021      	movs	r0, #33	; 0x21
 80096d0:	f7ff bfba 	b.w	8009648 <with_errnof>
 80096d4:	4770      	bx	lr
	...

080096d8 <_init>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	bf00      	nop
 80096dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096de:	bc08      	pop	{r3}
 80096e0:	469e      	mov	lr, r3
 80096e2:	4770      	bx	lr

080096e4 <_fini>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	bf00      	nop
 80096e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ea:	bc08      	pop	{r3}
 80096ec:	469e      	mov	lr, r3
 80096ee:	4770      	bx	lr
