
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad30  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800b000  0800b000  0001b000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b2c8  0800b2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b2cc  0800b2cc  0001b2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000480  24000000  0800b2d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000418  24000480  0800b750  00020480  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000898  0800b750  00020898  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY
  9 .debug_info   000268f3  00000000  00000000  000204ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003ca3  00000000  00000000  00046da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001160  00000000  00000000  0004aa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001020  00000000  00000000  0004bba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032f7b  00000000  00000000  0004cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000194ed  00000000  00000000  0007fb43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00152377  00000000  00000000  00099030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001eb3a7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000048d0  00000000  00000000  001eb478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000480 	.word	0x24000480
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800afe8 	.word	0x0800afe8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000484 	.word	0x24000484
 800030c:	0800afe8 	.word	0x0800afe8

08000310 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10f      	bne.n	8000344 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <BSP_LED_Init+0xb0>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	e015      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <BSP_LED_Init+0xb0>)
 800034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <BSP_LED_Init+0xb0>)
 800035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	e002      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800036a:	f06f 0301 	mvn.w	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <BSP_LED_Init+0xb4>)
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <BSP_LED_Init+0xb8>)
 800038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038e:	f107 0210 	add.w	r2, r7, #16
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f002 fffd 	bl	8003394 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <BSP_LED_Init+0xb8>)
 800039e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <BSP_LED_Init+0xb4>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	f003 f998 	bl	80036e4 <HAL_GPIO_WritePin>

  return ret;
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58024400 	.word	0x58024400
 80003c4:	0800b038 	.word	0x0800b038
 80003c8:	24000400 	.word	0x24000400

080003cc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <BSP_LED_On+0x34>)
 80003de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <BSP_LED_On+0x38>)
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	f003 f978 	bl	80036e4 <HAL_GPIO_WritePin>
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	24000400 	.word	0x24000400
 8000404:	0800b038 	.word	0x0800b038

08000408 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <BSP_LED_Off+0x34>)
 800041a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <BSP_LED_Off+0x38>)
 8000422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000426:	b29b      	uxth	r3, r3
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	f003 f95a 	bl	80036e4 <HAL_GPIO_WritePin>
  return ret;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	24000400 	.word	0x24000400
 8000440:	0800b038 	.word	0x0800b038

08000444 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a06      	ldr	r2, [pc, #24]	; (800046c <HAL_SAI_ErrorCallback+0x28>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d103      	bne.n	800045e <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8000456:	2000      	movs	r0, #0
 8000458:	f000 f80a 	bl	8000470 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 800045c:	e002      	b.n	8000464 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f83a 	bl	80004d8 <BSP_AUDIO_IN_Error_CallBack>
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40015824 	.word	0x40015824

08000470 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 800048c:	2000      	movs	r0, #0
 800048e:	f000 f819 	bl	80004c4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	b082      	sub	sp, #8
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 f804 	bl	80004b0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f2:	2003      	movs	r0, #3
 80004f4:	f000 f95c 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80004f8:	f004 febe 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80004fc:	4602      	mov	r2, r0
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_Init+0x68>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	0a1b      	lsrs	r3, r3, #8
 8000504:	f003 030f 	and.w	r3, r3, #15
 8000508:	4913      	ldr	r1, [pc, #76]	; (8000558 <HAL_Init+0x6c>)
 800050a:	5ccb      	ldrb	r3, [r1, r3]
 800050c:	f003 031f 	and.w	r3, r3, #31
 8000510:	fa22 f303 	lsr.w	r3, r2, r3
 8000514:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_Init+0x68>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 030f 	and.w	r3, r3, #15
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <HAL_Init+0x6c>)
 8000520:	5cd3      	ldrb	r3, [r2, r3]
 8000522:	f003 031f 	and.w	r3, r3, #31
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	fa22 f303 	lsr.w	r3, r2, r3
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <HAL_Init+0x70>)
 800052e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <HAL_Init+0x74>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f814 	bl	8000564 <HAL_InitTick>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
 8000544:	e002      	b.n	800054c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000546:	f008 f989 	bl	800885c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	58024400 	.word	0x58024400
 8000558:	0800b048 	.word	0x0800b048
 800055c:	24000418 	.word	0x24000418
 8000560:	24000414 	.word	0x24000414

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_InitTick+0x60>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d101      	bne.n	8000578 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000574:	2301      	movs	r3, #1
 8000576:	e021      	b.n	80005bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <HAL_InitTick+0x64>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_InitTick+0x60>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000586:	fbb3 f3f1 	udiv	r3, r3, r1
 800058a:	fbb2 f3f3 	udiv	r3, r2, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f941 	bl	8000816 <HAL_SYSTICK_Config>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	e00e      	b.n	80005bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d80a      	bhi.n	80005ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	2200      	movs	r2, #0
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005ac:	f000 f90b 	bl	80007c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <HAL_InitTick+0x68>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e000      	b.n	80005bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2400040c 	.word	0x2400040c
 80005c8:	24000414 	.word	0x24000414
 80005cc:	24000408 	.word	0x24000408

080005d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x20>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x24>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <HAL_IncTick+0x24>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2400040c 	.word	0x2400040c
 80005f4:	240004a8 	.word	0x240004a8

080005f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return uwTick;
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <HAL_GetTick+0x14>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	240004a8 	.word	0x240004a8

08000610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <__NVIC_SetPriorityGrouping+0x40>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 800063a:	4313      	orrs	r3, r2
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <__NVIC_SetPriorityGrouping+0x40>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	05fa0000 	.word	0x05fa0000

08000658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <__NVIC_GetPriorityGrouping+0x18>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	f003 0307 	and.w	r3, r3, #7
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800067e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db0b      	blt.n	800069e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	f003 021f 	and.w	r2, r3, #31
 800068c:	4907      	ldr	r1, [pc, #28]	; (80006ac <__NVIC_EnableIRQ+0x38>)
 800068e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000692:	095b      	lsrs	r3, r3, #5
 8000694:	2001      	movs	r0, #1
 8000696:	fa00 f202 	lsl.w	r2, r0, r2
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	db0a      	blt.n	80006da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	490c      	ldr	r1, [pc, #48]	; (80006fc <__NVIC_SetPriority+0x4c>)
 80006ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d8:	e00a      	b.n	80006f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4908      	ldr	r1, [pc, #32]	; (8000700 <__NVIC_SetPriority+0x50>)
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	3b04      	subs	r3, #4
 80006e8:	0112      	lsls	r2, r2, #4
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	440b      	add	r3, r1
 80006ee:	761a      	strb	r2, [r3, #24]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000704:	b480      	push	{r7}
 8000706:	b089      	sub	sp, #36	; 0x24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	f1c3 0307 	rsb	r3, r3, #7
 800071e:	2b04      	cmp	r3, #4
 8000720:	bf28      	it	cs
 8000722:	2304      	movcs	r3, #4
 8000724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3304      	adds	r3, #4
 800072a:	2b06      	cmp	r3, #6
 800072c:	d902      	bls.n	8000734 <NVIC_EncodePriority+0x30>
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3b03      	subs	r3, #3
 8000732:	e000      	b.n	8000736 <NVIC_EncodePriority+0x32>
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	43da      	mvns	r2, r3
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	401a      	ands	r2, r3
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800074c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	43d9      	mvns	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	4313      	orrs	r3, r2
         );
}
 800075e:	4618      	mov	r0, r3
 8000760:	3724      	adds	r7, #36	; 0x24
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800077c:	d301      	bcc.n	8000782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077e:	2301      	movs	r3, #1
 8000780:	e00f      	b.n	80007a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <SysTick_Config+0x40>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3b01      	subs	r3, #1
 8000788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078a:	210f      	movs	r1, #15
 800078c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000790:	f7ff ff8e 	bl	80006b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SysTick_Config+0x40>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <SysTick_Config+0x40>)
 800079c:	2207      	movs	r2, #7
 800079e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	e000e010 	.word	0xe000e010

080007b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff29 	bl	8000610 <__NVIC_SetPriorityGrouping>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b086      	sub	sp, #24
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007d4:	f7ff ff40 	bl	8000658 <__NVIC_GetPriorityGrouping>
 80007d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	6978      	ldr	r0, [r7, #20]
 80007e0:	f7ff ff90 	bl	8000704 <NVIC_EncodePriority>
 80007e4:	4602      	mov	r2, r0
 80007e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff5f 	bl	80006b0 <__NVIC_SetPriority>
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff33 	bl	8000674 <__NVIC_EnableIRQ>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffa4 	bl	800076c <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000834:	f3bf 8f5f 	dmb	sy
}
 8000838:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <HAL_MPU_Disable+0x28>)
 800083c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083e:	4a06      	ldr	r2, [pc, #24]	; (8000858 <HAL_MPU_Disable+0x28>)
 8000840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000844:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_MPU_Disable+0x2c>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00
 800085c:	e000ed90 	.word	0xe000ed90

08000860 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <HAL_MPU_Enable+0x38>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MPU_Enable+0x3c>)
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	4a09      	ldr	r2, [pc, #36]	; (800089c <HAL_MPU_Enable+0x3c>)
 8000878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800087c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800087e:	f3bf 8f4f 	dsb	sy
}
 8000882:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy
}
 8000888:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed90 	.word	0xe000ed90
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	785a      	ldrb	r2, [r3, #1]
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <HAL_MPU_ConfigRegion+0x84>)
 80008ae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d029      	beq.n	800090c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80008b8:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <HAL_MPU_ConfigRegion+0x84>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7b1b      	ldrb	r3, [r3, #12]
 80008c4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7adb      	ldrb	r3, [r3, #11]
 80008ca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7a9b      	ldrb	r3, [r3, #10]
 80008d2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80008d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7b5b      	ldrb	r3, [r3, #13]
 80008da:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80008dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7b9b      	ldrb	r3, [r3, #14]
 80008e2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80008e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7bdb      	ldrb	r3, [r3, #15]
 80008ea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80008ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7a5b      	ldrb	r3, [r3, #9]
 80008f2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80008f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7a1b      	ldrb	r3, [r3, #8]
 80008fa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80008fc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000906:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000908:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800090a:	e005      	b.n	8000918 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_MPU_ConfigRegion+0x84>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <HAL_MPU_ConfigRegion+0x84>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed90 	.word	0xe000ed90

08000928 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e054      	b.n	80009e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7f5b      	ldrb	r3, [r3, #29]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d105      	bne.n	8000950 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f007 ffa0 	bl	8008890 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2202      	movs	r2, #2
 8000954:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	791b      	ldrb	r3, [r3, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10c      	bne.n	8000978 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a22      	ldr	r2, [pc, #136]	; (80009ec <HAL_CRC_Init+0xc4>)
 8000964:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f022 0218 	bic.w	r2, r2, #24
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	e00c      	b.n	8000992 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6899      	ldr	r1, [r3, #8]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	461a      	mov	r2, r3
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 f834 	bl	80009f0 <HAL_CRCEx_Polynomial_Set>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e028      	b.n	80009e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	795b      	ldrb	r3, [r3, #5]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d105      	bne.n	80009a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	e004      	b.n	80009b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	6912      	ldr	r2, [r2, #16]
 80009ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	430a      	orrs	r2, r1
 80009c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	699a      	ldr	r2, [r3, #24]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	430a      	orrs	r2, r1
 80009da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	04c11db7 	.word	0x04c11db7

080009f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000a00:	231f      	movs	r3, #31
 8000a02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000a04:	bf00      	nop
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	1e5a      	subs	r2, r3, #1
 8000a0a:	613a      	str	r2, [r7, #16]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d009      	beq.n	8000a24 <HAL_CRCEx_Polynomial_Set+0x34>
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	f003 031f 	and.w	r3, r3, #31
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f0      	beq.n	8000a06 <HAL_CRCEx_Polynomial_Set+0x16>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b18      	cmp	r3, #24
 8000a28:	d846      	bhi.n	8000ab8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000a2a:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000abf 	.word	0x08000abf
 8000a34:	08000ab9 	.word	0x08000ab9
 8000a38:	08000ab9 	.word	0x08000ab9
 8000a3c:	08000ab9 	.word	0x08000ab9
 8000a40:	08000ab9 	.word	0x08000ab9
 8000a44:	08000ab9 	.word	0x08000ab9
 8000a48:	08000ab9 	.word	0x08000ab9
 8000a4c:	08000ab9 	.word	0x08000ab9
 8000a50:	08000aad 	.word	0x08000aad
 8000a54:	08000ab9 	.word	0x08000ab9
 8000a58:	08000ab9 	.word	0x08000ab9
 8000a5c:	08000ab9 	.word	0x08000ab9
 8000a60:	08000ab9 	.word	0x08000ab9
 8000a64:	08000ab9 	.word	0x08000ab9
 8000a68:	08000ab9 	.word	0x08000ab9
 8000a6c:	08000ab9 	.word	0x08000ab9
 8000a70:	08000aa1 	.word	0x08000aa1
 8000a74:	08000ab9 	.word	0x08000ab9
 8000a78:	08000ab9 	.word	0x08000ab9
 8000a7c:	08000ab9 	.word	0x08000ab9
 8000a80:	08000ab9 	.word	0x08000ab9
 8000a84:	08000ab9 	.word	0x08000ab9
 8000a88:	08000ab9 	.word	0x08000ab9
 8000a8c:	08000ab9 	.word	0x08000ab9
 8000a90:	08000a95 	.word	0x08000a95
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d913      	bls.n	8000ac2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a9e:	e010      	b.n	8000ac2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	2b07      	cmp	r3, #7
 8000aa4:	d90f      	bls.n	8000ac6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000aaa:	e00c      	b.n	8000ac6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	d90b      	bls.n	8000aca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ab6:	e008      	b.n	8000aca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	75fb      	strb	r3, [r7, #23]
      break;
 8000abc:	e006      	b.n	8000acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000abe:	bf00      	nop
 8000ac0:	e004      	b.n	8000acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ac2:	bf00      	nop
 8000ac4:	e002      	b.n	8000acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ac6:	bf00      	nop
 8000ac8:	e000      	b.n	8000acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000aca:	bf00      	nop
  }
  if (status == HAL_OK)
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10d      	bne.n	8000aee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f023 0118 	bic.w	r1, r3, #24
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	371c      	adds	r7, #28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff fd78 	bl	80005f8 <HAL_GetTick>
 8000b08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d101      	bne.n	8000b14 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e314      	b.n	800113e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a66      	ldr	r2, [pc, #408]	; (8000cb4 <HAL_DMA_Init+0x1b8>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d04a      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a65      	ldr	r2, [pc, #404]	; (8000cb8 <HAL_DMA_Init+0x1bc>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d045      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a63      	ldr	r2, [pc, #396]	; (8000cbc <HAL_DMA_Init+0x1c0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d040      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a62      	ldr	r2, [pc, #392]	; (8000cc0 <HAL_DMA_Init+0x1c4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d03b      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a60      	ldr	r2, [pc, #384]	; (8000cc4 <HAL_DMA_Init+0x1c8>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d036      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a5f      	ldr	r2, [pc, #380]	; (8000cc8 <HAL_DMA_Init+0x1cc>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d031      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a5d      	ldr	r2, [pc, #372]	; (8000ccc <HAL_DMA_Init+0x1d0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d02c      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a5c      	ldr	r2, [pc, #368]	; (8000cd0 <HAL_DMA_Init+0x1d4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d027      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a5a      	ldr	r2, [pc, #360]	; (8000cd4 <HAL_DMA_Init+0x1d8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d022      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a59      	ldr	r2, [pc, #356]	; (8000cd8 <HAL_DMA_Init+0x1dc>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d01d      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a57      	ldr	r2, [pc, #348]	; (8000cdc <HAL_DMA_Init+0x1e0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d018      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a56      	ldr	r2, [pc, #344]	; (8000ce0 <HAL_DMA_Init+0x1e4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d013      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a54      	ldr	r2, [pc, #336]	; (8000ce4 <HAL_DMA_Init+0x1e8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d00e      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a53      	ldr	r2, [pc, #332]	; (8000ce8 <HAL_DMA_Init+0x1ec>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d009      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a51      	ldr	r2, [pc, #324]	; (8000cec <HAL_DMA_Init+0x1f0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d004      	beq.n	8000bb4 <HAL_DMA_Init+0xb8>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a50      	ldr	r2, [pc, #320]	; (8000cf0 <HAL_DMA_Init+0x1f4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d101      	bne.n	8000bb8 <HAL_DMA_Init+0xbc>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <HAL_DMA_Init+0xbe>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 813c 	beq.w	8000e38 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a37      	ldr	r2, [pc, #220]	; (8000cb4 <HAL_DMA_Init+0x1b8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d04a      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a36      	ldr	r2, [pc, #216]	; (8000cb8 <HAL_DMA_Init+0x1bc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d045      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a34      	ldr	r2, [pc, #208]	; (8000cbc <HAL_DMA_Init+0x1c0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d040      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a33      	ldr	r2, [pc, #204]	; (8000cc0 <HAL_DMA_Init+0x1c4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d03b      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <HAL_DMA_Init+0x1c8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d036      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a30      	ldr	r2, [pc, #192]	; (8000cc8 <HAL_DMA_Init+0x1cc>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d031      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <HAL_DMA_Init+0x1d0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d02c      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a2d      	ldr	r2, [pc, #180]	; (8000cd0 <HAL_DMA_Init+0x1d4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d027      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a2b      	ldr	r2, [pc, #172]	; (8000cd4 <HAL_DMA_Init+0x1d8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d022      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <HAL_DMA_Init+0x1dc>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d01d      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a28      	ldr	r2, [pc, #160]	; (8000cdc <HAL_DMA_Init+0x1e0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d018      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a27      	ldr	r2, [pc, #156]	; (8000ce0 <HAL_DMA_Init+0x1e4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d013      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a25      	ldr	r2, [pc, #148]	; (8000ce4 <HAL_DMA_Init+0x1e8>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d00e      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a24      	ldr	r2, [pc, #144]	; (8000ce8 <HAL_DMA_Init+0x1ec>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d009      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a22      	ldr	r2, [pc, #136]	; (8000cec <HAL_DMA_Init+0x1f0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d004      	beq.n	8000c70 <HAL_DMA_Init+0x174>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <HAL_DMA_Init+0x1f4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d108      	bne.n	8000c82 <HAL_DMA_Init+0x186>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0201 	bic.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	e007      	b.n	8000c92 <HAL_DMA_Init+0x196>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f022 0201 	bic.w	r2, r2, #1
 8000c90:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000c92:	e02f      	b.n	8000cf4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c94:	f7ff fcb0 	bl	80005f8 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b05      	cmp	r3, #5
 8000ca0:	d928      	bls.n	8000cf4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2203      	movs	r2, #3
 8000cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e244      	b.n	800113e <HAL_DMA_Init+0x642>
 8000cb4:	40020010 	.word	0x40020010
 8000cb8:	40020028 	.word	0x40020028
 8000cbc:	40020040 	.word	0x40020040
 8000cc0:	40020058 	.word	0x40020058
 8000cc4:	40020070 	.word	0x40020070
 8000cc8:	40020088 	.word	0x40020088
 8000ccc:	400200a0 	.word	0x400200a0
 8000cd0:	400200b8 	.word	0x400200b8
 8000cd4:	40020410 	.word	0x40020410
 8000cd8:	40020428 	.word	0x40020428
 8000cdc:	40020440 	.word	0x40020440
 8000ce0:	40020458 	.word	0x40020458
 8000ce4:	40020470 	.word	0x40020470
 8000ce8:	40020488 	.word	0x40020488
 8000cec:	400204a0 	.word	0x400204a0
 8000cf0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1c8      	bne.n	8000c94 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	4b84      	ldr	r3, [pc, #528]	; (8000f20 <HAL_DMA_Init+0x424>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000d1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d26:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d32:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a1b      	ldr	r3, [r3, #32]
 8000d38:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d107      	bne.n	8000d58 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	4313      	orrs	r3, r2
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b28      	cmp	r3, #40	; 0x28
 8000d5e:	d903      	bls.n	8000d68 <HAL_DMA_Init+0x26c>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b2e      	cmp	r3, #46	; 0x2e
 8000d66:	d91f      	bls.n	8000da8 <HAL_DMA_Init+0x2ac>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b3e      	cmp	r3, #62	; 0x3e
 8000d6e:	d903      	bls.n	8000d78 <HAL_DMA_Init+0x27c>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b42      	cmp	r3, #66	; 0x42
 8000d76:	d917      	bls.n	8000da8 <HAL_DMA_Init+0x2ac>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b46      	cmp	r3, #70	; 0x46
 8000d7e:	d903      	bls.n	8000d88 <HAL_DMA_Init+0x28c>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b48      	cmp	r3, #72	; 0x48
 8000d86:	d90f      	bls.n	8000da8 <HAL_DMA_Init+0x2ac>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b4e      	cmp	r3, #78	; 0x4e
 8000d8e:	d903      	bls.n	8000d98 <HAL_DMA_Init+0x29c>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b52      	cmp	r3, #82	; 0x52
 8000d96:	d907      	bls.n	8000da8 <HAL_DMA_Init+0x2ac>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b73      	cmp	r3, #115	; 0x73
 8000d9e:	d905      	bls.n	8000dac <HAL_DMA_Init+0x2b0>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b77      	cmp	r3, #119	; 0x77
 8000da6:	d801      	bhi.n	8000dac <HAL_DMA_Init+0x2b0>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <HAL_DMA_Init+0x2b2>
 8000dac:	2300      	movs	r3, #0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000db8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f023 0307 	bic.w	r3, r3, #7
 8000dd0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d117      	bne.n	8000e14 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d00e      	beq.n	8000e14 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f002 f82a 	bl	8002e50 <DMA_CheckFifoParam>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d008      	beq.n	8000e14 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2240      	movs	r2, #64	; 0x40
 8000e06:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e194      	b.n	800113e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f001 ff65 	bl	8002cec <DMA_CalcBaseAndBitshift>
 8000e22:	4603      	mov	r3, r0
 8000e24:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2a:	f003 031f 	and.w	r3, r3, #31
 8000e2e:	223f      	movs	r2, #63	; 0x3f
 8000e30:	409a      	lsls	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	e0ca      	b.n	8000fce <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a39      	ldr	r2, [pc, #228]	; (8000f24 <HAL_DMA_Init+0x428>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d022      	beq.n	8000e88 <HAL_DMA_Init+0x38c>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <HAL_DMA_Init+0x42c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d01d      	beq.n	8000e88 <HAL_DMA_Init+0x38c>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a36      	ldr	r2, [pc, #216]	; (8000f2c <HAL_DMA_Init+0x430>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d018      	beq.n	8000e88 <HAL_DMA_Init+0x38c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a35      	ldr	r2, [pc, #212]	; (8000f30 <HAL_DMA_Init+0x434>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d013      	beq.n	8000e88 <HAL_DMA_Init+0x38c>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a33      	ldr	r2, [pc, #204]	; (8000f34 <HAL_DMA_Init+0x438>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00e      	beq.n	8000e88 <HAL_DMA_Init+0x38c>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <HAL_DMA_Init+0x43c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d009      	beq.n	8000e88 <HAL_DMA_Init+0x38c>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a30      	ldr	r2, [pc, #192]	; (8000f3c <HAL_DMA_Init+0x440>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d004      	beq.n	8000e88 <HAL_DMA_Init+0x38c>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a2f      	ldr	r2, [pc, #188]	; (8000f40 <HAL_DMA_Init+0x444>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d101      	bne.n	8000e8c <HAL_DMA_Init+0x390>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <HAL_DMA_Init+0x392>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8094 	beq.w	8000fbc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a22      	ldr	r2, [pc, #136]	; (8000f24 <HAL_DMA_Init+0x428>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d021      	beq.n	8000ee2 <HAL_DMA_Init+0x3e6>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <HAL_DMA_Init+0x42c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d01c      	beq.n	8000ee2 <HAL_DMA_Init+0x3e6>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_DMA_Init+0x430>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d017      	beq.n	8000ee2 <HAL_DMA_Init+0x3e6>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <HAL_DMA_Init+0x434>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d012      	beq.n	8000ee2 <HAL_DMA_Init+0x3e6>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <HAL_DMA_Init+0x438>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_DMA_Init+0x3e6>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <HAL_DMA_Init+0x43c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d008      	beq.n	8000ee2 <HAL_DMA_Init+0x3e6>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_DMA_Init+0x440>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d003      	beq.n	8000ee2 <HAL_DMA_Init+0x3e6>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_DMA_Init+0x444>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_DMA_Init+0x448>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b40      	cmp	r3, #64	; 0x40
 8000f0a:	d01d      	beq.n	8000f48 <HAL_DMA_Init+0x44c>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b80      	cmp	r3, #128	; 0x80
 8000f12:	d102      	bne.n	8000f1a <HAL_DMA_Init+0x41e>
 8000f14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f18:	e017      	b.n	8000f4a <HAL_DMA_Init+0x44e>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e015      	b.n	8000f4a <HAL_DMA_Init+0x44e>
 8000f1e:	bf00      	nop
 8000f20:	fe10803f 	.word	0xfe10803f
 8000f24:	58025408 	.word	0x58025408
 8000f28:	5802541c 	.word	0x5802541c
 8000f2c:	58025430 	.word	0x58025430
 8000f30:	58025444 	.word	0x58025444
 8000f34:	58025458 	.word	0x58025458
 8000f38:	5802546c 	.word	0x5802546c
 8000f3c:	58025480 	.word	0x58025480
 8000f40:	58025494 	.word	0x58025494
 8000f44:	fffe000f 	.word	0xfffe000f
 8000f48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68d2      	ldr	r2, [r2, #12]
 8000f4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000f58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000f60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000f68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000f70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000f78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b6e      	ldr	r3, [pc, #440]	; (8001148 <HAL_DMA_Init+0x64c>)
 8000f90:	4413      	add	r3, r2
 8000f92:	4a6e      	ldr	r2, [pc, #440]	; (800114c <HAL_DMA_Init+0x650>)
 8000f94:	fba2 2303 	umull	r2, r3, r2, r3
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	009a      	lsls	r2, r3, #2
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f001 fea3 	bl	8002cec <DMA_CalcBaseAndBitshift>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	e008      	b.n	8000fce <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2240      	movs	r2, #64	; 0x40
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0b7      	b.n	800113e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a5f      	ldr	r2, [pc, #380]	; (8001150 <HAL_DMA_Init+0x654>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d072      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a5d      	ldr	r2, [pc, #372]	; (8001154 <HAL_DMA_Init+0x658>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d06d      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	; (8001158 <HAL_DMA_Init+0x65c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d068      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a5a      	ldr	r2, [pc, #360]	; (800115c <HAL_DMA_Init+0x660>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d063      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a59      	ldr	r2, [pc, #356]	; (8001160 <HAL_DMA_Init+0x664>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d05e      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a57      	ldr	r2, [pc, #348]	; (8001164 <HAL_DMA_Init+0x668>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d059      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a56      	ldr	r2, [pc, #344]	; (8001168 <HAL_DMA_Init+0x66c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d054      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a54      	ldr	r2, [pc, #336]	; (800116c <HAL_DMA_Init+0x670>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d04f      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a53      	ldr	r2, [pc, #332]	; (8001170 <HAL_DMA_Init+0x674>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d04a      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a51      	ldr	r2, [pc, #324]	; (8001174 <HAL_DMA_Init+0x678>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d045      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a50      	ldr	r2, [pc, #320]	; (8001178 <HAL_DMA_Init+0x67c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d040      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a4e      	ldr	r2, [pc, #312]	; (800117c <HAL_DMA_Init+0x680>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d03b      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <HAL_DMA_Init+0x684>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d036      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <HAL_DMA_Init+0x688>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d031      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a4a      	ldr	r2, [pc, #296]	; (8001188 <HAL_DMA_Init+0x68c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d02c      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a48      	ldr	r2, [pc, #288]	; (800118c <HAL_DMA_Init+0x690>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d027      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a47      	ldr	r2, [pc, #284]	; (8001190 <HAL_DMA_Init+0x694>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d022      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a45      	ldr	r2, [pc, #276]	; (8001194 <HAL_DMA_Init+0x698>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01d      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a44      	ldr	r2, [pc, #272]	; (8001198 <HAL_DMA_Init+0x69c>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d018      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a42      	ldr	r2, [pc, #264]	; (800119c <HAL_DMA_Init+0x6a0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a41      	ldr	r2, [pc, #260]	; (80011a0 <HAL_DMA_Init+0x6a4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d00e      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a3f      	ldr	r2, [pc, #252]	; (80011a4 <HAL_DMA_Init+0x6a8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d009      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a3e      	ldr	r2, [pc, #248]	; (80011a8 <HAL_DMA_Init+0x6ac>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d004      	beq.n	80010be <HAL_DMA_Init+0x5c2>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a3c      	ldr	r2, [pc, #240]	; (80011ac <HAL_DMA_Init+0x6b0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_DMA_Init+0x5c6>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_DMA_Init+0x5c8>
 80010c2:	2300      	movs	r3, #0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d032      	beq.n	800112e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f001 ff3d 	bl	8002f48 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b80      	cmp	r3, #128	; 0x80
 80010d4:	d102      	bne.n	80010dc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80010f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d010      	beq.n	800111c <HAL_DMA_Init+0x620>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d80c      	bhi.n	800111c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f001 ffba 	bl	800307c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	e008      	b.n	800112e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	a7fdabf8 	.word	0xa7fdabf8
 800114c:	cccccccd 	.word	0xcccccccd
 8001150:	40020010 	.word	0x40020010
 8001154:	40020028 	.word	0x40020028
 8001158:	40020040 	.word	0x40020040
 800115c:	40020058 	.word	0x40020058
 8001160:	40020070 	.word	0x40020070
 8001164:	40020088 	.word	0x40020088
 8001168:	400200a0 	.word	0x400200a0
 800116c:	400200b8 	.word	0x400200b8
 8001170:	40020410 	.word	0x40020410
 8001174:	40020428 	.word	0x40020428
 8001178:	40020440 	.word	0x40020440
 800117c:	40020458 	.word	0x40020458
 8001180:	40020470 	.word	0x40020470
 8001184:	40020488 	.word	0x40020488
 8001188:	400204a0 	.word	0x400204a0
 800118c:	400204b8 	.word	0x400204b8
 8001190:	58025408 	.word	0x58025408
 8001194:	5802541c 	.word	0x5802541c
 8001198:	58025430 	.word	0x58025430
 800119c:	58025444 	.word	0x58025444
 80011a0:	58025458 	.word	0x58025458
 80011a4:	5802546c 	.word	0x5802546c
 80011a8:	58025480 	.word	0x58025480
 80011ac:	58025494 	.word	0x58025494

080011b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e226      	b.n	800161a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_DMA_Start_IT+0x2a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e21f      	b.n	800161a <HAL_DMA_Start_IT+0x46a>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	f040 820a 	bne.w	8001604 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a68      	ldr	r2, [pc, #416]	; (80013a4 <HAL_DMA_Start_IT+0x1f4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d04a      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a66      	ldr	r2, [pc, #408]	; (80013a8 <HAL_DMA_Start_IT+0x1f8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d045      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a65      	ldr	r2, [pc, #404]	; (80013ac <HAL_DMA_Start_IT+0x1fc>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d040      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a63      	ldr	r2, [pc, #396]	; (80013b0 <HAL_DMA_Start_IT+0x200>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d03b      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a62      	ldr	r2, [pc, #392]	; (80013b4 <HAL_DMA_Start_IT+0x204>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d036      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a60      	ldr	r2, [pc, #384]	; (80013b8 <HAL_DMA_Start_IT+0x208>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d031      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a5f      	ldr	r2, [pc, #380]	; (80013bc <HAL_DMA_Start_IT+0x20c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d02c      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a5d      	ldr	r2, [pc, #372]	; (80013c0 <HAL_DMA_Start_IT+0x210>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d027      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a5c      	ldr	r2, [pc, #368]	; (80013c4 <HAL_DMA_Start_IT+0x214>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d022      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a5a      	ldr	r2, [pc, #360]	; (80013c8 <HAL_DMA_Start_IT+0x218>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01d      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a59      	ldr	r2, [pc, #356]	; (80013cc <HAL_DMA_Start_IT+0x21c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d018      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a57      	ldr	r2, [pc, #348]	; (80013d0 <HAL_DMA_Start_IT+0x220>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a56      	ldr	r2, [pc, #344]	; (80013d4 <HAL_DMA_Start_IT+0x224>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d00e      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a54      	ldr	r2, [pc, #336]	; (80013d8 <HAL_DMA_Start_IT+0x228>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d009      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a53      	ldr	r2, [pc, #332]	; (80013dc <HAL_DMA_Start_IT+0x22c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d004      	beq.n	800129e <HAL_DMA_Start_IT+0xee>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a51      	ldr	r2, [pc, #324]	; (80013e0 <HAL_DMA_Start_IT+0x230>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d108      	bne.n	80012b0 <HAL_DMA_Start_IT+0x100>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e007      	b.n	80012c0 <HAL_DMA_Start_IT+0x110>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f001 fb64 	bl	8002994 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <HAL_DMA_Start_IT+0x1f4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d04a      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <HAL_DMA_Start_IT+0x1f8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d045      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a31      	ldr	r2, [pc, #196]	; (80013ac <HAL_DMA_Start_IT+0x1fc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d040      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a30      	ldr	r2, [pc, #192]	; (80013b0 <HAL_DMA_Start_IT+0x200>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d03b      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a2e      	ldr	r2, [pc, #184]	; (80013b4 <HAL_DMA_Start_IT+0x204>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d036      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a2d      	ldr	r2, [pc, #180]	; (80013b8 <HAL_DMA_Start_IT+0x208>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d031      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a2b      	ldr	r2, [pc, #172]	; (80013bc <HAL_DMA_Start_IT+0x20c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d02c      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a2a      	ldr	r2, [pc, #168]	; (80013c0 <HAL_DMA_Start_IT+0x210>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d027      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <HAL_DMA_Start_IT+0x214>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d022      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <HAL_DMA_Start_IT+0x218>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d01d      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a25      	ldr	r2, [pc, #148]	; (80013cc <HAL_DMA_Start_IT+0x21c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d018      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a24      	ldr	r2, [pc, #144]	; (80013d0 <HAL_DMA_Start_IT+0x220>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d013      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <HAL_DMA_Start_IT+0x224>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00e      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_DMA_Start_IT+0x228>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d009      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <HAL_DMA_Start_IT+0x22c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d004      	beq.n	800136c <HAL_DMA_Start_IT+0x1bc>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_DMA_Start_IT+0x230>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d101      	bne.n	8001370 <HAL_DMA_Start_IT+0x1c0>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <HAL_DMA_Start_IT+0x1c2>
 8001370:	2300      	movs	r3, #0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d036      	beq.n	80013e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 021e 	bic.w	r2, r3, #30
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0216 	orr.w	r2, r2, #22
 8001388:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2b00      	cmp	r3, #0
 8001390:	d03e      	beq.n	8001410 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0208 	orr.w	r2, r2, #8
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e035      	b.n	8001410 <HAL_DMA_Start_IT+0x260>
 80013a4:	40020010 	.word	0x40020010
 80013a8:	40020028 	.word	0x40020028
 80013ac:	40020040 	.word	0x40020040
 80013b0:	40020058 	.word	0x40020058
 80013b4:	40020070 	.word	0x40020070
 80013b8:	40020088 	.word	0x40020088
 80013bc:	400200a0 	.word	0x400200a0
 80013c0:	400200b8 	.word	0x400200b8
 80013c4:	40020410 	.word	0x40020410
 80013c8:	40020428 	.word	0x40020428
 80013cc:	40020440 	.word	0x40020440
 80013d0:	40020458 	.word	0x40020458
 80013d4:	40020470 	.word	0x40020470
 80013d8:	40020488 	.word	0x40020488
 80013dc:	400204a0 	.word	0x400204a0
 80013e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 020e 	bic.w	r2, r3, #14
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 020a 	orr.w	r2, r2, #10
 80013f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d007      	beq.n	8001410 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0204 	orr.w	r2, r2, #4
 800140e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a83      	ldr	r2, [pc, #524]	; (8001624 <HAL_DMA_Start_IT+0x474>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d072      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a82      	ldr	r2, [pc, #520]	; (8001628 <HAL_DMA_Start_IT+0x478>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d06d      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a80      	ldr	r2, [pc, #512]	; (800162c <HAL_DMA_Start_IT+0x47c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d068      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a7f      	ldr	r2, [pc, #508]	; (8001630 <HAL_DMA_Start_IT+0x480>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d063      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a7d      	ldr	r2, [pc, #500]	; (8001634 <HAL_DMA_Start_IT+0x484>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d05e      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7c      	ldr	r2, [pc, #496]	; (8001638 <HAL_DMA_Start_IT+0x488>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d059      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a7a      	ldr	r2, [pc, #488]	; (800163c <HAL_DMA_Start_IT+0x48c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d054      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a79      	ldr	r2, [pc, #484]	; (8001640 <HAL_DMA_Start_IT+0x490>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d04f      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a77      	ldr	r2, [pc, #476]	; (8001644 <HAL_DMA_Start_IT+0x494>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d04a      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a76      	ldr	r2, [pc, #472]	; (8001648 <HAL_DMA_Start_IT+0x498>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d045      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a74      	ldr	r2, [pc, #464]	; (800164c <HAL_DMA_Start_IT+0x49c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d040      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a73      	ldr	r2, [pc, #460]	; (8001650 <HAL_DMA_Start_IT+0x4a0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d03b      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a71      	ldr	r2, [pc, #452]	; (8001654 <HAL_DMA_Start_IT+0x4a4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d036      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a70      	ldr	r2, [pc, #448]	; (8001658 <HAL_DMA_Start_IT+0x4a8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d031      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6e      	ldr	r2, [pc, #440]	; (800165c <HAL_DMA_Start_IT+0x4ac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d02c      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6d      	ldr	r2, [pc, #436]	; (8001660 <HAL_DMA_Start_IT+0x4b0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d027      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a6b      	ldr	r2, [pc, #428]	; (8001664 <HAL_DMA_Start_IT+0x4b4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d022      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6a      	ldr	r2, [pc, #424]	; (8001668 <HAL_DMA_Start_IT+0x4b8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d01d      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a68      	ldr	r2, [pc, #416]	; (800166c <HAL_DMA_Start_IT+0x4bc>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d018      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a67      	ldr	r2, [pc, #412]	; (8001670 <HAL_DMA_Start_IT+0x4c0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d013      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a65      	ldr	r2, [pc, #404]	; (8001674 <HAL_DMA_Start_IT+0x4c4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00e      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a64      	ldr	r2, [pc, #400]	; (8001678 <HAL_DMA_Start_IT+0x4c8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d009      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a62      	ldr	r2, [pc, #392]	; (800167c <HAL_DMA_Start_IT+0x4cc>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d004      	beq.n	8001500 <HAL_DMA_Start_IT+0x350>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a61      	ldr	r2, [pc, #388]	; (8001680 <HAL_DMA_Start_IT+0x4d0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d101      	bne.n	8001504 <HAL_DMA_Start_IT+0x354>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_DMA_Start_IT+0x356>
 8001504:	2300      	movs	r3, #0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d01a      	beq.n	8001540 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001526:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800153a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800153e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a37      	ldr	r2, [pc, #220]	; (8001624 <HAL_DMA_Start_IT+0x474>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d04a      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a36      	ldr	r2, [pc, #216]	; (8001628 <HAL_DMA_Start_IT+0x478>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d045      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a34      	ldr	r2, [pc, #208]	; (800162c <HAL_DMA_Start_IT+0x47c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d040      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <HAL_DMA_Start_IT+0x480>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d03b      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a31      	ldr	r2, [pc, #196]	; (8001634 <HAL_DMA_Start_IT+0x484>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d036      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a30      	ldr	r2, [pc, #192]	; (8001638 <HAL_DMA_Start_IT+0x488>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d031      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a2e      	ldr	r2, [pc, #184]	; (800163c <HAL_DMA_Start_IT+0x48c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d02c      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <HAL_DMA_Start_IT+0x490>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d027      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2b      	ldr	r2, [pc, #172]	; (8001644 <HAL_DMA_Start_IT+0x494>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d022      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <HAL_DMA_Start_IT+0x498>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d01d      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a28      	ldr	r2, [pc, #160]	; (800164c <HAL_DMA_Start_IT+0x49c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d018      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a27      	ldr	r2, [pc, #156]	; (8001650 <HAL_DMA_Start_IT+0x4a0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d013      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a25      	ldr	r2, [pc, #148]	; (8001654 <HAL_DMA_Start_IT+0x4a4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00e      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a24      	ldr	r2, [pc, #144]	; (8001658 <HAL_DMA_Start_IT+0x4a8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d009      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_DMA_Start_IT+0x4ac>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d004      	beq.n	80015e0 <HAL_DMA_Start_IT+0x430>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a21      	ldr	r2, [pc, #132]	; (8001660 <HAL_DMA_Start_IT+0x4b0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d108      	bne.n	80015f2 <HAL_DMA_Start_IT+0x442>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e012      	b.n	8001618 <HAL_DMA_Start_IT+0x468>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0201 	orr.w	r2, r2, #1
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e009      	b.n	8001618 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800160a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001618:	7dfb      	ldrb	r3, [r7, #23]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020010 	.word	0x40020010
 8001628:	40020028 	.word	0x40020028
 800162c:	40020040 	.word	0x40020040
 8001630:	40020058 	.word	0x40020058
 8001634:	40020070 	.word	0x40020070
 8001638:	40020088 	.word	0x40020088
 800163c:	400200a0 	.word	0x400200a0
 8001640:	400200b8 	.word	0x400200b8
 8001644:	40020410 	.word	0x40020410
 8001648:	40020428 	.word	0x40020428
 800164c:	40020440 	.word	0x40020440
 8001650:	40020458 	.word	0x40020458
 8001654:	40020470 	.word	0x40020470
 8001658:	40020488 	.word	0x40020488
 800165c:	400204a0 	.word	0x400204a0
 8001660:	400204b8 	.word	0x400204b8
 8001664:	58025408 	.word	0x58025408
 8001668:	5802541c 	.word	0x5802541c
 800166c:	58025430 	.word	0x58025430
 8001670:	58025444 	.word	0x58025444
 8001674:	58025458 	.word	0x58025458
 8001678:	5802546c 	.word	0x5802546c
 800167c:	58025480 	.word	0x58025480
 8001680:	58025494 	.word	0x58025494

08001684 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e205      	b.n	8001aa2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d004      	beq.n	80016ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e1fa      	b.n	8001aa2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a8c      	ldr	r2, [pc, #560]	; (80018e4 <HAL_DMA_Abort_IT+0x260>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d04a      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a8b      	ldr	r2, [pc, #556]	; (80018e8 <HAL_DMA_Abort_IT+0x264>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d045      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a89      	ldr	r2, [pc, #548]	; (80018ec <HAL_DMA_Abort_IT+0x268>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d040      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a88      	ldr	r2, [pc, #544]	; (80018f0 <HAL_DMA_Abort_IT+0x26c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d03b      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a86      	ldr	r2, [pc, #536]	; (80018f4 <HAL_DMA_Abort_IT+0x270>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d036      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a85      	ldr	r2, [pc, #532]	; (80018f8 <HAL_DMA_Abort_IT+0x274>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d031      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a83      	ldr	r2, [pc, #524]	; (80018fc <HAL_DMA_Abort_IT+0x278>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d02c      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a82      	ldr	r2, [pc, #520]	; (8001900 <HAL_DMA_Abort_IT+0x27c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d027      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a80      	ldr	r2, [pc, #512]	; (8001904 <HAL_DMA_Abort_IT+0x280>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d022      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a7f      	ldr	r2, [pc, #508]	; (8001908 <HAL_DMA_Abort_IT+0x284>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d01d      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a7d      	ldr	r2, [pc, #500]	; (800190c <HAL_DMA_Abort_IT+0x288>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d018      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a7c      	ldr	r2, [pc, #496]	; (8001910 <HAL_DMA_Abort_IT+0x28c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d013      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a7a      	ldr	r2, [pc, #488]	; (8001914 <HAL_DMA_Abort_IT+0x290>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00e      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a79      	ldr	r2, [pc, #484]	; (8001918 <HAL_DMA_Abort_IT+0x294>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d009      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a77      	ldr	r2, [pc, #476]	; (800191c <HAL_DMA_Abort_IT+0x298>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d004      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a76      	ldr	r2, [pc, #472]	; (8001920 <HAL_DMA_Abort_IT+0x29c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d101      	bne.n	8001750 <HAL_DMA_Abort_IT+0xcc>
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_DMA_Abort_IT+0xce>
 8001750:	2300      	movs	r3, #0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d065      	beq.n	8001822 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2204      	movs	r2, #4
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a60      	ldr	r2, [pc, #384]	; (80018e4 <HAL_DMA_Abort_IT+0x260>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d04a      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a5e      	ldr	r2, [pc, #376]	; (80018e8 <HAL_DMA_Abort_IT+0x264>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d045      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5d      	ldr	r2, [pc, #372]	; (80018ec <HAL_DMA_Abort_IT+0x268>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d040      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a5b      	ldr	r2, [pc, #364]	; (80018f0 <HAL_DMA_Abort_IT+0x26c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d03b      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <HAL_DMA_Abort_IT+0x270>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d036      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_DMA_Abort_IT+0x274>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d031      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a57      	ldr	r2, [pc, #348]	; (80018fc <HAL_DMA_Abort_IT+0x278>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d02c      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a55      	ldr	r2, [pc, #340]	; (8001900 <HAL_DMA_Abort_IT+0x27c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d027      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a54      	ldr	r2, [pc, #336]	; (8001904 <HAL_DMA_Abort_IT+0x280>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d022      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_DMA_Abort_IT+0x284>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01d      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a51      	ldr	r2, [pc, #324]	; (800190c <HAL_DMA_Abort_IT+0x288>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d018      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a4f      	ldr	r2, [pc, #316]	; (8001910 <HAL_DMA_Abort_IT+0x28c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a4e      	ldr	r2, [pc, #312]	; (8001914 <HAL_DMA_Abort_IT+0x290>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00e      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_DMA_Abort_IT+0x294>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d009      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a4b      	ldr	r2, [pc, #300]	; (800191c <HAL_DMA_Abort_IT+0x298>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d004      	beq.n	80017fe <HAL_DMA_Abort_IT+0x17a>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a49      	ldr	r2, [pc, #292]	; (8001920 <HAL_DMA_Abort_IT+0x29c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d108      	bne.n	8001810 <HAL_DMA_Abort_IT+0x18c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e147      	b.n	8001aa0 <HAL_DMA_Abort_IT+0x41c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e13e      	b.n	8001aa0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 020e 	bic.w	r2, r2, #14
 8001830:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a2b      	ldr	r2, [pc, #172]	; (80018e4 <HAL_DMA_Abort_IT+0x260>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a29      	ldr	r2, [pc, #164]	; (80018e8 <HAL_DMA_Abort_IT+0x264>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a28      	ldr	r2, [pc, #160]	; (80018ec <HAL_DMA_Abort_IT+0x268>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_DMA_Abort_IT+0x26c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <HAL_DMA_Abort_IT+0x270>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a23      	ldr	r2, [pc, #140]	; (80018f8 <HAL_DMA_Abort_IT+0x274>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a22      	ldr	r2, [pc, #136]	; (80018fc <HAL_DMA_Abort_IT+0x278>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <HAL_DMA_Abort_IT+0x27c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1f      	ldr	r2, [pc, #124]	; (8001904 <HAL_DMA_Abort_IT+0x280>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_DMA_Abort_IT+0x284>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <HAL_DMA_Abort_IT+0x288>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <HAL_DMA_Abort_IT+0x28c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_DMA_Abort_IT+0x290>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_DMA_Abort_IT+0x294>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a16      	ldr	r2, [pc, #88]	; (800191c <HAL_DMA_Abort_IT+0x298>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x24e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_DMA_Abort_IT+0x29c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d128      	bne.n	8001924 <HAL_DMA_Abort_IT+0x2a0>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0201 	bic.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e027      	b.n	8001934 <HAL_DMA_Abort_IT+0x2b0>
 80018e4:	40020010 	.word	0x40020010
 80018e8:	40020028 	.word	0x40020028
 80018ec:	40020040 	.word	0x40020040
 80018f0:	40020058 	.word	0x40020058
 80018f4:	40020070 	.word	0x40020070
 80018f8:	40020088 	.word	0x40020088
 80018fc:	400200a0 	.word	0x400200a0
 8001900:	400200b8 	.word	0x400200b8
 8001904:	40020410 	.word	0x40020410
 8001908:	40020428 	.word	0x40020428
 800190c:	40020440 	.word	0x40020440
 8001910:	40020458 	.word	0x40020458
 8001914:	40020470 	.word	0x40020470
 8001918:	40020488 	.word	0x40020488
 800191c:	400204a0 	.word	0x400204a0
 8001920:	400204b8 	.word	0x400204b8
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_DMA_Abort_IT+0x428>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d072      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5b      	ldr	r2, [pc, #364]	; (8001ab0 <HAL_DMA_Abort_IT+0x42c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d06d      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a59      	ldr	r2, [pc, #356]	; (8001ab4 <HAL_DMA_Abort_IT+0x430>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d068      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_DMA_Abort_IT+0x434>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d063      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_DMA_Abort_IT+0x438>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d05e      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a55      	ldr	r2, [pc, #340]	; (8001ac0 <HAL_DMA_Abort_IT+0x43c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d059      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a53      	ldr	r2, [pc, #332]	; (8001ac4 <HAL_DMA_Abort_IT+0x440>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d054      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_DMA_Abort_IT+0x444>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d04f      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a50      	ldr	r2, [pc, #320]	; (8001acc <HAL_DMA_Abort_IT+0x448>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d04a      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a4f      	ldr	r2, [pc, #316]	; (8001ad0 <HAL_DMA_Abort_IT+0x44c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d045      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a4d      	ldr	r2, [pc, #308]	; (8001ad4 <HAL_DMA_Abort_IT+0x450>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d040      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <HAL_DMA_Abort_IT+0x454>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d03b      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <HAL_DMA_Abort_IT+0x458>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d036      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_DMA_Abort_IT+0x45c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d031      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a47      	ldr	r2, [pc, #284]	; (8001ae4 <HAL_DMA_Abort_IT+0x460>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d02c      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a46      	ldr	r2, [pc, #280]	; (8001ae8 <HAL_DMA_Abort_IT+0x464>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d027      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a44      	ldr	r2, [pc, #272]	; (8001aec <HAL_DMA_Abort_IT+0x468>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d022      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a43      	ldr	r2, [pc, #268]	; (8001af0 <HAL_DMA_Abort_IT+0x46c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d01d      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a41      	ldr	r2, [pc, #260]	; (8001af4 <HAL_DMA_Abort_IT+0x470>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d018      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a40      	ldr	r2, [pc, #256]	; (8001af8 <HAL_DMA_Abort_IT+0x474>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d013      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <HAL_DMA_Abort_IT+0x478>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00e      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_DMA_Abort_IT+0x47c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d009      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a3b      	ldr	r2, [pc, #236]	; (8001b04 <HAL_DMA_Abort_IT+0x480>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d004      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x3a0>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a3a      	ldr	r2, [pc, #232]	; (8001b08 <HAL_DMA_Abort_IT+0x484>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_DMA_Abort_IT+0x3a4>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_DMA_Abort_IT+0x3a6>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d028      	beq.n	8001a80 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00c      	beq.n	8001a80 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40020010 	.word	0x40020010
 8001ab0:	40020028 	.word	0x40020028
 8001ab4:	40020040 	.word	0x40020040
 8001ab8:	40020058 	.word	0x40020058
 8001abc:	40020070 	.word	0x40020070
 8001ac0:	40020088 	.word	0x40020088
 8001ac4:	400200a0 	.word	0x400200a0
 8001ac8:	400200b8 	.word	0x400200b8
 8001acc:	40020410 	.word	0x40020410
 8001ad0:	40020428 	.word	0x40020428
 8001ad4:	40020440 	.word	0x40020440
 8001ad8:	40020458 	.word	0x40020458
 8001adc:	40020470 	.word	0x40020470
 8001ae0:	40020488 	.word	0x40020488
 8001ae4:	400204a0 	.word	0x400204a0
 8001ae8:	400204b8 	.word	0x400204b8
 8001aec:	58025408 	.word	0x58025408
 8001af0:	5802541c 	.word	0x5802541c
 8001af4:	58025430 	.word	0x58025430
 8001af8:	58025444 	.word	0x58025444
 8001afc:	58025458 	.word	0x58025458
 8001b00:	5802546c 	.word	0x5802546c
 8001b04:	58025480 	.word	0x58025480
 8001b08:	58025494 	.word	0x58025494

08001b0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b18:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_DMA_IRQHandler+0x1ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a67      	ldr	r2, [pc, #412]	; (8001cbc <HAL_DMA_IRQHandler+0x1b0>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0a9b      	lsrs	r3, r3, #10
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a5f      	ldr	r2, [pc, #380]	; (8001cc0 <HAL_DMA_IRQHandler+0x1b4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d04a      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a5d      	ldr	r2, [pc, #372]	; (8001cc4 <HAL_DMA_IRQHandler+0x1b8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d045      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a5c      	ldr	r2, [pc, #368]	; (8001cc8 <HAL_DMA_IRQHandler+0x1bc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d040      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5a      	ldr	r2, [pc, #360]	; (8001ccc <HAL_DMA_IRQHandler+0x1c0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d03b      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a59      	ldr	r2, [pc, #356]	; (8001cd0 <HAL_DMA_IRQHandler+0x1c4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d036      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a57      	ldr	r2, [pc, #348]	; (8001cd4 <HAL_DMA_IRQHandler+0x1c8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d031      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a56      	ldr	r2, [pc, #344]	; (8001cd8 <HAL_DMA_IRQHandler+0x1cc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d02c      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a54      	ldr	r2, [pc, #336]	; (8001cdc <HAL_DMA_IRQHandler+0x1d0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d027      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a53      	ldr	r2, [pc, #332]	; (8001ce0 <HAL_DMA_IRQHandler+0x1d4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d022      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a51      	ldr	r2, [pc, #324]	; (8001ce4 <HAL_DMA_IRQHandler+0x1d8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01d      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_DMA_IRQHandler+0x1dc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d018      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_DMA_IRQHandler+0x1e0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_DMA_IRQHandler+0x1e4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00e      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	; (8001cf4 <HAL_DMA_IRQHandler+0x1e8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d009      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a4a      	ldr	r2, [pc, #296]	; (8001cf8 <HAL_DMA_IRQHandler+0x1ec>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d004      	beq.n	8001bde <HAL_DMA_IRQHandler+0xd2>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a48      	ldr	r2, [pc, #288]	; (8001cfc <HAL_DMA_IRQHandler+0x1f0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_DMA_IRQHandler+0xd6>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_DMA_IRQHandler+0xd8>
 8001be2:	2300      	movs	r3, #0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 842b 	beq.w	8002440 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80a2 	beq.w	8001d44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <HAL_DMA_IRQHandler+0x1b4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04a      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2d      	ldr	r2, [pc, #180]	; (8001cc4 <HAL_DMA_IRQHandler+0x1b8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d045      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2b      	ldr	r2, [pc, #172]	; (8001cc8 <HAL_DMA_IRQHandler+0x1bc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d040      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2a      	ldr	r2, [pc, #168]	; (8001ccc <HAL_DMA_IRQHandler+0x1c0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d03b      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <HAL_DMA_IRQHandler+0x1c4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d036      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <HAL_DMA_IRQHandler+0x1c8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d031      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <HAL_DMA_IRQHandler+0x1cc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02c      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <HAL_DMA_IRQHandler+0x1d0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d027      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <HAL_DMA_IRQHandler+0x1d4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d022      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <HAL_DMA_IRQHandler+0x1d8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d01d      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a1f      	ldr	r2, [pc, #124]	; (8001ce8 <HAL_DMA_IRQHandler+0x1dc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d018      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <HAL_DMA_IRQHandler+0x1e0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <HAL_DMA_IRQHandler+0x1e4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00e      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <HAL_DMA_IRQHandler+0x1e8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d009      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_DMA_IRQHandler+0x1ec>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x194>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <HAL_DMA_IRQHandler+0x1f0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d12f      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x1f4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf14      	ite	ne
 8001cae:	2301      	movne	r3, #1
 8001cb0:	2300      	moveq	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	e02e      	b.n	8001d14 <HAL_DMA_IRQHandler+0x208>
 8001cb6:	bf00      	nop
 8001cb8:	24000414 	.word	0x24000414
 8001cbc:	1b4e81b5 	.word	0x1b4e81b5
 8001cc0:	40020010 	.word	0x40020010
 8001cc4:	40020028 	.word	0x40020028
 8001cc8:	40020040 	.word	0x40020040
 8001ccc:	40020058 	.word	0x40020058
 8001cd0:	40020070 	.word	0x40020070
 8001cd4:	40020088 	.word	0x40020088
 8001cd8:	400200a0 	.word	0x400200a0
 8001cdc:	400200b8 	.word	0x400200b8
 8001ce0:	40020410 	.word	0x40020410
 8001ce4:	40020428 	.word	0x40020428
 8001ce8:	40020440 	.word	0x40020440
 8001cec:	40020458 	.word	0x40020458
 8001cf0:	40020470 	.word	0x40020470
 8001cf4:	40020488 	.word	0x40020488
 8001cf8:	400204a0 	.word	0x400204a0
 8001cfc:	400204b8 	.word	0x400204b8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bf14      	ite	ne
 8001d0e:	2301      	movne	r3, #1
 8001d10:	2300      	moveq	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d015      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2208      	movs	r2, #8
 8001d32:	409a      	lsls	r2, r3
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f043 0201 	orr.w	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d06e      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a69      	ldr	r2, [pc, #420]	; (8001f04 <HAL_DMA_IRQHandler+0x3f8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d04a      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a67      	ldr	r2, [pc, #412]	; (8001f08 <HAL_DMA_IRQHandler+0x3fc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d045      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a66      	ldr	r2, [pc, #408]	; (8001f0c <HAL_DMA_IRQHandler+0x400>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d040      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a64      	ldr	r2, [pc, #400]	; (8001f10 <HAL_DMA_IRQHandler+0x404>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d03b      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a63      	ldr	r2, [pc, #396]	; (8001f14 <HAL_DMA_IRQHandler+0x408>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d036      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a61      	ldr	r2, [pc, #388]	; (8001f18 <HAL_DMA_IRQHandler+0x40c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d031      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a60      	ldr	r2, [pc, #384]	; (8001f1c <HAL_DMA_IRQHandler+0x410>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d02c      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a5e      	ldr	r2, [pc, #376]	; (8001f20 <HAL_DMA_IRQHandler+0x414>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d027      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a5d      	ldr	r2, [pc, #372]	; (8001f24 <HAL_DMA_IRQHandler+0x418>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5b      	ldr	r2, [pc, #364]	; (8001f28 <HAL_DMA_IRQHandler+0x41c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01d      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5a      	ldr	r2, [pc, #360]	; (8001f2c <HAL_DMA_IRQHandler+0x420>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_DMA_IRQHandler+0x424>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a57      	ldr	r2, [pc, #348]	; (8001f34 <HAL_DMA_IRQHandler+0x428>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a55      	ldr	r2, [pc, #340]	; (8001f38 <HAL_DMA_IRQHandler+0x42c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a54      	ldr	r2, [pc, #336]	; (8001f3c <HAL_DMA_IRQHandler+0x430>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d004      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x2ee>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_DMA_IRQHandler+0x434>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10a      	bne.n	8001e10 <HAL_DMA_IRQHandler+0x304>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	2300      	moveq	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	e003      	b.n	8001e18 <HAL_DMA_IRQHandler+0x30c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2201      	movs	r2, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	f043 0202 	orr.w	r2, r3, #2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2204      	movs	r2, #4
 8001e42:	409a      	lsls	r2, r3
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 808f 	beq.w	8001f6c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a2c      	ldr	r2, [pc, #176]	; (8001f04 <HAL_DMA_IRQHandler+0x3f8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d04a      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2a      	ldr	r2, [pc, #168]	; (8001f08 <HAL_DMA_IRQHandler+0x3fc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d045      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a29      	ldr	r2, [pc, #164]	; (8001f0c <HAL_DMA_IRQHandler+0x400>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d040      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_DMA_IRQHandler+0x404>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d03b      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a26      	ldr	r2, [pc, #152]	; (8001f14 <HAL_DMA_IRQHandler+0x408>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d036      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a24      	ldr	r2, [pc, #144]	; (8001f18 <HAL_DMA_IRQHandler+0x40c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d031      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <HAL_DMA_IRQHandler+0x410>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d02c      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <HAL_DMA_IRQHandler+0x414>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d027      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a20      	ldr	r2, [pc, #128]	; (8001f24 <HAL_DMA_IRQHandler+0x418>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d022      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <HAL_DMA_IRQHandler+0x41c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01d      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <HAL_DMA_IRQHandler+0x420>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d018      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <HAL_DMA_IRQHandler+0x424>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <HAL_DMA_IRQHandler+0x428>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00e      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <HAL_DMA_IRQHandler+0x42c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d009      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_DMA_IRQHandler+0x430>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d004      	beq.n	8001eee <HAL_DMA_IRQHandler+0x3e2>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <HAL_DMA_IRQHandler+0x434>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d12a      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x438>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e023      	b.n	8001f4c <HAL_DMA_IRQHandler+0x440>
 8001f04:	40020010 	.word	0x40020010
 8001f08:	40020028 	.word	0x40020028
 8001f0c:	40020040 	.word	0x40020040
 8001f10:	40020058 	.word	0x40020058
 8001f14:	40020070 	.word	0x40020070
 8001f18:	40020088 	.word	0x40020088
 8001f1c:	400200a0 	.word	0x400200a0
 8001f20:	400200b8 	.word	0x400200b8
 8001f24:	40020410 	.word	0x40020410
 8001f28:	40020428 	.word	0x40020428
 8001f2c:	40020440 	.word	0x40020440
 8001f30:	40020458 	.word	0x40020458
 8001f34:	40020470 	.word	0x40020470
 8001f38:	40020488 	.word	0x40020488
 8001f3c:	400204a0 	.word	0x400204a0
 8001f40:	400204b8 	.word	0x400204b8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00d      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	2204      	movs	r2, #4
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	2210      	movs	r2, #16
 8001f76:	409a      	lsls	r2, r3
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80a6 	beq.w	80020ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a85      	ldr	r2, [pc, #532]	; (800219c <HAL_DMA_IRQHandler+0x690>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d04a      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a83      	ldr	r2, [pc, #524]	; (80021a0 <HAL_DMA_IRQHandler+0x694>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d045      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a82      	ldr	r2, [pc, #520]	; (80021a4 <HAL_DMA_IRQHandler+0x698>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d040      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a80      	ldr	r2, [pc, #512]	; (80021a8 <HAL_DMA_IRQHandler+0x69c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d03b      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7f      	ldr	r2, [pc, #508]	; (80021ac <HAL_DMA_IRQHandler+0x6a0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d036      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a7d      	ldr	r2, [pc, #500]	; (80021b0 <HAL_DMA_IRQHandler+0x6a4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d031      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7c      	ldr	r2, [pc, #496]	; (80021b4 <HAL_DMA_IRQHandler+0x6a8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d02c      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a7a      	ldr	r2, [pc, #488]	; (80021b8 <HAL_DMA_IRQHandler+0x6ac>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d027      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a79      	ldr	r2, [pc, #484]	; (80021bc <HAL_DMA_IRQHandler+0x6b0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d022      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a77      	ldr	r2, [pc, #476]	; (80021c0 <HAL_DMA_IRQHandler+0x6b4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01d      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a76      	ldr	r2, [pc, #472]	; (80021c4 <HAL_DMA_IRQHandler+0x6b8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d018      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a74      	ldr	r2, [pc, #464]	; (80021c8 <HAL_DMA_IRQHandler+0x6bc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a73      	ldr	r2, [pc, #460]	; (80021cc <HAL_DMA_IRQHandler+0x6c0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00e      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a71      	ldr	r2, [pc, #452]	; (80021d0 <HAL_DMA_IRQHandler+0x6c4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d009      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a70      	ldr	r2, [pc, #448]	; (80021d4 <HAL_DMA_IRQHandler+0x6c8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d004      	beq.n	8002022 <HAL_DMA_IRQHandler+0x516>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_DMA_IRQHandler+0x6cc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d10a      	bne.n	8002038 <HAL_DMA_IRQHandler+0x52c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf14      	ite	ne
 8002030:	2301      	movne	r3, #1
 8002032:	2300      	moveq	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	e009      	b.n	800204c <HAL_DMA_IRQHandler+0x540>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	bf14      	ite	ne
 8002046:	2301      	movne	r3, #1
 8002048:	2300      	moveq	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d03e      	beq.n	80020ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	2210      	movs	r2, #16
 800205a:	409a      	lsls	r2, r3
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d018      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d108      	bne.n	800208e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	d024      	beq.n	80020ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
 800208c:	e01f      	b.n	80020ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01b      	beq.n	80020ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
 800209e:	e016      	b.n	80020ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d107      	bne.n	80020be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0208 	bic.w	r2, r2, #8
 80020bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2220      	movs	r2, #32
 80020d8:	409a      	lsls	r2, r3
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8110 	beq.w	8002304 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2c      	ldr	r2, [pc, #176]	; (800219c <HAL_DMA_IRQHandler+0x690>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d04a      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <HAL_DMA_IRQHandler+0x694>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d045      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <HAL_DMA_IRQHandler+0x698>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d040      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <HAL_DMA_IRQHandler+0x69c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d03b      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <HAL_DMA_IRQHandler+0x6a0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d036      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <HAL_DMA_IRQHandler+0x6a4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d031      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <HAL_DMA_IRQHandler+0x6a8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d02c      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_DMA_IRQHandler+0x6ac>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d027      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a20      	ldr	r2, [pc, #128]	; (80021bc <HAL_DMA_IRQHandler+0x6b0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d022      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_DMA_IRQHandler+0x6b4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d01d      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_DMA_IRQHandler+0x6b8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d018      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <HAL_DMA_IRQHandler+0x6bc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <HAL_DMA_IRQHandler+0x6c0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00e      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_DMA_IRQHandler+0x6c4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <HAL_DMA_IRQHandler+0x6c8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_DMA_IRQHandler+0x678>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <HAL_DMA_IRQHandler+0x6cc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d12b      	bne.n	80021dc <HAL_DMA_IRQHandler+0x6d0>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	e02a      	b.n	80021f0 <HAL_DMA_IRQHandler+0x6e4>
 800219a:	bf00      	nop
 800219c:	40020010 	.word	0x40020010
 80021a0:	40020028 	.word	0x40020028
 80021a4:	40020040 	.word	0x40020040
 80021a8:	40020058 	.word	0x40020058
 80021ac:	40020070 	.word	0x40020070
 80021b0:	40020088 	.word	0x40020088
 80021b4:	400200a0 	.word	0x400200a0
 80021b8:	400200b8 	.word	0x400200b8
 80021bc:	40020410 	.word	0x40020410
 80021c0:	40020428 	.word	0x40020428
 80021c4:	40020440 	.word	0x40020440
 80021c8:	40020458 	.word	0x40020458
 80021cc:	40020470 	.word	0x40020470
 80021d0:	40020488 	.word	0x40020488
 80021d4:	400204a0 	.word	0x400204a0
 80021d8:	400204b8 	.word	0x400204b8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8087 	beq.w	8002304 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2220      	movs	r2, #32
 8002200:	409a      	lsls	r2, r3
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b04      	cmp	r3, #4
 8002210:	d139      	bne.n	8002286 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0216 	bic.w	r2, r2, #22
 8002220:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002230:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <HAL_DMA_IRQHandler+0x736>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0208 	bic.w	r2, r2, #8
 8002250:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	223f      	movs	r2, #63	; 0x3f
 800225c:	409a      	lsls	r2, r3
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 834a 	beq.w	8002910 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
          }
          return;
 8002284:	e344      	b.n	8002910 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d018      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d108      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d02c      	beq.n	8002304 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4798      	blx	r3
 80022b2:	e027      	b.n	8002304 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d023      	beq.n	8002304 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
 80022c4:	e01e      	b.n	8002304 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10f      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0210 	bic.w	r2, r2, #16
 80022e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8306 	beq.w	800291a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8088 	beq.w	800242c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2204      	movs	r2, #4
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a7a      	ldr	r2, [pc, #488]	; (8002514 <HAL_DMA_IRQHandler+0xa08>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d04a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a79      	ldr	r2, [pc, #484]	; (8002518 <HAL_DMA_IRQHandler+0xa0c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d045      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a77      	ldr	r2, [pc, #476]	; (800251c <HAL_DMA_IRQHandler+0xa10>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d040      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a76      	ldr	r2, [pc, #472]	; (8002520 <HAL_DMA_IRQHandler+0xa14>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d03b      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a74      	ldr	r2, [pc, #464]	; (8002524 <HAL_DMA_IRQHandler+0xa18>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d036      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a73      	ldr	r2, [pc, #460]	; (8002528 <HAL_DMA_IRQHandler+0xa1c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d031      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a71      	ldr	r2, [pc, #452]	; (800252c <HAL_DMA_IRQHandler+0xa20>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02c      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a70      	ldr	r2, [pc, #448]	; (8002530 <HAL_DMA_IRQHandler+0xa24>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d027      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_DMA_IRQHandler+0xa28>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d022      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6d      	ldr	r2, [pc, #436]	; (8002538 <HAL_DMA_IRQHandler+0xa2c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d01d      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6b      	ldr	r2, [pc, #428]	; (800253c <HAL_DMA_IRQHandler+0xa30>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d018      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6a      	ldr	r2, [pc, #424]	; (8002540 <HAL_DMA_IRQHandler+0xa34>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a68      	ldr	r2, [pc, #416]	; (8002544 <HAL_DMA_IRQHandler+0xa38>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00e      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a67      	ldr	r2, [pc, #412]	; (8002548 <HAL_DMA_IRQHandler+0xa3c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d009      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a65      	ldr	r2, [pc, #404]	; (800254c <HAL_DMA_IRQHandler+0xa40>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x8b8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a64      	ldr	r2, [pc, #400]	; (8002550 <HAL_DMA_IRQHandler+0xa44>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d108      	bne.n	80023d6 <HAL_DMA_IRQHandler+0x8ca>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e007      	b.n	80023e6 <HAL_DMA_IRQHandler+0x8da>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3301      	adds	r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d307      	bcc.n	8002402 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f2      	bne.n	80023e6 <HAL_DMA_IRQHandler+0x8da>
 8002400:	e000      	b.n	8002404 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002402:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2203      	movs	r2, #3
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800241a:	e003      	b.n	8002424 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8272 	beq.w	800291a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	4798      	blx	r3
 800243e:	e26c      	b.n	800291a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a43      	ldr	r2, [pc, #268]	; (8002554 <HAL_DMA_IRQHandler+0xa48>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d022      	beq.n	8002490 <HAL_DMA_IRQHandler+0x984>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a42      	ldr	r2, [pc, #264]	; (8002558 <HAL_DMA_IRQHandler+0xa4c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d01d      	beq.n	8002490 <HAL_DMA_IRQHandler+0x984>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a40      	ldr	r2, [pc, #256]	; (800255c <HAL_DMA_IRQHandler+0xa50>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d018      	beq.n	8002490 <HAL_DMA_IRQHandler+0x984>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3f      	ldr	r2, [pc, #252]	; (8002560 <HAL_DMA_IRQHandler+0xa54>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_DMA_IRQHandler+0x984>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a3d      	ldr	r2, [pc, #244]	; (8002564 <HAL_DMA_IRQHandler+0xa58>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00e      	beq.n	8002490 <HAL_DMA_IRQHandler+0x984>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a3c      	ldr	r2, [pc, #240]	; (8002568 <HAL_DMA_IRQHandler+0xa5c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_DMA_IRQHandler+0x984>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3a      	ldr	r2, [pc, #232]	; (800256c <HAL_DMA_IRQHandler+0xa60>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_DMA_IRQHandler+0x984>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a39      	ldr	r2, [pc, #228]	; (8002570 <HAL_DMA_IRQHandler+0xa64>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d101      	bne.n	8002494 <HAL_DMA_IRQHandler+0x988>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <HAL_DMA_IRQHandler+0x98a>
 8002494:	2300      	movs	r3, #0
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 823f 	beq.w	800291a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2204      	movs	r2, #4
 80024ae:	409a      	lsls	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80cd 	beq.w	8002654 <HAL_DMA_IRQHandler+0xb48>
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80c7 	beq.w	8002654 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2204      	movs	r2, #4
 80024d0:	409a      	lsls	r2, r3
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d049      	beq.n	8002574 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8210 	beq.w	8002914 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024fc:	e20a      	b.n	8002914 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8206 	beq.w	8002914 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002510:	e200      	b.n	8002914 <HAL_DMA_IRQHandler+0xe08>
 8002512:	bf00      	nop
 8002514:	40020010 	.word	0x40020010
 8002518:	40020028 	.word	0x40020028
 800251c:	40020040 	.word	0x40020040
 8002520:	40020058 	.word	0x40020058
 8002524:	40020070 	.word	0x40020070
 8002528:	40020088 	.word	0x40020088
 800252c:	400200a0 	.word	0x400200a0
 8002530:	400200b8 	.word	0x400200b8
 8002534:	40020410 	.word	0x40020410
 8002538:	40020428 	.word	0x40020428
 800253c:	40020440 	.word	0x40020440
 8002540:	40020458 	.word	0x40020458
 8002544:	40020470 	.word	0x40020470
 8002548:	40020488 	.word	0x40020488
 800254c:	400204a0 	.word	0x400204a0
 8002550:	400204b8 	.word	0x400204b8
 8002554:	58025408 	.word	0x58025408
 8002558:	5802541c 	.word	0x5802541c
 800255c:	58025430 	.word	0x58025430
 8002560:	58025444 	.word	0x58025444
 8002564:	58025458 	.word	0x58025458
 8002568:	5802546c 	.word	0x5802546c
 800256c:	58025480 	.word	0x58025480
 8002570:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d160      	bne.n	8002640 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a8c      	ldr	r2, [pc, #560]	; (80027b4 <HAL_DMA_IRQHandler+0xca8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d04a      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a8a      	ldr	r2, [pc, #552]	; (80027b8 <HAL_DMA_IRQHandler+0xcac>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d045      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a89      	ldr	r2, [pc, #548]	; (80027bc <HAL_DMA_IRQHandler+0xcb0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d040      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a87      	ldr	r2, [pc, #540]	; (80027c0 <HAL_DMA_IRQHandler+0xcb4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d03b      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a86      	ldr	r2, [pc, #536]	; (80027c4 <HAL_DMA_IRQHandler+0xcb8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d036      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a84      	ldr	r2, [pc, #528]	; (80027c8 <HAL_DMA_IRQHandler+0xcbc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d031      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a83      	ldr	r2, [pc, #524]	; (80027cc <HAL_DMA_IRQHandler+0xcc0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d02c      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a81      	ldr	r2, [pc, #516]	; (80027d0 <HAL_DMA_IRQHandler+0xcc4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d027      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a80      	ldr	r2, [pc, #512]	; (80027d4 <HAL_DMA_IRQHandler+0xcc8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d022      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a7e      	ldr	r2, [pc, #504]	; (80027d8 <HAL_DMA_IRQHandler+0xccc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01d      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a7d      	ldr	r2, [pc, #500]	; (80027dc <HAL_DMA_IRQHandler+0xcd0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d018      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7b      	ldr	r2, [pc, #492]	; (80027e0 <HAL_DMA_IRQHandler+0xcd4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7a      	ldr	r2, [pc, #488]	; (80027e4 <HAL_DMA_IRQHandler+0xcd8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00e      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a78      	ldr	r2, [pc, #480]	; (80027e8 <HAL_DMA_IRQHandler+0xcdc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d009      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a77      	ldr	r2, [pc, #476]	; (80027ec <HAL_DMA_IRQHandler+0xce0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d004      	beq.n	800261e <HAL_DMA_IRQHandler+0xb12>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a75      	ldr	r2, [pc, #468]	; (80027f0 <HAL_DMA_IRQHandler+0xce4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d108      	bne.n	8002630 <HAL_DMA_IRQHandler+0xb24>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0208 	bic.w	r2, r2, #8
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e007      	b.n	8002640 <HAL_DMA_IRQHandler+0xb34>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0204 	bic.w	r2, r2, #4
 800263e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8165 	beq.w	8002914 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002652:	e15f      	b.n	8002914 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2202      	movs	r2, #2
 800265e:	409a      	lsls	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80c5 	beq.w	80027f4 <HAL_DMA_IRQHandler+0xce8>
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80bf 	beq.w	80027f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	2202      	movs	r2, #2
 8002680:	409a      	lsls	r2, r3
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d018      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 813a 	beq.w	8002918 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026ac:	e134      	b.n	8002918 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8130 	beq.w	8002918 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026c0:	e12a      	b.n	8002918 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d168      	bne.n	800279e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a38      	ldr	r2, [pc, #224]	; (80027b4 <HAL_DMA_IRQHandler+0xca8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d04a      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a37      	ldr	r2, [pc, #220]	; (80027b8 <HAL_DMA_IRQHandler+0xcac>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d045      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a35      	ldr	r2, [pc, #212]	; (80027bc <HAL_DMA_IRQHandler+0xcb0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d040      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a34      	ldr	r2, [pc, #208]	; (80027c0 <HAL_DMA_IRQHandler+0xcb4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d03b      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a32      	ldr	r2, [pc, #200]	; (80027c4 <HAL_DMA_IRQHandler+0xcb8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d036      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a31      	ldr	r2, [pc, #196]	; (80027c8 <HAL_DMA_IRQHandler+0xcbc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d031      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2f      	ldr	r2, [pc, #188]	; (80027cc <HAL_DMA_IRQHandler+0xcc0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02c      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <HAL_DMA_IRQHandler+0xcc4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d027      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2c      	ldr	r2, [pc, #176]	; (80027d4 <HAL_DMA_IRQHandler+0xcc8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d022      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <HAL_DMA_IRQHandler+0xccc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d01d      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <HAL_DMA_IRQHandler+0xcd0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d018      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <HAL_DMA_IRQHandler+0xcd4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d013      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <HAL_DMA_IRQHandler+0xcd8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00e      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a25      	ldr	r2, [pc, #148]	; (80027e8 <HAL_DMA_IRQHandler+0xcdc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d009      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a23      	ldr	r2, [pc, #140]	; (80027ec <HAL_DMA_IRQHandler+0xce0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d004      	beq.n	800276c <HAL_DMA_IRQHandler+0xc60>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_DMA_IRQHandler+0xce4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d108      	bne.n	800277e <HAL_DMA_IRQHandler+0xc72>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0214 	bic.w	r2, r2, #20
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e007      	b.n	800278e <HAL_DMA_IRQHandler+0xc82>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 020a 	bic.w	r2, r2, #10
 800278c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80b8 	beq.w	8002918 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027b0:	e0b2      	b.n	8002918 <HAL_DMA_IRQHandler+0xe0c>
 80027b2:	bf00      	nop
 80027b4:	40020010 	.word	0x40020010
 80027b8:	40020028 	.word	0x40020028
 80027bc:	40020040 	.word	0x40020040
 80027c0:	40020058 	.word	0x40020058
 80027c4:	40020070 	.word	0x40020070
 80027c8:	40020088 	.word	0x40020088
 80027cc:	400200a0 	.word	0x400200a0
 80027d0:	400200b8 	.word	0x400200b8
 80027d4:	40020410 	.word	0x40020410
 80027d8:	40020428 	.word	0x40020428
 80027dc:	40020440 	.word	0x40020440
 80027e0:	40020458 	.word	0x40020458
 80027e4:	40020470 	.word	0x40020470
 80027e8:	40020488 	.word	0x40020488
 80027ec:	400204a0 	.word	0x400204a0
 80027f0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	2208      	movs	r2, #8
 80027fe:	409a      	lsls	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8088 	beq.w	800291a <HAL_DMA_IRQHandler+0xe0e>
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8082 	beq.w	800291a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a41      	ldr	r2, [pc, #260]	; (8002920 <HAL_DMA_IRQHandler+0xe14>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d04a      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3f      	ldr	r2, [pc, #252]	; (8002924 <HAL_DMA_IRQHandler+0xe18>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d045      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a3e      	ldr	r2, [pc, #248]	; (8002928 <HAL_DMA_IRQHandler+0xe1c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d040      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3c      	ldr	r2, [pc, #240]	; (800292c <HAL_DMA_IRQHandler+0xe20>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d03b      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a3b      	ldr	r2, [pc, #236]	; (8002930 <HAL_DMA_IRQHandler+0xe24>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d036      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a39      	ldr	r2, [pc, #228]	; (8002934 <HAL_DMA_IRQHandler+0xe28>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d031      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a38      	ldr	r2, [pc, #224]	; (8002938 <HAL_DMA_IRQHandler+0xe2c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d02c      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a36      	ldr	r2, [pc, #216]	; (800293c <HAL_DMA_IRQHandler+0xe30>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d027      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a35      	ldr	r2, [pc, #212]	; (8002940 <HAL_DMA_IRQHandler+0xe34>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d022      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a33      	ldr	r2, [pc, #204]	; (8002944 <HAL_DMA_IRQHandler+0xe38>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01d      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a32      	ldr	r2, [pc, #200]	; (8002948 <HAL_DMA_IRQHandler+0xe3c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d018      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a30      	ldr	r2, [pc, #192]	; (800294c <HAL_DMA_IRQHandler+0xe40>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <HAL_DMA_IRQHandler+0xe44>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <HAL_DMA_IRQHandler+0xe48>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2c      	ldr	r2, [pc, #176]	; (8002958 <HAL_DMA_IRQHandler+0xe4c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xdaa>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2a      	ldr	r2, [pc, #168]	; (800295c <HAL_DMA_IRQHandler+0xe50>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <HAL_DMA_IRQHandler+0xdbc>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 021c 	bic.w	r2, r2, #28
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e007      	b.n	80028d8 <HAL_DMA_IRQHandler+0xdcc>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 020e 	bic.w	r2, r2, #14
 80028d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2201      	movs	r2, #1
 80028e2:	409a      	lsls	r2, r3
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
 800290e:	e004      	b.n	800291a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002910:	bf00      	nop
 8002912:	e002      	b.n	800291a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002914:	bf00      	nop
 8002916:	e000      	b.n	800291a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002918:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40020010 	.word	0x40020010
 8002924:	40020028 	.word	0x40020028
 8002928:	40020040 	.word	0x40020040
 800292c:	40020058 	.word	0x40020058
 8002930:	40020070 	.word	0x40020070
 8002934:	40020088 	.word	0x40020088
 8002938:	400200a0 	.word	0x400200a0
 800293c:	400200b8 	.word	0x400200b8
 8002940:	40020410 	.word	0x40020410
 8002944:	40020428 	.word	0x40020428
 8002948:	40020440 	.word	0x40020440
 800294c:	40020458 	.word	0x40020458
 8002950:	40020470 	.word	0x40020470
 8002954:	40020488 	.word	0x40020488
 8002958:	400204a0 	.word	0x400204a0
 800295c:	400204b8 	.word	0x400204b8

08002960 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296e:	b2db      	uxtb	r3, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a84      	ldr	r2, [pc, #528]	; (8002bc4 <DMA_SetConfig+0x230>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d072      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a82      	ldr	r2, [pc, #520]	; (8002bc8 <DMA_SetConfig+0x234>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d06d      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a81      	ldr	r2, [pc, #516]	; (8002bcc <DMA_SetConfig+0x238>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d068      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a7f      	ldr	r2, [pc, #508]	; (8002bd0 <DMA_SetConfig+0x23c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d063      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7e      	ldr	r2, [pc, #504]	; (8002bd4 <DMA_SetConfig+0x240>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d05e      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a7c      	ldr	r2, [pc, #496]	; (8002bd8 <DMA_SetConfig+0x244>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d059      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7b      	ldr	r2, [pc, #492]	; (8002bdc <DMA_SetConfig+0x248>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d054      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a79      	ldr	r2, [pc, #484]	; (8002be0 <DMA_SetConfig+0x24c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d04f      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a78      	ldr	r2, [pc, #480]	; (8002be4 <DMA_SetConfig+0x250>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d04a      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a76      	ldr	r2, [pc, #472]	; (8002be8 <DMA_SetConfig+0x254>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d045      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a75      	ldr	r2, [pc, #468]	; (8002bec <DMA_SetConfig+0x258>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d040      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a73      	ldr	r2, [pc, #460]	; (8002bf0 <DMA_SetConfig+0x25c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d03b      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a72      	ldr	r2, [pc, #456]	; (8002bf4 <DMA_SetConfig+0x260>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d036      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a70      	ldr	r2, [pc, #448]	; (8002bf8 <DMA_SetConfig+0x264>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d031      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6f      	ldr	r2, [pc, #444]	; (8002bfc <DMA_SetConfig+0x268>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d02c      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6d      	ldr	r2, [pc, #436]	; (8002c00 <DMA_SetConfig+0x26c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d027      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6c      	ldr	r2, [pc, #432]	; (8002c04 <DMA_SetConfig+0x270>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a6a      	ldr	r2, [pc, #424]	; (8002c08 <DMA_SetConfig+0x274>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01d      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a69      	ldr	r2, [pc, #420]	; (8002c0c <DMA_SetConfig+0x278>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d018      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a67      	ldr	r2, [pc, #412]	; (8002c10 <DMA_SetConfig+0x27c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <DMA_SetConfig+0x280>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a64      	ldr	r2, [pc, #400]	; (8002c18 <DMA_SetConfig+0x284>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a63      	ldr	r2, [pc, #396]	; (8002c1c <DMA_SetConfig+0x288>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <DMA_SetConfig+0x10a>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a61      	ldr	r2, [pc, #388]	; (8002c20 <DMA_SetConfig+0x28c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <DMA_SetConfig+0x10e>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <DMA_SetConfig+0x110>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00d      	beq.n	8002ac4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ab0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ac2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a3e      	ldr	r2, [pc, #248]	; (8002bc4 <DMA_SetConfig+0x230>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d04a      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a3d      	ldr	r2, [pc, #244]	; (8002bc8 <DMA_SetConfig+0x234>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d045      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <DMA_SetConfig+0x238>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d040      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a3a      	ldr	r2, [pc, #232]	; (8002bd0 <DMA_SetConfig+0x23c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d03b      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a38      	ldr	r2, [pc, #224]	; (8002bd4 <DMA_SetConfig+0x240>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d036      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a37      	ldr	r2, [pc, #220]	; (8002bd8 <DMA_SetConfig+0x244>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d031      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a35      	ldr	r2, [pc, #212]	; (8002bdc <DMA_SetConfig+0x248>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d02c      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a34      	ldr	r2, [pc, #208]	; (8002be0 <DMA_SetConfig+0x24c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d027      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a32      	ldr	r2, [pc, #200]	; (8002be4 <DMA_SetConfig+0x250>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d022      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a31      	ldr	r2, [pc, #196]	; (8002be8 <DMA_SetConfig+0x254>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d01d      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2f      	ldr	r2, [pc, #188]	; (8002bec <DMA_SetConfig+0x258>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d018      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2e      	ldr	r2, [pc, #184]	; (8002bf0 <DMA_SetConfig+0x25c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d013      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2c      	ldr	r2, [pc, #176]	; (8002bf4 <DMA_SetConfig+0x260>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00e      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a2b      	ldr	r2, [pc, #172]	; (8002bf8 <DMA_SetConfig+0x264>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d009      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <DMA_SetConfig+0x268>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d004      	beq.n	8002b64 <DMA_SetConfig+0x1d0>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <DMA_SetConfig+0x26c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d101      	bne.n	8002b68 <DMA_SetConfig+0x1d4>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <DMA_SetConfig+0x1d6>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d05a      	beq.n	8002c24 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	223f      	movs	r2, #63	; 0x3f
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b8c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d108      	bne.n	8002bb0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002bae:	e087      	b.n	8002cc0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
}
 8002bc0:	e07e      	b.n	8002cc0 <DMA_SetConfig+0x32c>
 8002bc2:	bf00      	nop
 8002bc4:	40020010 	.word	0x40020010
 8002bc8:	40020028 	.word	0x40020028
 8002bcc:	40020040 	.word	0x40020040
 8002bd0:	40020058 	.word	0x40020058
 8002bd4:	40020070 	.word	0x40020070
 8002bd8:	40020088 	.word	0x40020088
 8002bdc:	400200a0 	.word	0x400200a0
 8002be0:	400200b8 	.word	0x400200b8
 8002be4:	40020410 	.word	0x40020410
 8002be8:	40020428 	.word	0x40020428
 8002bec:	40020440 	.word	0x40020440
 8002bf0:	40020458 	.word	0x40020458
 8002bf4:	40020470 	.word	0x40020470
 8002bf8:	40020488 	.word	0x40020488
 8002bfc:	400204a0 	.word	0x400204a0
 8002c00:	400204b8 	.word	0x400204b8
 8002c04:	58025408 	.word	0x58025408
 8002c08:	5802541c 	.word	0x5802541c
 8002c0c:	58025430 	.word	0x58025430
 8002c10:	58025444 	.word	0x58025444
 8002c14:	58025458 	.word	0x58025458
 8002c18:	5802546c 	.word	0x5802546c
 8002c1c:	58025480 	.word	0x58025480
 8002c20:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <DMA_SetConfig+0x338>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d022      	beq.n	8002c74 <DMA_SetConfig+0x2e0>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <DMA_SetConfig+0x33c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d01d      	beq.n	8002c74 <DMA_SetConfig+0x2e0>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <DMA_SetConfig+0x340>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d018      	beq.n	8002c74 <DMA_SetConfig+0x2e0>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <DMA_SetConfig+0x344>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d013      	beq.n	8002c74 <DMA_SetConfig+0x2e0>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <DMA_SetConfig+0x348>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00e      	beq.n	8002c74 <DMA_SetConfig+0x2e0>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <DMA_SetConfig+0x34c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d009      	beq.n	8002c74 <DMA_SetConfig+0x2e0>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <DMA_SetConfig+0x350>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <DMA_SetConfig+0x2e0>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <DMA_SetConfig+0x354>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <DMA_SetConfig+0x2e4>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <DMA_SetConfig+0x2e6>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d020      	beq.n	8002cc0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2201      	movs	r2, #1
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d108      	bne.n	8002cb0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	60da      	str	r2, [r3, #12]
}
 8002cae:	e007      	b.n	8002cc0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	60da      	str	r2, [r3, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	58025408 	.word	0x58025408
 8002cd0:	5802541c 	.word	0x5802541c
 8002cd4:	58025430 	.word	0x58025430
 8002cd8:	58025444 	.word	0x58025444
 8002cdc:	58025458 	.word	0x58025458
 8002ce0:	5802546c 	.word	0x5802546c
 8002ce4:	58025480 	.word	0x58025480
 8002ce8:	58025494 	.word	0x58025494

08002cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a42      	ldr	r2, [pc, #264]	; (8002e04 <DMA_CalcBaseAndBitshift+0x118>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04a      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a41      	ldr	r2, [pc, #260]	; (8002e08 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d045      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a3f      	ldr	r2, [pc, #252]	; (8002e0c <DMA_CalcBaseAndBitshift+0x120>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d040      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a3e      	ldr	r2, [pc, #248]	; (8002e10 <DMA_CalcBaseAndBitshift+0x124>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d03b      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3c      	ldr	r2, [pc, #240]	; (8002e14 <DMA_CalcBaseAndBitshift+0x128>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d036      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3b      	ldr	r2, [pc, #236]	; (8002e18 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d031      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a39      	ldr	r2, [pc, #228]	; (8002e1c <DMA_CalcBaseAndBitshift+0x130>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02c      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a38      	ldr	r2, [pc, #224]	; (8002e20 <DMA_CalcBaseAndBitshift+0x134>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d027      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <DMA_CalcBaseAndBitshift+0x138>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d022      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a35      	ldr	r2, [pc, #212]	; (8002e28 <DMA_CalcBaseAndBitshift+0x13c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01d      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <DMA_CalcBaseAndBitshift+0x140>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a32      	ldr	r2, [pc, #200]	; (8002e30 <DMA_CalcBaseAndBitshift+0x144>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a30      	ldr	r2, [pc, #192]	; (8002e34 <DMA_CalcBaseAndBitshift+0x148>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <DMA_CalcBaseAndBitshift+0x14c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <DMA_CalcBaseAndBitshift+0x150>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <DMA_CalcBaseAndBitshift+0xa8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <DMA_CalcBaseAndBitshift+0x154>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <DMA_CalcBaseAndBitshift+0xac>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <DMA_CalcBaseAndBitshift+0xae>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d024      	beq.n	8002de8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	3b10      	subs	r3, #16
 8002da6:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <DMA_CalcBaseAndBitshift+0x158>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <DMA_CalcBaseAndBitshift+0x15c>)
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d908      	bls.n	8002dd8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <DMA_CalcBaseAndBitshift+0x160>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	1d1a      	adds	r2, r3, #4
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	; 0x58
 8002dd6:	e00d      	b.n	8002df4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <DMA_CalcBaseAndBitshift+0x160>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6593      	str	r3, [r2, #88]	; 0x58
 8002de6:	e005      	b.n	8002df4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40020010 	.word	0x40020010
 8002e08:	40020028 	.word	0x40020028
 8002e0c:	40020040 	.word	0x40020040
 8002e10:	40020058 	.word	0x40020058
 8002e14:	40020070 	.word	0x40020070
 8002e18:	40020088 	.word	0x40020088
 8002e1c:	400200a0 	.word	0x400200a0
 8002e20:	400200b8 	.word	0x400200b8
 8002e24:	40020410 	.word	0x40020410
 8002e28:	40020428 	.word	0x40020428
 8002e2c:	40020440 	.word	0x40020440
 8002e30:	40020458 	.word	0x40020458
 8002e34:	40020470 	.word	0x40020470
 8002e38:	40020488 	.word	0x40020488
 8002e3c:	400204a0 	.word	0x400204a0
 8002e40:	400204b8 	.word	0x400204b8
 8002e44:	aaaaaaab 	.word	0xaaaaaaab
 8002e48:	0800b040 	.word	0x0800b040
 8002e4c:	fffffc00 	.word	0xfffffc00

08002e50 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d120      	bne.n	8002ea6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d858      	bhi.n	8002f1e <DMA_CheckFifoParam+0xce>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <DMA_CheckFifoParam+0x24>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e97 	.word	0x08002e97
 8002e7c:	08002e85 	.word	0x08002e85
 8002e80:	08002f1f 	.word	0x08002f1f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d048      	beq.n	8002f22 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e94:	e045      	b.n	8002f22 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e9e:	d142      	bne.n	8002f26 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ea4:	e03f      	b.n	8002f26 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eae:	d123      	bne.n	8002ef8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d838      	bhi.n	8002f2a <DMA_CheckFifoParam+0xda>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <DMA_CheckFifoParam+0x70>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08002ed7 	.word	0x08002ed7
 8002ec8:	08002ed1 	.word	0x08002ed1
 8002ecc:	08002ee9 	.word	0x08002ee9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
        break;
 8002ed4:	e030      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d025      	beq.n	8002f2e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ee6:	e022      	b.n	8002f2e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef0:	d11f      	bne.n	8002f32 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ef6:	e01c      	b.n	8002f32 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d902      	bls.n	8002f06 <DMA_CheckFifoParam+0xb6>
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d003      	beq.n	8002f0c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f04:	e018      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
        break;
 8002f0a:	e015      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00e      	beq.n	8002f36 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8002f1c:	e00b      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
        break;
 8002f1e:	bf00      	nop
 8002f20:	e00a      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
        break;
 8002f22:	bf00      	nop
 8002f24:	e008      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
        break;
 8002f26:	bf00      	nop
 8002f28:	e006      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
        break;
 8002f2a:	bf00      	nop
 8002f2c:	e004      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
        break;
 8002f2e:	bf00      	nop
 8002f30:	e002      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
        break;
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
    break;
 8002f36:	bf00      	nop
    }
  }

  return status;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop

08002f48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a38      	ldr	r2, [pc, #224]	; (800303c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a36      	ldr	r2, [pc, #216]	; (8003040 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01d      	beq.n	8002fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a35      	ldr	r2, [pc, #212]	; (8003044 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a33      	ldr	r2, [pc, #204]	; (8003048 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a32      	ldr	r2, [pc, #200]	; (800304c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a30      	ldr	r2, [pc, #192]	; (8003050 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2f      	ldr	r2, [pc, #188]	; (8003054 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2d      	ldr	r2, [pc, #180]	; (8003058 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01a      	beq.n	8002fe6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3b08      	subs	r3, #8
 8002fb8:	4a28      	ldr	r2, [pc, #160]	; (800305c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a24      	ldr	r2, [pc, #144]	; (8003064 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002fd4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	2201      	movs	r2, #1
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002fe4:	e024      	b.n	8003030 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	3b10      	subs	r3, #16
 8002fee:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4a1c      	ldr	r2, [pc, #112]	; (800306c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d806      	bhi.n	800300e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d902      	bls.n	800300e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3308      	adds	r3, #8
 800300c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4b18      	ldr	r3, [pc, #96]	; (8003074 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a16      	ldr	r2, [pc, #88]	; (8003078 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003020:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2201      	movs	r2, #1
 800302a:	409a      	lsls	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	58025408 	.word	0x58025408
 8003040:	5802541c 	.word	0x5802541c
 8003044:	58025430 	.word	0x58025430
 8003048:	58025444 	.word	0x58025444
 800304c:	58025458 	.word	0x58025458
 8003050:	5802546c 	.word	0x5802546c
 8003054:	58025480 	.word	0x58025480
 8003058:	58025494 	.word	0x58025494
 800305c:	cccccccd 	.word	0xcccccccd
 8003060:	16009600 	.word	0x16009600
 8003064:	58025880 	.word	0x58025880
 8003068:	aaaaaaab 	.word	0xaaaaaaab
 800306c:	400204b8 	.word	0x400204b8
 8003070:	4002040f 	.word	0x4002040f
 8003074:	10008200 	.word	0x10008200
 8003078:	40020880 	.word	0x40020880

0800307c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d04a      	beq.n	8003128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d847      	bhi.n	8003128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a25      	ldr	r2, [pc, #148]	; (8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d022      	beq.n	80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a24      	ldr	r2, [pc, #144]	; (8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d01d      	beq.n	80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d018      	beq.n	80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a21      	ldr	r2, [pc, #132]	; (8003140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00e      	beq.n	80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1c      	ldr	r2, [pc, #112]	; (800314c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80030ec:	2300      	movs	r3, #0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4b17      	ldr	r3, [pc, #92]	; (8003154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	461a      	mov	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a15      	ldr	r2, [pc, #84]	; (8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003104:	671a      	str	r2, [r3, #112]	; 0x70
 8003106:	e009      	b.n	800311c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	461a      	mov	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a11      	ldr	r2, [pc, #68]	; (8003160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800311a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3b01      	subs	r3, #1
 8003120:	2201      	movs	r2, #1
 8003122:	409a      	lsls	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	58025408 	.word	0x58025408
 8003138:	5802541c 	.word	0x5802541c
 800313c:	58025430 	.word	0x58025430
 8003140:	58025444 	.word	0x58025444
 8003144:	58025458 	.word	0x58025458
 8003148:	5802546c 	.word	0x5802546c
 800314c:	58025480 	.word	0x58025480
 8003150:	58025494 	.word	0x58025494
 8003154:	1600963f 	.word	0x1600963f
 8003158:	58025940 	.word	0x58025940
 800315c:	1000823f 	.word	0x1000823f
 8003160:	40020940 	.word	0x40020940

08003164 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	7a1b      	ldrb	r3, [r3, #8]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d155      	bne.n	800322a <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a4b      	ldr	r2, [pc, #300]	; (80032b0 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d049      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a49      	ldr	r2, [pc, #292]	; (80032b4 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d044      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a48      	ldr	r2, [pc, #288]	; (80032b8 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d03f      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a46      	ldr	r2, [pc, #280]	; (80032bc <HAL_DMAEx_ConfigMuxSync+0x158>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d03a      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a45      	ldr	r2, [pc, #276]	; (80032c0 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d035      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a43      	ldr	r2, [pc, #268]	; (80032c4 <HAL_DMAEx_ConfigMuxSync+0x160>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d030      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a42      	ldr	r2, [pc, #264]	; (80032c8 <HAL_DMAEx_ConfigMuxSync+0x164>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d02b      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a40      	ldr	r2, [pc, #256]	; (80032cc <HAL_DMAEx_ConfigMuxSync+0x168>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d026      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a3f      	ldr	r2, [pc, #252]	; (80032d0 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d021      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a3d      	ldr	r2, [pc, #244]	; (80032d4 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01c      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a3c      	ldr	r2, [pc, #240]	; (80032d8 <HAL_DMAEx_ConfigMuxSync+0x174>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d017      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a3a      	ldr	r2, [pc, #232]	; (80032dc <HAL_DMAEx_ConfigMuxSync+0x178>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d012      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a39      	ldr	r2, [pc, #228]	; (80032e0 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00d      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a37      	ldr	r2, [pc, #220]	; (80032e4 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d008      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a36      	ldr	r2, [pc, #216]	; (80032e8 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a34      	ldr	r2, [pc, #208]	; (80032ec <HAL_DMAEx_ConfigMuxSync+0x188>)
 800321a:	4293      	cmp	r3, r2
 800321c:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d131      	bne.n	800329a <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8003240:	2302      	movs	r3, #2
 8003242:	e02f      	b.n	80032a4 <HAL_DMAEx_ConfigMuxSync+0x140>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 800325a:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b2d9      	uxtb	r1, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	061a      	lsls	r2, r3, #24
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	3b01      	subs	r3, #1
 800326e:	04db      	lsls	r3, r3, #19
 8003270:	431a      	orrs	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	431a      	orrs	r2, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	7a1b      	ldrb	r3, [r3, #8]
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	431a      	orrs	r2, r3
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	7a5b      	ldrb	r3, [r3, #9]
 8003282:	025b      	lsls	r3, r3, #9
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	430a      	orrs	r2, r1
 800328c:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e004      	b.n	80032a4 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40020010 	.word	0x40020010
 80032b4:	40020028 	.word	0x40020028
 80032b8:	40020040 	.word	0x40020040
 80032bc:	40020058 	.word	0x40020058
 80032c0:	40020070 	.word	0x40020070
 80032c4:	40020088 	.word	0x40020088
 80032c8:	400200a0 	.word	0x400200a0
 80032cc:	400200b8 	.word	0x400200b8
 80032d0:	40020410 	.word	0x40020410
 80032d4:	40020428 	.word	0x40020428
 80032d8:	40020440 	.word	0x40020440
 80032dc:	40020458 	.word	0x40020458
 80032e0:	40020470 	.word	0x40020470
 80032e4:	40020488 	.word	0x40020488
 80032e8:	400204a0 	.word	0x400204a0
 80032ec:	400204b8 	.word	0x400204b8

080032f0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01a      	beq.n	800333e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003316:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003320:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003326:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d022      	beq.n	800338c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01a      	beq.n	800338c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003364:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800336e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
      }
    }
  }
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033a2:	4b86      	ldr	r3, [pc, #536]	; (80035bc <HAL_GPIO_Init+0x228>)
 80033a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033a6:	e18c      	b.n	80036c2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2101      	movs	r1, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 817e 	beq.w	80036bc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d005      	beq.n	80033d8 <HAL_GPIO_Init+0x44>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d130      	bne.n	800343a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	2203      	movs	r2, #3
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800340e:	2201      	movs	r2, #1
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 0201 	and.w	r2, r3, #1
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b03      	cmp	r3, #3
 8003444:	d017      	beq.n	8003476 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d123      	bne.n	80034ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	08da      	lsrs	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	220f      	movs	r2, #15
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	08da      	lsrs	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3208      	adds	r2, #8
 80034c4:	69b9      	ldr	r1, [r7, #24]
 80034c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2203      	movs	r2, #3
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0203 	and.w	r2, r3, #3
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80d8 	beq.w	80036bc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350c:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <HAL_GPIO_Init+0x22c>)
 800350e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003512:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <HAL_GPIO_Init+0x22c>)
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800351c:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_GPIO_Init+0x22c>)
 800351e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352a:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_GPIO_Init+0x230>)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_GPIO_Init+0x234>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d04a      	beq.n	80035ec <HAL_GPIO_Init+0x258>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <HAL_GPIO_Init+0x238>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02b      	beq.n	80035b6 <HAL_GPIO_Init+0x222>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <HAL_GPIO_Init+0x23c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d025      	beq.n	80035b2 <HAL_GPIO_Init+0x21e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_GPIO_Init+0x240>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <HAL_GPIO_Init+0x21a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_GPIO_Init+0x244>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_Init+0x216>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a18      	ldr	r2, [pc, #96]	; (80035dc <HAL_GPIO_Init+0x248>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_GPIO_Init+0x212>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a17      	ldr	r2, [pc, #92]	; (80035e0 <HAL_GPIO_Init+0x24c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00d      	beq.n	80035a2 <HAL_GPIO_Init+0x20e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <HAL_GPIO_Init+0x250>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_Init+0x20a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_GPIO_Init+0x254>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_GPIO_Init+0x206>
 8003596:	2309      	movs	r3, #9
 8003598:	e029      	b.n	80035ee <HAL_GPIO_Init+0x25a>
 800359a:	230a      	movs	r3, #10
 800359c:	e027      	b.n	80035ee <HAL_GPIO_Init+0x25a>
 800359e:	2307      	movs	r3, #7
 80035a0:	e025      	b.n	80035ee <HAL_GPIO_Init+0x25a>
 80035a2:	2306      	movs	r3, #6
 80035a4:	e023      	b.n	80035ee <HAL_GPIO_Init+0x25a>
 80035a6:	2305      	movs	r3, #5
 80035a8:	e021      	b.n	80035ee <HAL_GPIO_Init+0x25a>
 80035aa:	2304      	movs	r3, #4
 80035ac:	e01f      	b.n	80035ee <HAL_GPIO_Init+0x25a>
 80035ae:	2303      	movs	r3, #3
 80035b0:	e01d      	b.n	80035ee <HAL_GPIO_Init+0x25a>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e01b      	b.n	80035ee <HAL_GPIO_Init+0x25a>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e019      	b.n	80035ee <HAL_GPIO_Init+0x25a>
 80035ba:	bf00      	nop
 80035bc:	58000080 	.word	0x58000080
 80035c0:	58024400 	.word	0x58024400
 80035c4:	58000400 	.word	0x58000400
 80035c8:	58020000 	.word	0x58020000
 80035cc:	58020400 	.word	0x58020400
 80035d0:	58020800 	.word	0x58020800
 80035d4:	58020c00 	.word	0x58020c00
 80035d8:	58021000 	.word	0x58021000
 80035dc:	58021400 	.word	0x58021400
 80035e0:	58021800 	.word	0x58021800
 80035e4:	58021c00 	.word	0x58021c00
 80035e8:	58022400 	.word	0x58022400
 80035ec:	2300      	movs	r3, #0
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	f002 0203 	and.w	r2, r2, #3
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	4093      	lsls	r3, r2
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035fe:	4938      	ldr	r1, [pc, #224]	; (80036e0 <HAL_GPIO_Init+0x34c>)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800363a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	3301      	adds	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f ae6b 	bne.w	80033a8 <HAL_GPIO_Init+0x14>
  }
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	3724      	adds	r7, #36	; 0x24
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	58000400 	.word	0x58000400

080036e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
 80036f0:	4613      	mov	r3, r2
 80036f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036f4:	787b      	ldrb	r3, [r7, #1]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fa:	887a      	ldrh	r2, [r7, #2]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003700:	e003      	b.n	800370a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	041a      	lsls	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	619a      	str	r2, [r3, #24]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f804 	bl	800374a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e07f      	b.n	8003872 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f005 f8a4 	bl	80088d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d107      	bne.n	80037da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	e006      	b.n	80037e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d104      	bne.n	80037fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <HAL_I2C_Init+0x11c>)
 8003806:	430b      	orrs	r3, r1
 8003808:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003818:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69d9      	ldr	r1, [r3, #28]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1a      	ldr	r2, [r3, #32]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	02008000 	.word	0x02008000

08003880 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	09db      	lsrs	r3, r3, #7
 80038a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	0a9b      	lsrs	r3, r3, #10
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d010      	beq.n	80038f4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	09db      	lsrs	r3, r3, #7
 80038d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f043 0208 	orr.w	r2, r3, #8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038f2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	0a5b      	lsrs	r3, r3, #9
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d010      	beq.n	8003922 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	09db      	lsrs	r3, r3, #7
 8003904:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f043 0202 	orr.w	r2, r3, #2
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003920:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 030b 	and.w	r3, r3, #11
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fc77 	bl	8004228 <I2C_ITError>
  }
}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	70fb      	strb	r3, [r7, #3]
 8003976:	4613      	mov	r3, r2
 8003978:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b086      	sub	sp, #24
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <I2C_Slave_ISR_IT+0x24>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e0ec      	b.n	8003bc0 <I2C_Slave_ISR_IT+0x1fe>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a06:	6939      	ldr	r1, [r7, #16]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f9bf 	bl	8003d8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d04d      	beq.n	8003ab6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d047      	beq.n	8003ab6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d128      	bne.n	8003a82 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b28      	cmp	r3, #40	; 0x28
 8003a3a:	d108      	bne.n	8003a4e <I2C_Slave_ISR_IT+0x8c>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a42:	d104      	bne.n	8003a4e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a44:	6939      	ldr	r1, [r7, #16]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fb98 	bl	800417c <I2C_ITListenCplt>
 8003a4c:	e032      	b.n	8003ab4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b29      	cmp	r3, #41	; 0x29
 8003a58:	d10e      	bne.n	8003a78 <I2C_Slave_ISR_IT+0xb6>
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a60:	d00a      	beq.n	8003a78 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2210      	movs	r2, #16
 8003a68:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fcd3 	bl	8004416 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f92d 	bl	8003cd0 <I2C_ITSlaveSeqCplt>
 8003a76:	e01d      	b.n	8003ab4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003a80:	e096      	b.n	8003bb0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2210      	movs	r2, #16
 8003a88:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	f043 0204 	orr.w	r2, r3, #4
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d004      	beq.n	8003aa6 <I2C_Slave_ISR_IT+0xe4>
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa2:	f040 8085 	bne.w	8003bb0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	4619      	mov	r1, r3
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fbbb 	bl	8004228 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ab2:	e07d      	b.n	8003bb0 <I2C_Slave_ISR_IT+0x1ee>
 8003ab4:	e07c      	b.n	8003bb0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d030      	beq.n	8003b24 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d02a      	beq.n	8003b24 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d018      	beq.n	8003b0a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d14f      	bne.n	8003bb4 <I2C_Slave_ISR_IT+0x1f2>
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b1a:	d04b      	beq.n	8003bb4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f8d7 	bl	8003cd0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003b22:	e047      	b.n	8003bb4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	08db      	lsrs	r3, r3, #3
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003b3c:	6939      	ldr	r1, [r7, #16]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f842 	bl	8003bc8 <I2C_ITAddrCplt>
 8003b44:	e037      	b.n	8003bb6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d031      	beq.n	8003bb6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d02b      	beq.n	8003bb6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d018      	beq.n	8003b9a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	781a      	ldrb	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
 8003b98:	e00d      	b.n	8003bb6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba0:	d002      	beq.n	8003ba8 <I2C_Slave_ISR_IT+0x1e6>
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f891 	bl	8003cd0 <I2C_ITSlaveSeqCplt>
 8003bae:	e002      	b.n	8003bb6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003bb0:	bf00      	nop
 8003bb2:	e000      	b.n	8003bb6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003bb4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bde:	2b28      	cmp	r3, #40	; 0x28
 8003be0:	d16a      	bne.n	8003cb8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003c00:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c0e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003c1c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d138      	bne.n	8003c98 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003c26:	897b      	ldrh	r3, [r7, #10]
 8003c28:	09db      	lsrs	r3, r3, #7
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	89bb      	ldrh	r3, [r7, #12]
 8003c2e:	4053      	eors	r3, r2
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f003 0306 	and.w	r3, r3, #6
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11c      	bne.n	8003c74 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003c3a:	897b      	ldrh	r3, [r7, #10]
 8003c3c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d13b      	bne.n	8003cc8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c66:	89ba      	ldrh	r2, [r7, #12]
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fe7c 	bl	800396a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c72:	e029      	b.n	8003cc8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003c74:	893b      	ldrh	r3, [r7, #8]
 8003c76:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fc0c 	bl	800449a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c8a:	89ba      	ldrh	r2, [r7, #12]
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fe6a 	bl	800396a <HAL_I2C_AddrCallback>
}
 8003c96:	e017      	b.n	8003cc8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fbfc 	bl	800449a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003caa:	89ba      	ldrh	r2, [r7, #12]
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fe5a 	bl	800396a <HAL_I2C_AddrCallback>
}
 8003cb6:	e007      	b.n	8003cc8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	0b9b      	lsrs	r3, r3, #14
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e00d      	b.n	8003d22 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	0bdb      	lsrs	r3, r3, #15
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d20:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b29      	cmp	r3, #41	; 0x29
 8003d2c:	d112      	bne.n	8003d54 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2228      	movs	r2, #40	; 0x28
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2221      	movs	r2, #33	; 0x21
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fbab 	bl	800449a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fdf8 	bl	8003942 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d52:	e017      	b.n	8003d84 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d5e:	d111      	bne.n	8003d84 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2228      	movs	r2, #40	; 0x28
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2222      	movs	r2, #34	; 0x22
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d6e:	2102      	movs	r1, #2
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fb92 	bl	800449a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fde9 	bl	8003956 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2220      	movs	r2, #32
 8003db0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	2b21      	cmp	r3, #33	; 0x21
 8003db6:	d002      	beq.n	8003dbe <I2C_ITSlaveCplt+0x32>
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b29      	cmp	r3, #41	; 0x29
 8003dbc:	d108      	bne.n	8003dd0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003dbe:	f248 0101 	movw	r1, #32769	; 0x8001
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fb69 	bl	800449a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2221      	movs	r2, #33	; 0x21
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8003dce:	e00d      	b.n	8003dec <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b22      	cmp	r3, #34	; 0x22
 8003dd4:	d002      	beq.n	8003ddc <I2C_ITSlaveCplt+0x50>
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8003dda:	d107      	bne.n	8003dec <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003ddc:	f248 0102 	movw	r1, #32770	; 0x8002
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fb5a 	bl	800449a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2222      	movs	r2, #34	; 0x22
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b80      	ldr	r3, [pc, #512]	; (8004008 <I2C_ITSlaveCplt+0x27c>)
 8003e08:	400b      	ands	r3, r1
 8003e0a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fb02 	bl	8004416 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	0b9b      	lsrs	r3, r3, #14
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d07a      	beq.n	8003f14 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e2c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8111 	beq.w	800405a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a73      	ldr	r2, [pc, #460]	; (800400c <I2C_ITSlaveCplt+0x280>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d059      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a71      	ldr	r2, [pc, #452]	; (8004010 <I2C_ITSlaveCplt+0x284>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d053      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a6f      	ldr	r2, [pc, #444]	; (8004014 <I2C_ITSlaveCplt+0x288>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d04d      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a6d      	ldr	r2, [pc, #436]	; (8004018 <I2C_ITSlaveCplt+0x28c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d047      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6b      	ldr	r2, [pc, #428]	; (800401c <I2C_ITSlaveCplt+0x290>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d041      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a69      	ldr	r2, [pc, #420]	; (8004020 <I2C_ITSlaveCplt+0x294>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d03b      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a67      	ldr	r2, [pc, #412]	; (8004024 <I2C_ITSlaveCplt+0x298>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d035      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a65      	ldr	r2, [pc, #404]	; (8004028 <I2C_ITSlaveCplt+0x29c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d02f      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a63      	ldr	r2, [pc, #396]	; (800402c <I2C_ITSlaveCplt+0x2a0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d029      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a61      	ldr	r2, [pc, #388]	; (8004030 <I2C_ITSlaveCplt+0x2a4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d023      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a5f      	ldr	r2, [pc, #380]	; (8004034 <I2C_ITSlaveCplt+0x2a8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d01d      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a5d      	ldr	r2, [pc, #372]	; (8004038 <I2C_ITSlaveCplt+0x2ac>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d017      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a5b      	ldr	r2, [pc, #364]	; (800403c <I2C_ITSlaveCplt+0x2b0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d011      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a59      	ldr	r2, [pc, #356]	; (8004040 <I2C_ITSlaveCplt+0x2b4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a57      	ldr	r2, [pc, #348]	; (8004044 <I2C_ITSlaveCplt+0x2b8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d005      	beq.n	8003ef8 <I2C_ITSlaveCplt+0x16c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a55      	ldr	r2, [pc, #340]	; (8004048 <I2C_ITSlaveCplt+0x2bc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d105      	bne.n	8003f04 <I2C_ITSlaveCplt+0x178>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	e004      	b.n	8003f0e <I2C_ITSlaveCplt+0x182>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	8553      	strh	r3, [r2, #42]	; 0x2a
 8003f12:	e0a2      	b.n	800405a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	0bdb      	lsrs	r3, r3, #15
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 809c 	beq.w	800405a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f30:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 808f 	beq.w	800405a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a32      	ldr	r2, [pc, #200]	; (800400c <I2C_ITSlaveCplt+0x280>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d059      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a30      	ldr	r2, [pc, #192]	; (8004010 <I2C_ITSlaveCplt+0x284>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d053      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2e      	ldr	r2, [pc, #184]	; (8004014 <I2C_ITSlaveCplt+0x288>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04d      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a2c      	ldr	r2, [pc, #176]	; (8004018 <I2C_ITSlaveCplt+0x28c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d047      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2a      	ldr	r2, [pc, #168]	; (800401c <I2C_ITSlaveCplt+0x290>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d041      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a28      	ldr	r2, [pc, #160]	; (8004020 <I2C_ITSlaveCplt+0x294>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d03b      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a26      	ldr	r2, [pc, #152]	; (8004024 <I2C_ITSlaveCplt+0x298>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d035      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a24      	ldr	r2, [pc, #144]	; (8004028 <I2C_ITSlaveCplt+0x29c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d02f      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a22      	ldr	r2, [pc, #136]	; (800402c <I2C_ITSlaveCplt+0x2a0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d029      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <I2C_ITSlaveCplt+0x2a4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d023      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <I2C_ITSlaveCplt+0x2a8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d01d      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <I2C_ITSlaveCplt+0x2ac>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d017      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1a      	ldr	r2, [pc, #104]	; (800403c <I2C_ITSlaveCplt+0x2b0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d011      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a18      	ldr	r2, [pc, #96]	; (8004040 <I2C_ITSlaveCplt+0x2b4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a16      	ldr	r2, [pc, #88]	; (8004044 <I2C_ITSlaveCplt+0x2b8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d005      	beq.n	8003ffc <I2C_ITSlaveCplt+0x270>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a14      	ldr	r2, [pc, #80]	; (8004048 <I2C_ITSlaveCplt+0x2bc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d127      	bne.n	800404c <I2C_ITSlaveCplt+0x2c0>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	b29b      	uxth	r3, r3
 8004006:	e026      	b.n	8004056 <I2C_ITSlaveCplt+0x2ca>
 8004008:	fe00e800 	.word	0xfe00e800
 800400c:	40020010 	.word	0x40020010
 8004010:	40020028 	.word	0x40020028
 8004014:	40020040 	.word	0x40020040
 8004018:	40020058 	.word	0x40020058
 800401c:	40020070 	.word	0x40020070
 8004020:	40020088 	.word	0x40020088
 8004024:	400200a0 	.word	0x400200a0
 8004028:	400200b8 	.word	0x400200b8
 800402c:	40020410 	.word	0x40020410
 8004030:	40020428 	.word	0x40020428
 8004034:	40020440 	.word	0x40020440
 8004038:	40020458 	.word	0x40020458
 800403c:	40020470 	.word	0x40020470
 8004040:	40020488 	.word	0x40020488
 8004044:	400204a0 	.word	0x400204a0
 8004048:	400204b8 	.word	0x400204b8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	b29b      	uxth	r3, r3
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d020      	beq.n	80040a8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d8:	4619      	mov	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8a4 	bl	8004228 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b28      	cmp	r3, #40	; 0x28
 80040ea:	d141      	bne.n	8004170 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80040ec:	6979      	ldr	r1, [r7, #20]
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f844 	bl	800417c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040f4:	e03c      	b.n	8004170 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040fe:	d014      	beq.n	800412a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fde5 	bl	8003cd0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <I2C_ITSlaveCplt+0x3ec>)
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fc2f 	bl	8003986 <HAL_I2C_ListenCpltCallback>
}
 8004128:	e022      	b.n	8004170 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b22      	cmp	r3, #34	; 0x22
 8004134:	d10e      	bne.n	8004154 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fc02 	bl	8003956 <HAL_I2C_SlaveRxCpltCallback>
}
 8004152:	e00d      	b.n	8004170 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fbe9 	bl	8003942 <HAL_I2C_SlaveTxCpltCallback>
}
 8004170:	bf00      	nop
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	ffff0000 	.word	0xffff0000

0800417c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a26      	ldr	r2, [pc, #152]	; (8004224 <I2C_ITListenCplt+0xa8>)
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d022      	beq.n	80041fa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d012      	beq.n	80041fa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	f043 0204 	orr.w	r2, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041fa:	f248 0103 	movw	r1, #32771	; 0x8003
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f94b 	bl	800449a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2210      	movs	r2, #16
 800420a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fbb6 	bl	8003986 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	ffff0000 	.word	0xffff0000

08004228 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a5d      	ldr	r2, [pc, #372]	; (80043bc <I2C_ITError+0x194>)
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b28      	cmp	r3, #40	; 0x28
 800425e:	d005      	beq.n	800426c <I2C_ITError+0x44>
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b29      	cmp	r3, #41	; 0x29
 8004264:	d002      	beq.n	800426c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	2b2a      	cmp	r3, #42	; 0x2a
 800426a:	d10b      	bne.n	8004284 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800426c:	2103      	movs	r1, #3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f913 	bl	800449a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2228      	movs	r2, #40	; 0x28
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a50      	ldr	r2, [pc, #320]	; (80043c0 <I2C_ITError+0x198>)
 8004280:	635a      	str	r2, [r3, #52]	; 0x34
 8004282:	e011      	b.n	80042a8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004284:	f248 0103 	movw	r1, #32771	; 0x8003
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f906 	bl	800449a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b60      	cmp	r3, #96	; 0x60
 8004298:	d003      	beq.n	80042a2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d039      	beq.n	800432a <I2C_ITError+0x102>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b11      	cmp	r3, #17
 80042ba:	d002      	beq.n	80042c2 <I2C_ITError+0x9a>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b21      	cmp	r3, #33	; 0x21
 80042c0:	d133      	bne.n	800432a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d0:	d107      	bne.n	80042e2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fe fb3a 	bl	8002960 <HAL_DMA_GetState>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d017      	beq.n	8004322 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <I2C_ITError+0x19c>)
 80042f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	4618      	mov	r0, r3
 8004308:	f7fd f9bc 	bl	8001684 <HAL_DMA_Abort_IT>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d04d      	beq.n	80043ae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800431c:	4610      	mov	r0, r2
 800431e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004320:	e045      	b.n	80043ae <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f850 	bl	80043c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004328:	e041      	b.n	80043ae <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d039      	beq.n	80043a6 <I2C_ITError+0x17e>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b12      	cmp	r3, #18
 8004336:	d002      	beq.n	800433e <I2C_ITError+0x116>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b22      	cmp	r3, #34	; 0x22
 800433c:	d133      	bne.n	80043a6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434c:	d107      	bne.n	800435e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800435c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fafc 	bl	8002960 <HAL_DMA_GetState>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d017      	beq.n	800439e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <I2C_ITError+0x19c>)
 8004374:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	4618      	mov	r0, r3
 8004384:	f7fd f97e 	bl	8001684 <HAL_DMA_Abort_IT>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d011      	beq.n	80043b2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004398:	4610      	mov	r0, r2
 800439a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800439c:	e009      	b.n	80043b2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f812 	bl	80043c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043a4:	e005      	b.n	80043b2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f80e 	bl	80043c8 <I2C_TreatErrorCallback>
  }
}
 80043ac:	e002      	b.n	80043b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043b2:	bf00      	nop
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	ffff0000 	.word	0xffff0000
 80043c0:	080039c3 	.word	0x080039c3
 80043c4:	0800445f 	.word	0x0800445f

080043c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b60      	cmp	r3, #96	; 0x60
 80043da:	d10e      	bne.n	80043fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fadb 	bl	80039ae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043f8:	e009      	b.n	800440e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff fac6 	bl	800399a <HAL_I2C_ErrorCallback>
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b02      	cmp	r3, #2
 800442a:	d103      	bne.n	8004434 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2200      	movs	r2, #0
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d007      	beq.n	8004452 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0201 	orr.w	r2, r2, #1
 8004450:	619a      	str	r2, [r3, #24]
  }
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	2200      	movs	r2, #0
 800447a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004488:	2200      	movs	r2, #0
 800448a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f7ff ff9b 	bl	80043c8 <I2C_TreatErrorCallback>
}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044aa:	887b      	ldrh	r3, [r7, #2]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00f      	beq.n	80044d4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80044ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044c8:	2b28      	cmp	r3, #40	; 0x28
 80044ca:	d003      	beq.n	80044d4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80044d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044d4:	887b      	ldrh	r3, [r7, #2]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00f      	beq.n	80044fe <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80044e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044f2:	2b28      	cmp	r3, #40	; 0x28
 80044f4:	d003      	beq.n	80044fe <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80044fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004502:	2b00      	cmp	r3, #0
 8004504:	da03      	bge.n	800450e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800450c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800450e:	887b      	ldrh	r3, [r7, #2]
 8004510:	2b10      	cmp	r3, #16
 8004512:	d103      	bne.n	800451c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800451a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	2b20      	cmp	r3, #32
 8004520:	d103      	bne.n	800452a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f043 0320 	orr.w	r3, r3, #32
 8004528:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d103      	bne.n	8004538 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004536:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	43da      	mvns	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	400a      	ands	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b20      	cmp	r3, #32
 800456a:	d138      	bne.n	80045de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004576:	2302      	movs	r3, #2
 8004578:	e032      	b.n	80045e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2224      	movs	r2, #36	; 0x24
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d139      	bne.n	8004676 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800460c:	2302      	movs	r3, #2
 800460e:	e033      	b.n	8004678 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	; 0x24
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800463e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004676:	2302      	movs	r3, #2
  }
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800468c:	4b29      	ldr	r3, [pc, #164]	; (8004734 <HAL_PWREx_ConfigSupply+0xb0>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	2b06      	cmp	r3, #6
 8004696:	d00a      	beq.n	80046ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004698:	4b26      	ldr	r3, [pc, #152]	; (8004734 <HAL_PWREx_ConfigSupply+0xb0>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d001      	beq.n	80046aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e03f      	b.n	800472a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e03d      	b.n	800472a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046ae:	4b21      	ldr	r3, [pc, #132]	; (8004734 <HAL_PWREx_ConfigSupply+0xb0>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80046b6:	491f      	ldr	r1, [pc, #124]	; (8004734 <HAL_PWREx_ConfigSupply+0xb0>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046be:	f7fb ff9b 	bl	80005f8 <HAL_GetTick>
 80046c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046c4:	e009      	b.n	80046da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046c6:	f7fb ff97 	bl	80005f8 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d4:	d901      	bls.n	80046da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e027      	b.n	800472a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046da:	4b16      	ldr	r3, [pc, #88]	; (8004734 <HAL_PWREx_ConfigSupply+0xb0>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e6:	d1ee      	bne.n	80046c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b1e      	cmp	r3, #30
 80046ec:	d008      	beq.n	8004700 <HAL_PWREx_ConfigSupply+0x7c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b2e      	cmp	r3, #46	; 0x2e
 80046f2:	d005      	beq.n	8004700 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b1d      	cmp	r3, #29
 80046f8:	d002      	beq.n	8004700 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b2d      	cmp	r3, #45	; 0x2d
 80046fe:	d113      	bne.n	8004728 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004700:	f7fb ff7a 	bl	80005f8 <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004706:	e009      	b.n	800471c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004708:	f7fb ff76 	bl	80005f8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004716:	d901      	bls.n	800471c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e006      	b.n	800472a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <HAL_PWREx_ConfigSupply+0xb0>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0311 	and.w	r3, r3, #17
 8004724:	2b11      	cmp	r3, #17
 8004726:	d1ef      	bne.n	8004708 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	58024800 	.word	0x58024800

08004738 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e02d      	b.n	80047a6 <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0220 	bic.w	r2, r2, #32
 800475e:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004772:	f023 030f 	bic.w	r3, r3, #15
 8004776:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 021c 	bic.w	r2, r2, #28
 8004786:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0207 	bic.w	r2, r2, #7
 8004796:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08c      	sub	sp, #48	; 0x30
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e397      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8087 	beq.w	80048e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d4:	4b9e      	ldr	r3, [pc, #632]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047de:	4b9c      	ldr	r3, [pc, #624]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d007      	beq.n	80047fa <HAL_RCC_OscConfig+0x46>
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	2b18      	cmp	r3, #24
 80047ee:	d110      	bne.n	8004812 <HAL_RCC_OscConfig+0x5e>
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d10b      	bne.n	8004812 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fa:	4b95      	ldr	r3, [pc, #596]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d06c      	beq.n	80048e0 <HAL_RCC_OscConfig+0x12c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d168      	bne.n	80048e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e371      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481a:	d106      	bne.n	800482a <HAL_RCC_OscConfig+0x76>
 800481c:	4b8c      	ldr	r3, [pc, #560]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a8b      	ldr	r2, [pc, #556]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	e02e      	b.n	8004888 <HAL_RCC_OscConfig+0xd4>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10c      	bne.n	800484c <HAL_RCC_OscConfig+0x98>
 8004832:	4b87      	ldr	r3, [pc, #540]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a86      	ldr	r2, [pc, #536]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4b84      	ldr	r3, [pc, #528]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a83      	ldr	r2, [pc, #524]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e01d      	b.n	8004888 <HAL_RCC_OscConfig+0xd4>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0xbc>
 8004856:	4b7e      	ldr	r3, [pc, #504]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7d      	ldr	r2, [pc, #500]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4b7b      	ldr	r3, [pc, #492]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7a      	ldr	r2, [pc, #488]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0xd4>
 8004870:	4b77      	ldr	r3, [pc, #476]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a76      	ldr	r2, [pc, #472]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b74      	ldr	r3, [pc, #464]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a73      	ldr	r2, [pc, #460]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fb feb2 	bl	80005f8 <HAL_GetTick>
 8004894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004898:	f7fb feae 	bl	80005f8 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e325      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048aa:	4b69      	ldr	r3, [pc, #420]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0xe4>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fb fe9e 	bl	80005f8 <HAL_GetTick>
 80048bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fb fe9a 	bl	80005f8 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	; 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e311      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048d2:	4b5f      	ldr	r3, [pc, #380]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x10c>
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 808a 	beq.w	8004a04 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048f0:	4b57      	ldr	r3, [pc, #348]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048fa:	4b55      	ldr	r3, [pc, #340]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_RCC_OscConfig+0x162>
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	2b18      	cmp	r3, #24
 800490a:	d137      	bne.n	800497c <HAL_RCC_OscConfig+0x1c8>
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d132      	bne.n	800497c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004916:	4b4e      	ldr	r3, [pc, #312]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_RCC_OscConfig+0x17a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e2e3      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800492e:	4b48      	ldr	r3, [pc, #288]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0219 	bic.w	r2, r3, #25
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	4945      	ldr	r1, [pc, #276]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004940:	f7fb fe5a 	bl	80005f8 <HAL_GetTick>
 8004944:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004948:	f7fb fe56 	bl	80005f8 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e2cd      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800495a:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004966:	4b3a      	ldr	r3, [pc, #232]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	061b      	lsls	r3, r3, #24
 8004974:	4936      	ldr	r1, [pc, #216]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800497a:	e043      	b.n	8004a04 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d026      	beq.n	80049d2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004984:	4b32      	ldr	r3, [pc, #200]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f023 0219 	bic.w	r2, r3, #25
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	492f      	ldr	r1, [pc, #188]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004996:	f7fb fe2f 	bl	80005f8 <HAL_GetTick>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800499e:	f7fb fe2b 	bl	80005f8 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e2a2      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049b0:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049bc:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	4921      	ldr	r1, [pc, #132]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
 80049d0:	e018      	b.n	8004a04 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d2:	4b1f      	ldr	r3, [pc, #124]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fb fe0b 	bl	80005f8 <HAL_GetTick>
 80049e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e6:	f7fb fe07 	bl	80005f8 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e27e      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f0      	bne.n	80049e6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d06d      	beq.n	8004aec <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d007      	beq.n	8004a36 <HAL_RCC_OscConfig+0x282>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b18      	cmp	r3, #24
 8004a2a:	d11e      	bne.n	8004a6a <HAL_RCC_OscConfig+0x2b6>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d119      	bne.n	8004a6a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_RCC_OscConfig+0x29c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d008      	beq.n	8004a54 <HAL_RCC_OscConfig+0x2a0>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	2b80      	cmp	r3, #128	; 0x80
 8004a48:	d004      	beq.n	8004a54 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e253      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
 8004a4e:	bf00      	nop
 8004a50:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a54:	4ba3      	ldr	r3, [pc, #652]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	061b      	lsls	r3, r3, #24
 8004a62:	49a0      	ldr	r1, [pc, #640]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a68:	e040      	b.n	8004aec <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d023      	beq.n	8004aba <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a72:	4b9c      	ldr	r3, [pc, #624]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a9b      	ldr	r2, [pc, #620]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7e:	f7fb fdbb 	bl	80005f8 <HAL_GetTick>
 8004a82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a86:	f7fb fdb7 	bl	80005f8 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e22e      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a98:	4b92      	ldr	r3, [pc, #584]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aa4:	4b8f      	ldr	r3, [pc, #572]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	498c      	ldr	r1, [pc, #560]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60cb      	str	r3, [r1, #12]
 8004ab8:	e018      	b.n	8004aec <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004aba:	4b8a      	ldr	r3, [pc, #552]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a89      	ldr	r2, [pc, #548]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac6:	f7fb fd97 	bl	80005f8 <HAL_GetTick>
 8004aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ace:	f7fb fd93 	bl	80005f8 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e20a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ae0:	4b80      	ldr	r3, [pc, #512]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f0      	bne.n	8004ace <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d036      	beq.n	8004b66 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d019      	beq.n	8004b34 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b00:	4b78      	ldr	r3, [pc, #480]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b04:	4a77      	ldr	r2, [pc, #476]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7fb fd74 	bl	80005f8 <HAL_GetTick>
 8004b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b14:	f7fb fd70 	bl	80005f8 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e1e7      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b26:	4b6f      	ldr	r3, [pc, #444]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0x360>
 8004b32:	e018      	b.n	8004b66 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b34:	4b6b      	ldr	r3, [pc, #428]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b38:	4a6a      	ldr	r2, [pc, #424]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004b3a:	f023 0301 	bic.w	r3, r3, #1
 8004b3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fb fd5a 	bl	80005f8 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b48:	f7fb fd56 	bl	80005f8 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e1cd      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b5a:	4b62      	ldr	r3, [pc, #392]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d036      	beq.n	8004be0 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d019      	beq.n	8004bae <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b7a:	4b5a      	ldr	r3, [pc, #360]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a59      	ldr	r2, [pc, #356]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b86:	f7fb fd37 	bl	80005f8 <HAL_GetTick>
 8004b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b8e:	f7fb fd33 	bl	80005f8 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e1aa      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ba0:	4b50      	ldr	r3, [pc, #320]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x3da>
 8004bac:	e018      	b.n	8004be0 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bae:	4b4d      	ldr	r3, [pc, #308]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a4c      	ldr	r2, [pc, #304]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bba:	f7fb fd1d 	bl	80005f8 <HAL_GetTick>
 8004bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004bc2:	f7fb fd19 	bl	80005f8 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e190      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bd4:	4b43      	ldr	r3, [pc, #268]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8085 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bee:	4b3e      	ldr	r3, [pc, #248]	; (8004ce8 <HAL_RCC_OscConfig+0x534>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a3d      	ldr	r2, [pc, #244]	; (8004ce8 <HAL_RCC_OscConfig+0x534>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bfa:	f7fb fcfd 	bl	80005f8 <HAL_GetTick>
 8004bfe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fb fcf9 	bl	80005f8 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b64      	cmp	r3, #100	; 0x64
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e170      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c14:	4b34      	ldr	r3, [pc, #208]	; (8004ce8 <HAL_RCC_OscConfig+0x534>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d106      	bne.n	8004c36 <HAL_RCC_OscConfig+0x482>
 8004c28:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	6713      	str	r3, [r2, #112]	; 0x70
 8004c34:	e02d      	b.n	8004c92 <HAL_RCC_OscConfig+0x4de>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCC_OscConfig+0x4a4>
 8004c3e:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	4a28      	ldr	r2, [pc, #160]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4a:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	4a25      	ldr	r2, [pc, #148]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c50:	f023 0304 	bic.w	r3, r3, #4
 8004c54:	6713      	str	r3, [r2, #112]	; 0x70
 8004c56:	e01c      	b.n	8004c92 <HAL_RCC_OscConfig+0x4de>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d10c      	bne.n	8004c7a <HAL_RCC_OscConfig+0x4c6>
 8004c60:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c66:	f043 0304 	orr.w	r3, r3, #4
 8004c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6713      	str	r3, [r2, #112]	; 0x70
 8004c78:	e00b      	b.n	8004c92 <HAL_RCC_OscConfig+0x4de>
 8004c7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	6713      	str	r3, [r2, #112]	; 0x70
 8004c86:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004c8c:	f023 0304 	bic.w	r3, r3, #4
 8004c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d015      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fb fcad 	bl	80005f8 <HAL_GetTick>
 8004c9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fb fca9 	bl	80005f8 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e11e      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <HAL_RCC_OscConfig+0x530>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0ee      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x4ee>
 8004cc4:	e018      	b.n	8004cf8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc6:	f7fb fc97 	bl	80005f8 <HAL_GetTick>
 8004cca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ccc:	e00e      	b.n	8004cec <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cce:	f7fb fc93 	bl	80005f8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d905      	bls.n	8004cec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e108      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cec:	4b84      	ldr	r3, [pc, #528]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1ea      	bne.n	8004cce <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80f9 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d02:	4b7f      	ldr	r3, [pc, #508]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d0a:	2b18      	cmp	r3, #24
 8004d0c:	f000 80b4 	beq.w	8004e78 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	f040 8095 	bne.w	8004e44 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1a:	4b79      	ldr	r3, [pc, #484]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a78      	ldr	r2, [pc, #480]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fb fc67 	bl	80005f8 <HAL_GetTick>
 8004d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7fb fc63 	bl	80005f8 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e0da      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d40:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d4c:	4b6c      	ldr	r3, [pc, #432]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d50:	4b6c      	ldr	r3, [pc, #432]	; (8004f04 <HAL_RCC_OscConfig+0x750>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d5c:	0112      	lsls	r2, r2, #4
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	4967      	ldr	r1, [pc, #412]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	628b      	str	r3, [r1, #40]	; 0x28
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	3b01      	subs	r3, #1
 8004d76:	025b      	lsls	r3, r3, #9
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	3b01      	subs	r3, #1
 8004d82:	041b      	lsls	r3, r3, #16
 8004d84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d96:	495a      	ldr	r1, [pc, #360]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004d9c:	4b58      	ldr	r3, [pc, #352]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	4a57      	ldr	r2, [pc, #348]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004da2:	f023 0301 	bic.w	r3, r3, #1
 8004da6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004da8:	4b55      	ldr	r3, [pc, #340]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dac:	4b56      	ldr	r3, [pc, #344]	; (8004f08 <HAL_RCC_OscConfig+0x754>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004db4:	00d2      	lsls	r2, r2, #3
 8004db6:	4952      	ldr	r1, [pc, #328]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004dbc:	4b50      	ldr	r3, [pc, #320]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	f023 020c 	bic.w	r2, r3, #12
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	494d      	ldr	r1, [pc, #308]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004dce:	4b4c      	ldr	r3, [pc, #304]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	f023 0202 	bic.w	r2, r3, #2
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	4949      	ldr	r1, [pc, #292]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004de0:	4b47      	ldr	r3, [pc, #284]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	4a46      	ldr	r2, [pc, #280]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dec:	4b44      	ldr	r3, [pc, #272]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	4a43      	ldr	r2, [pc, #268]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004df8:	4b41      	ldr	r3, [pc, #260]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	4a40      	ldr	r2, [pc, #256]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004e04:	4b3e      	ldr	r3, [pc, #248]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	4a3d      	ldr	r2, [pc, #244]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e10:	4b3b      	ldr	r3, [pc, #236]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a3a      	ldr	r2, [pc, #232]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fb fbec 	bl	80005f8 <HAL_GetTick>
 8004e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e24:	f7fb fbe8 	bl	80005f8 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e05f      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e36:	4b32      	ldr	r3, [pc, #200]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCC_OscConfig+0x670>
 8004e42:	e057      	b.n	8004ef4 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e44:	4b2e      	ldr	r3, [pc, #184]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2d      	ldr	r2, [pc, #180]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fb fbd2 	bl	80005f8 <HAL_GetTick>
 8004e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fb fbce 	bl	80005f8 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e045      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e6a:	4b25      	ldr	r3, [pc, #148]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x6a4>
 8004e76:	e03d      	b.n	8004ef4 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e78:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e7e:	4b20      	ldr	r3, [pc, #128]	; (8004f00 <HAL_RCC_OscConfig+0x74c>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d031      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f003 0203 	and.w	r2, r3, #3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d12a      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d122      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d11a      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	0a5b      	lsrs	r3, r3, #9
 8004ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d111      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d108      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	0e1b      	lsrs	r3, r3, #24
 8004ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3730      	adds	r7, #48	; 0x30
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	58024400 	.word	0x58024400
 8004f04:	fffffc0c 	.word	0xfffffc0c
 8004f08:	ffff0007 	.word	0xffff0007

08004f0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e19c      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f20:	4b8a      	ldr	r3, [pc, #552]	; (800514c <HAL_RCC_ClockConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d910      	bls.n	8004f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b87      	ldr	r3, [pc, #540]	; (800514c <HAL_RCC_ClockConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 020f 	bic.w	r2, r3, #15
 8004f36:	4985      	ldr	r1, [pc, #532]	; (800514c <HAL_RCC_ClockConfig+0x240>)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	4b83      	ldr	r3, [pc, #524]	; (800514c <HAL_RCC_ClockConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e184      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d010      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	4b7b      	ldr	r3, [pc, #492]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d908      	bls.n	8004f7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f6c:	4b78      	ldr	r3, [pc, #480]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	4975      	ldr	r1, [pc, #468]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d010      	beq.n	8004fac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	4b70      	ldr	r3, [pc, #448]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d908      	bls.n	8004fac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f9a:	4b6d      	ldr	r3, [pc, #436]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	496a      	ldr	r1, [pc, #424]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	4b64      	ldr	r3, [pc, #400]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d908      	bls.n	8004fda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fc8:	4b61      	ldr	r3, [pc, #388]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	495e      	ldr	r1, [pc, #376]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	4b59      	ldr	r3, [pc, #356]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d908      	bls.n	8005008 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ff6:	4b56      	ldr	r3, [pc, #344]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	4953      	ldr	r1, [pc, #332]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005004:	4313      	orrs	r3, r2
 8005006:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	4b4d      	ldr	r3, [pc, #308]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	429a      	cmp	r2, r3
 8005022:	d908      	bls.n	8005036 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b4a      	ldr	r3, [pc, #296]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f023 020f 	bic.w	r2, r3, #15
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4947      	ldr	r1, [pc, #284]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005032:	4313      	orrs	r3, r2
 8005034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d055      	beq.n	80050ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005042:	4b43      	ldr	r3, [pc, #268]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	4940      	ldr	r1, [pc, #256]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005050:	4313      	orrs	r3, r2
 8005052:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d107      	bne.n	800506c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800505c:	4b3c      	ldr	r3, [pc, #240]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d121      	bne.n	80050ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0f6      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d107      	bne.n	8005084 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005074:	4b36      	ldr	r3, [pc, #216]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d115      	bne.n	80050ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0ea      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d107      	bne.n	800509c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800508c:	4b30      	ldr	r3, [pc, #192]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0de      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0d6      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050ac:	4b28      	ldr	r3, [pc, #160]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f023 0207 	bic.w	r2, r3, #7
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4925      	ldr	r1, [pc, #148]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050be:	f7fb fa9b 	bl	80005f8 <HAL_GetTick>
 80050c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c6:	f7fb fa97 	bl	80005f8 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e0be      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050dc:	4b1c      	ldr	r3, [pc, #112]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d1eb      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d010      	beq.n	800511c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	4b14      	ldr	r3, [pc, #80]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	429a      	cmp	r2, r3
 8005108:	d208      	bcs.n	800511c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f023 020f 	bic.w	r2, r3, #15
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	490e      	ldr	r1, [pc, #56]	; (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005118:	4313      	orrs	r3, r2
 800511a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <HAL_RCC_ClockConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d214      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b08      	ldr	r3, [pc, #32]	; (800514c <HAL_RCC_ClockConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 020f 	bic.w	r2, r3, #15
 8005132:	4906      	ldr	r1, [pc, #24]	; (800514c <HAL_RCC_ClockConfig+0x240>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <HAL_RCC_ClockConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e086      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
 800514c:	52002000 	.word	0x52002000
 8005150:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d010      	beq.n	8005182 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	4b3f      	ldr	r3, [pc, #252]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800516c:	429a      	cmp	r2, r3
 800516e:	d208      	bcs.n	8005182 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005170:	4b3c      	ldr	r3, [pc, #240]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	4939      	ldr	r1, [pc, #228]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 800517e:	4313      	orrs	r3, r2
 8005180:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d010      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	4b34      	ldr	r3, [pc, #208]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800519a:	429a      	cmp	r2, r3
 800519c:	d208      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800519e:	4b31      	ldr	r3, [pc, #196]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	492e      	ldr	r1, [pc, #184]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d010      	beq.n	80051de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699a      	ldr	r2, [r3, #24]
 80051c0:	4b28      	ldr	r3, [pc, #160]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d208      	bcs.n	80051de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051cc:	4b25      	ldr	r3, [pc, #148]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	4922      	ldr	r1, [pc, #136]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d010      	beq.n	800520c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d208      	bcs.n	800520c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80051fa:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	4917      	ldr	r1, [pc, #92]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 8005208:	4313      	orrs	r3, r2
 800520a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800520c:	f000 f834 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b14      	ldr	r3, [pc, #80]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	4912      	ldr	r1, [pc, #72]	; (8005268 <HAL_RCC_ClockConfig+0x35c>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
 8005228:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800522a:	4b0e      	ldr	r3, [pc, #56]	; (8005264 <HAL_RCC_ClockConfig+0x358>)
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <HAL_RCC_ClockConfig+0x35c>)
 8005234:	5cd3      	ldrb	r3, [r2, r3]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
 8005240:	4a0a      	ldr	r2, [pc, #40]	; (800526c <HAL_RCC_ClockConfig+0x360>)
 8005242:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005244:	4a0a      	ldr	r2, [pc, #40]	; (8005270 <HAL_RCC_ClockConfig+0x364>)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800524a:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <HAL_RCC_ClockConfig+0x368>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fb f988 	bl	8000564 <HAL_InitTick>
 8005254:	4603      	mov	r3, r0
 8005256:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400
 8005268:	0800b048 	.word	0x0800b048
 800526c:	24000418 	.word	0x24000418
 8005270:	24000414 	.word	0x24000414
 8005274:	24000408 	.word	0x24000408

08005278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005278:	b480      	push	{r7}
 800527a:	b089      	sub	sp, #36	; 0x24
 800527c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800527e:	4bb3      	ldr	r3, [pc, #716]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005286:	2b18      	cmp	r3, #24
 8005288:	f200 8155 	bhi.w	8005536 <HAL_RCC_GetSysClockFreq+0x2be>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <HAL_RCC_GetSysClockFreq+0x1c>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052f9 	.word	0x080052f9
 8005298:	08005537 	.word	0x08005537
 800529c:	08005537 	.word	0x08005537
 80052a0:	08005537 	.word	0x08005537
 80052a4:	08005537 	.word	0x08005537
 80052a8:	08005537 	.word	0x08005537
 80052ac:	08005537 	.word	0x08005537
 80052b0:	08005537 	.word	0x08005537
 80052b4:	0800531f 	.word	0x0800531f
 80052b8:	08005537 	.word	0x08005537
 80052bc:	08005537 	.word	0x08005537
 80052c0:	08005537 	.word	0x08005537
 80052c4:	08005537 	.word	0x08005537
 80052c8:	08005537 	.word	0x08005537
 80052cc:	08005537 	.word	0x08005537
 80052d0:	08005537 	.word	0x08005537
 80052d4:	08005325 	.word	0x08005325
 80052d8:	08005537 	.word	0x08005537
 80052dc:	08005537 	.word	0x08005537
 80052e0:	08005537 	.word	0x08005537
 80052e4:	08005537 	.word	0x08005537
 80052e8:	08005537 	.word	0x08005537
 80052ec:	08005537 	.word	0x08005537
 80052f0:	08005537 	.word	0x08005537
 80052f4:	0800532b 	.word	0x0800532b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052f8:	4b94      	ldr	r3, [pc, #592]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005304:	4b91      	ldr	r3, [pc, #580]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	08db      	lsrs	r3, r3, #3
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	4a90      	ldr	r2, [pc, #576]	; (8005550 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005316:	e111      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005318:	4b8d      	ldr	r3, [pc, #564]	; (8005550 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800531a:	61bb      	str	r3, [r7, #24]
    break;
 800531c:	e10e      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800531e:	4b8d      	ldr	r3, [pc, #564]	; (8005554 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005320:	61bb      	str	r3, [r7, #24]
    break;
 8005322:	e10b      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005324:	4b8c      	ldr	r3, [pc, #560]	; (8005558 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005326:	61bb      	str	r3, [r7, #24]
    break;
 8005328:	e108      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800532a:	4b88      	ldr	r3, [pc, #544]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005334:	4b85      	ldr	r3, [pc, #532]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800533e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005340:	4b82      	ldr	r3, [pc, #520]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800534a:	4b80      	ldr	r3, [pc, #512]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	08db      	lsrs	r3, r3, #3
 8005350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005362:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80e1 	beq.w	8005530 <HAL_RCC_GetSysClockFreq+0x2b8>
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b02      	cmp	r3, #2
 8005372:	f000 8083 	beq.w	800547c <HAL_RCC_GetSysClockFreq+0x204>
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b02      	cmp	r3, #2
 800537a:	f200 80a1 	bhi.w	80054c0 <HAL_RCC_GetSysClockFreq+0x248>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_RCC_GetSysClockFreq+0x114>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d056      	beq.n	8005438 <HAL_RCC_GetSysClockFreq+0x1c0>
 800538a:	e099      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800538c:	4b6f      	ldr	r3, [pc, #444]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02d      	beq.n	80053f4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005398:	4b6c      	ldr	r3, [pc, #432]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	08db      	lsrs	r3, r3, #3
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	4a6b      	ldr	r2, [pc, #428]	; (8005550 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
 80053a8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c2:	4b62      	ldr	r3, [pc, #392]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800555c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80053f2:	e087      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005560 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005406:	4b51      	ldr	r3, [pc, #324]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005416:	ed97 6a02 	vldr	s12, [r7, #8]
 800541a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800555c <HAL_RCC_GetSysClockFreq+0x2e4>
 800541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005436:	e065      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005564 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544a:	4b40      	ldr	r3, [pc, #256]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545a:	ed97 6a02 	vldr	s12, [r7, #8]
 800545e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800555c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800547a:	e043      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005486:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005568 <HAL_RCC_GetSysClockFreq+0x2f0>
 800548a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548e:	4b2f      	ldr	r3, [pc, #188]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549e:	ed97 6a02 	vldr	s12, [r7, #8]
 80054a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800555c <HAL_RCC_GetSysClockFreq+0x2e4>
 80054a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054be:	e021      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005564 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d2:	4b1e      	ldr	r3, [pc, #120]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800555c <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005502:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005504:	4b11      	ldr	r3, [pc, #68]	; (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	0a5b      	lsrs	r3, r3, #9
 800550a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550e:	3301      	adds	r3, #1
 8005510:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800551c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005528:	ee17 3a90 	vmov	r3, s15
 800552c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800552e:	e005      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]
    break;
 8005534:	e002      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005536:	4b07      	ldr	r3, [pc, #28]	; (8005554 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005538:	61bb      	str	r3, [r7, #24]
    break;
 800553a:	bf00      	nop
  }

  return sysclockfreq;
 800553c:	69bb      	ldr	r3, [r7, #24]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3724      	adds	r7, #36	; 0x24
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	58024400 	.word	0x58024400
 8005550:	03d09000 	.word	0x03d09000
 8005554:	003d0900 	.word	0x003d0900
 8005558:	017d7840 	.word	0x017d7840
 800555c:	46000000 	.word	0x46000000
 8005560:	4c742400 	.word	0x4c742400
 8005564:	4a742400 	.word	0x4a742400
 8005568:	4bbebc20 	.word	0x4bbebc20

0800556c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005572:	f7ff fe81 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8005576:	4602      	mov	r2, r0
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <HAL_RCC_GetHCLKFreq+0x50>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	0a1b      	lsrs	r3, r3, #8
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	490f      	ldr	r1, [pc, #60]	; (80055c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005584:	5ccb      	ldrb	r3, [r1, r3]
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	fa22 f303 	lsr.w	r3, r2, r3
 800558e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <HAL_RCC_GetHCLKFreq+0x50>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800559a:	5cd3      	ldrb	r3, [r2, r3]
 800559c:	f003 031f 	and.w	r3, r3, #31
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	fa22 f303 	lsr.w	r3, r2, r3
 80055a6:	4a07      	ldr	r2, [pc, #28]	; (80055c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80055a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055aa:	4a07      	ldr	r2, [pc, #28]	; (80055c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	58024400 	.word	0x58024400
 80055c0:	0800b048 	.word	0x0800b048
 80055c4:	24000418 	.word	0x24000418
 80055c8:	24000414 	.word	0x24000414

080055cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055d4:	2300      	movs	r3, #0
 80055d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055d8:	2300      	movs	r3, #0
 80055da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d03f      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055f0:	d02a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055f6:	d824      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055fc:	d018      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005602:	d81e      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560c:	d007      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800560e:	e018      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005610:	4bab      	ldr	r3, [pc, #684]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4aaa      	ldr	r2, [pc, #680]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800561a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800561c:	e015      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3304      	adds	r3, #4
 8005622:	2102      	movs	r1, #2
 8005624:	4618      	mov	r0, r3
 8005626:	f001 feff 	bl	8007428 <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800562e:	e00c      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3324      	adds	r3, #36	; 0x24
 8005634:	2102      	movs	r1, #2
 8005636:	4618      	mov	r0, r3
 8005638:	f001 ffa8 	bl	800758c <RCCEx_PLL3_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005640:	e003      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
      break;
 8005646:	e000      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800564a:	7dfb      	ldrb	r3, [r7, #23]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005650:	4b9b      	ldr	r3, [pc, #620]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005654:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565c:	4998      	ldr	r1, [pc, #608]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800565e:	4313      	orrs	r3, r2
 8005660:	650b      	str	r3, [r1, #80]	; 0x50
 8005662:	e001      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d03d      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005678:	2b04      	cmp	r3, #4
 800567a:	d826      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800567c:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005682:	bf00      	nop
 8005684:	08005699 	.word	0x08005699
 8005688:	080056a7 	.word	0x080056a7
 800568c:	080056b9 	.word	0x080056b9
 8005690:	080056d1 	.word	0x080056d1
 8005694:	080056d1 	.word	0x080056d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005698:	4b89      	ldr	r3, [pc, #548]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	4a88      	ldr	r2, [pc, #544]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800569e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056a4:	e015      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	2100      	movs	r1, #0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f001 febb 	bl	8007428 <RCCEx_PLL2_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056b6:	e00c      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3324      	adds	r3, #36	; 0x24
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 ff64 	bl	800758c <RCCEx_PLL3_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056c8:	e003      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	75fb      	strb	r3, [r7, #23]
      break;
 80056ce:	e000      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80056d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056d8:	4b79      	ldr	r3, [pc, #484]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056dc:	f023 0207 	bic.w	r2, r3, #7
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e4:	4976      	ldr	r1, [pc, #472]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	650b      	str	r3, [r1, #80]	; 0x50
 80056ea:	e001      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d051      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005702:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005706:	d036      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005708:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800570c:	d830      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800570e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005712:	d032      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005714:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005718:	d82a      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800571a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800571e:	d02e      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005720:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005724:	d824      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572a:	d018      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800572c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005730:	d81e      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800573a:	d007      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800573c:	e018      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800573e:	4b60      	ldr	r3, [pc, #384]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	4a5f      	ldr	r2, [pc, #380]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800574a:	e019      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fe68 	bl	8007428 <RCCEx_PLL2_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800575c:	e010      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3324      	adds	r3, #36	; 0x24
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f001 ff11 	bl	800758c <RCCEx_PLL3_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800576e:	e007      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	75fb      	strb	r3, [r7, #23]
      break;
 8005774:	e004      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005776:	bf00      	nop
 8005778:	e002      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800577e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005786:	4b4e      	ldr	r3, [pc, #312]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005794:	494a      	ldr	r1, [pc, #296]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005796:	4313      	orrs	r3, r2
 8005798:	658b      	str	r3, [r1, #88]	; 0x58
 800579a:	e001      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579c:	7dfb      	ldrb	r3, [r7, #23]
 800579e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d051      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057b2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80057b6:	d036      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80057b8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80057bc:	d830      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80057be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057c2:	d032      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80057c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057c8:	d82a      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80057ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057ce:	d02e      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x262>
 80057d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057d4:	d824      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80057d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057da:	d018      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x242>
 80057dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057e0:	d81e      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x222>
 80057e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057ea:	d007      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 80057ec:	e018      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ee:	4b34      	ldr	r3, [pc, #208]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	4a33      	ldr	r2, [pc, #204]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057fa:	e019      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f001 fe10 	bl	8007428 <RCCEx_PLL2_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800580c:	e010      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3324      	adds	r3, #36	; 0x24
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f001 feb9 	bl	800758c <RCCEx_PLL3_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800581e:	e007      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	75fb      	strb	r3, [r7, #23]
      break;
 8005824:	e004      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005826:	bf00      	nop
 8005828:	e002      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800582e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005836:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005844:	491e      	ldr	r1, [pc, #120]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005846:	4313      	orrs	r3, r2
 8005848:	658b      	str	r3, [r1, #88]	; 0x58
 800584a:	e001      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d035      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005860:	2b30      	cmp	r3, #48	; 0x30
 8005862:	d01c      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005864:	2b30      	cmp	r3, #48	; 0x30
 8005866:	d817      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005868:	2b20      	cmp	r3, #32
 800586a:	d00c      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800586c:	2b20      	cmp	r3, #32
 800586e:	d813      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d016      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005874:	2b10      	cmp	r3, #16
 8005876:	d10f      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	4a10      	ldr	r2, [pc, #64]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800587e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005884:	e00e      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3304      	adds	r3, #4
 800588a:	2102      	movs	r1, #2
 800588c:	4618      	mov	r0, r3
 800588e:	f001 fdcb 	bl	8007428 <RCCEx_PLL2_Config>
 8005892:	4603      	mov	r3, r0
 8005894:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005896:	e005      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	75fb      	strb	r3, [r7, #23]
      break;
 800589c:	e002      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80058a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b6:	4902      	ldr	r1, [pc, #8]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058bc:	e004      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80058be:	bf00      	nop
 80058c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d047      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058dc:	d030      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80058de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e2:	d82a      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80058e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058e8:	d02c      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80058ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058ee:	d824      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80058f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f4:	d018      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80058f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fa:	d81e      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005904:	d007      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005906:	e018      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005908:	4bac      	ldr	r3, [pc, #688]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	4aab      	ldr	r2, [pc, #684]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800590e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005914:	e017      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3304      	adds	r3, #4
 800591a:	2100      	movs	r1, #0
 800591c:	4618      	mov	r0, r3
 800591e:	f001 fd83 	bl	8007428 <RCCEx_PLL2_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005926:	e00e      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3324      	adds	r3, #36	; 0x24
 800592c:	2100      	movs	r1, #0
 800592e:	4618      	mov	r0, r3
 8005930:	f001 fe2c 	bl	800758c <RCCEx_PLL3_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005938:	e005      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
      break;
 800593e:	e002      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800594c:	4b9b      	ldr	r3, [pc, #620]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800594e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005950:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	4998      	ldr	r1, [pc, #608]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800595a:	4313      	orrs	r3, r2
 800595c:	650b      	str	r3, [r1, #80]	; 0x50
 800595e:	e001      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d049      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005978:	d02e      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800597a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800597e:	d828      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005984:	d02a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005986:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800598a:	d822      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800598c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005990:	d026      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005992:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005996:	d81c      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800599c:	d010      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800599e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059a2:	d816      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01d      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ac:	d111      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	2101      	movs	r1, #1
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 fd37 	bl	8007428 <RCCEx_PLL2_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80059be:	e012      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3324      	adds	r3, #36	; 0x24
 80059c4:	2101      	movs	r1, #1
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 fde0 	bl	800758c <RCCEx_PLL3_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80059d0:	e009      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
      break;
 80059d6:	e006      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80059d8:	bf00      	nop
 80059da:	e004      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80059dc:	bf00      	nop
 80059de:	e002      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80059e0:	bf00      	nop
 80059e2:	e000      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80059e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d109      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80059ec:	4b73      	ldr	r3, [pc, #460]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80059ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f8:	4970      	ldr	r1, [pc, #448]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	650b      	str	r3, [r1, #80]	; 0x50
 80059fe:	e001      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d04b      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a1a:	d02e      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a20:	d828      	bhi.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a26:	d02a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2c:	d822      	bhi.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005a2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a32:	d026      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005a34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a38:	d81c      	bhi.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a3e:	d010      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a44:	d816      	bhi.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01d      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a4e:	d111      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3304      	adds	r3, #4
 8005a54:	2101      	movs	r1, #1
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 fce6 	bl	8007428 <RCCEx_PLL2_Config>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a60:	e012      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3324      	adds	r3, #36	; 0x24
 8005a66:	2101      	movs	r1, #1
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 fd8f 	bl	800758c <RCCEx_PLL3_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a72:	e009      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	75fb      	strb	r3, [r7, #23]
      break;
 8005a78:	e006      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e004      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005a7e:	bf00      	nop
 8005a80:	e002      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a8e:	4b4b      	ldr	r3, [pc, #300]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a9c:	4947      	ldr	r1, [pc, #284]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	658b      	str	r3, [r1, #88]	; 0x58
 8005aa2:	e001      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d02f      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005abc:	d00e      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ac2:	d814      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d015      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005acc:	d10f      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ace:	4b3b      	ldr	r3, [pc, #236]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad2:	4a3a      	ldr	r2, [pc, #232]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ada:	e00c      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 fca0 	bl	8007428 <RCCEx_PLL2_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005aec:	e003      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
      break;
 8005af2:	e000      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005afc:	4b2f      	ldr	r3, [pc, #188]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b08:	492c      	ldr	r1, [pc, #176]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	650b      	str	r3, [r1, #80]	; 0x50
 8005b0e:	e001      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d032      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d81b      	bhi.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b67 	.word	0x08005b67
 8005b34:	08005b41 	.word	0x08005b41
 8005b38:	08005b4f 	.word	0x08005b4f
 8005b3c:	08005b67 	.word	0x08005b67
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b40:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b4c:	e00c      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3304      	adds	r3, #4
 8005b52:	2102      	movs	r1, #2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 fc67 	bl	8007428 <RCCEx_PLL2_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b5e:	e003      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	75fb      	strb	r3, [r7, #23]
      break;
 8005b64:	e000      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d109      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b6e:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b72:	f023 0203 	bic.w	r2, r3, #3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7a:	4910      	ldr	r1, [pc, #64]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b80:	e001      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 808a 	beq.w	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ba0:	f7fa fd2a 	bl	80005f8 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ba6:	e00d      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba8:	f7fa fd26 	bl	80005f8 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b64      	cmp	r3, #100	; 0x64
 8005bb4:	d906      	bls.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	75fb      	strb	r3, [r7, #23]
        break;
 8005bba:	e009      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005bbc:	58024400 	.word	0x58024400
 8005bc0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bc4:	4bb9      	ldr	r3, [pc, #740]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0eb      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d166      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005bd6:	4bb6      	ldr	r3, [pc, #728]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005be0:	4053      	eors	r3, r2
 8005be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d013      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bea:	4bb1      	ldr	r3, [pc, #708]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bf4:	4bae      	ldr	r3, [pc, #696]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	4aad      	ldr	r2, [pc, #692]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c00:	4bab      	ldr	r3, [pc, #684]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4aaa      	ldr	r2, [pc, #680]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c0c:	4aa8      	ldr	r2, [pc, #672]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1c:	d115      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fa fceb 	bl	80005f8 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c24:	e00b      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c26:	f7fa fce7 	bl	80005f8 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d902      	bls.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	75fb      	strb	r3, [r7, #23]
            break;
 8005c3c:	e005      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c3e:	4b9c      	ldr	r3, [pc, #624]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0ed      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d126      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c5e:	d10d      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005c60:	4b93      	ldr	r3, [pc, #588]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c6e:	0919      	lsrs	r1, r3, #4
 8005c70:	4b90      	ldr	r3, [pc, #576]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c72:	400b      	ands	r3, r1
 8005c74:	498e      	ldr	r1, [pc, #568]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	610b      	str	r3, [r1, #16]
 8005c7a:	e005      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005c7c:	4b8c      	ldr	r3, [pc, #560]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	4a8b      	ldr	r2, [pc, #556]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c86:	6113      	str	r3, [r2, #16]
 8005c88:	4b89      	ldr	r3, [pc, #548]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c96:	4986      	ldr	r1, [pc, #536]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	670b      	str	r3, [r1, #112]	; 0x70
 8005c9c:	e004      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	75bb      	strb	r3, [r7, #22]
 8005ca2:	e001      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d07e      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb8:	2b28      	cmp	r3, #40	; 0x28
 8005cba:	d867      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005d93 	.word	0x08005d93
 8005cc8:	08005d8d 	.word	0x08005d8d
 8005ccc:	08005d8d 	.word	0x08005d8d
 8005cd0:	08005d8d 	.word	0x08005d8d
 8005cd4:	08005d8d 	.word	0x08005d8d
 8005cd8:	08005d8d 	.word	0x08005d8d
 8005cdc:	08005d8d 	.word	0x08005d8d
 8005ce0:	08005d8d 	.word	0x08005d8d
 8005ce4:	08005d69 	.word	0x08005d69
 8005ce8:	08005d8d 	.word	0x08005d8d
 8005cec:	08005d8d 	.word	0x08005d8d
 8005cf0:	08005d8d 	.word	0x08005d8d
 8005cf4:	08005d8d 	.word	0x08005d8d
 8005cf8:	08005d8d 	.word	0x08005d8d
 8005cfc:	08005d8d 	.word	0x08005d8d
 8005d00:	08005d8d 	.word	0x08005d8d
 8005d04:	08005d7b 	.word	0x08005d7b
 8005d08:	08005d8d 	.word	0x08005d8d
 8005d0c:	08005d8d 	.word	0x08005d8d
 8005d10:	08005d8d 	.word	0x08005d8d
 8005d14:	08005d8d 	.word	0x08005d8d
 8005d18:	08005d8d 	.word	0x08005d8d
 8005d1c:	08005d8d 	.word	0x08005d8d
 8005d20:	08005d8d 	.word	0x08005d8d
 8005d24:	08005d93 	.word	0x08005d93
 8005d28:	08005d8d 	.word	0x08005d8d
 8005d2c:	08005d8d 	.word	0x08005d8d
 8005d30:	08005d8d 	.word	0x08005d8d
 8005d34:	08005d8d 	.word	0x08005d8d
 8005d38:	08005d8d 	.word	0x08005d8d
 8005d3c:	08005d8d 	.word	0x08005d8d
 8005d40:	08005d8d 	.word	0x08005d8d
 8005d44:	08005d93 	.word	0x08005d93
 8005d48:	08005d8d 	.word	0x08005d8d
 8005d4c:	08005d8d 	.word	0x08005d8d
 8005d50:	08005d8d 	.word	0x08005d8d
 8005d54:	08005d8d 	.word	0x08005d8d
 8005d58:	08005d8d 	.word	0x08005d8d
 8005d5c:	08005d8d 	.word	0x08005d8d
 8005d60:	08005d8d 	.word	0x08005d8d
 8005d64:	08005d93 	.word	0x08005d93
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f001 fb5a 	bl	8007428 <RCCEx_PLL2_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d78:	e00c      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3324      	adds	r3, #36	; 0x24
 8005d7e:	2101      	movs	r1, #1
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 fc03 	bl	800758c <RCCEx_PLL3_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d8a:	e003      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d90:	e000      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8005d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d9a:	4b45      	ldr	r3, [pc, #276]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da6:	4942      	ldr	r1, [pc, #264]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	654b      	str	r3, [r1, #84]	; 0x54
 8005dac:	e001      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d037      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	2b05      	cmp	r3, #5
 8005dc4:	d820      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005e0f 	.word	0x08005e0f
 8005dd0:	08005de5 	.word	0x08005de5
 8005dd4:	08005df7 	.word	0x08005df7
 8005dd8:	08005e0f 	.word	0x08005e0f
 8005ddc:	08005e0f 	.word	0x08005e0f
 8005de0:	08005e0f 	.word	0x08005e0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	2101      	movs	r1, #1
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 fb1c 	bl	8007428 <RCCEx_PLL2_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005df4:	e00c      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3324      	adds	r3, #36	; 0x24
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 fbc5 	bl	800758c <RCCEx_PLL3_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e06:	e003      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8005e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e16:	4b26      	ldr	r3, [pc, #152]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1a:	f023 0207 	bic.w	r2, r3, #7
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	4923      	ldr	r1, [pc, #140]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	654b      	str	r3, [r1, #84]	; 0x54
 8005e28:	e001      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d040      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e40:	2b05      	cmp	r3, #5
 8005e42:	d821      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005e44:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e8f 	.word	0x08005e8f
 8005e50:	08005e65 	.word	0x08005e65
 8005e54:	08005e77 	.word	0x08005e77
 8005e58:	08005e8f 	.word	0x08005e8f
 8005e5c:	08005e8f 	.word	0x08005e8f
 8005e60:	08005e8f 	.word	0x08005e8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	2101      	movs	r1, #1
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 fadc 	bl	8007428 <RCCEx_PLL2_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e74:	e00c      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3324      	adds	r3, #36	; 0x24
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fb85 	bl	800758c <RCCEx_PLL3_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e86:	e003      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8c:	e000      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8005e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d110      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9a:	f023 0207 	bic.w	r2, r3, #7
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea4:	4902      	ldr	r1, [pc, #8]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	658b      	str	r3, [r1, #88]	; 0x58
 8005eaa:	e007      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8005eac:	58024800 	.word	0x58024800
 8005eb0:	58024400 	.word	0x58024400
 8005eb4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d04b      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ed2:	d02e      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ed8:	d828      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ede:	d02a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee4:	d822      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005ee6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eea:	d026      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005eec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ef0:	d81c      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef6:	d010      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8005ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005efc:	d816      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01d      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f06:	d111      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fa8a 	bl	8007428 <RCCEx_PLL2_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f18:	e012      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3324      	adds	r3, #36	; 0x24
 8005f1e:	2102      	movs	r1, #2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 fb33 	bl	800758c <RCCEx_PLL3_Config>
 8005f26:	4603      	mov	r3, r0
 8005f28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f2a:	e009      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f30:	e006      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005f32:	bf00      	nop
 8005f34:	e004      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005f36:	bf00      	nop
 8005f38:	e002      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f46:	4bb2      	ldr	r3, [pc, #712]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f54:	49ae      	ldr	r1, [pc, #696]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	654b      	str	r3, [r1, #84]	; 0x54
 8005f5a:	e001      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d04b      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f76:	d02e      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005f78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f7c:	d828      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f82:	d02a      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f88:	d822      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f8e:	d026      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005f90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f94:	d81c      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f9a:	d010      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8005f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa0:	d816      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d111      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 fa38 	bl	8007428 <RCCEx_PLL2_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005fbc:	e012      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3324      	adds	r3, #36	; 0x24
 8005fc2:	2102      	movs	r1, #2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 fae1 	bl	800758c <RCCEx_PLL3_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005fce:	e009      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd4:	e006      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005fd6:	bf00      	nop
 8005fd8:	e004      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005fda:	bf00      	nop
 8005fdc:	e002      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005fde:	bf00      	nop
 8005fe0:	e000      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fea:	4b89      	ldr	r3, [pc, #548]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ff8:	4985      	ldr	r1, [pc, #532]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	658b      	str	r3, [r1, #88]	; 0x58
 8005ffe:	e001      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b00      	cmp	r3, #0
 800600e:	d04b      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006016:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800601a:	d02e      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800601c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006020:	d828      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006026:	d02a      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800602c:	d822      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800602e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006032:	d026      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006034:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006038:	d81c      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800603a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800603e:	d010      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006044:	d816      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01d      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604e:	d111      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f001 f9e6 	bl	8007428 <RCCEx_PLL2_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006060:	e012      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3324      	adds	r3, #36	; 0x24
 8006066:	2102      	movs	r1, #2
 8006068:	4618      	mov	r0, r3
 800606a:	f001 fa8f 	bl	800758c <RCCEx_PLL3_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006072:	e009      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	75fb      	strb	r3, [r7, #23]
      break;
 8006078:	e006      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800607a:	bf00      	nop
 800607c:	e004      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800607e:	bf00      	nop
 8006080:	e002      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006082:	bf00      	nop
 8006084:	e000      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800608e:	4b60      	ldr	r3, [pc, #384]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800609c:	495c      	ldr	r1, [pc, #368]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	658b      	str	r3, [r1, #88]	; 0x58
 80060a2:	e001      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d018      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060bc:	d10a      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3324      	adds	r3, #36	; 0x24
 80060c2:	2102      	movs	r1, #2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 fa61 	bl	800758c <RCCEx_PLL3_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80060d4:	4b4e      	ldr	r3, [pc, #312]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80060d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e0:	494b      	ldr	r1, [pc, #300]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01a      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fc:	d10a      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3324      	adds	r3, #36	; 0x24
 8006102:	2102      	movs	r1, #2
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fa41 	bl	800758c <RCCEx_PLL3_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006114:	4b3e      	ldr	r3, [pc, #248]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	493b      	ldr	r1, [pc, #236]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006124:	4313      	orrs	r3, r2
 8006126:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d034      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800613a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800613e:	d01d      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006144:	d817      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800614a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614e:	d009      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006150:	e011      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	2100      	movs	r1, #0
 8006158:	4618      	mov	r0, r3
 800615a:	f001 f965 	bl	8007428 <RCCEx_PLL2_Config>
 800615e:	4603      	mov	r3, r0
 8006160:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006162:	e00c      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3324      	adds	r3, #36	; 0x24
 8006168:	2102      	movs	r1, #2
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fa0e 	bl	800758c <RCCEx_PLL3_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006174:	e003      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
      break;
 800617a:	e000      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800617c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006184:	4b22      	ldr	r3, [pc, #136]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006192:	491f      	ldr	r1, [pc, #124]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006194:	4313      	orrs	r3, r2
 8006196:	658b      	str	r3, [r1, #88]	; 0x58
 8006198:	e001      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d036      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061b4:	d01c      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80061b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061ba:	d816      	bhi.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80061bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c0:	d003      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80061c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061c6:	d007      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80061c8:	e00f      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ca:	4b11      	ldr	r3, [pc, #68]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	4a10      	ldr	r2, [pc, #64]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80061d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80061d6:	e00c      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3324      	adds	r3, #36	; 0x24
 80061dc:	2101      	movs	r1, #1
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 f9d4 	bl	800758c <RCCEx_PLL3_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	75fb      	strb	r3, [r7, #23]
      break;
 80061ee:	e000      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80061f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10d      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061f8:	4b05      	ldr	r3, [pc, #20]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006206:	4902      	ldr	r1, [pc, #8]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006208:	4313      	orrs	r3, r2
 800620a:	654b      	str	r3, [r1, #84]	; 0x54
 800620c:	e004      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800620e:	bf00      	nop
 8006210:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d029      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800622c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006230:	d007      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006232:	e00f      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006234:	4b61      	ldr	r3, [pc, #388]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	4a60      	ldr	r2, [pc, #384]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800623a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006240:	e00b      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3304      	adds	r3, #4
 8006246:	2102      	movs	r1, #2
 8006248:	4618      	mov	r0, r3
 800624a:	f001 f8ed 	bl	8007428 <RCCEx_PLL2_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006252:	e002      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
      break;
 8006258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006260:	4b56      	ldr	r3, [pc, #344]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626c:	4953      	ldr	r1, [pc, #332]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800626e:	4313      	orrs	r3, r2
 8006270:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006272:	e001      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	2102      	movs	r1, #2
 800628a:	4618      	mov	r0, r3
 800628c:	f001 f97e 	bl	800758c <RCCEx_PLL3_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d030      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ae:	d017      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80062b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b4:	d811      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80062b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ba:	d013      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80062bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c0:	d80b      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d010      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80062c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ca:	d106      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062cc:	4b3b      	ldr	r3, [pc, #236]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4a3a      	ldr	r2, [pc, #232]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80062d8:	e007      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	75fb      	strb	r3, [r7, #23]
      break;
 80062de:	e004      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80062e0:	bf00      	nop
 80062e2:	e002      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80062e4:	bf00      	nop
 80062e6:	e000      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80062e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d109      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062f0:	4b32      	ldr	r3, [pc, #200]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062fc:	492f      	ldr	r1, [pc, #188]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	654b      	str	r3, [r1, #84]	; 0x54
 8006302:	e001      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006314:	4b29      	ldr	r3, [pc, #164]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006320:	4926      	ldr	r1, [pc, #152]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006322:	4313      	orrs	r3, r2
 8006324:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006332:	4b22      	ldr	r3, [pc, #136]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006336:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800633e:	491f      	ldr	r1, [pc, #124]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006340:	4313      	orrs	r3, r2
 8006342:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00d      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006350:	4b1a      	ldr	r3, [pc, #104]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	4a19      	ldr	r2, [pc, #100]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006356:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800635a:	6113      	str	r3, [r2, #16]
 800635c:	4b17      	ldr	r3, [pc, #92]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006366:	4915      	ldr	r1, [pc, #84]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006368:	4313      	orrs	r3, r2
 800636a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	da08      	bge.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006374:	4b11      	ldr	r3, [pc, #68]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006378:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006380:	490e      	ldr	r1, [pc, #56]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006382:	4313      	orrs	r3, r2
 8006384:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006396:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a0:	4906      	ldr	r1, [pc, #24]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80063a6:	7dbb      	ldrb	r3, [r7, #22]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e000      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	58024400 	.word	0x58024400

080063c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b090      	sub	sp, #64	; 0x40
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ce:	f040 8089 	bne.w	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80063d2:	4b95      	ldr	r3, [pc, #596]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	633b      	str	r3, [r7, #48]	; 0x30
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d87d      	bhi.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	080063fd 	.word	0x080063fd
 80063ec:	08006421 	.word	0x08006421
 80063f0:	08006445 	.word	0x08006445
 80063f4:	080064d9 	.word	0x080064d9
 80063f8:	08006469 	.word	0x08006469

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063fc:	4b8a      	ldr	r3, [pc, #552]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006408:	d107      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800640a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800640e:	4618      	mov	r0, r3
 8006410:	f000 feb8 	bl	8007184 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006418:	e3ed      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800641e:	e3ea      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006420:	4b81      	ldr	r3, [pc, #516]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642c:	d107      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800642e:	f107 0318 	add.w	r3, r7, #24
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fbfe 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800643c:	e3db      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006442:	e3d8      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006444:	4b78      	ldr	r3, [pc, #480]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800644c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006450:	d107      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006452:	f107 030c 	add.w	r3, r7, #12
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fd40 	bl	8006edc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006460:	e3c9      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006466:	e3c6      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006468:	4b6f      	ldr	r3, [pc, #444]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800646a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006470:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006472:	4b6d      	ldr	r3, [pc, #436]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b04      	cmp	r3, #4
 800647c:	d10c      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	2b00      	cmp	r3, #0
 8006482:	d109      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006484:	4b68      	ldr	r3, [pc, #416]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	08db      	lsrs	r3, r3, #3
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	4a67      	ldr	r2, [pc, #412]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006496:	e01e      	b.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006498:	4b63      	ldr	r3, [pc, #396]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a4:	d106      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80064a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ac:	d102      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80064ae:	4b60      	ldr	r3, [pc, #384]	; (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b2:	e010      	b.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064b4:	4b5c      	ldr	r3, [pc, #368]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c0:	d106      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80064c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c8:	d102      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80064ca:	4b5a      	ldr	r3, [pc, #360]	; (8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80064cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ce:	e002      	b.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80064d4:	e38f      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80064d6:	e38e      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80064d8:	4b57      	ldr	r3, [pc, #348]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064dc:	e38b      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064e2:	e388      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ea:	f040 80a7 	bne.w	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80064ee:	4b4e      	ldr	r3, [pc, #312]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80064f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80064f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064fe:	d054      	beq.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006506:	f200 808b 	bhi.w	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006510:	f000 8083 	beq.w	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800651a:	f200 8081 	bhi.w	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006524:	d02f      	beq.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800652c:	d878      	bhi.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800653a:	d012      	beq.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800653c:	e070      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800653e:	4b3a      	ldr	r3, [pc, #232]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800654a:	d107      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800654c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fe17 	bl	8007184 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800655a:	e34c      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006560:	e349      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006562:	4b31      	ldr	r3, [pc, #196]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800656a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800656e:	d107      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006570:	f107 0318 	add.w	r3, r7, #24
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fb5d 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800657e:	e33a      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006584:	e337      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006586:	4b28      	ldr	r3, [pc, #160]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800658e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006592:	d107      	bne.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006594:	f107 030c 	add.w	r3, r7, #12
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fc9f 	bl	8006edc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065a2:	e328      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065a8:	e325      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80065aa:	4b1f      	ldr	r3, [pc, #124]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80065ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065b2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065b4:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d10c      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80065c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065c6:	4b18      	ldr	r3, [pc, #96]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	08db      	lsrs	r3, r3, #3
 80065cc:	f003 0303 	and.w	r3, r3, #3
 80065d0:	4a16      	ldr	r2, [pc, #88]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80065d2:	fa22 f303 	lsr.w	r3, r2, r3
 80065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065d8:	e01e      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065da:	4b13      	ldr	r3, [pc, #76]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d106      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80065e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ee:	d102      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80065f0:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f4:	e010      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006602:	d106      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800660a:	d102      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006610:	e002      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006616:	e2ee      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006618:	e2ed      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800661a:	4b07      	ldr	r3, [pc, #28]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800661e:	e2ea      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006624:	e2e7      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006626:	bf00      	nop
 8006628:	58024400 	.word	0x58024400
 800662c:	03d09000 	.word	0x03d09000
 8006630:	003d0900 	.word	0x003d0900
 8006634:	017d7840 	.word	0x017d7840
 8006638:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006642:	f040 809c 	bne.w	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006646:	4b9e      	ldr	r3, [pc, #632]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800664e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006656:	d054      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800665e:	f200 808b 	bhi.w	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006668:	f000 8083 	beq.w	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006672:	f200 8081 	bhi.w	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800667c:	d02f      	beq.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006684:	d878      	bhi.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	2b00      	cmp	r3, #0
 800668a:	d004      	beq.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006692:	d012      	beq.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006694:	e070      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006696:	4b8a      	ldr	r3, [pc, #552]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066a2:	d107      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fd6b 	bl	8007184 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066b2:	e2a0      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066b8:	e29d      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066ba:	4b81      	ldr	r3, [pc, #516]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066c6:	d107      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066c8:	f107 0318 	add.w	r3, r7, #24
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fab1 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80066d6:	e28e      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066dc:	e28b      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066de:	4b78      	ldr	r3, [pc, #480]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ea:	d107      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ec:	f107 030c 	add.w	r3, r7, #12
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fbf3 	bl	8006edc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066fa:	e27c      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006700:	e279      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006702:	4b6f      	ldr	r3, [pc, #444]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006706:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800670a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800670c:	4b6c      	ldr	r3, [pc, #432]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b04      	cmp	r3, #4
 8006716:	d10c      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800671e:	4b68      	ldr	r3, [pc, #416]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	08db      	lsrs	r3, r3, #3
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	4a66      	ldr	r2, [pc, #408]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800672a:	fa22 f303 	lsr.w	r3, r2, r3
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006730:	e01e      	b.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006732:	4b63      	ldr	r3, [pc, #396]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673e:	d106      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006746:	d102      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006748:	4b5f      	ldr	r3, [pc, #380]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800674c:	e010      	b.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800674e:	4b5c      	ldr	r3, [pc, #368]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800675a:	d106      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800675c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006762:	d102      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006764:	4b59      	ldr	r3, [pc, #356]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006768:	e002      	b.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800676e:	e242      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006770:	e241      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006772:	4b57      	ldr	r3, [pc, #348]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006776:	e23e      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800677c:	e23b      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006784:	f040 80a6 	bne.w	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006788:	4b4d      	ldr	r3, [pc, #308]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800678a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006790:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006798:	d054      	beq.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067a0:	f200 808b 	bhi.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067aa:	f000 8083 	beq.w	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067b4:	f200 8081 	bhi.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067be:	d02f      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c6:	d878      	bhi.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d004      	beq.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d4:	d012      	beq.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80067d6:	e070      	b.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067d8:	4b39      	ldr	r3, [pc, #228]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e4:	d107      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fcca 	bl	8007184 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067f4:	e1ff      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067fa:	e1fc      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067fc:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006808:	d107      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800680a:	f107 0318 	add.w	r3, r7, #24
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fa10 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006818:	e1ed      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800681e:	e1ea      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006820:	4b27      	ldr	r3, [pc, #156]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682c:	d107      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fb52 	bl	8006edc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800683c:	e1db      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006842:	e1d8      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006844:	4b1e      	ldr	r3, [pc, #120]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800684c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b04      	cmp	r3, #4
 8006858:	d10c      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	08db      	lsrs	r3, r3, #3
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006872:	e01e      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006874:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006880:	d106      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006888:	d102      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800688a:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688e:	e010      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800689c:	d106      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a4:	d102      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80068a6:	4b09      	ldr	r3, [pc, #36]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80068a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068aa:	e002      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80068b0:	e1a1      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80068b2:	e1a0      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80068b4:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068b8:	e19d      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068be:	e19a      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80068c0:	58024400 	.word	0x58024400
 80068c4:	03d09000 	.word	0x03d09000
 80068c8:	003d0900 	.word	0x003d0900
 80068cc:	017d7840 	.word	0x017d7840
 80068d0:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068da:	d173      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80068dc:	4b9a      	ldr	r3, [pc, #616]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068e4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ec:	d02f      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f4:	d863      	bhi.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006902:	d012      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006904:	e05b      	b.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006906:	4b90      	ldr	r3, [pc, #576]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800690e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006912:	d107      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006914:	f107 0318 	add.w	r3, r7, #24
 8006918:	4618      	mov	r0, r3
 800691a:	f000 f98b 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006922:	e168      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006928:	e165      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800692a:	4b87      	ldr	r3, [pc, #540]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006936:	d107      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006938:	f107 030c 	add.w	r3, r7, #12
 800693c:	4618      	mov	r0, r3
 800693e:	f000 facd 	bl	8006edc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006946:	e156      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800694c:	e153      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800694e:	4b7e      	ldr	r3, [pc, #504]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006952:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006956:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006958:	4b7b      	ldr	r3, [pc, #492]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b04      	cmp	r3, #4
 8006962:	d10c      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8006964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006966:	2b00      	cmp	r3, #0
 8006968:	d109      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800696a:	4b77      	ldr	r3, [pc, #476]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	08db      	lsrs	r3, r3, #3
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	4a75      	ldr	r2, [pc, #468]	; (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006976:	fa22 f303 	lsr.w	r3, r2, r3
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800697c:	e01e      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800697e:	4b72      	ldr	r3, [pc, #456]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800698a:	d106      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006992:	d102      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006994:	4b6e      	ldr	r3, [pc, #440]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006998:	e010      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800699a:	4b6b      	ldr	r3, [pc, #428]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a6:	d106      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80069a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ae:	d102      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80069b0:	4b68      	ldr	r3, [pc, #416]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b4:	e002      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069ba:	e11c      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80069bc:	e11b      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069c2:	e118      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ca:	d133      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80069cc:	4b5e      	ldr	r3, [pc, #376]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80069ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e2:	d012      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80069e4:	e023      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069e6:	4b58      	ldr	r3, [pc, #352]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f2:	d107      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fbc3 	bl	8007184 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a02:	e0f8      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a08:	e0f5      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a0a:	4b4f      	ldr	r3, [pc, #316]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a16:	d107      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a18:	f107 0318 	add.w	r3, r7, #24
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 f909 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a26:	e0e6      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a2c:	e0e3      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a32:	e0e0      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a3a:	f040 808d 	bne.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006a3e:	4b42      	ldr	r3, [pc, #264]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a42:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006a46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a4e:	d06b      	beq.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a56:	d874      	bhi.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5e:	d056      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a66:	d86c      	bhi.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a6e:	d03b      	beq.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a76:	d864      	bhi.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a7e:	d021      	beq.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a86:	d85c      	bhi.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a94:	d004      	beq.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006a96:	e054      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a98:	f000 f8b6 	bl	8006c08 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a9c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006a9e:	e0aa      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aa0:	4b29      	ldr	r3, [pc, #164]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aac:	d107      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aae:	f107 0318 	add.w	r3, r7, #24
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 f8be 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006abc:	e09b      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ac2:	e098      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ac4:	4b20      	ldr	r3, [pc, #128]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad0:	d107      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ad2:	f107 030c 	add.w	r3, r7, #12
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fa00 	bl	8006edc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ae0:	e089      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae6:	e086      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ae8:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d109      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006af4:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	08db      	lsrs	r3, r3, #3
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006b00:	fa22 f303 	lsr.w	r3, r2, r3
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b06:	e076      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b0c:	e073      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b1a:	d102      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b20:	e069      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b26:	e066      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b28:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b34:	d102      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8006b36:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b3a:	e05c      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b40:	e059      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b46:	e056      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	03d09000 	.word	0x03d09000
 8006b50:	003d0900 	.word	0x003d0900
 8006b54:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b5e:	d148      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006b60:	4b27      	ldr	r3, [pc, #156]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b68:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b70:	d02a      	beq.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b78:	d838      	bhi.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d004      	beq.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b86:	d00d      	beq.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8006b88:	e030      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b96:	d102      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8006b98:	4b1a      	ldr	r3, [pc, #104]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b9c:	e02b      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ba2:	e028      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ba4:	4b16      	ldr	r3, [pc, #88]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bb0:	d107      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fae4 	bl	8007184 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006bc0:	e019      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bc6:	e016      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd4:	d107      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bd6:	f107 0318 	add.w	r3, r7, #24
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f82a 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006be4:	e007      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bea:	e004      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bf0:	e001      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3740      	adds	r7, #64	; 0x40
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	58024400 	.word	0x58024400
 8006c04:	017d7840 	.word	0x017d7840

08006c08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c0c:	f7fe fcae 	bl	800556c <HAL_RCC_GetHCLKFreq>
 8006c10:	4602      	mov	r2, r0
 8006c12:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	091b      	lsrs	r3, r3, #4
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	4904      	ldr	r1, [pc, #16]	; (8006c30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c1e:	5ccb      	ldrb	r3, [r1, r3]
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	0800b048 	.word	0x0800b048

08006c34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b089      	sub	sp, #36	; 0x24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c3c:	4ba1      	ldr	r3, [pc, #644]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006c46:	4b9f      	ldr	r3, [pc, #636]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4a:	0b1b      	lsrs	r3, r3, #12
 8006c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c52:	4b9c      	ldr	r3, [pc, #624]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c56:	091b      	lsrs	r3, r3, #4
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006c5e:	4b99      	ldr	r3, [pc, #612]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c62:	08db      	lsrs	r3, r3, #3
 8006c64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	fb02 f303 	mul.w	r3, r2, r3
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8111 	beq.w	8006ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	f000 8083 	beq.w	8006d90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	f200 80a1 	bhi.w	8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d056      	beq.n	8006d4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c9e:	e099      	b.n	8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca0:	4b88      	ldr	r3, [pc, #544]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d02d      	beq.n	8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cac:	4b85      	ldr	r3, [pc, #532]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	08db      	lsrs	r3, r3, #3
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	4a84      	ldr	r2, [pc, #528]	; (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd6:	4b7b      	ldr	r3, [pc, #492]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d06:	e087      	b.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1a:	4b6a      	ldr	r3, [pc, #424]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d4a:	e065      	b.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d5e:	4b59      	ldr	r3, [pc, #356]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d8e:	e043      	b.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da2:	4b48      	ldr	r3, [pc, #288]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006db6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dd2:	e021      	b.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de6:	4b37      	ldr	r3, [pc, #220]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006e18:	4b2a      	ldr	r3, [pc, #168]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1c:	0a5b      	lsrs	r3, r3, #9
 8006e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e3e:	ee17 2a90 	vmov	r2, s15
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006e46:	4b1f      	ldr	r3, [pc, #124]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	0c1b      	lsrs	r3, r3, #16
 8006e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e50:	ee07 3a90 	vmov	s15, r3
 8006e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e6c:	ee17 2a90 	vmov	r2, s15
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006e74:	4b13      	ldr	r3, [pc, #76]	; (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	0e1b      	lsrs	r3, r3, #24
 8006e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9a:	ee17 2a90 	vmov	r2, s15
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	609a      	str	r2, [r3, #8]
}
 8006eb6:	bf00      	nop
 8006eb8:	3724      	adds	r7, #36	; 0x24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	58024400 	.word	0x58024400
 8006ec8:	03d09000 	.word	0x03d09000
 8006ecc:	46000000 	.word	0x46000000
 8006ed0:	4c742400 	.word	0x4c742400
 8006ed4:	4a742400 	.word	0x4a742400
 8006ed8:	4bbebc20 	.word	0x4bbebc20

08006edc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b089      	sub	sp, #36	; 0x24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ee4:	4ba1      	ldr	r3, [pc, #644]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006eee:	4b9f      	ldr	r3, [pc, #636]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	0d1b      	lsrs	r3, r3, #20
 8006ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ef8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006efa:	4b9c      	ldr	r3, [pc, #624]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	0a1b      	lsrs	r3, r3, #8
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006f06:	4b99      	ldr	r3, [pc, #612]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0a:	08db      	lsrs	r3, r3, #3
 8006f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 8111 	beq.w	800714c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	f000 8083 	beq.w	8007038 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	f200 80a1 	bhi.w	800707c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d056      	beq.n	8006ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006f46:	e099      	b.n	800707c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f48:	4b88      	ldr	r3, [pc, #544]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d02d      	beq.n	8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f54:	4b85      	ldr	r3, [pc, #532]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	08db      	lsrs	r3, r3, #3
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	4a84      	ldr	r2, [pc, #528]	; (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
 8006f64:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	ee07 3a90 	vmov	s15, r3
 8006f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7e:	4b7b      	ldr	r3, [pc, #492]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006faa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006fae:	e087      	b.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007178 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc2:	4b6a      	ldr	r3, [pc, #424]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ff2:	e065      	b.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800717c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007006:	4b59      	ldr	r3, [pc, #356]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007016:	ed97 6a03 	vldr	s12, [r7, #12]
 800701a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800701e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007036:	e043      	b.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007180 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704a:	4b48      	ldr	r3, [pc, #288]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705a:	ed97 6a03 	vldr	s12, [r7, #12]
 800705e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800706e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800707a:	e021      	b.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800717c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800708a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708e:	4b37      	ldr	r3, [pc, #220]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709e:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80070c0:	4b2a      	ldr	r3, [pc, #168]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	0a5b      	lsrs	r3, r3, #9
 80070c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070da:	edd7 6a07 	vldr	s13, [r7, #28]
 80070de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070e6:	ee17 2a90 	vmov	r2, s15
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80070ee:	4b1f      	ldr	r3, [pc, #124]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	0c1b      	lsrs	r3, r3, #16
 80070f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f8:	ee07 3a90 	vmov	s15, r3
 80070fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007104:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007108:	edd7 6a07 	vldr	s13, [r7, #28]
 800710c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007114:	ee17 2a90 	vmov	r2, s15
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800711c:	4b13      	ldr	r3, [pc, #76]	; (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	0e1b      	lsrs	r3, r3, #24
 8007122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007136:	edd7 6a07 	vldr	s13, [r7, #28]
 800713a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007142:	ee17 2a90 	vmov	r2, s15
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800714a:	e008      	b.n	800715e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	609a      	str	r2, [r3, #8]
}
 800715e:	bf00      	nop
 8007160:	3724      	adds	r7, #36	; 0x24
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	58024400 	.word	0x58024400
 8007170:	03d09000 	.word	0x03d09000
 8007174:	46000000 	.word	0x46000000
 8007178:	4c742400 	.word	0x4c742400
 800717c:	4a742400 	.word	0x4a742400
 8007180:	4bbebc20 	.word	0x4bbebc20

08007184 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007184:	b480      	push	{r7}
 8007186:	b089      	sub	sp, #36	; 0x24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800718c:	4ba0      	ldr	r3, [pc, #640]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	f003 0303 	and.w	r3, r3, #3
 8007194:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007196:	4b9e      	ldr	r3, [pc, #632]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	091b      	lsrs	r3, r3, #4
 800719c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80071a2:	4b9b      	ldr	r3, [pc, #620]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071ac:	4b98      	ldr	r3, [pc, #608]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	08db      	lsrs	r3, r3, #3
 80071b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	fb02 f303 	mul.w	r3, r2, r3
 80071bc:	ee07 3a90 	vmov	s15, r3
 80071c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8111 	beq.w	80073f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	f000 8083 	beq.w	80072de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	f200 80a1 	bhi.w	8007322 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d056      	beq.n	800729a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80071ec:	e099      	b.n	8007322 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ee:	4b88      	ldr	r3, [pc, #544]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d02d      	beq.n	8007256 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071fa:	4b85      	ldr	r3, [pc, #532]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	08db      	lsrs	r3, r3, #3
 8007200:	f003 0303 	and.w	r3, r3, #3
 8007204:	4a83      	ldr	r2, [pc, #524]	; (8007414 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007206:	fa22 f303 	lsr.w	r3, r2, r3
 800720a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007224:	4b7a      	ldr	r3, [pc, #488]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007234:	ed97 6a03 	vldr	s12, [r7, #12]
 8007238:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007418 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800723c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007250:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007254:	e087      	b.n	8007366 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	ee07 3a90 	vmov	s15, r3
 800725c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007260:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800741c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007268:	4b69      	ldr	r3, [pc, #420]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007270:	ee07 3a90 	vmov	s15, r3
 8007274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007278:	ed97 6a03 	vldr	s12, [r7, #12]
 800727c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007418 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007294:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007298:	e065      	b.n	8007366 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	ee07 3a90 	vmov	s15, r3
 80072a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007420 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80072a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ac:	4b58      	ldr	r3, [pc, #352]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b4:	ee07 3a90 	vmov	s15, r3
 80072b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007418 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072dc:	e043      	b.n	8007366 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007424 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80072ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f0:	4b47      	ldr	r3, [pc, #284]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007300:	ed97 6a03 	vldr	s12, [r7, #12]
 8007304:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007418 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007320:	e021      	b.n	8007366 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800741c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007334:	4b36      	ldr	r3, [pc, #216]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733c:	ee07 3a90 	vmov	s15, r3
 8007340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007344:	ed97 6a03 	vldr	s12, [r7, #12]
 8007348:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007418 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800734c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007360:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007364:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007366:	4b2a      	ldr	r3, [pc, #168]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	0a5b      	lsrs	r3, r3, #9
 800736c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007370:	ee07 3a90 	vmov	s15, r3
 8007374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800737c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007380:	edd7 6a07 	vldr	s13, [r7, #28]
 8007384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738c:	ee17 2a90 	vmov	r2, s15
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007394:	4b1e      	ldr	r3, [pc, #120]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007398:	0c1b      	lsrs	r3, r3, #16
 800739a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ba:	ee17 2a90 	vmov	r2, s15
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80073c2:	4b13      	ldr	r3, [pc, #76]	; (8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	0e1b      	lsrs	r3, r3, #24
 80073c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e8:	ee17 2a90 	vmov	r2, s15
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80073f0:	e008      	b.n	8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	609a      	str	r2, [r3, #8]
}
 8007404:	bf00      	nop
 8007406:	3724      	adds	r7, #36	; 0x24
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	58024400 	.word	0x58024400
 8007414:	03d09000 	.word	0x03d09000
 8007418:	46000000 	.word	0x46000000
 800741c:	4c742400 	.word	0x4c742400
 8007420:	4a742400 	.word	0x4a742400
 8007424:	4bbebc20 	.word	0x4bbebc20

08007428 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007436:	4b53      	ldr	r3, [pc, #332]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	2b03      	cmp	r3, #3
 8007440:	d101      	bne.n	8007446 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e099      	b.n	800757a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007446:	4b4f      	ldr	r3, [pc, #316]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a4e      	ldr	r2, [pc, #312]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 800744c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007452:	f7f9 f8d1 	bl	80005f8 <HAL_GetTick>
 8007456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007458:	e008      	b.n	800746c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800745a:	f7f9 f8cd 	bl	80005f8 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d901      	bls.n	800746c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e086      	b.n	800757a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800746c:	4b45      	ldr	r3, [pc, #276]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1f0      	bne.n	800745a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007478:	4b42      	ldr	r3, [pc, #264]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	031b      	lsls	r3, r3, #12
 8007486:	493f      	ldr	r1, [pc, #252]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 8007488:	4313      	orrs	r3, r2
 800748a:	628b      	str	r3, [r1, #40]	; 0x28
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	3b01      	subs	r3, #1
 8007492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	3b01      	subs	r3, #1
 800749c:	025b      	lsls	r3, r3, #9
 800749e:	b29b      	uxth	r3, r3
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	061b      	lsls	r3, r3, #24
 80074b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074bc:	4931      	ldr	r1, [pc, #196]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074c2:	4b30      	ldr	r3, [pc, #192]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	492d      	ldr	r1, [pc, #180]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074d4:	4b2b      	ldr	r3, [pc, #172]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	f023 0220 	bic.w	r2, r3, #32
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	4928      	ldr	r1, [pc, #160]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074e6:	4b27      	ldr	r3, [pc, #156]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	4a26      	ldr	r2, [pc, #152]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 80074ec:	f023 0310 	bic.w	r3, r3, #16
 80074f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074f2:	4b24      	ldr	r3, [pc, #144]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 80074f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074f6:	4b24      	ldr	r3, [pc, #144]	; (8007588 <RCCEx_PLL2_Config+0x160>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	69d2      	ldr	r2, [r2, #28]
 80074fe:	00d2      	lsls	r2, r2, #3
 8007500:	4920      	ldr	r1, [pc, #128]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 8007502:	4313      	orrs	r3, r2
 8007504:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007506:	4b1f      	ldr	r3, [pc, #124]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 800750c:	f043 0310 	orr.w	r3, r3, #16
 8007510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007518:	4b1a      	ldr	r3, [pc, #104]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	4a19      	ldr	r2, [pc, #100]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 800751e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007522:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007524:	e00f      	b.n	8007546 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d106      	bne.n	800753a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800752c:	4b15      	ldr	r3, [pc, #84]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	4a14      	ldr	r2, [pc, #80]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 8007532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007536:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007538:	e005      	b.n	8007546 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800753a:	4b12      	ldr	r3, [pc, #72]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	4a11      	ldr	r2, [pc, #68]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 8007540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007544:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007546:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a0e      	ldr	r2, [pc, #56]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 800754c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007552:	f7f9 f851 	bl	80005f8 <HAL_GetTick>
 8007556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007558:	e008      	b.n	800756c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800755a:	f7f9 f84d 	bl	80005f8 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	2b02      	cmp	r3, #2
 8007566:	d901      	bls.n	800756c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e006      	b.n	800757a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <RCCEx_PLL2_Config+0x15c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0f0      	beq.n	800755a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007578:	7bfb      	ldrb	r3, [r7, #15]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	58024400 	.word	0x58024400
 8007588:	ffff0007 	.word	0xffff0007

0800758c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800759a:	4b53      	ldr	r3, [pc, #332]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d101      	bne.n	80075aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e099      	b.n	80076de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80075aa:	4b4f      	ldr	r3, [pc, #316]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a4e      	ldr	r2, [pc, #312]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 80075b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b6:	f7f9 f81f 	bl	80005f8 <HAL_GetTick>
 80075ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075bc:	e008      	b.n	80075d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80075be:	f7f9 f81b 	bl	80005f8 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d901      	bls.n	80075d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e086      	b.n	80076de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075d0:	4b45      	ldr	r3, [pc, #276]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1f0      	bne.n	80075be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80075dc:	4b42      	ldr	r3, [pc, #264]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	051b      	lsls	r3, r3, #20
 80075ea:	493f      	ldr	r1, [pc, #252]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	628b      	str	r3, [r1, #40]	; 0x28
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	3b01      	subs	r3, #1
 8007600:	025b      	lsls	r3, r3, #9
 8007602:	b29b      	uxth	r3, r3
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	3b01      	subs	r3, #1
 800760c:	041b      	lsls	r3, r3, #16
 800760e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	3b01      	subs	r3, #1
 800761a:	061b      	lsls	r3, r3, #24
 800761c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007620:	4931      	ldr	r1, [pc, #196]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007622:	4313      	orrs	r3, r2
 8007624:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007626:	4b30      	ldr	r3, [pc, #192]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	492d      	ldr	r1, [pc, #180]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007634:	4313      	orrs	r3, r2
 8007636:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007638:	4b2b      	ldr	r3, [pc, #172]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	4928      	ldr	r1, [pc, #160]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007646:	4313      	orrs	r3, r2
 8007648:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800764a:	4b27      	ldr	r3, [pc, #156]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 800764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764e:	4a26      	ldr	r2, [pc, #152]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800765a:	4b24      	ldr	r3, [pc, #144]	; (80076ec <RCCEx_PLL3_Config+0x160>)
 800765c:	4013      	ands	r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	69d2      	ldr	r2, [r2, #28]
 8007662:	00d2      	lsls	r2, r2, #3
 8007664:	4920      	ldr	r1, [pc, #128]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007666:	4313      	orrs	r3, r2
 8007668:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800766a:	4b1f      	ldr	r3, [pc, #124]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 800766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766e:	4a1e      	ldr	r2, [pc, #120]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d106      	bne.n	800768a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800767c:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	4a19      	ldr	r2, [pc, #100]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007682:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007688:	e00f      	b.n	80076aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d106      	bne.n	800769e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007690:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 8007696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800769a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800769c:	e005      	b.n	80076aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800769e:	4b12      	ldr	r3, [pc, #72]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	4a11      	ldr	r2, [pc, #68]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 80076a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80076aa:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a0e      	ldr	r2, [pc, #56]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 80076b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b6:	f7f8 ff9f 	bl	80005f8 <HAL_GetTick>
 80076ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076bc:	e008      	b.n	80076d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80076be:	f7f8 ff9b 	bl	80005f8 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e006      	b.n	80076de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <RCCEx_PLL3_Config+0x15c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d0f0      	beq.n	80076be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	58024400 	.word	0x58024400
 80076ec:	ffff0007 	.word	0xffff0007

080076f0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d904      	bls.n	800770e <HAL_SAI_InitProtocol+0x1e>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	3b03      	subs	r3, #3
 8007708:	2b01      	cmp	r3, #1
 800770a:	d812      	bhi.n	8007732 <HAL_SAI_InitProtocol+0x42>
 800770c:	e008      	b.n	8007720 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fac5 	bl	8007ca4 <SAI_InitI2S>
 800771a:	4603      	mov	r3, r0
 800771c:	75fb      	strb	r3, [r7, #23]
      break;
 800771e:	e00b      	b.n	8007738 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	68b9      	ldr	r1, [r7, #8]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fb6e 	bl	8007e08 <SAI_InitPCM>
 800772c:	4603      	mov	r3, r0
 800772e:	75fb      	strb	r3, [r7, #23]
      break;
 8007730:	e002      	b.n	8007738 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
      break;
 8007736:	bf00      	nop
  }

  if (status == HAL_OK)
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d104      	bne.n	8007748 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 f808 	bl	8007754 <HAL_SAI_Init>
 8007744:	4603      	mov	r3, r0
 8007746:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	; 0x28
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e1fb      	b.n	8007b5e <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800776c:	2b01      	cmp	r3, #1
 800776e:	d113      	bne.n	8007798 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a96      	ldr	r2, [pc, #600]	; (80079d0 <HAL_SAI_Init+0x27c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d004      	beq.n	8007784 <HAL_SAI_Init+0x30>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a95      	ldr	r2, [pc, #596]	; (80079d4 <HAL_SAI_Init+0x280>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d107      	bne.n	8007794 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007788:	2b01      	cmp	r3, #1
 800778a:	d103      	bne.n	8007794 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e1e2      	b.n	8007b5e <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a8c      	ldr	r2, [pc, #560]	; (80079d0 <HAL_SAI_Init+0x27c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <HAL_SAI_Init+0x58>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a8c      	ldr	r2, [pc, #560]	; (80079d8 <HAL_SAI_Init+0x284>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d102      	bne.n	80077b2 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 80077ac:	4b8b      	ldr	r3, [pc, #556]	; (80079dc <HAL_SAI_Init+0x288>)
 80077ae:	61bb      	str	r3, [r7, #24]
 80077b0:	e00e      	b.n	80077d0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a87      	ldr	r2, [pc, #540]	; (80079d4 <HAL_SAI_Init+0x280>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_SAI_Init+0x72>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a87      	ldr	r2, [pc, #540]	; (80079e0 <HAL_SAI_Init+0x28c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d102      	bne.n	80077cc <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 80077c6:	4b87      	ldr	r3, [pc, #540]	; (80079e4 <HAL_SAI_Init+0x290>)
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	e001      	b.n	80077d0 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e1c6      	b.n	8007b5e <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d106      	bne.n	80077ea <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f8e3 	bl	80089b0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fbc6 	bl	8007f7c <SAI_Disable>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e1b1      	b.n	8007b5e <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2202      	movs	r2, #2
 80077fe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d00c      	beq.n	8007824 <HAL_SAI_Init+0xd0>
 800780a:	2b02      	cmp	r3, #2
 800780c:	d80d      	bhi.n	800782a <HAL_SAI_Init+0xd6>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <HAL_SAI_Init+0xc4>
 8007812:	2b01      	cmp	r3, #1
 8007814:	d003      	beq.n	800781e <HAL_SAI_Init+0xca>
 8007816:	e008      	b.n	800782a <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800781c:	e008      	b.n	8007830 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800781e:	2310      	movs	r3, #16
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007822:	e005      	b.n	8007830 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007824:	2320      	movs	r3, #32
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007828:	e002      	b.n	8007830 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800782e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b05      	cmp	r3, #5
 8007836:	d822      	bhi.n	800787e <HAL_SAI_Init+0x12a>
 8007838:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <HAL_SAI_Init+0xec>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007859 	.word	0x08007859
 8007844:	0800785f 	.word	0x0800785f
 8007848:	08007867 	.word	0x08007867
 800784c:	0800787f 	.word	0x0800787f
 8007850:	0800787f 	.word	0x0800787f
 8007854:	0800786f 	.word	0x0800786f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	61fb      	str	r3, [r7, #28]
      break;
 800785c:	e012      	b.n	8007884 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800785e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007862:	61fb      	str	r3, [r7, #28]
      break;
 8007864:	e00e      	b.n	8007884 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800786a:	61fb      	str	r3, [r7, #28]
      break;
 800786c:	e00a      	b.n	8007884 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800786e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007872:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	f043 0303 	orr.w	r3, r3, #3
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800787c:	e002      	b.n	8007884 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	61fb      	str	r3, [r7, #28]
      break;
 8007882:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007888:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 8084 	beq.w	800799c <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a4c      	ldr	r2, [pc, #304]	; (80079d0 <HAL_SAI_Init+0x27c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d004      	beq.n	80078ac <HAL_SAI_Init+0x158>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a4c      	ldr	r2, [pc, #304]	; (80079d8 <HAL_SAI_Init+0x284>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d104      	bne.n	80078b6 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80078ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80078b0:	f7fe fd86 	bl	80063c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80078b4:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a46      	ldr	r2, [pc, #280]	; (80079d4 <HAL_SAI_Init+0x280>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d104      	bne.n	80078ca <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80078c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80078c4:	f7fe fd7c 	bl	80063c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80078c8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a44      	ldr	r2, [pc, #272]	; (80079e0 <HAL_SAI_Init+0x28c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d104      	bne.n	80078de <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80078d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80078d8:	f7fe fd72 	bl	80063c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80078dc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078e6:	d120      	bne.n	800792a <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d102      	bne.n	80078f6 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80078f0:	2340      	movs	r3, #64	; 0x40
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	e00a      	b.n	800790c <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fa:	2b08      	cmp	r3, #8
 80078fc:	d103      	bne.n	8007906 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80078fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e002      	b.n	800790c <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	4619      	mov	r1, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	fb02 f303 	mul.w	r3, r2, r3
 8007922:	fbb1 f3f3 	udiv	r3, r1, r3
 8007926:	613b      	str	r3, [r7, #16]
 8007928:	e017      	b.n	800795a <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007932:	d101      	bne.n	8007938 <HAL_SAI_Init+0x1e4>
 8007934:	2302      	movs	r3, #2
 8007936:	e000      	b.n	800793a <HAL_SAI_Init+0x1e6>
 8007938:	2301      	movs	r3, #1
 800793a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4619      	mov	r1, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	fb02 f303 	mul.w	r3, r2, r3
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	fbb1 f3f3 	udiv	r3, r1, r3
 8007958:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	4a22      	ldr	r2, [pc, #136]	; (80079e8 <HAL_SAI_Init+0x294>)
 800795e:	fba2 2303 	umull	r2, r3, r2, r3
 8007962:	08da      	lsrs	r2, r3, #3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007968:	6939      	ldr	r1, [r7, #16]
 800796a:	4b1f      	ldr	r3, [pc, #124]	; (80079e8 <HAL_SAI_Init+0x294>)
 800796c:	fba3 2301 	umull	r2, r3, r3, r1
 8007970:	08da      	lsrs	r2, r3, #3
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	1aca      	subs	r2, r1, r3
 800797c:	2a08      	cmp	r2, #8
 800797e:	d904      	bls.n	800798a <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798e:	2b04      	cmp	r3, #4
 8007990:	d104      	bne.n	800799c <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	085a      	lsrs	r2, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_SAI_Init+0x258>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d109      	bne.n	80079c0 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_SAI_Init+0x264>
 80079b4:	2300      	movs	r3, #0
 80079b6:	e001      	b.n	80079bc <HAL_SAI_Init+0x268>
 80079b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079bc:	623b      	str	r3, [r7, #32]
 80079be:	e017      	b.n	80079f0 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d111      	bne.n	80079ec <HAL_SAI_Init+0x298>
 80079c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079cc:	e00f      	b.n	80079ee <HAL_SAI_Init+0x29a>
 80079ce:	bf00      	nop
 80079d0:	40015804 	.word	0x40015804
 80079d4:	58005404 	.word	0x58005404
 80079d8:	40015824 	.word	0x40015824
 80079dc:	40015800 	.word	0x40015800
 80079e0:	58005424 	.word	0x58005424
 80079e4:	58005400 	.word	0x58005400
 80079e8:	cccccccd 	.word	0xcccccccd
 80079ec:	2300      	movs	r3, #0
 80079ee:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6819      	ldr	r1, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4b5b      	ldr	r3, [pc, #364]	; (8007b68 <HAL_SAI_Init+0x414>)
 80079fc:	400b      	ands	r3, r1
 80079fe:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6819      	ldr	r1, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a14:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8007a28:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a34:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	051b      	lsls	r3, r3, #20
 8007a3c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a42:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6859      	ldr	r1, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	4b43      	ldr	r3, [pc, #268]	; (8007b6c <HAL_SAI_Init+0x418>)
 8007a5e:	400b      	ands	r3, r1
 8007a60:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6859      	ldr	r1, [r3, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6899      	ldr	r1, [r3, #8]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	4b39      	ldr	r3, [pc, #228]	; (8007b70 <HAL_SAI_Init+0x41c>)
 8007a8c:	400b      	ands	r3, r1
 8007a8e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6899      	ldr	r1, [r3, #8]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007aa0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007aa6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007aac:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007ab6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68d9      	ldr	r1, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007ace:	400b      	ands	r3, r1
 8007ad0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68d9      	ldr	r1, [r3, #12]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007ae8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	3b01      	subs	r3, #1
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a1c      	ldr	r2, [pc, #112]	; (8007b74 <HAL_SAI_Init+0x420>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d004      	beq.n	8007b10 <HAL_SAI_Init+0x3bc>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1b      	ldr	r2, [pc, #108]	; (8007b78 <HAL_SAI_Init+0x424>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d119      	bne.n	8007b44 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b14:	f023 0201 	bic.w	r2, r3, #1
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d10e      	bne.n	8007b44 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007b32:	431a      	orrs	r2, r3
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3c:	f043 0201 	orr.w	r2, r3, #1
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	f005c010 	.word	0xf005c010
 8007b6c:	ffff1ff0 	.word	0xffff1ff0
 8007b70:	fff88000 	.word	0xfff88000
 8007b74:	40015804 	.word	0x40015804
 8007b78:	58005404 	.word	0x58005404

08007b7c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <HAL_SAI_Receive_DMA+0x1a>
 8007b90:	88fb      	ldrh	r3, [r7, #6]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e079      	b.n	8007c8e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d172      	bne.n	8007c8c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d101      	bne.n	8007bb4 <HAL_SAI_Receive_DMA+0x38>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e06c      	b.n	8007c8e <HAL_SAI_Receive_DMA+0x112>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	88fa      	ldrh	r2, [r7, #6]
 8007bc6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	88fa      	ldrh	r2, [r7, #6]
 8007bce:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2222      	movs	r2, #34	; 0x22
 8007bde:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007be8:	4a2b      	ldr	r2, [pc, #172]	; (8007c98 <HAL_SAI_Receive_DMA+0x11c>)
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf2:	4a2a      	ldr	r2, [pc, #168]	; (8007c9c <HAL_SAI_Receive_DMA+0x120>)
 8007bf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bfc:	4a28      	ldr	r2, [pc, #160]	; (8007ca0 <HAL_SAI_Receive_DMA+0x124>)
 8007bfe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c06:	2200      	movs	r2, #0
 8007c08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	331c      	adds	r3, #28
 8007c16:	4619      	mov	r1, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007c24:	f7f9 fac4 	bl	80011b0 <HAL_DMA_Start_IT>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e029      	b.n	8007c8e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f965 	bl	8007f0c <SAI_InterruptFlag>
 8007c42:	4601      	mov	r1, r0
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691a      	ldr	r2, [r3, #16]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007c60:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d107      	bne.n	8007c80 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c7e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	e000      	b.n	8007c8e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8007c8c:	2302      	movs	r3, #2
  }
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	08008051 	.word	0x08008051
 8007c9c:	08007ff1 	.word	0x08007ff1
 8007ca0:	0800806d 	.word	0x0800806d

08007ca4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <SAI_InitI2S+0x2e>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d103      	bne.n	8007cda <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	651a      	str	r2, [r3, #80]	; 0x50
 8007cd8:	e002      	b.n	8007ce0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ce6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cee:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e077      	b.n	8007dfa <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d107      	bne.n	8007d20 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007d1c:	665a      	str	r2, [r3, #100]	; 0x64
 8007d1e:	e006      	b.n	8007d2e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007d26:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	665a      	str	r2, [r3, #100]	; 0x64
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d84f      	bhi.n	8007dd4 <SAI_InitI2S+0x130>
 8007d34:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <SAI_InitI2S+0x98>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d4d 	.word	0x08007d4d
 8007d40:	08007d6f 	.word	0x08007d6f
 8007d44:	08007d91 	.word	0x08007d91
 8007d48:	08007db3 	.word	0x08007db3

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2280      	movs	r2, #128	; 0x80
 8007d50:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	085b      	lsrs	r3, r3, #1
 8007d60:	011a      	lsls	r2, r3, #4
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2240      	movs	r2, #64	; 0x40
 8007d6a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007d6c:	e035      	b.n	8007dda <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2280      	movs	r2, #128	; 0x80
 8007d72:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	085b      	lsrs	r3, r3, #1
 8007d78:	019a      	lsls	r2, r3, #6
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	085b      	lsrs	r3, r3, #1
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2280      	movs	r2, #128	; 0x80
 8007d8c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007d8e:	e024      	b.n	8007dda <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	22c0      	movs	r2, #192	; 0xc0
 8007d94:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	085b      	lsrs	r3, r3, #1
 8007d9a:	019a      	lsls	r2, r3, #6
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	085b      	lsrs	r3, r3, #1
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2280      	movs	r2, #128	; 0x80
 8007dae:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007db0:	e013      	b.n	8007dda <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	22e0      	movs	r2, #224	; 0xe0
 8007db6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	085b      	lsrs	r3, r3, #1
 8007dbc:	019a      	lsls	r2, r3, #6
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	085b      	lsrs	r3, r3, #1
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2280      	movs	r2, #128	; 0x80
 8007dd0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007dd2:	e002      	b.n	8007dda <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d10b      	bne.n	8007df8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d102      	bne.n	8007dec <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2210      	movs	r2, #16
 8007dea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d102      	bne.n	8007df8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2208      	movs	r2, #8
 8007df6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop

08007e08 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <SAI_InitPCM+0x2e>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d103      	bne.n	8007e3e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	651a      	str	r2, [r3, #80]	; 0x50
 8007e3c:	e002      	b.n	8007e44 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e50:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007e58:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e6c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d103      	bne.n	8007e7c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	659a      	str	r2, [r3, #88]	; 0x58
 8007e7a:	e002      	b.n	8007e82 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	220d      	movs	r2, #13
 8007e80:	659a      	str	r2, [r3, #88]	; 0x58
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d837      	bhi.n	8007ef8 <SAI_InitPCM+0xf0>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <SAI_InitPCM+0x88>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ea1 	.word	0x08007ea1
 8007e94:	08007eb7 	.word	0x08007eb7
 8007e98:	08007ecd 	.word	0x08007ecd
 8007e9c:	08007ee3 	.word	0x08007ee3
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2280      	movs	r2, #128	; 0x80
 8007ea4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	011a      	lsls	r2, r3, #4
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2240      	movs	r2, #64	; 0x40
 8007eb2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007eb4:	e023      	b.n	8007efe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2280      	movs	r2, #128	; 0x80
 8007eba:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2280      	movs	r2, #128	; 0x80
 8007ec8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007eca:	e018      	b.n	8007efe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	22c0      	movs	r2, #192	; 0xc0
 8007ed0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2280      	movs	r2, #128	; 0x80
 8007ede:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007ee0:	e00d      	b.n	8007efe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	22e0      	movs	r2, #224	; 0xe0
 8007ee6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2280      	movs	r2, #128	; 0x80
 8007ef4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007ef6:	e002      	b.n	8007efe <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	75fb      	strb	r3, [r7, #23]
      break;
 8007efc:	bf00      	nop
  }

  return status;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d103      	bne.n	8007f2a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f043 0308 	orr.w	r3, r3, #8
 8007f28:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2e:	2b08      	cmp	r3, #8
 8007f30:	d10b      	bne.n	8007f4a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d003      	beq.n	8007f42 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d103      	bne.n	8007f4a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f043 0310 	orr.w	r3, r3, #16
 8007f48:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	d003      	beq.n	8007f5a <SAI_InterruptFlag+0x4e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d104      	bne.n	8007f64 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	e003      	b.n	8007f6c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f043 0304 	orr.w	r3, r3, #4
 8007f6a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007f84:	4b18      	ldr	r3, [pc, #96]	; (8007fe8 <SAI_Disable+0x6c>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a18      	ldr	r2, [pc, #96]	; (8007fec <SAI_Disable+0x70>)
 8007f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8e:	0b1b      	lsrs	r3, r3, #12
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007fa6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	72fb      	strb	r3, [r7, #11]
      break;
 8007fc2:	e009      	b.n	8007fd8 <SAI_Disable+0x5c>
    }
    count--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e7      	bne.n	8007fa8 <SAI_Disable+0x2c>

  return status;
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	24000414 	.word	0x24000414
 8007fec:	95cbec1b 	.word	0x95cbec1b

08007ff0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008006:	d01c      	beq.n	8008042 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008016:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008020:	2100      	movs	r1, #0
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff ff72 	bl	8007f0c <SAI_InterruptFlag>
 8008028:	4603      	mov	r3, r0
 800802a:	43d9      	mvns	r1, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	691a      	ldr	r2, [r3, #16]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	400a      	ands	r2, r1
 8008038:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7f8 fa29 	bl	800049a <HAL_SAI_RxCpltCallback>
#endif
}
 8008048:	bf00      	nop
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7f8 fa10 	bl	8000484 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008064:	bf00      	nop
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fa fc7e 	bl	800297c <HAL_DMA_GetError>
 8008080:	4603      	mov	r3, r0
 8008082:	2b02      	cmp	r3, #2
 8008084:	d01d      	beq.n	80080c2 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800808c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80080a4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff ff68 	bl	8007f7c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f7f8 f9c1 	bl	8000444 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80080c2:	bf00      	nop
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80080d2:	f000 fb67 	bl	80087a4 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80080d6:	4b48      	ldr	r3, [pc, #288]	; (80081f8 <main+0x12c>)
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d11b      	bne.n	800811a <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 80080e2:	f3bf 8f4f 	dsb	sy
}
 80080e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80080e8:	f3bf 8f6f 	isb	sy
}
 80080ec:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80080ee:	4b42      	ldr	r3, [pc, #264]	; (80081f8 <main+0x12c>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80080f6:	f3bf 8f4f 	dsb	sy
}
 80080fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80080fc:	f3bf 8f6f 	isb	sy
}
 8008100:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008102:	4b3d      	ldr	r3, [pc, #244]	; (80081f8 <main+0x12c>)
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	4a3c      	ldr	r2, [pc, #240]	; (80081f8 <main+0x12c>)
 8008108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800810c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800810e:	f3bf 8f4f 	dsb	sy
}
 8008112:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008114:	f3bf 8f6f 	isb	sy
}
 8008118:	e000      	b.n	800811c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800811a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800811c:	4b36      	ldr	r3, [pc, #216]	; (80081f8 <main+0x12c>)
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d138      	bne.n	800819a <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8008128:	4b33      	ldr	r3, [pc, #204]	; (80081f8 <main+0x12c>)
 800812a:	2200      	movs	r2, #0
 800812c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008130:	f3bf 8f4f 	dsb	sy
}
 8008134:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8008136:	4b30      	ldr	r3, [pc, #192]	; (80081f8 <main+0x12c>)
 8008138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800813c:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	0b5b      	lsrs	r3, r3, #13
 8008142:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008146:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	08db      	lsrs	r3, r3, #3
 800814c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008150:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800815a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008160:	4925      	ldr	r1, [pc, #148]	; (80081f8 <main+0x12c>)
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	1e5a      	subs	r2, r3, #1
 800816c:	607a      	str	r2, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1ef      	bne.n	8008152 <main+0x86>
    } while(sets-- != 0U);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	1e5a      	subs	r2, r3, #1
 8008176:	60ba      	str	r2, [r7, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e5      	bne.n	8008148 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800817c:	f3bf 8f4f 	dsb	sy
}
 8008180:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008182:	4b1d      	ldr	r3, [pc, #116]	; (80081f8 <main+0x12c>)
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	4a1c      	ldr	r2, [pc, #112]	; (80081f8 <main+0x12c>)
 8008188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800818c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800818e:	f3bf 8f4f 	dsb	sy
}
 8008192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008194:	f3bf 8f6f 	isb	sy
}
 8008198:	e000      	b.n	800819c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800819a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800819c:	f7f8 f9a6 	bl	80004ec <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 80081a0:	2000      	movs	r0, #0
 80081a2:	f7f8 f8b5 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 80081a6:	2001      	movs	r0, #1
 80081a8:	f7f8 f8b2 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 80081ac:	2000      	movs	r0, #0
 80081ae:	f7f8 f92b 	bl	8000408 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 80081b2:	2001      	movs	r0, #1
 80081b4:	f7f8 f928 	bl	8000408 <BSP_LED_Off>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80081b8:	f000 f824 	bl	8008204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80081bc:	f000 fa86 	bl	80086cc <MX_GPIO_Init>
  MX_BDMA_Init();
 80081c0:	f000 f9fa 	bl	80085b8 <MX_BDMA_Init>
  MX_SAI4_Init();
 80081c4:	f000 f99a 	bl	80084fc <MX_SAI4_Init>
  MX_CRC_Init();
 80081c8:	f000 f8ae 	bl	8008328 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 80081cc:	f000 fb1c 	bl	8008808 <MX_PDM2PCM_Init>
  MX_DMA_Init();
 80081d0:	f000 fa0c 	bl	80085ec <MX_DMA_Init>
  MX_SAI1_Init();
 80081d4:	f000 f95c 	bl	8008490 <MX_SAI1_Init>
  MX_RAMECC_Init();
 80081d8:	f000 f928 	bl	800842c <MX_RAMECC_Init>
  MX_I2C4_Init();
 80081dc:	f000 f8e6 	bl	80083ac <MX_I2C4_Init>
//  MX_DFSDM1_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 80081e0:	f000 f87e 	bl	80082e0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_SAI_Receive_DMA(&hsai_BlockA4, input_buffer, 4096);
 80081e4:	4b05      	ldr	r3, [pc, #20]	; (80081fc <main+0x130>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081ec:	4619      	mov	r1, r3
 80081ee:	4804      	ldr	r0, [pc, #16]	; (8008200 <main+0x134>)
 80081f0:	f7ff fcc4 	bl	8007b7c <HAL_SAI_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80081f4:	e7fe      	b.n	80081f4 <main+0x128>
 80081f6:	bf00      	nop
 80081f8:	e000ed00 	.word	0xe000ed00
 80081fc:	24000410 	.word	0x24000410
 8008200:	2400063c 	.word	0x2400063c

08008204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b09c      	sub	sp, #112	; 0x70
 8008208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800820a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800820e:	224c      	movs	r2, #76	; 0x4c
 8008210:	2100      	movs	r1, #0
 8008212:	4618      	mov	r0, r3
 8008214:	f002 fd1c 	bl	800ac50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008218:	1d3b      	adds	r3, r7, #4
 800821a:	2220      	movs	r2, #32
 800821c:	2100      	movs	r1, #0
 800821e:	4618      	mov	r0, r3
 8008220:	f002 fd16 	bl	800ac50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8008224:	2004      	movs	r0, #4
 8008226:	f7fc fa2d 	bl	8004684 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800822a:	2300      	movs	r3, #0
 800822c:	603b      	str	r3, [r7, #0]
 800822e:	4b2b      	ldr	r3, [pc, #172]	; (80082dc <SystemClock_Config+0xd8>)
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	4a2a      	ldr	r2, [pc, #168]	; (80082dc <SystemClock_Config+0xd8>)
 8008234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008238:	6193      	str	r3, [r2, #24]
 800823a:	4b28      	ldr	r3, [pc, #160]	; (80082dc <SystemClock_Config+0xd8>)
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008242:	603b      	str	r3, [r7, #0]
 8008244:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008246:	bf00      	nop
 8008248:	4b24      	ldr	r3, [pc, #144]	; (80082dc <SystemClock_Config+0xd8>)
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008254:	d1f8      	bne.n	8008248 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008256:	2302      	movs	r3, #2
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800825a:	2301      	movs	r3, #1
 800825c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800825e:	2340      	movs	r3, #64	; 0x40
 8008260:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008262:	2302      	movs	r3, #2
 8008264:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008266:	2300      	movs	r3, #0
 8008268:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800826a:	2304      	movs	r3, #4
 800826c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800826e:	2318      	movs	r3, #24
 8008270:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8008272:	2301      	movs	r3, #1
 8008274:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8008276:	237d      	movs	r3, #125	; 0x7d
 8008278:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800827a:	2302      	movs	r3, #2
 800827c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800827e:	230c      	movs	r3, #12
 8008280:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008282:	2300      	movs	r3, #0
 8008284:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800828a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800828e:	4618      	mov	r0, r3
 8008290:	f7fc fa90 	bl	80047b4 <HAL_RCC_OscConfig>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800829a:	f000 fab0 	bl	80087fe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800829e:	233f      	movs	r3, #63	; 0x3f
 80082a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082a2:	2303      	movs	r3, #3
 80082a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80082aa:	2308      	movs	r3, #8
 80082ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80082ae:	2340      	movs	r3, #64	; 0x40
 80082b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80082b2:	2340      	movs	r3, #64	; 0x40
 80082b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80082b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	2102      	movs	r1, #2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fc fe21 	bl	8004f0c <HAL_RCC_ClockConfig>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80082d0:	f000 fa95 	bl	80087fe <Error_Handler>
  }
}
 80082d4:	bf00      	nop
 80082d6:	3770      	adds	r7, #112	; 0x70
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	58024800 	.word	0x58024800

080082e0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 80082e4:	2200      	movs	r2, #0
 80082e6:	2100      	movs	r1, #0
 80082e8:	2082      	movs	r0, #130	; 0x82
 80082ea:	f7f8 fa6c 	bl	80007c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 80082ee:	2082      	movs	r0, #130	; 0x82
 80082f0:	f7f8 fa83 	bl	80007fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80082f4:	2200      	movs	r2, #0
 80082f6:	2100      	movs	r1, #0
 80082f8:	2038      	movs	r0, #56	; 0x38
 80082fa:	f7f8 fa64 	bl	80007c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80082fe:	2038      	movs	r0, #56	; 0x38
 8008300:	f7f8 fa7b 	bl	80007fa <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8008304:	2200      	movs	r2, #0
 8008306:	2100      	movs	r1, #0
 8008308:	2006      	movs	r0, #6
 800830a:	f7f8 fa5c 	bl	80007c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800830e:	2006      	movs	r0, #6
 8008310:	f7f8 fa73 	bl	80007fa <HAL_NVIC_EnableIRQ>
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8008314:	2200      	movs	r2, #0
 8008316:	2100      	movs	r1, #0
 8008318:	2080      	movs	r0, #128	; 0x80
 800831a:	f7f8 fa54 	bl	80007c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 800831e:	2080      	movs	r0, #128	; 0x80
 8008320:	f7f8 fa6b 	bl	80007fa <HAL_NVIC_EnableIRQ>
}
 8008324:	bf00      	nop
 8008326:	bd80      	pop	{r7, pc}

08008328 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800832e:	4b1c      	ldr	r3, [pc, #112]	; (80083a0 <MX_CRC_Init+0x78>)
 8008330:	4a1c      	ldr	r2, [pc, #112]	; (80083a4 <MX_CRC_Init+0x7c>)
 8008332:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8008334:	4b1a      	ldr	r3, [pc, #104]	; (80083a0 <MX_CRC_Init+0x78>)
 8008336:	2200      	movs	r2, #0
 8008338:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800833a:	4b19      	ldr	r3, [pc, #100]	; (80083a0 <MX_CRC_Init+0x78>)
 800833c:	2200      	movs	r2, #0
 800833e:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008340:	4b17      	ldr	r3, [pc, #92]	; (80083a0 <MX_CRC_Init+0x78>)
 8008342:	2200      	movs	r2, #0
 8008344:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008346:	4b16      	ldr	r3, [pc, #88]	; (80083a0 <MX_CRC_Init+0x78>)
 8008348:	2200      	movs	r2, #0
 800834a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800834c:	4b14      	ldr	r3, [pc, #80]	; (80083a0 <MX_CRC_Init+0x78>)
 800834e:	2201      	movs	r2, #1
 8008350:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008352:	4813      	ldr	r0, [pc, #76]	; (80083a0 <MX_CRC_Init+0x78>)
 8008354:	f7f8 fae8 	bl	8000928 <HAL_CRC_Init>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800835e:	f000 fa4e 	bl	80087fe <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8008362:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <MX_CRC_Init+0x78>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689a      	ldr	r2, [r3, #8]
 8008368:	4b0d      	ldr	r3, [pc, #52]	; (80083a0 <MX_CRC_Init+0x78>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f042 0201 	orr.w	r2, r2, #1
 8008370:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8008372:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <MX_CRC_Init+0x80>)
 8008374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008378:	4a0b      	ldr	r2, [pc, #44]	; (80083a8 <MX_CRC_Init+0x80>)
 800837a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800837e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008382:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <MX_CRC_Init+0x80>)
 8008384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800838c:	607b      	str	r3, [r7, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8008390:	4803      	ldr	r0, [pc, #12]	; (80083a0 <MX_CRC_Init+0x78>)
 8008392:	f000 fa7d 	bl	8008890 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	24000580 	.word	0x24000580
 80083a4:	58024c00 	.word	0x58024c00
 80083a8:	58024400 	.word	0x58024400

080083ac <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80083b0:	4b1b      	ldr	r3, [pc, #108]	; (8008420 <MX_I2C4_Init+0x74>)
 80083b2:	4a1c      	ldr	r2, [pc, #112]	; (8008424 <MX_I2C4_Init+0x78>)
 80083b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10B0DCFB;
 80083b6:	4b1a      	ldr	r3, [pc, #104]	; (8008420 <MX_I2C4_Init+0x74>)
 80083b8:	4a1b      	ldr	r2, [pc, #108]	; (8008428 <MX_I2C4_Init+0x7c>)
 80083ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 104;
 80083bc:	4b18      	ldr	r3, [pc, #96]	; (8008420 <MX_I2C4_Init+0x74>)
 80083be:	2268      	movs	r2, #104	; 0x68
 80083c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80083c2:	4b17      	ldr	r3, [pc, #92]	; (8008420 <MX_I2C4_Init+0x74>)
 80083c4:	2201      	movs	r2, #1
 80083c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80083c8:	4b15      	ldr	r3, [pc, #84]	; (8008420 <MX_I2C4_Init+0x74>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80083ce:	4b14      	ldr	r3, [pc, #80]	; (8008420 <MX_I2C4_Init+0x74>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80083d4:	4b12      	ldr	r3, [pc, #72]	; (8008420 <MX_I2C4_Init+0x74>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80083da:	4b11      	ldr	r3, [pc, #68]	; (8008420 <MX_I2C4_Init+0x74>)
 80083dc:	2200      	movs	r2, #0
 80083de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80083e0:	4b0f      	ldr	r3, [pc, #60]	; (8008420 <MX_I2C4_Init+0x74>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80083e6:	480e      	ldr	r0, [pc, #56]	; (8008420 <MX_I2C4_Init+0x74>)
 80083e8:	f7fb f9ba 	bl	8003760 <HAL_I2C_Init>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80083f2:	f000 fa04 	bl	80087fe <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80083f6:	2100      	movs	r1, #0
 80083f8:	4809      	ldr	r0, [pc, #36]	; (8008420 <MX_I2C4_Init+0x74>)
 80083fa:	f7fc f8ac 	bl	8004556 <HAL_I2CEx_ConfigAnalogFilter>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8008404:	f000 f9fb 	bl	80087fe <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8008408:	2100      	movs	r1, #0
 800840a:	4805      	ldr	r0, [pc, #20]	; (8008420 <MX_I2C4_Init+0x74>)
 800840c:	f7fc f8ee 	bl	80045ec <HAL_I2CEx_ConfigDigitalFilter>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8008416:	f000 f9f2 	bl	80087fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800841a:	bf00      	nop
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	240004ac 	.word	0x240004ac
 8008424:	58001c00 	.word	0x58001c00
 8008428:	10b0dcfb 	.word	0x10b0dcfb

0800842c <MX_RAMECC_Init>:
  * @brief RAMECC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RAMECC_Init(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RAMECC_Init 1 */

  /* USER CODE END RAMECC_Init 1 */
  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 8008430:	4b11      	ldr	r3, [pc, #68]	; (8008478 <MX_RAMECC_Init+0x4c>)
 8008432:	4a12      	ldr	r2, [pc, #72]	; (800847c <MX_RAMECC_Init+0x50>)
 8008434:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 8008436:	4810      	ldr	r0, [pc, #64]	; (8008478 <MX_RAMECC_Init+0x4c>)
 8008438:	f7fc f97e 	bl	8004738 <HAL_RAMECC_Init>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 8008442:	f000 f9dc 	bl	80087fe <Error_Handler>
  }
  /** Initialize RAMECC2 M2 : SRAM2_0
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 8008446:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <MX_RAMECC_Init+0x54>)
 8008448:	4a0e      	ldr	r2, [pc, #56]	; (8008484 <MX_RAMECC_Init+0x58>)
 800844a:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 800844c:	480c      	ldr	r0, [pc, #48]	; (8008480 <MX_RAMECC_Init+0x54>)
 800844e:	f7fc f973 	bl	8004738 <HAL_RAMECC_Init>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 8008458:	f000 f9d1 	bl	80087fe <Error_Handler>
  }
  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 800845c:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <MX_RAMECC_Init+0x5c>)
 800845e:	4a0b      	ldr	r2, [pc, #44]	; (800848c <MX_RAMECC_Init+0x60>)
 8008460:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 8008462:	4809      	ldr	r0, [pc, #36]	; (8008488 <MX_RAMECC_Init+0x5c>)
 8008464:	f7fc f968 	bl	8004738 <HAL_RAMECC_Init>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 800846e:	f000 f9c6 	bl	80087fe <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 8008472:	bf00      	nop
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	2400075c 	.word	0x2400075c
 800847c:	48023020 	.word	0x48023020
 8008480:	240006d4 	.word	0x240006d4
 8008484:	48023040 	.word	0x48023040
 8008488:	240004f8 	.word	0x240004f8
 800848c:	58027020 	.word	0x58027020

08008490 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8008494:	4b16      	ldr	r3, [pc, #88]	; (80084f0 <MX_SAI1_Init+0x60>)
 8008496:	4a17      	ldr	r2, [pc, #92]	; (80084f4 <MX_SAI1_Init+0x64>)
 8008498:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800849a:	4b15      	ldr	r3, [pc, #84]	; (80084f0 <MX_SAI1_Init+0x60>)
 800849c:	2200      	movs	r2, #0
 800849e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 80084a0:	4b13      	ldr	r3, [pc, #76]	; (80084f0 <MX_SAI1_Init+0x60>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80084a6:	4b12      	ldr	r3, [pc, #72]	; (80084f0 <MX_SAI1_Init+0x60>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80084ac:	4b10      	ldr	r3, [pc, #64]	; (80084f0 <MX_SAI1_Init+0x60>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80084b2:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <MX_SAI1_Init+0x60>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80084b8:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <MX_SAI1_Init+0x60>)
 80084ba:	4a0f      	ldr	r2, [pc, #60]	; (80084f8 <MX_SAI1_Init+0x68>)
 80084bc:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80084be:	4b0c      	ldr	r3, [pc, #48]	; (80084f0 <MX_SAI1_Init+0x60>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80084c4:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <MX_SAI1_Init+0x60>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80084ca:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <MX_SAI1_Init+0x60>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80084d0:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <MX_SAI1_Init+0x60>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80084d6:	2302      	movs	r3, #2
 80084d8:	2200      	movs	r2, #0
 80084da:	2100      	movs	r1, #0
 80084dc:	4804      	ldr	r0, [pc, #16]	; (80084f0 <MX_SAI1_Init+0x60>)
 80084de:	f7ff f907 	bl	80076f0 <HAL_SAI_InitProtocol>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 80084e8:	f000 f989 	bl	80087fe <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80084ec:	bf00      	nop
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	240005a4 	.word	0x240005a4
 80084f4:	40015824 	.word	0x40015824
 80084f8:	0002ee00 	.word	0x0002ee00

080084fc <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 8008500:	4b2b      	ldr	r3, [pc, #172]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008502:	4a2c      	ldr	r2, [pc, #176]	; (80085b4 <MX_SAI4_Init+0xb8>)
 8008504:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8008506:	4b2a      	ldr	r3, [pc, #168]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008508:	2200      	movs	r2, #0
 800850a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 800850c:	4b28      	ldr	r3, [pc, #160]	; (80085b0 <MX_SAI4_Init+0xb4>)
 800850e:	2201      	movs	r2, #1
 8008510:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 8008512:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008514:	2280      	movs	r2, #128	; 0x80
 8008516:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_LSB;
 8008518:	4b25      	ldr	r3, [pc, #148]	; (80085b0 <MX_SAI4_Init+0xb4>)
 800851a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800851e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008520:	4b23      	ldr	r3, [pc, #140]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008522:	2200      	movs	r2, #0
 8008524:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8008526:	4b22      	ldr	r3, [pc, #136]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008528:	2200      	movs	r2, #0
 800852a:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800852c:	4b20      	ldr	r3, [pc, #128]	; (80085b0 <MX_SAI4_Init+0xb4>)
 800852e:	2200      	movs	r2, #0
 8008530:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8008532:	4b1f      	ldr	r3, [pc, #124]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008534:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008538:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800853a:	4b1d      	ldr	r3, [pc, #116]	; (80085b0 <MX_SAI4_Init+0xb4>)
 800853c:	2200      	movs	r2, #0
 800853e:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_MONOMODE;
 8008540:	4b1b      	ldr	r3, [pc, #108]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008546:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8008548:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <MX_SAI4_Init+0xb4>)
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 800854e:	4b18      	ldr	r3, [pc, #96]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 8008556:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008558:	2202      	movs	r2, #2
 800855a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 800855c:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <MX_SAI4_Init+0xb4>)
 800855e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008562:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 16;
 8008564:	4b12      	ldr	r3, [pc, #72]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008566:	2210      	movs	r2, #16
 8008568:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 800856a:	4b11      	ldr	r3, [pc, #68]	; (80085b0 <MX_SAI4_Init+0xb4>)
 800856c:	2201      	movs	r2, #1
 800856e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8008570:	4b0f      	ldr	r3, [pc, #60]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008572:	2200      	movs	r2, #0
 8008574:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008576:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008578:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800857c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800857e:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008580:	2200      	movs	r2, #0
 8008582:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8008584:	4b0a      	ldr	r3, [pc, #40]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008586:	2200      	movs	r2, #0
 8008588:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800858a:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <MX_SAI4_Init+0xb4>)
 800858c:	2200      	movs	r2, #0
 800858e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 0;
 8008590:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008592:	2200      	movs	r2, #0
 8008594:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = SAI_SLOTACTIVE_3;
 8008596:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <MX_SAI4_Init+0xb4>)
 8008598:	2208      	movs	r2, #8
 800859a:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 800859c:	4804      	ldr	r0, [pc, #16]	; (80085b0 <MX_SAI4_Init+0xb4>)
 800859e:	f7ff f8d9 	bl	8007754 <HAL_SAI_Init>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <MX_SAI4_Init+0xb0>
  {
    Error_Handler();
 80085a8:	f000 f929 	bl	80087fe <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 80085ac:	bf00      	nop
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	2400063c 	.word	0x2400063c
 80085b4:	58005404 	.word	0x58005404

080085b8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80085be:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <MX_BDMA_Init+0x30>)
 80085c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085c4:	4a08      	ldr	r2, [pc, #32]	; (80085e8 <MX_BDMA_Init+0x30>)
 80085c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085ce:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <MX_BDMA_Init+0x30>)
 80085d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085d8:	607b      	str	r3, [r7, #4]
 80085da:	687b      	ldr	r3, [r7, #4]

}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	58024400 	.word	0x58024400

080085ec <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80085f2:	4b33      	ldr	r3, [pc, #204]	; (80086c0 <MX_DMA_Init+0xd4>)
 80085f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80085f8:	4a31      	ldr	r2, [pc, #196]	; (80086c0 <MX_DMA_Init+0xd4>)
 80085fa:	f043 0302 	orr.w	r3, r3, #2
 80085fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008602:	4b2f      	ldr	r3, [pc, #188]	; (80086c0 <MX_DMA_Init+0xd4>)
 8008604:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	607b      	str	r3, [r7, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008610:	4b2b      	ldr	r3, [pc, #172]	; (80086c0 <MX_DMA_Init+0xd4>)
 8008612:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008616:	4a2a      	ldr	r2, [pc, #168]	; (80086c0 <MX_DMA_Init+0xd4>)
 8008618:	f043 0301 	orr.w	r3, r3, #1
 800861c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008620:	4b27      	ldr	r3, [pc, #156]	; (80086c0 <MX_DMA_Init+0xd4>)
 8008622:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800862e:	4b25      	ldr	r3, [pc, #148]	; (80086c4 <MX_DMA_Init+0xd8>)
 8008630:	4a25      	ldr	r2, [pc, #148]	; (80086c8 <MX_DMA_Init+0xdc>)
 8008632:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8008634:	4b23      	ldr	r3, [pc, #140]	; (80086c4 <MX_DMA_Init+0xd8>)
 8008636:	2200      	movs	r2, #0
 8008638:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800863a:	4b22      	ldr	r3, [pc, #136]	; (80086c4 <MX_DMA_Init+0xd8>)
 800863c:	2280      	movs	r2, #128	; 0x80
 800863e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8008640:	4b20      	ldr	r3, [pc, #128]	; (80086c4 <MX_DMA_Init+0xd8>)
 8008642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008646:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8008648:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <MX_DMA_Init+0xd8>)
 800864a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800864e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008650:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <MX_DMA_Init+0xd8>)
 8008652:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008656:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008658:	4b1a      	ldr	r3, [pc, #104]	; (80086c4 <MX_DMA_Init+0xd8>)
 800865a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800865e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8008660:	4b18      	ldr	r3, [pc, #96]	; (80086c4 <MX_DMA_Init+0xd8>)
 8008662:	2200      	movs	r2, #0
 8008664:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8008666:	4b17      	ldr	r3, [pc, #92]	; (80086c4 <MX_DMA_Init+0xd8>)
 8008668:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800866c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800866e:	4b15      	ldr	r3, [pc, #84]	; (80086c4 <MX_DMA_Init+0xd8>)
 8008670:	2204      	movs	r2, #4
 8008672:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008674:	4b13      	ldr	r3, [pc, #76]	; (80086c4 <MX_DMA_Init+0xd8>)
 8008676:	2203      	movs	r2, #3
 8008678:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800867a:	4b12      	ldr	r3, [pc, #72]	; (80086c4 <MX_DMA_Init+0xd8>)
 800867c:	2200      	movs	r2, #0
 800867e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008680:	4b10      	ldr	r3, [pc, #64]	; (80086c4 <MX_DMA_Init+0xd8>)
 8008682:	2200      	movs	r2, #0
 8008684:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8008686:	480f      	ldr	r0, [pc, #60]	; (80086c4 <MX_DMA_Init+0xd8>)
 8008688:	f7f8 fa38 	bl	8000afc <HAL_DMA_Init>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <MX_DMA_Init+0xaa>
  {
    Error_Handler( );
 8008692:	f000 f8b4 	bl	80087fe <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8008696:	2200      	movs	r2, #0
 8008698:	2100      	movs	r1, #0
 800869a:	200c      	movs	r0, #12
 800869c:	f7f8 f893 	bl	80007c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80086a0:	200c      	movs	r0, #12
 80086a2:	f7f8 f8aa 	bl	80007fa <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80086a6:	2200      	movs	r2, #0
 80086a8:	2100      	movs	r1, #0
 80086aa:	2066      	movs	r0, #102	; 0x66
 80086ac:	f7f8 f88b 	bl	80007c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80086b0:	2066      	movs	r0, #102	; 0x66
 80086b2:	f7f8 f8a2 	bl	80007fa <HAL_NVIC_EnableIRQ>

}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	58024400 	.word	0x58024400
 80086c4:	24000508 	.word	0x24000508
 80086c8:	40020410 	.word	0x40020410

080086cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08a      	sub	sp, #40	; 0x28
 80086d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d2:	f107 0314 	add.w	r3, r7, #20
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	605a      	str	r2, [r3, #4]
 80086dc:	609a      	str	r2, [r3, #8]
 80086de:	60da      	str	r2, [r3, #12]
 80086e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80086e2:	4b2e      	ldr	r3, [pc, #184]	; (800879c <MX_GPIO_Init+0xd0>)
 80086e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086e8:	4a2c      	ldr	r2, [pc, #176]	; (800879c <MX_GPIO_Init+0xd0>)
 80086ea:	f043 0302 	orr.w	r3, r3, #2
 80086ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086f2:	4b2a      	ldr	r3, [pc, #168]	; (800879c <MX_GPIO_Init+0xd0>)
 80086f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008700:	4b26      	ldr	r3, [pc, #152]	; (800879c <MX_GPIO_Init+0xd0>)
 8008702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008706:	4a25      	ldr	r2, [pc, #148]	; (800879c <MX_GPIO_Init+0xd0>)
 8008708:	f043 0301 	orr.w	r3, r3, #1
 800870c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008710:	4b22      	ldr	r3, [pc, #136]	; (800879c <MX_GPIO_Init+0xd0>)
 8008712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800871e:	4b1f      	ldr	r3, [pc, #124]	; (800879c <MX_GPIO_Init+0xd0>)
 8008720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008724:	4a1d      	ldr	r2, [pc, #116]	; (800879c <MX_GPIO_Init+0xd0>)
 8008726:	f043 0310 	orr.w	r3, r3, #16
 800872a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800872e:	4b1b      	ldr	r3, [pc, #108]	; (800879c <MX_GPIO_Init+0xd0>)
 8008730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	60bb      	str	r3, [r7, #8]
 800873a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800873c:	4b17      	ldr	r3, [pc, #92]	; (800879c <MX_GPIO_Init+0xd0>)
 800873e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008742:	4a16      	ldr	r2, [pc, #88]	; (800879c <MX_GPIO_Init+0xd0>)
 8008744:	f043 0308 	orr.w	r3, r3, #8
 8008748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800874c:	4b13      	ldr	r3, [pc, #76]	; (800879c <MX_GPIO_Init+0xd0>)
 800874e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008752:	f003 0308 	and.w	r3, r3, #8
 8008756:	607b      	str	r3, [r7, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800875a:	4b10      	ldr	r3, [pc, #64]	; (800879c <MX_GPIO_Init+0xd0>)
 800875c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008760:	4a0e      	ldr	r2, [pc, #56]	; (800879c <MX_GPIO_Init+0xd0>)
 8008762:	f043 0320 	orr.w	r3, r3, #32
 8008766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800876a:	4b0c      	ldr	r3, [pc, #48]	; (800879c <MX_GPIO_Init+0xd0>)
 800876c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008770:	f003 0320 	and.w	r3, r3, #32
 8008774:	603b      	str	r3, [r7, #0]
 8008776:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008778:	2301      	movs	r3, #1
 800877a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800877c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008782:	2300      	movs	r3, #0
 8008784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008786:	f107 0314 	add.w	r3, r7, #20
 800878a:	4619      	mov	r1, r3
 800878c:	4804      	ldr	r0, [pc, #16]	; (80087a0 <MX_GPIO_Init+0xd4>)
 800878e:	f7fa fe01 	bl	8003394 <HAL_GPIO_Init>

}
 8008792:	bf00      	nop
 8008794:	3728      	adds	r7, #40	; 0x28
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	58024400 	.word	0x58024400
 80087a0:	58021000 	.word	0x58021000

080087a4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80087aa:	463b      	mov	r3, r7
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	605a      	str	r2, [r3, #4]
 80087b2:	609a      	str	r2, [r3, #8]
 80087b4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80087b6:	f7f8 f83b 	bl	8000830 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80087ba:	2301      	movs	r3, #1
 80087bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80087be:	2300      	movs	r3, #0
 80087c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80087c2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80087c6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80087c8:	2310      	movs	r3, #16
 80087ca:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80087d4:	2303      	movs	r3, #3
 80087d6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80087d8:	2300      	movs	r3, #0
 80087da:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80087dc:	2301      	movs	r3, #1
 80087de:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80087e8:	463b      	mov	r3, r7
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f8 f858 	bl	80008a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 80087f0:	2006      	movs	r0, #6
 80087f2:	f7f8 f835 	bl	8000860 <HAL_MPU_Enable>

}
 80087f6:	bf00      	nop
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087fe:	b480      	push	{r7}
 8008800:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008802:	b672      	cpsid	i
}
 8008804:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008806:	e7fe      	b.n	8008806 <Error_Handler+0x8>

08008808 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800880c:	4b10      	ldr	r3, [pc, #64]	; (8008850 <MX_PDM2PCM_Init+0x48>)
 800880e:	2201      	movs	r2, #1
 8008810:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <MX_PDM2PCM_Init+0x48>)
 8008814:	2201      	movs	r2, #1
 8008816:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8008818:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <MX_PDM2PCM_Init+0x48>)
 800881a:	4a0e      	ldr	r2, [pc, #56]	; (8008854 <MX_PDM2PCM_Init+0x4c>)
 800881c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800881e:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <MX_PDM2PCM_Init+0x48>)
 8008820:	2201      	movs	r2, #1
 8008822:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8008824:	4b0a      	ldr	r3, [pc, #40]	; (8008850 <MX_PDM2PCM_Init+0x48>)
 8008826:	2201      	movs	r2, #1
 8008828:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800882a:	4809      	ldr	r0, [pc, #36]	; (8008850 <MX_PDM2PCM_Init+0x48>)
 800882c:	f002 f81c 	bl	800a868 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8008830:	4b09      	ldr	r3, [pc, #36]	; (8008858 <MX_PDM2PCM_Init+0x50>)
 8008832:	2202      	movs	r2, #2
 8008834:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8008836:	4b08      	ldr	r3, [pc, #32]	; (8008858 <MX_PDM2PCM_Init+0x50>)
 8008838:	2210      	movs	r2, #16
 800883a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800883c:	4b06      	ldr	r3, [pc, #24]	; (8008858 <MX_PDM2PCM_Init+0x50>)
 800883e:	2200      	movs	r2, #0
 8008840:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8008842:	4905      	ldr	r1, [pc, #20]	; (8008858 <MX_PDM2PCM_Init+0x50>)
 8008844:	4802      	ldr	r0, [pc, #8]	; (8008850 <MX_PDM2PCM_Init+0x48>)
 8008846:	f002 f8df 	bl	800aa08 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800884a:	bf00      	nop
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	2400084c 	.word	0x2400084c
 8008854:	7d70a3d6 	.word	0x7d70a3d6
 8008858:	24000844 	.word	0x24000844

0800885c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008862:	4b0a      	ldr	r3, [pc, #40]	; (800888c <HAL_MspInit+0x30>)
 8008864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008868:	4a08      	ldr	r2, [pc, #32]	; (800888c <HAL_MspInit+0x30>)
 800886a:	f043 0302 	orr.w	r3, r3, #2
 800886e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008872:	4b06      	ldr	r3, [pc, #24]	; (800888c <HAL_MspInit+0x30>)
 8008874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	607b      	str	r3, [r7, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	58024400 	.word	0x58024400

08008890 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a0b      	ldr	r2, [pc, #44]	; (80088cc <HAL_CRC_MspInit+0x3c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d10e      	bne.n	80088c0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80088a2:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <HAL_CRC_MspInit+0x40>)
 80088a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088a8:	4a09      	ldr	r2, [pc, #36]	; (80088d0 <HAL_CRC_MspInit+0x40>)
 80088aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80088b2:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <HAL_CRC_MspInit+0x40>)
 80088b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80088c0:	bf00      	nop
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	58024c00 	.word	0x58024c00
 80088d0:	58024400 	.word	0x58024400

080088d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b0b6      	sub	sp, #216	; 0xd8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80088e0:	2200      	movs	r2, #0
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	605a      	str	r2, [r3, #4]
 80088e6:	609a      	str	r2, [r3, #8]
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80088ec:	f107 0310 	add.w	r3, r7, #16
 80088f0:	22b4      	movs	r2, #180	; 0xb4
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f002 f9ab 	bl	800ac50 <memset>
  if(hi2c->Instance==I2C4)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a29      	ldr	r2, [pc, #164]	; (80089a4 <HAL_I2C_MspInit+0xd0>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d14a      	bne.n	800899a <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8008904:	2310      	movs	r3, #16
 8008906:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8008908:	2300      	movs	r3, #0
 800890a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800890e:	f107 0310 	add.w	r3, r7, #16
 8008912:	4618      	mov	r0, r3
 8008914:	f7fc fe5a 	bl	80055cc <HAL_RCCEx_PeriphCLKConfig>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800891e:	f7ff ff6e 	bl	80087fe <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008922:	4b21      	ldr	r3, [pc, #132]	; (80089a8 <HAL_I2C_MspInit+0xd4>)
 8008924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008928:	4a1f      	ldr	r2, [pc, #124]	; (80089a8 <HAL_I2C_MspInit+0xd4>)
 800892a:	f043 0302 	orr.w	r3, r3, #2
 800892e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008932:	4b1d      	ldr	r3, [pc, #116]	; (80089a8 <HAL_I2C_MspInit+0xd4>)
 8008934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008940:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008944:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008948:	2312      	movs	r3, #18
 800894a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800894e:	2300      	movs	r3, #0
 8008950:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008954:	2300      	movs	r3, #0
 8008956:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800895a:	2306      	movs	r3, #6
 800895c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008960:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008964:	4619      	mov	r1, r3
 8008966:	4811      	ldr	r0, [pc, #68]	; (80089ac <HAL_I2C_MspInit+0xd8>)
 8008968:	f7fa fd14 	bl	8003394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800896c:	4b0e      	ldr	r3, [pc, #56]	; (80089a8 <HAL_I2C_MspInit+0xd4>)
 800896e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008972:	4a0d      	ldr	r2, [pc, #52]	; (80089a8 <HAL_I2C_MspInit+0xd4>)
 8008974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008978:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800897c:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <HAL_I2C_MspInit+0xd4>)
 800897e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008986:	60bb      	str	r3, [r7, #8]
 8008988:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800898a:	2200      	movs	r2, #0
 800898c:	2100      	movs	r1, #0
 800898e:	2060      	movs	r0, #96	; 0x60
 8008990:	f7f7 ff19 	bl	80007c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8008994:	2060      	movs	r0, #96	; 0x60
 8008996:	f7f7 ff30 	bl	80007fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800899a:	bf00      	nop
 800899c:	37d8      	adds	r7, #216	; 0xd8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	58001c00 	.word	0x58001c00
 80089a8:	58024400 	.word	0x58024400
 80089ac:	58020400 	.word	0x58020400

080089b0 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b0ba      	sub	sp, #232	; 0xe8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80089b8:	f107 0310 	add.w	r3, r7, #16
 80089bc:	22b4      	movs	r2, #180	; 0xb4
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f002 f945 	bl	800ac50 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4aa0      	ldr	r2, [pc, #640]	; (8008c4c <HAL_SAI_MspInit+0x29c>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	f040 80a5 	bne.w	8008b1c <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80089d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80089d8:	2300      	movs	r3, #0
 80089da:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80089dc:	f107 0310 	add.w	r3, r7, #16
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fc fdf3 	bl	80055cc <HAL_RCCEx_PeriphCLKConfig>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 80089ec:	f7ff ff07 	bl	80087fe <Error_Handler>
    }

      if (SAI1_client == 0)
 80089f0:	4b97      	ldr	r3, [pc, #604]	; (8008c50 <HAL_SAI_MspInit+0x2a0>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10e      	bne.n	8008a16 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80089f8:	4b96      	ldr	r3, [pc, #600]	; (8008c54 <HAL_SAI_MspInit+0x2a4>)
 80089fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089fe:	4a95      	ldr	r2, [pc, #596]	; (8008c54 <HAL_SAI_MspInit+0x2a4>)
 8008a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008a08:	4b92      	ldr	r3, [pc, #584]	; (8008c54 <HAL_SAI_MspInit+0x2a4>)
 8008a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8008a16:	4b8e      	ldr	r3, [pc, #568]	; (8008c50 <HAL_SAI_MspInit+0x2a0>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	4a8c      	ldr	r2, [pc, #560]	; (8008c50 <HAL_SAI_MspInit+0x2a0>)
 8008a1e:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008a20:	2308      	movs	r3, #8
 8008a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a26:	2302      	movs	r3, #2
 8008a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a32:	2300      	movs	r3, #0
 8008a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008a38:	2306      	movs	r3, #6
 8008a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008a42:	4619      	mov	r1, r3
 8008a44:	4884      	ldr	r0, [pc, #528]	; (8008c58 <HAL_SAI_MspInit+0x2a8>)
 8008a46:	f7fa fca5 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008a4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a52:	2302      	movs	r3, #2
 8008a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008a64:	2306      	movs	r3, #6
 8008a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008a6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008a6e:	4619      	mov	r1, r3
 8008a70:	487a      	ldr	r0, [pc, #488]	; (8008c5c <HAL_SAI_MspInit+0x2ac>)
 8008a72:	f7fa fc8f 	bl	8003394 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8008a76:	4b7a      	ldr	r3, [pc, #488]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008a78:	4a7a      	ldr	r2, [pc, #488]	; (8008c64 <HAL_SAI_MspInit+0x2b4>)
 8008a7a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8008a7c:	4b78      	ldr	r3, [pc, #480]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008a7e:	2258      	movs	r2, #88	; 0x58
 8008a80:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a82:	4b77      	ldr	r3, [pc, #476]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008a84:	2240      	movs	r2, #64	; 0x40
 8008a86:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a88:	4b75      	ldr	r3, [pc, #468]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8008a8e:	4b74      	ldr	r3, [pc, #464]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a94:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008a96:	4b72      	ldr	r3, [pc, #456]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008a98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a9c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008a9e:	4b70      	ldr	r3, [pc, #448]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008aa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008aa4:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8008aa6:	4b6e      	ldr	r3, [pc, #440]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008aac:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8008aae:	4b6c      	ldr	r3, [pc, #432]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ab4:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ab6:	4b6a      	ldr	r3, [pc, #424]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8008abc:	4868      	ldr	r0, [pc, #416]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008abe:	f7f8 f81d 	bl	8000afc <HAL_DMA_Init>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8008ac8:	f7ff fe99 	bl	80087fe <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8008acc:	2306      	movs	r3, #6
 8008ace:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8008aea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008aee:	4619      	mov	r1, r3
 8008af0:	485b      	ldr	r0, [pc, #364]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008af2:	f7fa fb37 	bl	8003164 <HAL_DMAEx_ConfigMuxSync>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8008afc:	f7ff fe7f 	bl	80087fe <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a57      	ldr	r2, [pc, #348]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008b08:	4a55      	ldr	r2, [pc, #340]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a53      	ldr	r2, [pc, #332]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008b16:	4a52      	ldr	r2, [pc, #328]	; (8008c60 <HAL_SAI_MspInit+0x2b0>)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a51      	ldr	r2, [pc, #324]	; (8008c68 <HAL_SAI_MspInit+0x2b8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	f040 808d 	bne.w	8008c42 <HAL_SAI_MspInit+0x292>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8008b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008b34:	f107 0310 	add.w	r3, r7, #16
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fc fd47 	bl	80055cc <HAL_RCCEx_PeriphCLKConfig>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8008b44:	f7ff fe5b 	bl	80087fe <Error_Handler>
    }

    if (SAI4_client == 0)
 8008b48:	4b48      	ldr	r3, [pc, #288]	; (8008c6c <HAL_SAI_MspInit+0x2bc>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10e      	bne.n	8008b6e <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8008b50:	4b40      	ldr	r3, [pc, #256]	; (8008c54 <HAL_SAI_MspInit+0x2a4>)
 8008b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b56:	4a3f      	ldr	r2, [pc, #252]	; (8008c54 <HAL_SAI_MspInit+0x2a4>)
 8008b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b60:	4b3c      	ldr	r3, [pc, #240]	; (8008c54 <HAL_SAI_MspInit+0x2a4>)
 8008b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b6a:	60bb      	str	r3, [r7, #8]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8008b6e:	4b3f      	ldr	r3, [pc, #252]	; (8008c6c <HAL_SAI_MspInit+0x2bc>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3301      	adds	r3, #1
 8008b74:	4a3d      	ldr	r2, [pc, #244]	; (8008c6c <HAL_SAI_MspInit+0x2bc>)
 8008b76:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008b78:	2330      	movs	r3, #48	; 0x30
 8008b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b7e:	2302      	movs	r3, #2
 8008b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b84:	2300      	movs	r3, #0
 8008b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8008b90:	230a      	movs	r3, #10
 8008b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008b96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	482e      	ldr	r0, [pc, #184]	; (8008c58 <HAL_SAI_MspInit+0x2a8>)
 8008b9e:	f7fa fbf9 	bl	8003394 <HAL_GPIO_Init>
//    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
//    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 8008ba2:	4b33      	ldr	r3, [pc, #204]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008ba4:	4a33      	ldr	r2, [pc, #204]	; (8008c74 <HAL_SAI_MspInit+0x2c4>)
 8008ba6:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8008ba8:	4b31      	ldr	r3, [pc, #196]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008baa:	220f      	movs	r2, #15
 8008bac:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008bae:	4b30      	ldr	r3, [pc, #192]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008bb4:	4b2e      	ldr	r3, [pc, #184]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8008bba:	4b2d      	ldr	r3, [pc, #180]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bc0:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008bc2:	4b2b      	ldr	r3, [pc, #172]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bc8:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008bca:	4b29      	ldr	r3, [pc, #164]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bd0:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8008bd2:	4b27      	ldr	r3, [pc, #156]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bd8:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008bda:	4b25      	ldr	r3, [pc, #148]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008bdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008be0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8008be2:	4823      	ldr	r0, [pc, #140]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008be4:	f7f7 ff8a 	bl	8000afc <HAL_DMA_Init>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <HAL_SAI_MspInit+0x242>
    {
      Error_Handler();
 8008bee:	f7ff fe06 	bl	80087fe <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8008bf2:	230e      	movs	r3, #14
 8008bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008c04:	2301      	movs	r3, #1
 8008c06:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8008c10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008c14:	4619      	mov	r1, r3
 8008c16:	4816      	ldr	r0, [pc, #88]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008c18:	f7fa faa4 	bl	8003164 <HAL_DMAEx_ConfigMuxSync>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <HAL_SAI_MspInit+0x276>
    {
      Error_Handler();
 8008c22:	f7ff fdec 	bl	80087fe <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a11      	ldr	r2, [pc, #68]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008c2e:	4a10      	ldr	r2, [pc, #64]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a0e      	ldr	r2, [pc, #56]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008c3c:	4a0c      	ldr	r2, [pc, #48]	; (8008c70 <HAL_SAI_MspInit+0x2c0>)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8008c42:	bf00      	nop
 8008c44:	37e8      	adds	r7, #232	; 0xe8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	40015824 	.word	0x40015824
 8008c50:	240004a0 	.word	0x240004a0
 8008c54:	58024400 	.word	0x58024400
 8008c58:	58021000 	.word	0x58021000
 8008c5c:	58021400 	.word	0x58021400
 8008c60:	240007a4 	.word	0x240007a4
 8008c64:	40020028 	.word	0x40020028
 8008c68:	58005404 	.word	0x58005404
 8008c6c:	240004a4 	.word	0x240004a4
 8008c70:	240006e4 	.word	0x240006e4
 8008c74:	5802541c 	.word	0x5802541c

08008c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008c7c:	e7fe      	b.n	8008c7c <NMI_Handler+0x4>

08008c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c82:	e7fe      	b.n	8008c82 <HardFault_Handler+0x4>

08008c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c88:	e7fe      	b.n	8008c88 <MemManage_Handler+0x4>

08008c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c8e:	e7fe      	b.n	8008c8e <BusFault_Handler+0x4>

08008c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c94:	e7fe      	b.n	8008c94 <UsageFault_Handler+0x4>

08008c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c96:	b480      	push	{r7}
 8008c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c9a:	bf00      	nop
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ca8:	bf00      	nop
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008cb6:	bf00      	nop
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008cc4:	f7f7 fc84 	bl	80005d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008cc8:	bf00      	nop
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BSP_LED_On(LED1);
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	f7f7 fb7b 	bl	80003cc <BSP_LED_On>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	f7fa fd1d 	bl	8003716 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8008cdc:	bf00      	nop
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008ce4:	4802      	ldr	r0, [pc, #8]	; (8008cf0 <DMA1_Stream1_IRQHandler+0x10>)
 8008ce6:	f7f8 ff11 	bl	8001b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008cea:	bf00      	nop
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	240007a4 	.word	0x240007a4

08008cf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8008cf8:	4803      	ldr	r0, [pc, #12]	; (8008d08 <DMA2_Stream0_IRQHandler+0x14>)
 8008cfa:	f7f8 ff07 	bl	8001b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  BSP_LED_On(LED1);
 8008cfe:	2000      	movs	r0, #0
 8008d00:	f7f7 fb64 	bl	80003cc <BSP_LED_On>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008d04:	bf00      	nop
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	24000508 	.word	0x24000508

08008d0c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8008d10:	4802      	ldr	r0, [pc, #8]	; (8008d1c <I2C4_ER_IRQHandler+0x10>)
 8008d12:	f7fa fdb5 	bl	8003880 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8008d16:	bf00      	nop
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	240004ac 	.word	0x240004ac

08008d20 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 8008d24:	4802      	ldr	r0, [pc, #8]	; (8008d30 <DMAMUX1_OVR_IRQHandler+0x10>)
 8008d26:	f7fa fae3 	bl	80032f0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8008d2a:	bf00      	nop
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	240007a4 	.word	0x240007a4

08008d34 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8008d38:	4802      	ldr	r0, [pc, #8]	; (8008d44 <DMAMUX2_OVR_IRQHandler+0x10>)
 8008d3a:	f7fa fad9 	bl	80032f0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */
  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8008d3e:	bf00      	nop
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	240006e4 	.word	0x240006e4

08008d48 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8008d4c:	4803      	ldr	r0, [pc, #12]	; (8008d5c <BDMA_Channel1_IRQHandler+0x14>)
 8008d4e:	f7f8 fedd 	bl	8001b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */
  BSP_LED_On(LED2);
 8008d52:	2001      	movs	r0, #1
 8008d54:	f7f7 fb3a 	bl	80003cc <BSP_LED_On>
  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8008d58:	bf00      	nop
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	240006e4 	.word	0x240006e4

08008d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008d60:	b480      	push	{r7}
 8008d62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008d64:	4b32      	ldr	r3, [pc, #200]	; (8008e30 <SystemInit+0xd0>)
 8008d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d6a:	4a31      	ldr	r2, [pc, #196]	; (8008e30 <SystemInit+0xd0>)
 8008d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008d74:	4b2f      	ldr	r3, [pc, #188]	; (8008e34 <SystemInit+0xd4>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 030f 	and.w	r3, r3, #15
 8008d7c:	2b06      	cmp	r3, #6
 8008d7e:	d807      	bhi.n	8008d90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008d80:	4b2c      	ldr	r3, [pc, #176]	; (8008e34 <SystemInit+0xd4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f023 030f 	bic.w	r3, r3, #15
 8008d88:	4a2a      	ldr	r2, [pc, #168]	; (8008e34 <SystemInit+0xd4>)
 8008d8a:	f043 0307 	orr.w	r3, r3, #7
 8008d8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008d90:	4b29      	ldr	r3, [pc, #164]	; (8008e38 <SystemInit+0xd8>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a28      	ldr	r2, [pc, #160]	; (8008e38 <SystemInit+0xd8>)
 8008d96:	f043 0301 	orr.w	r3, r3, #1
 8008d9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008d9c:	4b26      	ldr	r3, [pc, #152]	; (8008e38 <SystemInit+0xd8>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008da2:	4b25      	ldr	r3, [pc, #148]	; (8008e38 <SystemInit+0xd8>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	4924      	ldr	r1, [pc, #144]	; (8008e38 <SystemInit+0xd8>)
 8008da8:	4b24      	ldr	r3, [pc, #144]	; (8008e3c <SystemInit+0xdc>)
 8008daa:	4013      	ands	r3, r2
 8008dac:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008dae:	4b21      	ldr	r3, [pc, #132]	; (8008e34 <SystemInit+0xd4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0308 	and.w	r3, r3, #8
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d007      	beq.n	8008dca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008dba:	4b1e      	ldr	r3, [pc, #120]	; (8008e34 <SystemInit+0xd4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f023 030f 	bic.w	r3, r3, #15
 8008dc2:	4a1c      	ldr	r2, [pc, #112]	; (8008e34 <SystemInit+0xd4>)
 8008dc4:	f043 0307 	orr.w	r3, r3, #7
 8008dc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008dca:	4b1b      	ldr	r3, [pc, #108]	; (8008e38 <SystemInit+0xd8>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008dd0:	4b19      	ldr	r3, [pc, #100]	; (8008e38 <SystemInit+0xd8>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008dd6:	4b18      	ldr	r3, [pc, #96]	; (8008e38 <SystemInit+0xd8>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008ddc:	4b16      	ldr	r3, [pc, #88]	; (8008e38 <SystemInit+0xd8>)
 8008dde:	4a18      	ldr	r2, [pc, #96]	; (8008e40 <SystemInit+0xe0>)
 8008de0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008de2:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <SystemInit+0xd8>)
 8008de4:	4a17      	ldr	r2, [pc, #92]	; (8008e44 <SystemInit+0xe4>)
 8008de6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008de8:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <SystemInit+0xd8>)
 8008dea:	4a17      	ldr	r2, [pc, #92]	; (8008e48 <SystemInit+0xe8>)
 8008dec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008dee:	4b12      	ldr	r3, [pc, #72]	; (8008e38 <SystemInit+0xd8>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008df4:	4b10      	ldr	r3, [pc, #64]	; (8008e38 <SystemInit+0xd8>)
 8008df6:	4a14      	ldr	r2, [pc, #80]	; (8008e48 <SystemInit+0xe8>)
 8008df8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008dfa:	4b0f      	ldr	r3, [pc, #60]	; (8008e38 <SystemInit+0xd8>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008e00:	4b0d      	ldr	r3, [pc, #52]	; (8008e38 <SystemInit+0xd8>)
 8008e02:	4a11      	ldr	r2, [pc, #68]	; (8008e48 <SystemInit+0xe8>)
 8008e04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <SystemInit+0xd8>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <SystemInit+0xd8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a09      	ldr	r2, [pc, #36]	; (8008e38 <SystemInit+0xd8>)
 8008e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008e18:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <SystemInit+0xd8>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008e1e:	4b0b      	ldr	r3, [pc, #44]	; (8008e4c <SystemInit+0xec>)
 8008e20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008e24:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008e26:	bf00      	nop
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	e000ed00 	.word	0xe000ed00
 8008e34:	52002000 	.word	0x52002000
 8008e38:	58024400 	.word	0x58024400
 8008e3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008e40:	02020200 	.word	0x02020200
 8008e44:	01ff0000 	.word	0x01ff0000
 8008e48:	01010280 	.word	0x01010280
 8008e4c:	52004000 	.word	0x52004000

08008e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008e54:	f7ff ff84 	bl	8008d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008e58:	480c      	ldr	r0, [pc, #48]	; (8008e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008e5a:	490d      	ldr	r1, [pc, #52]	; (8008e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008e5c:	4a0d      	ldr	r2, [pc, #52]	; (8008e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e60:	e002      	b.n	8008e68 <LoopCopyDataInit>

08008e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e66:	3304      	adds	r3, #4

08008e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e6c:	d3f9      	bcc.n	8008e62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e6e:	4a0a      	ldr	r2, [pc, #40]	; (8008e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008e70:	4c0a      	ldr	r4, [pc, #40]	; (8008e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e74:	e001      	b.n	8008e7a <LoopFillZerobss>

08008e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e78:	3204      	adds	r2, #4

08008e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e7c:	d3fb      	bcc.n	8008e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008e7e:	f001 fec3 	bl	800ac08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e82:	f7ff f923 	bl	80080cc <main>
  bx  lr
 8008e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008e88:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008e8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008e90:	24000480 	.word	0x24000480
  ldr r2, =_sidata
 8008e94:	0800b2d0 	.word	0x0800b2d0
  ldr r2, =_sbss
 8008e98:	24000480 	.word	0x24000480
  ldr r4, =_ebss
 8008e9c:	24000898 	.word	0x24000898

08008ea0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ea0:	e7fe      	b.n	8008ea0 <ADC3_IRQHandler>
	...

08008ea4 <D16_GENERIC>:
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	b089      	sub	sp, #36	; 0x24
 8008eaa:	6993      	ldr	r3, [r2, #24]
 8008eac:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008eae:	9103      	str	r1, [sp, #12]
 8008eb0:	9307      	str	r3, [sp, #28]
 8008eb2:	69d3      	ldr	r3, [r2, #28]
 8008eb4:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8008eb8:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8008ebc:	9106      	str	r1, [sp, #24]
 8008ebe:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8008ec2:	2d00      	cmp	r5, #0
 8008ec4:	d063      	beq.n	8008f8e <D16_GENERIC+0xea>
 8008ec6:	f001 0520 	and.w	r5, r1, #32
 8008eca:	f001 0110 	and.w	r1, r1, #16
 8008ece:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8008fb0 <D16_GENERIC+0x10c>
 8008ed2:	46c1      	mov	r9, r8
 8008ed4:	9104      	str	r1, [sp, #16]
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	9505      	str	r5, [sp, #20]
 8008eda:	e04d      	b.n	8008f78 <D16_GENERIC+0xd4>
 8008edc:	5d87      	ldrb	r7, [r0, r6]
 8008ede:	7805      	ldrb	r5, [r0, #0]
 8008ee0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8008ee4:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8008ee8:	b2fe      	uxtb	r6, r7
 8008eea:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8008eee:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8008ef2:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8008ef6:	441d      	add	r5, r3
 8008ef8:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8008efc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008f00:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8008f04:	0a9b      	lsrs	r3, r3, #10
 8008f06:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8008f0a:	4d27      	ldr	r5, [pc, #156]	; (8008fa8 <D16_GENERIC+0x104>)
 8008f0c:	fb26 c505 	smlad	r5, r6, r5, ip
 8008f10:	4f26      	ldr	r7, [pc, #152]	; (8008fac <D16_GENERIC+0x108>)
 8008f12:	fb26 fc07 	smuad	ip, r6, r7
 8008f16:	9e04      	ldr	r6, [sp, #16]
 8008f18:	f101 0801 	add.w	r8, r1, #1
 8008f1c:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8008f20:	b1ae      	cbz	r6, 8008f4e <D16_GENERIC+0xaa>
 8008f22:	442c      	add	r4, r5
 8008f24:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8008f28:	eba4 040a 	sub.w	r4, r4, sl
 8008f2c:	46aa      	mov	sl, r5
 8008f2e:	17e7      	asrs	r7, r4, #31
 8008f30:	fba4 450b 	umull	r4, r5, r4, fp
 8008f34:	e9cd 4500 	strd	r4, r5, [sp]
 8008f38:	fb0b 5407 	mla	r4, fp, r7, r5
 8008f3c:	9401      	str	r4, [sp, #4]
 8008f3e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008f42:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008f46:	f145 0500 	adc.w	r5, r5, #0
 8008f4a:	006c      	lsls	r4, r5, #1
 8008f4c:	4625      	mov	r5, r4
 8008f4e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008f52:	042d      	lsls	r5, r5, #16
 8008f54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008f58:	2700      	movs	r7, #0
 8008f5a:	fb01 fb0b 	mul.w	fp, r1, fp
 8008f5e:	fa1f f188 	uxth.w	r1, r8
 8008f62:	fbc9 6705 	smlal	r6, r7, r9, r5
 8008f66:	9e03      	ldr	r6, [sp, #12]
 8008f68:	10bd      	asrs	r5, r7, #2
 8008f6a:	f305 050f 	ssat	r5, #16, r5
 8008f6e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008f72:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008f74:	428d      	cmp	r5, r1
 8008f76:	d90a      	bls.n	8008f8e <D16_GENERIC+0xea>
 8008f78:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008f7a:	2d01      	cmp	r5, #1
 8008f7c:	b2ee      	uxtb	r6, r5
 8008f7e:	d1ad      	bne.n	8008edc <D16_GENERIC+0x38>
 8008f80:	9d05      	ldr	r5, [sp, #20]
 8008f82:	f850 7b02 	ldr.w	r7, [r0], #2
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	d0ae      	beq.n	8008ee8 <D16_GENERIC+0x44>
 8008f8a:	ba7f      	rev16	r7, r7
 8008f8c:	e7ac      	b.n	8008ee8 <D16_GENERIC+0x44>
 8008f8e:	2000      	movs	r0, #0
 8008f90:	9906      	ldr	r1, [sp, #24]
 8008f92:	61d3      	str	r3, [r2, #28]
 8008f94:	9b07      	ldr	r3, [sp, #28]
 8008f96:	f8c2 c008 	str.w	ip, [r2, #8]
 8008f9a:	60d1      	str	r1, [r2, #12]
 8008f9c:	6193      	str	r3, [r2, #24]
 8008f9e:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8008fa2:	b009      	add	sp, #36	; 0x24
 8008fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa8:	00030001 	.word	0x00030001
 8008fac:	00010003 	.word	0x00010003
 8008fb0:	24000000 	.word	0x24000000

08008fb4 <D24_GENERIC>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8008fbc:	b089      	sub	sp, #36	; 0x24
 8008fbe:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	6993      	ldr	r3, [r2, #24]
 8008fc4:	9104      	str	r1, [sp, #16]
 8008fc6:	9307      	str	r3, [sp, #28]
 8008fc8:	69d1      	ldr	r1, [r2, #28]
 8008fca:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8008fce:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	f000 8088 	beq.w	80090e8 <D24_GENERIC+0x134>
 8008fd8:	f005 0620 	and.w	r6, r5, #32
 8008fdc:	f005 0510 	and.w	r5, r5, #16
 8008fe0:	f04f 0c00 	mov.w	ip, #0
 8008fe4:	f8df e140 	ldr.w	lr, [pc, #320]	; 8009128 <D24_GENERIC+0x174>
 8008fe8:	9606      	str	r6, [sp, #24]
 8008fea:	9505      	str	r5, [sp, #20]
 8008fec:	e064      	b.n	80090b8 <D24_GENERIC+0x104>
 8008fee:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8008ff2:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8008ff6:	f810 b007 	ldrb.w	fp, [r0, r7]
 8008ffa:	042d      	lsls	r5, r5, #16
 8008ffc:	19f0      	adds	r0, r6, r7
 8008ffe:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8009002:	44a9      	add	r9, r5
 8009004:	fa5f f689 	uxtb.w	r6, r9
 8009008:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800900c:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8009010:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8009014:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8009018:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800901c:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8009020:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009024:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009028:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800902c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8009030:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009034:	4d3a      	ldr	r5, [pc, #232]	; (8009120 <D24_GENERIC+0x16c>)
 8009036:	fb26 8705 	smlad	r7, r6, r5, r8
 800903a:	4d3a      	ldr	r5, [pc, #232]	; (8009124 <D24_GENERIC+0x170>)
 800903c:	fb26 3805 	smlad	r8, r6, r5, r3
 8009040:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009044:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8009048:	2301      	movs	r3, #1
 800904a:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800904e:	fb26 f603 	smuad	r6, r6, r3
 8009052:	eb0c 0903 	add.w	r9, ip, r3
 8009056:	eb0b 0306 	add.w	r3, fp, r6
 800905a:	9e05      	ldr	r6, [sp, #20]
 800905c:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8009060:	b1ae      	cbz	r6, 800908e <D24_GENERIC+0xda>
 8009062:	442c      	add	r4, r5
 8009064:	9e03      	ldr	r6, [sp, #12]
 8009066:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800906a:	1ba4      	subs	r4, r4, r6
 800906c:	9503      	str	r5, [sp, #12]
 800906e:	17e7      	asrs	r7, r4, #31
 8009070:	fba4 450b 	umull	r4, r5, r4, fp
 8009074:	e9cd 4500 	strd	r4, r5, [sp]
 8009078:	fb0b 5407 	mla	r4, fp, r7, r5
 800907c:	9401      	str	r4, [sp, #4]
 800907e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009082:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009086:	f145 0500 	adc.w	r5, r5, #0
 800908a:	006c      	lsls	r4, r5, #1
 800908c:	4625      	mov	r5, r4
 800908e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009092:	03ad      	lsls	r5, r5, #14
 8009094:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009098:	2700      	movs	r7, #0
 800909a:	fb0c fb0b 	mul.w	fp, ip, fp
 800909e:	fa1f fc89 	uxth.w	ip, r9
 80090a2:	fbca 6705 	smlal	r6, r7, sl, r5
 80090a6:	9e04      	ldr	r6, [sp, #16]
 80090a8:	10bd      	asrs	r5, r7, #2
 80090aa:	f305 050f 	ssat	r5, #16, r5
 80090ae:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80090b2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80090b4:	4565      	cmp	r5, ip
 80090b6:	d917      	bls.n	80090e8 <D24_GENERIC+0x134>
 80090b8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80090ba:	f890 9000 	ldrb.w	r9, [r0]
 80090be:	b2ef      	uxtb	r7, r5
 80090c0:	2d01      	cmp	r5, #1
 80090c2:	b23e      	sxth	r6, r7
 80090c4:	d193      	bne.n	8008fee <D24_GENERIC+0x3a>
 80090c6:	9d06      	ldr	r5, [sp, #24]
 80090c8:	b1dd      	cbz	r5, 8009102 <D24_GENERIC+0x14e>
 80090ca:	78c7      	ldrb	r7, [r0, #3]
 80090cc:	ea4f 2609 	mov.w	r6, r9, lsl #8
 80090d0:	f01c 0f01 	tst.w	ip, #1
 80090d4:	ea4f 2507 	mov.w	r5, r7, lsl #8
 80090d8:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 80090dc:	d11a      	bne.n	8009114 <D24_GENERIC+0x160>
 80090de:	f890 9001 	ldrb.w	r9, [r0, #1]
 80090e2:	3002      	adds	r0, #2
 80090e4:	44b1      	add	r9, r6
 80090e6:	e78d      	b.n	8009004 <D24_GENERIC+0x50>
 80090e8:	6093      	str	r3, [r2, #8]
 80090ea:	2000      	movs	r0, #0
 80090ec:	9b03      	ldr	r3, [sp, #12]
 80090ee:	f8c2 800c 	str.w	r8, [r2, #12]
 80090f2:	6153      	str	r3, [r2, #20]
 80090f4:	9b07      	ldr	r3, [sp, #28]
 80090f6:	61d1      	str	r1, [r2, #28]
 80090f8:	6114      	str	r4, [r2, #16]
 80090fa:	6193      	str	r3, [r2, #24]
 80090fc:	b009      	add	sp, #36	; 0x24
 80090fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009102:	7845      	ldrb	r5, [r0, #1]
 8009104:	3003      	adds	r0, #3
 8009106:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800910a:	022d      	lsls	r5, r5, #8
 800910c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009110:	44a9      	add	r9, r5
 8009112:	e777      	b.n	8009004 <D24_GENERIC+0x50>
 8009114:	7886      	ldrb	r6, [r0, #2]
 8009116:	3004      	adds	r0, #4
 8009118:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800911c:	44a9      	add	r9, r5
 800911e:	e771      	b.n	8009004 <D24_GENERIC+0x50>
 8009120:	00030001 	.word	0x00030001
 8009124:	00060007 	.word	0x00060007
 8009128:	24000000 	.word	0x24000000

0800912c <D32_GENERIC>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009134:	b089      	sub	sp, #36	; 0x24
 8009136:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009138:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800913a:	9302      	str	r3, [sp, #8]
 800913c:	6993      	ldr	r3, [r2, #24]
 800913e:	9104      	str	r1, [sp, #16]
 8009140:	9307      	str	r3, [sp, #28]
 8009142:	9503      	str	r5, [sp, #12]
 8009144:	69d1      	ldr	r1, [r2, #28]
 8009146:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009148:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800914c:	2e00      	cmp	r6, #0
 800914e:	f000 8097 	beq.w	8009280 <D32_GENERIC+0x154>
 8009152:	f005 0620 	and.w	r6, r5, #32
 8009156:	f005 0510 	and.w	r5, r5, #16
 800915a:	f04f 0e00 	mov.w	lr, #0
 800915e:	f8df c150 	ldr.w	ip, [pc, #336]	; 80092b0 <D32_GENERIC+0x184>
 8009162:	9606      	str	r6, [sp, #24]
 8009164:	9505      	str	r5, [sp, #20]
 8009166:	e079      	b.n	800925c <D32_GENERIC+0x130>
 8009168:	783d      	ldrb	r5, [r7, #0]
 800916a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800916e:	042d      	lsls	r5, r5, #16
 8009170:	f810 a006 	ldrb.w	sl, [r0, r6]
 8009174:	f890 9000 	ldrb.w	r9, [r0]
 8009178:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800917c:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8009180:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8009184:	44a9      	add	r9, r5
 8009186:	fa5f f789 	uxtb.w	r7, r9
 800918a:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800918e:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8009192:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8009196:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800919a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800919e:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 80091a2:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80091a6:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 80091aa:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80091ae:	f3c1 0909 	ubfx	r9, r1, #0, #10
 80091b2:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80091b6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80091ba:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 80091be:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80091c2:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 80091c6:	f3c1 0509 	ubfx	r5, r1, #0, #10
 80091ca:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80091ce:	4d34      	ldr	r5, [pc, #208]	; (80092a0 <D32_GENERIC+0x174>)
 80091d0:	fb29 8805 	smlad	r8, r9, r5, r8
 80091d4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80091d8:	fb26 8705 	smlad	r7, r6, r5, r8
 80091dc:	4d31      	ldr	r5, [pc, #196]	; (80092a4 <D32_GENERIC+0x178>)
 80091de:	fb29 3305 	smlad	r3, r9, r5, r3
 80091e2:	4d31      	ldr	r5, [pc, #196]	; (80092a8 <D32_GENERIC+0x17c>)
 80091e4:	fb26 3805 	smlad	r8, r6, r5, r3
 80091e8:	2301      	movs	r3, #1
 80091ea:	fb29 f903 	smuad	r9, r9, r3
 80091ee:	4b2f      	ldr	r3, [pc, #188]	; (80092ac <D32_GENERIC+0x180>)
 80091f0:	fb26 9303 	smlad	r3, r6, r3, r9
 80091f4:	9e05      	ldr	r6, [sp, #20]
 80091f6:	f10e 0901 	add.w	r9, lr, #1
 80091fa:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80091fe:	b1ae      	cbz	r6, 800922c <D32_GENERIC+0x100>
 8009200:	442c      	add	r4, r5
 8009202:	9e02      	ldr	r6, [sp, #8]
 8009204:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009208:	1ba4      	subs	r4, r4, r6
 800920a:	9502      	str	r5, [sp, #8]
 800920c:	17e7      	asrs	r7, r4, #31
 800920e:	fba4 450a 	umull	r4, r5, r4, sl
 8009212:	e9cd 4500 	strd	r4, r5, [sp]
 8009216:	fb0a 5407 	mla	r4, sl, r7, r5
 800921a:	9401      	str	r4, [sp, #4]
 800921c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009220:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009224:	f145 0500 	adc.w	r5, r5, #0
 8009228:	006c      	lsls	r4, r5, #1
 800922a:	4625      	mov	r5, r4
 800922c:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8009230:	036d      	lsls	r5, r5, #13
 8009232:	9f03      	ldr	r7, [sp, #12]
 8009234:	fb0e fb0a 	mul.w	fp, lr, sl
 8009238:	fa1f fe89 	uxth.w	lr, r9
 800923c:	f04f 0a00 	mov.w	sl, #0
 8009240:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009244:	9e04      	ldr	r6, [sp, #16]
 8009246:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800924a:	4657      	mov	r7, sl
 800924c:	10bd      	asrs	r5, r7, #2
 800924e:	f305 050f 	ssat	r5, #16, r5
 8009252:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009256:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009258:	4575      	cmp	r5, lr
 800925a:	d911      	bls.n	8009280 <D32_GENERIC+0x154>
 800925c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800925e:	b2ee      	uxtb	r6, r5
 8009260:	2d01      	cmp	r5, #1
 8009262:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8009266:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800926a:	f47f af7d 	bne.w	8009168 <D32_GENERIC+0x3c>
 800926e:	1d05      	adds	r5, r0, #4
 8009270:	f8d0 9000 	ldr.w	r9, [r0]
 8009274:	9806      	ldr	r0, [sp, #24]
 8009276:	b180      	cbz	r0, 800929a <D32_GENERIC+0x16e>
 8009278:	fa99 f999 	rev16.w	r9, r9
 800927c:	4628      	mov	r0, r5
 800927e:	e782      	b.n	8009186 <D32_GENERIC+0x5a>
 8009280:	6093      	str	r3, [r2, #8]
 8009282:	2000      	movs	r0, #0
 8009284:	9b02      	ldr	r3, [sp, #8]
 8009286:	f8c2 800c 	str.w	r8, [r2, #12]
 800928a:	6153      	str	r3, [r2, #20]
 800928c:	9b07      	ldr	r3, [sp, #28]
 800928e:	61d1      	str	r1, [r2, #28]
 8009290:	6114      	str	r4, [r2, #16]
 8009292:	6193      	str	r3, [r2, #24]
 8009294:	b009      	add	sp, #36	; 0x24
 8009296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929a:	4628      	mov	r0, r5
 800929c:	e773      	b.n	8009186 <D32_GENERIC+0x5a>
 800929e:	bf00      	nop
 80092a0:	00060003 	.word	0x00060003
 80092a4:	000a000c 	.word	0x000a000c
 80092a8:	000c000a 	.word	0x000c000a
 80092ac:	00030006 	.word	0x00030006
 80092b0:	24000000 	.word	0x24000000

080092b4 <D48_GENERIC>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	6913      	ldr	r3, [r2, #16]
 80092ba:	b089      	sub	sp, #36	; 0x24
 80092bc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	6953      	ldr	r3, [r2, #20]
 80092c2:	9104      	str	r1, [sp, #16]
 80092c4:	9302      	str	r3, [sp, #8]
 80092c6:	6993      	ldr	r3, [r2, #24]
 80092c8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80092cc:	9307      	str	r3, [sp, #28]
 80092ce:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 80092d2:	9100      	str	r1, [sp, #0]
 80092d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80092d6:	9103      	str	r1, [sp, #12]
 80092d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80092da:	2c00      	cmp	r4, #0
 80092dc:	f000 80be 	beq.w	800945c <D48_GENERIC+0x1a8>
 80092e0:	f001 0420 	and.w	r4, r1, #32
 80092e4:	f001 0110 	and.w	r1, r1, #16
 80092e8:	f04f 0e00 	mov.w	lr, #0
 80092ec:	9105      	str	r1, [sp, #20]
 80092ee:	9406      	str	r4, [sp, #24]
 80092f0:	4962      	ldr	r1, [pc, #392]	; (800947c <D48_GENERIC+0x1c8>)
 80092f2:	e0a0      	b.n	8009436 <D48_GENERIC+0x182>
 80092f4:	eb00 0608 	add.w	r6, r0, r8
 80092f8:	f810 a008 	ldrb.w	sl, [r0, r8]
 80092fc:	f810 9005 	ldrb.w	r9, [r0, r5]
 8009300:	5df4      	ldrb	r4, [r6, r7]
 8009302:	443e      	add	r6, r7
 8009304:	f890 b000 	ldrb.w	fp, [r0]
 8009308:	0420      	lsls	r0, r4, #16
 800930a:	eb06 0408 	add.w	r4, r6, r8
 800930e:	f816 6008 	ldrb.w	r6, [r6, r8]
 8009312:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8009316:	f814 8007 	ldrb.w	r8, [r4, r7]
 800931a:	4427      	add	r7, r4
 800931c:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8009320:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8009324:	eb0a 040b 	add.w	r4, sl, fp
 8009328:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800932c:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8009330:	b2f7      	uxtb	r7, r6
 8009332:	b2e6      	uxtb	r6, r4
 8009334:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8009338:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800933c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8009340:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009344:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8009348:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800934c:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8009350:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8009354:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8009358:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800935c:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8009360:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009364:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8009368:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800936c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8009370:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009374:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009378:	9d00      	ldr	r5, [sp, #0]
 800937a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800937e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009382:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8009386:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800938a:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800938e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8009392:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8009396:	4c3a      	ldr	r4, [pc, #232]	; (8009480 <D48_GENERIC+0x1cc>)
 8009398:	fb26 5a04 	smlad	sl, r6, r4, r5
 800939c:	4c39      	ldr	r4, [pc, #228]	; (8009484 <D48_GENERIC+0x1d0>)
 800939e:	fb29 aa04 	smlad	sl, r9, r4, sl
 80093a2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80093a6:	fb27 aa04 	smlad	sl, r7, r4, sl
 80093aa:	4c37      	ldr	r4, [pc, #220]	; (8009488 <D48_GENERIC+0x1d4>)
 80093ac:	fb26 3304 	smlad	r3, r6, r4, r3
 80093b0:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80093b4:	fb29 3304 	smlad	r3, r9, r4, r3
 80093b8:	4c34      	ldr	r4, [pc, #208]	; (800948c <D48_GENERIC+0x1d8>)
 80093ba:	fb27 3304 	smlad	r3, r7, r4, r3
 80093be:	2501      	movs	r5, #1
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	fb26 f605 	smuad	r6, r6, r5
 80093c6:	4b32      	ldr	r3, [pc, #200]	; (8009490 <D48_GENERIC+0x1dc>)
 80093c8:	fb29 6903 	smlad	r9, r9, r3, r6
 80093cc:	4b31      	ldr	r3, [pc, #196]	; (8009494 <D48_GENERIC+0x1e0>)
 80093ce:	fb27 9303 	smlad	r3, r7, r3, r9
 80093d2:	9c05      	ldr	r4, [sp, #20]
 80093d4:	eb0e 0805 	add.w	r8, lr, r5
 80093d8:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 80093dc:	b19c      	cbz	r4, 8009406 <D48_GENERIC+0x152>
 80093de:	9c01      	ldr	r4, [sp, #4]
 80093e0:	9d02      	ldr	r5, [sp, #8]
 80093e2:	4454      	add	r4, sl
 80093e4:	f8d2 9020 	ldr.w	r9, [r2, #32]
 80093e8:	f8cd a008 	str.w	sl, [sp, #8]
 80093ec:	1b64      	subs	r4, r4, r5
 80093ee:	fba4 ab09 	umull	sl, fp, r4, r9
 80093f2:	17e7      	asrs	r7, r4, #31
 80093f4:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 80093f8:	fb09 bb07 	mla	fp, r9, r7, fp
 80093fc:	f14b 0500 	adc.w	r5, fp, #0
 8009400:	006c      	lsls	r4, r5, #1
 8009402:	46a2      	mov	sl, r4
 8009404:	9401      	str	r4, [sp, #4]
 8009406:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8009408:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800940c:	9d03      	ldr	r5, [sp, #12]
 800940e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009412:	fb0e f606 	mul.w	r6, lr, r6
 8009416:	fa1f fe88 	uxth.w	lr, r8
 800941a:	f04f 0800 	mov.w	r8, #0
 800941e:	fbc5 780a 	smlal	r7, r8, r5, sl
 8009422:	4645      	mov	r5, r8
 8009424:	10ac      	asrs	r4, r5, #2
 8009426:	9d04      	ldr	r5, [sp, #16]
 8009428:	f304 040f 	ssat	r4, #16, r4
 800942c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8009430:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009432:	4574      	cmp	r4, lr
 8009434:	d912      	bls.n	800945c <D48_GENERIC+0x1a8>
 8009436:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8009438:	b2e5      	uxtb	r5, r4
 800943a:	2c01      	cmp	r4, #1
 800943c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8009440:	f1c5 0700 	rsb	r7, r5, #0
 8009444:	f47f af56 	bne.w	80092f4 <D48_GENERIC+0x40>
 8009448:	9d06      	ldr	r5, [sp, #24]
 800944a:	e9d0 4600 	ldrd	r4, r6, [r0]
 800944e:	3006      	adds	r0, #6
 8009450:	2d00      	cmp	r5, #0
 8009452:	f43f af6b 	beq.w	800932c <D48_GENERIC+0x78>
 8009456:	ba64      	rev16	r4, r4
 8009458:	ba76      	rev16	r6, r6
 800945a:	e767      	b.n	800932c <D48_GENERIC+0x78>
 800945c:	6093      	str	r3, [r2, #8]
 800945e:	2000      	movs	r0, #0
 8009460:	9b00      	ldr	r3, [sp, #0]
 8009462:	f8c2 c01c 	str.w	ip, [r2, #28]
 8009466:	60d3      	str	r3, [r2, #12]
 8009468:	9b01      	ldr	r3, [sp, #4]
 800946a:	6113      	str	r3, [r2, #16]
 800946c:	9b02      	ldr	r3, [sp, #8]
 800946e:	6153      	str	r3, [r2, #20]
 8009470:	9b07      	ldr	r3, [sp, #28]
 8009472:	6193      	str	r3, [r2, #24]
 8009474:	b009      	add	sp, #36	; 0x24
 8009476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947a:	bf00      	nop
 800947c:	24000000 	.word	0x24000000
 8009480:	000f000a 	.word	0x000f000a
 8009484:	00060003 	.word	0x00060003
 8009488:	00150019 	.word	0x00150019
 800948c:	00190015 	.word	0x00190015
 8009490:	00030006 	.word	0x00030006
 8009494:	000a000f 	.word	0x000a000f

08009498 <D64_GENERIC>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	6913      	ldr	r3, [r2, #16]
 800949e:	b089      	sub	sp, #36	; 0x24
 80094a0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	6953      	ldr	r3, [r2, #20]
 80094a6:	9105      	str	r1, [sp, #20]
 80094a8:	9303      	str	r3, [sp, #12]
 80094aa:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80094ac:	6993      	ldr	r3, [r2, #24]
 80094ae:	69d4      	ldr	r4, [r2, #28]
 80094b0:	9307      	str	r3, [sp, #28]
 80094b2:	9504      	str	r5, [sp, #16]
 80094b4:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 80094b8:	2900      	cmp	r1, #0
 80094ba:	f000 80e8 	beq.w	800968e <D64_GENERIC+0x1f6>
 80094be:	6a11      	ldr	r1, [r2, #32]
 80094c0:	2500      	movs	r5, #0
 80094c2:	46b3      	mov	fp, r6
 80094c4:	9302      	str	r3, [sp, #8]
 80094c6:	9106      	str	r1, [sp, #24]
 80094c8:	4978      	ldr	r1, [pc, #480]	; (80096ac <D64_GENERIC+0x214>)
 80094ca:	e0cc      	b.n	8009666 <D64_GENERIC+0x1ce>
 80094cc:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 80094d0:	f1ce 0c00 	rsb	ip, lr, #0
 80094d4:	f890 9000 	ldrb.w	r9, [r0]
 80094d8:	eb00 0708 	add.w	r7, r0, r8
 80094dc:	f810 6008 	ldrb.w	r6, [r0, r8]
 80094e0:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 80094e4:	f817 000c 	ldrb.w	r0, [r7, ip]
 80094e8:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 80094ec:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 80094f0:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 80094f4:	ea4f 4800 	mov.w	r8, r0, lsl #16
 80094f8:	f817 000c 	ldrb.w	r0, [r7, ip]
 80094fc:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8009500:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8009504:	0400      	lsls	r0, r0, #16
 8009506:	4467      	add	r7, ip
 8009508:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800950c:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8009510:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8009514:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8009518:	444e      	add	r6, r9
 800951a:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800951e:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8009522:	44c2      	add	sl, r8
 8009524:	b2f7      	uxtb	r7, r6
 8009526:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800952a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800952e:	0e36      	lsrs	r6, r6, #24
 8009530:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8009534:	fa5f fc8a 	uxtb.w	ip, sl
 8009538:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800953c:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8009540:	443c      	add	r4, r7
 8009542:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8009546:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800954a:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800954e:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8009552:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009556:	4b56      	ldr	r3, [pc, #344]	; (80096b0 <D64_GENERIC+0x218>)
 8009558:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800955c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009560:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8009564:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8009568:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800956c:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8009570:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8009574:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009578:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800957c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009580:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009584:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8009588:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800958c:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8009590:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8009594:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8009598:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800959c:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 80095a0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80095a4:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 80095a8:	f3c9 0709 	ubfx	r7, r9, #0, #10
 80095ac:	ea4f 2499 	mov.w	r4, r9, lsr #10
 80095b0:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 80095b4:	fb28 b903 	smlad	r9, r8, r3, fp
 80095b8:	4b3e      	ldr	r3, [pc, #248]	; (80096b4 <D64_GENERIC+0x21c>)
 80095ba:	fb26 9903 	smlad	r9, r6, r3, r9
 80095be:	4b3e      	ldr	r3, [pc, #248]	; (80096b8 <D64_GENERIC+0x220>)
 80095c0:	fb2c 9703 	smlad	r7, ip, r3, r9
 80095c4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 80095c8:	fb2a 7909 	smlad	r9, sl, r9, r7
 80095cc:	4f3b      	ldr	r7, [pc, #236]	; (80096bc <D64_GENERIC+0x224>)
 80095ce:	9b02      	ldr	r3, [sp, #8]
 80095d0:	fb28 3307 	smlad	r3, r8, r7, r3
 80095d4:	fb2a 3317 	smladx	r3, sl, r7, r3
 80095d8:	4f39      	ldr	r7, [pc, #228]	; (80096c0 <D64_GENERIC+0x228>)
 80095da:	fb26 3307 	smlad	r3, r6, r7, r3
 80095de:	fb2c 3b17 	smladx	fp, ip, r7, r3
 80095e2:	f04f 0e01 	mov.w	lr, #1
 80095e6:	fb28 f80e 	smuad	r8, r8, lr
 80095ea:	4b36      	ldr	r3, [pc, #216]	; (80096c4 <D64_GENERIC+0x22c>)
 80095ec:	fb26 8603 	smlad	r6, r6, r3, r8
 80095f0:	4b35      	ldr	r3, [pc, #212]	; (80096c8 <D64_GENERIC+0x230>)
 80095f2:	fb2c 6c03 	smlad	ip, ip, r3, r6
 80095f6:	4b35      	ldr	r3, [pc, #212]	; (80096cc <D64_GENERIC+0x234>)
 80095f8:	fb2a c303 	smlad	r3, sl, r3, ip
 80095fc:	9f06      	ldr	r7, [sp, #24]
 80095fe:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8009602:	9302      	str	r3, [sp, #8]
 8009604:	b1cf      	cbz	r7, 800963a <D64_GENERIC+0x1a2>
 8009606:	9b00      	ldr	r3, [sp, #0]
 8009608:	444b      	add	r3, r9
 800960a:	461e      	mov	r6, r3
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009612:	1af6      	subs	r6, r6, r3
 8009614:	46b0      	mov	r8, r6
 8009616:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800961a:	e9cd 8900 	strd	r8, r9, [sp]
 800961e:	fba6 8907 	umull	r8, r9, r6, r7
 8009622:	9e01      	ldr	r6, [sp, #4]
 8009624:	fb07 9306 	mla	r3, r7, r6, r9
 8009628:	4646      	mov	r6, r8
 800962a:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800962e:	f143 0700 	adc.w	r7, r3, #0
 8009632:	fa07 f30e 	lsl.w	r3, r7, lr
 8009636:	4699      	mov	r9, r3
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800963e:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8009642:	9b04      	ldr	r3, [sp, #16]
 8009644:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009648:	2700      	movs	r7, #0
 800964a:	fb05 fc0c 	mul.w	ip, r5, ip
 800964e:	3501      	adds	r5, #1
 8009650:	fbc3 6709 	smlal	r6, r7, r3, r9
 8009654:	9b05      	ldr	r3, [sp, #20]
 8009656:	10be      	asrs	r6, r7, #2
 8009658:	f306 060f 	ssat	r6, #16, r6
 800965c:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8009660:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009662:	42ae      	cmp	r6, r5
 8009664:	dd11      	ble.n	800968a <D64_GENERIC+0x1f2>
 8009666:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800966a:	f1be 0f01 	cmp.w	lr, #1
 800966e:	f47f af2d 	bne.w	80094cc <D64_GENERIC+0x34>
 8009672:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8009674:	f100 0c08 	add.w	ip, r0, #8
 8009678:	06bb      	lsls	r3, r7, #26
 800967a:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800967e:	d513      	bpl.n	80096a8 <D64_GENERIC+0x210>
 8009680:	ba76      	rev16	r6, r6
 8009682:	fa9a fa9a 	rev16.w	sl, sl
 8009686:	4660      	mov	r0, ip
 8009688:	e74c      	b.n	8009524 <D64_GENERIC+0x8c>
 800968a:	465e      	mov	r6, fp
 800968c:	9b02      	ldr	r3, [sp, #8]
 800968e:	6093      	str	r3, [r2, #8]
 8009690:	2000      	movs	r0, #0
 8009692:	9b00      	ldr	r3, [sp, #0]
 8009694:	60d6      	str	r6, [r2, #12]
 8009696:	6113      	str	r3, [r2, #16]
 8009698:	9b03      	ldr	r3, [sp, #12]
 800969a:	61d4      	str	r4, [r2, #28]
 800969c:	6153      	str	r3, [r2, #20]
 800969e:	9b07      	ldr	r3, [sp, #28]
 80096a0:	6193      	str	r3, [r2, #24]
 80096a2:	b009      	add	sp, #36	; 0x24
 80096a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a8:	4660      	mov	r0, ip
 80096aa:	e73b      	b.n	8009524 <D64_GENERIC+0x8c>
 80096ac:	24000000 	.word	0x24000000
 80096b0:	001c0015 	.word	0x001c0015
 80096b4:	000f000a 	.word	0x000f000a
 80096b8:	00060003 	.word	0x00060003
 80096bc:	0024002a 	.word	0x0024002a
 80096c0:	002e0030 	.word	0x002e0030
 80096c4:	00030006 	.word	0x00030006
 80096c8:	000a000f 	.word	0x000a000f
 80096cc:	0015001c 	.word	0x0015001c

080096d0 <D80_GENERIC>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	b08b      	sub	sp, #44	; 0x2c
 80096d6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80096d8:	9107      	str	r1, [sp, #28]
 80096da:	6911      	ldr	r1, [r2, #16]
 80096dc:	9104      	str	r1, [sp, #16]
 80096de:	6951      	ldr	r1, [r2, #20]
 80096e0:	9105      	str	r1, [sp, #20]
 80096e2:	6991      	ldr	r1, [r2, #24]
 80096e4:	9109      	str	r1, [sp, #36]	; 0x24
 80096e6:	69d1      	ldr	r1, [r2, #28]
 80096e8:	9102      	str	r1, [sp, #8]
 80096ea:	6891      	ldr	r1, [r2, #8]
 80096ec:	9103      	str	r1, [sp, #12]
 80096ee:	68d1      	ldr	r1, [r2, #12]
 80096f0:	9101      	str	r1, [sp, #4]
 80096f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80096f4:	9106      	str	r1, [sp, #24]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 810b 	beq.w	8009912 <D80_GENERIC+0x242>
 80096fc:	6a13      	ldr	r3, [r2, #32]
 80096fe:	f04f 0800 	mov.w	r8, #0
 8009702:	f8df c260 	ldr.w	ip, [pc, #608]	; 8009964 <D80_GENERIC+0x294>
 8009706:	9308      	str	r3, [sp, #32]
 8009708:	9200      	str	r2, [sp, #0]
 800970a:	e0ee      	b.n	80098ea <D80_GENERIC+0x21a>
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f890 e000 	ldrb.w	lr, [r0]
 8009712:	b219      	sxth	r1, r3
 8009714:	425c      	negs	r4, r3
 8009716:	f810 9003 	ldrb.w	r9, [r0, r3]
 800971a:	004e      	lsls	r6, r1, #1
 800971c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8009720:	4431      	add	r1, r6
 8009722:	1843      	adds	r3, r0, r1
 8009724:	f810 b001 	ldrb.w	fp, [r0, r1]
 8009728:	1919      	adds	r1, r3, r4
 800972a:	5d1b      	ldrb	r3, [r3, r4]
 800972c:	1948      	adds	r0, r1, r5
 800972e:	f811 a005 	ldrb.w	sl, [r1, r5]
 8009732:	041b      	lsls	r3, r3, #16
 8009734:	1907      	adds	r7, r0, r4
 8009736:	5d01      	ldrb	r1, [r0, r4]
 8009738:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800973c:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8009740:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8009744:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8009748:	0409      	lsls	r1, r1, #16
 800974a:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800974e:	eb0b 0905 	add.w	r9, fp, r5
 8009752:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8009756:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800975a:	eb09 0b04 	add.w	fp, r9, r4
 800975e:	f819 4004 	ldrb.w	r4, [r9, r4]
 8009762:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8009766:	4473      	add	r3, lr
 8009768:	eb0b 0006 	add.w	r0, fp, r6
 800976c:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8009770:	4439      	add	r1, r7
 8009772:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8009776:	b2df      	uxtb	r7, r3
 8009778:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800977c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8009780:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8009784:	fa5f fa81 	uxtb.w	sl, r1
 8009788:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800978c:	9c02      	ldr	r4, [sp, #8]
 800978e:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8009792:	441c      	add	r4, r3
 8009794:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8009798:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800979c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80097a0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80097a4:	f3c4 0309 	ubfx	r3, r4, #0, #10
 80097a8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80097ac:	b2ed      	uxtb	r5, r5
 80097ae:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 80097b2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80097b6:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80097ba:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80097be:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 80097c2:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80097c6:	f3c1 4707 	ubfx	r7, r1, #16, #8
 80097ca:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80097ce:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 80097d2:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80097d6:	0e09      	lsrs	r1, r1, #24
 80097d8:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80097dc:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80097e0:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80097e4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80097e8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80097ec:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80097f0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80097f4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80097f8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80097fc:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8009800:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009804:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009808:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800980c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009810:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009814:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8009818:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800981c:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8009820:	9202      	str	r2, [sp, #8]
 8009822:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8009826:	4a43      	ldr	r2, [pc, #268]	; (8009934 <D80_GENERIC+0x264>)
 8009828:	9f01      	ldr	r7, [sp, #4]
 800982a:	fb23 7a02 	smlad	sl, r3, r2, r7
 800982e:	4a42      	ldr	r2, [pc, #264]	; (8009938 <D80_GENERIC+0x268>)
 8009830:	fb26 aa02 	smlad	sl, r6, r2, sl
 8009834:	4a41      	ldr	r2, [pc, #260]	; (800993c <D80_GENERIC+0x26c>)
 8009836:	fb24 aa02 	smlad	sl, r4, r2, sl
 800983a:	4a41      	ldr	r2, [pc, #260]	; (8009940 <D80_GENERIC+0x270>)
 800983c:	fb21 a702 	smlad	r7, r1, r2, sl
 8009840:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8009844:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8009848:	4a3e      	ldr	r2, [pc, #248]	; (8009944 <D80_GENERIC+0x274>)
 800984a:	9f03      	ldr	r7, [sp, #12]
 800984c:	fb23 7e02 	smlad	lr, r3, r2, r7
 8009850:	4a3d      	ldr	r2, [pc, #244]	; (8009948 <D80_GENERIC+0x278>)
 8009852:	fb26 ee02 	smlad	lr, r6, r2, lr
 8009856:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800985a:	fb24 e707 	smlad	r7, r4, r7, lr
 800985e:	4a3b      	ldr	r2, [pc, #236]	; (800994c <D80_GENERIC+0x27c>)
 8009860:	fb21 7702 	smlad	r7, r1, r2, r7
 8009864:	4a3a      	ldr	r2, [pc, #232]	; (8009950 <D80_GENERIC+0x280>)
 8009866:	fb25 7202 	smlad	r2, r5, r2, r7
 800986a:	f04f 0901 	mov.w	r9, #1
 800986e:	9201      	str	r2, [sp, #4]
 8009870:	fb23 f909 	smuad	r9, r3, r9
 8009874:	4b37      	ldr	r3, [pc, #220]	; (8009954 <D80_GENERIC+0x284>)
 8009876:	fb26 9603 	smlad	r6, r6, r3, r9
 800987a:	4f37      	ldr	r7, [pc, #220]	; (8009958 <D80_GENERIC+0x288>)
 800987c:	fb24 6407 	smlad	r4, r4, r7, r6
 8009880:	4f36      	ldr	r7, [pc, #216]	; (800995c <D80_GENERIC+0x28c>)
 8009882:	fb21 4707 	smlad	r7, r1, r7, r4
 8009886:	4936      	ldr	r1, [pc, #216]	; (8009960 <D80_GENERIC+0x290>)
 8009888:	fb25 7301 	smlad	r3, r5, r1, r7
 800988c:	9303      	str	r3, [sp, #12]
 800988e:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8009892:	9b08      	ldr	r3, [sp, #32]
 8009894:	b193      	cbz	r3, 80098bc <D80_GENERIC+0x1ec>
 8009896:	9a04      	ldr	r2, [sp, #16]
 8009898:	4452      	add	r2, sl
 800989a:	4614      	mov	r4, r2
 800989c:	9a05      	ldr	r2, [sp, #20]
 800989e:	f8cd a014 	str.w	sl, [sp, #20]
 80098a2:	1aa4      	subs	r4, r4, r2
 80098a4:	fba4 1203 	umull	r1, r2, r4, r3
 80098a8:	17e7      	asrs	r7, r4, #31
 80098aa:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 80098ae:	fb03 2207 	mla	r2, r3, r7, r2
 80098b2:	f142 0500 	adc.w	r5, r2, #0
 80098b6:	006b      	lsls	r3, r5, #1
 80098b8:	469a      	mov	sl, r3
 80098ba:	9304      	str	r3, [sp, #16]
 80098bc:	9e00      	ldr	r6, [sp, #0]
 80098be:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 80098c2:	9a06      	ldr	r2, [sp, #24]
 80098c4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80098c8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 80098ca:	2500      	movs	r5, #0
 80098cc:	fb08 f303 	mul.w	r3, r8, r3
 80098d0:	fbc2 450a 	smlal	r4, r5, r2, sl
 80098d4:	9a07      	ldr	r2, [sp, #28]
 80098d6:	f108 0801 	add.w	r8, r8, #1
 80098da:	10a9      	asrs	r1, r5, #2
 80098dc:	f301 010f 	ssat	r1, #16, r1
 80098e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80098e4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80098e6:	4543      	cmp	r3, r8
 80098e8:	dd12      	ble.n	8009910 <D80_GENERIC+0x240>
 80098ea:	9b00      	ldr	r3, [sp, #0]
 80098ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	f47f af0c 	bne.w	800970c <D80_GENERIC+0x3c>
 80098f4:	9b00      	ldr	r3, [sp, #0]
 80098f6:	6885      	ldr	r5, [r0, #8]
 80098f8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80098fa:	06b2      	lsls	r2, r6, #26
 80098fc:	e9d0 3100 	ldrd	r3, r1, [r0]
 8009900:	f100 000a 	add.w	r0, r0, #10
 8009904:	f57f af35 	bpl.w	8009772 <D80_GENERIC+0xa2>
 8009908:	ba5b      	rev16	r3, r3
 800990a:	ba49      	rev16	r1, r1
 800990c:	ba6d      	rev16	r5, r5
 800990e:	e730      	b.n	8009772 <D80_GENERIC+0xa2>
 8009910:	4632      	mov	r2, r6
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	2000      	movs	r0, #0
 8009916:	6093      	str	r3, [r2, #8]
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	60d3      	str	r3, [r2, #12]
 800991c:	9b02      	ldr	r3, [sp, #8]
 800991e:	61d3      	str	r3, [r2, #28]
 8009920:	9b04      	ldr	r3, [sp, #16]
 8009922:	6113      	str	r3, [r2, #16]
 8009924:	9b05      	ldr	r3, [sp, #20]
 8009926:	6153      	str	r3, [r2, #20]
 8009928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800992a:	6193      	str	r3, [r2, #24]
 800992c:	b00b      	add	sp, #44	; 0x2c
 800992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009932:	bf00      	nop
 8009934:	002d0024 	.word	0x002d0024
 8009938:	001c0015 	.word	0x001c0015
 800993c:	000f000a 	.word	0x000f000a
 8009940:	00060003 	.word	0x00060003
 8009944:	0037003f 	.word	0x0037003f
 8009948:	00450049 	.word	0x00450049
 800994c:	00490045 	.word	0x00490045
 8009950:	003f0037 	.word	0x003f0037
 8009954:	00030006 	.word	0x00030006
 8009958:	000a000f 	.word	0x000a000f
 800995c:	0015001c 	.word	0x0015001c
 8009960:	0024002d 	.word	0x0024002d
 8009964:	24000000 	.word	0x24000000

08009968 <D128_GENERIC>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	b08d      	sub	sp, #52	; 0x34
 800996e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009970:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8009974:	9109      	str	r1, [sp, #36]	; 0x24
 8009976:	6911      	ldr	r1, [r2, #16]
 8009978:	9201      	str	r2, [sp, #4]
 800997a:	9106      	str	r1, [sp, #24]
 800997c:	6951      	ldr	r1, [r2, #20]
 800997e:	9107      	str	r1, [sp, #28]
 8009980:	6991      	ldr	r1, [r2, #24]
 8009982:	910b      	str	r1, [sp, #44]	; 0x2c
 8009984:	6891      	ldr	r1, [r2, #8]
 8009986:	9103      	str	r1, [sp, #12]
 8009988:	68d1      	ldr	r1, [r2, #12]
 800998a:	9102      	str	r1, [sp, #8]
 800998c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800998e:	9108      	str	r1, [sp, #32]
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 8183 	beq.w	8009c9c <D128_GENERIC+0x334>
 8009996:	2300      	movs	r3, #0
 8009998:	6a12      	ldr	r2, [r2, #32]
 800999a:	4681      	mov	r9, r0
 800999c:	920a      	str	r2, [sp, #40]	; 0x28
 800999e:	e9cd a304 	strd	sl, r3, [sp, #16]
 80099a2:	e165      	b.n	8009c70 <D128_GENERIC+0x308>
 80099a4:	b2d2      	uxtb	r2, r2
 80099a6:	f899 b000 	ldrb.w	fp, [r9]
 80099aa:	b213      	sxth	r3, r2
 80099ac:	4255      	negs	r5, r2
 80099ae:	f819 0002 	ldrb.w	r0, [r9, r2]
 80099b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80099b6:	009f      	lsls	r7, r3, #2
 80099b8:	eb09 0402 	add.w	r4, r9, r2
 80099bc:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 80099c0:	f819 8002 	ldrb.w	r8, [r9, r2]
 80099c4:	443b      	add	r3, r7
 80099c6:	1962      	adds	r2, r4, r5
 80099c8:	5d64      	ldrb	r4, [r4, r5]
 80099ca:	eb02 0c03 	add.w	ip, r2, r3
 80099ce:	0424      	lsls	r4, r4, #16
 80099d0:	5cd3      	ldrb	r3, [r2, r3]
 80099d2:	eb0c 0e05 	add.w	lr, ip, r5
 80099d6:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 80099da:	f81c 2005 	ldrb.w	r2, [ip, r5]
 80099de:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 80099e2:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 80099e6:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 80099ea:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 80099ee:	eb0c 0e06 	add.w	lr, ip, r6
 80099f2:	f81c a006 	ldrb.w	sl, [ip, r6]
 80099f6:	0412      	lsls	r2, r2, #16
 80099f8:	445c      	add	r4, fp
 80099fa:	eb0e 0c05 	add.w	ip, lr, r5
 80099fe:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8009a02:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8009a06:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8009a0a:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8009a0e:	041b      	lsls	r3, r3, #16
 8009a10:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8009a14:	eb00 0b06 	add.w	fp, r0, r6
 8009a18:	5d80      	ldrb	r0, [r0, r6]
 8009a1a:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8009a1e:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8009a22:	eb0b 0a05 	add.w	sl, fp, r5
 8009a26:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8009a2a:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8009a2e:	0436      	lsls	r6, r6, #16
 8009a30:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8009a34:	4442      	add	r2, r8
 8009a36:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8009a3a:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8009a3e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009a42:	44b9      	add	r9, r7
 8009a44:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8009a48:	4463      	add	r3, ip
 8009a4a:	eb06 0508 	add.w	r5, r6, r8
 8009a4e:	b2e7      	uxtb	r7, r4
 8009a50:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8009a54:	499b      	ldr	r1, [pc, #620]	; (8009cc4 <D128_GENERIC+0x35c>)
 8009a56:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8009a5a:	0e24      	lsrs	r4, r4, #24
 8009a5c:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8009a60:	b2d7      	uxtb	r7, r2
 8009a62:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8009a66:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8009a6a:	9904      	ldr	r1, [sp, #16]
 8009a6c:	4461      	add	r1, ip
 8009a6e:	468c      	mov	ip, r1
 8009a70:	4994      	ldr	r1, [pc, #592]	; (8009cc4 <D128_GENERIC+0x35c>)
 8009a72:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8009a76:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009a7a:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8009a7e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009a82:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8009a86:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8009a8a:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8009a8e:	0e12      	lsrs	r2, r2, #24
 8009a90:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8009a94:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009a98:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8009a9c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009aa0:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8009aa4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009aae:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8009ab2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009ab6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009aba:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8009abe:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8009ac2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8009ac6:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8009aca:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009ace:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8009ad2:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8009ad6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009ada:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009ade:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8009ae2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009ae6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8009aea:	0e1b      	lsrs	r3, r3, #24
 8009aec:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8009af0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009af4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8009af8:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8009afc:	b2eb      	uxtb	r3, r5
 8009afe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009b02:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8009b06:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8009b0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b0e:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8009b12:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8009b16:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8009b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009b1e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009b22:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8009b26:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8009b2a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8009b2e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8009b32:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8009b36:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009b3a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8009b3e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009b42:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8009b46:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8009b4a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8009b4e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009b52:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8009b56:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009b5a:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8009b5e:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8009b62:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8009b66:	9104      	str	r1, [sp, #16]
 8009b68:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8009b6c:	9902      	ldr	r1, [sp, #8]
 8009b6e:	4a56      	ldr	r2, [pc, #344]	; (8009cc8 <D128_GENERIC+0x360>)
 8009b70:	fb2b 1202 	smlad	r2, fp, r2, r1
 8009b74:	4955      	ldr	r1, [pc, #340]	; (8009ccc <D128_GENERIC+0x364>)
 8009b76:	fb28 2201 	smlad	r2, r8, r1, r2
 8009b7a:	4955      	ldr	r1, [pc, #340]	; (8009cd0 <D128_GENERIC+0x368>)
 8009b7c:	fb27 2201 	smlad	r2, r7, r1, r2
 8009b80:	4954      	ldr	r1, [pc, #336]	; (8009cd4 <D128_GENERIC+0x36c>)
 8009b82:	fb26 2201 	smlad	r2, r6, r1, r2
 8009b86:	4954      	ldr	r1, [pc, #336]	; (8009cd8 <D128_GENERIC+0x370>)
 8009b88:	fb24 2201 	smlad	r2, r4, r1, r2
 8009b8c:	4953      	ldr	r1, [pc, #332]	; (8009cdc <D128_GENERIC+0x374>)
 8009b8e:	fb20 2201 	smlad	r2, r0, r1, r2
 8009b92:	4953      	ldr	r1, [pc, #332]	; (8009ce0 <D128_GENERIC+0x378>)
 8009b94:	fb23 2201 	smlad	r2, r3, r1, r2
 8009b98:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8009b9c:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8009ba0:	4950      	ldr	r1, [pc, #320]	; (8009ce4 <D128_GENERIC+0x37c>)
 8009ba2:	9a03      	ldr	r2, [sp, #12]
 8009ba4:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8009ba8:	4a4f      	ldr	r2, [pc, #316]	; (8009ce8 <D128_GENERIC+0x380>)
 8009baa:	fb28 ce02 	smlad	lr, r8, r2, ip
 8009bae:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009d00 <D128_GENERIC+0x398>
 8009bb2:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8009bb6:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8009d04 <D128_GENERIC+0x39c>
 8009bba:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8009bbe:	f8df e148 	ldr.w	lr, [pc, #328]	; 8009d08 <D128_GENERIC+0x3a0>
 8009bc2:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8009bc6:	f8df c144 	ldr.w	ip, [pc, #324]	; 8009d0c <D128_GENERIC+0x3a4>
 8009bca:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8009bce:	f8df c140 	ldr.w	ip, [pc, #320]	; 8009d10 <D128_GENERIC+0x3a8>
 8009bd2:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8009bd6:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8009d14 <D128_GENERIC+0x3ac>
 8009bda:	fb25 c20e 	smlad	r2, r5, lr, ip
 8009bde:	f04f 0c01 	mov.w	ip, #1
 8009be2:	9202      	str	r2, [sp, #8]
 8009be4:	fb2b fb0c 	smuad	fp, fp, ip
 8009be8:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8009d18 <D128_GENERIC+0x3b0>
 8009bec:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8009bf0:	f8df c128 	ldr.w	ip, [pc, #296]	; 8009d1c <D128_GENERIC+0x3b4>
 8009bf4:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8009bf8:	4f3c      	ldr	r7, [pc, #240]	; (8009cec <D128_GENERIC+0x384>)
 8009bfa:	fb26 bb07 	smlad	fp, r6, r7, fp
 8009bfe:	4f3c      	ldr	r7, [pc, #240]	; (8009cf0 <D128_GENERIC+0x388>)
 8009c00:	fb24 bb07 	smlad	fp, r4, r7, fp
 8009c04:	4f3b      	ldr	r7, [pc, #236]	; (8009cf4 <D128_GENERIC+0x38c>)
 8009c06:	fb20 bb07 	smlad	fp, r0, r7, fp
 8009c0a:	4f3b      	ldr	r7, [pc, #236]	; (8009cf8 <D128_GENERIC+0x390>)
 8009c0c:	fb23 bb07 	smlad	fp, r3, r7, fp
 8009c10:	4b3a      	ldr	r3, [pc, #232]	; (8009cfc <D128_GENERIC+0x394>)
 8009c12:	fb25 b303 	smlad	r3, r5, r3, fp
 8009c16:	9303      	str	r3, [sp, #12]
 8009c18:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8009c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c1e:	b183      	cbz	r3, 8009c42 <D128_GENERIC+0x2da>
 8009c20:	9a06      	ldr	r2, [sp, #24]
 8009c22:	9907      	ldr	r1, [sp, #28]
 8009c24:	4422      	add	r2, r4
 8009c26:	9407      	str	r4, [sp, #28]
 8009c28:	1a52      	subs	r2, r2, r1
 8009c2a:	fba2 0103 	umull	r0, r1, r2, r3
 8009c2e:	17d5      	asrs	r5, r2, #31
 8009c30:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8009c34:	fb03 1105 	mla	r1, r3, r5, r1
 8009c38:	f141 0300 	adc.w	r3, r1, #0
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	461c      	mov	r4, r3
 8009c40:	9306      	str	r3, [sp, #24]
 8009c42:	9d01      	ldr	r5, [sp, #4]
 8009c44:	01e4      	lsls	r4, r4, #7
 8009c46:	9e05      	ldr	r6, [sp, #20]
 8009c48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c4c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8009c4e:	2300      	movs	r3, #0
 8009c50:	9908      	ldr	r1, [sp, #32]
 8009c52:	fb06 f000 	mul.w	r0, r6, r0
 8009c56:	3601      	adds	r6, #1
 8009c58:	fbc1 2304 	smlal	r2, r3, r1, r4
 8009c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c5e:	109b      	asrs	r3, r3, #2
 8009c60:	9605      	str	r6, [sp, #20]
 8009c62:	f303 030f 	ssat	r3, #16, r3
 8009c66:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8009c6a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8009c6c:	42b3      	cmp	r3, r6
 8009c6e:	dd13      	ble.n	8009c98 <D128_GENERIC+0x330>
 8009c70:	9b01      	ldr	r3, [sp, #4]
 8009c72:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009c74:	2a01      	cmp	r2, #1
 8009c76:	f47f ae95 	bne.w	80099a4 <D128_GENERIC+0x3c>
 8009c7a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009c7c:	f109 0610 	add.w	r6, r9, #16
 8009c80:	0681      	lsls	r1, r0, #26
 8009c82:	e9d9 4200 	ldrd	r4, r2, [r9]
 8009c86:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8009c8a:	d518      	bpl.n	8009cbe <D128_GENERIC+0x356>
 8009c8c:	ba64      	rev16	r4, r4
 8009c8e:	ba52      	rev16	r2, r2
 8009c90:	ba5b      	rev16	r3, r3
 8009c92:	ba6d      	rev16	r5, r5
 8009c94:	46b1      	mov	r9, r6
 8009c96:	e6da      	b.n	8009a4e <D128_GENERIC+0xe6>
 8009c98:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	9903      	ldr	r1, [sp, #12]
 8009ca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ca4:	6099      	str	r1, [r3, #8]
 8009ca6:	9902      	ldr	r1, [sp, #8]
 8009ca8:	f8c3 a01c 	str.w	sl, [r3, #28]
 8009cac:	60d9      	str	r1, [r3, #12]
 8009cae:	9906      	ldr	r1, [sp, #24]
 8009cb0:	619a      	str	r2, [r3, #24]
 8009cb2:	6119      	str	r1, [r3, #16]
 8009cb4:	9907      	ldr	r1, [sp, #28]
 8009cb6:	6159      	str	r1, [r3, #20]
 8009cb8:	b00d      	add	sp, #52	; 0x34
 8009cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbe:	46b1      	mov	r9, r6
 8009cc0:	e6c5      	b.n	8009a4e <D128_GENERIC+0xe6>
 8009cc2:	bf00      	nop
 8009cc4:	24000000 	.word	0x24000000
 8009cc8:	00780069 	.word	0x00780069
 8009ccc:	005b004e 	.word	0x005b004e
 8009cd0:	00420037 	.word	0x00420037
 8009cd4:	002d0024 	.word	0x002d0024
 8009cd8:	001c0015 	.word	0x001c0015
 8009cdc:	000f000a 	.word	0x000f000a
 8009ce0:	00060003 	.word	0x00060003
 8009ce4:	00880096 	.word	0x00880096
 8009ce8:	00a200ac 	.word	0x00a200ac
 8009cec:	0015001c 	.word	0x0015001c
 8009cf0:	0024002d 	.word	0x0024002d
 8009cf4:	00370042 	.word	0x00370042
 8009cf8:	004e005b 	.word	0x004e005b
 8009cfc:	00690078 	.word	0x00690078
 8009d00:	00b400ba 	.word	0x00b400ba
 8009d04:	00be00c0 	.word	0x00be00c0
 8009d08:	00c000be 	.word	0x00c000be
 8009d0c:	00ba00b4 	.word	0x00ba00b4
 8009d10:	00ac00a2 	.word	0x00ac00a2
 8009d14:	00960088 	.word	0x00960088
 8009d18:	00030006 	.word	0x00030006
 8009d1c:	000a000f 	.word	0x000a000f

08009d20 <D16_1CH_HTONS_VOL_HP>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	6993      	ldr	r3, [r2, #24]
 8009d26:	b087      	sub	sp, #28
 8009d28:	4682      	mov	sl, r0
 8009d2a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8009d32:	69d3      	ldr	r3, [r2, #28]
 8009d34:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8009d38:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8009d3c:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8009d40:	9403      	str	r4, [sp, #12]
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d054      	beq.n	8009df0 <D16_1CH_HTONS_VOL_HP+0xd0>
 8009d46:	f1a1 0902 	sub.w	r9, r1, #2
 8009d4a:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8009d4e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8009dfc <D16_1CH_HTONS_VOL_HP+0xdc>
 8009d52:	4650      	mov	r0, sl
 8009d54:	9101      	str	r1, [sp, #4]
 8009d56:	4619      	mov	r1, r3
 8009d58:	f8cd b008 	str.w	fp, [sp, #8]
 8009d5c:	9205      	str	r2, [sp, #20]
 8009d5e:	f850 3b02 	ldr.w	r3, [r0], #2
 8009d62:	ba5b      	rev16	r3, r3
 8009d64:	b2dc      	uxtb	r4, r3
 8009d66:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009d6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d6e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8009d72:	4419      	add	r1, r3
 8009d74:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8009d78:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009d7c:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8009d80:	0aa1      	lsrs	r1, r4, #10
 8009d82:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009d86:	4a1b      	ldr	r2, [pc, #108]	; (8009df4 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8009d88:	fb23 5402 	smlad	r4, r3, r2, r5
 8009d8c:	4a1a      	ldr	r2, [pc, #104]	; (8009df8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8009d8e:	fb23 f502 	smuad	r5, r3, r2
 8009d92:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009d96:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8009d9a:	f04f 0b00 	mov.w	fp, #0
 8009d9e:	19a2      	adds	r2, r4, r6
 8009da0:	eba2 020c 	sub.w	r2, r2, ip
 8009da4:	46a4      	mov	ip, r4
 8009da6:	17d7      	asrs	r7, r2, #31
 8009da8:	fba2 230e 	umull	r2, r3, r2, lr
 8009dac:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8009db0:	fb0e 3307 	mla	r3, lr, r7, r3
 8009db4:	f143 0700 	adc.w	r7, r3, #0
 8009db8:	9b02      	ldr	r3, [sp, #8]
 8009dba:	047a      	lsls	r2, r7, #17
 8009dbc:	007e      	lsls	r6, r7, #1
 8009dbe:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8009dc2:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8009dc6:	f303 030f 	ssat	r3, #16, r3
 8009dca:	f829 3f02 	strh.w	r3, [r9, #2]!
 8009dce:	9b01      	ldr	r3, [sp, #4]
 8009dd0:	4298      	cmp	r0, r3
 8009dd2:	d1c4      	bne.n	8009d5e <D16_1CH_HTONS_VOL_HP+0x3e>
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	9a05      	ldr	r2, [sp, #20]
 8009dd8:	2000      	movs	r0, #0
 8009dda:	9903      	ldr	r1, [sp, #12]
 8009ddc:	61d3      	str	r3, [r2, #28]
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	6095      	str	r5, [r2, #8]
 8009de2:	60d1      	str	r1, [r2, #12]
 8009de4:	6193      	str	r3, [r2, #24]
 8009de6:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8009dea:	b007      	add	sp, #28
 8009dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df0:	4664      	mov	r4, ip
 8009df2:	e7f1      	b.n	8009dd8 <D16_1CH_HTONS_VOL_HP+0xb8>
 8009df4:	00030001 	.word	0x00030001
 8009df8:	00010003 	.word	0x00010003
 8009dfc:	24000000 	.word	0x24000000

08009e00 <D24_1CH_HTONS_VOL_HP>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009e06:	b089      	sub	sp, #36	; 0x24
 8009e08:	6993      	ldr	r3, [r2, #24]
 8009e0a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009e0c:	9604      	str	r6, [sp, #16]
 8009e0e:	6a16      	ldr	r6, [r2, #32]
 8009e10:	9306      	str	r3, [sp, #24]
 8009e12:	9505      	str	r5, [sp, #20]
 8009e14:	69d3      	ldr	r3, [r2, #28]
 8009e16:	9600      	str	r6, [sp, #0]
 8009e18:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009e1c:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8009e20:	2d00      	cmp	r5, #0
 8009e22:	f000 8083 	beq.w	8009f2c <D24_1CH_HTONS_VOL_HP+0x12c>
 8009e26:	9207      	str	r2, [sp, #28]
 8009e28:	2600      	movs	r6, #0
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	f1a1 0b02 	sub.w	fp, r1, #2
 8009e30:	4f3f      	ldr	r7, [pc, #252]	; (8009f30 <D24_1CH_HTONS_VOL_HP+0x130>)
 8009e32:	461d      	mov	r5, r3
 8009e34:	f8cd a00c 	str.w	sl, [sp, #12]
 8009e38:	9c00      	ldr	r4, [sp, #0]
 8009e3a:	e056      	b.n	8009eea <D24_1CH_HTONS_VOL_HP+0xea>
 8009e3c:	7841      	ldrb	r1, [r0, #1]
 8009e3e:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8009e42:	3002      	adds	r0, #2
 8009e44:	4488      	add	r8, r1
 8009e46:	fa5f f388 	uxtb.w	r3, r8
 8009e4a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8009e4e:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8009e52:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8009e56:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8009e5a:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8009e5e:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8009e62:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8009e66:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009e6a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8009e6e:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8009e72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009e76:	492f      	ldr	r1, [pc, #188]	; (8009f34 <D24_1CH_HTONS_VOL_HP+0x134>)
 8009e78:	fb23 e901 	smlad	r9, r3, r1, lr
 8009e7c:	492e      	ldr	r1, [pc, #184]	; (8009f38 <D24_1CH_HTONS_VOL_HP+0x138>)
 8009e7e:	fb23 ce01 	smlad	lr, r3, r1, ip
 8009e82:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8009e86:	2101      	movs	r1, #1
 8009e88:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8009e8c:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8009e90:	fb23 f301 	smuad	r3, r3, r1
 8009e94:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8009e98:	eb08 0c03 	add.w	ip, r8, r3
 8009e9c:	9b03      	ldr	r3, [sp, #12]
 8009e9e:	f04f 0a00 	mov.w	sl, #0
 8009ea2:	440a      	add	r2, r1
 8009ea4:	3601      	adds	r6, #1
 8009ea6:	9103      	str	r1, [sp, #12]
 8009ea8:	1ad2      	subs	r2, r2, r3
 8009eaa:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009eae:	fba2 2304 	umull	r2, r3, r2, r4
 8009eb2:	e9cd 2300 	strd	r2, r3, [sp]
 8009eb6:	fb04 3309 	mla	r3, r4, r9, r3
 8009eba:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ec4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009ec8:	f143 0300 	adc.w	r3, r3, #0
 8009ecc:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8009ed0:	005a      	lsls	r2, r3, #1
 8009ed2:	9b04      	ldr	r3, [sp, #16]
 8009ed4:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8009ed8:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8009edc:	f303 030f 	ssat	r3, #16, r3
 8009ee0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009ee4:	9b05      	ldr	r3, [sp, #20]
 8009ee6:	429e      	cmp	r6, r3
 8009ee8:	d010      	beq.n	8009f0c <D24_1CH_HTONS_VOL_HP+0x10c>
 8009eea:	f890 9003 	ldrb.w	r9, [r0, #3]
 8009eee:	f016 0f01 	tst.w	r6, #1
 8009ef2:	7801      	ldrb	r1, [r0, #0]
 8009ef4:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8009ef8:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8009efc:	d09e      	beq.n	8009e3c <D24_1CH_HTONS_VOL_HP+0x3c>
 8009efe:	f890 8002 	ldrb.w	r8, [r0, #2]
 8009f02:	3004      	adds	r0, #4
 8009f04:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8009f08:	4488      	add	r8, r1
 8009f0a:	e79c      	b.n	8009e46 <D24_1CH_HTONS_VOL_HP+0x46>
 8009f0c:	4614      	mov	r4, r2
 8009f0e:	462b      	mov	r3, r5
 8009f10:	9a07      	ldr	r2, [sp, #28]
 8009f12:	2000      	movs	r0, #0
 8009f14:	61d3      	str	r3, [r2, #28]
 8009f16:	9b06      	ldr	r3, [sp, #24]
 8009f18:	f8c2 c008 	str.w	ip, [r2, #8]
 8009f1c:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009f20:	6193      	str	r3, [r2, #24]
 8009f22:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009f26:	b009      	add	sp, #36	; 0x24
 8009f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2c:	4651      	mov	r1, sl
 8009f2e:	e7f0      	b.n	8009f12 <D24_1CH_HTONS_VOL_HP+0x112>
 8009f30:	24000000 	.word	0x24000000
 8009f34:	00030001 	.word	0x00030001
 8009f38:	00060007 	.word	0x00060007

08009f3c <D32_1CH_HTONS_VOL_HP>:
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	6993      	ldr	r3, [r2, #24]
 8009f42:	b087      	sub	sp, #28
 8009f44:	4683      	mov	fp, r0
 8009f46:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	69d5      	ldr	r5, [r2, #28]
 8009f4c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009f4e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009f52:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8009f56:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d077      	beq.n	800a04e <D32_1CH_HTONS_VOL_HP+0x112>
 8009f5e:	460f      	mov	r7, r1
 8009f60:	46f1      	mov	r9, lr
 8009f62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009f66:	f8cd 8000 	str.w	r8, [sp]
 8009f6a:	4e3a      	ldr	r6, [pc, #232]	; (800a054 <D32_1CH_HTONS_VOL_HP+0x118>)
 8009f6c:	469e      	mov	lr, r3
 8009f6e:	46a0      	mov	r8, r4
 8009f70:	9103      	str	r1, [sp, #12]
 8009f72:	9205      	str	r2, [sp, #20]
 8009f74:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009f78:	ba64      	rev16	r4, r4
 8009f7a:	b2e0      	uxtb	r0, r4
 8009f7c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009f80:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009f84:	0e24      	lsrs	r4, r4, #24
 8009f86:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8009f8a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009f8e:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8009f92:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009f96:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8009f9a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8009f9e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009fa2:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8009fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009faa:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009fae:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009fb2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009fb6:	f3c5 0009 	ubfx	r0, r5, #0, #10
 8009fba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8009fbe:	4826      	ldr	r0, [pc, #152]	; (800a058 <D32_1CH_HTONS_VOL_HP+0x11c>)
 8009fc0:	fb23 c400 	smlad	r4, r3, r0, ip
 8009fc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009fc8:	fb21 4402 	smlad	r4, r1, r2, r4
 8009fcc:	4823      	ldr	r0, [pc, #140]	; (800a05c <D32_1CH_HTONS_VOL_HP+0x120>)
 8009fce:	fb23 ec00 	smlad	ip, r3, r0, lr
 8009fd2:	4823      	ldr	r0, [pc, #140]	; (800a060 <D32_1CH_HTONS_VOL_HP+0x124>)
 8009fd4:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009fd8:	2201      	movs	r2, #1
 8009fda:	fb23 f302 	smuad	r3, r3, r2
 8009fde:	4821      	ldr	r0, [pc, #132]	; (800a064 <D32_1CH_HTONS_VOL_HP+0x128>)
 8009fe0:	fb21 3e00 	smlad	lr, r1, r0, r3
 8009fe4:	9b00      	ldr	r3, [sp, #0]
 8009fe6:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 8009fea:	4423      	add	r3, r4
 8009fec:	eba3 0209 	sub.w	r2, r3, r9
 8009ff0:	46a1      	mov	r9, r4
 8009ff2:	17d1      	asrs	r1, r2, #31
 8009ff4:	fba2 230a 	umull	r2, r3, r2, sl
 8009ff8:	e9cd 2300 	strd	r2, r3, [sp]
 8009ffc:	fb0a 3301 	mla	r3, sl, r1, r3
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a006:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a00a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a00e:	f143 0300 	adc.w	r3, r3, #0
 800a012:	0399      	lsls	r1, r3, #14
 800a014:	005b      	lsls	r3, r3, #1
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	2300      	movs	r3, #0
 800a01a:	fbc8 2301 	smlal	r2, r3, r8, r1
 800a01e:	109b      	asrs	r3, r3, #2
 800a020:	f303 030f 	ssat	r3, #16, r3
 800a024:	f827 3b02 	strh.w	r3, [r7], #2
 800a028:	9b03      	ldr	r3, [sp, #12]
 800a02a:	429f      	cmp	r7, r3
 800a02c:	d1a2      	bne.n	8009f74 <D32_1CH_HTONS_VOL_HP+0x38>
 800a02e:	4673      	mov	r3, lr
 800a030:	f8dd 8000 	ldr.w	r8, [sp]
 800a034:	9a05      	ldr	r2, [sp, #20]
 800a036:	6093      	str	r3, [r2, #8]
 800a038:	2000      	movs	r0, #0
 800a03a:	9b04      	ldr	r3, [sp, #16]
 800a03c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a040:	61d5      	str	r5, [r2, #28]
 800a042:	6193      	str	r3, [r2, #24]
 800a044:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800a048:	b007      	add	sp, #28
 800a04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04e:	4674      	mov	r4, lr
 800a050:	e7f1      	b.n	800a036 <D32_1CH_HTONS_VOL_HP+0xfa>
 800a052:	bf00      	nop
 800a054:	24000000 	.word	0x24000000
 800a058:	00060003 	.word	0x00060003
 800a05c:	000a000c 	.word	0x000a000c
 800a060:	000c000a 	.word	0x000c000a
 800a064:	00030006 	.word	0x00030006

0800a068 <D48_1CH_HTONS_VOL_HP>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800a06e:	b087      	sub	sp, #28
 800a070:	6993      	ldr	r3, [r2, #24]
 800a072:	9701      	str	r7, [sp, #4]
 800a074:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a076:	6a17      	ldr	r7, [r2, #32]
 800a078:	9304      	str	r3, [sp, #16]
 800a07a:	69d6      	ldr	r6, [r2, #28]
 800a07c:	9702      	str	r7, [sp, #8]
 800a07e:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800a082:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a086:	2d00      	cmp	r5, #0
 800a088:	f000 8093 	beq.w	800a1b2 <D48_1CH_HTONS_VOL_HP+0x14a>
 800a08c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a090:	f1a1 0b02 	sub.w	fp, r1, #2
 800a094:	46f2      	mov	sl, lr
 800a096:	4f48      	ldr	r7, [pc, #288]	; (800a1b8 <D48_1CH_HTONS_VOL_HP+0x150>)
 800a098:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800a09c:	469e      	mov	lr, r3
 800a09e:	9205      	str	r2, [sp, #20]
 800a0a0:	9103      	str	r1, [sp, #12]
 800a0a2:	e9d0 3200 	ldrd	r3, r2, [r0]
 800a0a6:	3006      	adds	r0, #6
 800a0a8:	ba5b      	rev16	r3, r3
 800a0aa:	fa92 f992 	rev16.w	r9, r2
 800a0ae:	b2dd      	uxtb	r5, r3
 800a0b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a0b4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a0b8:	0e1b      	lsrs	r3, r3, #24
 800a0ba:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a0be:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a0c2:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800a0c6:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800a0ca:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a0ce:	fa5f f289 	uxtb.w	r2, r9
 800a0d2:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800a0d6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800a0da:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a0de:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800a0e2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a0e6:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800a0ea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a0ee:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800a0f2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a0f6:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800a0fa:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800a0fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a102:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a106:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a10a:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800a10e:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800a112:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800a116:	4b29      	ldr	r3, [pc, #164]	; (800a1bc <D48_1CH_HTONS_VOL_HP+0x154>)
 800a118:	fb28 c103 	smlad	r1, r8, r3, ip
 800a11c:	4b28      	ldr	r3, [pc, #160]	; (800a1c0 <D48_1CH_HTONS_VOL_HP+0x158>)
 800a11e:	fb25 1103 	smlad	r1, r5, r3, r1
 800a122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a126:	fb22 1903 	smlad	r9, r2, r3, r1
 800a12a:	4b26      	ldr	r3, [pc, #152]	; (800a1c4 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a12c:	fb28 ec03 	smlad	ip, r8, r3, lr
 800a130:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800a134:	fb25 cc03 	smlad	ip, r5, r3, ip
 800a138:	4b23      	ldr	r3, [pc, #140]	; (800a1c8 <D48_1CH_HTONS_VOL_HP+0x160>)
 800a13a:	fb22 cc03 	smlad	ip, r2, r3, ip
 800a13e:	2101      	movs	r1, #1
 800a140:	fb28 f801 	smuad	r8, r8, r1
 800a144:	4b21      	ldr	r3, [pc, #132]	; (800a1cc <D48_1CH_HTONS_VOL_HP+0x164>)
 800a146:	fb25 8503 	smlad	r5, r5, r3, r8
 800a14a:	4b21      	ldr	r3, [pc, #132]	; (800a1d0 <D48_1CH_HTONS_VOL_HP+0x168>)
 800a14c:	fb22 5e03 	smlad	lr, r2, r3, r5
 800a150:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800a154:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a158:	190a      	adds	r2, r1, r4
 800a15a:	9c02      	ldr	r4, [sp, #8]
 800a15c:	eba2 020a 	sub.w	r2, r2, sl
 800a160:	468a      	mov	sl, r1
 800a162:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a166:	fba2 2304 	umull	r2, r3, r2, r4
 800a16a:	fb04 3309 	mla	r3, r4, r9, r3
 800a16e:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a172:	f04f 0900 	mov.w	r9, #0
 800a176:	f143 0500 	adc.w	r5, r3, #0
 800a17a:	9b01      	ldr	r3, [sp, #4]
 800a17c:	032a      	lsls	r2, r5, #12
 800a17e:	006c      	lsls	r4, r5, #1
 800a180:	fbc3 8902 	smlal	r8, r9, r3, r2
 800a184:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800a188:	f303 030f 	ssat	r3, #16, r3
 800a18c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800a190:	9b03      	ldr	r3, [sp, #12]
 800a192:	4283      	cmp	r3, r0
 800a194:	d185      	bne.n	800a0a2 <D48_1CH_HTONS_VOL_HP+0x3a>
 800a196:	4673      	mov	r3, lr
 800a198:	9a05      	ldr	r2, [sp, #20]
 800a19a:	6093      	str	r3, [r2, #8]
 800a19c:	2000      	movs	r0, #0
 800a19e:	9b04      	ldr	r3, [sp, #16]
 800a1a0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a1a4:	61d6      	str	r6, [r2, #28]
 800a1a6:	6193      	str	r3, [r2, #24]
 800a1a8:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800a1ac:	b007      	add	sp, #28
 800a1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b2:	4671      	mov	r1, lr
 800a1b4:	e7f1      	b.n	800a19a <D48_1CH_HTONS_VOL_HP+0x132>
 800a1b6:	bf00      	nop
 800a1b8:	24000000 	.word	0x24000000
 800a1bc:	000f000a 	.word	0x000f000a
 800a1c0:	00060003 	.word	0x00060003
 800a1c4:	00150019 	.word	0x00150019
 800a1c8:	00190015 	.word	0x00190015
 800a1cc:	00030006 	.word	0x00030006
 800a1d0:	000a000f 	.word	0x000a000f

0800a1d4 <D64_1CH_HTONS_VOL_HP>:
 800a1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a1da:	b089      	sub	sp, #36	; 0x24
 800a1dc:	6993      	ldr	r3, [r2, #24]
 800a1de:	4686      	mov	lr, r0
 800a1e0:	9503      	str	r5, [sp, #12]
 800a1e2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800a1e4:	6a15      	ldr	r5, [r2, #32]
 800a1e6:	9306      	str	r3, [sp, #24]
 800a1e8:	69d6      	ldr	r6, [r2, #28]
 800a1ea:	9504      	str	r5, [sp, #16]
 800a1ec:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800a1f0:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f000 80a4 	beq.w	800a342 <D64_1CH_HTONS_VOL_HP+0x16e>
 800a1fa:	460f      	mov	r7, r1
 800a1fc:	46f1      	mov	r9, lr
 800a1fe:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800a202:	4d56      	ldr	r5, [pc, #344]	; (800a35c <D64_1CH_HTONS_VOL_HP+0x188>)
 800a204:	46a2      	mov	sl, r4
 800a206:	469e      	mov	lr, r3
 800a208:	9105      	str	r1, [sp, #20]
 800a20a:	9207      	str	r2, [sp, #28]
 800a20c:	f859 1b08 	ldr.w	r1, [r9], #8
 800a210:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800a214:	ba49      	rev16	r1, r1
 800a216:	fa93 fb93 	rev16.w	fp, r3
 800a21a:	b2cb      	uxtb	r3, r1
 800a21c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a220:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800a224:	0e09      	lsrs	r1, r1, #24
 800a226:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800a22a:	fa5f f38b 	uxtb.w	r3, fp
 800a22e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a232:	4426      	add	r6, r4
 800a234:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800a238:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a23c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800a240:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a244:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a248:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a24c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800a250:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a254:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a258:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800a25c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a260:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800a264:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800a268:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800a26c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a270:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a274:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800a278:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800a27c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a280:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800a284:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a288:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800a28c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a290:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800a294:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800a298:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a29c:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800a2a0:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800a2a4:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800a2a8:	482d      	ldr	r0, [pc, #180]	; (800a360 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800a2aa:	fb22 cc00 	smlad	ip, r2, r0, ip
 800a2ae:	482d      	ldr	r0, [pc, #180]	; (800a364 <D64_1CH_HTONS_VOL_HP+0x190>)
 800a2b0:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a2b4:	482c      	ldr	r0, [pc, #176]	; (800a368 <D64_1CH_HTONS_VOL_HP+0x194>)
 800a2b6:	fb23 cc00 	smlad	ip, r3, r0, ip
 800a2ba:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a2be:	fb2b c404 	smlad	r4, fp, r4, ip
 800a2c2:	482a      	ldr	r0, [pc, #168]	; (800a36c <D64_1CH_HTONS_VOL_HP+0x198>)
 800a2c4:	fb22 ec00 	smlad	ip, r2, r0, lr
 800a2c8:	fb2b cc10 	smladx	ip, fp, r0, ip
 800a2cc:	4828      	ldr	r0, [pc, #160]	; (800a370 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800a2ce:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a2d2:	fb23 cc10 	smladx	ip, r3, r0, ip
 800a2d6:	f04f 0e01 	mov.w	lr, #1
 800a2da:	fb22 f20e 	smuad	r2, r2, lr
 800a2de:	4825      	ldr	r0, [pc, #148]	; (800a374 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800a2e0:	fb21 2100 	smlad	r1, r1, r0, r2
 800a2e4:	4a24      	ldr	r2, [pc, #144]	; (800a378 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800a2e6:	fb23 1302 	smlad	r3, r3, r2, r1
 800a2ea:	4a24      	ldr	r2, [pc, #144]	; (800a37c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800a2ec:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800a2f0:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800a2f4:	eb04 0208 	add.w	r2, r4, r8
 800a2f8:	eba2 020a 	sub.w	r2, r2, sl
 800a2fc:	46a2      	mov	sl, r4
 800a2fe:	4610      	mov	r0, r2
 800a300:	17d1      	asrs	r1, r2, #31
 800a302:	e9cd 0100 	strd	r0, r1, [sp]
 800a306:	9904      	ldr	r1, [sp, #16]
 800a308:	9801      	ldr	r0, [sp, #4]
 800a30a:	fba2 2301 	umull	r2, r3, r2, r1
 800a30e:	fb01 3300 	mla	r3, r1, r0, r3
 800a312:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800a316:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a31a:	f143 0100 	adc.w	r1, r3, #0
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	02ca      	lsls	r2, r1, #11
 800a322:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800a326:	2100      	movs	r1, #0
 800a328:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a32c:	108b      	asrs	r3, r1, #2
 800a32e:	f303 030f 	ssat	r3, #16, r3
 800a332:	f827 3b02 	strh.w	r3, [r7], #2
 800a336:	9b05      	ldr	r3, [sp, #20]
 800a338:	429f      	cmp	r7, r3
 800a33a:	f47f af67 	bne.w	800a20c <D64_1CH_HTONS_VOL_HP+0x38>
 800a33e:	4673      	mov	r3, lr
 800a340:	9a07      	ldr	r2, [sp, #28]
 800a342:	6093      	str	r3, [r2, #8]
 800a344:	2000      	movs	r0, #0
 800a346:	9b06      	ldr	r3, [sp, #24]
 800a348:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a34c:	61d6      	str	r6, [r2, #28]
 800a34e:	6193      	str	r3, [r2, #24]
 800a350:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800a354:	b009      	add	sp, #36	; 0x24
 800a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35a:	bf00      	nop
 800a35c:	24000000 	.word	0x24000000
 800a360:	001c0015 	.word	0x001c0015
 800a364:	000f000a 	.word	0x000f000a
 800a368:	00060003 	.word	0x00060003
 800a36c:	0024002a 	.word	0x0024002a
 800a370:	002e0030 	.word	0x002e0030
 800a374:	00030006 	.word	0x00030006
 800a378:	000a000f 	.word	0x000a000f
 800a37c:	0015001c 	.word	0x0015001c

0800a380 <D80_1CH_HTONS_VOL_HP>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	6913      	ldr	r3, [r2, #16]
 800a386:	b089      	sub	sp, #36	; 0x24
 800a388:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	9603      	str	r6, [sp, #12]
 800a38e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a390:	6a16      	ldr	r6, [r2, #32]
 800a392:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800a396:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800a39a:	9306      	str	r3, [sp, #24]
 800a39c:	9604      	str	r6, [sp, #16]
 800a39e:	69d3      	ldr	r3, [r2, #28]
 800a3a0:	2c00      	cmp	r4, #0
 800a3a2:	f000 80ce 	beq.w	800a542 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800a3a6:	3902      	subs	r1, #2
 800a3a8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a3ac:	4e66      	ldr	r6, [pc, #408]	; (800a548 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800a3ae:	469e      	mov	lr, r3
 800a3b0:	9102      	str	r1, [sp, #8]
 800a3b2:	46aa      	mov	sl, r5
 800a3b4:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800a3b8:	9207      	str	r2, [sp, #28]
 800a3ba:	9105      	str	r1, [sp, #20]
 800a3bc:	6883      	ldr	r3, [r0, #8]
 800a3be:	e9d0 4200 	ldrd	r4, r2, [r0]
 800a3c2:	300a      	adds	r0, #10
 800a3c4:	ba64      	rev16	r4, r4
 800a3c6:	ba52      	rev16	r2, r2
 800a3c8:	fa93 fb93 	rev16.w	fp, r3
 800a3cc:	b2e5      	uxtb	r5, r4
 800a3ce:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a3d2:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800a3d6:	0e24      	lsrs	r4, r4, #24
 800a3d8:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800a3dc:	b2d5      	uxtb	r5, r2
 800a3de:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a3e2:	44c6      	add	lr, r8
 800a3e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a3e8:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800a3ec:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800a3f0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a3f4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a3f8:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800a3fc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a404:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a408:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a40c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800a410:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800a414:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800a418:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800a41c:	0e12      	lsrs	r2, r2, #24
 800a41e:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800a422:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800a426:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a42a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a42e:	fa5f fb8b 	uxtb.w	fp, fp
 800a432:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a436:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a43a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800a43e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a442:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800a446:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a44a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a44e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800a452:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800a456:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a45a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a45e:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800a462:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a466:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800a46a:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800a46e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800a472:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800a476:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800a47a:	4934      	ldr	r1, [pc, #208]	; (800a54c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800a47c:	fb23 cc01 	smlad	ip, r3, r1, ip
 800a480:	4933      	ldr	r1, [pc, #204]	; (800a550 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800a482:	fb24 cc01 	smlad	ip, r4, r1, ip
 800a486:	4933      	ldr	r1, [pc, #204]	; (800a554 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800a488:	fb28 cc01 	smlad	ip, r8, r1, ip
 800a48c:	4932      	ldr	r1, [pc, #200]	; (800a558 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800a48e:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a492:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a496:	fb2b c901 	smlad	r9, fp, r1, ip
 800a49a:	4930      	ldr	r1, [pc, #192]	; (800a55c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800a49c:	fb23 7701 	smlad	r7, r3, r1, r7
 800a4a0:	492f      	ldr	r1, [pc, #188]	; (800a560 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a4a2:	fb24 7701 	smlad	r7, r4, r1, r7
 800a4a6:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800a4aa:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800a4ae:	492d      	ldr	r1, [pc, #180]	; (800a564 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a4b0:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a4b4:	492c      	ldr	r1, [pc, #176]	; (800a568 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a4b6:	fb2b cc01 	smlad	ip, fp, r1, ip
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	fb23 f301 	smuad	r3, r3, r1
 800a4c0:	492a      	ldr	r1, [pc, #168]	; (800a56c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a4c2:	fb24 3401 	smlad	r4, r4, r1, r3
 800a4c6:	492a      	ldr	r1, [pc, #168]	; (800a570 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a4c8:	fb28 4101 	smlad	r1, r8, r1, r4
 800a4cc:	4f29      	ldr	r7, [pc, #164]	; (800a574 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a4ce:	fb22 1207 	smlad	r2, r2, r7, r1
 800a4d2:	4f29      	ldr	r7, [pc, #164]	; (800a578 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a4d4:	fb2b 2707 	smlad	r7, fp, r7, r2
 800a4d8:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800a4dc:	9b01      	ldr	r3, [sp, #4]
 800a4de:	9c04      	ldr	r4, [sp, #16]
 800a4e0:	440b      	add	r3, r1
 800a4e2:	eba3 020a 	sub.w	r2, r3, sl
 800a4e6:	468a      	mov	sl, r1
 800a4e8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a4ec:	fba2 2304 	umull	r2, r3, r2, r4
 800a4f0:	fb04 3309 	mla	r3, r4, r9, r3
 800a4f4:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a4f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a4fc:	f143 0500 	adc.w	r5, r3, #0
 800a500:	006b      	lsls	r3, r5, #1
 800a502:	02aa      	lsls	r2, r5, #10
 800a504:	2500      	movs	r5, #0
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	9b03      	ldr	r3, [sp, #12]
 800a50a:	fbc3 4502 	smlal	r4, r5, r3, r2
 800a50e:	9a02      	ldr	r2, [sp, #8]
 800a510:	10ab      	asrs	r3, r5, #2
 800a512:	f303 030f 	ssat	r3, #16, r3
 800a516:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a51a:	9b05      	ldr	r3, [sp, #20]
 800a51c:	9202      	str	r2, [sp, #8]
 800a51e:	4298      	cmp	r0, r3
 800a520:	f47f af4c 	bne.w	800a3bc <D80_1CH_HTONS_VOL_HP+0x3c>
 800a524:	4673      	mov	r3, lr
 800a526:	9a07      	ldr	r2, [sp, #28]
 800a528:	61d3      	str	r3, [r2, #28]
 800a52a:	2000      	movs	r0, #0
 800a52c:	9b01      	ldr	r3, [sp, #4]
 800a52e:	6097      	str	r7, [r2, #8]
 800a530:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a534:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800a538:	9b06      	ldr	r3, [sp, #24]
 800a53a:	6193      	str	r3, [r2, #24]
 800a53c:	b009      	add	sp, #36	; 0x24
 800a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a542:	4629      	mov	r1, r5
 800a544:	e7f0      	b.n	800a528 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800a546:	bf00      	nop
 800a548:	24000000 	.word	0x24000000
 800a54c:	002d0024 	.word	0x002d0024
 800a550:	001c0015 	.word	0x001c0015
 800a554:	000f000a 	.word	0x000f000a
 800a558:	00060003 	.word	0x00060003
 800a55c:	0037003f 	.word	0x0037003f
 800a560:	00450049 	.word	0x00450049
 800a564:	00490045 	.word	0x00490045
 800a568:	003f0037 	.word	0x003f0037
 800a56c:	00030006 	.word	0x00030006
 800a570:	000a000f 	.word	0x000a000f
 800a574:	0015001c 	.word	0x0015001c
 800a578:	0024002d 	.word	0x0024002d

0800a57c <D128_1CH_HTONS_VOL_HP>:
 800a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	6914      	ldr	r4, [r2, #16]
 800a582:	b08d      	sub	sp, #52	; 0x34
 800a584:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a586:	9404      	str	r4, [sp, #16]
 800a588:	6954      	ldr	r4, [r2, #20]
 800a58a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a58c:	9405      	str	r4, [sp, #20]
 800a58e:	6994      	ldr	r4, [r2, #24]
 800a590:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a594:	940a      	str	r4, [sp, #40]	; 0x28
 800a596:	6894      	ldr	r4, [r2, #8]
 800a598:	9403      	str	r4, [sp, #12]
 800a59a:	68d4      	ldr	r4, [r2, #12]
 800a59c:	9402      	str	r4, [sp, #8]
 800a59e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a5a0:	6a12      	ldr	r2, [r2, #32]
 800a5a2:	9407      	str	r4, [sp, #28]
 800a5a4:	9208      	str	r2, [sp, #32]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 812e 	beq.w	800a808 <D128_1CH_HTONS_VOL_HP+0x28c>
 800a5ac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a5b0:	f100 0b10 	add.w	fp, r0, #16
 800a5b4:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800a848 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800a5b8:	9106      	str	r1, [sp, #24]
 800a5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a5bc:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800a5c0:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800a5c4:	ba40      	rev16	r0, r0
 800a5c6:	ba52      	rev16	r2, r2
 800a5c8:	ba5b      	rev16	r3, r3
 800a5ca:	ba76      	rev16	r6, r6
 800a5cc:	b2c5      	uxtb	r5, r0
 800a5ce:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a5d2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a5d6:	0e00      	lsrs	r0, r0, #24
 800a5d8:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800a5dc:	b2d5      	uxtb	r5, r2
 800a5de:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800a5e2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a5e6:	44bc      	add	ip, r7
 800a5e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a5ec:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800a5f0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800a5f4:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800a5f8:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800a5fc:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800a600:	0e12      	lsrs	r2, r2, #24
 800a602:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800a606:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800a60a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a60e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a612:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a616:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800a61a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800a624:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a628:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800a62c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800a630:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800a634:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a638:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800a63c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a640:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800a644:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a648:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800a64c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800a650:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800a654:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a658:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800a65c:	0e1b      	lsrs	r3, r3, #24
 800a65e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a662:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a666:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800a66a:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800a66e:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800a672:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a676:	b2f3      	uxtb	r3, r6
 800a678:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800a67c:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800a680:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a684:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800a688:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a68c:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800a690:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a694:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a698:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800a69c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800a6a0:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800a6a4:	0e36      	lsrs	r6, r6, #24
 800a6a6:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800a6aa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a6ae:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800a6b2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a6b6:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800a6ba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a6be:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800a6c2:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800a6c6:	9101      	str	r1, [sp, #4]
 800a6c8:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800a6cc:	9b02      	ldr	r3, [sp, #8]
 800a6ce:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a6d2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800a6dc:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800a6e0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a6e4:	4a49      	ldr	r2, [pc, #292]	; (800a80c <D128_1CH_HTONS_VOL_HP+0x290>)
 800a6e6:	fb2e 3202 	smlad	r2, lr, r2, r3
 800a6ea:	4b49      	ldr	r3, [pc, #292]	; (800a810 <D128_1CH_HTONS_VOL_HP+0x294>)
 800a6ec:	fb27 2203 	smlad	r2, r7, r3, r2
 800a6f0:	4b48      	ldr	r3, [pc, #288]	; (800a814 <D128_1CH_HTONS_VOL_HP+0x298>)
 800a6f2:	fb25 2203 	smlad	r2, r5, r3, r2
 800a6f6:	4b48      	ldr	r3, [pc, #288]	; (800a818 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800a6f8:	fb24 2203 	smlad	r2, r4, r3, r2
 800a6fc:	4b47      	ldr	r3, [pc, #284]	; (800a81c <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800a6fe:	fb20 2803 	smlad	r8, r0, r3, r2
 800a702:	4b47      	ldr	r3, [pc, #284]	; (800a820 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800a704:	9a01      	ldr	r2, [sp, #4]
 800a706:	fb22 8203 	smlad	r2, r2, r3, r8
 800a70a:	4b46      	ldr	r3, [pc, #280]	; (800a824 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800a70c:	9102      	str	r1, [sp, #8]
 800a70e:	fb21 2203 	smlad	r2, r1, r3, r2
 800a712:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800a716:	fb26 2308 	smlad	r3, r6, r8, r2
 800a71a:	4619      	mov	r1, r3
 800a71c:	9a03      	ldr	r2, [sp, #12]
 800a71e:	4b42      	ldr	r3, [pc, #264]	; (800a828 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800a720:	fb2e 2803 	smlad	r8, lr, r3, r2
 800a724:	4b41      	ldr	r3, [pc, #260]	; (800a82c <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800a726:	fb27 8a03 	smlad	sl, r7, r3, r8
 800a72a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a84c <D128_1CH_HTONS_VOL_HP+0x2d0>
 800a72e:	fb25 a808 	smlad	r8, r5, r8, sl
 800a732:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800a850 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800a736:	fb24 880a 	smlad	r8, r4, sl, r8
 800a73a:	f8df a118 	ldr.w	sl, [pc, #280]	; 800a854 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800a73e:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800a742:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800a858 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800a746:	9b01      	ldr	r3, [sp, #4]
 800a748:	fb23 aa08 	smlad	sl, r3, r8, sl
 800a74c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800a85c <D128_1CH_HTONS_VOL_HP+0x2e0>
 800a750:	9a02      	ldr	r2, [sp, #8]
 800a752:	fb22 a808 	smlad	r8, r2, r8, sl
 800a756:	f8df a108 	ldr.w	sl, [pc, #264]	; 800a860 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800a75a:	fb26 830a 	smlad	r3, r6, sl, r8
 800a75e:	f04f 0801 	mov.w	r8, #1
 800a762:	9302      	str	r3, [sp, #8]
 800a764:	fb2e fe08 	smuad	lr, lr, r8
 800a768:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800a864 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800a76c:	fb27 ee08 	smlad	lr, r7, r8, lr
 800a770:	4f2f      	ldr	r7, [pc, #188]	; (800a830 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800a772:	fb25 ee07 	smlad	lr, r5, r7, lr
 800a776:	4f2f      	ldr	r7, [pc, #188]	; (800a834 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800a778:	fb24 ee07 	smlad	lr, r4, r7, lr
 800a77c:	4f2e      	ldr	r7, [pc, #184]	; (800a838 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800a77e:	fb20 ee07 	smlad	lr, r0, r7, lr
 800a782:	4f2e      	ldr	r7, [pc, #184]	; (800a83c <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800a784:	9b01      	ldr	r3, [sp, #4]
 800a786:	fb23 ee07 	smlad	lr, r3, r7, lr
 800a78a:	4f2d      	ldr	r7, [pc, #180]	; (800a840 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800a78c:	fb22 e707 	smlad	r7, r2, r7, lr
 800a790:	4b2c      	ldr	r3, [pc, #176]	; (800a844 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800a792:	fb26 7303 	smlad	r3, r6, r3, r7
 800a796:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800a79a:	9303      	str	r3, [sp, #12]
 800a79c:	9b04      	ldr	r3, [sp, #16]
 800a79e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a7a2:	9f08      	ldr	r7, [sp, #32]
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	4433      	add	r3, r6
 800a7a8:	f10b 0b10 	add.w	fp, fp, #16
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	9b05      	ldr	r3, [sp, #20]
 800a7b0:	9605      	str	r6, [sp, #20]
 800a7b2:	1ad2      	subs	r2, r2, r3
 800a7b4:	17d5      	asrs	r5, r2, #31
 800a7b6:	fba2 2307 	umull	r2, r3, r2, r7
 800a7ba:	1814      	adds	r4, r2, r0
 800a7bc:	fb07 3305 	mla	r3, r7, r5, r3
 800a7c0:	eb43 0501 	adc.w	r5, r3, r1
 800a7c4:	006b      	lsls	r3, r5, #1
 800a7c6:	022a      	lsls	r2, r5, #8
 800a7c8:	9304      	str	r3, [sp, #16]
 800a7ca:	9b07      	ldr	r3, [sp, #28]
 800a7cc:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a7d0:	9a06      	ldr	r2, [sp, #24]
 800a7d2:	108b      	asrs	r3, r1, #2
 800a7d4:	f303 030f 	ssat	r3, #16, r3
 800a7d8:	f822 3b02 	strh.w	r3, [r2], #2
 800a7dc:	4613      	mov	r3, r2
 800a7de:	9206      	str	r2, [sp, #24]
 800a7e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	f47f aeea 	bne.w	800a5bc <D128_1CH_HTONS_VOL_HP+0x40>
 800a7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	9903      	ldr	r1, [sp, #12]
 800a7ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7f0:	6099      	str	r1, [r3, #8]
 800a7f2:	9902      	ldr	r1, [sp, #8]
 800a7f4:	f8c3 c01c 	str.w	ip, [r3, #28]
 800a7f8:	60d9      	str	r1, [r3, #12]
 800a7fa:	9904      	ldr	r1, [sp, #16]
 800a7fc:	619a      	str	r2, [r3, #24]
 800a7fe:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800a802:	b00d      	add	sp, #52	; 0x34
 800a804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a808:	9e05      	ldr	r6, [sp, #20]
 800a80a:	e7ed      	b.n	800a7e8 <D128_1CH_HTONS_VOL_HP+0x26c>
 800a80c:	00780069 	.word	0x00780069
 800a810:	005b004e 	.word	0x005b004e
 800a814:	00420037 	.word	0x00420037
 800a818:	002d0024 	.word	0x002d0024
 800a81c:	001c0015 	.word	0x001c0015
 800a820:	000f000a 	.word	0x000f000a
 800a824:	00060003 	.word	0x00060003
 800a828:	00880096 	.word	0x00880096
 800a82c:	00a200ac 	.word	0x00a200ac
 800a830:	000a000f 	.word	0x000a000f
 800a834:	0015001c 	.word	0x0015001c
 800a838:	0024002d 	.word	0x0024002d
 800a83c:	00370042 	.word	0x00370042
 800a840:	004e005b 	.word	0x004e005b
 800a844:	00690078 	.word	0x00690078
 800a848:	24000000 	.word	0x24000000
 800a84c:	00b400ba 	.word	0x00b400ba
 800a850:	00be00c0 	.word	0x00be00c0
 800a854:	00c000be 	.word	0x00c000be
 800a858:	00ba00b4 	.word	0x00ba00b4
 800a85c:	00ac00a2 	.word	0x00ac00a2
 800a860:	00960088 	.word	0x00960088
 800a864:	00030006 	.word	0x00030006

0800a868 <PDM_Filter_Init>:
 800a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86a:	2240      	movs	r2, #64	; 0x40
 800a86c:	2100      	movs	r1, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	300c      	adds	r0, #12
 800a872:	f000 f9ed 	bl	800ac50 <memset>
 800a876:	4a56      	ldr	r2, [pc, #344]	; (800a9d0 <PDM_Filter_Init+0x168>)
 800a878:	4856      	ldr	r0, [pc, #344]	; (800a9d4 <PDM_Filter_Init+0x16c>)
 800a87a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800a87e:	6813      	ldr	r3, [r2, #0]
 800a880:	f24c 2540 	movw	r5, #49728	; 0xc240
 800a884:	f023 0301 	bic.w	r3, r3, #1
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	6803      	ldr	r3, [r0, #0]
 800a88c:	400b      	ands	r3, r1
 800a88e:	42ab      	cmp	r3, r5
 800a890:	d040      	beq.n	800a914 <PDM_Filter_Init+0xac>
 800a892:	6803      	ldr	r3, [r0, #0]
 800a894:	f24c 2270 	movw	r2, #49776	; 0xc270
 800a898:	4019      	ands	r1, r3
 800a89a:	4291      	cmp	r1, r2
 800a89c:	d03a      	beq.n	800a914 <PDM_Filter_Init+0xac>
 800a89e:	4b4e      	ldr	r3, [pc, #312]	; (800a9d8 <PDM_Filter_Init+0x170>)
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	6019      	str	r1, [r3, #0]
 800a8a6:	6813      	ldr	r3, [r2, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1fc      	bne.n	800a8a6 <PDM_Filter_Init+0x3e>
 800a8ac:	4b4b      	ldr	r3, [pc, #300]	; (800a9dc <PDM_Filter_Init+0x174>)
 800a8ae:	494c      	ldr	r1, [pc, #304]	; (800a9e0 <PDM_Filter_Init+0x178>)
 800a8b0:	4a4c      	ldr	r2, [pc, #304]	; (800a9e4 <PDM_Filter_Init+0x17c>)
 800a8b2:	6019      	str	r1, [r3, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	8820      	ldrh	r0, [r4, #0]
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	8961      	ldrh	r1, [r4, #10]
 800a8bc:	f04f 0300 	mov.w	r3, #0
 800a8c0:	8922      	ldrh	r2, [r4, #8]
 800a8c2:	bf14      	ite	ne
 800a8c4:	2500      	movne	r5, #0
 800a8c6:	4d47      	ldreq	r5, [pc, #284]	; (800a9e4 <PDM_Filter_Init+0x17c>)
 800a8c8:	2801      	cmp	r0, #1
 800a8ca:	61a3      	str	r3, [r4, #24]
 800a8cc:	6465      	str	r5, [r4, #68]	; 0x44
 800a8ce:	60e3      	str	r3, [r4, #12]
 800a8d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a8d2:	6423      	str	r3, [r4, #64]	; 0x40
 800a8d4:	86a1      	strh	r1, [r4, #52]	; 0x34
 800a8d6:	86e2      	strh	r2, [r4, #54]	; 0x36
 800a8d8:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800a8dc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a8e0:	d936      	bls.n	800a950 <PDM_Filter_Init+0xe8>
 800a8e2:	2003      	movs	r0, #3
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	8862      	ldrh	r2, [r4, #2]
 800a8e8:	2a01      	cmp	r2, #1
 800a8ea:	d92e      	bls.n	800a94a <PDM_Filter_Init+0xe2>
 800a8ec:	2140      	movs	r1, #64	; 0x40
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a8f2:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800a8f6:	d101      	bne.n	800a8fc <PDM_Filter_Init+0x94>
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	6421      	str	r1, [r4, #64]	; 0x40
 800a8fc:	6862      	ldr	r2, [r4, #4]
 800a8fe:	b11a      	cbz	r2, 800a908 <PDM_Filter_Init+0xa0>
 800a900:	f043 0310 	orr.w	r3, r3, #16
 800a904:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a906:	6423      	str	r3, [r4, #64]	; 0x40
 800a908:	2200      	movs	r2, #0
 800a90a:	8722      	strh	r2, [r4, #56]	; 0x38
 800a90c:	b908      	cbnz	r0, 800a912 <PDM_Filter_Init+0xaa>
 800a90e:	3380      	adds	r3, #128	; 0x80
 800a910:	6423      	str	r3, [r4, #64]	; 0x40
 800a912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a914:	4b34      	ldr	r3, [pc, #208]	; (800a9e8 <PDM_Filter_Init+0x180>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1c0      	bne.n	800a89e <PDM_Filter_Init+0x36>
 800a91c:	4a33      	ldr	r2, [pc, #204]	; (800a9ec <PDM_Filter_Init+0x184>)
 800a91e:	6813      	ldr	r3, [r2, #0]
 800a920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a924:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a928:	d006      	beq.n	800a938 <PDM_Filter_Init+0xd0>
 800a92a:	6813      	ldr	r3, [r2, #0]
 800a92c:	f240 4283 	movw	r2, #1155	; 0x483
 800a930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a934:	4293      	cmp	r3, r2
 800a936:	d1b2      	bne.n	800a89e <PDM_Filter_Init+0x36>
 800a938:	4b2d      	ldr	r3, [pc, #180]	; (800a9f0 <PDM_Filter_Init+0x188>)
 800a93a:	2101      	movs	r1, #1
 800a93c:	461a      	mov	r2, r3
 800a93e:	6019      	str	r1, [r3, #0]
 800a940:	6813      	ldr	r3, [r2, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1fc      	bne.n	800a940 <PDM_Filter_Init+0xd8>
 800a946:	4b2b      	ldr	r3, [pc, #172]	; (800a9f4 <PDM_Filter_Init+0x18c>)
 800a948:	e7b1      	b.n	800a8ae <PDM_Filter_Init+0x46>
 800a94a:	d03a      	beq.n	800a9c2 <PDM_Filter_Init+0x15a>
 800a94c:	4618      	mov	r0, r3
 800a94e:	e7cd      	b.n	800a8ec <PDM_Filter_Init+0x84>
 800a950:	4d29      	ldr	r5, [pc, #164]	; (800a9f8 <PDM_Filter_Init+0x190>)
 800a952:	782a      	ldrb	r2, [r5, #0]
 800a954:	d01b      	beq.n	800a98e <PDM_Filter_Init+0x126>
 800a956:	2a01      	cmp	r2, #1
 800a958:	d001      	beq.n	800a95e <PDM_Filter_Init+0xf6>
 800a95a:	2001      	movs	r0, #1
 800a95c:	e7c3      	b.n	800a8e6 <PDM_Filter_Init+0x7e>
 800a95e:	4927      	ldr	r1, [pc, #156]	; (800a9fc <PDM_Filter_Init+0x194>)
 800a960:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800aa04 <PDM_Filter_Init+0x19c>
 800a964:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a968:	4e25      	ldr	r6, [pc, #148]	; (800aa00 <PDM_Filter_Init+0x198>)
 800a96a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a96e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a972:	ea02 0006 	and.w	r0, r2, r6
 800a976:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a97a:	428f      	cmp	r7, r1
 800a97c:	ea43 0300 	orr.w	r3, r3, r0
 800a980:	4413      	add	r3, r2
 800a982:	600b      	str	r3, [r1, #0]
 800a984:	d1f1      	bne.n	800a96a <PDM_Filter_Init+0x102>
 800a986:	2300      	movs	r3, #0
 800a988:	2001      	movs	r0, #1
 800a98a:	702b      	strb	r3, [r5, #0]
 800a98c:	e7ab      	b.n	800a8e6 <PDM_Filter_Init+0x7e>
 800a98e:	2a00      	cmp	r2, #0
 800a990:	d1a9      	bne.n	800a8e6 <PDM_Filter_Init+0x7e>
 800a992:	491a      	ldr	r1, [pc, #104]	; (800a9fc <PDM_Filter_Init+0x194>)
 800a994:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800aa04 <PDM_Filter_Init+0x19c>
 800a998:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a99c:	4e18      	ldr	r6, [pc, #96]	; (800aa00 <PDM_Filter_Init+0x198>)
 800a99e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a9a2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a9a6:	ea02 0006 	and.w	r0, r2, r6
 800a9aa:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a9ae:	428f      	cmp	r7, r1
 800a9b0:	ea43 0300 	orr.w	r3, r3, r0
 800a9b4:	4413      	add	r3, r2
 800a9b6:	600b      	str	r3, [r1, #0]
 800a9b8:	d1f1      	bne.n	800a99e <PDM_Filter_Init+0x136>
 800a9ba:	2001      	movs	r0, #1
 800a9bc:	2300      	movs	r3, #0
 800a9be:	7028      	strb	r0, [r5, #0]
 800a9c0:	e791      	b.n	800a8e6 <PDM_Filter_Init+0x7e>
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	2160      	movs	r1, #96	; 0x60
 800a9c8:	6422      	str	r2, [r4, #64]	; 0x40
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	e790      	b.n	800a8f0 <PDM_Filter_Init+0x88>
 800a9ce:	bf00      	nop
 800a9d0:	e0002000 	.word	0xe0002000
 800a9d4:	e000ed00 	.word	0xe000ed00
 800a9d8:	40023008 	.word	0x40023008
 800a9dc:	40023000 	.word	0x40023000
 800a9e0:	f407a5c2 	.word	0xf407a5c2
 800a9e4:	b5e8b5cd 	.word	0xb5e8b5cd
 800a9e8:	e0042000 	.word	0xe0042000
 800a9ec:	5c001000 	.word	0x5c001000
 800a9f0:	58024c08 	.word	0x58024c08
 800a9f4:	58024c00 	.word	0x58024c00
 800a9f8:	2400049c 	.word	0x2400049c
 800a9fc:	23fffffc 	.word	0x23fffffc
 800aa00:	000ffc00 	.word	0x000ffc00
 800aa04:	3ff00000 	.word	0x3ff00000

0800aa08 <PDM_Filter_setConfig>:
 800aa08:	4b67      	ldr	r3, [pc, #412]	; (800aba8 <PDM_Filter_setConfig+0x1a0>)
 800aa0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d128      	bne.n	800aa62 <PDM_Filter_setConfig+0x5a>
 800aa10:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800aa12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa14:	880e      	ldrh	r6, [r1, #0]
 800aa16:	460d      	mov	r5, r1
 800aa18:	4604      	mov	r4, r0
 800aa1a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800aa1e:	1e73      	subs	r3, r6, #1
 800aa20:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800aa24:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800aa28:	2b06      	cmp	r3, #6
 800aa2a:	ed2d 8b02 	vpush	{d8}
 800aa2e:	6421      	str	r1, [r4, #64]	; 0x40
 800aa30:	b083      	sub	sp, #12
 800aa32:	d820      	bhi.n	800aa76 <PDM_Filter_setConfig+0x6e>
 800aa34:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800aa36:	42b3      	cmp	r3, r6
 800aa38:	d03d      	beq.n	800aab6 <PDM_Filter_setConfig+0xae>
 800aa3a:	4b5c      	ldr	r3, [pc, #368]	; (800abac <PDM_Filter_setConfig+0x1a4>)
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	4333      	orrs	r3, r6
 800aa40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aa44:	6423      	str	r3, [r4, #64]	; 0x40
 800aa46:	f003 030f 	and.w	r3, r3, #15
 800aa4a:	2a70      	cmp	r2, #112	; 0x70
 800aa4c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800aa50:	d009      	beq.n	800aa66 <PDM_Filter_setConfig+0x5e>
 800aa52:	2b06      	cmp	r3, #6
 800aa54:	d824      	bhi.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800aa56:	e8df f003 	tbb	[pc, r3]
 800aa5a:	878a      	.short	0x878a
 800aa5c:	7b7e8184 	.word	0x7b7e8184
 800aa60:	78          	.byte	0x78
 800aa61:	00          	.byte	0x00
 800aa62:	2004      	movs	r0, #4
 800aa64:	4770      	bx	lr
 800aa66:	2b06      	cmp	r3, #6
 800aa68:	d81a      	bhi.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800aa6a:	e8df f003 	tbb	[pc, r3]
 800aa6e:	8f92      	.short	0x8f92
 800aa70:	8617898c 	.word	0x8617898c
 800aa74:	83          	.byte	0x83
 800aa75:	00          	.byte	0x00
 800aa76:	4287      	cmp	r7, r0
 800aa78:	f000 808e 	beq.w	800ab98 <PDM_Filter_setConfig+0x190>
 800aa7c:	f117 0f0c 	cmn.w	r7, #12
 800aa80:	f04f 0008 	mov.w	r0, #8
 800aa84:	da11      	bge.n	800aaaa <PDM_Filter_setConfig+0xa2>
 800aa86:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800aa8a:	3040      	adds	r0, #64	; 0x40
 800aa8c:	80ab      	strh	r3, [r5, #4]
 800aa8e:	886b      	ldrh	r3, [r5, #2]
 800aa90:	8626      	strh	r6, [r4, #48]	; 0x30
 800aa92:	8663      	strh	r3, [r4, #50]	; 0x32
 800aa94:	b003      	add	sp, #12
 800aa96:	ecbd 8b02 	vpop	{d8}
 800aa9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa9c:	4b44      	ldr	r3, [pc, #272]	; (800abb0 <PDM_Filter_setConfig+0x1a8>)
 800aa9e:	64a3      	str	r3, [r4, #72]	; 0x48
 800aaa0:	f117 0f0c 	cmn.w	r7, #12
 800aaa4:	f04f 0000 	mov.w	r0, #0
 800aaa8:	dbed      	blt.n	800aa86 <PDM_Filter_setConfig+0x7e>
 800aaaa:	2f33      	cmp	r7, #51	; 0x33
 800aaac:	dd10      	ble.n	800aad0 <PDM_Filter_setConfig+0xc8>
 800aaae:	2333      	movs	r3, #51	; 0x33
 800aab0:	3040      	adds	r0, #64	; 0x40
 800aab2:	80ab      	strh	r3, [r5, #4]
 800aab4:	e7eb      	b.n	800aa8e <PDM_Filter_setConfig+0x86>
 800aab6:	4287      	cmp	r7, r0
 800aab8:	d1f2      	bne.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800aaba:	886b      	ldrh	r3, [r5, #2]
 800aabc:	8663      	strh	r3, [r4, #50]	; 0x32
 800aabe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aac0:	2000      	movs	r0, #0
 800aac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aac6:	6423      	str	r3, [r4, #64]	; 0x40
 800aac8:	b003      	add	sp, #12
 800aaca:	ecbd 8b02 	vpop	{d8}
 800aace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aad2:	f003 030f 	and.w	r3, r3, #15
 800aad6:	3b01      	subs	r3, #1
 800aad8:	2b06      	cmp	r3, #6
 800aada:	d831      	bhi.n	800ab40 <PDM_Filter_setConfig+0x138>
 800aadc:	4a35      	ldr	r2, [pc, #212]	; (800abb4 <PDM_Filter_setConfig+0x1ac>)
 800aade:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800aae2:	eddf 0a35 	vldr	s1, [pc, #212]	; 800abb8 <PDM_Filter_setConfig+0x1b0>
 800aae6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aaea:	9001      	str	r0, [sp, #4]
 800aaec:	edd3 7a07 	vldr	s15, [r3, #28]
 800aaf0:	ed93 8a00 	vldr	s16, [r3]
 800aaf4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800aaf8:	f000 f8ca 	bl	800ac90 <powf>
 800aafc:	eef0 8a40 	vmov.f32	s17, s0
 800ab00:	9801      	ldr	r0, [sp, #4]
 800ab02:	ee07 7a90 	vmov	s15, r7
 800ab06:	ee28 8a28 	vmul.f32	s16, s16, s17
 800ab0a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ab0e:	9001      	str	r0, [sp, #4]
 800ab10:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800ab14:	eddf 7a29 	vldr	s15, [pc, #164]	; 800abbc <PDM_Filter_setConfig+0x1b4>
 800ab18:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ab1c:	f000 f8b8 	bl	800ac90 <powf>
 800ab20:	ee28 8a00 	vmul.f32	s16, s16, s0
 800ab24:	886b      	ldrh	r3, [r5, #2]
 800ab26:	9801      	ldr	r0, [sp, #4]
 800ab28:	feb8 8a48 	vrinta.f32	s16, s16
 800ab2c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800ab30:	8727      	strh	r7, [r4, #56]	; 0x38
 800ab32:	8663      	strh	r3, [r4, #50]	; 0x32
 800ab34:	8626      	strh	r6, [r4, #48]	; 0x30
 800ab36:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d0bf      	beq.n	800aabe <PDM_Filter_setConfig+0xb6>
 800ab3e:	e7a9      	b.n	800aa94 <PDM_Filter_setConfig+0x8c>
 800ab40:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800abc0 <PDM_Filter_setConfig+0x1b8>
 800ab44:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800abc4 <PDM_Filter_setConfig+0x1bc>
 800ab48:	e7db      	b.n	800ab02 <PDM_Filter_setConfig+0xfa>
 800ab4a:	4b1f      	ldr	r3, [pc, #124]	; (800abc8 <PDM_Filter_setConfig+0x1c0>)
 800ab4c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab4e:	e7a7      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab50:	4b1e      	ldr	r3, [pc, #120]	; (800abcc <PDM_Filter_setConfig+0x1c4>)
 800ab52:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab54:	e7a4      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab56:	4b1e      	ldr	r3, [pc, #120]	; (800abd0 <PDM_Filter_setConfig+0x1c8>)
 800ab58:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab5a:	e7a1      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab5c:	4b1d      	ldr	r3, [pc, #116]	; (800abd4 <PDM_Filter_setConfig+0x1cc>)
 800ab5e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab60:	e79e      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab62:	4b1d      	ldr	r3, [pc, #116]	; (800abd8 <PDM_Filter_setConfig+0x1d0>)
 800ab64:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab66:	e79b      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab68:	4b1c      	ldr	r3, [pc, #112]	; (800abdc <PDM_Filter_setConfig+0x1d4>)
 800ab6a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab6c:	e798      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab6e:	4b1c      	ldr	r3, [pc, #112]	; (800abe0 <PDM_Filter_setConfig+0x1d8>)
 800ab70:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab72:	e795      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab74:	4b1b      	ldr	r3, [pc, #108]	; (800abe4 <PDM_Filter_setConfig+0x1dc>)
 800ab76:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab78:	e792      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab7a:	4b1b      	ldr	r3, [pc, #108]	; (800abe8 <PDM_Filter_setConfig+0x1e0>)
 800ab7c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab7e:	e78f      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab80:	4b1a      	ldr	r3, [pc, #104]	; (800abec <PDM_Filter_setConfig+0x1e4>)
 800ab82:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab84:	e78c      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab86:	4b1a      	ldr	r3, [pc, #104]	; (800abf0 <PDM_Filter_setConfig+0x1e8>)
 800ab88:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab8a:	e789      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab8c:	4b19      	ldr	r3, [pc, #100]	; (800abf4 <PDM_Filter_setConfig+0x1ec>)
 800ab8e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab90:	e786      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab92:	4b19      	ldr	r3, [pc, #100]	; (800abf8 <PDM_Filter_setConfig+0x1f0>)
 800ab94:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab96:	e783      	b.n	800aaa0 <PDM_Filter_setConfig+0x98>
 800ab98:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ab9a:	42b3      	cmp	r3, r6
 800ab9c:	f47f af6e 	bne.w	800aa7c <PDM_Filter_setConfig+0x74>
 800aba0:	886b      	ldrh	r3, [r5, #2]
 800aba2:	2008      	movs	r0, #8
 800aba4:	8663      	strh	r3, [r4, #50]	; 0x32
 800aba6:	e775      	b.n	800aa94 <PDM_Filter_setConfig+0x8c>
 800aba8:	b5e8b5cd 	.word	0xb5e8b5cd
 800abac:	fffffef0 	.word	0xfffffef0
 800abb0:	08009d21 	.word	0x08009d21
 800abb4:	0800b000 	.word	0x0800b000
 800abb8:	42000000 	.word	0x42000000
 800abbc:	3d4ccccd 	.word	0x3d4ccccd
 800abc0:	4f800000 	.word	0x4f800000
 800abc4:	00000000 	.word	0x00000000
 800abc8:	0800912d 	.word	0x0800912d
 800abcc:	08008fb5 	.word	0x08008fb5
 800abd0:	08008ea5 	.word	0x08008ea5
 800abd4:	08009969 	.word	0x08009969
 800abd8:	080096d1 	.word	0x080096d1
 800abdc:	08009499 	.word	0x08009499
 800abe0:	080092b5 	.word	0x080092b5
 800abe4:	08009f3d 	.word	0x08009f3d
 800abe8:	08009e01 	.word	0x08009e01
 800abec:	0800a57d 	.word	0x0800a57d
 800abf0:	0800a381 	.word	0x0800a381
 800abf4:	0800a1d5 	.word	0x0800a1d5
 800abf8:	0800a069 	.word	0x0800a069

0800abfc <__errno>:
 800abfc:	4b01      	ldr	r3, [pc, #4]	; (800ac04 <__errno+0x8>)
 800abfe:	6818      	ldr	r0, [r3, #0]
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	2400041c 	.word	0x2400041c

0800ac08 <__libc_init_array>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	4d0d      	ldr	r5, [pc, #52]	; (800ac40 <__libc_init_array+0x38>)
 800ac0c:	4c0d      	ldr	r4, [pc, #52]	; (800ac44 <__libc_init_array+0x3c>)
 800ac0e:	1b64      	subs	r4, r4, r5
 800ac10:	10a4      	asrs	r4, r4, #2
 800ac12:	2600      	movs	r6, #0
 800ac14:	42a6      	cmp	r6, r4
 800ac16:	d109      	bne.n	800ac2c <__libc_init_array+0x24>
 800ac18:	4d0b      	ldr	r5, [pc, #44]	; (800ac48 <__libc_init_array+0x40>)
 800ac1a:	4c0c      	ldr	r4, [pc, #48]	; (800ac4c <__libc_init_array+0x44>)
 800ac1c:	f000 f9e4 	bl	800afe8 <_init>
 800ac20:	1b64      	subs	r4, r4, r5
 800ac22:	10a4      	asrs	r4, r4, #2
 800ac24:	2600      	movs	r6, #0
 800ac26:	42a6      	cmp	r6, r4
 800ac28:	d105      	bne.n	800ac36 <__libc_init_array+0x2e>
 800ac2a:	bd70      	pop	{r4, r5, r6, pc}
 800ac2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac30:	4798      	blx	r3
 800ac32:	3601      	adds	r6, #1
 800ac34:	e7ee      	b.n	800ac14 <__libc_init_array+0xc>
 800ac36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac3a:	4798      	blx	r3
 800ac3c:	3601      	adds	r6, #1
 800ac3e:	e7f2      	b.n	800ac26 <__libc_init_array+0x1e>
 800ac40:	0800b2c8 	.word	0x0800b2c8
 800ac44:	0800b2c8 	.word	0x0800b2c8
 800ac48:	0800b2c8 	.word	0x0800b2c8
 800ac4c:	0800b2cc 	.word	0x0800b2cc

0800ac50 <memset>:
 800ac50:	4402      	add	r2, r0
 800ac52:	4603      	mov	r3, r0
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d100      	bne.n	800ac5a <memset+0xa>
 800ac58:	4770      	bx	lr
 800ac5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac5e:	e7f9      	b.n	800ac54 <memset+0x4>

0800ac60 <checkint>:
 800ac60:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ac64:	2b7e      	cmp	r3, #126	; 0x7e
 800ac66:	dd10      	ble.n	800ac8a <checkint+0x2a>
 800ac68:	2b96      	cmp	r3, #150	; 0x96
 800ac6a:	dc0c      	bgt.n	800ac86 <checkint+0x26>
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ac72:	fa02 f303 	lsl.w	r3, r2, r3
 800ac76:	1e5a      	subs	r2, r3, #1
 800ac78:	4202      	tst	r2, r0
 800ac7a:	d106      	bne.n	800ac8a <checkint+0x2a>
 800ac7c:	4203      	tst	r3, r0
 800ac7e:	bf0c      	ite	eq
 800ac80:	2002      	moveq	r0, #2
 800ac82:	2001      	movne	r0, #1
 800ac84:	4770      	bx	lr
 800ac86:	2002      	movs	r0, #2
 800ac88:	4770      	bx	lr
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	4770      	bx	lr
	...

0800ac90 <powf>:
 800ac90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac92:	ee10 1a10 	vmov	r1, s0
 800ac96:	ee10 6a90 	vmov	r6, s1
 800ac9a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800ac9e:	0072      	lsls	r2, r6, #1
 800aca0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800aca4:	b085      	sub	sp, #20
 800aca6:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800acaa:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800acae:	d256      	bcs.n	800ad5e <powf+0xce>
 800acb0:	4298      	cmp	r0, r3
 800acb2:	d256      	bcs.n	800ad62 <powf+0xd2>
 800acb4:	2000      	movs	r0, #0
 800acb6:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800acba:	4ea3      	ldr	r6, [pc, #652]	; (800af48 <powf+0x2b8>)
 800acbc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800acc0:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800acc4:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800acc8:	0dd2      	lsrs	r2, r2, #23
 800acca:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800acce:	05d2      	lsls	r2, r2, #23
 800acd0:	1a8b      	subs	r3, r1, r2
 800acd2:	ed97 5b00 	vldr	d5, [r7]
 800acd6:	ee07 3a90 	vmov	s15, r3
 800acda:	15d2      	asrs	r2, r2, #23
 800acdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ace0:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ace4:	ed97 5b02 	vldr	d5, [r7, #8]
 800ace8:	ee26 2b06 	vmul.f64	d2, d6, d6
 800acec:	ee22 1b02 	vmul.f64	d1, d2, d2
 800acf0:	ee07 2a90 	vmov	s15, r2
 800acf4:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800acf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800acfc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ad00:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800ad04:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800ad08:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ad0c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800ad10:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ad14:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800ad18:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800ad1c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ad20:	eea2 7b04 	vfma.f64	d7, d2, d4
 800ad24:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ad28:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ad2c:	ee10 1a90 	vmov	r1, s1
 800ad30:	2300      	movs	r3, #0
 800ad32:	2700      	movs	r7, #0
 800ad34:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800ad38:	f248 06be 	movw	r6, #32958	; 0x80be
 800ad3c:	429f      	cmp	r7, r3
 800ad3e:	bf08      	it	eq
 800ad40:	4296      	cmpeq	r6, r2
 800ad42:	f080 80b1 	bcs.w	800aea8 <powf+0x218>
 800ad46:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800af28 <powf+0x298>
 800ad4a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ad4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad52:	dd79      	ble.n	800ae48 <powf+0x1b8>
 800ad54:	b005      	add	sp, #20
 800ad56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ad5a:	f000 b91f 	b.w	800af9c <__math_oflowf>
 800ad5e:	4298      	cmp	r0, r3
 800ad60:	d32d      	bcc.n	800adbe <powf+0x12e>
 800ad62:	b952      	cbnz	r2, 800ad7a <powf+0xea>
 800ad64:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800ad68:	005b      	lsls	r3, r3, #1
 800ad6a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800ad6e:	f240 80cd 	bls.w	800af0c <powf+0x27c>
 800ad72:	ee30 0a20 	vadd.f32	s0, s0, s1
 800ad76:	b005      	add	sp, #20
 800ad78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad7a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ad7e:	d105      	bne.n	800ad8c <powf+0xfc>
 800ad80:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800ad84:	0076      	lsls	r6, r6, #1
 800ad86:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ad8a:	e7f0      	b.n	800ad6e <powf+0xde>
 800ad8c:	004b      	lsls	r3, r1, #1
 800ad8e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800ad92:	d8ee      	bhi.n	800ad72 <powf+0xe2>
 800ad94:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800ad98:	d1eb      	bne.n	800ad72 <powf+0xe2>
 800ad9a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ad9e:	f000 80b5 	beq.w	800af0c <powf+0x27c>
 800ada2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ada6:	ea6f 0606 	mvn.w	r6, r6
 800adaa:	bf34      	ite	cc
 800adac:	2300      	movcc	r3, #0
 800adae:	2301      	movcs	r3, #1
 800adb0:	0ff6      	lsrs	r6, r6, #31
 800adb2:	42b3      	cmp	r3, r6
 800adb4:	f040 80ad 	bne.w	800af12 <powf+0x282>
 800adb8:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800adbc:	e7db      	b.n	800ad76 <powf+0xe6>
 800adbe:	004f      	lsls	r7, r1, #1
 800adc0:	1e7a      	subs	r2, r7, #1
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d31c      	bcc.n	800ae00 <powf+0x170>
 800adc6:	2900      	cmp	r1, #0
 800adc8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800adcc:	da0f      	bge.n	800adee <powf+0x15e>
 800adce:	ee10 0a90 	vmov	r0, s1
 800add2:	f7ff ff45 	bl	800ac60 <checkint>
 800add6:	2801      	cmp	r0, #1
 800add8:	d109      	bne.n	800adee <powf+0x15e>
 800adda:	eeb1 0a40 	vneg.f32	s0, s0
 800adde:	b947      	cbnz	r7, 800adf2 <powf+0x162>
 800ade0:	2e00      	cmp	r6, #0
 800ade2:	dac8      	bge.n	800ad76 <powf+0xe6>
 800ade4:	b005      	add	sp, #20
 800ade6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800adea:	f000 b8dd 	b.w	800afa8 <__math_divzerof>
 800adee:	2000      	movs	r0, #0
 800adf0:	e7f5      	b.n	800adde <powf+0x14e>
 800adf2:	2e00      	cmp	r6, #0
 800adf4:	dabf      	bge.n	800ad76 <powf+0xe6>
 800adf6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800adfa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800adfe:	e7ba      	b.n	800ad76 <powf+0xe6>
 800ae00:	2900      	cmp	r1, #0
 800ae02:	da1f      	bge.n	800ae44 <powf+0x1b4>
 800ae04:	ee10 0a90 	vmov	r0, s1
 800ae08:	f7ff ff2a 	bl	800ac60 <checkint>
 800ae0c:	b920      	cbnz	r0, 800ae18 <powf+0x188>
 800ae0e:	b005      	add	sp, #20
 800ae10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ae14:	f000 b8d8 	b.w	800afc8 <__math_invalidf>
 800ae18:	2801      	cmp	r0, #1
 800ae1a:	bf14      	ite	ne
 800ae1c:	2000      	movne	r0, #0
 800ae1e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800ae22:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae26:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800ae2a:	f4bf af44 	bcs.w	800acb6 <powf+0x26>
 800ae2e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800af4c <powf+0x2bc>
 800ae32:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ae36:	ee10 3a10 	vmov	r3, s0
 800ae3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae3e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800ae42:	e738      	b.n	800acb6 <powf+0x26>
 800ae44:	2000      	movs	r0, #0
 800ae46:	e7ee      	b.n	800ae26 <powf+0x196>
 800ae48:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800af30 <powf+0x2a0>
 800ae4c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ae50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae54:	dd10      	ble.n	800ae78 <powf+0x1e8>
 800ae56:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d15c      	bne.n	800af18 <powf+0x288>
 800ae5e:	9302      	str	r3, [sp, #8]
 800ae60:	eddd 7a02 	vldr	s15, [sp, #8]
 800ae64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae68:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae6c:	eef4 7a47 	vcmp.f32	s15, s14
 800ae70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae74:	f47f af6e 	bne.w	800ad54 <powf+0xc4>
 800ae78:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800af38 <powf+0x2a8>
 800ae7c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ae80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae84:	d804      	bhi.n	800ae90 <powf+0x200>
 800ae86:	b005      	add	sp, #20
 800ae88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ae8c:	f000 b87a 	b.w	800af84 <__math_uflowf>
 800ae90:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800af40 <powf+0x2b0>
 800ae94:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ae98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae9c:	d504      	bpl.n	800aea8 <powf+0x218>
 800ae9e:	b005      	add	sp, #20
 800aea0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aea4:	f000 b874 	b.w	800af90 <__math_may_uflowf>
 800aea8:	4b29      	ldr	r3, [pc, #164]	; (800af50 <powf+0x2c0>)
 800aeaa:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800aeae:	ee30 6b07 	vadd.f64	d6, d0, d7
 800aeb2:	ed8d 6b00 	vstr	d6, [sp]
 800aeb6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800aeba:	ee30 7b47 	vsub.f64	d7, d0, d7
 800aebe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aec2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800aec6:	f006 011f 	and.w	r1, r6, #31
 800aeca:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800aece:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800aed2:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800aed6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800aeda:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800aede:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aee2:	ee27 5b07 	vmul.f64	d5, d7, d7
 800aee6:	1836      	adds	r6, r6, r0
 800aee8:	2300      	movs	r3, #0
 800aeea:	eb13 040c 	adds.w	r4, r3, ip
 800aeee:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800aef2:	eb41 050e 	adc.w	r5, r1, lr
 800aef6:	eea7 0b04 	vfma.f64	d0, d7, d4
 800aefa:	ec45 4b17 	vmov	d7, r4, r5
 800aefe:	eea6 0b05 	vfma.f64	d0, d6, d5
 800af02:	ee20 0b07 	vmul.f64	d0, d0, d7
 800af06:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800af0a:	e734      	b.n	800ad76 <powf+0xe6>
 800af0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800af10:	e731      	b.n	800ad76 <powf+0xe6>
 800af12:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800af54 <powf+0x2c4>
 800af16:	e72e      	b.n	800ad76 <powf+0xe6>
 800af18:	9303      	str	r3, [sp, #12]
 800af1a:	eddd 7a03 	vldr	s15, [sp, #12]
 800af1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800af22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af26:	e7a1      	b.n	800ae6c <powf+0x1dc>
 800af28:	ffd1d571 	.word	0xffd1d571
 800af2c:	405fffff 	.word	0x405fffff
 800af30:	ffa3aae2 	.word	0xffa3aae2
 800af34:	405fffff 	.word	0x405fffff
 800af38:	00000000 	.word	0x00000000
 800af3c:	c062c000 	.word	0xc062c000
 800af40:	00000000 	.word	0x00000000
 800af44:	c062a000 	.word	0xc062a000
 800af48:	0800b058 	.word	0x0800b058
 800af4c:	4b000000 	.word	0x4b000000
 800af50:	0800b180 	.word	0x0800b180
 800af54:	00000000 	.word	0x00000000

0800af58 <with_errnof>:
 800af58:	b513      	push	{r0, r1, r4, lr}
 800af5a:	4604      	mov	r4, r0
 800af5c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800af60:	f7ff fe4c 	bl	800abfc <__errno>
 800af64:	ed9d 0a01 	vldr	s0, [sp, #4]
 800af68:	6004      	str	r4, [r0, #0]
 800af6a:	b002      	add	sp, #8
 800af6c:	bd10      	pop	{r4, pc}

0800af6e <xflowf>:
 800af6e:	b130      	cbz	r0, 800af7e <xflowf+0x10>
 800af70:	eef1 7a40 	vneg.f32	s15, s0
 800af74:	ee27 0a80 	vmul.f32	s0, s15, s0
 800af78:	2022      	movs	r0, #34	; 0x22
 800af7a:	f7ff bfed 	b.w	800af58 <with_errnof>
 800af7e:	eef0 7a40 	vmov.f32	s15, s0
 800af82:	e7f7      	b.n	800af74 <xflowf+0x6>

0800af84 <__math_uflowf>:
 800af84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af8c <__math_uflowf+0x8>
 800af88:	f7ff bff1 	b.w	800af6e <xflowf>
 800af8c:	10000000 	.word	0x10000000

0800af90 <__math_may_uflowf>:
 800af90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af98 <__math_may_uflowf+0x8>
 800af94:	f7ff bfeb 	b.w	800af6e <xflowf>
 800af98:	1a200000 	.word	0x1a200000

0800af9c <__math_oflowf>:
 800af9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800afa4 <__math_oflowf+0x8>
 800afa0:	f7ff bfe5 	b.w	800af6e <xflowf>
 800afa4:	70000000 	.word	0x70000000

0800afa8 <__math_divzerof>:
 800afa8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800afac:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800afb0:	2800      	cmp	r0, #0
 800afb2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800afb6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800afc4 <__math_divzerof+0x1c>
 800afba:	2022      	movs	r0, #34	; 0x22
 800afbc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800afc0:	f7ff bfca 	b.w	800af58 <with_errnof>
 800afc4:	00000000 	.word	0x00000000

0800afc8 <__math_invalidf>:
 800afc8:	eef0 7a40 	vmov.f32	s15, s0
 800afcc:	ee30 7a40 	vsub.f32	s14, s0, s0
 800afd0:	eef4 7a67 	vcmp.f32	s15, s15
 800afd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800afdc:	d602      	bvs.n	800afe4 <__math_invalidf+0x1c>
 800afde:	2021      	movs	r0, #33	; 0x21
 800afe0:	f7ff bfba 	b.w	800af58 <with_errnof>
 800afe4:	4770      	bx	lr
	...

0800afe8 <_init>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	bf00      	nop
 800afec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afee:	bc08      	pop	{r3}
 800aff0:	469e      	mov	lr, r3
 800aff2:	4770      	bx	lr

0800aff4 <_fini>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	bf00      	nop
 800aff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affa:	bc08      	pop	{r3}
 800affc:	469e      	mov	lr, r3
 800affe:	4770      	bx	lr
