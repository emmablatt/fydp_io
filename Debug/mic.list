
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800bc90  0800bc90  0001bc90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bfc8  0800bfc8  0001bfc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800bfcc  0800bfcc  0001bfcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000474  24000000  0800bfd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009e4  24000474  0800c444  00020474  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000e58  0800c444  00020e58  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  9 .debug_info   000222ad  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003217  00000000  00000000  0004274f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f68  00000000  00000000  00045968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000e68  00000000  00000000  000468d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000387e  00000000  00000000  00047738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000153e3  00000000  00000000  0004afb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150bf8  00000000  00000000  00060399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001b0f91  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000411c  00000000  00000000  001b1064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bc78 	.word	0x0800bc78

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	0800bc78 	.word	0x0800bc78

08000310 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI confiruration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800031a:	2300      	movs	r3, #0
 800031c:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800032c:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	68da      	ldr	r2, [r3, #12]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	685a      	ldr	r2, [r3, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2200      	movs	r2, #0
 8000350:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2200      	movs	r2, #0
 800035e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	691a      	ldr	r2, [r3, #16]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	695a      	ldr	r2, [r3, #20]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	699a      	ldr	r2, [r3, #24]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2201      	movs	r2, #1
 800037c:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	69da      	ldr	r2, [r3, #28]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2200      	movs	r2, #0
 800038a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2200      	movs	r2, #0
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv               = 0;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2200      	movs	r2, #0
 8000396:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_ENABLE;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800039e:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2200      	movs	r2, #0
 80003a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation   = DISABLE;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	6a1a      	ldr	r2, [r3, #32]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2200      	movs	r2, #0
 80003ca:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2200      	movs	r2, #0
 80003d8:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	2b18      	cmp	r3, #24
 80003e0:	d003      	beq.n	80003ea <MX_SAI1_Block_B_Init+0xda>
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	2b20      	cmp	r3, #32
 80003e8:	d103      	bne.n	80003f2 <MX_SAI1_Block_B_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2280      	movs	r2, #128	; 0x80
 80003ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80003f0:	e002      	b.n	80003f8 <MX_SAI1_Block_B_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2240      	movs	r2, #64	; 0x40
 80003f6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 4;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2204      	movs	r2, #4
 80003fc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f008 fb02 	bl	8008a10 <HAL_SAI_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_SAI1_Block_B_Init+0x106>
  {
    ret = HAL_ERROR;
 8000412:	2301      	movs	r3, #1
 8000414:	73fb      	strb	r3, [r7, #15]
  }
  __HAL_SAI_ENABLE(hsai);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000424:	601a      	str	r2, [r3, #0]

  return ret;
 8000426:	7bfb      	ldrb	r3, [r7, #15]
}
 8000428:	4618      	mov	r0, r3
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b0b0      	sub	sp, #192	; 0xc0
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	4618      	mov	r0, r3
 8000440:	f007 f800 	bl	8007444 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	f642 3211 	movw	r2, #11025	; 0x2b11
 800044a:	4293      	cmp	r3, r2
 800044c:	d009      	beq.n	8000462 <MX_SAI1_ClockConfig+0x32>
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	f245 6222 	movw	r2, #22050	; 0x5622
 8000454:	4293      	cmp	r3, r2
 8000456:	d004      	beq.n	8000462 <MX_SAI1_ClockConfig+0x32>
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800045e:	4293      	cmp	r3, r2
 8000460:	d104      	bne.n	800046c <MX_SAI1_ClockConfig+0x3c>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 36;
 8000462:	2324      	movs	r3, #36	; 0x24
 8000464:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 36;
 8000466:	2324      	movs	r3, #36	; 0x24
 8000468:	61fb      	str	r3, [r7, #28]
 800046a:	e003      	b.n	8000474 <MX_SAI1_ClockConfig+0x44>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 8;
 800046c:	2308      	movs	r3, #8
 800046e:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 8;
 8000470:	2308      	movs	r3, #8
 8000472:	61fb      	str	r3, [r7, #28]
  }
  rcc_ex_clk_init_struct.PLL2.PLL2N = 80;
 8000474:	2350      	movs	r3, #80	; 0x50
 8000476:	617b      	str	r3, [r7, #20]

  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800047c:	60fb      	str	r3, [r7, #12]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800047e:	2301      	movs	r3, #1
 8000480:	663b      	str	r3, [r7, #96]	; 0x60
  rcc_ex_clk_init_struct.PLL2.PLL2R = 2;
 8000482:	2302      	movs	r3, #2
 8000484:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 5;
 8000486:	2305      	movs	r3, #5
 8000488:	613b      	str	r3, [r7, #16]
  rcc_ex_clk_init_struct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800048a:	2300      	movs	r3, #0
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
  rcc_ex_clk_init_struct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800048e:	2320      	movs	r3, #32
 8000490:	62bb      	str	r3, [r7, #40]	; 0x28
  rcc_ex_clk_init_struct.PLL2.PLL2FRACN = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
  return HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000496:	f107 030c 	add.w	r3, r7, #12
 800049a:	4618      	mov	r0, r3
 800049c:	f006 f8d8 	bl	8006650 <HAL_RCCEx_PeriphCLKConfig>
 80004a0:	4603      	mov	r3, r0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	37c0      	adds	r7, #192	; 0xc0
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
	...

080004c0 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b096      	sub	sp, #88	; 0x58
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;
    /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80004c8:	4b61      	ldr	r3, [pc, #388]	; (8000650 <SAI_MspInit+0x190>)
 80004ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80004ce:	4a60      	ldr	r2, [pc, #384]	; (8000650 <SAI_MspInit+0x190>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80004d8:	4b5d      	ldr	r3, [pc, #372]	; (8000650 <SAI_MspInit+0x190>)
 80004da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80004de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e2:	643b      	str	r3, [r7, #64]	; 0x40
 80004e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80004e6:	4b5a      	ldr	r3, [pc, #360]	; (8000650 <SAI_MspInit+0x190>)
 80004e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ec:	4a58      	ldr	r2, [pc, #352]	; (8000650 <SAI_MspInit+0x190>)
 80004ee:	f043 0320 	orr.w	r3, r3, #32
 80004f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004f6:	4b56      	ldr	r3, [pc, #344]	; (8000650 <SAI_MspInit+0x190>)
 80004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004fc:	f003 0320 	and.w	r3, r3, #32
 8000500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  AUDIO_OUT_SAIx_SCK_ENABLE();
 8000504:	4b52      	ldr	r3, [pc, #328]	; (8000650 <SAI_MspInit+0x190>)
 8000506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050a:	4a51      	ldr	r2, [pc, #324]	; (8000650 <SAI_MspInit+0x190>)
 800050c:	f043 0320 	orr.w	r3, r3, #32
 8000510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000514:	4b4e      	ldr	r3, [pc, #312]	; (8000650 <SAI_MspInit+0x190>)
 8000516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051a:	f003 0320 	and.w	r3, r3, #32
 800051e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  AUDIO_OUT_SAIx_SD_ENABLE();
 8000522:	4b4b      	ldr	r3, [pc, #300]	; (8000650 <SAI_MspInit+0x190>)
 8000524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000528:	4a49      	ldr	r2, [pc, #292]	; (8000650 <SAI_MspInit+0x190>)
 800052a:	f043 0320 	orr.w	r3, r3, #32
 800052e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000532:	4b47      	ldr	r3, [pc, #284]	; (8000650 <SAI_MspInit+0x190>)
 8000534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
 800053e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  AUDIO_OUT_SAIx_FS_ENABLE();
 8000540:	4b43      	ldr	r3, [pc, #268]	; (8000650 <SAI_MspInit+0x190>)
 8000542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000546:	4a42      	ldr	r2, [pc, #264]	; (8000650 <SAI_MspInit+0x190>)
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000550:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <SAI_MspInit+0x190>)
 8000552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
 800055c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800055e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056c:	2303      	movs	r3, #3
 800056e:	653b      	str	r3, [r7, #80]	; 0x50
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 8000570:	2306      	movs	r3, #6
 8000572:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8000574:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000578:	4619      	mov	r1, r3
 800057a:	4836      	ldr	r0, [pc, #216]	; (8000654 <SAI_MspInit+0x194>)
 800057c:	f004 fe58 	bl	8005230 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8000586:	2306      	movs	r3, #6
 8000588:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 800058a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800058e:	4619      	mov	r1, r3
 8000590:	4830      	ldr	r0, [pc, #192]	; (8000654 <SAI_MspInit+0x194>)
 8000592:	f004 fe4d 	bl	8005230 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8000596:	2340      	movs	r3, #64	; 0x40
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 800059a:	2306      	movs	r3, #6
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800059e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005a2:	4619      	mov	r1, r3
 80005a4:	482b      	ldr	r0, [pc, #172]	; (8000654 <SAI_MspInit+0x194>)
 80005a6:	f004 fe43 	bl	8005230 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a2a      	ldr	r2, [pc, #168]	; (8000658 <SAI_MspInit+0x198>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d01e      	beq.n	80005f2 <SAI_MspInit+0x132>
    {
      if(haudio_in_sai[0].State != HAL_SAI_STATE_READY)
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <SAI_MspInit+0x19c>)
 80005b6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d018      	beq.n	80005f2 <SAI_MspInit+0x132>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SAI_MspInit+0x190>)
 80005c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c6:	4a22      	ldr	r2, [pc, #136]	; (8000650 <SAI_MspInit+0x190>)
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SAI_MspInit+0x190>)
 80005d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 80005e2:	2306      	movs	r3, #6
 80005e4:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80005e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005ea:	4619      	mov	r1, r3
 80005ec:	4819      	ldr	r0, [pc, #100]	; (8000654 <SAI_MspInit+0x194>)
 80005ee:	f004 fe1f 	bl	8005230 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <SAI_MspInit+0x1a0>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d16b      	bne.n	80006d4 <SAI_MspInit+0x214>
  {
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <SAI_MspInit+0x190>)
 80005fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <SAI_MspInit+0x190>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <SAI_MspInit+0x190>)
 800060e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
 8000618:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <SAI_MspInit+0x1a4>)
 800061c:	2258      	movs	r2, #88	; 0x58
 800061e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <SAI_MspInit+0x1a4>)
 8000622:	2240      	movs	r2, #64	; 0x40
 8000624:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <SAI_MspInit+0x1a4>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <SAI_MspInit+0x1a4>)
 800062e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000632:	611a      	str	r2, [r3, #16]
    if (Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <SAI_MspInit+0x1a8>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	2b10      	cmp	r3, #16
 800063a:	d117      	bne.n	800066c <SAI_MspInit+0x1ac>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <SAI_MspInit+0x1a4>)
 800063e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000642:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <SAI_MspInit+0x1a4>)
 8000646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800064a:	619a      	str	r2, [r3, #24]
 800064c:	e016      	b.n	800067c <SAI_MspInit+0x1bc>
 800064e:	bf00      	nop
 8000650:	58024400 	.word	0x58024400
 8000654:	58021400 	.word	0x58021400
 8000658:	58005404 	.word	0x58005404
 800065c:	2400054c 	.word	0x2400054c
 8000660:	40015824 	.word	0x40015824
 8000664:	2400093c 	.word	0x2400093c
 8000668:	24000c8c 	.word	0x24000c8c
    }
    else /* AUDIO_RESOLUTION_32B */
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800066c:	4b53      	ldr	r3, [pc, #332]	; (80007bc <SAI_MspInit+0x2fc>)
 800066e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000672:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000674:	4b51      	ldr	r3, [pc, #324]	; (80007bc <SAI_MspInit+0x2fc>)
 8000676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800067a:	619a      	str	r2, [r3, #24]
    }
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800067c:	4b4f      	ldr	r3, [pc, #316]	; (80007bc <SAI_MspInit+0x2fc>)
 800067e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000682:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000684:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <SAI_MspInit+0x2fc>)
 8000686:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800068a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800068c:	4b4b      	ldr	r3, [pc, #300]	; (80007bc <SAI_MspInit+0x2fc>)
 800068e:	2204      	movs	r2, #4
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000692:	4b4a      	ldr	r3, [pc, #296]	; (80007bc <SAI_MspInit+0x2fc>)
 8000694:	2203      	movs	r2, #3
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000698:	4b48      	ldr	r3, [pc, #288]	; (80007bc <SAI_MspInit+0x2fc>)
 800069a:	2200      	movs	r2, #0
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800069e:	4b47      	ldr	r3, [pc, #284]	; (80007bc <SAI_MspInit+0x2fc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <SAI_MspInit+0x2fc>)
 80006a6:	4a46      	ldr	r2, [pc, #280]	; (80007c0 <SAI_MspInit+0x300>)
 80006a8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a43      	ldr	r2, [pc, #268]	; (80007bc <SAI_MspInit+0x2fc>)
 80006ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80006b2:	4a42      	ldr	r2, [pc, #264]	; (80007bc <SAI_MspInit+0x2fc>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 80006b8:	4840      	ldr	r0, [pc, #256]	; (80007bc <SAI_MspInit+0x2fc>)
 80006ba:	f002 fd37 	bl	800312c <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 80006be:	483f      	ldr	r0, [pc, #252]	; (80007bc <SAI_MspInit+0x2fc>)
 80006c0:	f002 f9da 	bl	8002a78 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	210e      	movs	r1, #14
 80006c8:	2045      	movs	r0, #69	; 0x45
 80006ca:	f001 fe68 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80006ce:	2045      	movs	r0, #69	; 0x45
 80006d0:	f001 fe7f 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a3a      	ldr	r2, [pc, #232]	; (80007c4 <SAI_MspInit+0x304>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	f040 809b 	bne.w	8000816 <SAI_MspInit+0x356>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 80006e0:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <SAI_MspInit+0x308>)
 80006e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006e6:	4a38      	ldr	r2, [pc, #224]	; (80007c8 <SAI_MspInit+0x308>)
 80006e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80006f0:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <SAI_MspInit+0x308>)
 80006f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 80006fe:	4b32      	ldr	r3, [pc, #200]	; (80007c8 <SAI_MspInit+0x308>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	4a30      	ldr	r2, [pc, #192]	; (80007c8 <SAI_MspInit+0x308>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070e:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <SAI_MspInit+0x308>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000714:	f003 0310 	and.w	r3, r3, #16
 8000718:	623b      	str	r3, [r7, #32]
 800071a:	6a3b      	ldr	r3, [r7, #32]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000728:	2302      	movs	r3, #2
 800072a:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800072c:	2306      	movs	r3, #6
 800072e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000730:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000734:	4619      	mov	r1, r3
 8000736:	4825      	ldr	r0, [pc, #148]	; (80007cc <SAI_MspInit+0x30c>)
 8000738:	f004 fd7a 	bl	8005230 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SAI_MspInit+0x308>)
 800073e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000742:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SAI_MspInit+0x308>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <SAI_MspInit+0x308>)
 800074e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Instance                 = AUDIO_IN_SAIx_DMAx_STREAM;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <SAI_MspInit+0x310>)
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <SAI_MspInit+0x314>)
 800075e:	601a      	str	r2, [r3, #0]
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <SAI_MspInit+0x310>)
 8000762:	2257      	movs	r2, #87	; 0x57
 8000764:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <SAI_MspInit+0x310>)
 8000768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076c:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <SAI_MspInit+0x310>)
 8000770:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000774:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <SAI_MspInit+0x310>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <SAI_MspInit+0x310>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <SAI_MspInit+0x310>)
 8000784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000788:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <SAI_MspInit+0x310>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <SAI_MspInit+0x310>)
 8000792:	2203      	movs	r2, #3
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <SAI_MspInit+0x310>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <SAI_MspInit+0x310>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30

    if(Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <SAI_MspInit+0x318>)
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	2b10      	cmp	r3, #16
 80007a8:	d118      	bne.n	80007dc <SAI_MspInit+0x31c>
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <SAI_MspInit+0x310>)
 80007ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007b0:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <SAI_MspInit+0x310>)
 80007b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b8:	619a      	str	r2, [r3, #24]
 80007ba:	e017      	b.n	80007ec <SAI_MspInit+0x32c>
 80007bc:	2400093c 	.word	0x2400093c
 80007c0:	400204a0 	.word	0x400204a0
 80007c4:	40015804 	.word	0x40015804
 80007c8:	58024400 	.word	0x58024400
 80007cc:	58021000 	.word	0x58021000
 80007d0:	240009b4 	.word	0x240009b4
 80007d4:	40020470 	.word	0x40020470
 80007d8:	24000cb0 	.word	0x24000cb0
    }
    else
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007dc:	4b67      	ldr	r3, [pc, #412]	; (800097c <SAI_MspInit+0x4bc>)
 80007de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e2:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80007e4:	4b65      	ldr	r3, [pc, #404]	; (800097c <SAI_MspInit+0x4bc>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ea:	619a      	str	r2, [r3, #24]
    }

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a63      	ldr	r2, [pc, #396]	; (800097c <SAI_MspInit+0x4bc>)
 80007f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80007f4:	4a61      	ldr	r2, [pc, #388]	; (800097c <SAI_MspInit+0x4bc>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_rx);
 80007fa:	4860      	ldr	r0, [pc, #384]	; (800097c <SAI_MspInit+0x4bc>)
 80007fc:	f002 fc96 	bl	800312c <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_rx);
 8000800:	485e      	ldr	r0, [pc, #376]	; (800097c <SAI_MspInit+0x4bc>)
 8000802:	f002 f939 	bl	8002a78 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	210f      	movs	r1, #15
 800080a:	203c      	movs	r0, #60	; 0x3c
 800080c:	f001 fdc7 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000810:	203c      	movs	r0, #60	; 0x3c
 8000812:	f001 fdde 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  }

  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a59      	ldr	r2, [pc, #356]	; (8000980 <SAI_MspInit+0x4c0>)
 800081c:	4293      	cmp	r3, r2
 800081e:	f040 80a9 	bne.w	8000974 <SAI_MspInit+0x4b4>
  {
     /* Enable SAI clock */
    AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8000822:	4b58      	ldr	r3, [pc, #352]	; (8000984 <SAI_MspInit+0x4c4>)
 8000824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000828:	4a56      	ldr	r2, [pc, #344]	; (8000984 <SAI_MspInit+0x4c4>)
 800082a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000832:	4b54      	ldr	r3, [pc, #336]	; (8000984 <SAI_MspInit+0x4c4>)
 8000834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	69bb      	ldr	r3, [r7, #24]
    AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 8000840:	4b50      	ldr	r3, [pc, #320]	; (8000984 <SAI_MspInit+0x4c4>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	4a4f      	ldr	r2, [pc, #316]	; (8000984 <SAI_MspInit+0x4c4>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000850:	4b4c      	ldr	r3, [pc, #304]	; (8000984 <SAI_MspInit+0x4c4>)
 8000852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
    AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 800085e:	4b49      	ldr	r3, [pc, #292]	; (8000984 <SAI_MspInit+0x4c4>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	4a47      	ldr	r2, [pc, #284]	; (8000984 <SAI_MspInit+0x4c4>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086e:	4b45      	ldr	r3, [pc, #276]	; (8000984 <SAI_MspInit+0x4c4>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	693b      	ldr	r3, [r7, #16]

    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 800087c:	2304      	movs	r3, #4
 800087e:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000888:	2302      	movs	r3, #2
 800088a:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 800088c:	230a      	movs	r3, #10
 800088e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 8000890:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000894:	4619      	mov	r1, r3
 8000896:	483c      	ldr	r0, [pc, #240]	; (8000988 <SAI_MspInit+0x4c8>)
 8000898:	f004 fcca 	bl	8005230 <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 800089c:	2301      	movs	r3, #1
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008a0:	2301      	movs	r3, #1
 80008a2:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 80008a4:	2302      	movs	r3, #2
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 80008a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008ac:	4619      	mov	r1, r3
 80008ae:	4837      	ldr	r0, [pc, #220]	; (800098c <SAI_MspInit+0x4cc>)
 80008b0:	f004 fcbe 	bl	8005230 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 80008b4:	4b33      	ldr	r3, [pc, #204]	; (8000984 <SAI_MspInit+0x4c4>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ba:	4a32      	ldr	r2, [pc, #200]	; (8000984 <SAI_MspInit+0x4c4>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c4:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <SAI_MspInit+0x4c4>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 80008d2:	2330      	movs	r3, #48	; 0x30
 80008d4:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80008de:	2302      	movs	r3, #2
 80008e0:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 80008e2:	2308      	movs	r3, #8
 80008e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 80008e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008ea:	4619      	mov	r1, r3
 80008ec:	4826      	ldr	r0, [pc, #152]	; (8000988 <SAI_MspInit+0x4c8>)
 80008ee:	f004 fc9f 	bl	8005230 <HAL_GPIO_Init>


    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <SAI_MspInit+0x4bc>)
 80008f4:	220f      	movs	r2, #15
 80008f6:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80008f8:	4b20      	ldr	r3, [pc, #128]	; (800097c <SAI_MspInit+0x4bc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <SAI_MspInit+0x4bc>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <SAI_MspInit+0x4bc>)
 8000906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090a:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <SAI_MspInit+0x4bc>)
 800090e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000912:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <SAI_MspInit+0x4bc>)
 8000916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091a:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <SAI_MspInit+0x4bc>)
 800091e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000922:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <SAI_MspInit+0x4bc>)
 8000926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800092a:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <SAI_MspInit+0x4bc>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <SAI_MspInit+0x4bc>)
 8000934:	2203      	movs	r2, #3
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <SAI_MspInit+0x4bc>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <SAI_MspInit+0x4bc>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <SAI_MspInit+0x4bc>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <SAI_MspInit+0x4d0>)
 8000948:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <SAI_MspInit+0x4bc>)
 800094e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SAI_MspInit+0x4bc>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <SAI_MspInit+0x4bc>)
 800095a:	f002 fbe7 	bl	800312c <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <SAI_MspInit+0x4bc>)
 8000960:	f002 f88a 	bl	8002a78 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	210f      	movs	r1, #15
 8000968:	2082      	movs	r0, #130	; 0x82
 800096a:	f001 fd18 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 800096e:	2082      	movs	r0, #130	; 0x82
 8000970:	f001 fd2f 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  }
}
 8000974:	bf00      	nop
 8000976:	3758      	adds	r7, #88	; 0x58
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	240009b4 	.word	0x240009b4
 8000980:	58005404 	.word	0x58005404
 8000984:	58024400 	.word	0x58024400
 8000988:	58021000 	.word	0x58021000
 800098c:	58020800 	.word	0x58020800
 8000990:	5802541c 	.word	0x5802541c

08000994 <SAI_MspDeInit>:
  * @brief  Deinitializes SAI MSP.
  * @param  hsai  SAI handle
  * @retval HAL status
  */
static void SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <SAI_MspDeInit+0x84>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d11a      	bne.n	80009dc <SAI_MspDeInit+0x48>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80009a6:	2045      	movs	r0, #69	; 0x45
 80009a8:	f001 fd21 	bl	80023ee <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmatx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fbba 	bl	800312c <HAL_DMA_DeInit>

    /* De-initialize FS, SCK, MCK and SD pins */
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, AUDIO_OUT_SAIx_FS_PIN);
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	4817      	ldr	r0, [pc, #92]	; (8000a1c <SAI_MspDeInit+0x88>)
 80009be:	f004 fddf 	bl	8005580 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_GPIO_PORT, AUDIO_OUT_SAIx_SCK_PIN);
 80009c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c6:	4815      	ldr	r0, [pc, #84]	; (8000a1c <SAI_MspDeInit+0x88>)
 80009c8:	f004 fdda 	bl	8005580 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SD_GPIO_PORT, AUDIO_OUT_SAIx_SD_PIN);
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <SAI_MspDeInit+0x88>)
 80009d0:	f004 fdd6 	bl	8005580 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, AUDIO_OUT_SAIx_MCLK_PIN);
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4811      	ldr	r0, [pc, #68]	; (8000a1c <SAI_MspDeInit+0x88>)
 80009d8:	f004 fdd2 	bl	8005580 <HAL_GPIO_DeInit>
  }
  if(hsai->Instance == AUDIO_IN_SAIx)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <SAI_MspDeInit+0x8c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d114      	bne.n	8000a10 <SAI_MspDeInit+0x7c>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80009e6:	203c      	movs	r0, #60	; 0x3c
 80009e8:	f001 fd01 	bl	80023ee <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmarx);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fb9a 	bl	800312c <HAL_DMA_DeInit>

    /* De-initialize SD pin */
    HAL_GPIO_DeInit(AUDIO_IN_SAIx_SD_GPIO_PORT, AUDIO_IN_SAIx_SD_PIN);
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <SAI_MspDeInit+0x90>)
 80009fc:	f004 fdc0 	bl	8005580 <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_IN_SAIx_CLK_DISABLE();
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <SAI_MspDeInit+0x94>)
 8000a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <SAI_MspDeInit+0x94>)
 8000a08:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
  }
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40015824 	.word	0x40015824
 8000a1c:	58021400 	.word	0x58021400
 8000a20:	40015804 	.word	0x40015804
 8000a24:	58021000 	.word	0x58021000
 8000a28:	58024400 	.word	0x58024400

08000a2c <SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
static void SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <SAI_ErrorCallback+0x28>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d103      	bne.n	8000a46 <SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fd33 	bl	80004aa <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8000a44:	e002      	b.n	8000a4c <SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f001 f872 	bl	8001b30 <BSP_AUDIO_IN_Error_CallBack>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40015824 	.word	0x40015824

08000a58 <BSP_AUDIO_IN_Init>:
  * @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b0a9      	sub	sp, #164	; 0xa4
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t ret = BSP_ERROR_NONE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if(Instance >= PDMS_NBR)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d905      	bls.n	8000a7a <BSP_AUDIO_IN_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a6e:	f06f 0301 	mvn.w	r3, #1
 8000a72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000a76:	f000 bca7 	b.w	80013c8 <BSP_AUDIO_IN_Init+0x970>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device          = AudioInit->Device;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	6819      	ldr	r1, [r3, #0]
 8000a7e:	48b6      	ldr	r0, [pc, #728]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	011b      	lsls	r3, r3, #4
 8000a8a:	4403      	add	r3, r0
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68d9      	ldr	r1, [r3, #12]
 8000a94:	48b0      	ldr	r0, [pc, #704]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	4403      	add	r3, r0
 8000aa2:	3310      	adds	r3, #16
 8000aa4:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate      = AudioInit->SampleRate;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	6859      	ldr	r1, [r3, #4]
 8000aaa:	48ab      	ldr	r0, [pc, #684]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	011b      	lsls	r3, r3, #4
 8000ab6:	4403      	add	r3, r0
 8000ab8:	3308      	adds	r3, #8
 8000aba:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	6899      	ldr	r1, [r3, #8]
 8000ac0:	48a5      	ldr	r0, [pc, #660]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	4403      	add	r3, r0
 8000ace:	330c      	adds	r3, #12
 8000ad0:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume          = AudioInit->Volume;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	6919      	ldr	r1, [r3, #16]
 8000ad6:	48a0      	ldr	r0, [pc, #640]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	011b      	lsls	r3, r3, #4
 8000ae2:	4403      	add	r3, r0
 8000ae4:	3320      	adds	r3, #32
 8000ae6:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 8000ae8:	499b      	ldr	r1, [pc, #620]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	440b      	add	r3, r1
 8000af6:	3324      	adds	r3, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]

    if(Instance == 0U)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 8115 	bne.w	8000d2e <BSP_AUDIO_IN_Init+0x2d6>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai[Instance], AudioInit->SampleRate) != HAL_OK)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	22b4      	movs	r2, #180	; 0xb4
 8000b08:	fb02 f303 	mul.w	r3, r2, r3
 8000b0c:	4a93      	ldr	r2, [pc, #588]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000b0e:	441a      	add	r2, r3
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4610      	mov	r0, r2
 8000b18:	f7ff fc8a 	bl	8000430 <MX_SAI1_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d005      	beq.n	8000b2e <BSP_AUDIO_IN_Init+0xd6>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000b22:	f06f 0308 	mvn.w	r3, #8
 8000b26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000b2a:	f000 bc43 	b.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
      }
      else
      {
        haudio_in_sai[Instance].Instance    = AUDIO_IN_SAIx;
 8000b2e:	4a8b      	ldr	r2, [pc, #556]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	21b4      	movs	r1, #180	; 0xb4
 8000b34:	fb01 f303 	mul.w	r3, r1, r3
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a89      	ldr	r2, [pc, #548]	; (8000d60 <BSP_AUDIO_IN_Init+0x308>)
 8000b3c:	601a      	str	r2, [r3, #0]
        haudio_out_sai.Instance   = AUDIO_OUT_SAIx;
 8000b3e:	4b89      	ldr	r3, [pc, #548]	; (8000d64 <BSP_AUDIO_IN_Init+0x30c>)
 8000b40:	4a89      	ldr	r2, [pc, #548]	; (8000d68 <BSP_AUDIO_IN_Init+0x310>)
 8000b42:	601a      	str	r2, [r3, #0]
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        /* Register the default SAI MSP callbacks */
        if(Audio_In_Ctx[Instance].IsMspCallbacksValid == 0U)
 8000b44:	4984      	ldr	r1, [pc, #528]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	011b      	lsls	r3, r3, #4
 8000b50:	440b      	add	r3, r1
 8000b52:	332c      	adds	r3, #44	; 0x2c
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d109      	bne.n	8000b6e <BSP_AUDIO_IN_Init+0x116>
        {
          if(BSP_AUDIO_IN_RegisterDefaultMspCallbacks(Instance) != BSP_ERROR_NONE)
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 fe3a 	bl	80017d4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <BSP_AUDIO_IN_Init+0x116>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8000b66:	f06f 0303 	mvn.w	r3, #3
 8000b6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
          }
        }
#else
        SAI_MspInit(&haudio_in_sai[Instance]);
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
        if (ret == BSP_ERROR_NONE)
 8000b6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 841e 	bne.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
        {
          MX_SAI_Config mx_config;

          /* Prepare haudio_in_sai handle */
          mx_config.AudioFrequency        = Audio_In_Ctx[Instance].SampleRate;
 8000b78:	4977      	ldr	r1, [pc, #476]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	440b      	add	r3, r1
 8000b86:	3308      	adds	r3, #8
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	60bb      	str	r3, [r7, #8]
          mx_config.AudioMode             = SAI_MODESLAVE_RX;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	60fb      	str	r3, [r7, #12]
          mx_config.ClockStrobing         = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
          mx_config.MonoStereoMode        = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d102      	bne.n	8000ba2 <BSP_AUDIO_IN_Init+0x14a>
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	e000      	b.n	8000ba4 <BSP_AUDIO_IN_Init+0x14c>
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
          mx_config.DataSize              = SAI_DATASIZE_16;
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	613b      	str	r3, [r7, #16]
          mx_config.FrameLength           = 128;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
          mx_config.ActiveFrameLength     = 64;
 8000bae:	2340      	movs	r3, #64	; 0x40
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_config.OutputDrive           = SAI_OUTPUTDRIVE_ENABLE;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	623b      	str	r3, [r7, #32]
          mx_config.Synchro               = SAI_SYNCHRONOUS;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
          mx_config.SynchroExt            = SAI_SYNCEXT_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
          mx_config.SlotActive            = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30

          if(MX_SAI1_Block_A_Init(&haudio_in_sai[Instance], &mx_config) != HAL_OK)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	22b4      	movs	r2, #180	; 0xb4
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	4a63      	ldr	r2, [pc, #396]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000bce:	4413      	add	r3, r2
 8000bd0:	f107 0208 	add.w	r2, r7, #8
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fcee 	bl	80015b8 <MX_SAI1_Block_A_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d004      	beq.n	8000bec <BSP_AUDIO_IN_Init+0x194>
          {
            /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
            ret = BSP_ERROR_PERIPH_FAILURE;
 8000be2:	f06f 0303 	mvn.w	r3, #3
 8000be6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000bea:	e010      	b.n	8000c0e <BSP_AUDIO_IN_Init+0x1b6>
          }
          else
          {
            /* Prepare haudio_out_sai handle */
            mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
            mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]

            if(MX_SAI1_Block_B_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	485a      	ldr	r0, [pc, #360]	; (8000d64 <BSP_AUDIO_IN_Init+0x30c>)
 8000bfc:	f7ff fb88 	bl	8000310 <MX_SAI1_Block_B_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <BSP_AUDIO_IN_Init+0x1b6>
            {
              /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000c06:	f06f 0303 	mvn.w	r3, #3
 8000c0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            }
          }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
          if (ret == BSP_ERROR_NONE)
 8000c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d137      	bne.n	8000c86 <BSP_AUDIO_IN_Init+0x22e>
          {
            /* Register SAI TC, HT and Error callbacks */
            if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_COMPLETE_CB_ID, SAI_RxCpltCallback) != HAL_OK)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	22b4      	movs	r2, #180	; 0xb4
 8000c1a:	fb02 f303 	mul.w	r3, r2, r3
 8000c1e:	4a4f      	ldr	r2, [pc, #316]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000c20:	4413      	add	r3, r2
 8000c22:	4a52      	ldr	r2, [pc, #328]	; (8000d6c <BSP_AUDIO_IN_Init+0x314>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 f92e 	bl	8008e88 <HAL_SAI_RegisterCallback>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <BSP_AUDIO_IN_Init+0x1e4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000c32:	f06f 0303 	mvn.w	r3, #3
 8000c36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c3a:	e024      	b.n	8000c86 <BSP_AUDIO_IN_Init+0x22e>
            }
            else if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_HALFCOMPLETE_CB_ID, SAI_RxHalfCpltCallback) != HAL_OK)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	22b4      	movs	r2, #180	; 0xb4
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	4a45      	ldr	r2, [pc, #276]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000c46:	4413      	add	r3, r2
 8000c48:	4a49      	ldr	r2, [pc, #292]	; (8000d70 <BSP_AUDIO_IN_Init+0x318>)
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f008 f91b 	bl	8008e88 <HAL_SAI_RegisterCallback>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d004      	beq.n	8000c62 <BSP_AUDIO_IN_Init+0x20a>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000c58:	f06f 0303 	mvn.w	r3, #3
 8000c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c60:	e011      	b.n	8000c86 <BSP_AUDIO_IN_Init+0x22e>
            }
            else
            {
              if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_ERROR_CB_ID, SAI_ErrorCallback) != HAL_OK)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	22b4      	movs	r2, #180	; 0xb4
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	4a3c      	ldr	r2, [pc, #240]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a41      	ldr	r2, [pc, #260]	; (8000d74 <BSP_AUDIO_IN_Init+0x31c>)
 8000c70:	2104      	movs	r1, #4
 8000c72:	4618      	mov	r0, r3
 8000c74:	f008 f908 	bl	8008e88 <HAL_SAI_RegisterCallback>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <BSP_AUDIO_IN_Init+0x22e>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8000c7e:	f06f 0303 	mvn.w	r3, #3
 8000c82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
              }
            }
          }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
#if (USE_AUDIO_CODEC_WM8994 == 1)
          if (ret == BSP_ERROR_NONE)
 8000c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f040 8392 	bne.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
          {
            WM8994_Init_t codec_init;

            /* Fill codec_init structure */
            codec_init.OutputDevice = (Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) ? WM8994_OUT_NONE : WM8994_OUT_HEADPHONE;
 8000c90:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <BSP_AUDIO_IN_Init+0x320>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <BSP_AUDIO_IN_Init+0x244>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e000      	b.n	8000c9e <BSP_AUDIO_IN_Init+0x246>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            codec_init.Frequency    = AudioInit->SampleRate;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	2b20      	cmp	r3, #32
 8000cb0:	d101      	bne.n	8000cb6 <BSP_AUDIO_IN_Init+0x25e>
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e000      	b.n	8000cb8 <BSP_AUDIO_IN_Init+0x260>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            codec_init.InputDevice  = (AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC) ? WM8994_IN_LINE1 : WM8994_IN_MIC2;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <BSP_AUDIO_IN_Init+0x270>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e000      	b.n	8000cca <BSP_AUDIO_IN_Init+0x272>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	2b63      	cmp	r3, #99	; 0x63
 8000cd4:	d80c      	bhi.n	8000cf0 <BSP_AUDIO_IN_Init+0x298>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	4a25      	ldr	r2, [pc, #148]	; (8000d7c <BSP_AUDIO_IN_Init+0x324>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	e000      	b.n	8000cf2 <BSP_AUDIO_IN_Init+0x29a>
 8000cf0:	23ef      	movs	r3, #239	; 0xef
 8000cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <BSP_AUDIO_IN_Init+0x328>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <BSP_AUDIO_IN_Init+0x32c>)
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000d04:	4610      	mov	r0, r2
 8000d06:	4798      	blx	r3
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	da04      	bge.n	8000d18 <BSP_AUDIO_IN_Init+0x2c0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8000d0e:	f06f 0304 	mvn.w	r3, #4
 8000d12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000d16:	e34d      	b.n	80013b4 <BSP_AUDIO_IN_Init+0x95c>
            }
            else
            {
              /* Update audio in context state */
              Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8000d18:	490f      	ldr	r1, [pc, #60]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	440b      	add	r3, r1
 8000d26:	3324      	adds	r3, #36	; 0x24
 8000d28:	2202      	movs	r2, #2
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e342      	b.n	80013b4 <BSP_AUDIO_IN_Init+0x95c>
          }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
        }
      }
    }
    else if(Instance == 1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	f040 80da 	bne.w	8000eea <BSP_AUDIO_IN_Init+0x492>
    {
      if(Audio_In_Ctx[Instance].Device != AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	440b      	add	r3, r1
 8000d44:	3304      	adds	r3, #4
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b10      	cmp	r3, #16
 8000d4a:	d01d      	beq.n	8000d88 <BSP_AUDIO_IN_Init+0x330>
      {
        ret = BSP_ERROR_WRONG_PARAM;
 8000d4c:	f06f 0301 	mvn.w	r3, #1
 8000d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000d54:	e32e      	b.n	80013b4 <BSP_AUDIO_IN_Init+0x95c>
 8000d56:	bf00      	nop
 8000d58:	24000cb0 	.word	0x24000cb0
 8000d5c:	2400054c 	.word	0x2400054c
 8000d60:	40015804 	.word	0x40015804
 8000d64:	24000498 	.word	0x24000498
 8000d68:	40015824 	.word	0x40015824
 8000d6c:	08001b5b 	.word	0x08001b5b
 8000d70:	08001b45 	.word	0x08001b45
 8000d74:	08000a2d 	.word	0x08000a2d
 8000d78:	24000c8c 	.word	0x24000c8c
 8000d7c:	51eb851f 	.word	0x51eb851f
 8000d80:	240006b4 	.word	0x240006b4
 8000d84:	24000494 	.word	0x24000494
      }
      else
      {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai[Instance], AudioInit->SampleRate) != HAL_OK)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	22b4      	movs	r2, #180	; 0xb4
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	4a75      	ldr	r2, [pc, #468]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000d92:	441a      	add	r2, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	f000 fb48 	bl	8001430 <MX_SAI4_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <BSP_AUDIO_IN_Init+0x354>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8000da6:	f06f 0308 	mvn.w	r3, #8
 8000daa:	e30f      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      }
      haudio_in_sai[Instance].Instance = AUDIO_IN_SAI_PDMx;
 8000dac:	4a6e      	ldr	r2, [pc, #440]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	21b4      	movs	r1, #180	; 0xb4
 8000db2:	fb01 f303 	mul.w	r3, r1, r3
 8000db6:	4413      	add	r3, r2
 8000db8:	4a6c      	ldr	r2, [pc, #432]	; (8000f6c <BSP_AUDIO_IN_Init+0x514>)
 8000dba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1U)
      /* Register the default SAI MSP callbacks */
      if(Audio_In_Ctx[Instance].IsMspCallbacksValid == 0U)
 8000dbc:	496c      	ldr	r1, [pc, #432]	; (8000f70 <BSP_AUDIO_IN_Init+0x518>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	440b      	add	r3, r1
 8000dca:	332c      	adds	r3, #44	; 0x2c
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d108      	bne.n	8000de4 <BSP_AUDIO_IN_Init+0x38c>
      {
        if(BSP_AUDIO_IN_RegisterDefaultMspCallbacks(Instance) != BSP_ERROR_NONE)
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 fcfe 	bl	80017d4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <BSP_AUDIO_IN_Init+0x38c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8000dde:	f06f 0303 	mvn.w	r3, #3
 8000de2:	e2f3      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      SAI_MspInit(&haudio_in_sai[Instance]);
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_16;
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 16;
 8000dec:	2310      	movs	r3, #16
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
      mx_config.ActiveFrameLength = 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*8;
 8000dfc:	495c      	ldr	r1, [pc, #368]	; (8000f70 <BSP_AUDIO_IN_Init+0x518>)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	440b      	add	r3, r1
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8000e12:	2301      	movs	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai[Instance], &mx_config) != HAL_OK)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	22b4      	movs	r2, #180	; 0xb4
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	4a4f      	ldr	r2, [pc, #316]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f107 0208 	add.w	r2, r7, #8
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fc47 	bl	80016c8 <MX_SAI4_Block_A_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <BSP_AUDIO_IN_Init+0x3ee>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8000e40:	f06f 0303 	mvn.w	r3, #3
 8000e44:	e2c2      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1U)
      /* Register SAI TC, HT and Error callbacks */
      if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_COMPLETE_CB_ID, SAI_RxCpltCallback) != HAL_OK)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	22b4      	movs	r2, #180	; 0xb4
 8000e4a:	fb02 f303 	mul.w	r3, r2, r3
 8000e4e:	4a46      	ldr	r2, [pc, #280]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000e50:	4413      	add	r3, r2
 8000e52:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <BSP_AUDIO_IN_Init+0x51c>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f008 f816 	bl	8008e88 <HAL_SAI_RegisterCallback>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <BSP_AUDIO_IN_Init+0x410>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8000e62:	f06f 0303 	mvn.w	r3, #3
 8000e66:	e2b1      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      }
      if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_HALFCOMPLETE_CB_ID, SAI_RxHalfCpltCallback) != HAL_OK)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	22b4      	movs	r2, #180	; 0xb4
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	4a3d      	ldr	r2, [pc, #244]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000e72:	4413      	add	r3, r2
 8000e74:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <BSP_AUDIO_IN_Init+0x520>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f008 f805 	bl	8008e88 <HAL_SAI_RegisterCallback>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <BSP_AUDIO_IN_Init+0x432>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8000e84:	f06f 0303 	mvn.w	r3, #3
 8000e88:	e2a0      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      }
      if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_ERROR_CB_ID, SAI_ErrorCallback) != HAL_OK)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	22b4      	movs	r2, #180	; 0xb4
 8000e8e:	fb02 f303 	mul.w	r3, r2, r3
 8000e92:	4a35      	ldr	r2, [pc, #212]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000e94:	4413      	add	r3, r2
 8000e96:	4a39      	ldr	r2, [pc, #228]	; (8000f7c <BSP_AUDIO_IN_Init+0x524>)
 8000e98:	2104      	movs	r1, #4
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f007 fff4 	bl	8008e88 <HAL_SAI_RegisterCallback>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <BSP_AUDIO_IN_Init+0x454>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8000ea6:	f06f 0303 	mvn.w	r3, #3
 8000eaa:	e28f      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_BSP_PDM_LIB_FEATURE > 0U)
      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	6859      	ldr	r1, [r3, #4]
 8000eb0:	482f      	ldr	r0, [pc, #188]	; (8000f70 <BSP_AUDIO_IN_Init+0x518>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	4403      	add	r3, r0
 8000ebe:	3310      	adds	r3, #16
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	4c2b      	ldr	r4, [pc, #172]	; (8000f70 <BSP_AUDIO_IN_Init+0x518>)
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	4423      	add	r3, r4
 8000ed0:	3310      	adds	r3, #16
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 fd3c 	bl	8001954 <BSP_AUDIO_IN_PDMToPCM_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8268 	beq.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
      {
        return BSP_ERROR_NO_INIT;
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee8:	e270      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
#endif
    }
    }
    else /* (Instance == 2U) */
    {
      DFSDM_Filter_TypeDef* FilterInstnace[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_FILTER, AUDIO_DFSDMx_MIC2_FILTER,AUDIO_DFSDMx_MIC3_FILTER,AUDIO_DFSDMx_MIC4_FILTER};
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <BSP_AUDIO_IN_Init+0x528>)
 8000eec:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ef0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      DFSDM_Channel_TypeDef* ChannelInstance[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL, AUDIO_DFSDMx_MIC2_CHANNEL,AUDIO_DFSDMx_MIC3_CHANNEL,AUDIO_DFSDMx_MIC4_CHANNEL};
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <BSP_AUDIO_IN_Init+0x52c>)
 8000ef8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicPins[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS, DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS};
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <BSP_AUDIO_IN_Init+0x530>)
 8000f04:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicType[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING, DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING};
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <BSP_AUDIO_IN_Init+0x534>)
 8000f10:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000f14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t Channel4Filter[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL_FOR_FILTER, AUDIO_DFSDMx_MIC2_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC3_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC4_CHANNEL_FOR_FILTER};
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <BSP_AUDIO_IN_Init+0x538>)
 8000f1c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000f20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      MX_DFSDM_Config dfsdm_config;

      /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4819      	ldr	r0, [pc, #100]	; (8000f94 <BSP_AUDIO_IN_Init+0x53c>)
 8000f2e:	f000 fa57 	bl	80013e0 <MX_DFSDM1_ClockConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <BSP_AUDIO_IN_Init+0x4e8>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000f38:	f06f 0308 	mvn.w	r3, #8
 8000f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      if(ret == BSP_ERROR_NONE)
 8000f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f040 8235 	bne.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        DFSDM_FilterMspInit(&haudio_in_dfsdm_filter[1]);
 8000f4a:	4813      	ldr	r0, [pc, #76]	; (8000f98 <BSP_AUDIO_IN_Init+0x540>)
 8000f4c:	f000 feb4 	bl	8001cb8 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&haudio_in_dfsdm_channel[1]);
 8000f50:	4812      	ldr	r0, [pc, #72]	; (8000f9c <BSP_AUDIO_IN_Init+0x544>)
 8000f52:	f000 fe0d 	bl	8001b70 <DFSDM_ChannelMspInit>
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
        if(ret == BSP_ERROR_NONE)
 8000f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 822a 	bne.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
        {
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f66:	e21e      	b.n	80013a6 <BSP_AUDIO_IN_Init+0x94e>
 8000f68:	2400054c 	.word	0x2400054c
 8000f6c:	58005404 	.word	0x58005404
 8000f70:	24000cb0 	.word	0x24000cb0
 8000f74:	08001b5b 	.word	0x08001b5b
 8000f78:	08001b45 	.word	0x08001b45
 8000f7c:	08000a2d 	.word	0x08000a2d
 8000f80:	0800bc90 	.word	0x0800bc90
 8000f84:	0800bca0 	.word	0x0800bca0
 8000f88:	0800bcb0 	.word	0x0800bcb0
 8000f8c:	0800bcc0 	.word	0x0800bcc0
 8000f90:	0800bcd0 	.word	0x0800bcd0
 8000f94:	24000a5c 	.word	0x24000a5c
 8000f98:	24000b90 	.word	0x24000b90
 8000f9c:	24000a94 	.word	0x24000a94
          {
            dfsdm_config.FilterInstance  = FilterInstnace[i];
 8000fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000faa:	4413      	add	r3, r2
 8000fac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000fb0:	60bb      	str	r3, [r7, #8]
            dfsdm_config.ChannelInstance = ChannelInstance[i];
 8000fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000fc2:	61bb      	str	r3, [r7, #24]
            dfsdm_config.DigitalMicPins  = DigitalMicPins[i];
 8000fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000fce:	4413      	add	r3, r2
 8000fd0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000fd4:	61fb      	str	r3, [r7, #28]
            dfsdm_config.DigitalMicType  = DigitalMicType[i];
 8000fd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000fe6:	623b      	str	r3, [r7, #32]
            dfsdm_config.Channel4Filter  = Channel4Filter[i];
 8000fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
            dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
            /* MIC2, MIC3 and MIC4 should be synchronized to MIC1 if it's used */
            if((i >= 1U) && (i < 4U) && ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8000ffe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001002:	2b00      	cmp	r3, #0
 8001004:	d012      	beq.n	800102c <BSP_AUDIO_IN_Init+0x5d4>
 8001006:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800100a:	2b03      	cmp	r3, #3
 800100c:	d80e      	bhi.n	800102c <BSP_AUDIO_IN_Init+0x5d4>
 800100e:	49a0      	ldr	r1, [pc, #640]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	440b      	add	r3, r1
 800101c:	3304      	adds	r3, #4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <BSP_AUDIO_IN_Init+0x5d4>
            {
              dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 8001028:	2301      	movs	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
            }
            dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 800102c:	4998      	ldr	r1, [pc, #608]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	440b      	add	r3, r1
 800103a:	3308      	adds	r3, #8
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001042:	d060      	beq.n	8001106 <BSP_AUDIO_IN_Init+0x6ae>
 8001044:	4992      	ldr	r1, [pc, #584]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	440b      	add	r3, r1
 8001052:	3308      	adds	r3, #8
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f642 3211 	movw	r2, #11025	; 0x2b11
 800105a:	4293      	cmp	r3, r2
 800105c:	d050      	beq.n	8001100 <BSP_AUDIO_IN_Init+0x6a8>
 800105e:	498c      	ldr	r1, [pc, #560]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	440b      	add	r3, r1
 800106c:	3308      	adds	r3, #8
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001074:	d041      	beq.n	80010fa <BSP_AUDIO_IN_Init+0x6a2>
 8001076:	4986      	ldr	r1, [pc, #536]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	440b      	add	r3, r1
 8001084:	3308      	adds	r3, #8
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f245 6222 	movw	r2, #22050	; 0x5622
 800108c:	4293      	cmp	r3, r2
 800108e:	d031      	beq.n	80010f4 <BSP_AUDIO_IN_Init+0x69c>
 8001090:	497f      	ldr	r1, [pc, #508]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	440b      	add	r3, r1
 800109e:	3308      	adds	r3, #8
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80010a6:	d022      	beq.n	80010ee <BSP_AUDIO_IN_Init+0x696>
 80010a8:	4979      	ldr	r1, [pc, #484]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	440b      	add	r3, r1
 80010b6:	3308      	adds	r3, #8
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f64a 4244 	movw	r2, #44100	; 0xac44
 80010be:	4293      	cmp	r3, r2
 80010c0:	d012      	beq.n	80010e8 <BSP_AUDIO_IN_Init+0x690>
 80010c2:	4973      	ldr	r1, [pc, #460]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	440b      	add	r3, r1
 80010d0:	3308      	adds	r3, #8
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80010d8:	4293      	cmp	r3, r2
 80010da:	d102      	bne.n	80010e2 <BSP_AUDIO_IN_Init+0x68a>
 80010dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010e0:	e013      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 80010e2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80010e6:	e010      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 80010e8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80010ec:	e00d      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 80010ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010f2:	e00a      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 80010f4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80010f8:	e007      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 80010fa:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80010fe:	e004      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 8001100:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001104:	e001      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 8001106:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800110a:	613b      	str	r3, [r7, #16]
            dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 800110c:	4960      	ldr	r1, [pc, #384]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	440b      	add	r3, r1
 800111a:	3308      	adds	r3, #8
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001122:	d05a      	beq.n	80011da <BSP_AUDIO_IN_Init+0x782>
 8001124:	495a      	ldr	r1, [pc, #360]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	440b      	add	r3, r1
 8001132:	3308      	adds	r3, #8
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f642 3211 	movw	r2, #11025	; 0x2b11
 800113a:	4293      	cmp	r3, r2
 800113c:	d04a      	beq.n	80011d4 <BSP_AUDIO_IN_Init+0x77c>
 800113e:	4954      	ldr	r1, [pc, #336]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	440b      	add	r3, r1
 800114c:	3308      	adds	r3, #8
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001154:	d03c      	beq.n	80011d0 <BSP_AUDIO_IN_Init+0x778>
 8001156:	494e      	ldr	r1, [pc, #312]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	440b      	add	r3, r1
 8001164:	3308      	adds	r3, #8
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f245 6222 	movw	r2, #22050	; 0x5622
 800116c:	4293      	cmp	r3, r2
 800116e:	d02d      	beq.n	80011cc <BSP_AUDIO_IN_Init+0x774>
 8001170:	4947      	ldr	r1, [pc, #284]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	440b      	add	r3, r1
 800117e:	3308      	adds	r3, #8
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001186:	d01f      	beq.n	80011c8 <BSP_AUDIO_IN_Init+0x770>
 8001188:	4941      	ldr	r1, [pc, #260]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	440b      	add	r3, r1
 8001196:	3308      	adds	r3, #8
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800119e:	4293      	cmp	r3, r2
 80011a0:	d010      	beq.n	80011c4 <BSP_AUDIO_IN_Init+0x76c>
 80011a2:	493b      	ldr	r1, [pc, #236]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	440b      	add	r3, r1
 80011b0:	3308      	adds	r3, #8
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <BSP_AUDIO_IN_Init+0x768>
 80011bc:	2320      	movs	r3, #32
 80011be:	e00e      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011c0:	2310      	movs	r3, #16
 80011c2:	e00c      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	e00a      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011c8:	2340      	movs	r3, #64	; 0x40
 80011ca:	e008      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	e006      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	e004      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d8:	e001      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	617b      	str	r3, [r7, #20]
            dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 80011e0:	492b      	ldr	r1, [pc, #172]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	440b      	add	r3, r1
 80011ee:	3308      	adds	r3, #8
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80011f6:	d04d      	beq.n	8001294 <BSP_AUDIO_IN_Init+0x83c>
 80011f8:	4925      	ldr	r1, [pc, #148]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	440b      	add	r3, r1
 8001206:	3308      	adds	r3, #8
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800120e:	4293      	cmp	r3, r2
 8001210:	d03b      	beq.n	800128a <BSP_AUDIO_IN_Init+0x832>
 8001212:	491f      	ldr	r1, [pc, #124]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	440b      	add	r3, r1
 8001220:	3308      	adds	r3, #8
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001228:	d02d      	beq.n	8001286 <BSP_AUDIO_IN_Init+0x82e>
 800122a:	4919      	ldr	r1, [pc, #100]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	440b      	add	r3, r1
 8001238:	3308      	adds	r3, #8
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f245 6222 	movw	r2, #22050	; 0x5622
 8001240:	4293      	cmp	r3, r2
 8001242:	d01e      	beq.n	8001282 <BSP_AUDIO_IN_Init+0x82a>
 8001244:	4912      	ldr	r1, [pc, #72]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	440b      	add	r3, r1
 8001252:	3308      	adds	r3, #8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800125a:	d010      	beq.n	800127e <BSP_AUDIO_IN_Init+0x826>
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	440b      	add	r3, r1
 800126a:	3308      	adds	r3, #8
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <BSP_AUDIO_IN_Init+0x822>
 8001276:	2304      	movs	r3, #4
 8001278:	e00d      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 800127a:	2320      	movs	r3, #32
 800127c:	e00b      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 800127e:	2318      	movs	r3, #24
 8001280:	e009      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 8001282:	2304      	movs	r3, #4
 8001284:	e007      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 8001286:	2318      	movs	r3, #24
 8001288:	e005      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 800128a:	2304      	movs	r3, #4
 800128c:	e003      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 800128e:	bf00      	nop
 8001290:	24000cb0 	.word	0x24000cb0
 8001294:	2318      	movs	r3, #24
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
            dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 8001298:	494e      	ldr	r1, [pc, #312]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	440b      	add	r3, r1
 80012a6:	3308      	adds	r3, #8
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80012ae:	d04a      	beq.n	8001346 <BSP_AUDIO_IN_Init+0x8ee>
 80012b0:	4948      	ldr	r1, [pc, #288]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	440b      	add	r3, r1
 80012be:	3308      	adds	r3, #8
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f642 3211 	movw	r2, #11025	; 0x2b11
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d03b      	beq.n	8001342 <BSP_AUDIO_IN_Init+0x8ea>
 80012ca:	4942      	ldr	r1, [pc, #264]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	440b      	add	r3, r1
 80012d8:	3308      	adds	r3, #8
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80012e0:	d02d      	beq.n	800133e <BSP_AUDIO_IN_Init+0x8e6>
 80012e2:	493c      	ldr	r1, [pc, #240]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	440b      	add	r3, r1
 80012f0:	3308      	adds	r3, #8
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f245 6222 	movw	r2, #22050	; 0x5622
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d01e      	beq.n	800133a <BSP_AUDIO_IN_Init+0x8e2>
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	440b      	add	r3, r1
 800130a:	3308      	adds	r3, #8
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001312:	d010      	beq.n	8001336 <BSP_AUDIO_IN_Init+0x8de>
 8001314:	492f      	ldr	r1, [pc, #188]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	440b      	add	r3, r1
 8001322:	3308      	adds	r3, #8
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f64a 4244 	movw	r2, #44100	; 0xac44
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <BSP_AUDIO_IN_Init+0x8da>
 800132e:	2300      	movs	r3, #0
 8001330:	e00a      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 8001332:	2302      	movs	r3, #2
 8001334:	e008      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 8001336:	2306      	movs	r3, #6
 8001338:	e006      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 800133e:	2303      	movs	r3, #3
 8001340:	e002      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 8001342:	2306      	movs	r3, #6
 8001344:	e000      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 8001346:	2305      	movs	r3, #5
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c

            if(((AudioInit->Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01a      	beq.n	8001394 <BSP_AUDIO_IN_Init+0x93c>
            {
              /* Default configuration of DFSDM filters and channels */
              if(MX_DFSDM1_Init(&haudio_in_dfsdm_filter[i], &haudio_in_dfsdm_channel[i], &dfsdm_config) != HAL_OK)
 800135e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001362:	2254      	movs	r2, #84	; 0x54
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <BSP_AUDIO_IN_Init+0x980>)
 800136a:	1898      	adds	r0, r3, r2
 800136c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4a18      	ldr	r2, [pc, #96]	; (80013dc <BSP_AUDIO_IN_Init+0x984>)
 800137a:	4413      	add	r3, r2
 800137c:	f107 0208 	add.w	r2, r7, #8
 8001380:	4619      	mov	r1, r3
 8001382:	f000 f89a 	bl	80014ba <MX_DFSDM1_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <BSP_AUDIO_IN_Init+0x93c>
              {
                /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
                ret = BSP_ERROR_PERIPH_FAILURE;
 800138c:	f06f 0303 	mvn.w	r3, #3
 8001390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                  ret = BSP_ERROR_PERIPH_FAILURE;
                }
              }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
            }
            if(ret != BSP_ERROR_NONE)
 8001394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10a      	bne.n	80013b2 <BSP_AUDIO_IN_Init+0x95a>
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 800139c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013a0:	3301      	adds	r3, #1
 80013a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80013a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	f67f adf8 	bls.w	8000fa0 <BSP_AUDIO_IN_Init+0x548>
 80013b0:	e000      	b.n	80013b4 <BSP_AUDIO_IN_Init+0x95c>
            {
              break;
 80013b2:	bf00      	nop
        }
      }
    }

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	440b      	add	r3, r1
 80013c2:	3324      	adds	r3, #36	; 0x24
 80013c4:	2202      	movs	r2, #2
 80013c6:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80013c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	37a4      	adds	r7, #164	; 0xa4
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	24000cb0 	.word	0x24000cb0
 80013d8:	24000b3c 	.word	0x24000b3c
 80013dc:	24000a5c 	.word	0x24000a5c

080013e0 <MX_DFSDM1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_ClockConfig(DFSDM_Channel_HandleTypeDef *hDfsdmChannel, uint32_t SampleRate)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0b0      	sub	sp, #192	; 0xc0
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  HAL_StatusTypeDef ret = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4618      	mov	r0, r3
 80013f6:	f006 f825 	bl	8007444 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the PLL2 according to the requested audio frequency if not already done by other instances */
  if ((Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) && (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET))
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <MX_DFSDM1_ClockConfig+0x44>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10a      	bne.n	8001418 <MX_DFSDM1_ClockConfig+0x38>
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_DFSDM1_ClockConfig+0x48>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <MX_DFSDM1_ClockConfig+0x38>
  {
    ret = MX_SAI1_ClockConfig(&haudio_in_sai[0], SampleRate);
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_DFSDM1_ClockConfig+0x4c>)
 800140e:	f7ff f80f 	bl	8000430 <MX_SAI1_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 8001418:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 800141c:	4618      	mov	r0, r3
 800141e:	37c0      	adds	r7, #192	; 0xc0
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	24000c8c 	.word	0x24000c8c
 8001428:	24000cb0 	.word	0x24000cb0
 800142c:	2400054c 	.word	0x2400054c

08001430 <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0b0      	sub	sp, #192	; 0xc0
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4618      	mov	r0, r3
 8001446:	f005 fffd 	bl	8007444 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001450:	4293      	cmp	r3, r2
 8001452:	d009      	beq.n	8001468 <MX_SAI4_ClockConfig+0x38>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	f245 6222 	movw	r2, #22050	; 0x5622
 800145a:	4293      	cmp	r3, r2
 800145c:	d004      	beq.n	8001468 <MX_SAI4_ClockConfig+0x38>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001464:	4293      	cmp	r3, r2
 8001466:	d105      	bne.n	8001474 <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 24;
 8001468:	2318      	movs	r3, #24
 800146a:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 271;
 800146c:	f240 130f 	movw	r3, #271	; 0x10f
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e004      	b.n	800147e <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8001474:	2307      	movs	r3, #7
 8001476:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 8001478:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800147c:	613b      	str	r3, [r7, #16]
  }

  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800147e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001482:	60bb      	str	r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8001484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001488:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 800148c:	2301      	movs	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8001494:	2319      	movs	r3, #25
 8001496:	60fb      	str	r3, [r7, #12]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	4618      	mov	r0, r3
 800149e:	f005 f8d7 	bl	8006650 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <MX_SAI4_ClockConfig+0x7e>
  {
    ret = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 80014ae:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	37c0      	adds	r7, #192	; 0xc0
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <MX_DFSDM1_Init>:
  *           1MHZ < CLK(micro) < 3.2MHZ (TYP 2.4MHZ for MP34DT01TR)
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter, DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  /* MIC filters  initialization */
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2201      	movs	r2, #1
 80014da:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = DISABLE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM8_TRGO;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fa:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_BOTH_EDGES;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001502:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f001 f934 	bl	8002788 <HAL_DFSDM_FilterInit>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_DFSDM1_Init+0x70>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e042      	b.n	80015b0 <MX_DFSDM1_Init+0xf6>
  }

  /* MIC channels initialization */
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = ENABLE;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2201      	movs	r2, #1
 8001536:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153e:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = MXConfig->ClockDivider;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1a      	ldr	r2, [r3, #32]
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2204      	movs	r2, #4
 8001558:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	220a      	movs	r2, #10
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2200      	movs	r2, #0
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	61da      	str	r2, [r3, #28]

  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 8001586:	68b8      	ldr	r0, [r7, #8]
 8001588:	f001 f836 	bl	80025f8 <HAL_DFSDM_ChannelInit>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_DFSDM1_Init+0xdc>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00c      	b.n	80015b0 <MX_DFSDM1_Init+0xf6>
  }

  /* Configure injected channel */
  if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	2201      	movs	r2, #1
 800159c:	4619      	mov	r1, r3
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f001 f9d8 	bl	8002954 <HAL_DFSDM_FilterConfigRegChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_DFSDM1_Init+0xf4>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <MX_DFSDM1_Init+0xf6>
  }

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015d4:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	699a      	ldr	r2, [r3, #24]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2210      	movs	r2, #16
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput              = SAI_MCK_OUTPUT_ENABLE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001646:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling        = SAI_MCK_OVERSAMPLING_DISABLE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation     = DISABLE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800167a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b18      	cmp	r3, #24
 8001688:	d003      	beq.n	8001692 <MX_SAI1_Block_A_Init+0xda>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b20      	cmp	r3, #32
 8001690:	d103      	bne.n	800169a <MX_SAI1_Block_A_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	66da      	str	r2, [r3, #108]	; 0x6c
 8001698:	e002      	b.n	80016a0 <MX_SAI1_Block_A_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 2;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f007 f9ae 	bl	8008a10 <HAL_SAI_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_SAI1_Block_A_Init+0x106>
  {
    ret = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016e4:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001704:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2210      	movs	r2, #16
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK1_ENABLE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001768:	641a      	str	r2, [r3, #64]	; 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	6a1a      	ldr	r2, [r3, #32]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001786:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber         = 1;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f007 f931 	bl	8008a10 <HAL_SAI_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
  }
/* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017c6:	601a      	str	r2, [r3, #0]

  return ret;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>:
  * @brief Default BSP AUDIO IN Msp Callbacks
  * @param Instance BSP AUDIO IN Instance
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RegisterDefaultMspCallbacks (uint32_t Instance)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  if(Instance == 1U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d12c      	bne.n	8001840 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x6c>
  {
    for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	e025      	b.n	8001838 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x64>
    {
      if(((Audio_In_Ctx[Instance].Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 80017ec:	4952      	ldr	r1, [pc, #328]	; (8001938 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x164>)
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	440b      	add	r3, r1
 80017fa:	3304      	adds	r3, #4
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	d012      	beq.n	8001832 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x5e>
      {
        __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&haudio_in_dfsdm_channel[i]);
 800180c:	494b      	ldr	r1, [pc, #300]	; (800193c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x168>)
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3334      	adds	r3, #52	; 0x34
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
        __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&haudio_in_dfsdm_filter[i]);
 8001820:	4a47      	ldr	r2, [pc, #284]	; (8001940 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x16c>)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2154      	movs	r1, #84	; 0x54
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	334c      	adds	r3, #76	; 0x4c
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3301      	adds	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d9d6      	bls.n	80017ec <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x18>
 800183e:	e068      	b.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
        }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)  */
      }
    }
  }
  else if(Instance == 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d162      	bne.n	800190c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x138>
  {
    __HAL_SAI_RESET_HANDLE_STATE(&haudio_in_sai[Instance]);
 8001846:	4a3f      	ldr	r2, [pc, #252]	; (8001944 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	21b4      	movs	r1, #180	; 0xb4
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	3391      	adds	r3, #145	; 0x91
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	21b4      	movs	r1, #180	; 0xb4
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	33ac      	adds	r3, #172	; 0xac
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	4a36      	ldr	r2, [pc, #216]	; (8001944 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	21b4      	movs	r1, #180	; 0xb4
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	33b0      	adds	r3, #176	; 0xb0
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
    __HAL_SAI_RESET_HANDLE_STATE(&haudio_out_sai);
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 8001886:	2200      	movs	r2, #0
 8001888:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 800188e:	2200      	movs	r2, #0
 8001890:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1U)
    /* Register MspInit/MspDeInit Callbacks */
    if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_MSPINIT_CB_ID, SAI_MspInit) != HAL_OK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	22b4      	movs	r2, #180	; 0xb4
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 800189e:	4413      	add	r3, r2
 80018a0:	4a2a      	ldr	r2, [pc, #168]	; (800194c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x178>)
 80018a2:	2105      	movs	r1, #5
 80018a4:	4618      	mov	r0, r3
 80018a6:	f007 faef 	bl	8008e88 <HAL_SAI_RegisterCallback>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0xe4>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018b0:	f06f 0303 	mvn.w	r3, #3
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e02c      	b.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
    else if(HAL_SAI_RegisterCallback(&haudio_out_sai, HAL_SAI_MSPINIT_CB_ID, SAI_MspInit) != HAL_OK)
 80018b8:	4a24      	ldr	r2, [pc, #144]	; (800194c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x178>)
 80018ba:	2105      	movs	r1, #5
 80018bc:	4822      	ldr	r0, [pc, #136]	; (8001948 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 80018be:	f007 fae3 	bl	8008e88 <HAL_SAI_RegisterCallback>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0xfc>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018c8:	f06f 0303 	mvn.w	r3, #3
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e020      	b.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
    else if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_MSPDEINIT_CB_ID, SAI_MspDeInit) != HAL_OK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	22b4      	movs	r2, #180	; 0xb4
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 80018da:	4413      	add	r3, r2
 80018dc:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x17c>)
 80018de:	2106      	movs	r1, #6
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 fad1 	bl	8008e88 <HAL_SAI_RegisterCallback>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x120>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018ec:	f06f 0303 	mvn.w	r3, #3
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	e00e      	b.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
    else if(HAL_SAI_RegisterCallback(&haudio_out_sai, HAL_SAI_MSPDEINIT_CB_ID, SAI_MspDeInit) != HAL_OK)
 80018f4:	4a16      	ldr	r2, [pc, #88]	; (8001950 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x17c>)
 80018f6:	2106      	movs	r1, #6
 80018f8:	4813      	ldr	r0, [pc, #76]	; (8001948 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 80018fa:	f007 fac5 	bl	8008e88 <HAL_SAI_RegisterCallback>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001904:	f06f 0303 	mvn.w	r3, #3
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e002      	b.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800190c:	f06f 0301 	mvn.w	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
  }

  if(ret == BSP_ERROR_NONE)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x158>
  {
    Audio_In_Ctx[Instance].IsMspCallbacksValid = 1;
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x164>)
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	440b      	add	r3, r1
 8001926:	332c      	adds	r3, #44	; 0x2c
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 800192c:	68fb      	ldr	r3, [r7, #12]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	24000cb0 	.word	0x24000cb0
 800193c:	24000a5c 	.word	0x24000a5c
 8001940:	24000b3c 	.word	0x24000b3c
 8001944:	2400054c 	.word	0x2400054c
 8001948:	24000498 	.word	0x24000498
 800194c:	080004c1 	.word	0x080004c1
 8001950:	08000995 	.word	0x08000995

08001954 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d002      	beq.n	8001972 <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 800196c:	f06f 0301 	mvn.w	r3, #1
 8001970:	e085      	b.n	8001a7e <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001972:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8001974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001978:	4a43      	ldr	r2, [pc, #268]	; (8001a88 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 800197a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800197e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e06e      	b.n	8001a74 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8001996:	4a3d      	ldr	r2, [pc, #244]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	214c      	movs	r1, #76	; 0x4c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	2201      	movs	r2, #1
 80019a4:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80019a6:	4a39      	ldr	r2, [pc, #228]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	214c      	movs	r1, #76	; 0x4c
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	3302      	adds	r3, #2
 80019b4:	2200      	movs	r2, #0
 80019b6:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80019b8:	4a34      	ldr	r2, [pc, #208]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	214c      	movs	r1, #76	; 0x4c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3304      	adds	r3, #4
 80019c6:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 80019c8:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b298      	uxth	r0, r3
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	214c      	movs	r1, #76	; 0x4c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	330a      	adds	r3, #10
 80019dc:	4602      	mov	r2, r0
 80019de:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	b298      	uxth	r0, r3
 80019e4:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	214c      	movs	r1, #76	; 0x4c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3308      	adds	r3, #8
 80019f2:	4602      	mov	r2, r0
 80019f4:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	224c      	movs	r2, #76	; 0x4c
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4a23      	ldr	r2, [pc, #140]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001a00:	4413      	add	r3, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f009 fd76 	bl	800b4f4 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	b298      	uxth	r0, r3
 8001a14:	4920      	ldr	r1, [pc, #128]	; (8001a98 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	440b      	add	r3, r1
 8001a22:	3302      	adds	r3, #2
 8001a24:	4602      	mov	r2, r0
 8001a26:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 8001a28:	491b      	ldr	r1, [pc, #108]	; (8001a98 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	440b      	add	r3, r1
 8001a36:	3304      	adds	r3, #4
 8001a38:	2218      	movs	r2, #24
 8001a3a:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 8001a3c:	4916      	ldr	r1, [pc, #88]	; (8001a98 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	440b      	add	r3, r1
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	224c      	movs	r2, #76	; 0x4c
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001a58:	1898      	adds	r0, r3, r2
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001a66:	4413      	add	r3, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f009 fe13 	bl	800b694 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d38c      	bcc.n	8001996 <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	24000898 	.word	0x24000898
 8001a90:	7e809d48 	.word	0x7e809d48
 8001a94:	10624dd3 	.word	0x10624dd3
 8001a98:	24000930 	.word	0x24000930

08001a9c <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d003      	beq.n	8001aba <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ab2:	f06f 0301 	mvn.w	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e01d      	b.n	8001af6 <BSP_AUDIO_IN_RecordPDM+0x5a>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[Instance], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	22b4      	movs	r2, #180	; 0xb4
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <BSP_AUDIO_IN_RecordPDM+0x64>)
 8001ac4:	1898      	adds	r0, r3, r2
 8001ac6:	490f      	ldr	r1, [pc, #60]	; (8001b04 <BSP_AUDIO_IN_RecordPDM+0x68>)
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	440b      	add	r3, r1
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	08db      	lsrs	r3, r3, #3
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	f007 fa61 	bl	8008fac <HAL_SAI_Receive_DMA>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <BSP_AUDIO_IN_RecordPDM+0x5a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001af0:	f06f 0303 	mvn.w	r3, #3
 8001af4:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8001af6:	697b      	ldr	r3, [r7, #20]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	2400054c 	.word	0x2400054c
 8001b04:	24000cb0 	.word	0x24000cb0

08001b08 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
static void SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff ffe5 	bl	8001b1c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
static void SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff ffd0 	bl	8001b08 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08e      	sub	sp, #56	; 0x38
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8001b84:	4b49      	ldr	r3, [pc, #292]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b8a:	4a48      	ldr	r2, [pc, #288]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b9e:	623b      	str	r3, [r7, #32]
 8001ba0:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO clock */
  AUDIO_DFSDM1_CKOUT_GPIO_CLK_ENABLE();
 8001ba2:	4b42      	ldr	r3, [pc, #264]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a40      	ldr	r2, [pc, #256]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
  AUDIO_DFSDMx_DATIN_MIC1_GPIO_CLK_ENABLE();
 8001bc0:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc6:	4a39      	ldr	r2, [pc, #228]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001bc8:	f043 0310 	orr.w	r3, r3, #16
 8001bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd0:	4b36      	ldr	r3, [pc, #216]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
  AUDIO_DFSDMx_DATIN_MIC2_GPIO_CLK_ENABLE();
 8001bde:	4b33      	ldr	r3, [pc, #204]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be4:	4a31      	ldr	r2, [pc, #196]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001be6:	f043 0310 	orr.w	r3, r3, #16
 8001bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
  AUDIO_DFSDMx_DATIN_MIC3_GPIO_CLK_ENABLE();
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	4a2a      	ldr	r2, [pc, #168]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001c04:	f043 0320 	orr.w	r3, r3, #32
 8001c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
  AUDIO_DFSDMx_DATIN_MIC4_GPIO_CLK_ENABLE();
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	4a22      	ldr	r2, [pc, #136]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001c22:	f043 0320 	orr.w	r3, r3, #32
 8001c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <DFSDM_ChannelMspInit+0x13c>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = AUDIO_DFSDM1_CKOUT_PIN;
 8001c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDM1_CKOUT_AF;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8001c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c46:	4619      	mov	r1, r3
 8001c48:	4819      	ldr	r0, [pc, #100]	; (8001cb0 <DFSDM_ChannelMspInit+0x140>)
 8001c4a:	f003 faf1 	bl	8005230 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC1_PIN;
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC1_AF;
 8001c52:	2303      	movs	r3, #3
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC1_GPIO_PORT, &GPIO_InitStruct);
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4814      	ldr	r0, [pc, #80]	; (8001cb0 <DFSDM_ChannelMspInit+0x140>)
 8001c5e:	f003 fae7 	bl	8005230 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC2_PIN;
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC2_AF;
 8001c66:	2303      	movs	r3, #3
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC2_GPIO_PORT, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <DFSDM_ChannelMspInit+0x140>)
 8001c72:	f003 fadd 	bl	8005230 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC3_PIN;
 8001c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC3_AF;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC3_GPIO_PORT, &GPIO_InitStruct);
 8001c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c84:	4619      	mov	r1, r3
 8001c86:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <DFSDM_ChannelMspInit+0x144>)
 8001c88:	f003 fad2 	bl	8005230 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC4_PIN;
 8001c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC4_AF;
 8001c92:	2303      	movs	r3, #3
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC4_GPIO_PORT, &GPIO_InitStruct);
 8001c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <DFSDM_ChannelMspInit+0x144>)
 8001c9e:	f003 fac7 	bl	8005230 <HAL_GPIO_Init>

}
 8001ca2:	bf00      	nop
 8001ca4:	3738      	adds	r7, #56	; 0x38
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	58021000 	.word	0x58021000
 8001cb4:	58021400 	.word	0x58021400

08001cb8 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
static void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b0a1      	sub	sp, #132	; 0x84
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t i, mic_num, mic_init[DFSDM_MIC_NUMBER] = {0};
 8001cc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
  IRQn_Type AUDIO_DFSDM_DMAx_MIC_IRQHandler[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_IRQ, AUDIO_DFSDMx_DMAx_MIC2_IRQ, AUDIO_DFSDMx_DMAx_MIC3_IRQ, AUDIO_DFSDMx_DMAx_MIC4_IRQ};
 8001cce:	4a61      	ldr	r2, [pc, #388]	; (8001e54 <DFSDM_FilterMspInit+0x19c>)
 8001cd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd8:	e883 0003 	stmia.w	r3, {r0, r1}
  DMA_Stream_TypeDef* AUDIO_DFSDMx_DMAx_MIC_STREAM[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_STREAM, AUDIO_DFSDMx_DMAx_MIC2_STREAM, AUDIO_DFSDMx_DMAx_MIC3_STREAM, AUDIO_DFSDMx_DMAx_MIC4_STREAM};
 8001cdc:	4b5e      	ldr	r3, [pc, #376]	; (8001e58 <DFSDM_FilterMspInit+0x1a0>)
 8001cde:	f107 0420 	add.w	r4, r7, #32
 8001ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t AUDIO_DFSDMx_DMAx_MIC_REQUEST[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_REQUEST, AUDIO_DFSDMx_DMAx_MIC2_REQUEST, AUDIO_DFSDMx_DMAx_MIC3_REQUEST, AUDIO_DFSDMx_DMAx_MIC4_REQUEST};
 8001ce8:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <DFSDM_FilterMspInit+0x1a4>)
 8001cea:	f107 0410 	add.w	r4, r7, #16
 8001cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmFilter);

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8001cf4:	4b5a      	ldr	r3, [pc, #360]	; (8001e60 <DFSDM_FilterMspInit+0x1a8>)
 8001cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cfa:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <DFSDM_FilterMspInit+0x1a8>)
 8001cfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d04:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <DFSDM_FilterMspInit+0x1a8>)
 8001d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DMA clock */
  AUDIO_DFSDM1_DMAx_CLK_ENABLE();
 8001d12:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <DFSDM_FilterMspInit+0x1a8>)
 8001d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d18:	4a51      	ldr	r2, [pc, #324]	; (8001e60 <DFSDM_FilterMspInit+0x1a8>)
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d22:	4b4f      	ldr	r3, [pc, #316]	; (8001e60 <DFSDM_FilterMspInit+0x1a8>)
 8001d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]

  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d34:	e194      	b.n	8002060 <DFSDM_FilterMspInit+0x3a8>
 8001d36:	2310      	movs	r3, #16
 8001d38:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	66fb      	str	r3, [r7, #108]	; 0x6c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d44:	677b      	str	r3, [r7, #116]	; 0x74
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <DFSDM_FilterMspInit+0x98>
  {
    return 32U;
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	e003      	b.n	8001d58 <DFSDM_FilterMspInit+0xa0>
  }
  return __builtin_clz(value);
 8001d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
  {
    if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8001d58:	3b04      	subs	r3, #4
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001d60:	4413      	add	r3, r2
 8001d62:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d010      	beq.n	8001d8c <DFSDM_FilterMspInit+0xd4>
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <DFSDM_FilterMspInit+0x1ac>)
 8001d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <DFSDM_FilterMspInit+0xd4>
    {
      mic_num = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001d82:	4413      	add	r3, r2
 8001d84:	2201      	movs	r2, #1
 8001d86:	f843 2c48 	str.w	r2, [r3, #-72]
 8001d8a:	e08c      	b.n	8001ea6 <DFSDM_FilterMspInit+0x1ee>
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d9a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <DFSDM_FilterMspInit+0xee>
    return 32U;
 8001da2:	2320      	movs	r3, #32
 8001da4:	e003      	b.n	8001dae <DFSDM_FilterMspInit+0xf6>
  return __builtin_clz(value);
 8001da6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2))
 8001dae:	3b04      	subs	r3, #4
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001db6:	4413      	add	r3, r2
 8001db8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d010      	beq.n	8001de2 <DFSDM_FilterMspInit+0x12a>
 8001dc0:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <DFSDM_FilterMspInit+0x1ac>)
 8001dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <DFSDM_FilterMspInit+0x12a>
    {
      mic_num = 1U;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001dd8:	4413      	add	r3, r2
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f843 2c48 	str.w	r2, [r3, #-72]
 8001de0:	e061      	b.n	8001ea6 <DFSDM_FilterMspInit+0x1ee>
 8001de2:	2340      	movs	r3, #64	; 0x40
 8001de4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <DFSDM_FilterMspInit+0x144>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e003      	b.n	8001e04 <DFSDM_FilterMspInit+0x14c>
  return __builtin_clz(value);
 8001dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC3)] != 1U) &&((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC3) == AUDIO_IN_DEVICE_DIGITAL_MIC3))
 8001e04:	3b04      	subs	r3, #4
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d010      	beq.n	8001e38 <DFSDM_FilterMspInit+0x180>
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <DFSDM_FilterMspInit+0x1ac>)
 8001e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <DFSDM_FilterMspInit+0x180>
    {
      mic_num = 2U;
 8001e22:	2302      	movs	r3, #2
 8001e24:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001e2e:	4413      	add	r3, r2
 8001e30:	2201      	movs	r2, #1
 8001e32:	f843 2c48 	str.w	r2, [r3, #-72]
 8001e36:	e036      	b.n	8001ea6 <DFSDM_FilterMspInit+0x1ee>
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e46:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <DFSDM_FilterMspInit+0x1b0>
    return 32U;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	e00e      	b.n	8001e70 <DFSDM_FilterMspInit+0x1b8>
 8001e52:	bf00      	nop
 8001e54:	0800bce0 	.word	0x0800bce0
 8001e58:	0800bce8 	.word	0x0800bce8
 8001e5c:	0800bcf8 	.word	0x0800bcf8
 8001e60:	58024400 	.word	0x58024400
 8001e64:	24000cb0 	.word	0x24000cb0
  return __builtin_clz(value);
 8001e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC4)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC4) == AUDIO_IN_DEVICE_DIGITAL_MIC4))
 8001e70:	3b04      	subs	r3, #4
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001e78:	4413      	add	r3, r2
 8001e7a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	f000 80f2 	beq.w	8002068 <DFSDM_FilterMspInit+0x3b0>
 8001e84:	4b7a      	ldr	r3, [pc, #488]	; (8002070 <DFSDM_FilterMspInit+0x3b8>)
 8001e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80eb 	beq.w	8002068 <DFSDM_FilterMspInit+0x3b0>
    {
      mic_num = 3U;
 8001e92:	2303      	movs	r3, #3
 8001e94:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f843 2c48 	str.w	r2, [r3, #-72]
    else
    {
      break;
    }
    /* Configure the hDmaDfsdm[i] handle parameters */
    hDmaDfsdm[mic_num].Init.Request             = AUDIO_DFSDMx_DMAx_MIC_REQUEST[mic_num];
 8001ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001eae:	4413      	add	r3, r2
 8001eb0:	f853 1c70 	ldr.w	r1, [r3, #-112]
 8001eb4:	486f      	ldr	r0, [pc, #444]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001eb6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001eb8:	4613      	mov	r3, r2
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4403      	add	r3, r0
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Instance                 = AUDIO_DFSDMx_DMAx_MIC_STREAM[mic_num];
 8001ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001ece:	4413      	add	r3, r2
 8001ed0:	f853 1c60 	ldr.w	r1, [r3, #-96]
 8001ed4:	4867      	ldr	r0, [pc, #412]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001ed6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ed8:	4613      	mov	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4403      	add	r3, r0
 8001ee2:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001ee4:	4963      	ldr	r1, [pc, #396]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001ee6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ee8:	4613      	mov	r3, r2
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphInc           = DMA_PINC_DISABLE;
 8001ef8:	495e      	ldr	r1, [pc, #376]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001efa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001efc:	4613      	mov	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	330c      	adds	r3, #12
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemInc              = DMA_MINC_ENABLE;
 8001f0c:	4959      	ldr	r1, [pc, #356]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001f0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f10:	4613      	mov	r3, r2
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3310      	adds	r3, #16
 8001f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f20:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f22:	4954      	ldr	r1, [pc, #336]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f26:	4613      	mov	r3, r2
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	3314      	adds	r3, #20
 8001f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f36:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001f38:	494e      	ldr	r1, [pc, #312]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001f3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	3318      	adds	r3, #24
 8001f48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f4c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Mode                = DMA_CIRCULAR;
 8001f4e:	4949      	ldr	r1, [pc, #292]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001f50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f52:	4613      	mov	r3, r2
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	331c      	adds	r3, #28
 8001f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f62:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Priority            = DMA_PRIORITY_HIGH;
 8001f64:	4943      	ldr	r1, [pc, #268]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001f66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f68:	4613      	mov	r3, r2
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3320      	adds	r3, #32
 8001f74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f78:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001f7a:	493e      	ldr	r1, [pc, #248]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001f7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f7e:	4613      	mov	r3, r2
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	3324      	adds	r3, #36	; 0x24
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemBurst            = DMA_MBURST_SINGLE;
 8001f8e:	4939      	ldr	r1, [pc, #228]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001f90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f92:	4613      	mov	r3, r2
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	332c      	adds	r3, #44	; 0x2c
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8001fa2:	4934      	ldr	r1, [pc, #208]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001fa4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	3330      	adds	r3, #48	; 0x30
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].State                    = HAL_DMA_STATE_RESET;
 8001fb6:	492f      	ldr	r1, [pc, #188]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001fb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3335      	adds	r3, #53	; 0x35
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_dfsdm_filter[mic_num], hdmaReg, hDmaDfsdm[mic_num]);
 8001fca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4a27      	ldr	r2, [pc, #156]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001fd6:	441a      	add	r2, r3
 8001fd8:	4927      	ldr	r1, [pc, #156]	; (8002078 <DFSDM_FilterMspInit+0x3c0>)
 8001fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fdc:	2054      	movs	r0, #84	; 0x54
 8001fde:	fb00 f303 	mul.w	r3, r0, r3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3328      	adds	r3, #40	; 0x28
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fea:	2254      	movs	r2, #84	; 0x54
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	4a21      	ldr	r2, [pc, #132]	; (8002078 <DFSDM_FilterMspInit+0x3c0>)
 8001ff2:	1899      	adds	r1, r3, r2
 8001ff4:	481f      	ldr	r0, [pc, #124]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8001ff6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4403      	add	r3, r0
 8002002:	3338      	adds	r3, #56	; 0x38
 8002004:	6019      	str	r1, [r3, #0]

    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaDfsdm[mic_num]);
 8002006:	491b      	ldr	r1, [pc, #108]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8002008:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	3335      	adds	r3, #53	; 0x35
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&hDmaDfsdm[mic_num]);
 800201a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800201c:	4613      	mov	r3, r2
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4a13      	ldr	r2, [pc, #76]	; (8002074 <DFSDM_FilterMspInit+0x3bc>)
 8002026:	4413      	add	r3, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fd25 	bl	8002a78 <HAL_DMA_Init>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num], BSP_AUDIO_IN_IT_PRIORITY, 0);
 800202e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002036:	4413      	add	r3, r2
 8002038:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 800203c:	2200      	movs	r2, #0
 800203e:	210f      	movs	r1, #15
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f9ac 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num]);
 8002046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800204e:	4413      	add	r3, r2
 8002050:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002054:	4618      	mov	r0, r3
 8002056:	f000 f9bc 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 800205a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800205c:	3301      	adds	r3, #1
 800205e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002062:	2b03      	cmp	r3, #3
 8002064:	f67f ae67 	bls.w	8001d36 <DFSDM_FilterMspInit+0x7e>
  }
}
 8002068:	bf00      	nop
 800206a:	3784      	adds	r7, #132	; 0x84
 800206c:	46bd      	mov	sp, r7
 800206e:	bd90      	pop	{r4, r7, pc}
 8002070:	24000cb0 	.word	0x24000cb0
 8002074:	240006b8 	.word	0x240006b8
 8002078:	24000b3c 	.word	0x24000b3c

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002082:	2003      	movs	r0, #3
 8002084:	f000 f980 	bl	8002388 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002088:	f004 f938 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_Init+0x68>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	4913      	ldr	r1, [pc, #76]	; (80020e8 <HAL_Init+0x6c>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_Init+0x68>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_Init+0x6c>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
 80020bc:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <HAL_Init+0x70>)
 80020be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <HAL_Init+0x74>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 f814 	bl	80020f4 <HAL_InitTick>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e002      	b.n	80020dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020d6:	f007 fa49 	bl	800956c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	58024400 	.word	0x58024400
 80020e8:	0800bd48 	.word	0x0800bd48
 80020ec:	2400040c 	.word	0x2400040c
 80020f0:	24000408 	.word	0x24000408

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_InitTick+0x60>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e021      	b.n	800214c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_InitTick+0x64>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_InitTick+0x60>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4619      	mov	r1, r3
 8002112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002116:	fbb3 f3f1 	udiv	r3, r3, r1
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f973 	bl	800240a <HAL_SYSTICK_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e00e      	b.n	800214c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d80a      	bhi.n	800214a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002134:	2200      	movs	r2, #0
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800213c:	f000 f92f 	bl	800239e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <HAL_InitTick+0x68>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	24000404 	.word	0x24000404
 8002158:	24000408 	.word	0x24000408
 800215c:	24000400 	.word	0x24000400

08002160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_IncTick+0x20>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_IncTick+0x24>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_IncTick+0x24>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	24000404 	.word	0x24000404
 8002184:	24000d40 	.word	0x24000d40

08002188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_GetTick+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	24000d40 	.word	0x24000d40

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <__NVIC_SetPriorityGrouping+0x40>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ce:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <__NVIC_SetPriorityGrouping+0x40>)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00
 80021e4:	05fa0000 	.word	0x05fa0000

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800224a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800224e:	2b00      	cmp	r3, #0
 8002250:	db12      	blt.n	8002278 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	490a      	ldr	r1, [pc, #40]	; (8002284 <__NVIC_DisableIRQ+0x44>)
 800225a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2001      	movs	r0, #1
 8002262:	fa00 f202 	lsl.w	r2, r0, r2
 8002266:	3320      	adds	r3, #32
 8002268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800226c:	f3bf 8f4f 	dsb	sy
}
 8002270:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002272:	f3bf 8f6f 	isb	sy
}
 8002276:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	; (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002354:	d301      	bcc.n	800235a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002356:	2301      	movs	r3, #1
 8002358:	e00f      	b.n	800237a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <SysTick_Config+0x40>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002362:	210f      	movs	r1, #15
 8002364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002368:	f7ff ff8e 	bl	8002288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <SysTick_Config+0x40>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <SysTick_Config+0x40>)
 8002374:	2207      	movs	r2, #7
 8002376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	e000e010 	.word	0xe000e010

08002388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff05 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff1c 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff90 	bl	80022dc <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5f 	bl	8002288 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff0f 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80023f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff1f 	bl	8002240 <__NVIC_DisableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff96 	bl	8002344 <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e054      	b.n	80024e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7f5b      	ldrb	r3, [r3, #29]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f007 f8aa 	bl	80095a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	791b      	ldrb	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <HAL_CRC_Init+0xc4>)
 8002460:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0218 	bic.w	r2, r2, #24
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	e00c      	b.n	800248e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6899      	ldr	r1, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	461a      	mov	r2, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f834 	bl	80024ec <HAL_CRCEx_Polynomial_Set>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e028      	b.n	80024e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	795b      	ldrb	r3, [r3, #5]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800249e:	611a      	str	r2, [r3, #16]
 80024a0:	e004      	b.n	80024ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6912      	ldr	r2, [r2, #16]
 80024aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	04c11db7 	.word	0x04c11db7

080024ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80024fc:	231f      	movs	r3, #31
 80024fe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002500:	bf00      	nop
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1e5a      	subs	r2, r3, #1
 8002506:	613a      	str	r2, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <HAL_CRCEx_Polynomial_Set+0x34>
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_CRCEx_Polynomial_Set+0x16>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b18      	cmp	r3, #24
 8002524:	d846      	bhi.n	80025b4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002526:	a201      	add	r2, pc, #4	; (adr r2, 800252c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	080025bb 	.word	0x080025bb
 8002530:	080025b5 	.word	0x080025b5
 8002534:	080025b5 	.word	0x080025b5
 8002538:	080025b5 	.word	0x080025b5
 800253c:	080025b5 	.word	0x080025b5
 8002540:	080025b5 	.word	0x080025b5
 8002544:	080025b5 	.word	0x080025b5
 8002548:	080025b5 	.word	0x080025b5
 800254c:	080025a9 	.word	0x080025a9
 8002550:	080025b5 	.word	0x080025b5
 8002554:	080025b5 	.word	0x080025b5
 8002558:	080025b5 	.word	0x080025b5
 800255c:	080025b5 	.word	0x080025b5
 8002560:	080025b5 	.word	0x080025b5
 8002564:	080025b5 	.word	0x080025b5
 8002568:	080025b5 	.word	0x080025b5
 800256c:	0800259d 	.word	0x0800259d
 8002570:	080025b5 	.word	0x080025b5
 8002574:	080025b5 	.word	0x080025b5
 8002578:	080025b5 	.word	0x080025b5
 800257c:	080025b5 	.word	0x080025b5
 8002580:	080025b5 	.word	0x080025b5
 8002584:	080025b5 	.word	0x080025b5
 8002588:	080025b5 	.word	0x080025b5
 800258c:	08002591 	.word	0x08002591
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b06      	cmp	r3, #6
 8002594:	d913      	bls.n	80025be <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800259a:	e010      	b.n	80025be <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b07      	cmp	r3, #7
 80025a0:	d90f      	bls.n	80025c2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80025a6:	e00c      	b.n	80025c2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b0f      	cmp	r3, #15
 80025ac:	d90b      	bls.n	80025c6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80025b2:	e008      	b.n	80025c6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	75fb      	strb	r3, [r7, #23]
      break;
 80025b8:	e006      	b.n	80025c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80025ba:	bf00      	nop
 80025bc:	e004      	b.n	80025c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80025c6:	bf00      	nop
  }
  if (status == HAL_OK)
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 0118 	bic.w	r1, r3, #24
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0b4      	b.n	8002774 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800260a:	4b5c      	ldr	r3, [pc, #368]	; (800277c <HAL_DFSDM_ChannelInit+0x184>)
 800260c:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 800260e:	4b5c      	ldr	r3, [pc, #368]	; (8002780 <HAL_DFSDM_ChannelInit+0x188>)
 8002610:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8002612:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <HAL_DFSDM_ChannelInit+0x18c>)
 8002614:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f9e0 	bl	80029e0 <DFSDM_GetChannelFromInstance>
 8002620:	4603      	mov	r3, r0
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0a0      	b.n	8002774 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f006 ffd6 	bl	80095e4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d125      	bne.n	8002696 <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	431a      	orrs	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	791b      	ldrb	r3, [r3, #4]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d108      	bne.n	800268a <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	3b01      	subs	r3, #1
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	431a      	orrs	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80026a4:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026b4:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80026ba:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 020f 	bic.w	r2, r2, #15
 80026d2:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80026fa:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f002 0207 	and.w	r2, r2, #7
 8002726:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002752:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 f93d 	bl	80029e0 <DFSDM_GetChannelFromInstance>
 8002766:	4603      	mov	r3, r0
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	24000a2c 	.word	0x24000a2c
 8002780:	24000a30 	.word	0x24000a30
 8002784:	40017800 	.word	0x40017800

08002788 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0c8      	b.n	800292c <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 800279a:	4b66      	ldr	r3, [pc, #408]	; (8002934 <HAL_DFSDM_FilterInit+0x1ac>)
 800279c:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d109      	bne.n	80027bc <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d003      	beq.n	80027b8 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b7      	b.n	800292c <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8b3 	bl	8002940 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80027e8:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7a1b      	ldrb	r3, [r3, #8]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d108      	bne.n	8002804 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e007      	b.n	8002814 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002812:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7a5b      	ldrb	r3, [r3, #9]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d108      	bne.n	800282e <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e007      	b.n	800283e <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800283c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_DFSDM_FilterInit+0x1b0>)
 800284a:	400b      	ands	r3, r1
 800284c:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d108      	bne.n	8002868 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6819      	ldr	r1, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7c1b      	ldrb	r3, [r3, #16]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d108      	bne.n	8002882 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0210 	orr.w	r2, r2, #16
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e007      	b.n	8002892 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0210 	bic.w	r2, r2, #16
 8002890:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7c5b      	ldrb	r3, [r3, #17]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d108      	bne.n	80028ac <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0220 	orr.w	r2, r2, #32
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	e007      	b.n	80028bc <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0220 	bic.w	r2, r2, #32
 80028ba:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6959      	ldr	r1, [r3, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_DFSDM_FilterInit+0x1b4>)
 80028c8:	400b      	ands	r3, r1
 80028ca:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6959      	ldr	r1, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	3b01      	subs	r3, #1
 80028dc:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80028de:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80028e6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7c1a      	ldrb	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40017900 	.word	0x40017900
 8002938:	ffff80f7 	.word	0xffff80f7
 800293c:	1c00ff00 	.word	0x1c00ff00

08002940 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d02c      	beq.n	80029c8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002974:	2bff      	cmp	r3, #255	; 0xff
 8002976:	d027      	beq.n	80029c8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002984:	400b      	ands	r3, r1
 8002986:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d10d      	bne.n	80029aa <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800299c:	431a      	orrs	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e00a      	b.n	80029c0 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
 80029c6:	e001      	b.n	80029cc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	f8fbffff 	.word	0xf8fbffff

080029e0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <DFSDM_GetChannelFromInstance+0x7c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d102      	bne.n	80029f6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e02b      	b.n	8002a4e <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <DFSDM_GetChannelFromInstance+0x80>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d102      	bne.n	8002a04 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e024      	b.n	8002a4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <DFSDM_GetChannelFromInstance+0x84>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d102      	bne.n	8002a12 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e01d      	b.n	8002a4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <DFSDM_GetChannelFromInstance+0x88>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d102      	bne.n	8002a20 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e016      	b.n	8002a4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <DFSDM_GetChannelFromInstance+0x8c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d102      	bne.n	8002a2e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002a28:	2304      	movs	r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e00f      	b.n	8002a4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a0f      	ldr	r2, [pc, #60]	; (8002a70 <DFSDM_GetChannelFromInstance+0x90>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d102      	bne.n	8002a3c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002a36:	2305      	movs	r3, #5
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e008      	b.n	8002a4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <DFSDM_GetChannelFromInstance+0x94>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d102      	bne.n	8002a4a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002a44:	2306      	movs	r3, #6
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e001      	b.n	8002a4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40017800 	.word	0x40017800
 8002a60:	40017820 	.word	0x40017820
 8002a64:	40017840 	.word	0x40017840
 8002a68:	40017860 	.word	0x40017860
 8002a6c:	40017880 	.word	0x40017880
 8002a70:	400178a0 	.word	0x400178a0
 8002a74:	400178c0 	.word	0x400178c0

08002a78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a80:	f7ff fb82 	bl	8002188 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e314      	b.n	80030ba <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a66      	ldr	r2, [pc, #408]	; (8002c30 <HAL_DMA_Init+0x1b8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d04a      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_DMA_Init+0x1bc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d045      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a63      	ldr	r2, [pc, #396]	; (8002c38 <HAL_DMA_Init+0x1c0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d040      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a62      	ldr	r2, [pc, #392]	; (8002c3c <HAL_DMA_Init+0x1c4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d03b      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a60      	ldr	r2, [pc, #384]	; (8002c40 <HAL_DMA_Init+0x1c8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d036      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5f      	ldr	r2, [pc, #380]	; (8002c44 <HAL_DMA_Init+0x1cc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d031      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5d      	ldr	r2, [pc, #372]	; (8002c48 <HAL_DMA_Init+0x1d0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02c      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a5c      	ldr	r2, [pc, #368]	; (8002c4c <HAL_DMA_Init+0x1d4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d027      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a5a      	ldr	r2, [pc, #360]	; (8002c50 <HAL_DMA_Init+0x1d8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d022      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a59      	ldr	r2, [pc, #356]	; (8002c54 <HAL_DMA_Init+0x1dc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d01d      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a57      	ldr	r2, [pc, #348]	; (8002c58 <HAL_DMA_Init+0x1e0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d018      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a56      	ldr	r2, [pc, #344]	; (8002c5c <HAL_DMA_Init+0x1e4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d013      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a54      	ldr	r2, [pc, #336]	; (8002c60 <HAL_DMA_Init+0x1e8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00e      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a53      	ldr	r2, [pc, #332]	; (8002c64 <HAL_DMA_Init+0x1ec>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_DMA_Init+0x1f0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_Init+0xb8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a50      	ldr	r2, [pc, #320]	; (8002c6c <HAL_DMA_Init+0x1f4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d101      	bne.n	8002b34 <HAL_DMA_Init+0xbc>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_DMA_Init+0xbe>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 813c 	beq.w	8002db4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a37      	ldr	r2, [pc, #220]	; (8002c30 <HAL_DMA_Init+0x1b8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d04a      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a36      	ldr	r2, [pc, #216]	; (8002c34 <HAL_DMA_Init+0x1bc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d045      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a34      	ldr	r2, [pc, #208]	; (8002c38 <HAL_DMA_Init+0x1c0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d040      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a33      	ldr	r2, [pc, #204]	; (8002c3c <HAL_DMA_Init+0x1c4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d03b      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a31      	ldr	r2, [pc, #196]	; (8002c40 <HAL_DMA_Init+0x1c8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d036      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a30      	ldr	r2, [pc, #192]	; (8002c44 <HAL_DMA_Init+0x1cc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d031      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2e      	ldr	r2, [pc, #184]	; (8002c48 <HAL_DMA_Init+0x1d0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d02c      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2d      	ldr	r2, [pc, #180]	; (8002c4c <HAL_DMA_Init+0x1d4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d027      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a2b      	ldr	r2, [pc, #172]	; (8002c50 <HAL_DMA_Init+0x1d8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d022      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a2a      	ldr	r2, [pc, #168]	; (8002c54 <HAL_DMA_Init+0x1dc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d01d      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <HAL_DMA_Init+0x1e0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d018      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <HAL_DMA_Init+0x1e4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d013      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <HAL_DMA_Init+0x1e8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00e      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a24      	ldr	r2, [pc, #144]	; (8002c64 <HAL_DMA_Init+0x1ec>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <HAL_DMA_Init+0x1f0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_DMA_Init+0x174>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a21      	ldr	r2, [pc, #132]	; (8002c6c <HAL_DMA_Init+0x1f4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d108      	bne.n	8002bfe <HAL_DMA_Init+0x186>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e007      	b.n	8002c0e <HAL_DMA_Init+0x196>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c0e:	e02f      	b.n	8002c70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c10:	f7ff faba 	bl	8002188 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d928      	bls.n	8002c70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2203      	movs	r2, #3
 8002c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e244      	b.n	80030ba <HAL_DMA_Init+0x642>
 8002c30:	40020010 	.word	0x40020010
 8002c34:	40020028 	.word	0x40020028
 8002c38:	40020040 	.word	0x40020040
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	40020070 	.word	0x40020070
 8002c44:	40020088 	.word	0x40020088
 8002c48:	400200a0 	.word	0x400200a0
 8002c4c:	400200b8 	.word	0x400200b8
 8002c50:	40020410 	.word	0x40020410
 8002c54:	40020428 	.word	0x40020428
 8002c58:	40020440 	.word	0x40020440
 8002c5c:	40020458 	.word	0x40020458
 8002c60:	40020470 	.word	0x40020470
 8002c64:	40020488 	.word	0x40020488
 8002c68:	400204a0 	.word	0x400204a0
 8002c6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1c8      	bne.n	8002c10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4b84      	ldr	r3, [pc, #528]	; (8002e9c <HAL_DMA_Init+0x424>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d107      	bne.n	8002cd4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b28      	cmp	r3, #40	; 0x28
 8002cda:	d903      	bls.n	8002ce4 <HAL_DMA_Init+0x26c>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8002ce2:	d91f      	bls.n	8002d24 <HAL_DMA_Init+0x2ac>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b3e      	cmp	r3, #62	; 0x3e
 8002cea:	d903      	bls.n	8002cf4 <HAL_DMA_Init+0x27c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b42      	cmp	r3, #66	; 0x42
 8002cf2:	d917      	bls.n	8002d24 <HAL_DMA_Init+0x2ac>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b46      	cmp	r3, #70	; 0x46
 8002cfa:	d903      	bls.n	8002d04 <HAL_DMA_Init+0x28c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b48      	cmp	r3, #72	; 0x48
 8002d02:	d90f      	bls.n	8002d24 <HAL_DMA_Init+0x2ac>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b4e      	cmp	r3, #78	; 0x4e
 8002d0a:	d903      	bls.n	8002d14 <HAL_DMA_Init+0x29c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b52      	cmp	r3, #82	; 0x52
 8002d12:	d907      	bls.n	8002d24 <HAL_DMA_Init+0x2ac>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b73      	cmp	r3, #115	; 0x73
 8002d1a:	d905      	bls.n	8002d28 <HAL_DMA_Init+0x2b0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b77      	cmp	r3, #119	; 0x77
 8002d22:	d801      	bhi.n	8002d28 <HAL_DMA_Init+0x2b0>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_DMA_Init+0x2b2>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d34:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f023 0307 	bic.w	r3, r3, #7
 8002d4c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d117      	bne.n	8002d90 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00e      	beq.n	8002d90 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f001 ff9a 	bl	8004cac <DMA_CheckFifoParam>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2240      	movs	r2, #64	; 0x40
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e194      	b.n	80030ba <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f001 fed5 	bl	8004b48 <DMA_CalcBaseAndBitshift>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	223f      	movs	r2, #63	; 0x3f
 8002dac:	409a      	lsls	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	e0ca      	b.n	8002f4a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a39      	ldr	r2, [pc, #228]	; (8002ea0 <HAL_DMA_Init+0x428>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_DMA_Init+0x38c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a38      	ldr	r2, [pc, #224]	; (8002ea4 <HAL_DMA_Init+0x42c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01d      	beq.n	8002e04 <HAL_DMA_Init+0x38c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a36      	ldr	r2, [pc, #216]	; (8002ea8 <HAL_DMA_Init+0x430>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d018      	beq.n	8002e04 <HAL_DMA_Init+0x38c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a35      	ldr	r2, [pc, #212]	; (8002eac <HAL_DMA_Init+0x434>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_Init+0x38c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a33      	ldr	r2, [pc, #204]	; (8002eb0 <HAL_DMA_Init+0x438>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <HAL_DMA_Init+0x38c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a32      	ldr	r2, [pc, #200]	; (8002eb4 <HAL_DMA_Init+0x43c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_DMA_Init+0x38c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a30      	ldr	r2, [pc, #192]	; (8002eb8 <HAL_DMA_Init+0x440>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_DMA_Init+0x38c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <HAL_DMA_Init+0x444>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d101      	bne.n	8002e08 <HAL_DMA_Init+0x390>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_DMA_Init+0x392>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8094 	beq.w	8002f38 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <HAL_DMA_Init+0x428>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d021      	beq.n	8002e5e <HAL_DMA_Init+0x3e6>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <HAL_DMA_Init+0x42c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d01c      	beq.n	8002e5e <HAL_DMA_Init+0x3e6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <HAL_DMA_Init+0x430>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d017      	beq.n	8002e5e <HAL_DMA_Init+0x3e6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_DMA_Init+0x434>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d012      	beq.n	8002e5e <HAL_DMA_Init+0x3e6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <HAL_DMA_Init+0x438>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00d      	beq.n	8002e5e <HAL_DMA_Init+0x3e6>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <HAL_DMA_Init+0x43c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d008      	beq.n	8002e5e <HAL_DMA_Init+0x3e6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <HAL_DMA_Init+0x440>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d003      	beq.n	8002e5e <HAL_DMA_Init+0x3e6>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_DMA_Init+0x444>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_DMA_Init+0x448>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	d01d      	beq.n	8002ec4 <HAL_DMA_Init+0x44c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b80      	cmp	r3, #128	; 0x80
 8002e8e:	d102      	bne.n	8002e96 <HAL_DMA_Init+0x41e>
 8002e90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e94:	e017      	b.n	8002ec6 <HAL_DMA_Init+0x44e>
 8002e96:	2300      	movs	r3, #0
 8002e98:	e015      	b.n	8002ec6 <HAL_DMA_Init+0x44e>
 8002e9a:	bf00      	nop
 8002e9c:	fe10803f 	.word	0xfe10803f
 8002ea0:	58025408 	.word	0x58025408
 8002ea4:	5802541c 	.word	0x5802541c
 8002ea8:	58025430 	.word	0x58025430
 8002eac:	58025444 	.word	0x58025444
 8002eb0:	58025458 	.word	0x58025458
 8002eb4:	5802546c 	.word	0x5802546c
 8002eb8:	58025480 	.word	0x58025480
 8002ebc:	58025494 	.word	0x58025494
 8002ec0:	fffe000f 	.word	0xfffe000f
 8002ec4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68d2      	ldr	r2, [r2, #12]
 8002eca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ecc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ed4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002edc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ee4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002eec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ef4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b6e      	ldr	r3, [pc, #440]	; (80030c4 <HAL_DMA_Init+0x64c>)
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a6e      	ldr	r2, [pc, #440]	; (80030c8 <HAL_DMA_Init+0x650>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	009a      	lsls	r2, r3, #2
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f001 fe13 	bl	8004b48 <DMA_CalcBaseAndBitshift>
 8002f22:	4603      	mov	r3, r0
 8002f24:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2201      	movs	r2, #1
 8002f30:	409a      	lsls	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e008      	b.n	8002f4a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2203      	movs	r2, #3
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0b7      	b.n	80030ba <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a5f      	ldr	r2, [pc, #380]	; (80030cc <HAL_DMA_Init+0x654>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d072      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5d      	ldr	r2, [pc, #372]	; (80030d0 <HAL_DMA_Init+0x658>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d06d      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a5c      	ldr	r2, [pc, #368]	; (80030d4 <HAL_DMA_Init+0x65c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d068      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5a      	ldr	r2, [pc, #360]	; (80030d8 <HAL_DMA_Init+0x660>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d063      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a59      	ldr	r2, [pc, #356]	; (80030dc <HAL_DMA_Init+0x664>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d05e      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a57      	ldr	r2, [pc, #348]	; (80030e0 <HAL_DMA_Init+0x668>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d059      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a56      	ldr	r2, [pc, #344]	; (80030e4 <HAL_DMA_Init+0x66c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d054      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a54      	ldr	r2, [pc, #336]	; (80030e8 <HAL_DMA_Init+0x670>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d04f      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a53      	ldr	r2, [pc, #332]	; (80030ec <HAL_DMA_Init+0x674>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d04a      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a51      	ldr	r2, [pc, #324]	; (80030f0 <HAL_DMA_Init+0x678>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d045      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a50      	ldr	r2, [pc, #320]	; (80030f4 <HAL_DMA_Init+0x67c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d040      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a4e      	ldr	r2, [pc, #312]	; (80030f8 <HAL_DMA_Init+0x680>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d03b      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a4d      	ldr	r2, [pc, #308]	; (80030fc <HAL_DMA_Init+0x684>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d036      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a4b      	ldr	r2, [pc, #300]	; (8003100 <HAL_DMA_Init+0x688>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d031      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a4a      	ldr	r2, [pc, #296]	; (8003104 <HAL_DMA_Init+0x68c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d02c      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a48      	ldr	r2, [pc, #288]	; (8003108 <HAL_DMA_Init+0x690>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d027      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a47      	ldr	r2, [pc, #284]	; (800310c <HAL_DMA_Init+0x694>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a45      	ldr	r2, [pc, #276]	; (8003110 <HAL_DMA_Init+0x698>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01d      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a44      	ldr	r2, [pc, #272]	; (8003114 <HAL_DMA_Init+0x69c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d018      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a42      	ldr	r2, [pc, #264]	; (8003118 <HAL_DMA_Init+0x6a0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a41      	ldr	r2, [pc, #260]	; (800311c <HAL_DMA_Init+0x6a4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00e      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3f      	ldr	r2, [pc, #252]	; (8003120 <HAL_DMA_Init+0x6a8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a3e      	ldr	r2, [pc, #248]	; (8003124 <HAL_DMA_Init+0x6ac>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d004      	beq.n	800303a <HAL_DMA_Init+0x5c2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a3c      	ldr	r2, [pc, #240]	; (8003128 <HAL_DMA_Init+0x6b0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d101      	bne.n	800303e <HAL_DMA_Init+0x5c6>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_DMA_Init+0x5c8>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d032      	beq.n	80030aa <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f001 fead 	bl	8004da4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d102      	bne.n	8003058 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800306c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d010      	beq.n	8003098 <HAL_DMA_Init+0x620>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b08      	cmp	r3, #8
 800307c:	d80c      	bhi.n	8003098 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f001 ff2a 	bl	8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	e008      	b.n	80030aa <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	a7fdabf8 	.word	0xa7fdabf8
 80030c8:	cccccccd 	.word	0xcccccccd
 80030cc:	40020010 	.word	0x40020010
 80030d0:	40020028 	.word	0x40020028
 80030d4:	40020040 	.word	0x40020040
 80030d8:	40020058 	.word	0x40020058
 80030dc:	40020070 	.word	0x40020070
 80030e0:	40020088 	.word	0x40020088
 80030e4:	400200a0 	.word	0x400200a0
 80030e8:	400200b8 	.word	0x400200b8
 80030ec:	40020410 	.word	0x40020410
 80030f0:	40020428 	.word	0x40020428
 80030f4:	40020440 	.word	0x40020440
 80030f8:	40020458 	.word	0x40020458
 80030fc:	40020470 	.word	0x40020470
 8003100:	40020488 	.word	0x40020488
 8003104:	400204a0 	.word	0x400204a0
 8003108:	400204b8 	.word	0x400204b8
 800310c:	58025408 	.word	0x58025408
 8003110:	5802541c 	.word	0x5802541c
 8003114:	58025430 	.word	0x58025430
 8003118:	58025444 	.word	0x58025444
 800311c:	58025458 	.word	0x58025458
 8003120:	5802546c 	.word	0x5802546c
 8003124:	58025480 	.word	0x58025480
 8003128:	58025494 	.word	0x58025494

0800312c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e1a8      	b.n	8003490 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a82      	ldr	r2, [pc, #520]	; (800334c <HAL_DMA_DeInit+0x220>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04a      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a80      	ldr	r2, [pc, #512]	; (8003350 <HAL_DMA_DeInit+0x224>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d045      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a7f      	ldr	r2, [pc, #508]	; (8003354 <HAL_DMA_DeInit+0x228>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d040      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a7d      	ldr	r2, [pc, #500]	; (8003358 <HAL_DMA_DeInit+0x22c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d03b      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7c      	ldr	r2, [pc, #496]	; (800335c <HAL_DMA_DeInit+0x230>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d036      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a7a      	ldr	r2, [pc, #488]	; (8003360 <HAL_DMA_DeInit+0x234>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a79      	ldr	r2, [pc, #484]	; (8003364 <HAL_DMA_DeInit+0x238>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d02c      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a77      	ldr	r2, [pc, #476]	; (8003368 <HAL_DMA_DeInit+0x23c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d027      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a76      	ldr	r2, [pc, #472]	; (800336c <HAL_DMA_DeInit+0x240>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a74      	ldr	r2, [pc, #464]	; (8003370 <HAL_DMA_DeInit+0x244>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01d      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a73      	ldr	r2, [pc, #460]	; (8003374 <HAL_DMA_DeInit+0x248>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d018      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a71      	ldr	r2, [pc, #452]	; (8003378 <HAL_DMA_DeInit+0x24c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a70      	ldr	r2, [pc, #448]	; (800337c <HAL_DMA_DeInit+0x250>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6e      	ldr	r2, [pc, #440]	; (8003380 <HAL_DMA_DeInit+0x254>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6d      	ldr	r2, [pc, #436]	; (8003384 <HAL_DMA_DeInit+0x258>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_DMA_DeInit+0xb2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a6b      	ldr	r2, [pc, #428]	; (8003388 <HAL_DMA_DeInit+0x25c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d108      	bne.n	80031f0 <HAL_DMA_DeInit+0xc4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e007      	b.n	8003200 <HAL_DMA_DeInit+0xd4>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a51      	ldr	r2, [pc, #324]	; (800334c <HAL_DMA_DeInit+0x220>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d04a      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a50      	ldr	r2, [pc, #320]	; (8003350 <HAL_DMA_DeInit+0x224>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d045      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a4e      	ldr	r2, [pc, #312]	; (8003354 <HAL_DMA_DeInit+0x228>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d040      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a4d      	ldr	r2, [pc, #308]	; (8003358 <HAL_DMA_DeInit+0x22c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d03b      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4b      	ldr	r2, [pc, #300]	; (800335c <HAL_DMA_DeInit+0x230>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d036      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a4a      	ldr	r2, [pc, #296]	; (8003360 <HAL_DMA_DeInit+0x234>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d031      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a48      	ldr	r2, [pc, #288]	; (8003364 <HAL_DMA_DeInit+0x238>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d02c      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a47      	ldr	r2, [pc, #284]	; (8003368 <HAL_DMA_DeInit+0x23c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d027      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a45      	ldr	r2, [pc, #276]	; (800336c <HAL_DMA_DeInit+0x240>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d022      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a44      	ldr	r2, [pc, #272]	; (8003370 <HAL_DMA_DeInit+0x244>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d01d      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a42      	ldr	r2, [pc, #264]	; (8003374 <HAL_DMA_DeInit+0x248>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d018      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a41      	ldr	r2, [pc, #260]	; (8003378 <HAL_DMA_DeInit+0x24c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3f      	ldr	r2, [pc, #252]	; (800337c <HAL_DMA_DeInit+0x250>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a3e      	ldr	r2, [pc, #248]	; (8003380 <HAL_DMA_DeInit+0x254>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a3c      	ldr	r2, [pc, #240]	; (8003384 <HAL_DMA_DeInit+0x258>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_DMA_DeInit+0x174>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <HAL_DMA_DeInit+0x25c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_DMA_DeInit+0x178>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_DMA_DeInit+0x17a>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d025      	beq.n	80032f6 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2221      	movs	r2, #33	; 0x21
 80032d8:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f001 fc34 	bl	8004b48 <DMA_CalcBaseAndBitshift>
 80032e0:	4603      	mov	r3, r0
 80032e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	223f      	movs	r2, #63	; 0x3f
 80032ee:	409a      	lsls	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	e081      	b.n	80033fa <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a24      	ldr	r2, [pc, #144]	; (800338c <HAL_DMA_DeInit+0x260>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <HAL_DMA_DeInit+0x21a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a22      	ldr	r2, [pc, #136]	; (8003390 <HAL_DMA_DeInit+0x264>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01d      	beq.n	8003346 <HAL_DMA_DeInit+0x21a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a21      	ldr	r2, [pc, #132]	; (8003394 <HAL_DMA_DeInit+0x268>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d018      	beq.n	8003346 <HAL_DMA_DeInit+0x21a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <HAL_DMA_DeInit+0x26c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_DMA_DeInit+0x21a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1e      	ldr	r2, [pc, #120]	; (800339c <HAL_DMA_DeInit+0x270>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_DMA_DeInit+0x21a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <HAL_DMA_DeInit+0x274>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_DMA_DeInit+0x21a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <HAL_DMA_DeInit+0x278>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_DMA_DeInit+0x21a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <HAL_DMA_DeInit+0x27c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d132      	bne.n	80033ac <HAL_DMA_DeInit+0x280>
 8003346:	2301      	movs	r3, #1
 8003348:	e031      	b.n	80033ae <HAL_DMA_DeInit+0x282>
 800334a:	bf00      	nop
 800334c:	40020010 	.word	0x40020010
 8003350:	40020028 	.word	0x40020028
 8003354:	40020040 	.word	0x40020040
 8003358:	40020058 	.word	0x40020058
 800335c:	40020070 	.word	0x40020070
 8003360:	40020088 	.word	0x40020088
 8003364:	400200a0 	.word	0x400200a0
 8003368:	400200b8 	.word	0x400200b8
 800336c:	40020410 	.word	0x40020410
 8003370:	40020428 	.word	0x40020428
 8003374:	40020440 	.word	0x40020440
 8003378:	40020458 	.word	0x40020458
 800337c:	40020470 	.word	0x40020470
 8003380:	40020488 	.word	0x40020488
 8003384:	400204a0 	.word	0x400204a0
 8003388:	400204b8 	.word	0x400204b8
 800338c:	58025408 	.word	0x58025408
 8003390:	5802541c 	.word	0x5802541c
 8003394:	58025430 	.word	0x58025430
 8003398:	58025444 	.word	0x58025444
 800339c:	58025458 	.word	0x58025458
 80033a0:	5802546c 	.word	0x5802546c
 80033a4:	58025480 	.word	0x58025480
 80033a8:	58025494 	.word	0x58025494
 80033ac:	2300      	movs	r3, #0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d021      	beq.n	80033f6 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f001 fbb4 	bl	8004b48 <DMA_CalcBaseAndBitshift>
 80033e0:	4603      	mov	r3, r0
 80033e2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2201      	movs	r2, #1
 80033ee:	409a      	lsls	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	e001      	b.n	80033fa <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e04a      	b.n	8003490 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f001 fcd2 	bl	8004da4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003418:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00f      	beq.n	8003442 <HAL_DMA_DeInit+0x316>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b08      	cmp	r3, #8
 8003428:	d80b      	bhi.n	8003442 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f001 fd54 	bl	8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003440:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e22b      	b.n	800390c <HAL_DMA_Start_IT+0x474>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_DMA_Start_IT+0x2a>
 80034be:	2302      	movs	r3, #2
 80034c0:	e224      	b.n	800390c <HAL_DMA_Start_IT+0x474>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	f040 820f 	bne.w	80038f6 <HAL_DMA_Start_IT+0x45e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a68      	ldr	r2, [pc, #416]	; (800368c <HAL_DMA_Start_IT+0x1f4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d04a      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a66      	ldr	r2, [pc, #408]	; (8003690 <HAL_DMA_Start_IT+0x1f8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d045      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a65      	ldr	r2, [pc, #404]	; (8003694 <HAL_DMA_Start_IT+0x1fc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d040      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a63      	ldr	r2, [pc, #396]	; (8003698 <HAL_DMA_Start_IT+0x200>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d03b      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a62      	ldr	r2, [pc, #392]	; (800369c <HAL_DMA_Start_IT+0x204>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d036      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a60      	ldr	r2, [pc, #384]	; (80036a0 <HAL_DMA_Start_IT+0x208>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d031      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a5f      	ldr	r2, [pc, #380]	; (80036a4 <HAL_DMA_Start_IT+0x20c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d02c      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a5d      	ldr	r2, [pc, #372]	; (80036a8 <HAL_DMA_Start_IT+0x210>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d027      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a5c      	ldr	r2, [pc, #368]	; (80036ac <HAL_DMA_Start_IT+0x214>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a5a      	ldr	r2, [pc, #360]	; (80036b0 <HAL_DMA_Start_IT+0x218>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01d      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a59      	ldr	r2, [pc, #356]	; (80036b4 <HAL_DMA_Start_IT+0x21c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a57      	ldr	r2, [pc, #348]	; (80036b8 <HAL_DMA_Start_IT+0x220>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a56      	ldr	r2, [pc, #344]	; (80036bc <HAL_DMA_Start_IT+0x224>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a54      	ldr	r2, [pc, #336]	; (80036c0 <HAL_DMA_Start_IT+0x228>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a53      	ldr	r2, [pc, #332]	; (80036c4 <HAL_DMA_Start_IT+0x22c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_DMA_Start_IT+0xee>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a51      	ldr	r2, [pc, #324]	; (80036c8 <HAL_DMA_Start_IT+0x230>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <HAL_DMA_Start_IT+0x100>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0201 	bic.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e007      	b.n	80035a8 <HAL_DMA_Start_IT+0x110>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	f001 f916 	bl	80047e0 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a34      	ldr	r2, [pc, #208]	; (800368c <HAL_DMA_Start_IT+0x1f4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d04a      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a33      	ldr	r2, [pc, #204]	; (8003690 <HAL_DMA_Start_IT+0x1f8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d045      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a31      	ldr	r2, [pc, #196]	; (8003694 <HAL_DMA_Start_IT+0x1fc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d040      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a30      	ldr	r2, [pc, #192]	; (8003698 <HAL_DMA_Start_IT+0x200>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d03b      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2e      	ldr	r2, [pc, #184]	; (800369c <HAL_DMA_Start_IT+0x204>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d036      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a2d      	ldr	r2, [pc, #180]	; (80036a0 <HAL_DMA_Start_IT+0x208>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d031      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <HAL_DMA_Start_IT+0x20c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d02c      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <HAL_DMA_Start_IT+0x210>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d027      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a28      	ldr	r2, [pc, #160]	; (80036ac <HAL_DMA_Start_IT+0x214>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a27      	ldr	r2, [pc, #156]	; (80036b0 <HAL_DMA_Start_IT+0x218>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01d      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a25      	ldr	r2, [pc, #148]	; (80036b4 <HAL_DMA_Start_IT+0x21c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <HAL_DMA_Start_IT+0x220>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a22      	ldr	r2, [pc, #136]	; (80036bc <HAL_DMA_Start_IT+0x224>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <HAL_DMA_Start_IT+0x228>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_DMA_Start_IT+0x22c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_DMA_Start_IT+0x1bc>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_DMA_Start_IT+0x230>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_DMA_Start_IT+0x1c0>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_DMA_Start_IT+0x1c2>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d036      	beq.n	80036cc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f023 021e 	bic.w	r2, r3, #30
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0216 	orr.w	r2, r2, #22
 8003670:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d043      	beq.n	8003702 <HAL_DMA_Start_IT+0x26a>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0208 	orr.w	r2, r2, #8
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e03a      	b.n	8003702 <HAL_DMA_Start_IT+0x26a>
 800368c:	40020010 	.word	0x40020010
 8003690:	40020028 	.word	0x40020028
 8003694:	40020040 	.word	0x40020040
 8003698:	40020058 	.word	0x40020058
 800369c:	40020070 	.word	0x40020070
 80036a0:	40020088 	.word	0x40020088
 80036a4:	400200a0 	.word	0x400200a0
 80036a8:	400200b8 	.word	0x400200b8
 80036ac:	40020410 	.word	0x40020410
 80036b0:	40020428 	.word	0x40020428
 80036b4:	40020440 	.word	0x40020440
 80036b8:	40020458 	.word	0x40020458
 80036bc:	40020470 	.word	0x40020470
 80036c0:	40020488 	.word	0x40020488
 80036c4:	400204a0 	.word	0x400204a0
 80036c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 020e 	bic.w	r2, r3, #14
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 020a 	orr.w	r2, r2, #10
 80036de:	601a      	str	r2, [r3, #0]
      //TODO: added enable for mux request generator
      HAL_DMAEx_EnableMuxRequestGenerator(&hdma);
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fd31 	bl	800514c <HAL_DMAEx_EnableMuxRequestGenerator>
      if(hdma->XferHalfCpltCallback != NULL)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_DMA_Start_IT+0x26a>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0204 	orr.w	r2, r2, #4
 8003700:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a83      	ldr	r2, [pc, #524]	; (8003914 <HAL_DMA_Start_IT+0x47c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d072      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a81      	ldr	r2, [pc, #516]	; (8003918 <HAL_DMA_Start_IT+0x480>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d06d      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a80      	ldr	r2, [pc, #512]	; (800391c <HAL_DMA_Start_IT+0x484>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d068      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a7e      	ldr	r2, [pc, #504]	; (8003920 <HAL_DMA_Start_IT+0x488>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d063      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a7d      	ldr	r2, [pc, #500]	; (8003924 <HAL_DMA_Start_IT+0x48c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d05e      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7b      	ldr	r2, [pc, #492]	; (8003928 <HAL_DMA_Start_IT+0x490>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d059      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7a      	ldr	r2, [pc, #488]	; (800392c <HAL_DMA_Start_IT+0x494>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d054      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a78      	ldr	r2, [pc, #480]	; (8003930 <HAL_DMA_Start_IT+0x498>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04f      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a77      	ldr	r2, [pc, #476]	; (8003934 <HAL_DMA_Start_IT+0x49c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d04a      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a75      	ldr	r2, [pc, #468]	; (8003938 <HAL_DMA_Start_IT+0x4a0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d045      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a74      	ldr	r2, [pc, #464]	; (800393c <HAL_DMA_Start_IT+0x4a4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d040      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a72      	ldr	r2, [pc, #456]	; (8003940 <HAL_DMA_Start_IT+0x4a8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d03b      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a71      	ldr	r2, [pc, #452]	; (8003944 <HAL_DMA_Start_IT+0x4ac>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d036      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a6f      	ldr	r2, [pc, #444]	; (8003948 <HAL_DMA_Start_IT+0x4b0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6e      	ldr	r2, [pc, #440]	; (800394c <HAL_DMA_Start_IT+0x4b4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d02c      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a6c      	ldr	r2, [pc, #432]	; (8003950 <HAL_DMA_Start_IT+0x4b8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d027      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a6b      	ldr	r2, [pc, #428]	; (8003954 <HAL_DMA_Start_IT+0x4bc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a69      	ldr	r2, [pc, #420]	; (8003958 <HAL_DMA_Start_IT+0x4c0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a68      	ldr	r2, [pc, #416]	; (800395c <HAL_DMA_Start_IT+0x4c4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d018      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a66      	ldr	r2, [pc, #408]	; (8003960 <HAL_DMA_Start_IT+0x4c8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a65      	ldr	r2, [pc, #404]	; (8003964 <HAL_DMA_Start_IT+0x4cc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a63      	ldr	r2, [pc, #396]	; (8003968 <HAL_DMA_Start_IT+0x4d0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a62      	ldr	r2, [pc, #392]	; (800396c <HAL_DMA_Start_IT+0x4d4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_DMA_Start_IT+0x35a>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a60      	ldr	r2, [pc, #384]	; (8003970 <HAL_DMA_Start_IT+0x4d8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_DMA_Start_IT+0x35e>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_DMA_Start_IT+0x360>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01a      	beq.n	8003832 <HAL_DMA_Start_IT+0x39a>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_DMA_Start_IT+0x382>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003818:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <HAL_DMA_Start_IT+0x39a>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800382c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003830:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a37      	ldr	r2, [pc, #220]	; (8003914 <HAL_DMA_Start_IT+0x47c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d04a      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a35      	ldr	r2, [pc, #212]	; (8003918 <HAL_DMA_Start_IT+0x480>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d045      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a34      	ldr	r2, [pc, #208]	; (800391c <HAL_DMA_Start_IT+0x484>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d040      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a32      	ldr	r2, [pc, #200]	; (8003920 <HAL_DMA_Start_IT+0x488>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d03b      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a31      	ldr	r2, [pc, #196]	; (8003924 <HAL_DMA_Start_IT+0x48c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d036      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2f      	ldr	r2, [pc, #188]	; (8003928 <HAL_DMA_Start_IT+0x490>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d031      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2e      	ldr	r2, [pc, #184]	; (800392c <HAL_DMA_Start_IT+0x494>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d02c      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2c      	ldr	r2, [pc, #176]	; (8003930 <HAL_DMA_Start_IT+0x498>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d027      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <HAL_DMA_Start_IT+0x49c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d022      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a29      	ldr	r2, [pc, #164]	; (8003938 <HAL_DMA_Start_IT+0x4a0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01d      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_DMA_Start_IT+0x4a4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d018      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <HAL_DMA_Start_IT+0x4a8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a25      	ldr	r2, [pc, #148]	; (8003944 <HAL_DMA_Start_IT+0x4ac>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a23      	ldr	r2, [pc, #140]	; (8003948 <HAL_DMA_Start_IT+0x4b0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a22      	ldr	r2, [pc, #136]	; (800394c <HAL_DMA_Start_IT+0x4b4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_DMA_Start_IT+0x43a>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a20      	ldr	r2, [pc, #128]	; (8003950 <HAL_DMA_Start_IT+0x4b8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d108      	bne.n	80038e4 <HAL_DMA_Start_IT+0x44c>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e012      	b.n	800390a <HAL_DMA_Start_IT+0x472>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	e009      	b.n	800390a <HAL_DMA_Start_IT+0x472>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40020010 	.word	0x40020010
 8003918:	40020028 	.word	0x40020028
 800391c:	40020040 	.word	0x40020040
 8003920:	40020058 	.word	0x40020058
 8003924:	40020070 	.word	0x40020070
 8003928:	40020088 	.word	0x40020088
 800392c:	400200a0 	.word	0x400200a0
 8003930:	400200b8 	.word	0x400200b8
 8003934:	40020410 	.word	0x40020410
 8003938:	40020428 	.word	0x40020428
 800393c:	40020440 	.word	0x40020440
 8003940:	40020458 	.word	0x40020458
 8003944:	40020470 	.word	0x40020470
 8003948:	40020488 	.word	0x40020488
 800394c:	400204a0 	.word	0x400204a0
 8003950:	400204b8 	.word	0x400204b8
 8003954:	58025408 	.word	0x58025408
 8003958:	5802541c 	.word	0x5802541c
 800395c:	58025430 	.word	0x58025430
 8003960:	58025444 	.word	0x58025444
 8003964:	58025458 	.word	0x58025458
 8003968:	5802546c 	.word	0x5802546c
 800396c:	58025480 	.word	0x58025480
 8003970:	58025494 	.word	0x58025494

08003974 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003980:	4b67      	ldr	r3, [pc, #412]	; (8003b20 <HAL_DMA_IRQHandler+0x1ac>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a67      	ldr	r2, [pc, #412]	; (8003b24 <HAL_DMA_IRQHandler+0x1b0>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0a9b      	lsrs	r3, r3, #10
 800398c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a5f      	ldr	r2, [pc, #380]	; (8003b28 <HAL_DMA_IRQHandler+0x1b4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d04a      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5d      	ldr	r2, [pc, #372]	; (8003b2c <HAL_DMA_IRQHandler+0x1b8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d045      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5c      	ldr	r2, [pc, #368]	; (8003b30 <HAL_DMA_IRQHandler+0x1bc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d040      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5a      	ldr	r2, [pc, #360]	; (8003b34 <HAL_DMA_IRQHandler+0x1c0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d03b      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a59      	ldr	r2, [pc, #356]	; (8003b38 <HAL_DMA_IRQHandler+0x1c4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d036      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a57      	ldr	r2, [pc, #348]	; (8003b3c <HAL_DMA_IRQHandler+0x1c8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d031      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a56      	ldr	r2, [pc, #344]	; (8003b40 <HAL_DMA_IRQHandler+0x1cc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d02c      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a54      	ldr	r2, [pc, #336]	; (8003b44 <HAL_DMA_IRQHandler+0x1d0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d027      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a53      	ldr	r2, [pc, #332]	; (8003b48 <HAL_DMA_IRQHandler+0x1d4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a51      	ldr	r2, [pc, #324]	; (8003b4c <HAL_DMA_IRQHandler+0x1d8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01d      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a50      	ldr	r2, [pc, #320]	; (8003b50 <HAL_DMA_IRQHandler+0x1dc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d018      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a4e      	ldr	r2, [pc, #312]	; (8003b54 <HAL_DMA_IRQHandler+0x1e0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a4d      	ldr	r2, [pc, #308]	; (8003b58 <HAL_DMA_IRQHandler+0x1e4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a4b      	ldr	r2, [pc, #300]	; (8003b5c <HAL_DMA_IRQHandler+0x1e8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a4a      	ldr	r2, [pc, #296]	; (8003b60 <HAL_DMA_IRQHandler+0x1ec>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_DMA_IRQHandler+0xd2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a48      	ldr	r2, [pc, #288]	; (8003b64 <HAL_DMA_IRQHandler+0x1f0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_DMA_IRQHandler+0xd6>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_DMA_IRQHandler+0xd8>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 842b 	beq.w	80042a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80a2 	beq.w	8003bac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a2e      	ldr	r2, [pc, #184]	; (8003b28 <HAL_DMA_IRQHandler+0x1b4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d04a      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a2d      	ldr	r2, [pc, #180]	; (8003b2c <HAL_DMA_IRQHandler+0x1b8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d045      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <HAL_DMA_IRQHandler+0x1bc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d040      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <HAL_DMA_IRQHandler+0x1c0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d03b      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a28      	ldr	r2, [pc, #160]	; (8003b38 <HAL_DMA_IRQHandler+0x1c4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d036      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <HAL_DMA_IRQHandler+0x1c8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d031      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a25      	ldr	r2, [pc, #148]	; (8003b40 <HAL_DMA_IRQHandler+0x1cc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d02c      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a24      	ldr	r2, [pc, #144]	; (8003b44 <HAL_DMA_IRQHandler+0x1d0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d027      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <HAL_DMA_IRQHandler+0x1d4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d022      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <HAL_DMA_IRQHandler+0x1d8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d01d      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_DMA_IRQHandler+0x1dc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d018      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_DMA_IRQHandler+0x1e0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d013      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <HAL_DMA_IRQHandler+0x1e4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00e      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_DMA_IRQHandler+0x1e8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <HAL_DMA_IRQHandler+0x1ec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x194>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <HAL_DMA_IRQHandler+0x1f0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d12f      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x1f4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e02e      	b.n	8003b7c <HAL_DMA_IRQHandler+0x208>
 8003b1e:	bf00      	nop
 8003b20:	24000408 	.word	0x24000408
 8003b24:	1b4e81b5 	.word	0x1b4e81b5
 8003b28:	40020010 	.word	0x40020010
 8003b2c:	40020028 	.word	0x40020028
 8003b30:	40020040 	.word	0x40020040
 8003b34:	40020058 	.word	0x40020058
 8003b38:	40020070 	.word	0x40020070
 8003b3c:	40020088 	.word	0x40020088
 8003b40:	400200a0 	.word	0x400200a0
 8003b44:	400200b8 	.word	0x400200b8
 8003b48:	40020410 	.word	0x40020410
 8003b4c:	40020428 	.word	0x40020428
 8003b50:	40020440 	.word	0x40020440
 8003b54:	40020458 	.word	0x40020458
 8003b58:	40020470 	.word	0x40020470
 8003b5c:	40020488 	.word	0x40020488
 8003b60:	400204a0 	.word	0x400204a0
 8003b64:	400204b8 	.word	0x400204b8
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bf14      	ite	ne
 8003b76:	2301      	movne	r3, #1
 8003b78:	2300      	moveq	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d015      	beq.n	8003bac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0204 	bic.w	r2, r2, #4
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2208      	movs	r2, #8
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	f043 0201 	orr.w	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d06e      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a69      	ldr	r2, [pc, #420]	; (8003d6c <HAL_DMA_IRQHandler+0x3f8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d04a      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a67      	ldr	r2, [pc, #412]	; (8003d70 <HAL_DMA_IRQHandler+0x3fc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d045      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a66      	ldr	r2, [pc, #408]	; (8003d74 <HAL_DMA_IRQHandler+0x400>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d040      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a64      	ldr	r2, [pc, #400]	; (8003d78 <HAL_DMA_IRQHandler+0x404>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d03b      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a63      	ldr	r2, [pc, #396]	; (8003d7c <HAL_DMA_IRQHandler+0x408>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d036      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a61      	ldr	r2, [pc, #388]	; (8003d80 <HAL_DMA_IRQHandler+0x40c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a60      	ldr	r2, [pc, #384]	; (8003d84 <HAL_DMA_IRQHandler+0x410>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d02c      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a5e      	ldr	r2, [pc, #376]	; (8003d88 <HAL_DMA_IRQHandler+0x414>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d027      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5d      	ldr	r2, [pc, #372]	; (8003d8c <HAL_DMA_IRQHandler+0x418>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5b      	ldr	r2, [pc, #364]	; (8003d90 <HAL_DMA_IRQHandler+0x41c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a5a      	ldr	r2, [pc, #360]	; (8003d94 <HAL_DMA_IRQHandler+0x420>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d018      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a58      	ldr	r2, [pc, #352]	; (8003d98 <HAL_DMA_IRQHandler+0x424>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a57      	ldr	r2, [pc, #348]	; (8003d9c <HAL_DMA_IRQHandler+0x428>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a55      	ldr	r2, [pc, #340]	; (8003da0 <HAL_DMA_IRQHandler+0x42c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a54      	ldr	r2, [pc, #336]	; (8003da4 <HAL_DMA_IRQHandler+0x430>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2ee>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_DMA_IRQHandler+0x434>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d10a      	bne.n	8003c78 <HAL_DMA_IRQHandler+0x304>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf14      	ite	ne
 8003c70:	2301      	movne	r3, #1
 8003c72:	2300      	moveq	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e003      	b.n	8003c80 <HAL_DMA_IRQHandler+0x30c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00d      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	f043 0202 	orr.w	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2204      	movs	r2, #4
 8003caa:	409a      	lsls	r2, r3
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 808f 	beq.w	8003dd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2c      	ldr	r2, [pc, #176]	; (8003d6c <HAL_DMA_IRQHandler+0x3f8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d04a      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2a      	ldr	r2, [pc, #168]	; (8003d70 <HAL_DMA_IRQHandler+0x3fc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d045      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a29      	ldr	r2, [pc, #164]	; (8003d74 <HAL_DMA_IRQHandler+0x400>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d040      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <HAL_DMA_IRQHandler+0x404>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d03b      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a26      	ldr	r2, [pc, #152]	; (8003d7c <HAL_DMA_IRQHandler+0x408>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d036      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <HAL_DMA_IRQHandler+0x40c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d031      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a23      	ldr	r2, [pc, #140]	; (8003d84 <HAL_DMA_IRQHandler+0x410>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d02c      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <HAL_DMA_IRQHandler+0x414>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d027      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a20      	ldr	r2, [pc, #128]	; (8003d8c <HAL_DMA_IRQHandler+0x418>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d022      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_DMA_IRQHandler+0x41c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01d      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <HAL_DMA_IRQHandler+0x420>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d018      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_DMA_IRQHandler+0x424>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1a      	ldr	r2, [pc, #104]	; (8003d9c <HAL_DMA_IRQHandler+0x428>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00e      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_DMA_IRQHandler+0x42c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d009      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a17      	ldr	r2, [pc, #92]	; (8003da4 <HAL_DMA_IRQHandler+0x430>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x3e2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <HAL_DMA_IRQHandler+0x434>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d12a      	bne.n	8003dac <HAL_DMA_IRQHandler+0x438>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf14      	ite	ne
 8003d64:	2301      	movne	r3, #1
 8003d66:	2300      	moveq	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	e023      	b.n	8003db4 <HAL_DMA_IRQHandler+0x440>
 8003d6c:	40020010 	.word	0x40020010
 8003d70:	40020028 	.word	0x40020028
 8003d74:	40020040 	.word	0x40020040
 8003d78:	40020058 	.word	0x40020058
 8003d7c:	40020070 	.word	0x40020070
 8003d80:	40020088 	.word	0x40020088
 8003d84:	400200a0 	.word	0x400200a0
 8003d88:	400200b8 	.word	0x400200b8
 8003d8c:	40020410 	.word	0x40020410
 8003d90:	40020428 	.word	0x40020428
 8003d94:	40020440 	.word	0x40020440
 8003d98:	40020458 	.word	0x40020458
 8003d9c:	40020470 	.word	0x40020470
 8003da0:	40020488 	.word	0x40020488
 8003da4:	400204a0 	.word	0x400204a0
 8003da8:	400204b8 	.word	0x400204b8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	f043 0204 	orr.w	r2, r3, #4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	2210      	movs	r2, #16
 8003dde:	409a      	lsls	r2, r3
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80a6 	beq.w	8003f36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a85      	ldr	r2, [pc, #532]	; (8004004 <HAL_DMA_IRQHandler+0x690>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d04a      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a83      	ldr	r2, [pc, #524]	; (8004008 <HAL_DMA_IRQHandler+0x694>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d045      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a82      	ldr	r2, [pc, #520]	; (800400c <HAL_DMA_IRQHandler+0x698>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d040      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a80      	ldr	r2, [pc, #512]	; (8004010 <HAL_DMA_IRQHandler+0x69c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d03b      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a7f      	ldr	r2, [pc, #508]	; (8004014 <HAL_DMA_IRQHandler+0x6a0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d036      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a7d      	ldr	r2, [pc, #500]	; (8004018 <HAL_DMA_IRQHandler+0x6a4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d031      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a7c      	ldr	r2, [pc, #496]	; (800401c <HAL_DMA_IRQHandler+0x6a8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d02c      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a7a      	ldr	r2, [pc, #488]	; (8004020 <HAL_DMA_IRQHandler+0x6ac>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d027      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a79      	ldr	r2, [pc, #484]	; (8004024 <HAL_DMA_IRQHandler+0x6b0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d022      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a77      	ldr	r2, [pc, #476]	; (8004028 <HAL_DMA_IRQHandler+0x6b4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01d      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a76      	ldr	r2, [pc, #472]	; (800402c <HAL_DMA_IRQHandler+0x6b8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a74      	ldr	r2, [pc, #464]	; (8004030 <HAL_DMA_IRQHandler+0x6bc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a73      	ldr	r2, [pc, #460]	; (8004034 <HAL_DMA_IRQHandler+0x6c0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a71      	ldr	r2, [pc, #452]	; (8004038 <HAL_DMA_IRQHandler+0x6c4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a70      	ldr	r2, [pc, #448]	; (800403c <HAL_DMA_IRQHandler+0x6c8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x516>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a6e      	ldr	r2, [pc, #440]	; (8004040 <HAL_DMA_IRQHandler+0x6cc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10a      	bne.n	8003ea0 <HAL_DMA_IRQHandler+0x52c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e009      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x540>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bf14      	ite	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	2300      	moveq	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d03e      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d018      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d108      	bne.n	8003ef6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d024      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
 8003ef4:	e01f      	b.n	8003f36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01b      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	4798      	blx	r3
 8003f06:	e016      	b.n	8003f36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d107      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0208 	bic.w	r2, r2, #8
 8003f24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2220      	movs	r2, #32
 8003f40:	409a      	lsls	r2, r3
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8110 	beq.w	800416c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <HAL_DMA_IRQHandler+0x690>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d04a      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2b      	ldr	r2, [pc, #172]	; (8004008 <HAL_DMA_IRQHandler+0x694>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d045      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a29      	ldr	r2, [pc, #164]	; (800400c <HAL_DMA_IRQHandler+0x698>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d040      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a28      	ldr	r2, [pc, #160]	; (8004010 <HAL_DMA_IRQHandler+0x69c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d03b      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a26      	ldr	r2, [pc, #152]	; (8004014 <HAL_DMA_IRQHandler+0x6a0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d036      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a25      	ldr	r2, [pc, #148]	; (8004018 <HAL_DMA_IRQHandler+0x6a4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d031      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a23      	ldr	r2, [pc, #140]	; (800401c <HAL_DMA_IRQHandler+0x6a8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d02c      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a22      	ldr	r2, [pc, #136]	; (8004020 <HAL_DMA_IRQHandler+0x6ac>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d027      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a20      	ldr	r2, [pc, #128]	; (8004024 <HAL_DMA_IRQHandler+0x6b0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d022      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_DMA_IRQHandler+0x6b4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d01d      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_DMA_IRQHandler+0x6b8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d018      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <HAL_DMA_IRQHandler+0x6bc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <HAL_DMA_IRQHandler+0x6c0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00e      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_DMA_IRQHandler+0x6c4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a17      	ldr	r2, [pc, #92]	; (800403c <HAL_DMA_IRQHandler+0x6c8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_DMA_IRQHandler+0x678>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a16      	ldr	r2, [pc, #88]	; (8004040 <HAL_DMA_IRQHandler+0x6cc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d12b      	bne.n	8004044 <HAL_DMA_IRQHandler+0x6d0>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bf14      	ite	ne
 8003ffa:	2301      	movne	r3, #1
 8003ffc:	2300      	moveq	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	e02a      	b.n	8004058 <HAL_DMA_IRQHandler+0x6e4>
 8004002:	bf00      	nop
 8004004:	40020010 	.word	0x40020010
 8004008:	40020028 	.word	0x40020028
 800400c:	40020040 	.word	0x40020040
 8004010:	40020058 	.word	0x40020058
 8004014:	40020070 	.word	0x40020070
 8004018:	40020088 	.word	0x40020088
 800401c:	400200a0 	.word	0x400200a0
 8004020:	400200b8 	.word	0x400200b8
 8004024:	40020410 	.word	0x40020410
 8004028:	40020428 	.word	0x40020428
 800402c:	40020440 	.word	0x40020440
 8004030:	40020458 	.word	0x40020458
 8004034:	40020470 	.word	0x40020470
 8004038:	40020488 	.word	0x40020488
 800403c:	400204a0 	.word	0x400204a0
 8004040:	400204b8 	.word	0x400204b8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8087 	beq.w	800416c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	2220      	movs	r2, #32
 8004068:	409a      	lsls	r2, r3
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b04      	cmp	r3, #4
 8004078:	d139      	bne.n	80040ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0216 	bic.w	r2, r2, #22
 8004088:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004098:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <HAL_DMA_IRQHandler+0x736>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	223f      	movs	r2, #63	; 0x3f
 80040c4:	409a      	lsls	r2, r3
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 834a 	beq.w	8004778 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
          }
          return;
 80040ec:	e344      	b.n	8004778 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d018      	beq.n	800412e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d108      	bne.n	800411c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02c      	beq.n	800416c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	4798      	blx	r3
 800411a:	e027      	b.n	800416c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d023      	beq.n	800416c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
 800412c:	e01e      	b.n	800416c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10f      	bne.n	800415c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0210 	bic.w	r2, r2, #16
 800414a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8306 	beq.w	8004782 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 8088 	beq.w	8004294 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2204      	movs	r2, #4
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a7a      	ldr	r2, [pc, #488]	; (800437c <HAL_DMA_IRQHandler+0xa08>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d04a      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a79      	ldr	r2, [pc, #484]	; (8004380 <HAL_DMA_IRQHandler+0xa0c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d045      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a77      	ldr	r2, [pc, #476]	; (8004384 <HAL_DMA_IRQHandler+0xa10>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d040      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a76      	ldr	r2, [pc, #472]	; (8004388 <HAL_DMA_IRQHandler+0xa14>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d03b      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a74      	ldr	r2, [pc, #464]	; (800438c <HAL_DMA_IRQHandler+0xa18>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d036      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a73      	ldr	r2, [pc, #460]	; (8004390 <HAL_DMA_IRQHandler+0xa1c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d031      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a71      	ldr	r2, [pc, #452]	; (8004394 <HAL_DMA_IRQHandler+0xa20>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d02c      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a70      	ldr	r2, [pc, #448]	; (8004398 <HAL_DMA_IRQHandler+0xa24>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d027      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a6e      	ldr	r2, [pc, #440]	; (800439c <HAL_DMA_IRQHandler+0xa28>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d022      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6d      	ldr	r2, [pc, #436]	; (80043a0 <HAL_DMA_IRQHandler+0xa2c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d01d      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a6b      	ldr	r2, [pc, #428]	; (80043a4 <HAL_DMA_IRQHandler+0xa30>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d018      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a6a      	ldr	r2, [pc, #424]	; (80043a8 <HAL_DMA_IRQHandler+0xa34>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a68      	ldr	r2, [pc, #416]	; (80043ac <HAL_DMA_IRQHandler+0xa38>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00e      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a67      	ldr	r2, [pc, #412]	; (80043b0 <HAL_DMA_IRQHandler+0xa3c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a65      	ldr	r2, [pc, #404]	; (80043b4 <HAL_DMA_IRQHandler+0xa40>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_DMA_IRQHandler+0x8b8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a64      	ldr	r2, [pc, #400]	; (80043b8 <HAL_DMA_IRQHandler+0xa44>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <HAL_DMA_IRQHandler+0x8ca>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0201 	bic.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e007      	b.n	800424e <HAL_DMA_IRQHandler+0x8da>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3301      	adds	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004256:	429a      	cmp	r2, r3
 8004258:	d307      	bcc.n	800426a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f2      	bne.n	800424e <HAL_DMA_IRQHandler+0x8da>
 8004268:	e000      	b.n	800426c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800426a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2203      	movs	r2, #3
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004282:	e003      	b.n	800428c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8272 	beq.w	8004782 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4798      	blx	r3
 80042a6:	e26c      	b.n	8004782 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a43      	ldr	r2, [pc, #268]	; (80043bc <HAL_DMA_IRQHandler+0xa48>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d022      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x984>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a42      	ldr	r2, [pc, #264]	; (80043c0 <HAL_DMA_IRQHandler+0xa4c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d01d      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x984>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a40      	ldr	r2, [pc, #256]	; (80043c4 <HAL_DMA_IRQHandler+0xa50>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d018      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x984>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a3f      	ldr	r2, [pc, #252]	; (80043c8 <HAL_DMA_IRQHandler+0xa54>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x984>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3d      	ldr	r2, [pc, #244]	; (80043cc <HAL_DMA_IRQHandler+0xa58>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00e      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x984>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3c      	ldr	r2, [pc, #240]	; (80043d0 <HAL_DMA_IRQHandler+0xa5c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x984>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a3a      	ldr	r2, [pc, #232]	; (80043d4 <HAL_DMA_IRQHandler+0xa60>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x984>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a39      	ldr	r2, [pc, #228]	; (80043d8 <HAL_DMA_IRQHandler+0xa64>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d101      	bne.n	80042fc <HAL_DMA_IRQHandler+0x988>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_DMA_IRQHandler+0x98a>
 80042fc:	2300      	movs	r3, #0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 823f 	beq.w	8004782 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2204      	movs	r2, #4
 8004316:	409a      	lsls	r2, r3
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80cd 	beq.w	80044bc <HAL_DMA_IRQHandler+0xb48>
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80c7 	beq.w	80044bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	2204      	movs	r2, #4
 8004338:	409a      	lsls	r2, r3
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d049      	beq.n	80043dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8210 	beq.w	800477c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004364:	e20a      	b.n	800477c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8206 	beq.w	800477c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004378:	e200      	b.n	800477c <HAL_DMA_IRQHandler+0xe08>
 800437a:	bf00      	nop
 800437c:	40020010 	.word	0x40020010
 8004380:	40020028 	.word	0x40020028
 8004384:	40020040 	.word	0x40020040
 8004388:	40020058 	.word	0x40020058
 800438c:	40020070 	.word	0x40020070
 8004390:	40020088 	.word	0x40020088
 8004394:	400200a0 	.word	0x400200a0
 8004398:	400200b8 	.word	0x400200b8
 800439c:	40020410 	.word	0x40020410
 80043a0:	40020428 	.word	0x40020428
 80043a4:	40020440 	.word	0x40020440
 80043a8:	40020458 	.word	0x40020458
 80043ac:	40020470 	.word	0x40020470
 80043b0:	40020488 	.word	0x40020488
 80043b4:	400204a0 	.word	0x400204a0
 80043b8:	400204b8 	.word	0x400204b8
 80043bc:	58025408 	.word	0x58025408
 80043c0:	5802541c 	.word	0x5802541c
 80043c4:	58025430 	.word	0x58025430
 80043c8:	58025444 	.word	0x58025444
 80043cc:	58025458 	.word	0x58025458
 80043d0:	5802546c 	.word	0x5802546c
 80043d4:	58025480 	.word	0x58025480
 80043d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d160      	bne.n	80044a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a8c      	ldr	r2, [pc, #560]	; (800461c <HAL_DMA_IRQHandler+0xca8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d04a      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a8a      	ldr	r2, [pc, #552]	; (8004620 <HAL_DMA_IRQHandler+0xcac>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d045      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a89      	ldr	r2, [pc, #548]	; (8004624 <HAL_DMA_IRQHandler+0xcb0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d040      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a87      	ldr	r2, [pc, #540]	; (8004628 <HAL_DMA_IRQHandler+0xcb4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d03b      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a86      	ldr	r2, [pc, #536]	; (800462c <HAL_DMA_IRQHandler+0xcb8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d036      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a84      	ldr	r2, [pc, #528]	; (8004630 <HAL_DMA_IRQHandler+0xcbc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d031      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a83      	ldr	r2, [pc, #524]	; (8004634 <HAL_DMA_IRQHandler+0xcc0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d02c      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a81      	ldr	r2, [pc, #516]	; (8004638 <HAL_DMA_IRQHandler+0xcc4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d027      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a80      	ldr	r2, [pc, #512]	; (800463c <HAL_DMA_IRQHandler+0xcc8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d022      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7e      	ldr	r2, [pc, #504]	; (8004640 <HAL_DMA_IRQHandler+0xccc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01d      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a7d      	ldr	r2, [pc, #500]	; (8004644 <HAL_DMA_IRQHandler+0xcd0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d018      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a7b      	ldr	r2, [pc, #492]	; (8004648 <HAL_DMA_IRQHandler+0xcd4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a7a      	ldr	r2, [pc, #488]	; (800464c <HAL_DMA_IRQHandler+0xcd8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a78      	ldr	r2, [pc, #480]	; (8004650 <HAL_DMA_IRQHandler+0xcdc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a77      	ldr	r2, [pc, #476]	; (8004654 <HAL_DMA_IRQHandler+0xce0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_DMA_IRQHandler+0xb12>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a75      	ldr	r2, [pc, #468]	; (8004658 <HAL_DMA_IRQHandler+0xce4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <HAL_DMA_IRQHandler+0xb24>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0208 	bic.w	r2, r2, #8
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e007      	b.n	80044a8 <HAL_DMA_IRQHandler+0xb34>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0204 	bic.w	r2, r2, #4
 80044a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8165 	beq.w	800477c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ba:	e15f      	b.n	800477c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2202      	movs	r2, #2
 80044c6:	409a      	lsls	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80c5 	beq.w	800465c <HAL_DMA_IRQHandler+0xce8>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80bf 	beq.w	800465c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2202      	movs	r2, #2
 80044e8:	409a      	lsls	r2, r3
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d018      	beq.n	800452a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 813a 	beq.w	8004780 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004514:	e134      	b.n	8004780 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8130 	beq.w	8004780 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004528:	e12a      	b.n	8004780 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b00      	cmp	r3, #0
 8004532:	d168      	bne.n	8004606 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a38      	ldr	r2, [pc, #224]	; (800461c <HAL_DMA_IRQHandler+0xca8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d04a      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a37      	ldr	r2, [pc, #220]	; (8004620 <HAL_DMA_IRQHandler+0xcac>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d045      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a35      	ldr	r2, [pc, #212]	; (8004624 <HAL_DMA_IRQHandler+0xcb0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d040      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a34      	ldr	r2, [pc, #208]	; (8004628 <HAL_DMA_IRQHandler+0xcb4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d03b      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a32      	ldr	r2, [pc, #200]	; (800462c <HAL_DMA_IRQHandler+0xcb8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d036      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a31      	ldr	r2, [pc, #196]	; (8004630 <HAL_DMA_IRQHandler+0xcbc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d031      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2f      	ldr	r2, [pc, #188]	; (8004634 <HAL_DMA_IRQHandler+0xcc0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02c      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2e      	ldr	r2, [pc, #184]	; (8004638 <HAL_DMA_IRQHandler+0xcc4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d027      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2c      	ldr	r2, [pc, #176]	; (800463c <HAL_DMA_IRQHandler+0xcc8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d022      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2b      	ldr	r2, [pc, #172]	; (8004640 <HAL_DMA_IRQHandler+0xccc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d01d      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a29      	ldr	r2, [pc, #164]	; (8004644 <HAL_DMA_IRQHandler+0xcd0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d018      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a28      	ldr	r2, [pc, #160]	; (8004648 <HAL_DMA_IRQHandler+0xcd4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a26      	ldr	r2, [pc, #152]	; (800464c <HAL_DMA_IRQHandler+0xcd8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a25      	ldr	r2, [pc, #148]	; (8004650 <HAL_DMA_IRQHandler+0xcdc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d009      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a23      	ldr	r2, [pc, #140]	; (8004654 <HAL_DMA_IRQHandler+0xce0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xc60>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a22      	ldr	r2, [pc, #136]	; (8004658 <HAL_DMA_IRQHandler+0xce4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d108      	bne.n	80045e6 <HAL_DMA_IRQHandler+0xc72>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0214 	bic.w	r2, r2, #20
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e007      	b.n	80045f6 <HAL_DMA_IRQHandler+0xc82>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 020a 	bic.w	r2, r2, #10
 80045f4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80b8 	beq.w	8004780 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004618:	e0b2      	b.n	8004780 <HAL_DMA_IRQHandler+0xe0c>
 800461a:	bf00      	nop
 800461c:	40020010 	.word	0x40020010
 8004620:	40020028 	.word	0x40020028
 8004624:	40020040 	.word	0x40020040
 8004628:	40020058 	.word	0x40020058
 800462c:	40020070 	.word	0x40020070
 8004630:	40020088 	.word	0x40020088
 8004634:	400200a0 	.word	0x400200a0
 8004638:	400200b8 	.word	0x400200b8
 800463c:	40020410 	.word	0x40020410
 8004640:	40020428 	.word	0x40020428
 8004644:	40020440 	.word	0x40020440
 8004648:	40020458 	.word	0x40020458
 800464c:	40020470 	.word	0x40020470
 8004650:	40020488 	.word	0x40020488
 8004654:	400204a0 	.word	0x400204a0
 8004658:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2208      	movs	r2, #8
 8004666:	409a      	lsls	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8088 	beq.w	8004782 <HAL_DMA_IRQHandler+0xe0e>
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8082 	beq.w	8004782 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a41      	ldr	r2, [pc, #260]	; (8004788 <HAL_DMA_IRQHandler+0xe14>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d04a      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a3f      	ldr	r2, [pc, #252]	; (800478c <HAL_DMA_IRQHandler+0xe18>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d045      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a3e      	ldr	r2, [pc, #248]	; (8004790 <HAL_DMA_IRQHandler+0xe1c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d040      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a3c      	ldr	r2, [pc, #240]	; (8004794 <HAL_DMA_IRQHandler+0xe20>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d03b      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3b      	ldr	r2, [pc, #236]	; (8004798 <HAL_DMA_IRQHandler+0xe24>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d036      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a39      	ldr	r2, [pc, #228]	; (800479c <HAL_DMA_IRQHandler+0xe28>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d031      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a38      	ldr	r2, [pc, #224]	; (80047a0 <HAL_DMA_IRQHandler+0xe2c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d02c      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a36      	ldr	r2, [pc, #216]	; (80047a4 <HAL_DMA_IRQHandler+0xe30>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d027      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a35      	ldr	r2, [pc, #212]	; (80047a8 <HAL_DMA_IRQHandler+0xe34>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d022      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a33      	ldr	r2, [pc, #204]	; (80047ac <HAL_DMA_IRQHandler+0xe38>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01d      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a32      	ldr	r2, [pc, #200]	; (80047b0 <HAL_DMA_IRQHandler+0xe3c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d018      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a30      	ldr	r2, [pc, #192]	; (80047b4 <HAL_DMA_IRQHandler+0xe40>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a2f      	ldr	r2, [pc, #188]	; (80047b8 <HAL_DMA_IRQHandler+0xe44>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2d      	ldr	r2, [pc, #180]	; (80047bc <HAL_DMA_IRQHandler+0xe48>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <HAL_DMA_IRQHandler+0xe4c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_DMA_IRQHandler+0xdaa>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <HAL_DMA_IRQHandler+0xe50>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d108      	bne.n	8004730 <HAL_DMA_IRQHandler+0xdbc>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 021c 	bic.w	r2, r2, #28
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e007      	b.n	8004740 <HAL_DMA_IRQHandler+0xdcc>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 020e 	bic.w	r2, r2, #14
 800473e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2201      	movs	r2, #1
 800474a:	409a      	lsls	r2, r3
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
 8004776:	e004      	b.n	8004782 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004778:	bf00      	nop
 800477a:	e002      	b.n	8004782 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800477c:	bf00      	nop
 800477e:	e000      	b.n	8004782 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004780:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004782:	3728      	adds	r7, #40	; 0x28
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40020010 	.word	0x40020010
 800478c:	40020028 	.word	0x40020028
 8004790:	40020040 	.word	0x40020040
 8004794:	40020058 	.word	0x40020058
 8004798:	40020070 	.word	0x40020070
 800479c:	40020088 	.word	0x40020088
 80047a0:	400200a0 	.word	0x400200a0
 80047a4:	400200b8 	.word	0x400200b8
 80047a8:	40020410 	.word	0x40020410
 80047ac:	40020428 	.word	0x40020428
 80047b0:	40020440 	.word	0x40020440
 80047b4:	40020458 	.word	0x40020458
 80047b8:	40020470 	.word	0x40020470
 80047bc:	40020488 	.word	0x40020488
 80047c0:	400204a0 	.word	0x400204a0
 80047c4:	400204b8 	.word	0x400204b8

080047c8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b08b      	sub	sp, #44	; 0x2c
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	623b      	str	r3, [r7, #32]

  uint32_t srcdata = &SrcAddress;
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	61fb      	str	r3, [r7, #28]
  uint32_t srcaddr = SrcAddress;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61bb      	str	r3, [r7, #24]
  uint32_t destdata = &DstAddress;
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	617b      	str	r3, [r7, #20]
  uint32_t destaddr = DstAddress;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	613b      	str	r3, [r7, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a83      	ldr	r2, [pc, #524]	; (8004a20 <DMA_SetConfig+0x240>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d072      	beq.n	80048fc <DMA_SetConfig+0x11c>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a82      	ldr	r2, [pc, #520]	; (8004a24 <DMA_SetConfig+0x244>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d06d      	beq.n	80048fc <DMA_SetConfig+0x11c>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a80      	ldr	r2, [pc, #512]	; (8004a28 <DMA_SetConfig+0x248>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d068      	beq.n	80048fc <DMA_SetConfig+0x11c>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a7f      	ldr	r2, [pc, #508]	; (8004a2c <DMA_SetConfig+0x24c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d063      	beq.n	80048fc <DMA_SetConfig+0x11c>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a7d      	ldr	r2, [pc, #500]	; (8004a30 <DMA_SetConfig+0x250>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d05e      	beq.n	80048fc <DMA_SetConfig+0x11c>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a7c      	ldr	r2, [pc, #496]	; (8004a34 <DMA_SetConfig+0x254>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d059      	beq.n	80048fc <DMA_SetConfig+0x11c>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a7a      	ldr	r2, [pc, #488]	; (8004a38 <DMA_SetConfig+0x258>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d054      	beq.n	80048fc <DMA_SetConfig+0x11c>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a79      	ldr	r2, [pc, #484]	; (8004a3c <DMA_SetConfig+0x25c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d04f      	beq.n	80048fc <DMA_SetConfig+0x11c>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a77      	ldr	r2, [pc, #476]	; (8004a40 <DMA_SetConfig+0x260>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d04a      	beq.n	80048fc <DMA_SetConfig+0x11c>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a76      	ldr	r2, [pc, #472]	; (8004a44 <DMA_SetConfig+0x264>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d045      	beq.n	80048fc <DMA_SetConfig+0x11c>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a74      	ldr	r2, [pc, #464]	; (8004a48 <DMA_SetConfig+0x268>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d040      	beq.n	80048fc <DMA_SetConfig+0x11c>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a73      	ldr	r2, [pc, #460]	; (8004a4c <DMA_SetConfig+0x26c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d03b      	beq.n	80048fc <DMA_SetConfig+0x11c>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a71      	ldr	r2, [pc, #452]	; (8004a50 <DMA_SetConfig+0x270>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d036      	beq.n	80048fc <DMA_SetConfig+0x11c>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a70      	ldr	r2, [pc, #448]	; (8004a54 <DMA_SetConfig+0x274>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d031      	beq.n	80048fc <DMA_SetConfig+0x11c>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a6e      	ldr	r2, [pc, #440]	; (8004a58 <DMA_SetConfig+0x278>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d02c      	beq.n	80048fc <DMA_SetConfig+0x11c>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a6d      	ldr	r2, [pc, #436]	; (8004a5c <DMA_SetConfig+0x27c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d027      	beq.n	80048fc <DMA_SetConfig+0x11c>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a6b      	ldr	r2, [pc, #428]	; (8004a60 <DMA_SetConfig+0x280>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d022      	beq.n	80048fc <DMA_SetConfig+0x11c>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a6a      	ldr	r2, [pc, #424]	; (8004a64 <DMA_SetConfig+0x284>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d01d      	beq.n	80048fc <DMA_SetConfig+0x11c>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a68      	ldr	r2, [pc, #416]	; (8004a68 <DMA_SetConfig+0x288>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d018      	beq.n	80048fc <DMA_SetConfig+0x11c>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a67      	ldr	r2, [pc, #412]	; (8004a6c <DMA_SetConfig+0x28c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <DMA_SetConfig+0x11c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a65      	ldr	r2, [pc, #404]	; (8004a70 <DMA_SetConfig+0x290>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00e      	beq.n	80048fc <DMA_SetConfig+0x11c>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a64      	ldr	r2, [pc, #400]	; (8004a74 <DMA_SetConfig+0x294>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <DMA_SetConfig+0x11c>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a62      	ldr	r2, [pc, #392]	; (8004a78 <DMA_SetConfig+0x298>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <DMA_SetConfig+0x11c>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a61      	ldr	r2, [pc, #388]	; (8004a7c <DMA_SetConfig+0x29c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d101      	bne.n	8004900 <DMA_SetConfig+0x120>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <DMA_SetConfig+0x122>
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00d      	beq.n	8004922 <DMA_SetConfig+0x142>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800490e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <DMA_SetConfig+0x142>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004920:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a3e      	ldr	r2, [pc, #248]	; (8004a20 <DMA_SetConfig+0x240>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d04a      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3c      	ldr	r2, [pc, #240]	; (8004a24 <DMA_SetConfig+0x244>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d045      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3b      	ldr	r2, [pc, #236]	; (8004a28 <DMA_SetConfig+0x248>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d040      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a39      	ldr	r2, [pc, #228]	; (8004a2c <DMA_SetConfig+0x24c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d03b      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a38      	ldr	r2, [pc, #224]	; (8004a30 <DMA_SetConfig+0x250>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d036      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a36      	ldr	r2, [pc, #216]	; (8004a34 <DMA_SetConfig+0x254>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d031      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a35      	ldr	r2, [pc, #212]	; (8004a38 <DMA_SetConfig+0x258>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d02c      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a33      	ldr	r2, [pc, #204]	; (8004a3c <DMA_SetConfig+0x25c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d027      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a32      	ldr	r2, [pc, #200]	; (8004a40 <DMA_SetConfig+0x260>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a30      	ldr	r2, [pc, #192]	; (8004a44 <DMA_SetConfig+0x264>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01d      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <DMA_SetConfig+0x268>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2d      	ldr	r2, [pc, #180]	; (8004a4c <DMA_SetConfig+0x26c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2c      	ldr	r2, [pc, #176]	; (8004a50 <DMA_SetConfig+0x270>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <DMA_SetConfig+0x274>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <DMA_SetConfig+0x278>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <DMA_SetConfig+0x1e2>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <DMA_SetConfig+0x27c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d101      	bne.n	80049c6 <DMA_SetConfig+0x1e6>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <DMA_SetConfig+0x1e8>
 80049c6:	2300      	movs	r3, #0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d059      	beq.n	8004a80 <DMA_SetConfig+0x2a0>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	223f      	movs	r2, #63	; 0x3f
 80049d6:	409a      	lsls	r2, r3
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049ea:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d108      	bne.n	8004a0e <DMA_SetConfig+0x22e>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a0c:	e086      	b.n	8004b1c <DMA_SetConfig+0x33c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	60da      	str	r2, [r3, #12]
}
 8004a1e:	e07d      	b.n	8004b1c <DMA_SetConfig+0x33c>
 8004a20:	40020010 	.word	0x40020010
 8004a24:	40020028 	.word	0x40020028
 8004a28:	40020040 	.word	0x40020040
 8004a2c:	40020058 	.word	0x40020058
 8004a30:	40020070 	.word	0x40020070
 8004a34:	40020088 	.word	0x40020088
 8004a38:	400200a0 	.word	0x400200a0
 8004a3c:	400200b8 	.word	0x400200b8
 8004a40:	40020410 	.word	0x40020410
 8004a44:	40020428 	.word	0x40020428
 8004a48:	40020440 	.word	0x40020440
 8004a4c:	40020458 	.word	0x40020458
 8004a50:	40020470 	.word	0x40020470
 8004a54:	40020488 	.word	0x40020488
 8004a58:	400204a0 	.word	0x400204a0
 8004a5c:	400204b8 	.word	0x400204b8
 8004a60:	58025408 	.word	0x58025408
 8004a64:	5802541c 	.word	0x5802541c
 8004a68:	58025430 	.word	0x58025430
 8004a6c:	58025444 	.word	0x58025444
 8004a70:	58025458 	.word	0x58025458
 8004a74:	5802546c 	.word	0x5802546c
 8004a78:	58025480 	.word	0x58025480
 8004a7c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <DMA_SetConfig+0x348>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d022      	beq.n	8004ad0 <DMA_SetConfig+0x2f0>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <DMA_SetConfig+0x34c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d01d      	beq.n	8004ad0 <DMA_SetConfig+0x2f0>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <DMA_SetConfig+0x350>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d018      	beq.n	8004ad0 <DMA_SetConfig+0x2f0>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <DMA_SetConfig+0x354>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d013      	beq.n	8004ad0 <DMA_SetConfig+0x2f0>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <DMA_SetConfig+0x358>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00e      	beq.n	8004ad0 <DMA_SetConfig+0x2f0>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <DMA_SetConfig+0x35c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d009      	beq.n	8004ad0 <DMA_SetConfig+0x2f0>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <DMA_SetConfig+0x360>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <DMA_SetConfig+0x2f0>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <DMA_SetConfig+0x364>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d101      	bne.n	8004ad4 <DMA_SetConfig+0x2f4>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <DMA_SetConfig+0x2f6>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d020      	beq.n	8004b1c <DMA_SetConfig+0x33c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d108      	bne.n	8004b0c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	60da      	str	r2, [r3, #12]
}
 8004b0a:	e007      	b.n	8004b1c <DMA_SetConfig+0x33c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	60da      	str	r2, [r3, #12]
}
 8004b1c:	bf00      	nop
 8004b1e:	372c      	adds	r7, #44	; 0x2c
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	58025408 	.word	0x58025408
 8004b2c:	5802541c 	.word	0x5802541c
 8004b30:	58025430 	.word	0x58025430
 8004b34:	58025444 	.word	0x58025444
 8004b38:	58025458 	.word	0x58025458
 8004b3c:	5802546c 	.word	0x5802546c
 8004b40:	58025480 	.word	0x58025480
 8004b44:	58025494 	.word	0x58025494

08004b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a42      	ldr	r2, [pc, #264]	; (8004c60 <DMA_CalcBaseAndBitshift+0x118>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d04a      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a41      	ldr	r2, [pc, #260]	; (8004c64 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d045      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a3f      	ldr	r2, [pc, #252]	; (8004c68 <DMA_CalcBaseAndBitshift+0x120>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d040      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a3e      	ldr	r2, [pc, #248]	; (8004c6c <DMA_CalcBaseAndBitshift+0x124>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d03b      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a3c      	ldr	r2, [pc, #240]	; (8004c70 <DMA_CalcBaseAndBitshift+0x128>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d036      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a3b      	ldr	r2, [pc, #236]	; (8004c74 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d031      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a39      	ldr	r2, [pc, #228]	; (8004c78 <DMA_CalcBaseAndBitshift+0x130>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d02c      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a38      	ldr	r2, [pc, #224]	; (8004c7c <DMA_CalcBaseAndBitshift+0x134>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d027      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a36      	ldr	r2, [pc, #216]	; (8004c80 <DMA_CalcBaseAndBitshift+0x138>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d022      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a35      	ldr	r2, [pc, #212]	; (8004c84 <DMA_CalcBaseAndBitshift+0x13c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d01d      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a33      	ldr	r2, [pc, #204]	; (8004c88 <DMA_CalcBaseAndBitshift+0x140>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d018      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a32      	ldr	r2, [pc, #200]	; (8004c8c <DMA_CalcBaseAndBitshift+0x144>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a30      	ldr	r2, [pc, #192]	; (8004c90 <DMA_CalcBaseAndBitshift+0x148>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00e      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a2f      	ldr	r2, [pc, #188]	; (8004c94 <DMA_CalcBaseAndBitshift+0x14c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d009      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2d      	ldr	r2, [pc, #180]	; (8004c98 <DMA_CalcBaseAndBitshift+0x150>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2c      	ldr	r2, [pc, #176]	; (8004c9c <DMA_CalcBaseAndBitshift+0x154>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d101      	bne.n	8004bf4 <DMA_CalcBaseAndBitshift+0xac>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <DMA_CalcBaseAndBitshift+0xae>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d024      	beq.n	8004c44 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	3b10      	subs	r3, #16
 8004c02:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <DMA_CalcBaseAndBitshift+0x158>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004c14:	5cd3      	ldrb	r3, [r2, r3]
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d908      	bls.n	8004c34 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	4b1f      	ldr	r3, [pc, #124]	; (8004ca8 <DMA_CalcBaseAndBitshift+0x160>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	1d1a      	adds	r2, r3, #4
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	659a      	str	r2, [r3, #88]	; 0x58
 8004c32:	e00d      	b.n	8004c50 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <DMA_CalcBaseAndBitshift+0x160>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6593      	str	r3, [r2, #88]	; 0x58
 8004c42:	e005      	b.n	8004c50 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40020010 	.word	0x40020010
 8004c64:	40020028 	.word	0x40020028
 8004c68:	40020040 	.word	0x40020040
 8004c6c:	40020058 	.word	0x40020058
 8004c70:	40020070 	.word	0x40020070
 8004c74:	40020088 	.word	0x40020088
 8004c78:	400200a0 	.word	0x400200a0
 8004c7c:	400200b8 	.word	0x400200b8
 8004c80:	40020410 	.word	0x40020410
 8004c84:	40020428 	.word	0x40020428
 8004c88:	40020440 	.word	0x40020440
 8004c8c:	40020458 	.word	0x40020458
 8004c90:	40020470 	.word	0x40020470
 8004c94:	40020488 	.word	0x40020488
 8004c98:	400204a0 	.word	0x400204a0
 8004c9c:	400204b8 	.word	0x400204b8
 8004ca0:	aaaaaaab 	.word	0xaaaaaaab
 8004ca4:	0800bd40 	.word	0x0800bd40
 8004ca8:	fffffc00 	.word	0xfffffc00

08004cac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d120      	bne.n	8004d02 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d858      	bhi.n	8004d7a <DMA_CheckFifoParam+0xce>
 8004cc8:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <DMA_CheckFifoParam+0x24>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004cf3 	.word	0x08004cf3
 8004cd8:	08004ce1 	.word	0x08004ce1
 8004cdc:	08004d7b 	.word	0x08004d7b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d048      	beq.n	8004d7e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cf0:	e045      	b.n	8004d7e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cfa:	d142      	bne.n	8004d82 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d00:	e03f      	b.n	8004d82 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0a:	d123      	bne.n	8004d54 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d838      	bhi.n	8004d86 <DMA_CheckFifoParam+0xda>
 8004d14:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <DMA_CheckFifoParam+0x70>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d33 	.word	0x08004d33
 8004d24:	08004d2d 	.word	0x08004d2d
 8004d28:	08004d45 	.word	0x08004d45
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
        break;
 8004d30:	e030      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d025      	beq.n	8004d8a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d42:	e022      	b.n	8004d8a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d4c:	d11f      	bne.n	8004d8e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d52:	e01c      	b.n	8004d8e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d902      	bls.n	8004d62 <DMA_CheckFifoParam+0xb6>
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d003      	beq.n	8004d68 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d60:	e018      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
        break;
 8004d66:	e015      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00e      	beq.n	8004d92 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
    break;
 8004d78:	e00b      	b.n	8004d92 <DMA_CheckFifoParam+0xe6>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e00a      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e008      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        break;
 8004d82:	bf00      	nop
 8004d84:	e006      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        break;
 8004d86:	bf00      	nop
 8004d88:	e004      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        break;
 8004d8a:	bf00      	nop
 8004d8c:	e002      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        break;
 8004d8e:	bf00      	nop
 8004d90:	e000      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
    break;
 8004d92:	bf00      	nop
    }
  }

  return status;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop

08004da4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a38      	ldr	r2, [pc, #224]	; (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d022      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a36      	ldr	r2, [pc, #216]	; (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01d      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a35      	ldr	r2, [pc, #212]	; (8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d018      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a33      	ldr	r2, [pc, #204]	; (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a32      	ldr	r2, [pc, #200]	; (8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a30      	ldr	r2, [pc, #192]	; (8004eac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2f      	ldr	r2, [pc, #188]	; (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d101      	bne.n	8004e06 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01a      	beq.n	8004e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	3b08      	subs	r3, #8
 8004e14:	4a28      	ldr	r2, [pc, #160]	; (8004eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	461a      	mov	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e30:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 031f 	and.w	r3, r3, #31
 8004e38:	2201      	movs	r2, #1
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e40:	e024      	b.n	8004e8c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	3b10      	subs	r3, #16
 8004e4a:	4a1e      	ldr	r2, [pc, #120]	; (8004ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d806      	bhi.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d902      	bls.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3308      	adds	r3, #8
 8004e68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	461a      	mov	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e7c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2201      	movs	r2, #1
 8004e86:	409a      	lsls	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e8c:	bf00      	nop
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	58025408 	.word	0x58025408
 8004e9c:	5802541c 	.word	0x5802541c
 8004ea0:	58025430 	.word	0x58025430
 8004ea4:	58025444 	.word	0x58025444
 8004ea8:	58025458 	.word	0x58025458
 8004eac:	5802546c 	.word	0x5802546c
 8004eb0:	58025480 	.word	0x58025480
 8004eb4:	58025494 	.word	0x58025494
 8004eb8:	cccccccd 	.word	0xcccccccd
 8004ebc:	16009600 	.word	0x16009600
 8004ec0:	58025880 	.word	0x58025880
 8004ec4:	aaaaaaab 	.word	0xaaaaaaab
 8004ec8:	400204b8 	.word	0x400204b8
 8004ecc:	4002040f 	.word	0x4002040f
 8004ed0:	10008200 	.word	0x10008200
 8004ed4:	40020880 	.word	0x40020880

08004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04a      	beq.n	8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d847      	bhi.n	8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a25      	ldr	r2, [pc, #148]	; (8004f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d022      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d01d      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a22      	ldr	r2, [pc, #136]	; (8004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d018      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a21      	ldr	r2, [pc, #132]	; (8004f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d013      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1f      	ldr	r2, [pc, #124]	; (8004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00e      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1e      	ldr	r2, [pc, #120]	; (8004fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1b      	ldr	r2, [pc, #108]	; (8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d101      	bne.n	8004f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f60:	671a      	str	r2, [r3, #112]	; 0x70
 8004f62:	e009      	b.n	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a11      	ldr	r2, [pc, #68]	; (8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f76:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	58025408 	.word	0x58025408
 8004f94:	5802541c 	.word	0x5802541c
 8004f98:	58025430 	.word	0x58025430
 8004f9c:	58025444 	.word	0x58025444
 8004fa0:	58025458 	.word	0x58025458
 8004fa4:	5802546c 	.word	0x5802546c
 8004fa8:	58025480 	.word	0x58025480
 8004fac:	58025494 	.word	0x58025494
 8004fb0:	1600963f 	.word	0x1600963f
 8004fb4:	58025940 	.word	0x58025940
 8004fb8:	1000823f 	.word	0x1000823f
 8004fbc:	40020940 	.word	0x40020940

08004fc0 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	7a1b      	ldrb	r3, [r3, #8]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d155      	bne.n	8005086 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a4b      	ldr	r2, [pc, #300]	; (800510c <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d049      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a49      	ldr	r2, [pc, #292]	; (8005110 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d044      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a48      	ldr	r2, [pc, #288]	; (8005114 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d03f      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a46      	ldr	r2, [pc, #280]	; (8005118 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d03a      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a45      	ldr	r2, [pc, #276]	; (800511c <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d035      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a43      	ldr	r2, [pc, #268]	; (8005120 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d030      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a42      	ldr	r2, [pc, #264]	; (8005124 <HAL_DMAEx_ConfigMuxSync+0x164>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d02b      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a40      	ldr	r2, [pc, #256]	; (8005128 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d026      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a3f      	ldr	r2, [pc, #252]	; (800512c <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d021      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a3d      	ldr	r2, [pc, #244]	; (8005130 <HAL_DMAEx_ConfigMuxSync+0x170>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01c      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d017      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a3a      	ldr	r2, [pc, #232]	; (8005138 <HAL_DMAEx_ConfigMuxSync+0x178>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d012      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a39      	ldr	r2, [pc, #228]	; (800513c <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00d      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a37      	ldr	r2, [pc, #220]	; (8005140 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d008      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a36      	ldr	r2, [pc, #216]	; (8005144 <HAL_DMAEx_ConfigMuxSync+0x184>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a34      	ldr	r2, [pc, #208]	; (8005148 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8005076:	4293      	cmp	r3, r2
 8005078:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d131      	bne.n	80050f6 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_DMAEx_ConfigMuxSync+0xe0>
 800509c:	2302      	movs	r3, #2
 800509e:	e02f      	b.n	8005100 <HAL_DMAEx_ConfigMuxSync+0x140>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b2:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 80050b6:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	b2d9      	uxtb	r1, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	061a      	lsls	r2, r3, #24
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	04db      	lsls	r3, r3, #19
 80050cc:	431a      	orrs	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	7a1b      	ldrb	r3, [r3, #8]
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	431a      	orrs	r2, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	7a5b      	ldrb	r3, [r3, #9]
 80050de:	025b      	lsls	r3, r3, #9
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e6:	430a      	orrs	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e004      	b.n	8005100 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40020010 	.word	0x40020010
 8005110:	40020028 	.word	0x40020028
 8005114:	40020040 	.word	0x40020040
 8005118:	40020058 	.word	0x40020058
 800511c:	40020070 	.word	0x40020070
 8005120:	40020088 	.word	0x40020088
 8005124:	400200a0 	.word	0x400200a0
 8005128:	400200b8 	.word	0x400200b8
 800512c:	40020410 	.word	0x40020410
 8005130:	40020428 	.word	0x40020428
 8005134:	40020440 	.word	0x40020440
 8005138:	40020458 	.word	0x40020458
 800513c:	40020470 	.word	0x40020470
 8005140:	40020488 	.word	0x40020488
 8005144:	400204a0 	.word	0x400204a0
 8005148:	400204b8 	.word	0x400204b8

0800514c <HAL_DMAEx_EnableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d009      	beq.n	800517c <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
  {
    /* Enable the request generator*/
    hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005172:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005176:	601a      	str	r2, [r3, #0]

   return HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	e000      	b.n	800517e <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 }
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800519c:	4013      	ands	r3, r2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01a      	beq.n	80051d8 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d022      	beq.n	8005226 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01a      	beq.n	8005226 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005208:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
      }
    }
  }
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	; 0x24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800523e:	4b86      	ldr	r3, [pc, #536]	; (8005458 <HAL_GPIO_Init+0x228>)
 8005240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005242:	e18c      	b.n	800555e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	2101      	movs	r1, #1
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	fa01 f303 	lsl.w	r3, r1, r3
 8005250:	4013      	ands	r3, r2
 8005252:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 817e 	beq.w	8005558 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d005      	beq.n	8005274 <HAL_GPIO_Init+0x44>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d130      	bne.n	80052d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	2203      	movs	r2, #3
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4013      	ands	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052aa:	2201      	movs	r2, #1
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43db      	mvns	r3, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4013      	ands	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	f003 0201 	and.w	r2, r3, #1
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d017      	beq.n	8005312 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	2203      	movs	r2, #3
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43db      	mvns	r3, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4013      	ands	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	4313      	orrs	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d123      	bne.n	8005366 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	08da      	lsrs	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3208      	adds	r2, #8
 8005326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	220f      	movs	r2, #15
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	08da      	lsrs	r2, r3, #3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3208      	adds	r2, #8
 8005360:	69b9      	ldr	r1, [r7, #24]
 8005362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	2203      	movs	r2, #3
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4013      	ands	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 0203 	and.w	r2, r3, #3
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4313      	orrs	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 80d8 	beq.w	8005558 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a8:	4b2c      	ldr	r3, [pc, #176]	; (800545c <HAL_GPIO_Init+0x22c>)
 80053aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053ae:	4a2b      	ldr	r2, [pc, #172]	; (800545c <HAL_GPIO_Init+0x22c>)
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80053b8:	4b28      	ldr	r3, [pc, #160]	; (800545c <HAL_GPIO_Init+0x22c>)
 80053ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053c6:	4a26      	ldr	r2, [pc, #152]	; (8005460 <HAL_GPIO_Init+0x230>)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	089b      	lsrs	r3, r3, #2
 80053cc:	3302      	adds	r3, #2
 80053ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	220f      	movs	r2, #15
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	43db      	mvns	r3, r3
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	4013      	ands	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <HAL_GPIO_Init+0x234>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d04a      	beq.n	8005488 <HAL_GPIO_Init+0x258>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <HAL_GPIO_Init+0x238>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d02b      	beq.n	8005452 <HAL_GPIO_Init+0x222>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1b      	ldr	r2, [pc, #108]	; (800546c <HAL_GPIO_Init+0x23c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d025      	beq.n	800544e <HAL_GPIO_Init+0x21e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1a      	ldr	r2, [pc, #104]	; (8005470 <HAL_GPIO_Init+0x240>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01f      	beq.n	800544a <HAL_GPIO_Init+0x21a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a19      	ldr	r2, [pc, #100]	; (8005474 <HAL_GPIO_Init+0x244>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d019      	beq.n	8005446 <HAL_GPIO_Init+0x216>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_GPIO_Init+0x248>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_GPIO_Init+0x212>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a17      	ldr	r2, [pc, #92]	; (800547c <HAL_GPIO_Init+0x24c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00d      	beq.n	800543e <HAL_GPIO_Init+0x20e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a16      	ldr	r2, [pc, #88]	; (8005480 <HAL_GPIO_Init+0x250>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d007      	beq.n	800543a <HAL_GPIO_Init+0x20a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a15      	ldr	r2, [pc, #84]	; (8005484 <HAL_GPIO_Init+0x254>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <HAL_GPIO_Init+0x206>
 8005432:	2309      	movs	r3, #9
 8005434:	e029      	b.n	800548a <HAL_GPIO_Init+0x25a>
 8005436:	230a      	movs	r3, #10
 8005438:	e027      	b.n	800548a <HAL_GPIO_Init+0x25a>
 800543a:	2307      	movs	r3, #7
 800543c:	e025      	b.n	800548a <HAL_GPIO_Init+0x25a>
 800543e:	2306      	movs	r3, #6
 8005440:	e023      	b.n	800548a <HAL_GPIO_Init+0x25a>
 8005442:	2305      	movs	r3, #5
 8005444:	e021      	b.n	800548a <HAL_GPIO_Init+0x25a>
 8005446:	2304      	movs	r3, #4
 8005448:	e01f      	b.n	800548a <HAL_GPIO_Init+0x25a>
 800544a:	2303      	movs	r3, #3
 800544c:	e01d      	b.n	800548a <HAL_GPIO_Init+0x25a>
 800544e:	2302      	movs	r3, #2
 8005450:	e01b      	b.n	800548a <HAL_GPIO_Init+0x25a>
 8005452:	2301      	movs	r3, #1
 8005454:	e019      	b.n	800548a <HAL_GPIO_Init+0x25a>
 8005456:	bf00      	nop
 8005458:	58000080 	.word	0x58000080
 800545c:	58024400 	.word	0x58024400
 8005460:	58000400 	.word	0x58000400
 8005464:	58020000 	.word	0x58020000
 8005468:	58020400 	.word	0x58020400
 800546c:	58020800 	.word	0x58020800
 8005470:	58020c00 	.word	0x58020c00
 8005474:	58021000 	.word	0x58021000
 8005478:	58021400 	.word	0x58021400
 800547c:	58021800 	.word	0x58021800
 8005480:	58021c00 	.word	0x58021c00
 8005484:	58022400 	.word	0x58022400
 8005488:	2300      	movs	r3, #0
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	f002 0203 	and.w	r2, r2, #3
 8005490:	0092      	lsls	r2, r2, #2
 8005492:	4093      	lsls	r3, r2
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4313      	orrs	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800549a:	4938      	ldr	r1, [pc, #224]	; (800557c <HAL_GPIO_Init+0x34c>)
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	089b      	lsrs	r3, r3, #2
 80054a0:	3302      	adds	r3, #2
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	43db      	mvns	r3, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4013      	ands	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80054ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80054fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	43db      	mvns	r3, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4013      	ands	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	f47f ae6b 	bne.w	8005244 <HAL_GPIO_Init+0x14>
  }
}
 800556e:	bf00      	nop
 8005570:	bf00      	nop
 8005572:	3724      	adds	r7, #36	; 0x24
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	58000400 	.word	0x58000400

08005580 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800558e:	4b72      	ldr	r3, [pc, #456]	; (8005758 <HAL_GPIO_DeInit+0x1d8>)
 8005590:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005592:	e0d3      	b.n	800573c <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005594:	2201      	movs	r2, #1
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	4013      	ands	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80c6 	beq.w	8005736 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80055aa:	4a6c      	ldr	r2, [pc, #432]	; (800575c <HAL_GPIO_DeInit+0x1dc>)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	089b      	lsrs	r3, r3, #2
 80055b0:	3302      	adds	r3, #2
 80055b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	220f      	movs	r2, #15
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a64      	ldr	r2, [pc, #400]	; (8005760 <HAL_GPIO_DeInit+0x1e0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d031      	beq.n	8005638 <HAL_GPIO_DeInit+0xb8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a63      	ldr	r2, [pc, #396]	; (8005764 <HAL_GPIO_DeInit+0x1e4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d02b      	beq.n	8005634 <HAL_GPIO_DeInit+0xb4>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a62      	ldr	r2, [pc, #392]	; (8005768 <HAL_GPIO_DeInit+0x1e8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d025      	beq.n	8005630 <HAL_GPIO_DeInit+0xb0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a61      	ldr	r2, [pc, #388]	; (800576c <HAL_GPIO_DeInit+0x1ec>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d01f      	beq.n	800562c <HAL_GPIO_DeInit+0xac>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a60      	ldr	r2, [pc, #384]	; (8005770 <HAL_GPIO_DeInit+0x1f0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d019      	beq.n	8005628 <HAL_GPIO_DeInit+0xa8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a5f      	ldr	r2, [pc, #380]	; (8005774 <HAL_GPIO_DeInit+0x1f4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d013      	beq.n	8005624 <HAL_GPIO_DeInit+0xa4>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a5e      	ldr	r2, [pc, #376]	; (8005778 <HAL_GPIO_DeInit+0x1f8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d00d      	beq.n	8005620 <HAL_GPIO_DeInit+0xa0>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a5d      	ldr	r2, [pc, #372]	; (800577c <HAL_GPIO_DeInit+0x1fc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d007      	beq.n	800561c <HAL_GPIO_DeInit+0x9c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a5c      	ldr	r2, [pc, #368]	; (8005780 <HAL_GPIO_DeInit+0x200>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d101      	bne.n	8005618 <HAL_GPIO_DeInit+0x98>
 8005614:	2309      	movs	r3, #9
 8005616:	e010      	b.n	800563a <HAL_GPIO_DeInit+0xba>
 8005618:	230a      	movs	r3, #10
 800561a:	e00e      	b.n	800563a <HAL_GPIO_DeInit+0xba>
 800561c:	2307      	movs	r3, #7
 800561e:	e00c      	b.n	800563a <HAL_GPIO_DeInit+0xba>
 8005620:	2306      	movs	r3, #6
 8005622:	e00a      	b.n	800563a <HAL_GPIO_DeInit+0xba>
 8005624:	2305      	movs	r3, #5
 8005626:	e008      	b.n	800563a <HAL_GPIO_DeInit+0xba>
 8005628:	2304      	movs	r3, #4
 800562a:	e006      	b.n	800563a <HAL_GPIO_DeInit+0xba>
 800562c:	2303      	movs	r3, #3
 800562e:	e004      	b.n	800563a <HAL_GPIO_DeInit+0xba>
 8005630:	2302      	movs	r3, #2
 8005632:	e002      	b.n	800563a <HAL_GPIO_DeInit+0xba>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <HAL_GPIO_DeInit+0xba>
 8005638:	2300      	movs	r3, #0
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	f002 0203 	and.w	r2, r2, #3
 8005640:	0092      	lsls	r2, r2, #2
 8005642:	4093      	lsls	r3, r2
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	429a      	cmp	r2, r3
 8005648:	d136      	bne.n	80056b8 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	43db      	mvns	r3, r3
 8005652:	401a      	ands	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	43db      	mvns	r3, r3
 8005660:	401a      	ands	r2, r3
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	43db      	mvns	r3, r3
 8005670:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005674:	4013      	ands	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	43db      	mvns	r3, r3
 8005682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005686:	4013      	ands	r3, r2
 8005688:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	220f      	movs	r2, #15
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800569a:	4a30      	ldr	r2, [pc, #192]	; (800575c <HAL_GPIO_DeInit+0x1dc>)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	089b      	lsrs	r3, r3, #2
 80056a0:	3302      	adds	r3, #2
 80056a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	43da      	mvns	r2, r3
 80056aa:	482c      	ldr	r0, [pc, #176]	; (800575c <HAL_GPIO_DeInit+0x1dc>)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	089b      	lsrs	r3, r3, #2
 80056b0:	400a      	ands	r2, r1
 80056b2:	3302      	adds	r3, #2
 80056b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	2103      	movs	r1, #3
 80056c2:	fa01 f303 	lsl.w	r3, r1, r3
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	08da      	lsrs	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3208      	adds	r2, #8
 80056d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	220f      	movs	r2, #15
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	43db      	mvns	r3, r3
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	08d2      	lsrs	r2, r2, #3
 80056ec:	4019      	ands	r1, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3208      	adds	r2, #8
 80056f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	2103      	movs	r1, #3
 8005700:	fa01 f303 	lsl.w	r3, r1, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	401a      	ands	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	2101      	movs	r1, #1
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	401a      	ands	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	2103      	movs	r1, #3
 800572a:	fa01 f303 	lsl.w	r3, r1, r3
 800572e:	43db      	mvns	r3, r3
 8005730:	401a      	ands	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	3301      	adds	r3, #1
 800573a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	f47f af25 	bne.w	8005594 <HAL_GPIO_DeInit+0x14>
  }
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	58000080 	.word	0x58000080
 800575c:	58000400 	.word	0x58000400
 8005760:	58020000 	.word	0x58020000
 8005764:	58020400 	.word	0x58020400
 8005768:	58020800 	.word	0x58020800
 800576c:	58020c00 	.word	0x58020c00
 8005770:	58021000 	.word	0x58021000
 8005774:	58021400 	.word	0x58021400
 8005778:	58021800 	.word	0x58021800
 800577c:	58021c00 	.word	0x58021c00
 8005780:	58022400 	.word	0x58022400

08005784 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800578c:	4b29      	ldr	r3, [pc, #164]	; (8005834 <HAL_PWREx_ConfigSupply+0xb0>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	2b06      	cmp	r3, #6
 8005796:	d00a      	beq.n	80057ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005798:	4b26      	ldr	r3, [pc, #152]	; (8005834 <HAL_PWREx_ConfigSupply+0xb0>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d001      	beq.n	80057aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e03f      	b.n	800582a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e03d      	b.n	800582a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80057ae:	4b21      	ldr	r3, [pc, #132]	; (8005834 <HAL_PWREx_ConfigSupply+0xb0>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80057b6:	491f      	ldr	r1, [pc, #124]	; (8005834 <HAL_PWREx_ConfigSupply+0xb0>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80057be:	f7fc fce3 	bl	8002188 <HAL_GetTick>
 80057c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057c4:	e009      	b.n	80057da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80057c6:	f7fc fcdf 	bl	8002188 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057d4:	d901      	bls.n	80057da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e027      	b.n	800582a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <HAL_PWREx_ConfigSupply+0xb0>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e6:	d1ee      	bne.n	80057c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b1e      	cmp	r3, #30
 80057ec:	d008      	beq.n	8005800 <HAL_PWREx_ConfigSupply+0x7c>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b2e      	cmp	r3, #46	; 0x2e
 80057f2:	d005      	beq.n	8005800 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b1d      	cmp	r3, #29
 80057f8:	d002      	beq.n	8005800 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b2d      	cmp	r3, #45	; 0x2d
 80057fe:	d113      	bne.n	8005828 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005800:	f7fc fcc2 	bl	8002188 <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005806:	e009      	b.n	800581c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005808:	f7fc fcbe 	bl	8002188 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005816:	d901      	bls.n	800581c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e006      	b.n	800582a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <HAL_PWREx_ConfigSupply+0xb0>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0311 	and.w	r3, r3, #17
 8005824:	2b11      	cmp	r3, #17
 8005826:	d1ef      	bne.n	8005808 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	58024800 	.word	0x58024800

08005838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	; 0x30
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e397      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8087 	beq.w	8005966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005858:	4b9e      	ldr	r3, [pc, #632]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005862:	4b9c      	ldr	r3, [pc, #624]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	2b10      	cmp	r3, #16
 800586c:	d007      	beq.n	800587e <HAL_RCC_OscConfig+0x46>
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	2b18      	cmp	r3, #24
 8005872:	d110      	bne.n	8005896 <HAL_RCC_OscConfig+0x5e>
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d10b      	bne.n	8005896 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800587e:	4b95      	ldr	r3, [pc, #596]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d06c      	beq.n	8005964 <HAL_RCC_OscConfig+0x12c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d168      	bne.n	8005964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e371      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589e:	d106      	bne.n	80058ae <HAL_RCC_OscConfig+0x76>
 80058a0:	4b8c      	ldr	r3, [pc, #560]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a8b      	ldr	r2, [pc, #556]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	e02e      	b.n	800590c <HAL_RCC_OscConfig+0xd4>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCC_OscConfig+0x98>
 80058b6:	4b87      	ldr	r3, [pc, #540]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a86      	ldr	r2, [pc, #536]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4b84      	ldr	r3, [pc, #528]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a83      	ldr	r2, [pc, #524]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e01d      	b.n	800590c <HAL_RCC_OscConfig+0xd4>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058d8:	d10c      	bne.n	80058f4 <HAL_RCC_OscConfig+0xbc>
 80058da:	4b7e      	ldr	r3, [pc, #504]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a7d      	ldr	r2, [pc, #500]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	4b7b      	ldr	r3, [pc, #492]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a7a      	ldr	r2, [pc, #488]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	e00b      	b.n	800590c <HAL_RCC_OscConfig+0xd4>
 80058f4:	4b77      	ldr	r3, [pc, #476]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a76      	ldr	r2, [pc, #472]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80058fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	4b74      	ldr	r3, [pc, #464]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a73      	ldr	r2, [pc, #460]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d013      	beq.n	800593c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7fc fc38 	bl	8002188 <HAL_GetTick>
 8005918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800591c:	f7fc fc34 	bl	8002188 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b64      	cmp	r3, #100	; 0x64
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e325      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800592e:	4b69      	ldr	r3, [pc, #420]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0xe4>
 800593a:	e014      	b.n	8005966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593c:	f7fc fc24 	bl	8002188 <HAL_GetTick>
 8005940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005944:	f7fc fc20 	bl	8002188 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b64      	cmp	r3, #100	; 0x64
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e311      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005956:	4b5f      	ldr	r3, [pc, #380]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x10c>
 8005962:	e000      	b.n	8005966 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 808a 	beq.w	8005a88 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005974:	4b57      	ldr	r3, [pc, #348]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800597c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800597e:	4b55      	ldr	r3, [pc, #340]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <HAL_RCC_OscConfig+0x162>
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	2b18      	cmp	r3, #24
 800598e:	d137      	bne.n	8005a00 <HAL_RCC_OscConfig+0x1c8>
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d132      	bne.n	8005a00 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800599a:	4b4e      	ldr	r3, [pc, #312]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_RCC_OscConfig+0x17a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e2e3      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059b2:	4b48      	ldr	r3, [pc, #288]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 0219 	bic.w	r2, r3, #25
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	4945      	ldr	r1, [pc, #276]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059c4:	f7fc fbe0 	bl	8002188 <HAL_GetTick>
 80059c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059cc:	f7fc fbdc 	bl	8002188 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e2cd      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059de:	4b3d      	ldr	r3, [pc, #244]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ea:	4b3a      	ldr	r3, [pc, #232]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	061b      	lsls	r3, r3, #24
 80059f8:	4936      	ldr	r1, [pc, #216]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059fe:	e043      	b.n	8005a88 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d026      	beq.n	8005a56 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a08:	4b32      	ldr	r3, [pc, #200]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f023 0219 	bic.w	r2, r3, #25
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	492f      	ldr	r1, [pc, #188]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1a:	f7fc fbb5 	bl	8002188 <HAL_GetTick>
 8005a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a22:	f7fc fbb1 	bl	8002188 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e2a2      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a34:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0f0      	beq.n	8005a22 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a40:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	061b      	lsls	r3, r3, #24
 8005a4e:	4921      	ldr	r1, [pc, #132]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	604b      	str	r3, [r1, #4]
 8005a54:	e018      	b.n	8005a88 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a56:	4b1f      	ldr	r3, [pc, #124]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a62:	f7fc fb91 	bl	8002188 <HAL_GetTick>
 8005a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a6a:	f7fc fb8d 	bl	8002188 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e27e      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a7c:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d06d      	beq.n	8005b70 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a94:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a9c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d007      	beq.n	8005aba <HAL_RCC_OscConfig+0x282>
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b18      	cmp	r3, #24
 8005aae:	d11e      	bne.n	8005aee <HAL_RCC_OscConfig+0x2b6>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d119      	bne.n	8005aee <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_RCC_OscConfig+0x29c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x2a0>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	2b80      	cmp	r3, #128	; 0x80
 8005acc:	d004      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e253      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
 8005ad2:	bf00      	nop
 8005ad4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ad8:	4ba3      	ldr	r3, [pc, #652]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	49a0      	ldr	r1, [pc, #640]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aec:	e040      	b.n	8005b70 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d023      	beq.n	8005b3e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005af6:	4b9c      	ldr	r3, [pc, #624]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a9b      	ldr	r2, [pc, #620]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fc fb41 	bl	8002188 <HAL_GetTick>
 8005b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b0a:	f7fc fb3d 	bl	8002188 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e22e      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b1c:	4b92      	ldr	r3, [pc, #584]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b28:	4b8f      	ldr	r3, [pc, #572]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	498c      	ldr	r1, [pc, #560]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60cb      	str	r3, [r1, #12]
 8005b3c:	e018      	b.n	8005b70 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b3e:	4b8a      	ldr	r3, [pc, #552]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a89      	ldr	r2, [pc, #548]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4a:	f7fc fb1d 	bl	8002188 <HAL_GetTick>
 8005b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b52:	f7fc fb19 	bl	8002188 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e20a      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b64:	4b80      	ldr	r3, [pc, #512]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f0      	bne.n	8005b52 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d036      	beq.n	8005bea <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d019      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b84:	4b78      	ldr	r3, [pc, #480]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b88:	4a77      	ldr	r2, [pc, #476]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b90:	f7fc fafa 	bl	8002188 <HAL_GetTick>
 8005b94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b98:	f7fc faf6 	bl	8002188 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e1e7      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005baa:	4b6f      	ldr	r3, [pc, #444]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0f0      	beq.n	8005b98 <HAL_RCC_OscConfig+0x360>
 8005bb6:	e018      	b.n	8005bea <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb8:	4b6b      	ldr	r3, [pc, #428]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bbc:	4a6a      	ldr	r2, [pc, #424]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005bbe:	f023 0301 	bic.w	r3, r3, #1
 8005bc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc4:	f7fc fae0 	bl	8002188 <HAL_GetTick>
 8005bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bcc:	f7fc fadc 	bl	8002188 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e1cd      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bde:	4b62      	ldr	r3, [pc, #392]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f0      	bne.n	8005bcc <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d036      	beq.n	8005c64 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d019      	beq.n	8005c32 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bfe:	4b5a      	ldr	r3, [pc, #360]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a59      	ldr	r2, [pc, #356]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c0a:	f7fc fabd 	bl	8002188 <HAL_GetTick>
 8005c0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c12:	f7fc fab9 	bl	8002188 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e1aa      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c24:	4b50      	ldr	r3, [pc, #320]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0f0      	beq.n	8005c12 <HAL_RCC_OscConfig+0x3da>
 8005c30:	e018      	b.n	8005c64 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c32:	4b4d      	ldr	r3, [pc, #308]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a4c      	ldr	r2, [pc, #304]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c3e:	f7fc faa3 	bl	8002188 <HAL_GetTick>
 8005c42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c46:	f7fc fa9f 	bl	8002188 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e190      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c58:	4b43      	ldr	r3, [pc, #268]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f0      	bne.n	8005c46 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8085 	beq.w	8005d7c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c72:	4b3e      	ldr	r3, [pc, #248]	; (8005d6c <HAL_RCC_OscConfig+0x534>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a3d      	ldr	r2, [pc, #244]	; (8005d6c <HAL_RCC_OscConfig+0x534>)
 8005c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c7e:	f7fc fa83 	bl	8002188 <HAL_GetTick>
 8005c82:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c86:	f7fc fa7f 	bl	8002188 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b64      	cmp	r3, #100	; 0x64
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e170      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c98:	4b34      	ldr	r3, [pc, #208]	; (8005d6c <HAL_RCC_OscConfig+0x534>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d106      	bne.n	8005cba <HAL_RCC_OscConfig+0x482>
 8005cac:	4b2e      	ldr	r3, [pc, #184]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb0:	4a2d      	ldr	r2, [pc, #180]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb8:	e02d      	b.n	8005d16 <HAL_RCC_OscConfig+0x4de>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x4a4>
 8005cc2:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc6:	4a28      	ldr	r2, [pc, #160]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005cc8:	f023 0301 	bic.w	r3, r3, #1
 8005ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cce:	4b26      	ldr	r3, [pc, #152]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	4a25      	ldr	r2, [pc, #148]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005cd4:	f023 0304 	bic.w	r3, r3, #4
 8005cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cda:	e01c      	b.n	8005d16 <HAL_RCC_OscConfig+0x4de>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b05      	cmp	r3, #5
 8005ce2:	d10c      	bne.n	8005cfe <HAL_RCC_OscConfig+0x4c6>
 8005ce4:	4b20      	ldr	r3, [pc, #128]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005cea:	f043 0304 	orr.w	r3, r3, #4
 8005cee:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8005cfc:	e00b      	b.n	8005d16 <HAL_RCC_OscConfig+0x4de>
 8005cfe:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	4a19      	ldr	r2, [pc, #100]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	6713      	str	r3, [r2, #112]	; 0x70
 8005d0a:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005d10:	f023 0304 	bic.w	r3, r3, #4
 8005d14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d015      	beq.n	8005d4a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fc fa33 	bl	8002188 <HAL_GetTick>
 8005d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d24:	e00a      	b.n	8005d3c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d26:	f7fc fa2f 	bl	8002188 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e11e      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <HAL_RCC_OscConfig+0x530>)
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ee      	beq.n	8005d26 <HAL_RCC_OscConfig+0x4ee>
 8005d48:	e018      	b.n	8005d7c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4a:	f7fc fa1d 	bl	8002188 <HAL_GetTick>
 8005d4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d50:	e00e      	b.n	8005d70 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fc fa19 	bl	8002188 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d905      	bls.n	8005d70 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e108      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d70:	4b84      	ldr	r3, [pc, #528]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1ea      	bne.n	8005d52 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80f9 	beq.w	8005f78 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d86:	4b7f      	ldr	r3, [pc, #508]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d8e:	2b18      	cmp	r3, #24
 8005d90:	f000 80b4 	beq.w	8005efc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	f040 8095 	bne.w	8005ec8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d9e:	4b79      	ldr	r3, [pc, #484]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a78      	ldr	r2, [pc, #480]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005daa:	f7fc f9ed 	bl	8002188 <HAL_GetTick>
 8005dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db2:	f7fc f9e9 	bl	8002188 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e0da      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dc4:	4b6f      	ldr	r3, [pc, #444]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f0      	bne.n	8005db2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dd0:	4b6c      	ldr	r3, [pc, #432]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd4:	4b6c      	ldr	r3, [pc, #432]	; (8005f88 <HAL_RCC_OscConfig+0x750>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005de0:	0112      	lsls	r2, r2, #4
 8005de2:	430a      	orrs	r2, r1
 8005de4:	4967      	ldr	r1, [pc, #412]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	628b      	str	r3, [r1, #40]	; 0x28
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	3b01      	subs	r3, #1
 8005df0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	025b      	lsls	r3, r3, #9
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	3b01      	subs	r3, #1
 8005e06:	041b      	lsls	r3, r3, #16
 8005e08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	3b01      	subs	r3, #1
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e1a:	495a      	ldr	r1, [pc, #360]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005e20:	4b58      	ldr	r3, [pc, #352]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	4a57      	ldr	r2, [pc, #348]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e2c:	4b55      	ldr	r3, [pc, #340]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e30:	4b56      	ldr	r3, [pc, #344]	; (8005f8c <HAL_RCC_OscConfig+0x754>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e38:	00d2      	lsls	r2, r2, #3
 8005e3a:	4952      	ldr	r1, [pc, #328]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e40:	4b50      	ldr	r3, [pc, #320]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	f023 020c 	bic.w	r2, r3, #12
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	494d      	ldr	r1, [pc, #308]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e52:	4b4c      	ldr	r3, [pc, #304]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	f023 0202 	bic.w	r2, r3, #2
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5e:	4949      	ldr	r1, [pc, #292]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e64:	4b47      	ldr	r3, [pc, #284]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4a46      	ldr	r2, [pc, #280]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e70:	4b44      	ldr	r3, [pc, #272]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4a43      	ldr	r2, [pc, #268]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e7c:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	4a40      	ldr	r2, [pc, #256]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005e88:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	4a3d      	ldr	r2, [pc, #244]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e94:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a3a      	ldr	r2, [pc, #232]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea0:	f7fc f972 	bl	8002188 <HAL_GetTick>
 8005ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ea8:	f7fc f96e 	bl	8002188 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e05f      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eba:	4b32      	ldr	r3, [pc, #200]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x670>
 8005ec6:	e057      	b.n	8005f78 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec8:	4b2e      	ldr	r3, [pc, #184]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a2d      	ldr	r2, [pc, #180]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed4:	f7fc f958 	bl	8002188 <HAL_GetTick>
 8005ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fc f954 	bl	8002188 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e045      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eee:	4b25      	ldr	r3, [pc, #148]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCC_OscConfig+0x6a4>
 8005efa:	e03d      	b.n	8005f78 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005efc:	4b21      	ldr	r3, [pc, #132]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f02:	4b20      	ldr	r3, [pc, #128]	; (8005f84 <HAL_RCC_OscConfig+0x74c>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d031      	beq.n	8005f74 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f003 0203 	and.w	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d12a      	bne.n	8005f74 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d122      	bne.n	8005f74 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d11a      	bne.n	8005f74 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	0a5b      	lsrs	r3, r3, #9
 8005f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d111      	bne.n	8005f74 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	0c1b      	lsrs	r3, r3, #16
 8005f54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d108      	bne.n	8005f74 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	0e1b      	lsrs	r3, r3, #24
 8005f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3730      	adds	r7, #48	; 0x30
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	58024400 	.word	0x58024400
 8005f88:	fffffc0c 	.word	0xfffffc0c
 8005f8c:	ffff0007 	.word	0xffff0007

08005f90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e19c      	b.n	80062de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa4:	4b8a      	ldr	r3, [pc, #552]	; (80061d0 <HAL_RCC_ClockConfig+0x240>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d910      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb2:	4b87      	ldr	r3, [pc, #540]	; (80061d0 <HAL_RCC_ClockConfig+0x240>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f023 020f 	bic.w	r2, r3, #15
 8005fba:	4985      	ldr	r1, [pc, #532]	; (80061d0 <HAL_RCC_ClockConfig+0x240>)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b83      	ldr	r3, [pc, #524]	; (80061d0 <HAL_RCC_ClockConfig+0x240>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e184      	b.n	80062de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d010      	beq.n	8006002 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	4b7b      	ldr	r3, [pc, #492]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d908      	bls.n	8006002 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ff0:	4b78      	ldr	r3, [pc, #480]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	4975      	ldr	r1, [pc, #468]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d010      	beq.n	8006030 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695a      	ldr	r2, [r3, #20]
 8006012:	4b70      	ldr	r3, [pc, #448]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800601a:	429a      	cmp	r2, r3
 800601c:	d908      	bls.n	8006030 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800601e:	4b6d      	ldr	r3, [pc, #436]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	496a      	ldr	r1, [pc, #424]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 800602c:	4313      	orrs	r3, r2
 800602e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b00      	cmp	r3, #0
 800603a:	d010      	beq.n	800605e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699a      	ldr	r2, [r3, #24]
 8006040:	4b64      	ldr	r3, [pc, #400]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006048:	429a      	cmp	r2, r3
 800604a:	d908      	bls.n	800605e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800604c:	4b61      	ldr	r3, [pc, #388]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	495e      	ldr	r1, [pc, #376]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 800605a:	4313      	orrs	r3, r2
 800605c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d010      	beq.n	800608c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69da      	ldr	r2, [r3, #28]
 800606e:	4b59      	ldr	r3, [pc, #356]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006076:	429a      	cmp	r2, r3
 8006078:	d908      	bls.n	800608c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800607a:	4b56      	ldr	r3, [pc, #344]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	4953      	ldr	r1, [pc, #332]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006088:	4313      	orrs	r3, r2
 800608a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d010      	beq.n	80060ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	4b4d      	ldr	r3, [pc, #308]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d908      	bls.n	80060ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a8:	4b4a      	ldr	r3, [pc, #296]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	f023 020f 	bic.w	r2, r3, #15
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	4947      	ldr	r1, [pc, #284]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d055      	beq.n	8006172 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80060c6:	4b43      	ldr	r3, [pc, #268]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	4940      	ldr	r1, [pc, #256]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d107      	bne.n	80060f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060e0:	4b3c      	ldr	r3, [pc, #240]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d121      	bne.n	8006130 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0f6      	b.n	80062de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d107      	bne.n	8006108 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060f8:	4b36      	ldr	r3, [pc, #216]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d115      	bne.n	8006130 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e0ea      	b.n	80062de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d107      	bne.n	8006120 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006110:	4b30      	ldr	r3, [pc, #192]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006118:	2b00      	cmp	r3, #0
 800611a:	d109      	bne.n	8006130 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e0de      	b.n	80062de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006120:	4b2c      	ldr	r3, [pc, #176]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e0d6      	b.n	80062de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006130:	4b28      	ldr	r3, [pc, #160]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f023 0207 	bic.w	r2, r3, #7
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	4925      	ldr	r1, [pc, #148]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 800613e:	4313      	orrs	r3, r2
 8006140:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006142:	f7fc f821 	bl	8002188 <HAL_GetTick>
 8006146:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006148:	e00a      	b.n	8006160 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800614a:	f7fc f81d 	bl	8002188 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f241 3288 	movw	r2, #5000	; 0x1388
 8006158:	4293      	cmp	r3, r2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e0be      	b.n	80062de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006160:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	429a      	cmp	r2, r3
 8006170:	d1eb      	bne.n	800614a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d010      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	4b14      	ldr	r3, [pc, #80]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	429a      	cmp	r2, r3
 800618c:	d208      	bcs.n	80061a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f023 020f 	bic.w	r2, r3, #15
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	490e      	ldr	r1, [pc, #56]	; (80061d4 <HAL_RCC_ClockConfig+0x244>)
 800619c:	4313      	orrs	r3, r2
 800619e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <HAL_RCC_ClockConfig+0x240>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d214      	bcs.n	80061d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ae:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <HAL_RCC_ClockConfig+0x240>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f023 020f 	bic.w	r2, r3, #15
 80061b6:	4906      	ldr	r1, [pc, #24]	; (80061d0 <HAL_RCC_ClockConfig+0x240>)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061be:	4b04      	ldr	r3, [pc, #16]	; (80061d0 <HAL_RCC_ClockConfig+0x240>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d005      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e086      	b.n	80062de <HAL_RCC_ClockConfig+0x34e>
 80061d0:	52002000 	.word	0x52002000
 80061d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d010      	beq.n	8006206 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	4b3f      	ldr	r3, [pc, #252]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d208      	bcs.n	8006206 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061f4:	4b3c      	ldr	r3, [pc, #240]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	4939      	ldr	r1, [pc, #228]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 8006202:	4313      	orrs	r3, r2
 8006204:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d010      	beq.n	8006234 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695a      	ldr	r2, [r3, #20]
 8006216:	4b34      	ldr	r3, [pc, #208]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800621e:	429a      	cmp	r2, r3
 8006220:	d208      	bcs.n	8006234 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006222:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	492e      	ldr	r1, [pc, #184]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 8006230:	4313      	orrs	r3, r2
 8006232:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	d010      	beq.n	8006262 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	4b28      	ldr	r3, [pc, #160]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800624c:	429a      	cmp	r2, r3
 800624e:	d208      	bcs.n	8006262 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006250:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	4922      	ldr	r1, [pc, #136]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 800625e:	4313      	orrs	r3, r2
 8006260:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d010      	beq.n	8006290 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69da      	ldr	r2, [r3, #28]
 8006272:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800627a:	429a      	cmp	r2, r3
 800627c:	d208      	bcs.n	8006290 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800627e:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	4917      	ldr	r1, [pc, #92]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 800628c:	4313      	orrs	r3, r2
 800628e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006290:	f000 f834 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 8006294:	4602      	mov	r2, r0
 8006296:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	0a1b      	lsrs	r3, r3, #8
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	4912      	ldr	r1, [pc, #72]	; (80062ec <HAL_RCC_ClockConfig+0x35c>)
 80062a2:	5ccb      	ldrb	r3, [r1, r3]
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	fa22 f303 	lsr.w	r3, r2, r3
 80062ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062ae:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <HAL_RCC_ClockConfig+0x358>)
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	4a0d      	ldr	r2, [pc, #52]	; (80062ec <HAL_RCC_ClockConfig+0x35c>)
 80062b8:	5cd3      	ldrb	r3, [r2, r3]
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
 80062c4:	4a0a      	ldr	r2, [pc, #40]	; (80062f0 <HAL_RCC_ClockConfig+0x360>)
 80062c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062c8:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <HAL_RCC_ClockConfig+0x364>)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80062ce:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <HAL_RCC_ClockConfig+0x368>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fb ff0e 	bl	80020f4 <HAL_InitTick>
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	58024400 	.word	0x58024400
 80062ec:	0800bd48 	.word	0x0800bd48
 80062f0:	2400040c 	.word	0x2400040c
 80062f4:	24000408 	.word	0x24000408
 80062f8:	24000400 	.word	0x24000400

080062fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b089      	sub	sp, #36	; 0x24
 8006300:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006302:	4bb3      	ldr	r3, [pc, #716]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800630a:	2b18      	cmp	r3, #24
 800630c:	f200 8155 	bhi.w	80065ba <HAL_RCC_GetSysClockFreq+0x2be>
 8006310:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	0800637d 	.word	0x0800637d
 800631c:	080065bb 	.word	0x080065bb
 8006320:	080065bb 	.word	0x080065bb
 8006324:	080065bb 	.word	0x080065bb
 8006328:	080065bb 	.word	0x080065bb
 800632c:	080065bb 	.word	0x080065bb
 8006330:	080065bb 	.word	0x080065bb
 8006334:	080065bb 	.word	0x080065bb
 8006338:	080063a3 	.word	0x080063a3
 800633c:	080065bb 	.word	0x080065bb
 8006340:	080065bb 	.word	0x080065bb
 8006344:	080065bb 	.word	0x080065bb
 8006348:	080065bb 	.word	0x080065bb
 800634c:	080065bb 	.word	0x080065bb
 8006350:	080065bb 	.word	0x080065bb
 8006354:	080065bb 	.word	0x080065bb
 8006358:	080063a9 	.word	0x080063a9
 800635c:	080065bb 	.word	0x080065bb
 8006360:	080065bb 	.word	0x080065bb
 8006364:	080065bb 	.word	0x080065bb
 8006368:	080065bb 	.word	0x080065bb
 800636c:	080065bb 	.word	0x080065bb
 8006370:	080065bb 	.word	0x080065bb
 8006374:	080065bb 	.word	0x080065bb
 8006378:	080063af 	.word	0x080063af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800637c:	4b94      	ldr	r3, [pc, #592]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b00      	cmp	r3, #0
 8006386:	d009      	beq.n	800639c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006388:	4b91      	ldr	r3, [pc, #580]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	08db      	lsrs	r3, r3, #3
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	4a90      	ldr	r2, [pc, #576]	; (80065d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
 8006398:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800639a:	e111      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800639c:	4b8d      	ldr	r3, [pc, #564]	; (80065d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800639e:	61bb      	str	r3, [r7, #24]
    break;
 80063a0:	e10e      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80063a2:	4b8d      	ldr	r3, [pc, #564]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063a4:	61bb      	str	r3, [r7, #24]
    break;
 80063a6:	e10b      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80063a8:	4b8c      	ldr	r3, [pc, #560]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063aa:	61bb      	str	r3, [r7, #24]
    break;
 80063ac:	e108      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063ae:	4b88      	ldr	r3, [pc, #544]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80063b8:	4b85      	ldr	r3, [pc, #532]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063c4:	4b82      	ldr	r3, [pc, #520]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063ce:	4b80      	ldr	r3, [pc, #512]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d2:	08db      	lsrs	r3, r3, #3
 80063d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	fb02 f303 	mul.w	r3, r2, r3
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80e1 	beq.w	80065b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	f000 8083 	beq.w	8006500 <HAL_RCC_GetSysClockFreq+0x204>
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	f200 80a1 	bhi.w	8006544 <HAL_RCC_GetSysClockFreq+0x248>
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_RCC_GetSysClockFreq+0x114>
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d056      	beq.n	80064bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800640e:	e099      	b.n	8006544 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006410:	4b6f      	ldr	r3, [pc, #444]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d02d      	beq.n	8006478 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800641c:	4b6c      	ldr	r3, [pc, #432]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	4a6b      	ldr	r2, [pc, #428]	; (80065d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
 800642c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006446:	4b62      	ldr	r3, [pc, #392]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006456:	ed97 6a02 	vldr	s12, [r7, #8]
 800645a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80065e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800645e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800646a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006472:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006476:	e087      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006482:	eddf 6a58 	vldr	s13, [pc, #352]	; 80065e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800648a:	4b51      	ldr	r3, [pc, #324]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649a:	ed97 6a02 	vldr	s12, [r7, #8]
 800649e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80065e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ba:	e065      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80065e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80064ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ce:	4b40      	ldr	r3, [pc, #256]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064de:	ed97 6a02 	vldr	s12, [r7, #8]
 80064e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80065e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064fe:	e043      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80065ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800650e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006512:	4b2f      	ldr	r3, [pc, #188]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006522:	ed97 6a02 	vldr	s12, [r7, #8]
 8006526:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80065e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800652a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006542:	e021      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80065e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006556:	4b1e      	ldr	r3, [pc, #120]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006566:	ed97 6a02 	vldr	s12, [r7, #8]
 800656a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80065e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800656e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800657a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006586:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006588:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	0a5b      	lsrs	r3, r3, #9
 800658e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006592:	3301      	adds	r3, #1
 8006594:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	ee07 3a90 	vmov	s15, r3
 800659c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80065a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ac:	ee17 3a90 	vmov	r3, s15
 80065b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80065b2:	e005      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61bb      	str	r3, [r7, #24]
    break;
 80065b8:	e002      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80065ba:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065bc:	61bb      	str	r3, [r7, #24]
    break;
 80065be:	bf00      	nop
  }

  return sysclockfreq;
 80065c0:	69bb      	ldr	r3, [r7, #24]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3724      	adds	r7, #36	; 0x24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	58024400 	.word	0x58024400
 80065d4:	03d09000 	.word	0x03d09000
 80065d8:	003d0900 	.word	0x003d0900
 80065dc:	017d7840 	.word	0x017d7840
 80065e0:	46000000 	.word	0x46000000
 80065e4:	4c742400 	.word	0x4c742400
 80065e8:	4a742400 	.word	0x4a742400
 80065ec:	4bbebc20 	.word	0x4bbebc20

080065f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80065f6:	f7ff fe81 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 80065fa:	4602      	mov	r2, r0
 80065fc:	4b10      	ldr	r3, [pc, #64]	; (8006640 <HAL_RCC_GetHCLKFreq+0x50>)
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	0a1b      	lsrs	r3, r3, #8
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	490f      	ldr	r1, [pc, #60]	; (8006644 <HAL_RCC_GetHCLKFreq+0x54>)
 8006608:	5ccb      	ldrb	r3, [r1, r3]
 800660a:	f003 031f 	and.w	r3, r3, #31
 800660e:	fa22 f303 	lsr.w	r3, r2, r3
 8006612:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <HAL_RCC_GetHCLKFreq+0x50>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	4a09      	ldr	r2, [pc, #36]	; (8006644 <HAL_RCC_GetHCLKFreq+0x54>)
 800661e:	5cd3      	ldrb	r3, [r2, r3]
 8006620:	f003 031f 	and.w	r3, r3, #31
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	fa22 f303 	lsr.w	r3, r2, r3
 800662a:	4a07      	ldr	r2, [pc, #28]	; (8006648 <HAL_RCC_GetHCLKFreq+0x58>)
 800662c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800662e:	4a07      	ldr	r2, [pc, #28]	; (800664c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006634:	4b04      	ldr	r3, [pc, #16]	; (8006648 <HAL_RCC_GetHCLKFreq+0x58>)
 8006636:	681b      	ldr	r3, [r3, #0]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	58024400 	.word	0x58024400
 8006644:	0800bd48 	.word	0x0800bd48
 8006648:	2400040c 	.word	0x2400040c
 800664c:	24000408 	.word	0x24000408

08006650 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006658:	2300      	movs	r3, #0
 800665a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800665c:	2300      	movs	r3, #0
 800665e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d03f      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006674:	d02a      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006676:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800667a:	d824      	bhi.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800667c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006680:	d018      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006686:	d81e      	bhi.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800668c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006690:	d007      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006692:	e018      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006694:	4bab      	ldr	r3, [pc, #684]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	4aaa      	ldr	r2, [pc, #680]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800669a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066a0:	e015      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3304      	adds	r3, #4
 80066a6:	2102      	movs	r1, #2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f002 f84d 	bl	8008748 <RCCEx_PLL2_Config>
 80066ae:	4603      	mov	r3, r0
 80066b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066b2:	e00c      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3324      	adds	r3, #36	; 0x24
 80066b8:	2102      	movs	r1, #2
 80066ba:	4618      	mov	r0, r3
 80066bc:	f002 f8f6 	bl	80088ac <RCCEx_PLL3_Config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066c4:	e003      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	75fb      	strb	r3, [r7, #23]
      break;
 80066ca:	e000      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80066cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d109      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80066d4:	4b9b      	ldr	r3, [pc, #620]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e0:	4998      	ldr	r1, [pc, #608]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	650b      	str	r3, [r1, #80]	; 0x50
 80066e6:	e001      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d03d      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d826      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006700:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	0800671d 	.word	0x0800671d
 800670c:	0800672b 	.word	0x0800672b
 8006710:	0800673d 	.word	0x0800673d
 8006714:	08006755 	.word	0x08006755
 8006718:	08006755 	.word	0x08006755
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800671c:	4b89      	ldr	r3, [pc, #548]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	4a88      	ldr	r2, [pc, #544]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006728:	e015      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3304      	adds	r3, #4
 800672e:	2100      	movs	r1, #0
 8006730:	4618      	mov	r0, r3
 8006732:	f002 f809 	bl	8008748 <RCCEx_PLL2_Config>
 8006736:	4603      	mov	r3, r0
 8006738:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800673a:	e00c      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3324      	adds	r3, #36	; 0x24
 8006740:	2100      	movs	r1, #0
 8006742:	4618      	mov	r0, r3
 8006744:	f002 f8b2 	bl	80088ac <RCCEx_PLL3_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800674c:	e003      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	75fb      	strb	r3, [r7, #23]
      break;
 8006752:	e000      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006756:	7dfb      	ldrb	r3, [r7, #23]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d109      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800675c:	4b79      	ldr	r3, [pc, #484]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800675e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006760:	f023 0207 	bic.w	r2, r3, #7
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	4976      	ldr	r1, [pc, #472]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800676a:	4313      	orrs	r3, r2
 800676c:	650b      	str	r3, [r1, #80]	; 0x50
 800676e:	e001      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677c:	2b00      	cmp	r3, #0
 800677e:	d051      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006786:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800678a:	d036      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800678c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006790:	d830      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006796:	d032      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006798:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800679c:	d82a      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800679e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067a2:	d02e      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80067a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067a8:	d824      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80067aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ae:	d018      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80067b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067b4:	d81e      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80067ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067be:	d007      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80067c0:	e018      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c2:	4b60      	ldr	r3, [pc, #384]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c6:	4a5f      	ldr	r2, [pc, #380]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067ce:	e019      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3304      	adds	r3, #4
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 ffb6 	bl	8008748 <RCCEx_PLL2_Config>
 80067dc:	4603      	mov	r3, r0
 80067de:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80067e0:	e010      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3324      	adds	r3, #36	; 0x24
 80067e6:	2100      	movs	r1, #0
 80067e8:	4618      	mov	r0, r3
 80067ea:	f002 f85f 	bl	80088ac <RCCEx_PLL3_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067f2:	e007      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	75fb      	strb	r3, [r7, #23]
      break;
 80067f8:	e004      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80067fa:	bf00      	nop
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800680a:	4b4e      	ldr	r3, [pc, #312]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800680c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006818:	494a      	ldr	r1, [pc, #296]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800681a:	4313      	orrs	r3, r2
 800681c:	658b      	str	r3, [r1, #88]	; 0x58
 800681e:	e001      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800682c:	2b00      	cmp	r3, #0
 800682e:	d051      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006836:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800683a:	d036      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800683c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006840:	d830      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006846:	d032      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800684c:	d82a      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800684e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006852:	d02e      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006854:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006858:	d824      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800685a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800685e:	d018      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006864:	d81e      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800686a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800686e:	d007      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006870:	e018      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006872:	4b34      	ldr	r3, [pc, #208]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	4a33      	ldr	r2, [pc, #204]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800687c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800687e:	e019      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f001 ff5e 	bl	8008748 <RCCEx_PLL2_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006890:	e010      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3324      	adds	r3, #36	; 0x24
 8006896:	2100      	movs	r1, #0
 8006898:	4618      	mov	r0, r3
 800689a:	f002 f807 	bl	80088ac <RCCEx_PLL3_Config>
 800689e:	4603      	mov	r3, r0
 80068a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068a2:	e007      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
      break;
 80068a8:	e004      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80068aa:	bf00      	nop
 80068ac:	e002      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80068b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80068ba:	4b22      	ldr	r3, [pc, #136]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068be:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068c8:	491e      	ldr	r1, [pc, #120]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	658b      	str	r3, [r1, #88]	; 0x58
 80068ce:	e001      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d035      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e4:	2b30      	cmp	r3, #48	; 0x30
 80068e6:	d01c      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80068e8:	2b30      	cmp	r3, #48	; 0x30
 80068ea:	d817      	bhi.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d00c      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d813      	bhi.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d016      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d10f      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068fc:	4b11      	ldr	r3, [pc, #68]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	4a10      	ldr	r2, [pc, #64]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006908:	e00e      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3304      	adds	r3, #4
 800690e:	2102      	movs	r1, #2
 8006910:	4618      	mov	r0, r3
 8006912:	f001 ff19 	bl	8008748 <RCCEx_PLL2_Config>
 8006916:	4603      	mov	r3, r0
 8006918:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800691a:	e005      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	75fb      	strb	r3, [r7, #23]
      break;
 8006920:	e002      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10c      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006932:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693a:	4902      	ldr	r1, [pc, #8]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800693c:	4313      	orrs	r3, r2
 800693e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006940:	e004      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006942:	bf00      	nop
 8006944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d047      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006960:	d030      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006966:	d82a      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006968:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800696c:	d02c      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800696e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006972:	d824      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006978:	d018      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800697a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697e:	d81e      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006988:	d007      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800698a:	e018      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800698c:	4bac      	ldr	r3, [pc, #688]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	4aab      	ldr	r2, [pc, #684]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006998:	e017      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	2100      	movs	r1, #0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 fed1 	bl	8008748 <RCCEx_PLL2_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80069aa:	e00e      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3324      	adds	r3, #36	; 0x24
 80069b0:	2100      	movs	r1, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f001 ff7a 	bl	80088ac <RCCEx_PLL3_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80069bc:	e005      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
      break;
 80069c2:	e002      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80069c4:	bf00      	nop
 80069c6:	e000      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80069c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d109      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80069d0:	4b9b      	ldr	r3, [pc, #620]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069dc:	4998      	ldr	r1, [pc, #608]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	650b      	str	r3, [r1, #80]	; 0x50
 80069e2:	e001      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d049      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069fc:	d02e      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80069fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a02:	d828      	bhi.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006a04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a08:	d02a      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006a0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a0e:	d822      	bhi.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006a10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a14:	d026      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006a16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a1a:	d81c      	bhi.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a20:	d010      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a26:	d816      	bhi.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01d      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a30:	d111      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3304      	adds	r3, #4
 8006a36:	2101      	movs	r1, #1
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 fe85 	bl	8008748 <RCCEx_PLL2_Config>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a42:	e012      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3324      	adds	r3, #36	; 0x24
 8006a48:	2101      	movs	r1, #1
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f001 ff2e 	bl	80088ac <RCCEx_PLL3_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a54:	e009      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	75fb      	strb	r3, [r7, #23]
      break;
 8006a5a:	e006      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006a5c:	bf00      	nop
 8006a5e:	e004      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006a60:	bf00      	nop
 8006a62:	e002      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006a64:	bf00      	nop
 8006a66:	e000      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d109      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a70:	4b73      	ldr	r3, [pc, #460]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a74:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7c:	4970      	ldr	r1, [pc, #448]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	650b      	str	r3, [r1, #80]	; 0x50
 8006a82:	e001      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d04b      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a9e:	d02e      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aa4:	d828      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aaa:	d02a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab0:	d822      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006ab2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ab6:	d026      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006ab8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006abc:	d81c      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac2:	d010      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac8:	d816      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01d      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad2:	d111      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 fe34 	bl	8008748 <RCCEx_PLL2_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ae4:	e012      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3324      	adds	r3, #36	; 0x24
 8006aea:	2101      	movs	r1, #1
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 fedd 	bl	80088ac <RCCEx_PLL3_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006af6:	e009      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	75fb      	strb	r3, [r7, #23]
      break;
 8006afc:	e006      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006afe:	bf00      	nop
 8006b00:	e004      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006b02:	bf00      	nop
 8006b04:	e002      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006b06:	bf00      	nop
 8006b08:	e000      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b12:	4b4b      	ldr	r3, [pc, #300]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b20:	4947      	ldr	r1, [pc, #284]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	658b      	str	r3, [r1, #88]	; 0x58
 8006b26:	e001      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d02f      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b40:	d00e      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b46:	d814      	bhi.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d015      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b50:	d10f      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b52:	4b3b      	ldr	r3, [pc, #236]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	4a3a      	ldr	r2, [pc, #232]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b5e:	e00c      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	2101      	movs	r1, #1
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 fdee 	bl	8008748 <RCCEx_PLL2_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b70:	e003      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]
      break;
 8006b76:	e000      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d109      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b80:	4b2f      	ldr	r3, [pc, #188]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b8c:	492c      	ldr	r1, [pc, #176]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	650b      	str	r3, [r1, #80]	; 0x50
 8006b92:	e001      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
 8006b96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d032      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d81b      	bhi.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006bac:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006beb 	.word	0x08006beb
 8006bb8:	08006bc5 	.word	0x08006bc5
 8006bbc:	08006bd3 	.word	0x08006bd3
 8006bc0:	08006beb 	.word	0x08006beb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc4:	4b1e      	ldr	r3, [pc, #120]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006bd0:	e00c      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f001 fdb5 	bl	8008748 <RCCEx_PLL2_Config>
 8006bde:	4603      	mov	r3, r0
 8006be0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006be2:	e003      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	75fb      	strb	r3, [r7, #23]
      break;
 8006be8:	e000      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006bf2:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf6:	f023 0203 	bic.w	r2, r3, #3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfe:	4910      	ldr	r1, [pc, #64]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c04:	e001      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 808a 	beq.w	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c18:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a09      	ldr	r2, [pc, #36]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c24:	f7fb fab0 	bl	8002188 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c2a:	e00d      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c2c:	f7fb faac 	bl	8002188 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b64      	cmp	r3, #100	; 0x64
 8006c38:	d906      	bls.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	75fb      	strb	r3, [r7, #23]
        break;
 8006c3e:	e009      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006c40:	58024400 	.word	0x58024400
 8006c44:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c48:	4bb9      	ldr	r3, [pc, #740]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0eb      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d166      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c5a:	4bb6      	ldr	r3, [pc, #728]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c64:	4053      	eors	r3, r2
 8006c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d013      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c6e:	4bb1      	ldr	r3, [pc, #708]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c76:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c78:	4bae      	ldr	r3, [pc, #696]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7c:	4aad      	ldr	r2, [pc, #692]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c82:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c84:	4bab      	ldr	r3, [pc, #684]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	4aaa      	ldr	r2, [pc, #680]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c8e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c90:	4aa8      	ldr	r2, [pc, #672]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca0:	d115      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca2:	f7fb fa71 	bl	8002188 <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ca8:	e00b      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006caa:	f7fb fa6d 	bl	8002188 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d902      	bls.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	75fb      	strb	r3, [r7, #23]
            break;
 8006cc0:	e005      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cc2:	4b9c      	ldr	r3, [pc, #624]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0ed      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d126      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce2:	d10d      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006ce4:	4b93      	ldr	r3, [pc, #588]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cf2:	0919      	lsrs	r1, r3, #4
 8006cf4:	4b90      	ldr	r3, [pc, #576]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cf6:	400b      	ands	r3, r1
 8006cf8:	498e      	ldr	r1, [pc, #568]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	610b      	str	r3, [r1, #16]
 8006cfe:	e005      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006d00:	4b8c      	ldr	r3, [pc, #560]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	4a8b      	ldr	r2, [pc, #556]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006d0a:	6113      	str	r3, [r2, #16]
 8006d0c:	4b89      	ldr	r3, [pc, #548]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d1a:	4986      	ldr	r1, [pc, #536]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	670b      	str	r3, [r1, #112]	; 0x70
 8006d20:	e004      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	75bb      	strb	r3, [r7, #22]
 8006d26:	e001      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d07e      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3c:	2b28      	cmp	r3, #40	; 0x28
 8006d3e:	d867      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006e17 	.word	0x08006e17
 8006d4c:	08006e11 	.word	0x08006e11
 8006d50:	08006e11 	.word	0x08006e11
 8006d54:	08006e11 	.word	0x08006e11
 8006d58:	08006e11 	.word	0x08006e11
 8006d5c:	08006e11 	.word	0x08006e11
 8006d60:	08006e11 	.word	0x08006e11
 8006d64:	08006e11 	.word	0x08006e11
 8006d68:	08006ded 	.word	0x08006ded
 8006d6c:	08006e11 	.word	0x08006e11
 8006d70:	08006e11 	.word	0x08006e11
 8006d74:	08006e11 	.word	0x08006e11
 8006d78:	08006e11 	.word	0x08006e11
 8006d7c:	08006e11 	.word	0x08006e11
 8006d80:	08006e11 	.word	0x08006e11
 8006d84:	08006e11 	.word	0x08006e11
 8006d88:	08006dff 	.word	0x08006dff
 8006d8c:	08006e11 	.word	0x08006e11
 8006d90:	08006e11 	.word	0x08006e11
 8006d94:	08006e11 	.word	0x08006e11
 8006d98:	08006e11 	.word	0x08006e11
 8006d9c:	08006e11 	.word	0x08006e11
 8006da0:	08006e11 	.word	0x08006e11
 8006da4:	08006e11 	.word	0x08006e11
 8006da8:	08006e17 	.word	0x08006e17
 8006dac:	08006e11 	.word	0x08006e11
 8006db0:	08006e11 	.word	0x08006e11
 8006db4:	08006e11 	.word	0x08006e11
 8006db8:	08006e11 	.word	0x08006e11
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006e11 	.word	0x08006e11
 8006dc4:	08006e11 	.word	0x08006e11
 8006dc8:	08006e17 	.word	0x08006e17
 8006dcc:	08006e11 	.word	0x08006e11
 8006dd0:	08006e11 	.word	0x08006e11
 8006dd4:	08006e11 	.word	0x08006e11
 8006dd8:	08006e11 	.word	0x08006e11
 8006ddc:	08006e11 	.word	0x08006e11
 8006de0:	08006e11 	.word	0x08006e11
 8006de4:	08006e11 	.word	0x08006e11
 8006de8:	08006e17 	.word	0x08006e17
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	2101      	movs	r1, #1
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fca8 	bl	8008748 <RCCEx_PLL2_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006dfc:	e00c      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3324      	adds	r3, #36	; 0x24
 8006e02:	2101      	movs	r1, #1
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 fd51 	bl	80088ac <RCCEx_PLL3_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006e0e:	e003      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
      break;
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8006e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e1e:	4b45      	ldr	r3, [pc, #276]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e22:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2a:	4942      	ldr	r1, [pc, #264]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	654b      	str	r3, [r1, #84]	; 0x54
 8006e30:	e001      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d037      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	d820      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e93 	.word	0x08006e93
 8006e54:	08006e69 	.word	0x08006e69
 8006e58:	08006e7b 	.word	0x08006e7b
 8006e5c:	08006e93 	.word	0x08006e93
 8006e60:	08006e93 	.word	0x08006e93
 8006e64:	08006e93 	.word	0x08006e93
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 fc6a 	bl	8008748 <RCCEx_PLL2_Config>
 8006e74:	4603      	mov	r3, r0
 8006e76:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e78:	e00c      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3324      	adds	r3, #36	; 0x24
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 fd13 	bl	80088ac <RCCEx_PLL3_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e8a:	e003      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e90:	e000      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e9a:	4b26      	ldr	r3, [pc, #152]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	f023 0207 	bic.w	r2, r3, #7
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	4923      	ldr	r1, [pc, #140]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	654b      	str	r3, [r1, #84]	; 0x54
 8006eac:	e001      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d040      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec4:	2b05      	cmp	r3, #5
 8006ec6:	d821      	bhi.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006f13 	.word	0x08006f13
 8006ed4:	08006ee9 	.word	0x08006ee9
 8006ed8:	08006efb 	.word	0x08006efb
 8006edc:	08006f13 	.word	0x08006f13
 8006ee0:	08006f13 	.word	0x08006f13
 8006ee4:	08006f13 	.word	0x08006f13
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3304      	adds	r3, #4
 8006eec:	2101      	movs	r1, #1
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f001 fc2a 	bl	8008748 <RCCEx_PLL2_Config>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ef8:	e00c      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3324      	adds	r3, #36	; 0x24
 8006efe:	2101      	movs	r1, #1
 8006f00:	4618      	mov	r0, r3
 8006f02:	f001 fcd3 	bl	80088ac <RCCEx_PLL3_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006f0a:	e003      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f10:	e000      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d110      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f1a:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1e:	f023 0207 	bic.w	r2, r3, #7
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f28:	4902      	ldr	r1, [pc, #8]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	658b      	str	r3, [r1, #88]	; 0x58
 8006f2e:	e007      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006f30:	58024800 	.word	0x58024800
 8006f34:	58024400 	.word	0x58024400
 8006f38:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d04b      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f56:	d02e      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f5c:	d828      	bhi.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f62:	d02a      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f68:	d822      	bhi.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006f6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f6e:	d026      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006f70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f74:	d81c      	bhi.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f7a:	d010      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f80:	d816      	bhi.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01d      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f8a:	d111      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 fbd8 	bl	8008748 <RCCEx_PLL2_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f9c:	e012      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3324      	adds	r3, #36	; 0x24
 8006fa2:	2102      	movs	r1, #2
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 fc81 	bl	80088ac <RCCEx_PLL3_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006fae:	e009      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb4:	e006      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e004      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e002      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006fbe:	bf00      	nop
 8006fc0:	e000      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fca:	4bb2      	ldr	r3, [pc, #712]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd8:	49ae      	ldr	r1, [pc, #696]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	654b      	str	r3, [r1, #84]	; 0x54
 8006fde:	e001      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d04b      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ffa:	d02e      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006ffc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007000:	d828      	bhi.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007006:	d02a      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800700c:	d822      	bhi.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800700e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007012:	d026      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007018:	d81c      	bhi.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800701a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800701e:	d010      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007024:	d816      	bhi.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01d      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800702a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702e:	d111      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3304      	adds	r3, #4
 8007034:	2100      	movs	r1, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f001 fb86 	bl	8008748 <RCCEx_PLL2_Config>
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007040:	e012      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3324      	adds	r3, #36	; 0x24
 8007046:	2102      	movs	r1, #2
 8007048:	4618      	mov	r0, r3
 800704a:	f001 fc2f 	bl	80088ac <RCCEx_PLL3_Config>
 800704e:	4603      	mov	r3, r0
 8007050:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007052:	e009      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
      break;
 8007058:	e006      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800705a:	bf00      	nop
 800705c:	e004      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800705e:	bf00      	nop
 8007060:	e002      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007062:	bf00      	nop
 8007064:	e000      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800706e:	4b89      	ldr	r3, [pc, #548]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007072:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800707c:	4985      	ldr	r1, [pc, #532]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800707e:	4313      	orrs	r3, r2
 8007080:	658b      	str	r3, [r1, #88]	; 0x58
 8007082:	e001      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007090:	2b00      	cmp	r3, #0
 8007092:	d04b      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800709a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800709e:	d02e      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80070a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80070a4:	d828      	bhi.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80070a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070aa:	d02a      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80070ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b0:	d822      	bhi.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80070b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070b6:	d026      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80070b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070bc:	d81c      	bhi.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80070be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c2:	d010      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80070c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c8:	d816      	bhi.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01d      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80070ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d2:	d111      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3304      	adds	r3, #4
 80070d8:	2100      	movs	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 fb34 	bl	8008748 <RCCEx_PLL2_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80070e4:	e012      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3324      	adds	r3, #36	; 0x24
 80070ea:	2102      	movs	r1, #2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f001 fbdd 	bl	80088ac <RCCEx_PLL3_Config>
 80070f2:	4603      	mov	r3, r0
 80070f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80070f6:	e009      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	75fb      	strb	r3, [r7, #23]
      break;
 80070fc:	e006      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80070fe:	bf00      	nop
 8007100:	e004      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007102:	bf00      	nop
 8007104:	e002      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007106:	bf00      	nop
 8007108:	e000      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800710a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007112:	4b60      	ldr	r3, [pc, #384]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007120:	495c      	ldr	r1, [pc, #368]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007122:	4313      	orrs	r3, r2
 8007124:	658b      	str	r3, [r1, #88]	; 0x58
 8007126:	e001      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d018      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800713c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007140:	d10a      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3324      	adds	r3, #36	; 0x24
 8007146:	2102      	movs	r1, #2
 8007148:	4618      	mov	r0, r3
 800714a:	f001 fbaf 	bl	80088ac <RCCEx_PLL3_Config>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007158:	4b4e      	ldr	r3, [pc, #312]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800715a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007164:	494b      	ldr	r1, [pc, #300]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007166:	4313      	orrs	r3, r2
 8007168:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0310 	and.w	r3, r3, #16
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01a      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007180:	d10a      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3324      	adds	r3, #36	; 0x24
 8007186:	2102      	movs	r1, #2
 8007188:	4618      	mov	r0, r3
 800718a:	f001 fb8f 	bl	80088ac <RCCEx_PLL3_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007198:	4b3e      	ldr	r3, [pc, #248]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800719a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a6:	493b      	ldr	r1, [pc, #236]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d034      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071c2:	d01d      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80071c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071c8:	d817      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80071ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d2:	d009      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80071d4:	e011      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3304      	adds	r3, #4
 80071da:	2100      	movs	r1, #0
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 fab3 	bl	8008748 <RCCEx_PLL2_Config>
 80071e2:	4603      	mov	r3, r0
 80071e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80071e6:	e00c      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3324      	adds	r3, #36	; 0x24
 80071ec:	2102      	movs	r1, #2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f001 fb5c 	bl	80088ac <RCCEx_PLL3_Config>
 80071f4:	4603      	mov	r3, r0
 80071f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80071f8:	e003      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	75fb      	strb	r3, [r7, #23]
      break;
 80071fe:	e000      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8007200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007208:	4b22      	ldr	r3, [pc, #136]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800720a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007216:	491f      	ldr	r1, [pc, #124]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007218:	4313      	orrs	r3, r2
 800721a:	658b      	str	r3, [r1, #88]	; 0x58
 800721c:	e001      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d036      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007234:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007238:	d01c      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800723a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800723e:	d816      	bhi.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007244:	d003      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800724a:	d007      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800724c:	e00f      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007258:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800725a:	e00c      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3324      	adds	r3, #36	; 0x24
 8007260:	2101      	movs	r1, #1
 8007262:	4618      	mov	r0, r3
 8007264:	f001 fb22 	bl	80088ac <RCCEx_PLL3_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800726c:	e003      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]
      break;
 8007272:	e000      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10d      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800727e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800728a:	4902      	ldr	r1, [pc, #8]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800728c:	4313      	orrs	r3, r2
 800728e:	654b      	str	r3, [r1, #84]	; 0x54
 8007290:	e004      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8007292:	bf00      	nop
 8007294:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d029      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80072b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b4:	d007      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80072b6:	e00f      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b8:	4b61      	ldr	r3, [pc, #388]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	4a60      	ldr	r2, [pc, #384]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80072be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80072c4:	e00b      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3304      	adds	r3, #4
 80072ca:	2102      	movs	r1, #2
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 fa3b 	bl	8008748 <RCCEx_PLL2_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80072d6:	e002      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
      break;
 80072dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d109      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80072e4:	4b56      	ldr	r3, [pc, #344]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80072e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f0:	4953      	ldr	r1, [pc, #332]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072f6:	e001      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00a      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	2102      	movs	r1, #2
 800730e:	4618      	mov	r0, r3
 8007310:	f001 facc 	bl	80088ac <RCCEx_PLL3_Config>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d030      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800732e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007332:	d017      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007338:	d811      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800733a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800733e:	d013      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007344:	d80b      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d010      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800734a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800734e:	d106      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007350:	4b3b      	ldr	r3, [pc, #236]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	4a3a      	ldr	r2, [pc, #232]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800735a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800735c:	e007      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	75fb      	strb	r3, [r7, #23]
      break;
 8007362:	e004      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007364:	bf00      	nop
 8007366:	e002      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007368:	bf00      	nop
 800736a:	e000      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800736c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d109      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007374:	4b32      	ldr	r3, [pc, #200]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007380:	492f      	ldr	r1, [pc, #188]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007382:	4313      	orrs	r3, r2
 8007384:	654b      	str	r3, [r1, #84]	; 0x54
 8007386:	e001      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d008      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007398:	4b29      	ldr	r3, [pc, #164]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800739a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a4:	4926      	ldr	r1, [pc, #152]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d008      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073b6:	4b22      	ldr	r3, [pc, #136]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073c2:	491f      	ldr	r1, [pc, #124]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00d      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073d4:	4b1a      	ldr	r3, [pc, #104]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	4a19      	ldr	r2, [pc, #100]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073de:	6113      	str	r3, [r2, #16]
 80073e0:	4b17      	ldr	r3, [pc, #92]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073ea:	4915      	ldr	r1, [pc, #84]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da08      	bge.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073f8:	4b11      	ldr	r3, [pc, #68]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007404:	490e      	ldr	r1, [pc, #56]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007406:	4313      	orrs	r3, r2
 8007408:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d009      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007416:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007424:	4906      	ldr	r1, [pc, #24]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007426:	4313      	orrs	r3, r2
 8007428:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800742a:	7dbb      	ldrb	r3, [r7, #22]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	e000      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	58024400 	.word	0x58024400

08007444 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4aa2      	ldr	r2, [pc, #648]	; (80076d8 <HAL_RCCEx_GetPeriphCLKConfig+0x294>)
 8007450:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_SWPMI1      | RCC_PERIPHCLK_DFSDM1  | RCC_PERIPHCLK_RTC      |
	         RCC_PERIPHCLK_CEC     | RCC_PERIPHCLK_FMC         | RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_TIM      |
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f043 0208 	orr.w	r2, r3, #8
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 800748e:	4b93      	ldr	r3, [pc, #588]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	0d1b      	lsrs	r3, r3, #20
 8007494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 800749c:	4b8f      	ldr	r3, [pc, #572]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800749e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 80074aa:	4b8c      	ldr	r3, [pc, #560]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	0e1b      	lsrs	r3, r3, #24
 80074b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 80074ba:	4b88      	ldr	r3, [pc, #544]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	0a5b      	lsrs	r3, r3, #9
 80074c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 80074ca:	4b84      	ldr	r3, [pc, #528]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	0c1b      	lsrs	r3, r3, #16
 80074d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 80074da:	4b80      	ldr	r3, [pc, #512]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	0a9b      	lsrs	r3, r3, #10
 80074e0:	f003 0203 	and.w	r2, r3, #3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 80074e8:	4b7c      	ldr	r3, [pc, #496]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	0a5b      	lsrs	r3, r3, #9
 80074ee:	f003 0201 	and.w	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 80074f6:	4b79      	ldr	r3, [pc, #484]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	0b1b      	lsrs	r3, r3, #12
 80074fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 8007504:	4b75      	ldr	r3, [pc, #468]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 8007512:	4b72      	ldr	r3, [pc, #456]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	0e1b      	lsrs	r3, r3, #24
 8007518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 8007522:	4b6e      	ldr	r3, [pc, #440]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	0a5b      	lsrs	r3, r3, #9
 8007528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 8007532:	4b6a      	ldr	r3, [pc, #424]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	0c1b      	lsrs	r3, r3, #16
 8007538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 8007542:	4b66      	ldr	r3, [pc, #408]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	099b      	lsrs	r3, r3, #6
 8007548:	f003 0203 	and.w	r2, r3, #3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 8007550:	4b62      	ldr	r3, [pc, #392]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	f003 0201 	and.w	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 800755e:	4b5f      	ldr	r3, [pc, #380]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 800756a:	4b5c      	ldr	r3, [pc, #368]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800756c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756e:	f003 0207 	and.w	r2, r3, #7
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 8007576:	4b59      	ldr	r3, [pc, #356]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757a:	f003 0207 	and.w	r2, r3, #7
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 8007584:	4b55      	ldr	r3, [pc, #340]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007588:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	67da      	str	r2, [r3, #124]	; 0x7c
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007590:	4b52      	ldr	r3, [pc, #328]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007594:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 800759e:	4b4f      	ldr	r3, [pc, #316]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 80075ac:	4b4b      	ldr	r3, [pc, #300]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b0:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 80075ba:	4b48      	ldr	r3, [pc, #288]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075be:	f003 0207 	and.w	r2, r3, #7
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	655a      	str	r2, [r3, #84]	; 0x54
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 80075c6:	4b45      	ldr	r3, [pc, #276]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ca:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 80075d4:	4b41      	ldr	r3, [pc, #260]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 80075e2:	4b3e      	ldr	r3, [pc, #248]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 80075f0:	4b3a      	ldr	r3, [pc, #232]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 80075fe:	4b37      	ldr	r3, [pc, #220]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007602:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 800760a:	4b34      	ldr	r3, [pc, #208]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800760c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	679a      	str	r2, [r3, #120]	; 0x78
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 8007616:	4b31      	ldr	r3, [pc, #196]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800761a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 8007624:	4b2d      	ldr	r3, [pc, #180]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007628:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007630:	4b2a      	ldr	r3, [pc, #168]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007634:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	665a      	str	r2, [r3, #100]	; 0x64
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 800763c:	4b27      	ldr	r3, [pc, #156]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800763e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007640:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 8007648:	4b24      	ldr	r3, [pc, #144]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800764a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764c:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 8007654:	4b21      	ldr	r3, [pc, #132]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007658:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 8007660:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007664:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 800766e:	4b1b      	ldr	r3, [pc, #108]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007672:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	669a      	str	r2, [r3, #104]	; 0x68
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 800767a:	4b18      	ldr	r3, [pc, #96]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800767c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767e:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 8007688:	4b14      	ldr	r3, [pc, #80]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800768a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768c:	f003 0203 	and.w	r2, r3, #3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	645a      	str	r2, [r3, #68]	; 0x44
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OSPI clock source -----------------------------------------------*/
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
 8007694:	4b11      	ldr	r3, [pc, #68]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007698:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 80076a0:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a4:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 80076ac:	4b0b      	ldr	r3, [pc, #44]	; (80076dc <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKConfig+0x27e>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80076c0:	e004      	b.n	80076cc <HAL_RCCEx_GetPeriphCLKConfig+0x288>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80076c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	c9fff1f7 	.word	0xc9fff1f7
 80076dc:	58024400 	.word	0x58024400

080076e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b090      	sub	sp, #64	; 0x40
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ee:	f040 8089 	bne.w	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80076f2:	4b95      	ldr	r3, [pc, #596]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80076f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	633b      	str	r3, [r7, #48]	; 0x30
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d87d      	bhi.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	0800771d 	.word	0x0800771d
 800770c:	08007741 	.word	0x08007741
 8007710:	08007765 	.word	0x08007765
 8007714:	080077f9 	.word	0x080077f9
 8007718:	08007789 	.word	0x08007789

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800771c:	4b8a      	ldr	r3, [pc, #552]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007728:	d107      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800772a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800772e:	4618      	mov	r0, r3
 8007730:	f000 feb8 	bl	80084a4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007738:	e3ed      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800773e:	e3ea      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007740:	4b81      	ldr	r3, [pc, #516]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800774c:	d107      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800774e:	f107 0318 	add.w	r3, r7, #24
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fbfe 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800775c:	e3db      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007762:	e3d8      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007764:	4b78      	ldr	r3, [pc, #480]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800776c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007770:	d107      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007772:	f107 030c 	add.w	r3, r7, #12
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fd40 	bl	80081fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007780:	e3c9      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007786:	e3c6      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007788:	4b6f      	ldr	r3, [pc, #444]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800778a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007790:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007792:	4b6d      	ldr	r3, [pc, #436]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	2b04      	cmp	r3, #4
 800779c:	d10c      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800779e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d109      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077a4:	4b68      	ldr	r3, [pc, #416]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	08db      	lsrs	r3, r3, #3
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	4a67      	ldr	r2, [pc, #412]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80077b0:	fa22 f303 	lsr.w	r3, r2, r3
 80077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077b6:	e01e      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077b8:	4b63      	ldr	r3, [pc, #396]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c4:	d106      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80077c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077cc:	d102      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80077ce:	4b60      	ldr	r3, [pc, #384]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d2:	e010      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077d4:	4b5c      	ldr	r3, [pc, #368]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077e0:	d106      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80077e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077e8:	d102      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80077ea:	4b5a      	ldr	r3, [pc, #360]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ee:	e002      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80077f4:	e38f      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80077f6:	e38e      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80077f8:	4b57      	ldr	r3, [pc, #348]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80077fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077fc:	e38b      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007802:	e388      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780a:	f040 80a7 	bne.w	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800780e:	4b4e      	ldr	r3, [pc, #312]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007812:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007816:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800781e:	d054      	beq.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007826:	f200 808b 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007830:	f000 8083 	beq.w	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800783a:	f200 8081 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007844:	d02f      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800784c:	d878      	bhi.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800785a:	d012      	beq.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800785c:	e070      	b.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800785e:	4b3a      	ldr	r3, [pc, #232]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800786a:	d107      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800786c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fe17 	bl	80084a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800787a:	e34c      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007880:	e349      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007882:	4b31      	ldr	r3, [pc, #196]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800788a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800788e:	d107      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007890:	f107 0318 	add.w	r3, r7, #24
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fb5d 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800789e:	e33a      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a4:	e337      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078a6:	4b28      	ldr	r3, [pc, #160]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078b2:	d107      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b4:	f107 030c 	add.w	r3, r7, #12
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 fc9f 	bl	80081fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078c2:	e328      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078c8:	e325      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078ca:	4b1f      	ldr	r3, [pc, #124]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80078cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078d4:	4b1c      	ldr	r3, [pc, #112]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d10c      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078e6:	4b18      	ldr	r3, [pc, #96]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	08db      	lsrs	r3, r3, #3
 80078ec:	f003 0303 	and.w	r3, r3, #3
 80078f0:	4a16      	ldr	r2, [pc, #88]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80078f2:	fa22 f303 	lsr.w	r3, r2, r3
 80078f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f8:	e01e      	b.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078fa:	4b13      	ldr	r3, [pc, #76]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007906:	d106      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800790e:	d102      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007914:	e010      	b.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007916:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007922:	d106      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800792a:	d102      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800792c:	4b09      	ldr	r3, [pc, #36]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800792e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007930:	e002      	b.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007936:	e2ee      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007938:	e2ed      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800793a:	4b07      	ldr	r3, [pc, #28]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800793e:	e2ea      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007944:	e2e7      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007946:	bf00      	nop
 8007948:	58024400 	.word	0x58024400
 800794c:	03d09000 	.word	0x03d09000
 8007950:	003d0900 	.word	0x003d0900
 8007954:	017d7840 	.word	0x017d7840
 8007958:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007962:	f040 809c 	bne.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007966:	4b9e      	ldr	r3, [pc, #632]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800796e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007976:	d054      	beq.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800797e:	f200 808b 	bhi.w	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007988:	f000 8083 	beq.w	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007992:	f200 8081 	bhi.w	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800799c:	d02f      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079a4:	d878      	bhi.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079b2:	d012      	beq.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80079b4:	e070      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079b6:	4b8a      	ldr	r3, [pc, #552]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079c2:	d107      	bne.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 fd6b 	bl	80084a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079d2:	e2a0      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079d8:	e29d      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079da:	4b81      	ldr	r3, [pc, #516]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079e6:	d107      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e8:	f107 0318 	add.w	r3, r7, #24
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fab1 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80079f6:	e28e      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079fc:	e28b      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079fe:	4b78      	ldr	r3, [pc, #480]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a0a:	d107      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fbf3 	bl	80081fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a1a:	e27c      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a20:	e279      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a22:	4b6f      	ldr	r3, [pc, #444]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a2a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a2c:	4b6c      	ldr	r3, [pc, #432]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d10c      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d109      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a3e:	4b68      	ldr	r3, [pc, #416]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	08db      	lsrs	r3, r3, #3
 8007a44:	f003 0303 	and.w	r3, r3, #3
 8007a48:	4a66      	ldr	r2, [pc, #408]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a50:	e01e      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a52:	4b63      	ldr	r3, [pc, #396]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a5e:	d106      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a66:	d102      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007a68:	4b5f      	ldr	r3, [pc, #380]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a6c:	e010      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a6e:	4b5c      	ldr	r3, [pc, #368]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a7a:	d106      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a82:	d102      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a84:	4b59      	ldr	r3, [pc, #356]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a88:	e002      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a8e:	e242      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007a90:	e241      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a92:	4b57      	ldr	r3, [pc, #348]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a96:	e23e      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a9c:	e23b      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa4:	f040 80a6 	bne.w	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007aa8:	4b4d      	ldr	r3, [pc, #308]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007ab0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab8:	d054      	beq.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ac0:	f200 808b 	bhi.w	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007aca:	f000 8083 	beq.w	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ad4:	f200 8081 	bhi.w	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ade:	d02f      	beq.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae6:	d878      	bhi.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af4:	d012      	beq.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007af6:	e070      	b.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007af8:	4b39      	ldr	r3, [pc, #228]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b04:	d107      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fcca 	bl	80084a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b14:	e1ff      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b1a:	e1fc      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b1c:	4b30      	ldr	r3, [pc, #192]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b28:	d107      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b2a:	f107 0318 	add.w	r3, r7, #24
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fa10 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b38:	e1ed      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b3e:	e1ea      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b40:	4b27      	ldr	r3, [pc, #156]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b4c:	d107      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b4e:	f107 030c 	add.w	r3, r7, #12
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fb52 	bl	80081fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b5c:	e1db      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b62:	e1d8      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b64:	4b1e      	ldr	r3, [pc, #120]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b6c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b6e:	4b1c      	ldr	r3, [pc, #112]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d10c      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d109      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	08db      	lsrs	r3, r3, #3
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	4a16      	ldr	r2, [pc, #88]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b92:	e01e      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b94:	4b12      	ldr	r3, [pc, #72]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba0:	d106      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ba8:	d102      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007baa:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bae:	e010      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bbc:	d106      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bc4:	d102      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007bc6:	4b09      	ldr	r3, [pc, #36]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bca:	e002      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007bd0:	e1a1      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007bd2:	e1a0      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bd4:	4b06      	ldr	r3, [pc, #24]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bd8:	e19d      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bde:	e19a      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007be0:	58024400 	.word	0x58024400
 8007be4:	03d09000 	.word	0x03d09000
 8007be8:	003d0900 	.word	0x003d0900
 8007bec:	017d7840 	.word	0x017d7840
 8007bf0:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007bfa:	d173      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007bfc:	4b9a      	ldr	r3, [pc, #616]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c0c:	d02f      	beq.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c14:	d863      	bhi.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c22:	d012      	beq.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007c24:	e05b      	b.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c26:	4b90      	ldr	r3, [pc, #576]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c32:	d107      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c34:	f107 0318 	add.w	r3, r7, #24
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f98b 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c42:	e168      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c48:	e165      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c4a:	4b87      	ldr	r3, [pc, #540]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c56:	d107      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c58:	f107 030c 	add.w	r3, r7, #12
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 facd 	bl	80081fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c66:	e156      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c6c:	e153      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c6e:	4b7e      	ldr	r3, [pc, #504]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c78:	4b7b      	ldr	r3, [pc, #492]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d10c      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c8a:	4b77      	ldr	r3, [pc, #476]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	08db      	lsrs	r3, r3, #3
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	4a75      	ldr	r2, [pc, #468]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007c96:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c9c:	e01e      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c9e:	4b72      	ldr	r3, [pc, #456]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007caa:	d106      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cb2:	d102      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007cb4:	4b6e      	ldr	r3, [pc, #440]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cb8:	e010      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cba:	4b6b      	ldr	r3, [pc, #428]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cc6:	d106      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cce:	d102      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007cd0:	4b68      	ldr	r3, [pc, #416]	; (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cd4:	e002      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007cda:	e11c      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007cdc:	e11b      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ce2:	e118      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cea:	d133      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007cec:	4b5e      	ldr	r3, [pc, #376]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cf4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d004      	beq.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d02:	d012      	beq.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007d04:	e023      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d06:	4b58      	ldr	r3, [pc, #352]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d12:	d107      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fbc3 	bl	80084a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d22:	e0f8      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d28:	e0f5      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d2a:	4b4f      	ldr	r3, [pc, #316]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d36:	d107      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d38:	f107 0318 	add.w	r3, r7, #24
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 f909 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d46:	e0e6      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d4c:	e0e3      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d52:	e0e0      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d5a:	f040 808d 	bne.w	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007d5e:	4b42      	ldr	r3, [pc, #264]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d62:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007d66:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d6e:	d06b      	beq.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d76:	d874      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7e:	d056      	beq.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d86:	d86c      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d8e:	d03b      	beq.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d96:	d864      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d9e:	d021      	beq.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da6:	d85c      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d004      	beq.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007db4:	d004      	beq.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007db6:	e054      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007db8:	f000 f8b6 	bl	8007f28 <HAL_RCCEx_GetD3PCLK1Freq>
 8007dbc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007dbe:	e0aa      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dc0:	4b29      	ldr	r3, [pc, #164]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dcc:	d107      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dce:	f107 0318 	add.w	r3, r7, #24
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 f8be 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ddc:	e09b      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de2:	e098      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007de4:	4b20      	ldr	r3, [pc, #128]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df0:	d107      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007df2:	f107 030c 	add.w	r3, r7, #12
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fa00 	bl	80081fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e00:	e089      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e06:	e086      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e08:	4b17      	ldr	r3, [pc, #92]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d109      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e14:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	08db      	lsrs	r3, r3, #3
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	4a13      	ldr	r2, [pc, #76]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e26:	e076      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e2c:	e073      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e2e:	4b0e      	ldr	r3, [pc, #56]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e3a:	d102      	bne.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8007e3c:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e40:	e069      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e46:	e066      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e48:	4b07      	ldr	r3, [pc, #28]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e54:	d102      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8007e56:	4b07      	ldr	r3, [pc, #28]	; (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007e58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e5a:	e05c      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e60:	e059      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e66:	e056      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007e68:	58024400 	.word	0x58024400
 8007e6c:	03d09000 	.word	0x03d09000
 8007e70:	003d0900 	.word	0x003d0900
 8007e74:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7e:	d148      	bne.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007e80:	4b27      	ldr	r3, [pc, #156]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e88:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e90:	d02a      	beq.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e98:	d838      	bhi.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d004      	beq.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ea6:	d00d      	beq.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8007ea8:	e030      	b.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007eaa:	4b1d      	ldr	r3, [pc, #116]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eb6:	d102      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8007eb8:	4b1a      	ldr	r3, [pc, #104]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007eba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ebc:	e02b      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec2:	e028      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ec4:	4b16      	ldr	r3, [pc, #88]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ed0:	d107      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fae4 	bl	80084a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ee0:	e019      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ee6:	e016      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ee8:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ef4:	d107      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ef6:	f107 0318 	add.w	r3, r7, #24
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 f82a 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f04:	e007      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f0a:	e004      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f10:	e001      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3740      	adds	r7, #64	; 0x40
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	58024400 	.word	0x58024400
 8007f24:	017d7840 	.word	0x017d7840

08007f28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f2c:	f7fe fb60 	bl	80065f0 <HAL_RCC_GetHCLKFreq>
 8007f30:	4602      	mov	r2, r0
 8007f32:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	091b      	lsrs	r3, r3, #4
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	4904      	ldr	r1, [pc, #16]	; (8007f50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f3e:	5ccb      	ldrb	r3, [r1, r3]
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	58024400 	.word	0x58024400
 8007f50:	0800bd48 	.word	0x0800bd48

08007f54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b089      	sub	sp, #36	; 0x24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f5c:	4ba1      	ldr	r3, [pc, #644]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007f66:	4b9f      	ldr	r3, [pc, #636]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	0b1b      	lsrs	r3, r3, #12
 8007f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f72:	4b9c      	ldr	r3, [pc, #624]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	091b      	lsrs	r3, r3, #4
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007f7e:	4b99      	ldr	r3, [pc, #612]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f82:	08db      	lsrs	r3, r3, #3
 8007f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	fb02 f303 	mul.w	r3, r2, r3
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 8111 	beq.w	80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	f000 8083 	beq.w	80080b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	f200 80a1 	bhi.w	80080f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d056      	beq.n	800806c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007fbe:	e099      	b.n	80080f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fc0:	4b88      	ldr	r3, [pc, #544]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d02d      	beq.n	8008028 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fcc:	4b85      	ldr	r3, [pc, #532]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	08db      	lsrs	r3, r3, #3
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	4a84      	ldr	r2, [pc, #528]	; (80081e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fdc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	ee07 3a90 	vmov	s15, r3
 8007fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff6:	4b7b      	ldr	r3, [pc, #492]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008006:	ed97 6a03 	vldr	s12, [r7, #12]
 800800a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800800e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800801a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800801e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008022:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008026:	e087      	b.n	8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008032:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800803a:	4b6a      	ldr	r3, [pc, #424]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008042:	ee07 3a90 	vmov	s15, r3
 8008046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800804a:	ed97 6a03 	vldr	s12, [r7, #12]
 800804e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800805a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800805e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800806a:	e065      	b.n	8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008076:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800807a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800807e:	4b59      	ldr	r3, [pc, #356]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800808e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008092:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800809a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800809e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ae:	e043      	b.n	8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80080be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c2:	4b48      	ldr	r3, [pc, #288]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080f2:	e021      	b.n	8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008106:	4b37      	ldr	r3, [pc, #220]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810e:	ee07 3a90 	vmov	s15, r3
 8008112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008116:	ed97 6a03 	vldr	s12, [r7, #12]
 800811a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800811e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800812a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008136:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008138:	4b2a      	ldr	r3, [pc, #168]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800813a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813c:	0a5b      	lsrs	r3, r3, #9
 800813e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800814e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008152:	edd7 6a07 	vldr	s13, [r7, #28]
 8008156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800815e:	ee17 2a90 	vmov	r2, s15
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008166:	4b1f      	ldr	r3, [pc, #124]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	0c1b      	lsrs	r3, r3, #16
 800816c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008170:	ee07 3a90 	vmov	s15, r3
 8008174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800817c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008180:	edd7 6a07 	vldr	s13, [r7, #28]
 8008184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818c:	ee17 2a90 	vmov	r2, s15
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008194:	4b13      	ldr	r3, [pc, #76]	; (80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	0e1b      	lsrs	r3, r3, #24
 800819a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ba:	ee17 2a90 	vmov	r2, s15
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80081c2:	e008      	b.n	80081d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	609a      	str	r2, [r3, #8]
}
 80081d6:	bf00      	nop
 80081d8:	3724      	adds	r7, #36	; 0x24
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	58024400 	.word	0x58024400
 80081e8:	03d09000 	.word	0x03d09000
 80081ec:	46000000 	.word	0x46000000
 80081f0:	4c742400 	.word	0x4c742400
 80081f4:	4a742400 	.word	0x4a742400
 80081f8:	4bbebc20 	.word	0x4bbebc20

080081fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b089      	sub	sp, #36	; 0x24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008204:	4ba1      	ldr	r3, [pc, #644]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800820e:	4b9f      	ldr	r3, [pc, #636]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008212:	0d1b      	lsrs	r3, r3, #20
 8008214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008218:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800821a:	4b9c      	ldr	r3, [pc, #624]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	0a1b      	lsrs	r3, r3, #8
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008226:	4b99      	ldr	r3, [pc, #612]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800822a:	08db      	lsrs	r3, r3, #3
 800822c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	fb02 f303 	mul.w	r3, r2, r3
 8008236:	ee07 3a90 	vmov	s15, r3
 800823a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 8111 	beq.w	800846c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	2b02      	cmp	r3, #2
 800824e:	f000 8083 	beq.w	8008358 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b02      	cmp	r3, #2
 8008256:	f200 80a1 	bhi.w	800839c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d056      	beq.n	8008314 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008266:	e099      	b.n	800839c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008268:	4b88      	ldr	r3, [pc, #544]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0320 	and.w	r3, r3, #32
 8008270:	2b00      	cmp	r3, #0
 8008272:	d02d      	beq.n	80082d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008274:	4b85      	ldr	r3, [pc, #532]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	08db      	lsrs	r3, r3, #3
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	4a84      	ldr	r2, [pc, #528]	; (8008490 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008280:	fa22 f303 	lsr.w	r3, r2, r3
 8008284:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	ee07 3a90 	vmov	s15, r3
 800828c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800829e:	4b7b      	ldr	r3, [pc, #492]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80082b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082ce:	e087      	b.n	80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008498 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80082de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e2:	4b6a      	ldr	r3, [pc, #424]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008312:	e065      	b.n	80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800849c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008326:	4b59      	ldr	r3, [pc, #356]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008336:	ed97 6a03 	vldr	s12, [r7, #12]
 800833a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800833e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800834a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008352:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008356:	e043      	b.n	80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008362:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800836a:	4b48      	ldr	r3, [pc, #288]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837a:	ed97 6a03 	vldr	s12, [r7, #12]
 800837e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800838a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800838e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800839a:	e021      	b.n	80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800849c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ae:	4b37      	ldr	r3, [pc, #220]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083be:	ed97 6a03 	vldr	s12, [r7, #12]
 80083c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80083e0:	4b2a      	ldr	r3, [pc, #168]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e4:	0a5b      	lsrs	r3, r3, #9
 80083e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80083fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008406:	ee17 2a90 	vmov	r2, s15
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800840e:	4b1f      	ldr	r3, [pc, #124]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	0c1b      	lsrs	r3, r3, #16
 8008414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008418:	ee07 3a90 	vmov	s15, r3
 800841c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008424:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008428:	edd7 6a07 	vldr	s13, [r7, #28]
 800842c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008434:	ee17 2a90 	vmov	r2, s15
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800843c:	4b13      	ldr	r3, [pc, #76]	; (800848c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	0e1b      	lsrs	r3, r3, #24
 8008442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008456:	edd7 6a07 	vldr	s13, [r7, #28]
 800845a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800845e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008462:	ee17 2a90 	vmov	r2, s15
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800846a:	e008      	b.n	800847e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	609a      	str	r2, [r3, #8]
}
 800847e:	bf00      	nop
 8008480:	3724      	adds	r7, #36	; 0x24
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	58024400 	.word	0x58024400
 8008490:	03d09000 	.word	0x03d09000
 8008494:	46000000 	.word	0x46000000
 8008498:	4c742400 	.word	0x4c742400
 800849c:	4a742400 	.word	0x4a742400
 80084a0:	4bbebc20 	.word	0x4bbebc20

080084a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b089      	sub	sp, #36	; 0x24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084ac:	4ba0      	ldr	r3, [pc, #640]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	f003 0303 	and.w	r3, r3, #3
 80084b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80084b6:	4b9e      	ldr	r3, [pc, #632]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	091b      	lsrs	r3, r3, #4
 80084bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80084c2:	4b9b      	ldr	r3, [pc, #620]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80084cc:	4b98      	ldr	r3, [pc, #608]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d0:	08db      	lsrs	r3, r3, #3
 80084d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	fb02 f303 	mul.w	r3, r2, r3
 80084dc:	ee07 3a90 	vmov	s15, r3
 80084e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 8111 	beq.w	8008712 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	f000 8083 	beq.w	80085fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	f200 80a1 	bhi.w	8008642 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d056      	beq.n	80085ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800850c:	e099      	b.n	8008642 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800850e:	4b88      	ldr	r3, [pc, #544]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	2b00      	cmp	r3, #0
 8008518:	d02d      	beq.n	8008576 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800851a:	4b85      	ldr	r3, [pc, #532]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	08db      	lsrs	r3, r3, #3
 8008520:	f003 0303 	and.w	r3, r3, #3
 8008524:	4a83      	ldr	r2, [pc, #524]	; (8008734 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008526:	fa22 f303 	lsr.w	r3, r2, r3
 800852a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008544:	4b7a      	ldr	r3, [pc, #488]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008554:	ed97 6a03 	vldr	s12, [r7, #12]
 8008558:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008738 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800855c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008570:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008574:	e087      	b.n	8008686 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	ee07 3a90 	vmov	s15, r3
 800857c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008580:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800873c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008588:	4b69      	ldr	r3, [pc, #420]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008590:	ee07 3a90 	vmov	s15, r3
 8008594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008598:	ed97 6a03 	vldr	s12, [r7, #12]
 800859c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008738 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085b8:	e065      	b.n	8008686 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	ee07 3a90 	vmov	s15, r3
 80085c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80085c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085cc:	4b58      	ldr	r3, [pc, #352]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d4:	ee07 3a90 	vmov	s15, r3
 80085d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80085e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008738 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085fc:	e043      	b.n	8008686 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	ee07 3a90 	vmov	s15, r3
 8008604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008608:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800860c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008610:	4b47      	ldr	r3, [pc, #284]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008620:	ed97 6a03 	vldr	s12, [r7, #12]
 8008624:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008738 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800862c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008640:	e021      	b.n	8008686 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	ee07 3a90 	vmov	s15, r3
 8008648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800873c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008654:	4b36      	ldr	r3, [pc, #216]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008664:	ed97 6a03 	vldr	s12, [r7, #12]
 8008668:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008738 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800866c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008680:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008684:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008686:	4b2a      	ldr	r3, [pc, #168]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	0a5b      	lsrs	r3, r3, #9
 800868c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008690:	ee07 3a90 	vmov	s15, r3
 8008694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800869c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ac:	ee17 2a90 	vmov	r2, s15
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80086b4:	4b1e      	ldr	r3, [pc, #120]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b8:	0c1b      	lsrs	r3, r3, #16
 80086ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086da:	ee17 2a90 	vmov	r2, s15
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80086e2:	4b13      	ldr	r3, [pc, #76]	; (8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e6:	0e1b      	lsrs	r3, r3, #24
 80086e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008708:	ee17 2a90 	vmov	r2, s15
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008710:	e008      	b.n	8008724 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	609a      	str	r2, [r3, #8]
}
 8008724:	bf00      	nop
 8008726:	3724      	adds	r7, #36	; 0x24
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	58024400 	.word	0x58024400
 8008734:	03d09000 	.word	0x03d09000
 8008738:	46000000 	.word	0x46000000
 800873c:	4c742400 	.word	0x4c742400
 8008740:	4a742400 	.word	0x4a742400
 8008744:	4bbebc20 	.word	0x4bbebc20

08008748 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008756:	4b53      	ldr	r3, [pc, #332]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 8008758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	2b03      	cmp	r3, #3
 8008760:	d101      	bne.n	8008766 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e099      	b.n	800889a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008766:	4b4f      	ldr	r3, [pc, #316]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a4e      	ldr	r2, [pc, #312]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800876c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008772:	f7f9 fd09 	bl	8002188 <HAL_GetTick>
 8008776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008778:	e008      	b.n	800878c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800877a:	f7f9 fd05 	bl	8002188 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d901      	bls.n	800878c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e086      	b.n	800889a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800878c:	4b45      	ldr	r3, [pc, #276]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1f0      	bne.n	800877a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008798:	4b42      	ldr	r3, [pc, #264]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	031b      	lsls	r3, r3, #12
 80087a6:	493f      	ldr	r1, [pc, #252]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	628b      	str	r3, [r1, #40]	; 0x28
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	025b      	lsls	r3, r3, #9
 80087be:	b29b      	uxth	r3, r3
 80087c0:	431a      	orrs	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	041b      	lsls	r3, r3, #16
 80087ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	061b      	lsls	r3, r3, #24
 80087d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087dc:	4931      	ldr	r1, [pc, #196]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087e2:	4b30      	ldr	r3, [pc, #192]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	492d      	ldr	r1, [pc, #180]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087f4:	4b2b      	ldr	r3, [pc, #172]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 80087f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f8:	f023 0220 	bic.w	r2, r3, #32
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	4928      	ldr	r1, [pc, #160]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 8008802:	4313      	orrs	r3, r2
 8008804:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008806:	4b27      	ldr	r3, [pc, #156]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	4a26      	ldr	r2, [pc, #152]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800880c:	f023 0310 	bic.w	r3, r3, #16
 8008810:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008812:	4b24      	ldr	r3, [pc, #144]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 8008814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008816:	4b24      	ldr	r3, [pc, #144]	; (80088a8 <RCCEx_PLL2_Config+0x160>)
 8008818:	4013      	ands	r3, r2
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	69d2      	ldr	r2, [r2, #28]
 800881e:	00d2      	lsls	r2, r2, #3
 8008820:	4920      	ldr	r1, [pc, #128]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 8008822:	4313      	orrs	r3, r2
 8008824:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008826:	4b1f      	ldr	r3, [pc, #124]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 8008828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882a:	4a1e      	ldr	r2, [pc, #120]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800882c:	f043 0310 	orr.w	r3, r3, #16
 8008830:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d106      	bne.n	8008846 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008838:	4b1a      	ldr	r3, [pc, #104]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883c:	4a19      	ldr	r2, [pc, #100]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800883e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008844:	e00f      	b.n	8008866 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d106      	bne.n	800885a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800884c:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	4a14      	ldr	r2, [pc, #80]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 8008852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008856:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008858:	e005      	b.n	8008866 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800885a:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800885c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885e:	4a11      	ldr	r2, [pc, #68]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 8008860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008864:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008866:	4b0f      	ldr	r3, [pc, #60]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a0e      	ldr	r2, [pc, #56]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800886c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008872:	f7f9 fc89 	bl	8002188 <HAL_GetTick>
 8008876:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008878:	e008      	b.n	800888c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800887a:	f7f9 fc85 	bl	8002188 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	d901      	bls.n	800888c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e006      	b.n	800889a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800888c:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <RCCEx_PLL2_Config+0x15c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0f0      	beq.n	800887a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008898:	7bfb      	ldrb	r3, [r7, #15]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	58024400 	.word	0x58024400
 80088a8:	ffff0007 	.word	0xffff0007

080088ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088ba:	4b53      	ldr	r3, [pc, #332]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d101      	bne.n	80088ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e099      	b.n	80089fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80088ca:	4b4f      	ldr	r3, [pc, #316]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a4e      	ldr	r2, [pc, #312]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80088d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088d6:	f7f9 fc57 	bl	8002188 <HAL_GetTick>
 80088da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088dc:	e008      	b.n	80088f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80088de:	f7f9 fc53 	bl	8002188 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d901      	bls.n	80088f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e086      	b.n	80089fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088f0:	4b45      	ldr	r3, [pc, #276]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1f0      	bne.n	80088de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088fc:	4b42      	ldr	r3, [pc, #264]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008900:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	051b      	lsls	r3, r3, #20
 800890a:	493f      	ldr	r1, [pc, #252]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 800890c:	4313      	orrs	r3, r2
 800890e:	628b      	str	r3, [r1, #40]	; 0x28
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	3b01      	subs	r3, #1
 8008916:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	3b01      	subs	r3, #1
 8008920:	025b      	lsls	r3, r3, #9
 8008922:	b29b      	uxth	r3, r3
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	3b01      	subs	r3, #1
 800892c:	041b      	lsls	r3, r3, #16
 800892e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	3b01      	subs	r3, #1
 800893a:	061b      	lsls	r3, r3, #24
 800893c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008940:	4931      	ldr	r1, [pc, #196]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 8008942:	4313      	orrs	r3, r2
 8008944:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008946:	4b30      	ldr	r3, [pc, #192]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	492d      	ldr	r1, [pc, #180]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 8008954:	4313      	orrs	r3, r2
 8008956:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008958:	4b2b      	ldr	r3, [pc, #172]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	4928      	ldr	r1, [pc, #160]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 8008966:	4313      	orrs	r3, r2
 8008968:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800896a:	4b27      	ldr	r3, [pc, #156]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	4a26      	ldr	r2, [pc, #152]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 8008970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008974:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008976:	4b24      	ldr	r3, [pc, #144]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 8008978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800897a:	4b24      	ldr	r3, [pc, #144]	; (8008a0c <RCCEx_PLL3_Config+0x160>)
 800897c:	4013      	ands	r3, r2
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	69d2      	ldr	r2, [r2, #28]
 8008982:	00d2      	lsls	r2, r2, #3
 8008984:	4920      	ldr	r1, [pc, #128]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 8008986:	4313      	orrs	r3, r2
 8008988:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800898a:	4b1f      	ldr	r3, [pc, #124]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 8008990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008994:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d106      	bne.n	80089aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800899c:	4b1a      	ldr	r3, [pc, #104]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	4a19      	ldr	r2, [pc, #100]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80089a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089a8:	e00f      	b.n	80089ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d106      	bne.n	80089be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089b0:	4b15      	ldr	r3, [pc, #84]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	4a14      	ldr	r2, [pc, #80]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80089b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089bc:	e005      	b.n	80089ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80089be:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	4a11      	ldr	r2, [pc, #68]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80089c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80089ca:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a0e      	ldr	r2, [pc, #56]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80089d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d6:	f7f9 fbd7 	bl	8002188 <HAL_GetTick>
 80089da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089dc:	e008      	b.n	80089f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80089de:	f7f9 fbd3 	bl	8002188 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d901      	bls.n	80089f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e006      	b.n	80089fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089f0:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <RCCEx_PLL3_Config+0x15c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0f0      	beq.n	80089de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	ffff0007 	.word	0xffff0007

08008a10 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08a      	sub	sp, #40	; 0x28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e224      	b.n	8008e6c <HAL_SAI_Init+0x45c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d113      	bne.n	8008a54 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4aa1      	ldr	r2, [pc, #644]	; (8008cb8 <HAL_SAI_Init+0x2a8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d004      	beq.n	8008a40 <HAL_SAI_Init+0x30>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4aa0      	ldr	r2, [pc, #640]	; (8008cbc <HAL_SAI_Init+0x2ac>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d107      	bne.n	8008a50 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d103      	bne.n	8008a50 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e20b      	b.n	8008e6c <HAL_SAI_Init+0x45c>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a97      	ldr	r2, [pc, #604]	; (8008cb8 <HAL_SAI_Init+0x2a8>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d004      	beq.n	8008a68 <HAL_SAI_Init+0x58>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a97      	ldr	r2, [pc, #604]	; (8008cc0 <HAL_SAI_Init+0x2b0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d102      	bne.n	8008a6e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8008a68:	4b96      	ldr	r3, [pc, #600]	; (8008cc4 <HAL_SAI_Init+0x2b4>)
 8008a6a:	61bb      	str	r3, [r7, #24]
 8008a6c:	e00e      	b.n	8008a8c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a92      	ldr	r2, [pc, #584]	; (8008cbc <HAL_SAI_Init+0x2ac>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d004      	beq.n	8008a82 <HAL_SAI_Init+0x72>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a92      	ldr	r2, [pc, #584]	; (8008cc8 <HAL_SAI_Init+0x2b8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d102      	bne.n	8008a88 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8008a82:	4b92      	ldr	r3, [pc, #584]	; (8008ccc <HAL_SAI_Init+0x2bc>)
 8008a84:	61bb      	str	r3, [r7, #24]
 8008a86:	e001      	b.n	8008a8c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e1ef      	b.n	8008e6c <HAL_SAI_Init+0x45c>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d125      	bne.n	8008ae4 <HAL_SAI_Init+0xd4>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    /* Reset callback pointers to the weak predefined callbacks */
    hsai->RxCpltCallback     = HAL_SAI_RxCpltCallback;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a8b      	ldr	r2, [pc, #556]	; (8008cd0 <HAL_SAI_Init+0x2c0>)
 8008aa4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    hsai->RxHalfCpltCallback = HAL_SAI_RxHalfCpltCallback;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a8a      	ldr	r2, [pc, #552]	; (8008cd4 <HAL_SAI_Init+0x2c4>)
 8008aac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    hsai->TxCpltCallback     = HAL_SAI_TxCpltCallback;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a89      	ldr	r2, [pc, #548]	; (8008cd8 <HAL_SAI_Init+0x2c8>)
 8008ab4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hsai->TxHalfCpltCallback = HAL_SAI_TxHalfCpltCallback;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a88      	ldr	r2, [pc, #544]	; (8008cdc <HAL_SAI_Init+0x2cc>)
 8008abc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hsai->ErrorCallback      = HAL_SAI_ErrorCallback;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a87      	ldr	r2, [pc, #540]	; (8008ce0 <HAL_SAI_Init+0x2d0>)
 8008ac4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    if (hsai->MspInitCallback == NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d103      	bne.n	8008ada <HAL_SAI_Init+0xca>
    {
      hsai->MspInitCallback = HAL_SAI_MspInit;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a83      	ldr	r2, [pc, #524]	; (8008ce4 <HAL_SAI_Init+0x2d4>)
 8008ad6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }
    hsai->MspInitCallback(hsai);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	4798      	blx	r3
    HAL_SAI_MspInit(hsai);
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fb5d 	bl	80091a4 <SAI_Disable>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <HAL_SAI_Init+0xe4>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e1bb      	b.n	8008e6c <HAL_SAI_Init+0x45c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d00c      	beq.n	8008b1e <HAL_SAI_Init+0x10e>
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d80d      	bhi.n	8008b24 <HAL_SAI_Init+0x114>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <HAL_SAI_Init+0x102>
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d003      	beq.n	8008b18 <HAL_SAI_Init+0x108>
 8008b10:	e008      	b.n	8008b24 <HAL_SAI_Init+0x114>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008b16:	e008      	b.n	8008b2a <HAL_SAI_Init+0x11a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008b18:	2310      	movs	r3, #16
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008b1c:	e005      	b.n	8008b2a <HAL_SAI_Init+0x11a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008b1e:	2320      	movs	r3, #32
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008b22:	e002      	b.n	8008b2a <HAL_SAI_Init+0x11a>
    default:
      tmpregisterGCR = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008b28:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	d821      	bhi.n	8008b76 <HAL_SAI_Init+0x166>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <HAL_SAI_Init+0x128>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b51 	.word	0x08008b51
 8008b3c:	08008b57 	.word	0x08008b57
 8008b40:	08008b5f 	.word	0x08008b5f
 8008b44:	08008b77 	.word	0x08008b77
 8008b48:	08008b77 	.word	0x08008b77
 8008b4c:	08008b67 	.word	0x08008b67
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	61fb      	str	r3, [r7, #28]
      break;
 8008b54:	e012      	b.n	8008b7c <HAL_SAI_Init+0x16c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b5a:	61fb      	str	r3, [r7, #28]
      break;
 8008b5c:	e00e      	b.n	8008b7c <HAL_SAI_Init+0x16c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b62:	61fb      	str	r3, [r7, #28]
      break;
 8008b64:	e00a      	b.n	8008b7c <HAL_SAI_Init+0x16c>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b6a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	f043 0303 	orr.w	r3, r3, #3
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008b74:	e002      	b.n	8008b7c <HAL_SAI_Init+0x16c>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
      break;
 8008b7a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b80:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8084 	beq.w	8008c94 <HAL_SAI_Init+0x284>
  {
    uint32_t freq = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a48      	ldr	r2, [pc, #288]	; (8008cb8 <HAL_SAI_Init+0x2a8>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d004      	beq.n	8008ba4 <HAL_SAI_Init+0x194>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a48      	ldr	r2, [pc, #288]	; (8008cc0 <HAL_SAI_Init+0x2b0>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d104      	bne.n	8008bae <HAL_SAI_Init+0x19e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008ba4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008ba8:	f7fe fd9a 	bl	80076e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bac:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a42      	ldr	r2, [pc, #264]	; (8008cbc <HAL_SAI_Init+0x2ac>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d104      	bne.n	8008bc2 <HAL_SAI_Init+0x1b2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008bb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008bbc:	f7fe fd90 	bl	80076e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bc0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a40      	ldr	r2, [pc, #256]	; (8008cc8 <HAL_SAI_Init+0x2b8>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d104      	bne.n	8008bd6 <HAL_SAI_Init+0x1c6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008bcc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008bd0:	f7fe fd86 	bl	80076e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bd4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008bde:	d120      	bne.n	8008c22 <HAL_SAI_Init+0x212>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d102      	bne.n	8008bee <HAL_SAI_Init+0x1de>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008be8:	2340      	movs	r3, #64	; 0x40
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e00a      	b.n	8008c04 <HAL_SAI_Init+0x1f4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d103      	bne.n	8008bfe <HAL_SAI_Init+0x1ee>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	e002      	b.n	8008c04 <HAL_SAI_Init+0x1f4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c02:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	4619      	mov	r1, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c1e:	613b      	str	r3, [r7, #16]
 8008c20:	e017      	b.n	8008c52 <HAL_SAI_Init+0x242>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c2a:	d101      	bne.n	8008c30 <HAL_SAI_Init+0x220>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e000      	b.n	8008c32 <HAL_SAI_Init+0x222>
 8008c30:	2301      	movs	r3, #1
 8008c32:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	4619      	mov	r1, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	fb02 f303 	mul.w	r3, r2, r3
 8008c4a:	021b      	lsls	r3, r3, #8
 8008c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c50:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	4a24      	ldr	r2, [pc, #144]	; (8008ce8 <HAL_SAI_Init+0x2d8>)
 8008c56:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5a:	08da      	lsrs	r2, r3, #3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008c60:	6939      	ldr	r1, [r7, #16]
 8008c62:	4b21      	ldr	r3, [pc, #132]	; (8008ce8 <HAL_SAI_Init+0x2d8>)
 8008c64:	fba3 2301 	umull	r2, r3, r3, r1
 8008c68:	08da      	lsrs	r2, r3, #3
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	1aca      	subs	r2, r1, r3
 8008c74:	2a08      	cmp	r2, #8
 8008c76:	d904      	bls.n	8008c82 <HAL_SAI_Init+0x272>
    {
      hsai->Init.Mckdiv += 1U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d104      	bne.n	8008c94 <HAL_SAI_Init+0x284>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	085a      	lsrs	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <HAL_SAI_Init+0x294>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d123      	bne.n	8008cec <HAL_SAI_Init+0x2dc>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_SAI_Init+0x2a0>
 8008cac:	2300      	movs	r3, #0
 8008cae:	e001      	b.n	8008cb4 <HAL_SAI_Init+0x2a4>
 8008cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cb4:	623b      	str	r3, [r7, #32]
 8008cb6:	e022      	b.n	8008cfe <HAL_SAI_Init+0x2ee>
 8008cb8:	40015804 	.word	0x40015804
 8008cbc:	58005404 	.word	0x58005404
 8008cc0:	40015824 	.word	0x40015824
 8008cc4:	40015800 	.word	0x40015800
 8008cc8:	58005424 	.word	0x58005424
 8008ccc:	58005400 	.word	0x58005400
 8008cd0:	080090f9 	.word	0x080090f9
 8008cd4:	0800910d 	.word	0x0800910d
 8008cd8:	080090d1 	.word	0x080090d1
 8008cdc:	080090e5 	.word	0x080090e5
 8008ce0:	08009121 	.word	0x08009121
 8008ce4:	08009659 	.word	0x08009659
 8008ce8:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d102      	bne.n	8008cfa <HAL_SAI_Init+0x2ea>
 8008cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cf8:	e000      	b.n	8008cfc <HAL_SAI_Init+0x2ec>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6819      	ldr	r1, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	4b5a      	ldr	r3, [pc, #360]	; (8008e74 <HAL_SAI_Init+0x464>)
 8008d0a:	400b      	ands	r3, r1
 8008d0c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685a      	ldr	r2, [r3, #4]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d1c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d22:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8008d36:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008d42:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	051b      	lsls	r3, r3, #20
 8008d4a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008d50:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6859      	ldr	r1, [r3, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	4b43      	ldr	r3, [pc, #268]	; (8008e78 <HAL_SAI_Init+0x468>)
 8008d6c:	400b      	ands	r3, r1
 8008d6e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6859      	ldr	r1, [r3, #4]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	69da      	ldr	r2, [r3, #28]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d84:	431a      	orrs	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6899      	ldr	r1, [r3, #8]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	4b38      	ldr	r3, [pc, #224]	; (8008e7c <HAL_SAI_Init+0x46c>)
 8008d9a:	400b      	ands	r3, r1
 8008d9c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6899      	ldr	r1, [r3, #8]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008dae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008db4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008dba:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008dc4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68d9      	ldr	r1, [r3, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008ddc:	400b      	ands	r3, r1
 8008dde:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68d9      	ldr	r1, [r3, #12]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dee:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008df4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008df6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a1c      	ldr	r2, [pc, #112]	; (8008e80 <HAL_SAI_Init+0x470>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d004      	beq.n	8008e1e <HAL_SAI_Init+0x40e>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a1a      	ldr	r2, [pc, #104]	; (8008e84 <HAL_SAI_Init+0x474>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d119      	bne.n	8008e52 <HAL_SAI_Init+0x442>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e22:	f023 0201 	bic.w	r2, r3, #1
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d10e      	bne.n	8008e52 <HAL_SAI_Init+0x442>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008e40:	431a      	orrs	r2, r3
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4a:	f043 0201 	orr.w	r2, r3, #1
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3728      	adds	r7, #40	; 0x28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	f005c010 	.word	0xf005c010
 8008e78:	ffff1ff0 	.word	0xffff1ff0
 8008e7c:	fff88000 	.word	0xfff88000
 8008e80:	40015804 	.word	0x40015804
 8008e84:	58005404 	.word	0x58005404

08008e88 <HAL_SAI_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SAI_RegisterCallback(SAI_HandleTypeDef        *hsai,
                                           HAL_SAI_CallbackIDTypeDef CallbackID,
                                           pSAI_CallbackTypeDef      pCallback)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	460b      	mov	r3, r1
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10a      	bne.n	8008eb6 <HAL_SAI_RegisterCallback+0x2e>
  {
    /* update the error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    /* update return status */
    status = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	75fb      	strb	r3, [r7, #23]
 8008eb4:	e073      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
  }
  else
  {
    if (HAL_SAI_STATE_READY == hsai->State)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d142      	bne.n	8008f48 <HAL_SAI_RegisterCallback+0xc0>
    {
      switch (CallbackID)
 8008ec2:	7afb      	ldrb	r3, [r7, #11]
 8008ec4:	2b06      	cmp	r3, #6
 8008ec6:	d834      	bhi.n	8008f32 <HAL_SAI_RegisterCallback+0xaa>
 8008ec8:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <HAL_SAI_RegisterCallback+0x48>)
 8008eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ece:	bf00      	nop
 8008ed0:	08008eed 	.word	0x08008eed
 8008ed4:	08008ef7 	.word	0x08008ef7
 8008ed8:	08008f01 	.word	0x08008f01
 8008edc:	08008f0b 	.word	0x08008f0b
 8008ee0:	08008f15 	.word	0x08008f15
 8008ee4:	08008f1f 	.word	0x08008f1f
 8008ee8:	08008f29 	.word	0x08008f29
      {
        case HAL_SAI_RX_COMPLETE_CB_ID :
          hsai->RxCpltCallback = pCallback;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
          break;
 8008ef4:	e053      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_RX_HALFCOMPLETE_CB_ID :
          hsai->RxHalfCpltCallback = pCallback;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          break;
 8008efe:	e04e      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_TX_COMPLETE_CB_ID :
          hsai->TxCpltCallback = pCallback;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
          break;
 8008f08:	e049      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_TX_HALFCOMPLETE_CB_ID :
          hsai->TxHalfCpltCallback = pCallback;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          break;
 8008f12:	e044      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_ERROR_CB_ID :
          hsai->ErrorCallback = pCallback;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
          break;
 8008f1c:	e03f      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_MSPINIT_CB_ID :
          hsai->MspInitCallback = pCallback;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
          break;
 8008f26:	e03a      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_MSPDEINIT_CB_ID :
          hsai->MspDeInitCallback = pCallback;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
          break;
 8008f30:	e035      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
        default :
          /* update the error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          /* update return status */
          status = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	75fb      	strb	r3, [r7, #23]
          break;
 8008f46:	e02a      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
      }
    }
    else if (HAL_SAI_STATE_RESET == hsai->State)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d11a      	bne.n	8008f8a <HAL_SAI_RegisterCallback+0x102>
    {
      switch (CallbackID)
 8008f54:	7afb      	ldrb	r3, [r7, #11]
 8008f56:	2b05      	cmp	r3, #5
 8008f58:	d002      	beq.n	8008f60 <HAL_SAI_RegisterCallback+0xd8>
 8008f5a:	2b06      	cmp	r3, #6
 8008f5c:	d005      	beq.n	8008f6a <HAL_SAI_RegisterCallback+0xe2>
 8008f5e:	e009      	b.n	8008f74 <HAL_SAI_RegisterCallback+0xec>
      {
        case HAL_SAI_MSPINIT_CB_ID :
          hsai->MspInitCallback = pCallback;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
          break;
 8008f68:	e019      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_MSPDEINIT_CB_ID :
          hsai->MspDeInitCallback = pCallback;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
          break;
 8008f72:	e014      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
        default :
          /* update the error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          /* update return status */
          status = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	75fb      	strb	r3, [r7, #23]
          break;
 8008f88:	e009      	b.n	8008f9e <HAL_SAI_RegisterCallback+0x116>
      }
    }
    else
    {
      /* update the error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* update return status */
      status = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <HAL_SAI_Receive_DMA+0x1a>
 8008fc0:	88fb      	ldrh	r3, [r7, #6]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e078      	b.n	80090bc <HAL_SAI_Receive_DMA+0x110>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d171      	bne.n	80090ba <HAL_SAI_Receive_DMA+0x10e>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d101      	bne.n	8008fe4 <HAL_SAI_Receive_DMA+0x38>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	e06b      	b.n	80090bc <HAL_SAI_Receive_DMA+0x110>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	88fa      	ldrh	r2, [r7, #6]
 8008ff6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	88fa      	ldrh	r2, [r7, #6]
 8008ffe:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2222      	movs	r2, #34	; 0x22
 800900e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009018:	4a2a      	ldr	r2, [pc, #168]	; (80090c4 <HAL_SAI_Receive_DMA+0x118>)
 800901a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009022:	4a29      	ldr	r2, [pc, #164]	; (80090c8 <HAL_SAI_Receive_DMA+0x11c>)
 8009024:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800902c:	4a27      	ldr	r2, [pc, #156]	; (80090cc <HAL_SAI_Receive_DMA+0x120>)
 800902e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009036:	2200      	movs	r2, #0
 8009038:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)&hsai->pBuffPtr, (uint32_t)&hsai->XferSize) != HAL_OK)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	331c      	adds	r3, #28
 8009046:	4619      	mov	r1, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	3378      	adds	r3, #120	; 0x78
 800904c:	461a      	mov	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	337c      	adds	r3, #124	; 0x7c
 8009052:	f7fa fa21 	bl	8003498 <HAL_DMA_Start_IT>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <HAL_SAI_Receive_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e029      	b.n	80090bc <HAL_SAI_Receive_DMA+0x110>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009068:	2100      	movs	r1, #0
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f862 	bl	8009134 <SAI_InterruptFlag>
 8009070:	4601      	mov	r1, r0
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	691a      	ldr	r2, [r3, #16]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800908e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d107      	bne.n	80090ae <HAL_SAI_Receive_DMA+0x102>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80090ac:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	e000      	b.n	80090bc <HAL_SAI_Receive_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80090ba:	2302      	movs	r3, #2
  }
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	0800927d 	.word	0x0800927d
 80090c8:	08009219 	.word	0x08009219
 80090cc:	0800929d 	.word	0x0800929d

080090d0 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009140:	2301      	movs	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d103      	bne.n	8009152 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f043 0308 	orr.w	r3, r3, #8
 8009150:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009156:	2b08      	cmp	r3, #8
 8009158:	d10b      	bne.n	8009172 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800915e:	2b03      	cmp	r3, #3
 8009160:	d003      	beq.n	800916a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d103      	bne.n	8009172 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f043 0310 	orr.w	r3, r3, #16
 8009170:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	2b03      	cmp	r3, #3
 8009178:	d003      	beq.n	8009182 <SAI_InterruptFlag+0x4e>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	2b02      	cmp	r3, #2
 8009180:	d104      	bne.n	800918c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	e003      	b.n	8009194 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f043 0304 	orr.w	r3, r3, #4
 8009192:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009194:	68fb      	ldr	r3, [r7, #12]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
	...

080091a4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80091ac:	4b18      	ldr	r3, [pc, #96]	; (8009210 <SAI_Disable+0x6c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a18      	ldr	r2, [pc, #96]	; (8009214 <SAI_Disable+0x70>)
 80091b2:	fba2 2303 	umull	r2, r3, r2, r3
 80091b6:	0b1b      	lsrs	r3, r3, #12
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80091ce:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	72fb      	strb	r3, [r7, #11]
      break;
 80091ea:	e009      	b.n	8009200 <SAI_Disable+0x5c>
    }
    count--;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e7      	bne.n	80091d0 <SAI_Disable+0x2c>

  return status;
 8009200:	7afb      	ldrb	r3, [r7, #11]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	24000408 	.word	0x24000408
 8009214:	95cbec1b 	.word	0x95cbec1b

08009218 <SAI_DMARxCplt>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
// TODO: Add a function for when it's complete
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800922e:	d01c      	beq.n	800926a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800923e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009248:	2100      	movs	r1, #0
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f7ff ff72 	bl	8009134 <SAI_InterruptFlag>
 8009250:	4603      	mov	r3, r0
 8009252:	43d9      	mvns	r1, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691a      	ldr	r2, [r3, #16]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	400a      	ands	r2, r1
 8009260:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	4798      	blx	r3
#else
  HAL_SAI_RxCpltCallback(hsai);
#endif
}
 8009274:	bf00      	nop
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009288:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	4798      	blx	r3
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
#endif
}
 8009294:	bf00      	nop
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fb fa8c 	bl	80047c8 <HAL_DMA_GetError>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d01f      	beq.n	80092f6 <SAI_DMAError+0x5a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80092d4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f7ff ff64 	bl	80091a4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	4798      	blx	r3
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 80092f6:	bf00      	nop
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b0c6      	sub	sp, #280	; 0x118
 8009302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009304:	f7f8 feba 	bl	800207c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009308:	f000 f832 	bl	8009370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800930c:	f000 f8e0 	bl	80094d0 <MX_GPIO_Init>
 // MX_SAI4_Init();
 // MX_SAI1_Init();

  MX_CRC_Init();
 8009310:	f000 f89c 	bl	800944c <MX_CRC_Init>
  //MX_PDM2PCM_Init();
  //MX_DFSDM1_Init();

  /* USER CODE BEGIN 2 */
  BSP_AUDIO_Init_t haudio_in;
  haudio_in.Device = AUDIO_IN_DEVICE_DIGITAL_MIC1;
 8009314:	2310      	movs	r3, #16
 8009316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  haudio_in.ChannelsNbr = 1;
 800931a:	2301      	movs	r3, #1
 800931c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  haudio_in.SampleRate = AUDIO_FREQUENCY_16K;
 8009320:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8009324:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  haudio_in.BitsPerSample = AUDIO_RESOLUTION_8B;
 8009328:	2308      	movs	r3, #8
 800932a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  haudio_in.Volume = 50;
 800932e:	2332      	movs	r3, #50	; 0x32
 8009330:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BSP_AUDIO_IN_Init(PDM, &haudio_in);
 8009334:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8009338:	4619      	mov	r1, r3
 800933a:	2001      	movs	r0, #1
 800933c:	f7f7 fb8c 	bl	8000a58 <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_PDMToPCM_Init(PDM, SAI_AUDIO_FREQUENCY_16K, 1, 1);
 8009340:	2301      	movs	r3, #1
 8009342:	2201      	movs	r2, #1
 8009344:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8009348:	2001      	movs	r0, #1
 800934a:	f7f8 fb03 	bl	8001954 <BSP_AUDIO_IN_PDMToPCM_Init>

  uint8_t mic_buffer[PDM_BUFFER_SIZE] = {0};
 800934e:	1d3b      	adds	r3, r7, #4
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	3304      	adds	r3, #4
 8009356:	22fc      	movs	r2, #252	; 0xfc
 8009358:	2100      	movs	r1, #0
 800935a:	4618      	mov	r0, r3
 800935c:	f002 fabe 	bl	800b8dc <memset>
  // uint16_t speaker_buffer[PCM_BUFFER_SIZE] = {0};
  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM

  BSP_AUDIO_IN_RecordPDM(PDM, mic_buffer, 64);
 8009360:	1d3b      	adds	r3, r7, #4
 8009362:	2240      	movs	r2, #64	; 0x40
 8009364:	4619      	mov	r1, r3
 8009366:	2001      	movs	r0, #1
 8009368:	f7f8 fb98 	bl	8001a9c <BSP_AUDIO_IN_RecordPDM>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800936c:	e7fe      	b.n	800936c <main+0x6e>
	...

08009370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b09c      	sub	sp, #112	; 0x70
 8009374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800937a:	224c      	movs	r2, #76	; 0x4c
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f002 faac 	bl	800b8dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009384:	1d3b      	adds	r3, r7, #4
 8009386:	2220      	movs	r2, #32
 8009388:	2100      	movs	r1, #0
 800938a:	4618      	mov	r0, r3
 800938c:	f002 faa6 	bl	800b8dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8009390:	2004      	movs	r0, #4
 8009392:	f7fc f9f7 	bl	8005784 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009396:	2300      	movs	r3, #0
 8009398:	603b      	str	r3, [r7, #0]
 800939a:	4b2b      	ldr	r3, [pc, #172]	; (8009448 <SystemClock_Config+0xd8>)
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	4a2a      	ldr	r2, [pc, #168]	; (8009448 <SystemClock_Config+0xd8>)
 80093a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093a4:	6193      	str	r3, [r2, #24]
 80093a6:	4b28      	ldr	r3, [pc, #160]	; (8009448 <SystemClock_Config+0xd8>)
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80093ae:	603b      	str	r3, [r7, #0]
 80093b0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80093b2:	bf00      	nop
 80093b4:	4b24      	ldr	r3, [pc, #144]	; (8009448 <SystemClock_Config+0xd8>)
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093c0:	d1f8      	bne.n	80093b4 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80093c2:	2302      	movs	r3, #2
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80093c6:	2301      	movs	r3, #1
 80093c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80093ca:	2340      	movs	r3, #64	; 0x40
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80093ce:	2302      	movs	r3, #2
 80093d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80093d2:	2300      	movs	r3, #0
 80093d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80093d6:	2304      	movs	r3, #4
 80093d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80093da:	2318      	movs	r3, #24
 80093dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80093de:	2301      	movs	r3, #1
 80093e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 80093e2:	237d      	movs	r3, #125	; 0x7d
 80093e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80093e6:	2302      	movs	r3, #2
 80093e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80093ea:	230c      	movs	r3, #12
 80093ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80093ee:	2300      	movs	r3, #0
 80093f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80093f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fc fa1c 	bl	8005838 <HAL_RCC_OscConfig>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8009406:	f000 f8ab 	bl	8009560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800940a:	233f      	movs	r3, #63	; 0x3f
 800940c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800940e:	2303      	movs	r3, #3
 8009410:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8009412:	2300      	movs	r3, #0
 8009414:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8009416:	2308      	movs	r3, #8
 8009418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800941a:	2340      	movs	r3, #64	; 0x40
 800941c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800941e:	2340      	movs	r3, #64	; 0x40
 8009420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8009422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009426:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8009428:	2340      	movs	r3, #64	; 0x40
 800942a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800942c:	1d3b      	adds	r3, r7, #4
 800942e:	2102      	movs	r1, #2
 8009430:	4618      	mov	r0, r3
 8009432:	f7fc fdad 	bl	8005f90 <HAL_RCC_ClockConfig>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800943c:	f000 f890 	bl	8009560 <Error_Handler>
  }
}
 8009440:	bf00      	nop
 8009442:	3770      	adds	r7, #112	; 0x70
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	58024800 	.word	0x58024800

0800944c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8009452:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <MX_CRC_Init+0x78>)
 8009454:	4a1c      	ldr	r2, [pc, #112]	; (80094c8 <MX_CRC_Init+0x7c>)
 8009456:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8009458:	4b1a      	ldr	r3, [pc, #104]	; (80094c4 <MX_CRC_Init+0x78>)
 800945a:	2200      	movs	r2, #0
 800945c:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800945e:	4b19      	ldr	r3, [pc, #100]	; (80094c4 <MX_CRC_Init+0x78>)
 8009460:	2200      	movs	r2, #0
 8009462:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8009464:	4b17      	ldr	r3, [pc, #92]	; (80094c4 <MX_CRC_Init+0x78>)
 8009466:	2200      	movs	r2, #0
 8009468:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800946a:	4b16      	ldr	r3, [pc, #88]	; (80094c4 <MX_CRC_Init+0x78>)
 800946c:	2200      	movs	r2, #0
 800946e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8009470:	4b14      	ldr	r3, [pc, #80]	; (80094c4 <MX_CRC_Init+0x78>)
 8009472:	2201      	movs	r2, #1
 8009474:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8009476:	4813      	ldr	r0, [pc, #76]	; (80094c4 <MX_CRC_Init+0x78>)
 8009478:	f7f8 ffd4 	bl	8002424 <HAL_CRC_Init>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8009482:	f000 f86d 	bl	8009560 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8009486:	4b0f      	ldr	r3, [pc, #60]	; (80094c4 <MX_CRC_Init+0x78>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	4b0d      	ldr	r3, [pc, #52]	; (80094c4 <MX_CRC_Init+0x78>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f042 0201 	orr.w	r2, r2, #1
 8009494:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8009496:	4b0d      	ldr	r3, [pc, #52]	; (80094cc <MX_CRC_Init+0x80>)
 8009498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800949c:	4a0b      	ldr	r2, [pc, #44]	; (80094cc <MX_CRC_Init+0x80>)
 800949e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80094a6:	4b09      	ldr	r3, [pc, #36]	; (80094cc <MX_CRC_Init+0x80>)
 80094a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094b0:	607b      	str	r3, [r7, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 80094b4:	4803      	ldr	r0, [pc, #12]	; (80094c4 <MX_CRC_Init+0x78>)
 80094b6:	f000 f873 	bl	80095a0 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	24000d44 	.word	0x24000d44
 80094c8:	58024c00 	.word	0x58024c00
 80094cc:	58024400 	.word	0x58024400

080094d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80094d6:	4b21      	ldr	r3, [pc, #132]	; (800955c <MX_GPIO_Init+0x8c>)
 80094d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094dc:	4a1f      	ldr	r2, [pc, #124]	; (800955c <MX_GPIO_Init+0x8c>)
 80094de:	f043 0301 	orr.w	r3, r3, #1
 80094e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80094e6:	4b1d      	ldr	r3, [pc, #116]	; (800955c <MX_GPIO_Init+0x8c>)
 80094e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094ec:	f003 0301 	and.w	r3, r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80094f4:	4b19      	ldr	r3, [pc, #100]	; (800955c <MX_GPIO_Init+0x8c>)
 80094f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094fa:	4a18      	ldr	r2, [pc, #96]	; (800955c <MX_GPIO_Init+0x8c>)
 80094fc:	f043 0310 	orr.w	r3, r3, #16
 8009500:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009504:	4b15      	ldr	r3, [pc, #84]	; (800955c <MX_GPIO_Init+0x8c>)
 8009506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	60bb      	str	r3, [r7, #8]
 8009510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009512:	4b12      	ldr	r3, [pc, #72]	; (800955c <MX_GPIO_Init+0x8c>)
 8009514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009518:	4a10      	ldr	r2, [pc, #64]	; (800955c <MX_GPIO_Init+0x8c>)
 800951a:	f043 0308 	orr.w	r3, r3, #8
 800951e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009522:	4b0e      	ldr	r3, [pc, #56]	; (800955c <MX_GPIO_Init+0x8c>)
 8009524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009528:	f003 0308 	and.w	r3, r3, #8
 800952c:	607b      	str	r3, [r7, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009530:	4b0a      	ldr	r3, [pc, #40]	; (800955c <MX_GPIO_Init+0x8c>)
 8009532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009536:	4a09      	ldr	r2, [pc, #36]	; (800955c <MX_GPIO_Init+0x8c>)
 8009538:	f043 0320 	orr.w	r3, r3, #32
 800953c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009540:	4b06      	ldr	r3, [pc, #24]	; (800955c <MX_GPIO_Init+0x8c>)
 8009542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	683b      	ldr	r3, [r7, #0]

}
 800954e:	bf00      	nop
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	58024400 	.word	0x58024400

08009560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009560:	b480      	push	{r7}
 8009562:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009564:	b672      	cpsid	i
}
 8009566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009568:	e7fe      	b.n	8009568 <Error_Handler+0x8>
	...

0800956c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009572:	4b0a      	ldr	r3, [pc, #40]	; (800959c <HAL_MspInit+0x30>)
 8009574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009578:	4a08      	ldr	r2, [pc, #32]	; (800959c <HAL_MspInit+0x30>)
 800957a:	f043 0302 	orr.w	r3, r3, #2
 800957e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009582:	4b06      	ldr	r3, [pc, #24]	; (800959c <HAL_MspInit+0x30>)
 8009584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	607b      	str	r3, [r7, #4]
 800958e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	58024400 	.word	0x58024400

080095a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a0b      	ldr	r2, [pc, #44]	; (80095dc <HAL_CRC_MspInit+0x3c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d10e      	bne.n	80095d0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80095b2:	4b0b      	ldr	r3, [pc, #44]	; (80095e0 <HAL_CRC_MspInit+0x40>)
 80095b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095b8:	4a09      	ldr	r2, [pc, #36]	; (80095e0 <HAL_CRC_MspInit+0x40>)
 80095ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80095c2:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <HAL_CRC_MspInit+0x40>)
 80095c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	58024c00 	.word	0x58024c00
 80095e0:	58024400 	.word	0x58024400

080095e4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b0b0      	sub	sp, #192	; 0xc0
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80095ec:	f107 030c 	add.w	r3, r7, #12
 80095f0:	22b4      	movs	r2, #180	; 0xb4
 80095f2:	2100      	movs	r1, #0
 80095f4:	4618      	mov	r0, r3
 80095f6:	f002 f971 	bl	800b8dc <memset>
  if(DFSDM1_Init == 0)
 80095fa:	4b15      	ldr	r3, [pc, #84]	; (8009650 <HAL_DFSDM_ChannelMspInit+0x6c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d122      	bne.n	8009648 <HAL_DFSDM_ChannelMspInit+0x64>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8009602:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009606:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8009608:	2300      	movs	r3, #0
 800960a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800960c:	f107 030c 	add.w	r3, r7, #12
 8009610:	4618      	mov	r0, r3
 8009612:	f7fd f81d 	bl	8006650 <HAL_RCCEx_PeriphCLKConfig>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <HAL_DFSDM_ChannelMspInit+0x3c>
    {
      Error_Handler();
 800961c:	f7ff ffa0 	bl	8009560 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8009620:	4b0c      	ldr	r3, [pc, #48]	; (8009654 <HAL_DFSDM_ChannelMspInit+0x70>)
 8009622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009626:	4a0b      	ldr	r2, [pc, #44]	; (8009654 <HAL_DFSDM_ChannelMspInit+0x70>)
 8009628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800962c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009630:	4b08      	ldr	r3, [pc, #32]	; (8009654 <HAL_DFSDM_ChannelMspInit+0x70>)
 8009632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009636:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800963a:	60bb      	str	r3, [r7, #8]
 800963c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800963e:	4b04      	ldr	r3, [pc, #16]	; (8009650 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3301      	adds	r3, #1
 8009644:	4a02      	ldr	r2, [pc, #8]	; (8009650 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8009646:	6013      	str	r3, [r2, #0]
  }

}
 8009648:	bf00      	nop
 800964a:	37c0      	adds	r7, #192	; 0xc0
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	24000a50 	.word	0x24000a50
 8009654:	58024400 	.word	0x58024400

08009658 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b0ba      	sub	sp, #232	; 0xe8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009660:	f107 0310 	add.w	r3, r7, #16
 8009664:	22b4      	movs	r2, #180	; 0xb4
 8009666:	2100      	movs	r1, #0
 8009668:	4618      	mov	r0, r3
 800966a:	f002 f937 	bl	800b8dc <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4aa9      	ldr	r2, [pc, #676]	; (8009918 <HAL_SAI_MspInit+0x2c0>)
 8009674:	4293      	cmp	r3, r2
 8009676:	f040 80a5 	bne.w	80097c4 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800967a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800967e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8009680:	2300      	movs	r3, #0
 8009682:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009684:	f107 0310 	add.w	r3, r7, #16
 8009688:	4618      	mov	r0, r3
 800968a:	f7fc ffe1 	bl	8006650 <HAL_RCCEx_PeriphCLKConfig>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8009694:	f7ff ff64 	bl	8009560 <Error_Handler>
    }

      if (SAI1_client == 0)
 8009698:	4ba0      	ldr	r3, [pc, #640]	; (800991c <HAL_SAI_MspInit+0x2c4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10e      	bne.n	80096be <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80096a0:	4b9f      	ldr	r3, [pc, #636]	; (8009920 <HAL_SAI_MspInit+0x2c8>)
 80096a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80096a6:	4a9e      	ldr	r2, [pc, #632]	; (8009920 <HAL_SAI_MspInit+0x2c8>)
 80096a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80096ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80096b0:	4b9b      	ldr	r3, [pc, #620]	; (8009920 <HAL_SAI_MspInit+0x2c8>)
 80096b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80096b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80096be:	4b97      	ldr	r3, [pc, #604]	; (800991c <HAL_SAI_MspInit+0x2c4>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	3301      	adds	r3, #1
 80096c4:	4a95      	ldr	r2, [pc, #596]	; (800991c <HAL_SAI_MspInit+0x2c4>)
 80096c6:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80096c8:	2308      	movs	r3, #8
 80096ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ce:	2302      	movs	r3, #2
 80096d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096d4:	2300      	movs	r3, #0
 80096d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096da:	2300      	movs	r3, #0
 80096dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80096e0:	2306      	movs	r3, #6
 80096e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80096e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80096ea:	4619      	mov	r1, r3
 80096ec:	488d      	ldr	r0, [pc, #564]	; (8009924 <HAL_SAI_MspInit+0x2cc>)
 80096ee:	f7fb fd9f 	bl	8005230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 80096f2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80096f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096fa:	2302      	movs	r3, #2
 80096fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009700:	2300      	movs	r3, #0
 8009702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009706:	2300      	movs	r3, #0
 8009708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800970c:	2306      	movs	r3, #6
 800970e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009712:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009716:	4619      	mov	r1, r3
 8009718:	4883      	ldr	r0, [pc, #524]	; (8009928 <HAL_SAI_MspInit+0x2d0>)
 800971a:	f7fb fd89 	bl	8005230 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800971e:	4b83      	ldr	r3, [pc, #524]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 8009720:	4a83      	ldr	r2, [pc, #524]	; (8009930 <HAL_SAI_MspInit+0x2d8>)
 8009722:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8009724:	4b81      	ldr	r3, [pc, #516]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 8009726:	2258      	movs	r2, #88	; 0x58
 8009728:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800972a:	4b80      	ldr	r3, [pc, #512]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 800972c:	2240      	movs	r2, #64	; 0x40
 800972e:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8009730:	4b7e      	ldr	r3, [pc, #504]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 8009732:	2200      	movs	r2, #0
 8009734:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8009736:	4b7d      	ldr	r3, [pc, #500]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 8009738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800973c:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800973e:	4b7b      	ldr	r3, [pc, #492]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 8009740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009744:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009746:	4b79      	ldr	r3, [pc, #484]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 8009748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800974c:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800974e:	4b77      	ldr	r3, [pc, #476]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 8009750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009754:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8009756:	4b75      	ldr	r3, [pc, #468]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 8009758:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800975c:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800975e:	4b73      	ldr	r3, [pc, #460]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 8009760:	2200      	movs	r2, #0
 8009762:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8009764:	4871      	ldr	r0, [pc, #452]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 8009766:	f7f9 f987 	bl	8002a78 <HAL_DMA_Init>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8009770:	f7ff fef6 	bl	8009560 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8009774:	2306      	movs	r3, #6
 8009776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800977a:	2300      	movs	r3, #0
 800977c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8009780:	2300      	movs	r3, #0
 8009782:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8009786:	2301      	movs	r3, #1
 8009788:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800978c:	2301      	movs	r3, #1
 800978e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8009792:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009796:	4619      	mov	r1, r3
 8009798:	4864      	ldr	r0, [pc, #400]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 800979a:	f7fb fc11 	bl	8004fc0 <HAL_DMAEx_ConfigMuxSync>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 80097a4:	f7ff fedc 	bl	8009560 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a60      	ldr	r2, [pc, #384]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 80097ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80097b0:	4a5e      	ldr	r2, [pc, #376]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a5c      	ldr	r2, [pc, #368]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 80097ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80097be:	4a5b      	ldr	r2, [pc, #364]	; (800992c <HAL_SAI_MspInit+0x2d4>)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a5a      	ldr	r2, [pc, #360]	; (8009934 <HAL_SAI_MspInit+0x2dc>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	f040 80a0 	bne.w	8009910 <HAL_SAI_MspInit+0x2b8>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 80097d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80097dc:	f107 0310 	add.w	r3, r7, #16
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fc ff35 	bl	8006650 <HAL_RCCEx_PeriphCLKConfig>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 80097ec:	f7ff feb8 	bl	8009560 <Error_Handler>
    }

    if (SAI4_client == 0)
 80097f0:	4b51      	ldr	r3, [pc, #324]	; (8009938 <HAL_SAI_MspInit+0x2e0>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10e      	bne.n	8009816 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 80097f8:	4b49      	ldr	r3, [pc, #292]	; (8009920 <HAL_SAI_MspInit+0x2c8>)
 80097fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80097fe:	4a48      	ldr	r2, [pc, #288]	; (8009920 <HAL_SAI_MspInit+0x2c8>)
 8009800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009804:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009808:	4b45      	ldr	r3, [pc, #276]	; (8009920 <HAL_SAI_MspInit+0x2c8>)
 800980a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800980e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009812:	60bb      	str	r3, [r7, #8]
 8009814:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8009816:	4b48      	ldr	r3, [pc, #288]	; (8009938 <HAL_SAI_MspInit+0x2e0>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3301      	adds	r3, #1
 800981c:	4a46      	ldr	r2, [pc, #280]	; (8009938 <HAL_SAI_MspInit+0x2e0>)
 800981e:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8009820:	2330      	movs	r3, #48	; 0x30
 8009822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009826:	2302      	movs	r3, #2
 8009828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800982c:	2300      	movs	r3, #0
 800982e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009832:	2300      	movs	r3, #0
 8009834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8009838:	230a      	movs	r3, #10
 800983a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800983e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009842:	4619      	mov	r1, r3
 8009844:	4837      	ldr	r0, [pc, #220]	; (8009924 <HAL_SAI_MspInit+0x2cc>)
 8009846:	f7fb fcf3 	bl	8005230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800984a:	2340      	movs	r3, #64	; 0x40
 800984c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009850:	2302      	movs	r3, #2
 8009852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009856:	2300      	movs	r3, #0
 8009858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800985c:	2300      	movs	r3, #0
 800985e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8009862:	2301      	movs	r3, #1
 8009864:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009868:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800986c:	4619      	mov	r1, r3
 800986e:	4833      	ldr	r0, [pc, #204]	; (800993c <HAL_SAI_MspInit+0x2e4>)
 8009870:	f7fb fcde 	bl	8005230 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8009874:	4b32      	ldr	r3, [pc, #200]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 8009876:	4a33      	ldr	r2, [pc, #204]	; (8009944 <HAL_SAI_MspInit+0x2ec>)
 8009878:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800987a:	4b31      	ldr	r3, [pc, #196]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 800987c:	220f      	movs	r2, #15
 800987e:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009880:	4b2f      	ldr	r3, [pc, #188]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 8009882:	2200      	movs	r2, #0
 8009884:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8009886:	4b2e      	ldr	r3, [pc, #184]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 8009888:	2200      	movs	r2, #0
 800988a:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800988c:	4b2c      	ldr	r3, [pc, #176]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 800988e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009892:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009894:	4b2a      	ldr	r3, [pc, #168]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 8009896:	2200      	movs	r2, #0
 8009898:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800989a:	4b29      	ldr	r3, [pc, #164]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 800989c:	2200      	movs	r2, #0
 800989e:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 80098a0:	4b27      	ldr	r3, [pc, #156]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 80098a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098a6:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 80098a8:	4b25      	ldr	r3, [pc, #148]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 80098aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80098ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 80098b0:	4823      	ldr	r0, [pc, #140]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 80098b2:	f7f9 f8e1 	bl	8002a78 <HAL_DMA_Init>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <HAL_SAI_MspInit+0x268>
    {
      Error_Handler();
 80098bc:	f7ff fe50 	bl	8009560 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 80098c0:	230e      	movs	r3, #14
 80098c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80098c6:	2300      	movs	r3, #0
 80098c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 80098d2:	2301      	movs	r3, #1
 80098d4:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 80098d8:	2301      	movs	r3, #1
 80098da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 80098de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80098e2:	4619      	mov	r1, r3
 80098e4:	4816      	ldr	r0, [pc, #88]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 80098e6:	f7fb fb6b 	bl	8004fc0 <HAL_DMAEx_ConfigMuxSync>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <HAL_SAI_MspInit+0x29c>
    {
      Error_Handler();
 80098f0:	f7ff fe36 	bl	8009560 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a12      	ldr	r2, [pc, #72]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 80098f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80098fc:	4a10      	ldr	r2, [pc, #64]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a0e      	ldr	r2, [pc, #56]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 8009906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800990a:	4a0d      	ldr	r2, [pc, #52]	; (8009940 <HAL_SAI_MspInit+0x2e8>)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8009910:	bf00      	nop
 8009912:	37e8      	adds	r7, #232	; 0xe8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	40015824 	.word	0x40015824
 800991c:	24000a54 	.word	0x24000a54
 8009920:	58024400 	.word	0x58024400
 8009924:	58021000 	.word	0x58021000
 8009928:	58021400 	.word	0x58021400
 800992c:	24000de0 	.word	0x24000de0
 8009930:	40020028 	.word	0x40020028
 8009934:	58005404 	.word	0x58005404
 8009938:	24000a58 	.word	0x24000a58
 800993c:	58020c00 	.word	0x58020c00
 8009940:	24000d68 	.word	0x24000d68
 8009944:	58025408 	.word	0x58025408

08009948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009948:	b480      	push	{r7}
 800994a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800994c:	e7fe      	b.n	800994c <NMI_Handler+0x4>

0800994e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800994e:	b480      	push	{r7}
 8009950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009952:	e7fe      	b.n	8009952 <HardFault_Handler+0x4>

08009954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009954:	b480      	push	{r7}
 8009956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009958:	e7fe      	b.n	8009958 <MemManage_Handler+0x4>

0800995a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800995a:	b480      	push	{r7}
 800995c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800995e:	e7fe      	b.n	800995e <BusFault_Handler+0x4>

08009960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009960:	b480      	push	{r7}
 8009962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009964:	e7fe      	b.n	8009964 <UsageFault_Handler+0x4>

08009966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009966:	b480      	push	{r7}
 8009968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800996a:	bf00      	nop
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009974:	b480      	push	{r7}
 8009976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009978:	bf00      	nop
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009982:	b480      	push	{r7}
 8009984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009986:	bf00      	nop
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009994:	f7f8 fbe4 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009998:	bf00      	nop
 800999a:	bd80      	pop	{r7, pc}

0800999c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80099a0:	4802      	ldr	r0, [pc, #8]	; (80099ac <DMA1_Stream1_IRQHandler+0x10>)
 80099a2:	f7f9 ffe7 	bl	8003974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80099a6:	bf00      	nop
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	24000de0 	.word	0x24000de0

080099b0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 80099b4:	4802      	ldr	r0, [pc, #8]	; (80099c0 <DMAMUX1_OVR_IRQHandler+0x10>)
 80099b6:	f7fb fbe8 	bl	800518a <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80099ba:	bf00      	nop
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	24000de0 	.word	0x24000de0

080099c4 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 80099c8:	4802      	ldr	r0, [pc, #8]	; (80099d4 <DMAMUX2_OVR_IRQHandler+0x10>)
 80099ca:	f7fb fbde 	bl	800518a <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 80099ce:	bf00      	nop
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	24000d68 	.word	0x24000d68

080099d8 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 80099dc:	4802      	ldr	r0, [pc, #8]	; (80099e8 <BDMA_Channel0_IRQHandler+0x10>)
 80099de:	f7f9 ffc9 	bl	8003974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80099e2:	bf00      	nop
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	24000d68 	.word	0x24000d68

080099ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80099ec:	b480      	push	{r7}
 80099ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80099f0:	4b32      	ldr	r3, [pc, #200]	; (8009abc <SystemInit+0xd0>)
 80099f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f6:	4a31      	ldr	r2, [pc, #196]	; (8009abc <SystemInit+0xd0>)
 80099f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009a00:	4b2f      	ldr	r3, [pc, #188]	; (8009ac0 <SystemInit+0xd4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 030f 	and.w	r3, r3, #15
 8009a08:	2b06      	cmp	r3, #6
 8009a0a:	d807      	bhi.n	8009a1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009a0c:	4b2c      	ldr	r3, [pc, #176]	; (8009ac0 <SystemInit+0xd4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f023 030f 	bic.w	r3, r3, #15
 8009a14:	4a2a      	ldr	r2, [pc, #168]	; (8009ac0 <SystemInit+0xd4>)
 8009a16:	f043 0307 	orr.w	r3, r3, #7
 8009a1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009a1c:	4b29      	ldr	r3, [pc, #164]	; (8009ac4 <SystemInit+0xd8>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a28      	ldr	r2, [pc, #160]	; (8009ac4 <SystemInit+0xd8>)
 8009a22:	f043 0301 	orr.w	r3, r3, #1
 8009a26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009a28:	4b26      	ldr	r3, [pc, #152]	; (8009ac4 <SystemInit+0xd8>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009a2e:	4b25      	ldr	r3, [pc, #148]	; (8009ac4 <SystemInit+0xd8>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4924      	ldr	r1, [pc, #144]	; (8009ac4 <SystemInit+0xd8>)
 8009a34:	4b24      	ldr	r3, [pc, #144]	; (8009ac8 <SystemInit+0xdc>)
 8009a36:	4013      	ands	r3, r2
 8009a38:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009a3a:	4b21      	ldr	r3, [pc, #132]	; (8009ac0 <SystemInit+0xd4>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0308 	and.w	r3, r3, #8
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d007      	beq.n	8009a56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009a46:	4b1e      	ldr	r3, [pc, #120]	; (8009ac0 <SystemInit+0xd4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f023 030f 	bic.w	r3, r3, #15
 8009a4e:	4a1c      	ldr	r2, [pc, #112]	; (8009ac0 <SystemInit+0xd4>)
 8009a50:	f043 0307 	orr.w	r3, r3, #7
 8009a54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8009a56:	4b1b      	ldr	r3, [pc, #108]	; (8009ac4 <SystemInit+0xd8>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8009a5c:	4b19      	ldr	r3, [pc, #100]	; (8009ac4 <SystemInit+0xd8>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8009a62:	4b18      	ldr	r3, [pc, #96]	; (8009ac4 <SystemInit+0xd8>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009a68:	4b16      	ldr	r3, [pc, #88]	; (8009ac4 <SystemInit+0xd8>)
 8009a6a:	4a18      	ldr	r2, [pc, #96]	; (8009acc <SystemInit+0xe0>)
 8009a6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009a6e:	4b15      	ldr	r3, [pc, #84]	; (8009ac4 <SystemInit+0xd8>)
 8009a70:	4a17      	ldr	r2, [pc, #92]	; (8009ad0 <SystemInit+0xe4>)
 8009a72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009a74:	4b13      	ldr	r3, [pc, #76]	; (8009ac4 <SystemInit+0xd8>)
 8009a76:	4a17      	ldr	r2, [pc, #92]	; (8009ad4 <SystemInit+0xe8>)
 8009a78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009a7a:	4b12      	ldr	r3, [pc, #72]	; (8009ac4 <SystemInit+0xd8>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009a80:	4b10      	ldr	r3, [pc, #64]	; (8009ac4 <SystemInit+0xd8>)
 8009a82:	4a14      	ldr	r2, [pc, #80]	; (8009ad4 <SystemInit+0xe8>)
 8009a84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009a86:	4b0f      	ldr	r3, [pc, #60]	; (8009ac4 <SystemInit+0xd8>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009a8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ac4 <SystemInit+0xd8>)
 8009a8e:	4a11      	ldr	r2, [pc, #68]	; (8009ad4 <SystemInit+0xe8>)
 8009a90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009a92:	4b0c      	ldr	r3, [pc, #48]	; (8009ac4 <SystemInit+0xd8>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009a98:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <SystemInit+0xd8>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a09      	ldr	r2, [pc, #36]	; (8009ac4 <SystemInit+0xd8>)
 8009a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009aa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009aa4:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <SystemInit+0xd8>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8009aaa:	4b0b      	ldr	r3, [pc, #44]	; (8009ad8 <SystemInit+0xec>)
 8009aac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009ab0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009ab2:	bf00      	nop
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	e000ed00 	.word	0xe000ed00
 8009ac0:	52002000 	.word	0x52002000
 8009ac4:	58024400 	.word	0x58024400
 8009ac8:	eaf6ed7f 	.word	0xeaf6ed7f
 8009acc:	02020200 	.word	0x02020200
 8009ad0:	01ff0000 	.word	0x01ff0000
 8009ad4:	01010280 	.word	0x01010280
 8009ad8:	52004000 	.word	0x52004000

08009adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009ae0:	f7ff ff84 	bl	80099ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009ae4:	480c      	ldr	r0, [pc, #48]	; (8009b18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009ae6:	490d      	ldr	r1, [pc, #52]	; (8009b1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009ae8:	4a0d      	ldr	r2, [pc, #52]	; (8009b20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009aec:	e002      	b.n	8009af4 <LoopCopyDataInit>

08009aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009af2:	3304      	adds	r3, #4

08009af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009af8:	d3f9      	bcc.n	8009aee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009afa:	4a0a      	ldr	r2, [pc, #40]	; (8009b24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009afc:	4c0a      	ldr	r4, [pc, #40]	; (8009b28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009b00:	e001      	b.n	8009b06 <LoopFillZerobss>

08009b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009b04:	3204      	adds	r2, #4

08009b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009b08:	d3fb      	bcc.n	8009b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009b0a:	f001 fec3 	bl	800b894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b0e:	f7ff fbf6 	bl	80092fe <main>
  bx  lr
 8009b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009b14:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009b18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009b1c:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8009b20:	0800bfd0 	.word	0x0800bfd0
  ldr r2, =_sbss
 8009b24:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8009b28:	24000e58 	.word	0x24000e58

08009b2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009b2c:	e7fe      	b.n	8009b2c <ADC3_IRQHandler>
	...

08009b30 <D16_GENERIC>:
 8009b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	b089      	sub	sp, #36	; 0x24
 8009b36:	6993      	ldr	r3, [r2, #24]
 8009b38:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009b3a:	9103      	str	r1, [sp, #12]
 8009b3c:	9307      	str	r3, [sp, #28]
 8009b3e:	69d3      	ldr	r3, [r2, #28]
 8009b40:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8009b44:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009b48:	9106      	str	r1, [sp, #24]
 8009b4a:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8009b4e:	2d00      	cmp	r5, #0
 8009b50:	d063      	beq.n	8009c1a <D16_GENERIC+0xea>
 8009b52:	f001 0520 	and.w	r5, r1, #32
 8009b56:	f001 0110 	and.w	r1, r1, #16
 8009b5a:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8009c3c <D16_GENERIC+0x10c>
 8009b5e:	46c1      	mov	r9, r8
 8009b60:	9104      	str	r1, [sp, #16]
 8009b62:	2100      	movs	r1, #0
 8009b64:	9505      	str	r5, [sp, #20]
 8009b66:	e04d      	b.n	8009c04 <D16_GENERIC+0xd4>
 8009b68:	5d87      	ldrb	r7, [r0, r6]
 8009b6a:	7805      	ldrb	r5, [r0, #0]
 8009b6c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009b70:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8009b74:	b2fe      	uxtb	r6, r7
 8009b76:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8009b7a:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8009b7e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8009b82:	441d      	add	r5, r3
 8009b84:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8009b88:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009b8c:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8009b90:	0a9b      	lsrs	r3, r3, #10
 8009b92:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8009b96:	4d27      	ldr	r5, [pc, #156]	; (8009c34 <D16_GENERIC+0x104>)
 8009b98:	fb26 c505 	smlad	r5, r6, r5, ip
 8009b9c:	4f26      	ldr	r7, [pc, #152]	; (8009c38 <D16_GENERIC+0x108>)
 8009b9e:	fb26 fc07 	smuad	ip, r6, r7
 8009ba2:	9e04      	ldr	r6, [sp, #16]
 8009ba4:	f101 0801 	add.w	r8, r1, #1
 8009ba8:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8009bac:	b1ae      	cbz	r6, 8009bda <D16_GENERIC+0xaa>
 8009bae:	442c      	add	r4, r5
 8009bb0:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8009bb4:	eba4 040a 	sub.w	r4, r4, sl
 8009bb8:	46aa      	mov	sl, r5
 8009bba:	17e7      	asrs	r7, r4, #31
 8009bbc:	fba4 450b 	umull	r4, r5, r4, fp
 8009bc0:	e9cd 4500 	strd	r4, r5, [sp]
 8009bc4:	fb0b 5407 	mla	r4, fp, r7, r5
 8009bc8:	9401      	str	r4, [sp, #4]
 8009bca:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009bce:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009bd2:	f145 0500 	adc.w	r5, r5, #0
 8009bd6:	006c      	lsls	r4, r5, #1
 8009bd8:	4625      	mov	r5, r4
 8009bda:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009bde:	042d      	lsls	r5, r5, #16
 8009be0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009be4:	2700      	movs	r7, #0
 8009be6:	fb01 fb0b 	mul.w	fp, r1, fp
 8009bea:	fa1f f188 	uxth.w	r1, r8
 8009bee:	fbc9 6705 	smlal	r6, r7, r9, r5
 8009bf2:	9e03      	ldr	r6, [sp, #12]
 8009bf4:	10bd      	asrs	r5, r7, #2
 8009bf6:	f305 050f 	ssat	r5, #16, r5
 8009bfa:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009bfe:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009c00:	428d      	cmp	r5, r1
 8009c02:	d90a      	bls.n	8009c1a <D16_GENERIC+0xea>
 8009c04:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009c06:	2d01      	cmp	r5, #1
 8009c08:	b2ee      	uxtb	r6, r5
 8009c0a:	d1ad      	bne.n	8009b68 <D16_GENERIC+0x38>
 8009c0c:	9d05      	ldr	r5, [sp, #20]
 8009c0e:	f850 7b02 	ldr.w	r7, [r0], #2
 8009c12:	2d00      	cmp	r5, #0
 8009c14:	d0ae      	beq.n	8009b74 <D16_GENERIC+0x44>
 8009c16:	ba7f      	rev16	r7, r7
 8009c18:	e7ac      	b.n	8009b74 <D16_GENERIC+0x44>
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	9906      	ldr	r1, [sp, #24]
 8009c1e:	61d3      	str	r3, [r2, #28]
 8009c20:	9b07      	ldr	r3, [sp, #28]
 8009c22:	f8c2 c008 	str.w	ip, [r2, #8]
 8009c26:	60d1      	str	r1, [r2, #12]
 8009c28:	6193      	str	r3, [r2, #24]
 8009c2a:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8009c2e:	b009      	add	sp, #36	; 0x24
 8009c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c34:	00030001 	.word	0x00030001
 8009c38:	00010003 	.word	0x00010003
 8009c3c:	24000000 	.word	0x24000000

08009c40 <D24_GENERIC>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009c48:	b089      	sub	sp, #36	; 0x24
 8009c4a:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009c4c:	9303      	str	r3, [sp, #12]
 8009c4e:	6993      	ldr	r3, [r2, #24]
 8009c50:	9104      	str	r1, [sp, #16]
 8009c52:	9307      	str	r3, [sp, #28]
 8009c54:	69d1      	ldr	r1, [r2, #28]
 8009c56:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009c5a:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8009c5e:	2e00      	cmp	r6, #0
 8009c60:	f000 8088 	beq.w	8009d74 <D24_GENERIC+0x134>
 8009c64:	f005 0620 	and.w	r6, r5, #32
 8009c68:	f005 0510 	and.w	r5, r5, #16
 8009c6c:	f04f 0c00 	mov.w	ip, #0
 8009c70:	f8df e140 	ldr.w	lr, [pc, #320]	; 8009db4 <D24_GENERIC+0x174>
 8009c74:	9606      	str	r6, [sp, #24]
 8009c76:	9505      	str	r5, [sp, #20]
 8009c78:	e064      	b.n	8009d44 <D24_GENERIC+0x104>
 8009c7a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8009c7e:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8009c82:	f810 b007 	ldrb.w	fp, [r0, r7]
 8009c86:	042d      	lsls	r5, r5, #16
 8009c88:	19f0      	adds	r0, r6, r7
 8009c8a:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8009c8e:	44a9      	add	r9, r5
 8009c90:	fa5f f689 	uxtb.w	r6, r9
 8009c94:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8009c98:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8009c9c:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8009ca0:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8009ca4:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8009ca8:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8009cac:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009cb0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009cb4:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8009cb8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8009cbc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009cc0:	4d3a      	ldr	r5, [pc, #232]	; (8009dac <D24_GENERIC+0x16c>)
 8009cc2:	fb26 8705 	smlad	r7, r6, r5, r8
 8009cc6:	4d3a      	ldr	r5, [pc, #232]	; (8009db0 <D24_GENERIC+0x170>)
 8009cc8:	fb26 3805 	smlad	r8, r6, r5, r3
 8009ccc:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009cd0:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8009cda:	fb26 f603 	smuad	r6, r6, r3
 8009cde:	eb0c 0903 	add.w	r9, ip, r3
 8009ce2:	eb0b 0306 	add.w	r3, fp, r6
 8009ce6:	9e05      	ldr	r6, [sp, #20]
 8009ce8:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8009cec:	b1ae      	cbz	r6, 8009d1a <D24_GENERIC+0xda>
 8009cee:	442c      	add	r4, r5
 8009cf0:	9e03      	ldr	r6, [sp, #12]
 8009cf2:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8009cf6:	1ba4      	subs	r4, r4, r6
 8009cf8:	9503      	str	r5, [sp, #12]
 8009cfa:	17e7      	asrs	r7, r4, #31
 8009cfc:	fba4 450b 	umull	r4, r5, r4, fp
 8009d00:	e9cd 4500 	strd	r4, r5, [sp]
 8009d04:	fb0b 5407 	mla	r4, fp, r7, r5
 8009d08:	9401      	str	r4, [sp, #4]
 8009d0a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009d0e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009d12:	f145 0500 	adc.w	r5, r5, #0
 8009d16:	006c      	lsls	r4, r5, #1
 8009d18:	4625      	mov	r5, r4
 8009d1a:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009d1e:	03ad      	lsls	r5, r5, #14
 8009d20:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009d24:	2700      	movs	r7, #0
 8009d26:	fb0c fb0b 	mul.w	fp, ip, fp
 8009d2a:	fa1f fc89 	uxth.w	ip, r9
 8009d2e:	fbca 6705 	smlal	r6, r7, sl, r5
 8009d32:	9e04      	ldr	r6, [sp, #16]
 8009d34:	10bd      	asrs	r5, r7, #2
 8009d36:	f305 050f 	ssat	r5, #16, r5
 8009d3a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009d3e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009d40:	4565      	cmp	r5, ip
 8009d42:	d917      	bls.n	8009d74 <D24_GENERIC+0x134>
 8009d44:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009d46:	f890 9000 	ldrb.w	r9, [r0]
 8009d4a:	b2ef      	uxtb	r7, r5
 8009d4c:	2d01      	cmp	r5, #1
 8009d4e:	b23e      	sxth	r6, r7
 8009d50:	d193      	bne.n	8009c7a <D24_GENERIC+0x3a>
 8009d52:	9d06      	ldr	r5, [sp, #24]
 8009d54:	b1dd      	cbz	r5, 8009d8e <D24_GENERIC+0x14e>
 8009d56:	78c7      	ldrb	r7, [r0, #3]
 8009d58:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8009d5c:	f01c 0f01 	tst.w	ip, #1
 8009d60:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8009d64:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8009d68:	d11a      	bne.n	8009da0 <D24_GENERIC+0x160>
 8009d6a:	f890 9001 	ldrb.w	r9, [r0, #1]
 8009d6e:	3002      	adds	r0, #2
 8009d70:	44b1      	add	r9, r6
 8009d72:	e78d      	b.n	8009c90 <D24_GENERIC+0x50>
 8009d74:	6093      	str	r3, [r2, #8]
 8009d76:	2000      	movs	r0, #0
 8009d78:	9b03      	ldr	r3, [sp, #12]
 8009d7a:	f8c2 800c 	str.w	r8, [r2, #12]
 8009d7e:	6153      	str	r3, [r2, #20]
 8009d80:	9b07      	ldr	r3, [sp, #28]
 8009d82:	61d1      	str	r1, [r2, #28]
 8009d84:	6114      	str	r4, [r2, #16]
 8009d86:	6193      	str	r3, [r2, #24]
 8009d88:	b009      	add	sp, #36	; 0x24
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	7845      	ldrb	r5, [r0, #1]
 8009d90:	3003      	adds	r0, #3
 8009d92:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8009d96:	022d      	lsls	r5, r5, #8
 8009d98:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009d9c:	44a9      	add	r9, r5
 8009d9e:	e777      	b.n	8009c90 <D24_GENERIC+0x50>
 8009da0:	7886      	ldrb	r6, [r0, #2]
 8009da2:	3004      	adds	r0, #4
 8009da4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009da8:	44a9      	add	r9, r5
 8009daa:	e771      	b.n	8009c90 <D24_GENERIC+0x50>
 8009dac:	00030001 	.word	0x00030001
 8009db0:	00060007 	.word	0x00060007
 8009db4:	24000000 	.word	0x24000000

08009db8 <D32_GENERIC>:
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009dc0:	b089      	sub	sp, #36	; 0x24
 8009dc2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009dc4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009dc6:	9302      	str	r3, [sp, #8]
 8009dc8:	6993      	ldr	r3, [r2, #24]
 8009dca:	9104      	str	r1, [sp, #16]
 8009dcc:	9307      	str	r3, [sp, #28]
 8009dce:	9503      	str	r5, [sp, #12]
 8009dd0:	69d1      	ldr	r1, [r2, #28]
 8009dd2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009dd4:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009dd8:	2e00      	cmp	r6, #0
 8009dda:	f000 8097 	beq.w	8009f0c <D32_GENERIC+0x154>
 8009dde:	f005 0620 	and.w	r6, r5, #32
 8009de2:	f005 0510 	and.w	r5, r5, #16
 8009de6:	f04f 0e00 	mov.w	lr, #0
 8009dea:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009f3c <D32_GENERIC+0x184>
 8009dee:	9606      	str	r6, [sp, #24]
 8009df0:	9505      	str	r5, [sp, #20]
 8009df2:	e079      	b.n	8009ee8 <D32_GENERIC+0x130>
 8009df4:	783d      	ldrb	r5, [r7, #0]
 8009df6:	f810 b009 	ldrb.w	fp, [r0, r9]
 8009dfa:	042d      	lsls	r5, r5, #16
 8009dfc:	f810 a006 	ldrb.w	sl, [r0, r6]
 8009e00:	f890 9000 	ldrb.w	r9, [r0]
 8009e04:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8009e08:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8009e0c:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8009e10:	44a9      	add	r9, r5
 8009e12:	fa5f f789 	uxtb.w	r7, r9
 8009e16:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8009e1a:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8009e1e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8009e22:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8009e26:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8009e2a:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8009e2e:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8009e32:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8009e36:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009e3a:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8009e3e:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8009e42:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009e46:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8009e4a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009e4e:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8009e52:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8009e56:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009e5a:	4d34      	ldr	r5, [pc, #208]	; (8009f2c <D32_GENERIC+0x174>)
 8009e5c:	fb29 8805 	smlad	r8, r9, r5, r8
 8009e60:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8009e64:	fb26 8705 	smlad	r7, r6, r5, r8
 8009e68:	4d31      	ldr	r5, [pc, #196]	; (8009f30 <D32_GENERIC+0x178>)
 8009e6a:	fb29 3305 	smlad	r3, r9, r5, r3
 8009e6e:	4d31      	ldr	r5, [pc, #196]	; (8009f34 <D32_GENERIC+0x17c>)
 8009e70:	fb26 3805 	smlad	r8, r6, r5, r3
 8009e74:	2301      	movs	r3, #1
 8009e76:	fb29 f903 	smuad	r9, r9, r3
 8009e7a:	4b2f      	ldr	r3, [pc, #188]	; (8009f38 <D32_GENERIC+0x180>)
 8009e7c:	fb26 9303 	smlad	r3, r6, r3, r9
 8009e80:	9e05      	ldr	r6, [sp, #20]
 8009e82:	f10e 0901 	add.w	r9, lr, #1
 8009e86:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 8009e8a:	b1ae      	cbz	r6, 8009eb8 <D32_GENERIC+0x100>
 8009e8c:	442c      	add	r4, r5
 8009e8e:	9e02      	ldr	r6, [sp, #8]
 8009e90:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009e94:	1ba4      	subs	r4, r4, r6
 8009e96:	9502      	str	r5, [sp, #8]
 8009e98:	17e7      	asrs	r7, r4, #31
 8009e9a:	fba4 450a 	umull	r4, r5, r4, sl
 8009e9e:	e9cd 4500 	strd	r4, r5, [sp]
 8009ea2:	fb0a 5407 	mla	r4, sl, r7, r5
 8009ea6:	9401      	str	r4, [sp, #4]
 8009ea8:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009eac:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009eb0:	f145 0500 	adc.w	r5, r5, #0
 8009eb4:	006c      	lsls	r4, r5, #1
 8009eb6:	4625      	mov	r5, r4
 8009eb8:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8009ebc:	036d      	lsls	r5, r5, #13
 8009ebe:	9f03      	ldr	r7, [sp, #12]
 8009ec0:	fb0e fb0a 	mul.w	fp, lr, sl
 8009ec4:	fa1f fe89 	uxth.w	lr, r9
 8009ec8:	f04f 0a00 	mov.w	sl, #0
 8009ecc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009ed0:	9e04      	ldr	r6, [sp, #16]
 8009ed2:	fbc7 9a05 	smlal	r9, sl, r7, r5
 8009ed6:	4657      	mov	r7, sl
 8009ed8:	10bd      	asrs	r5, r7, #2
 8009eda:	f305 050f 	ssat	r5, #16, r5
 8009ede:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009ee2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009ee4:	4575      	cmp	r5, lr
 8009ee6:	d911      	bls.n	8009f0c <D32_GENERIC+0x154>
 8009ee8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009eea:	b2ee      	uxtb	r6, r5
 8009eec:	2d01      	cmp	r5, #1
 8009eee:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8009ef2:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 8009ef6:	f47f af7d 	bne.w	8009df4 <D32_GENERIC+0x3c>
 8009efa:	1d05      	adds	r5, r0, #4
 8009efc:	f8d0 9000 	ldr.w	r9, [r0]
 8009f00:	9806      	ldr	r0, [sp, #24]
 8009f02:	b180      	cbz	r0, 8009f26 <D32_GENERIC+0x16e>
 8009f04:	fa99 f999 	rev16.w	r9, r9
 8009f08:	4628      	mov	r0, r5
 8009f0a:	e782      	b.n	8009e12 <D32_GENERIC+0x5a>
 8009f0c:	6093      	str	r3, [r2, #8]
 8009f0e:	2000      	movs	r0, #0
 8009f10:	9b02      	ldr	r3, [sp, #8]
 8009f12:	f8c2 800c 	str.w	r8, [r2, #12]
 8009f16:	6153      	str	r3, [r2, #20]
 8009f18:	9b07      	ldr	r3, [sp, #28]
 8009f1a:	61d1      	str	r1, [r2, #28]
 8009f1c:	6114      	str	r4, [r2, #16]
 8009f1e:	6193      	str	r3, [r2, #24]
 8009f20:	b009      	add	sp, #36	; 0x24
 8009f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f26:	4628      	mov	r0, r5
 8009f28:	e773      	b.n	8009e12 <D32_GENERIC+0x5a>
 8009f2a:	bf00      	nop
 8009f2c:	00060003 	.word	0x00060003
 8009f30:	000a000c 	.word	0x000a000c
 8009f34:	000c000a 	.word	0x000c000a
 8009f38:	00030006 	.word	0x00030006
 8009f3c:	24000000 	.word	0x24000000

08009f40 <D48_GENERIC>:
 8009f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	6913      	ldr	r3, [r2, #16]
 8009f46:	b089      	sub	sp, #36	; 0x24
 8009f48:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	6953      	ldr	r3, [r2, #20]
 8009f4e:	9104      	str	r1, [sp, #16]
 8009f50:	9302      	str	r3, [sp, #8]
 8009f52:	6993      	ldr	r3, [r2, #24]
 8009f54:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8009f58:	9307      	str	r3, [sp, #28]
 8009f5a:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8009f5e:	9100      	str	r1, [sp, #0]
 8009f60:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009f62:	9103      	str	r1, [sp, #12]
 8009f64:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8009f66:	2c00      	cmp	r4, #0
 8009f68:	f000 80be 	beq.w	800a0e8 <D48_GENERIC+0x1a8>
 8009f6c:	f001 0420 	and.w	r4, r1, #32
 8009f70:	f001 0110 	and.w	r1, r1, #16
 8009f74:	f04f 0e00 	mov.w	lr, #0
 8009f78:	9105      	str	r1, [sp, #20]
 8009f7a:	9406      	str	r4, [sp, #24]
 8009f7c:	4962      	ldr	r1, [pc, #392]	; (800a108 <D48_GENERIC+0x1c8>)
 8009f7e:	e0a0      	b.n	800a0c2 <D48_GENERIC+0x182>
 8009f80:	eb00 0608 	add.w	r6, r0, r8
 8009f84:	f810 a008 	ldrb.w	sl, [r0, r8]
 8009f88:	f810 9005 	ldrb.w	r9, [r0, r5]
 8009f8c:	5df4      	ldrb	r4, [r6, r7]
 8009f8e:	443e      	add	r6, r7
 8009f90:	f890 b000 	ldrb.w	fp, [r0]
 8009f94:	0420      	lsls	r0, r4, #16
 8009f96:	eb06 0408 	add.w	r4, r6, r8
 8009f9a:	f816 6008 	ldrb.w	r6, [r6, r8]
 8009f9e:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8009fa2:	f814 8007 	ldrb.w	r8, [r4, r7]
 8009fa6:	4427      	add	r7, r4
 8009fa8:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8009fac:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8009fb0:	eb0a 040b 	add.w	r4, sl, fp
 8009fb4:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8009fb8:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8009fbc:	b2f7      	uxtb	r7, r6
 8009fbe:	b2e6      	uxtb	r6, r4
 8009fc0:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8009fc4:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8009fc8:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8009fcc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009fd0:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8009fd4:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8009fd8:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8009fdc:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8009fe0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8009fe4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8009fe8:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8009fec:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009ff0:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8009ff4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009ff8:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8009ffc:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a000:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a004:	9d00      	ldr	r5, [sp, #0]
 800a006:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a00a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a00e:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800a012:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a016:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800a01a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800a01e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a022:	4c3a      	ldr	r4, [pc, #232]	; (800a10c <D48_GENERIC+0x1cc>)
 800a024:	fb26 5a04 	smlad	sl, r6, r4, r5
 800a028:	4c39      	ldr	r4, [pc, #228]	; (800a110 <D48_GENERIC+0x1d0>)
 800a02a:	fb29 aa04 	smlad	sl, r9, r4, sl
 800a02e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a032:	fb27 aa04 	smlad	sl, r7, r4, sl
 800a036:	4c37      	ldr	r4, [pc, #220]	; (800a114 <D48_GENERIC+0x1d4>)
 800a038:	fb26 3304 	smlad	r3, r6, r4, r3
 800a03c:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800a040:	fb29 3304 	smlad	r3, r9, r4, r3
 800a044:	4c34      	ldr	r4, [pc, #208]	; (800a118 <D48_GENERIC+0x1d8>)
 800a046:	fb27 3304 	smlad	r3, r7, r4, r3
 800a04a:	2501      	movs	r5, #1
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	fb26 f605 	smuad	r6, r6, r5
 800a052:	4b32      	ldr	r3, [pc, #200]	; (800a11c <D48_GENERIC+0x1dc>)
 800a054:	fb29 6903 	smlad	r9, r9, r3, r6
 800a058:	4b31      	ldr	r3, [pc, #196]	; (800a120 <D48_GENERIC+0x1e0>)
 800a05a:	fb27 9303 	smlad	r3, r7, r3, r9
 800a05e:	9c05      	ldr	r4, [sp, #20]
 800a060:	eb0e 0805 	add.w	r8, lr, r5
 800a064:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800a068:	b19c      	cbz	r4, 800a092 <D48_GENERIC+0x152>
 800a06a:	9c01      	ldr	r4, [sp, #4]
 800a06c:	9d02      	ldr	r5, [sp, #8]
 800a06e:	4454      	add	r4, sl
 800a070:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800a074:	f8cd a008 	str.w	sl, [sp, #8]
 800a078:	1b64      	subs	r4, r4, r5
 800a07a:	fba4 ab09 	umull	sl, fp, r4, r9
 800a07e:	17e7      	asrs	r7, r4, #31
 800a080:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800a084:	fb09 bb07 	mla	fp, r9, r7, fp
 800a088:	f14b 0500 	adc.w	r5, fp, #0
 800a08c:	006c      	lsls	r4, r5, #1
 800a08e:	46a2      	mov	sl, r4
 800a090:	9401      	str	r4, [sp, #4]
 800a092:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a094:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800a098:	9d03      	ldr	r5, [sp, #12]
 800a09a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a09e:	fb0e f606 	mul.w	r6, lr, r6
 800a0a2:	fa1f fe88 	uxth.w	lr, r8
 800a0a6:	f04f 0800 	mov.w	r8, #0
 800a0aa:	fbc5 780a 	smlal	r7, r8, r5, sl
 800a0ae:	4645      	mov	r5, r8
 800a0b0:	10ac      	asrs	r4, r5, #2
 800a0b2:	9d04      	ldr	r5, [sp, #16]
 800a0b4:	f304 040f 	ssat	r4, #16, r4
 800a0b8:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800a0bc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a0be:	4574      	cmp	r4, lr
 800a0c0:	d912      	bls.n	800a0e8 <D48_GENERIC+0x1a8>
 800a0c2:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a0c4:	b2e5      	uxtb	r5, r4
 800a0c6:	2c01      	cmp	r4, #1
 800a0c8:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800a0cc:	f1c5 0700 	rsb	r7, r5, #0
 800a0d0:	f47f af56 	bne.w	8009f80 <D48_GENERIC+0x40>
 800a0d4:	9d06      	ldr	r5, [sp, #24]
 800a0d6:	e9d0 4600 	ldrd	r4, r6, [r0]
 800a0da:	3006      	adds	r0, #6
 800a0dc:	2d00      	cmp	r5, #0
 800a0de:	f43f af6b 	beq.w	8009fb8 <D48_GENERIC+0x78>
 800a0e2:	ba64      	rev16	r4, r4
 800a0e4:	ba76      	rev16	r6, r6
 800a0e6:	e767      	b.n	8009fb8 <D48_GENERIC+0x78>
 800a0e8:	6093      	str	r3, [r2, #8]
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	9b00      	ldr	r3, [sp, #0]
 800a0ee:	f8c2 c01c 	str.w	ip, [r2, #28]
 800a0f2:	60d3      	str	r3, [r2, #12]
 800a0f4:	9b01      	ldr	r3, [sp, #4]
 800a0f6:	6113      	str	r3, [r2, #16]
 800a0f8:	9b02      	ldr	r3, [sp, #8]
 800a0fa:	6153      	str	r3, [r2, #20]
 800a0fc:	9b07      	ldr	r3, [sp, #28]
 800a0fe:	6193      	str	r3, [r2, #24]
 800a100:	b009      	add	sp, #36	; 0x24
 800a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	bf00      	nop
 800a108:	24000000 	.word	0x24000000
 800a10c:	000f000a 	.word	0x000f000a
 800a110:	00060003 	.word	0x00060003
 800a114:	00150019 	.word	0x00150019
 800a118:	00190015 	.word	0x00190015
 800a11c:	00030006 	.word	0x00030006
 800a120:	000a000f 	.word	0x000a000f

0800a124 <D64_GENERIC>:
 800a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a128:	6913      	ldr	r3, [r2, #16]
 800a12a:	b089      	sub	sp, #36	; 0x24
 800a12c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	6953      	ldr	r3, [r2, #20]
 800a132:	9105      	str	r1, [sp, #20]
 800a134:	9303      	str	r3, [sp, #12]
 800a136:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800a138:	6993      	ldr	r3, [r2, #24]
 800a13a:	69d4      	ldr	r4, [r2, #28]
 800a13c:	9307      	str	r3, [sp, #28]
 800a13e:	9504      	str	r5, [sp, #16]
 800a140:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800a144:	2900      	cmp	r1, #0
 800a146:	f000 80e8 	beq.w	800a31a <D64_GENERIC+0x1f6>
 800a14a:	6a11      	ldr	r1, [r2, #32]
 800a14c:	2500      	movs	r5, #0
 800a14e:	46b3      	mov	fp, r6
 800a150:	9302      	str	r3, [sp, #8]
 800a152:	9106      	str	r1, [sp, #24]
 800a154:	4978      	ldr	r1, [pc, #480]	; (800a338 <D64_GENERIC+0x214>)
 800a156:	e0cc      	b.n	800a2f2 <D64_GENERIC+0x1ce>
 800a158:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800a15c:	f1ce 0c00 	rsb	ip, lr, #0
 800a160:	f890 9000 	ldrb.w	r9, [r0]
 800a164:	eb00 0708 	add.w	r7, r0, r8
 800a168:	f810 6008 	ldrb.w	r6, [r0, r8]
 800a16c:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800a170:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a174:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800a178:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800a17c:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800a180:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800a184:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a188:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800a18c:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800a190:	0400      	lsls	r0, r0, #16
 800a192:	4467      	add	r7, ip
 800a194:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800a198:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800a19c:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800a1a0:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800a1a4:	444e      	add	r6, r9
 800a1a6:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800a1aa:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800a1ae:	44c2      	add	sl, r8
 800a1b0:	b2f7      	uxtb	r7, r6
 800a1b2:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a1b6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800a1ba:	0e36      	lsrs	r6, r6, #24
 800a1bc:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a1c0:	fa5f fc8a 	uxtb.w	ip, sl
 800a1c4:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800a1c8:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800a1cc:	443c      	add	r4, r7
 800a1ce:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800a1d2:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a1d6:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800a1da:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800a1de:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a1e2:	4b56      	ldr	r3, [pc, #344]	; (800a33c <D64_GENERIC+0x218>)
 800a1e4:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800a1e8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a1ec:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800a1f0:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800a1f4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a1f8:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800a1fc:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800a200:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a204:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a208:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a20c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a210:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800a214:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a218:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800a21c:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800a220:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800a224:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a228:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800a22c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a230:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800a234:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800a238:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800a23c:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800a240:	fb28 b903 	smlad	r9, r8, r3, fp
 800a244:	4b3e      	ldr	r3, [pc, #248]	; (800a340 <D64_GENERIC+0x21c>)
 800a246:	fb26 9903 	smlad	r9, r6, r3, r9
 800a24a:	4b3e      	ldr	r3, [pc, #248]	; (800a344 <D64_GENERIC+0x220>)
 800a24c:	fb2c 9703 	smlad	r7, ip, r3, r9
 800a250:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800a254:	fb2a 7909 	smlad	r9, sl, r9, r7
 800a258:	4f3b      	ldr	r7, [pc, #236]	; (800a348 <D64_GENERIC+0x224>)
 800a25a:	9b02      	ldr	r3, [sp, #8]
 800a25c:	fb28 3307 	smlad	r3, r8, r7, r3
 800a260:	fb2a 3317 	smladx	r3, sl, r7, r3
 800a264:	4f39      	ldr	r7, [pc, #228]	; (800a34c <D64_GENERIC+0x228>)
 800a266:	fb26 3307 	smlad	r3, r6, r7, r3
 800a26a:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800a26e:	f04f 0e01 	mov.w	lr, #1
 800a272:	fb28 f80e 	smuad	r8, r8, lr
 800a276:	4b36      	ldr	r3, [pc, #216]	; (800a350 <D64_GENERIC+0x22c>)
 800a278:	fb26 8603 	smlad	r6, r6, r3, r8
 800a27c:	4b35      	ldr	r3, [pc, #212]	; (800a354 <D64_GENERIC+0x230>)
 800a27e:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800a282:	4b35      	ldr	r3, [pc, #212]	; (800a358 <D64_GENERIC+0x234>)
 800a284:	fb2a c303 	smlad	r3, sl, r3, ip
 800a288:	9f06      	ldr	r7, [sp, #24]
 800a28a:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800a28e:	9302      	str	r3, [sp, #8]
 800a290:	b1cf      	cbz	r7, 800a2c6 <D64_GENERIC+0x1a2>
 800a292:	9b00      	ldr	r3, [sp, #0]
 800a294:	444b      	add	r3, r9
 800a296:	461e      	mov	r6, r3
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	f8cd 900c 	str.w	r9, [sp, #12]
 800a29e:	1af6      	subs	r6, r6, r3
 800a2a0:	46b0      	mov	r8, r6
 800a2a2:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800a2a6:	e9cd 8900 	strd	r8, r9, [sp]
 800a2aa:	fba6 8907 	umull	r8, r9, r6, r7
 800a2ae:	9e01      	ldr	r6, [sp, #4]
 800a2b0:	fb07 9306 	mla	r3, r7, r6, r9
 800a2b4:	4646      	mov	r6, r8
 800a2b6:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800a2ba:	f143 0700 	adc.w	r7, r3, #0
 800a2be:	fa07 f30e 	lsl.w	r3, r7, lr
 800a2c2:	4699      	mov	r9, r3
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800a2ca:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a2d4:	2700      	movs	r7, #0
 800a2d6:	fb05 fc0c 	mul.w	ip, r5, ip
 800a2da:	3501      	adds	r5, #1
 800a2dc:	fbc3 6709 	smlal	r6, r7, r3, r9
 800a2e0:	9b05      	ldr	r3, [sp, #20]
 800a2e2:	10be      	asrs	r6, r7, #2
 800a2e4:	f306 060f 	ssat	r6, #16, r6
 800a2e8:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800a2ec:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a2ee:	42ae      	cmp	r6, r5
 800a2f0:	dd11      	ble.n	800a316 <D64_GENERIC+0x1f2>
 800a2f2:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800a2f6:	f1be 0f01 	cmp.w	lr, #1
 800a2fa:	f47f af2d 	bne.w	800a158 <D64_GENERIC+0x34>
 800a2fe:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800a300:	f100 0c08 	add.w	ip, r0, #8
 800a304:	06bb      	lsls	r3, r7, #26
 800a306:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800a30a:	d513      	bpl.n	800a334 <D64_GENERIC+0x210>
 800a30c:	ba76      	rev16	r6, r6
 800a30e:	fa9a fa9a 	rev16.w	sl, sl
 800a312:	4660      	mov	r0, ip
 800a314:	e74c      	b.n	800a1b0 <D64_GENERIC+0x8c>
 800a316:	465e      	mov	r6, fp
 800a318:	9b02      	ldr	r3, [sp, #8]
 800a31a:	6093      	str	r3, [r2, #8]
 800a31c:	2000      	movs	r0, #0
 800a31e:	9b00      	ldr	r3, [sp, #0]
 800a320:	60d6      	str	r6, [r2, #12]
 800a322:	6113      	str	r3, [r2, #16]
 800a324:	9b03      	ldr	r3, [sp, #12]
 800a326:	61d4      	str	r4, [r2, #28]
 800a328:	6153      	str	r3, [r2, #20]
 800a32a:	9b07      	ldr	r3, [sp, #28]
 800a32c:	6193      	str	r3, [r2, #24]
 800a32e:	b009      	add	sp, #36	; 0x24
 800a330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a334:	4660      	mov	r0, ip
 800a336:	e73b      	b.n	800a1b0 <D64_GENERIC+0x8c>
 800a338:	24000000 	.word	0x24000000
 800a33c:	001c0015 	.word	0x001c0015
 800a340:	000f000a 	.word	0x000f000a
 800a344:	00060003 	.word	0x00060003
 800a348:	0024002a 	.word	0x0024002a
 800a34c:	002e0030 	.word	0x002e0030
 800a350:	00030006 	.word	0x00030006
 800a354:	000a000f 	.word	0x000a000f
 800a358:	0015001c 	.word	0x0015001c

0800a35c <D80_GENERIC>:
 800a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	b08b      	sub	sp, #44	; 0x2c
 800a362:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a364:	9107      	str	r1, [sp, #28]
 800a366:	6911      	ldr	r1, [r2, #16]
 800a368:	9104      	str	r1, [sp, #16]
 800a36a:	6951      	ldr	r1, [r2, #20]
 800a36c:	9105      	str	r1, [sp, #20]
 800a36e:	6991      	ldr	r1, [r2, #24]
 800a370:	9109      	str	r1, [sp, #36]	; 0x24
 800a372:	69d1      	ldr	r1, [r2, #28]
 800a374:	9102      	str	r1, [sp, #8]
 800a376:	6891      	ldr	r1, [r2, #8]
 800a378:	9103      	str	r1, [sp, #12]
 800a37a:	68d1      	ldr	r1, [r2, #12]
 800a37c:	9101      	str	r1, [sp, #4]
 800a37e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a380:	9106      	str	r1, [sp, #24]
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 810b 	beq.w	800a59e <D80_GENERIC+0x242>
 800a388:	6a13      	ldr	r3, [r2, #32]
 800a38a:	f04f 0800 	mov.w	r8, #0
 800a38e:	f8df c260 	ldr.w	ip, [pc, #608]	; 800a5f0 <D80_GENERIC+0x294>
 800a392:	9308      	str	r3, [sp, #32]
 800a394:	9200      	str	r2, [sp, #0]
 800a396:	e0ee      	b.n	800a576 <D80_GENERIC+0x21a>
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	f890 e000 	ldrb.w	lr, [r0]
 800a39e:	b219      	sxth	r1, r3
 800a3a0:	425c      	negs	r4, r3
 800a3a2:	f810 9003 	ldrb.w	r9, [r0, r3]
 800a3a6:	004e      	lsls	r6, r1, #1
 800a3a8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800a3ac:	4431      	add	r1, r6
 800a3ae:	1843      	adds	r3, r0, r1
 800a3b0:	f810 b001 	ldrb.w	fp, [r0, r1]
 800a3b4:	1919      	adds	r1, r3, r4
 800a3b6:	5d1b      	ldrb	r3, [r3, r4]
 800a3b8:	1948      	adds	r0, r1, r5
 800a3ba:	f811 a005 	ldrb.w	sl, [r1, r5]
 800a3be:	041b      	lsls	r3, r3, #16
 800a3c0:	1907      	adds	r7, r0, r4
 800a3c2:	5d01      	ldrb	r1, [r0, r4]
 800a3c4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800a3c8:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800a3cc:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800a3d0:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800a3d4:	0409      	lsls	r1, r1, #16
 800a3d6:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800a3da:	eb0b 0905 	add.w	r9, fp, r5
 800a3de:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800a3e2:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800a3e6:	eb09 0b04 	add.w	fp, r9, r4
 800a3ea:	f819 4004 	ldrb.w	r4, [r9, r4]
 800a3ee:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a3f2:	4473      	add	r3, lr
 800a3f4:	eb0b 0006 	add.w	r0, fp, r6
 800a3f8:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800a3fc:	4439      	add	r1, r7
 800a3fe:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800a402:	b2df      	uxtb	r7, r3
 800a404:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800a408:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800a40c:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800a410:	fa5f fa81 	uxtb.w	sl, r1
 800a414:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800a418:	9c02      	ldr	r4, [sp, #8]
 800a41a:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800a41e:	441c      	add	r4, r3
 800a420:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800a424:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800a428:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800a42c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a430:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800a434:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a438:	b2ed      	uxtb	r5, r5
 800a43a:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800a43e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a442:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800a446:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a44a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800a44e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a452:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800a456:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a45a:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800a45e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800a462:	0e09      	lsrs	r1, r1, #24
 800a464:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800a468:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a46c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a470:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a474:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a478:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a47c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a480:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a484:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a488:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800a48c:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a490:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a494:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800a498:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800a49c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a4a0:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800a4a4:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800a4a8:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800a4ac:	9202      	str	r2, [sp, #8]
 800a4ae:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800a4b2:	4a43      	ldr	r2, [pc, #268]	; (800a5c0 <D80_GENERIC+0x264>)
 800a4b4:	9f01      	ldr	r7, [sp, #4]
 800a4b6:	fb23 7a02 	smlad	sl, r3, r2, r7
 800a4ba:	4a42      	ldr	r2, [pc, #264]	; (800a5c4 <D80_GENERIC+0x268>)
 800a4bc:	fb26 aa02 	smlad	sl, r6, r2, sl
 800a4c0:	4a41      	ldr	r2, [pc, #260]	; (800a5c8 <D80_GENERIC+0x26c>)
 800a4c2:	fb24 aa02 	smlad	sl, r4, r2, sl
 800a4c6:	4a41      	ldr	r2, [pc, #260]	; (800a5cc <D80_GENERIC+0x270>)
 800a4c8:	fb21 a702 	smlad	r7, r1, r2, sl
 800a4cc:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a4d0:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800a4d4:	4a3e      	ldr	r2, [pc, #248]	; (800a5d0 <D80_GENERIC+0x274>)
 800a4d6:	9f03      	ldr	r7, [sp, #12]
 800a4d8:	fb23 7e02 	smlad	lr, r3, r2, r7
 800a4dc:	4a3d      	ldr	r2, [pc, #244]	; (800a5d4 <D80_GENERIC+0x278>)
 800a4de:	fb26 ee02 	smlad	lr, r6, r2, lr
 800a4e2:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800a4e6:	fb24 e707 	smlad	r7, r4, r7, lr
 800a4ea:	4a3b      	ldr	r2, [pc, #236]	; (800a5d8 <D80_GENERIC+0x27c>)
 800a4ec:	fb21 7702 	smlad	r7, r1, r2, r7
 800a4f0:	4a3a      	ldr	r2, [pc, #232]	; (800a5dc <D80_GENERIC+0x280>)
 800a4f2:	fb25 7202 	smlad	r2, r5, r2, r7
 800a4f6:	f04f 0901 	mov.w	r9, #1
 800a4fa:	9201      	str	r2, [sp, #4]
 800a4fc:	fb23 f909 	smuad	r9, r3, r9
 800a500:	4b37      	ldr	r3, [pc, #220]	; (800a5e0 <D80_GENERIC+0x284>)
 800a502:	fb26 9603 	smlad	r6, r6, r3, r9
 800a506:	4f37      	ldr	r7, [pc, #220]	; (800a5e4 <D80_GENERIC+0x288>)
 800a508:	fb24 6407 	smlad	r4, r4, r7, r6
 800a50c:	4f36      	ldr	r7, [pc, #216]	; (800a5e8 <D80_GENERIC+0x28c>)
 800a50e:	fb21 4707 	smlad	r7, r1, r7, r4
 800a512:	4936      	ldr	r1, [pc, #216]	; (800a5ec <D80_GENERIC+0x290>)
 800a514:	fb25 7301 	smlad	r3, r5, r1, r7
 800a518:	9303      	str	r3, [sp, #12]
 800a51a:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800a51e:	9b08      	ldr	r3, [sp, #32]
 800a520:	b193      	cbz	r3, 800a548 <D80_GENERIC+0x1ec>
 800a522:	9a04      	ldr	r2, [sp, #16]
 800a524:	4452      	add	r2, sl
 800a526:	4614      	mov	r4, r2
 800a528:	9a05      	ldr	r2, [sp, #20]
 800a52a:	f8cd a014 	str.w	sl, [sp, #20]
 800a52e:	1aa4      	subs	r4, r4, r2
 800a530:	fba4 1203 	umull	r1, r2, r4, r3
 800a534:	17e7      	asrs	r7, r4, #31
 800a536:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800a53a:	fb03 2207 	mla	r2, r3, r7, r2
 800a53e:	f142 0500 	adc.w	r5, r2, #0
 800a542:	006b      	lsls	r3, r5, #1
 800a544:	469a      	mov	sl, r3
 800a546:	9304      	str	r3, [sp, #16]
 800a548:	9e00      	ldr	r6, [sp, #0]
 800a54a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800a54e:	9a06      	ldr	r2, [sp, #24]
 800a550:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a554:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800a556:	2500      	movs	r5, #0
 800a558:	fb08 f303 	mul.w	r3, r8, r3
 800a55c:	fbc2 450a 	smlal	r4, r5, r2, sl
 800a560:	9a07      	ldr	r2, [sp, #28]
 800a562:	f108 0801 	add.w	r8, r8, #1
 800a566:	10a9      	asrs	r1, r5, #2
 800a568:	f301 010f 	ssat	r1, #16, r1
 800a56c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a570:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800a572:	4543      	cmp	r3, r8
 800a574:	dd12      	ble.n	800a59c <D80_GENERIC+0x240>
 800a576:	9b00      	ldr	r3, [sp, #0]
 800a578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	f47f af0c 	bne.w	800a398 <D80_GENERIC+0x3c>
 800a580:	9b00      	ldr	r3, [sp, #0]
 800a582:	6885      	ldr	r5, [r0, #8]
 800a584:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800a586:	06b2      	lsls	r2, r6, #26
 800a588:	e9d0 3100 	ldrd	r3, r1, [r0]
 800a58c:	f100 000a 	add.w	r0, r0, #10
 800a590:	f57f af35 	bpl.w	800a3fe <D80_GENERIC+0xa2>
 800a594:	ba5b      	rev16	r3, r3
 800a596:	ba49      	rev16	r1, r1
 800a598:	ba6d      	rev16	r5, r5
 800a59a:	e730      	b.n	800a3fe <D80_GENERIC+0xa2>
 800a59c:	4632      	mov	r2, r6
 800a59e:	9b03      	ldr	r3, [sp, #12]
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	6093      	str	r3, [r2, #8]
 800a5a4:	9b01      	ldr	r3, [sp, #4]
 800a5a6:	60d3      	str	r3, [r2, #12]
 800a5a8:	9b02      	ldr	r3, [sp, #8]
 800a5aa:	61d3      	str	r3, [r2, #28]
 800a5ac:	9b04      	ldr	r3, [sp, #16]
 800a5ae:	6113      	str	r3, [r2, #16]
 800a5b0:	9b05      	ldr	r3, [sp, #20]
 800a5b2:	6153      	str	r3, [r2, #20]
 800a5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b6:	6193      	str	r3, [r2, #24]
 800a5b8:	b00b      	add	sp, #44	; 0x2c
 800a5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5be:	bf00      	nop
 800a5c0:	002d0024 	.word	0x002d0024
 800a5c4:	001c0015 	.word	0x001c0015
 800a5c8:	000f000a 	.word	0x000f000a
 800a5cc:	00060003 	.word	0x00060003
 800a5d0:	0037003f 	.word	0x0037003f
 800a5d4:	00450049 	.word	0x00450049
 800a5d8:	00490045 	.word	0x00490045
 800a5dc:	003f0037 	.word	0x003f0037
 800a5e0:	00030006 	.word	0x00030006
 800a5e4:	000a000f 	.word	0x000a000f
 800a5e8:	0015001c 	.word	0x0015001c
 800a5ec:	0024002d 	.word	0x0024002d
 800a5f0:	24000000 	.word	0x24000000

0800a5f4 <D128_GENERIC>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	b08d      	sub	sp, #52	; 0x34
 800a5fa:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a5fc:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800a600:	9109      	str	r1, [sp, #36]	; 0x24
 800a602:	6911      	ldr	r1, [r2, #16]
 800a604:	9201      	str	r2, [sp, #4]
 800a606:	9106      	str	r1, [sp, #24]
 800a608:	6951      	ldr	r1, [r2, #20]
 800a60a:	9107      	str	r1, [sp, #28]
 800a60c:	6991      	ldr	r1, [r2, #24]
 800a60e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a610:	6891      	ldr	r1, [r2, #8]
 800a612:	9103      	str	r1, [sp, #12]
 800a614:	68d1      	ldr	r1, [r2, #12]
 800a616:	9102      	str	r1, [sp, #8]
 800a618:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a61a:	9108      	str	r1, [sp, #32]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 8183 	beq.w	800a928 <D128_GENERIC+0x334>
 800a622:	2300      	movs	r3, #0
 800a624:	6a12      	ldr	r2, [r2, #32]
 800a626:	4681      	mov	r9, r0
 800a628:	920a      	str	r2, [sp, #40]	; 0x28
 800a62a:	e9cd a304 	strd	sl, r3, [sp, #16]
 800a62e:	e165      	b.n	800a8fc <D128_GENERIC+0x308>
 800a630:	b2d2      	uxtb	r2, r2
 800a632:	f899 b000 	ldrb.w	fp, [r9]
 800a636:	b213      	sxth	r3, r2
 800a638:	4255      	negs	r5, r2
 800a63a:	f819 0002 	ldrb.w	r0, [r9, r2]
 800a63e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a642:	009f      	lsls	r7, r3, #2
 800a644:	eb09 0402 	add.w	r4, r9, r2
 800a648:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800a64c:	f819 8002 	ldrb.w	r8, [r9, r2]
 800a650:	443b      	add	r3, r7
 800a652:	1962      	adds	r2, r4, r5
 800a654:	5d64      	ldrb	r4, [r4, r5]
 800a656:	eb02 0c03 	add.w	ip, r2, r3
 800a65a:	0424      	lsls	r4, r4, #16
 800a65c:	5cd3      	ldrb	r3, [r2, r3]
 800a65e:	eb0c 0e05 	add.w	lr, ip, r5
 800a662:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800a666:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800a66a:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800a66e:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800a672:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800a676:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800a67a:	eb0c 0e06 	add.w	lr, ip, r6
 800a67e:	f81c a006 	ldrb.w	sl, [ip, r6]
 800a682:	0412      	lsls	r2, r2, #16
 800a684:	445c      	add	r4, fp
 800a686:	eb0e 0c05 	add.w	ip, lr, r5
 800a68a:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800a68e:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800a692:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800a696:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800a69a:	041b      	lsls	r3, r3, #16
 800a69c:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800a6a0:	eb00 0b06 	add.w	fp, r0, r6
 800a6a4:	5d80      	ldrb	r0, [r0, r6]
 800a6a6:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800a6aa:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800a6ae:	eb0b 0a05 	add.w	sl, fp, r5
 800a6b2:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800a6b6:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800a6ba:	0436      	lsls	r6, r6, #16
 800a6bc:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800a6c0:	4442      	add	r2, r8
 800a6c2:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800a6c6:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800a6ca:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800a6ce:	44b9      	add	r9, r7
 800a6d0:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800a6d4:	4463      	add	r3, ip
 800a6d6:	eb06 0508 	add.w	r5, r6, r8
 800a6da:	b2e7      	uxtb	r7, r4
 800a6dc:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800a6e0:	499b      	ldr	r1, [pc, #620]	; (800a950 <D128_GENERIC+0x35c>)
 800a6e2:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800a6e6:	0e24      	lsrs	r4, r4, #24
 800a6e8:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800a6ec:	b2d7      	uxtb	r7, r2
 800a6ee:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800a6f2:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800a6f6:	9904      	ldr	r1, [sp, #16]
 800a6f8:	4461      	add	r1, ip
 800a6fa:	468c      	mov	ip, r1
 800a6fc:	4994      	ldr	r1, [pc, #592]	; (800a950 <D128_GENERIC+0x35c>)
 800a6fe:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800a702:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800a706:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800a70a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a70e:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800a712:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800a716:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800a71a:	0e12      	lsrs	r2, r2, #24
 800a71c:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800a720:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a724:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800a728:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a72c:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800a730:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a734:	b2da      	uxtb	r2, r3
 800a736:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a73a:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800a73e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a742:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a746:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800a74a:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800a74e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800a752:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800a756:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a75a:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800a75e:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800a762:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800a766:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a76a:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800a76e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a772:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800a776:	0e1b      	lsrs	r3, r3, #24
 800a778:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800a77c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a780:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800a784:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800a788:	b2eb      	uxtb	r3, r5
 800a78a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a78e:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800a792:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800a796:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a79a:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800a79e:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800a7a2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800a7a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a7aa:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a7ae:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800a7b2:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800a7b6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800a7ba:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800a7be:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800a7c2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a7c6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800a7ca:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a7ce:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800a7d2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800a7d6:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800a7da:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a7de:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800a7e2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a7e6:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800a7ea:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800a7ee:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800a7f2:	9104      	str	r1, [sp, #16]
 800a7f4:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800a7f8:	9902      	ldr	r1, [sp, #8]
 800a7fa:	4a56      	ldr	r2, [pc, #344]	; (800a954 <D128_GENERIC+0x360>)
 800a7fc:	fb2b 1202 	smlad	r2, fp, r2, r1
 800a800:	4955      	ldr	r1, [pc, #340]	; (800a958 <D128_GENERIC+0x364>)
 800a802:	fb28 2201 	smlad	r2, r8, r1, r2
 800a806:	4955      	ldr	r1, [pc, #340]	; (800a95c <D128_GENERIC+0x368>)
 800a808:	fb27 2201 	smlad	r2, r7, r1, r2
 800a80c:	4954      	ldr	r1, [pc, #336]	; (800a960 <D128_GENERIC+0x36c>)
 800a80e:	fb26 2201 	smlad	r2, r6, r1, r2
 800a812:	4954      	ldr	r1, [pc, #336]	; (800a964 <D128_GENERIC+0x370>)
 800a814:	fb24 2201 	smlad	r2, r4, r1, r2
 800a818:	4953      	ldr	r1, [pc, #332]	; (800a968 <D128_GENERIC+0x374>)
 800a81a:	fb20 2201 	smlad	r2, r0, r1, r2
 800a81e:	4953      	ldr	r1, [pc, #332]	; (800a96c <D128_GENERIC+0x378>)
 800a820:	fb23 2201 	smlad	r2, r3, r1, r2
 800a824:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800a828:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800a82c:	4950      	ldr	r1, [pc, #320]	; (800a970 <D128_GENERIC+0x37c>)
 800a82e:	9a03      	ldr	r2, [sp, #12]
 800a830:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800a834:	4a4f      	ldr	r2, [pc, #316]	; (800a974 <D128_GENERIC+0x380>)
 800a836:	fb28 ce02 	smlad	lr, r8, r2, ip
 800a83a:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a98c <D128_GENERIC+0x398>
 800a83e:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800a842:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800a990 <D128_GENERIC+0x39c>
 800a846:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800a84a:	f8df e148 	ldr.w	lr, [pc, #328]	; 800a994 <D128_GENERIC+0x3a0>
 800a84e:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800a852:	f8df c144 	ldr.w	ip, [pc, #324]	; 800a998 <D128_GENERIC+0x3a4>
 800a856:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800a85a:	f8df c140 	ldr.w	ip, [pc, #320]	; 800a99c <D128_GENERIC+0x3a8>
 800a85e:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800a862:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800a9a0 <D128_GENERIC+0x3ac>
 800a866:	fb25 c20e 	smlad	r2, r5, lr, ip
 800a86a:	f04f 0c01 	mov.w	ip, #1
 800a86e:	9202      	str	r2, [sp, #8]
 800a870:	fb2b fb0c 	smuad	fp, fp, ip
 800a874:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800a9a4 <D128_GENERIC+0x3b0>
 800a878:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800a87c:	f8df c128 	ldr.w	ip, [pc, #296]	; 800a9a8 <D128_GENERIC+0x3b4>
 800a880:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800a884:	4f3c      	ldr	r7, [pc, #240]	; (800a978 <D128_GENERIC+0x384>)
 800a886:	fb26 bb07 	smlad	fp, r6, r7, fp
 800a88a:	4f3c      	ldr	r7, [pc, #240]	; (800a97c <D128_GENERIC+0x388>)
 800a88c:	fb24 bb07 	smlad	fp, r4, r7, fp
 800a890:	4f3b      	ldr	r7, [pc, #236]	; (800a980 <D128_GENERIC+0x38c>)
 800a892:	fb20 bb07 	smlad	fp, r0, r7, fp
 800a896:	4f3b      	ldr	r7, [pc, #236]	; (800a984 <D128_GENERIC+0x390>)
 800a898:	fb23 bb07 	smlad	fp, r3, r7, fp
 800a89c:	4b3a      	ldr	r3, [pc, #232]	; (800a988 <D128_GENERIC+0x394>)
 800a89e:	fb25 b303 	smlad	r3, r5, r3, fp
 800a8a2:	9303      	str	r3, [sp, #12]
 800a8a4:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800a8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8aa:	b183      	cbz	r3, 800a8ce <D128_GENERIC+0x2da>
 800a8ac:	9a06      	ldr	r2, [sp, #24]
 800a8ae:	9907      	ldr	r1, [sp, #28]
 800a8b0:	4422      	add	r2, r4
 800a8b2:	9407      	str	r4, [sp, #28]
 800a8b4:	1a52      	subs	r2, r2, r1
 800a8b6:	fba2 0103 	umull	r0, r1, r2, r3
 800a8ba:	17d5      	asrs	r5, r2, #31
 800a8bc:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800a8c0:	fb03 1105 	mla	r1, r3, r5, r1
 800a8c4:	f141 0300 	adc.w	r3, r1, #0
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	461c      	mov	r4, r3
 800a8cc:	9306      	str	r3, [sp, #24]
 800a8ce:	9d01      	ldr	r5, [sp, #4]
 800a8d0:	01e4      	lsls	r4, r4, #7
 800a8d2:	9e05      	ldr	r6, [sp, #20]
 800a8d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8d8:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800a8da:	2300      	movs	r3, #0
 800a8dc:	9908      	ldr	r1, [sp, #32]
 800a8de:	fb06 f000 	mul.w	r0, r6, r0
 800a8e2:	3601      	adds	r6, #1
 800a8e4:	fbc1 2304 	smlal	r2, r3, r1, r4
 800a8e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ea:	109b      	asrs	r3, r3, #2
 800a8ec:	9605      	str	r6, [sp, #20]
 800a8ee:	f303 030f 	ssat	r3, #16, r3
 800a8f2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800a8f6:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800a8f8:	42b3      	cmp	r3, r6
 800a8fa:	dd13      	ble.n	800a924 <D128_GENERIC+0x330>
 800a8fc:	9b01      	ldr	r3, [sp, #4]
 800a8fe:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a900:	2a01      	cmp	r2, #1
 800a902:	f47f ae95 	bne.w	800a630 <D128_GENERIC+0x3c>
 800a906:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a908:	f109 0610 	add.w	r6, r9, #16
 800a90c:	0681      	lsls	r1, r0, #26
 800a90e:	e9d9 4200 	ldrd	r4, r2, [r9]
 800a912:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800a916:	d518      	bpl.n	800a94a <D128_GENERIC+0x356>
 800a918:	ba64      	rev16	r4, r4
 800a91a:	ba52      	rev16	r2, r2
 800a91c:	ba5b      	rev16	r3, r3
 800a91e:	ba6d      	rev16	r5, r5
 800a920:	46b1      	mov	r9, r6
 800a922:	e6da      	b.n	800a6da <D128_GENERIC+0xe6>
 800a924:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a928:	9b01      	ldr	r3, [sp, #4]
 800a92a:	2000      	movs	r0, #0
 800a92c:	9903      	ldr	r1, [sp, #12]
 800a92e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a930:	6099      	str	r1, [r3, #8]
 800a932:	9902      	ldr	r1, [sp, #8]
 800a934:	f8c3 a01c 	str.w	sl, [r3, #28]
 800a938:	60d9      	str	r1, [r3, #12]
 800a93a:	9906      	ldr	r1, [sp, #24]
 800a93c:	619a      	str	r2, [r3, #24]
 800a93e:	6119      	str	r1, [r3, #16]
 800a940:	9907      	ldr	r1, [sp, #28]
 800a942:	6159      	str	r1, [r3, #20]
 800a944:	b00d      	add	sp, #52	; 0x34
 800a946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94a:	46b1      	mov	r9, r6
 800a94c:	e6c5      	b.n	800a6da <D128_GENERIC+0xe6>
 800a94e:	bf00      	nop
 800a950:	24000000 	.word	0x24000000
 800a954:	00780069 	.word	0x00780069
 800a958:	005b004e 	.word	0x005b004e
 800a95c:	00420037 	.word	0x00420037
 800a960:	002d0024 	.word	0x002d0024
 800a964:	001c0015 	.word	0x001c0015
 800a968:	000f000a 	.word	0x000f000a
 800a96c:	00060003 	.word	0x00060003
 800a970:	00880096 	.word	0x00880096
 800a974:	00a200ac 	.word	0x00a200ac
 800a978:	0015001c 	.word	0x0015001c
 800a97c:	0024002d 	.word	0x0024002d
 800a980:	00370042 	.word	0x00370042
 800a984:	004e005b 	.word	0x004e005b
 800a988:	00690078 	.word	0x00690078
 800a98c:	00b400ba 	.word	0x00b400ba
 800a990:	00be00c0 	.word	0x00be00c0
 800a994:	00c000be 	.word	0x00c000be
 800a998:	00ba00b4 	.word	0x00ba00b4
 800a99c:	00ac00a2 	.word	0x00ac00a2
 800a9a0:	00960088 	.word	0x00960088
 800a9a4:	00030006 	.word	0x00030006
 800a9a8:	000a000f 	.word	0x000a000f

0800a9ac <D16_1CH_HTONS_VOL_HP>:
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	6993      	ldr	r3, [r2, #24]
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	4682      	mov	sl, r0
 800a9b6:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800a9b8:	9304      	str	r3, [sp, #16]
 800a9ba:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800a9be:	69d3      	ldr	r3, [r2, #28]
 800a9c0:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800a9c4:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800a9c8:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800a9cc:	9403      	str	r4, [sp, #12]
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d054      	beq.n	800aa7c <D16_1CH_HTONS_VOL_HP+0xd0>
 800a9d2:	f1a1 0902 	sub.w	r9, r1, #2
 800a9d6:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800a9da:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800aa88 <D16_1CH_HTONS_VOL_HP+0xdc>
 800a9de:	4650      	mov	r0, sl
 800a9e0:	9101      	str	r1, [sp, #4]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	f8cd b008 	str.w	fp, [sp, #8]
 800a9e8:	9205      	str	r2, [sp, #20]
 800a9ea:	f850 3b02 	ldr.w	r3, [r0], #2
 800a9ee:	ba5b      	rev16	r3, r3
 800a9f0:	b2dc      	uxtb	r4, r3
 800a9f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a9f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a9fa:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800a9fe:	4419      	add	r1, r3
 800aa00:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800aa04:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800aa08:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800aa0c:	0aa1      	lsrs	r1, r4, #10
 800aa0e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800aa12:	4a1b      	ldr	r2, [pc, #108]	; (800aa80 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800aa14:	fb23 5402 	smlad	r4, r3, r2, r5
 800aa18:	4a1a      	ldr	r2, [pc, #104]	; (800aa84 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800aa1a:	fb23 f502 	smuad	r5, r3, r2
 800aa1e:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800aa22:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800aa26:	f04f 0b00 	mov.w	fp, #0
 800aa2a:	19a2      	adds	r2, r4, r6
 800aa2c:	eba2 020c 	sub.w	r2, r2, ip
 800aa30:	46a4      	mov	ip, r4
 800aa32:	17d7      	asrs	r7, r2, #31
 800aa34:	fba2 230e 	umull	r2, r3, r2, lr
 800aa38:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800aa3c:	fb0e 3307 	mla	r3, lr, r7, r3
 800aa40:	f143 0700 	adc.w	r7, r3, #0
 800aa44:	9b02      	ldr	r3, [sp, #8]
 800aa46:	047a      	lsls	r2, r7, #17
 800aa48:	007e      	lsls	r6, r7, #1
 800aa4a:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800aa4e:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800aa52:	f303 030f 	ssat	r3, #16, r3
 800aa56:	f829 3f02 	strh.w	r3, [r9, #2]!
 800aa5a:	9b01      	ldr	r3, [sp, #4]
 800aa5c:	4298      	cmp	r0, r3
 800aa5e:	d1c4      	bne.n	800a9ea <D16_1CH_HTONS_VOL_HP+0x3e>
 800aa60:	460b      	mov	r3, r1
 800aa62:	9a05      	ldr	r2, [sp, #20]
 800aa64:	2000      	movs	r0, #0
 800aa66:	9903      	ldr	r1, [sp, #12]
 800aa68:	61d3      	str	r3, [r2, #28]
 800aa6a:	9b04      	ldr	r3, [sp, #16]
 800aa6c:	6095      	str	r5, [r2, #8]
 800aa6e:	60d1      	str	r1, [r2, #12]
 800aa70:	6193      	str	r3, [r2, #24]
 800aa72:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800aa76:	b007      	add	sp, #28
 800aa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa7c:	4664      	mov	r4, ip
 800aa7e:	e7f1      	b.n	800aa64 <D16_1CH_HTONS_VOL_HP+0xb8>
 800aa80:	00030001 	.word	0x00030001
 800aa84:	00010003 	.word	0x00010003
 800aa88:	24000000 	.word	0x24000000

0800aa8c <D24_1CH_HTONS_VOL_HP>:
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800aa92:	b089      	sub	sp, #36	; 0x24
 800aa94:	6993      	ldr	r3, [r2, #24]
 800aa96:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aa98:	9604      	str	r6, [sp, #16]
 800aa9a:	6a16      	ldr	r6, [r2, #32]
 800aa9c:	9306      	str	r3, [sp, #24]
 800aa9e:	9505      	str	r5, [sp, #20]
 800aaa0:	69d3      	ldr	r3, [r2, #28]
 800aaa2:	9600      	str	r6, [sp, #0]
 800aaa4:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800aaa8:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800aaac:	2d00      	cmp	r5, #0
 800aaae:	f000 8083 	beq.w	800abb8 <D24_1CH_HTONS_VOL_HP+0x12c>
 800aab2:	9207      	str	r2, [sp, #28]
 800aab4:	2600      	movs	r6, #0
 800aab6:	4622      	mov	r2, r4
 800aab8:	f1a1 0b02 	sub.w	fp, r1, #2
 800aabc:	4f3f      	ldr	r7, [pc, #252]	; (800abbc <D24_1CH_HTONS_VOL_HP+0x130>)
 800aabe:	461d      	mov	r5, r3
 800aac0:	f8cd a00c 	str.w	sl, [sp, #12]
 800aac4:	9c00      	ldr	r4, [sp, #0]
 800aac6:	e056      	b.n	800ab76 <D24_1CH_HTONS_VOL_HP+0xea>
 800aac8:	7841      	ldrb	r1, [r0, #1]
 800aaca:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800aace:	3002      	adds	r0, #2
 800aad0:	4488      	add	r8, r1
 800aad2:	fa5f f388 	uxtb.w	r3, r8
 800aad6:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800aada:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800aade:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800aae2:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800aae6:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800aaea:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800aaee:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800aaf2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800aaf6:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800aafa:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800aafe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ab02:	492f      	ldr	r1, [pc, #188]	; (800abc0 <D24_1CH_HTONS_VOL_HP+0x134>)
 800ab04:	fb23 e901 	smlad	r9, r3, r1, lr
 800ab08:	492e      	ldr	r1, [pc, #184]	; (800abc4 <D24_1CH_HTONS_VOL_HP+0x138>)
 800ab0a:	fb23 ce01 	smlad	lr, r3, r1, ip
 800ab0e:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800ab12:	2101      	movs	r1, #1
 800ab14:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800ab18:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800ab1c:	fb23 f301 	smuad	r3, r3, r1
 800ab20:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800ab24:	eb08 0c03 	add.w	ip, r8, r3
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	f04f 0a00 	mov.w	sl, #0
 800ab2e:	440a      	add	r2, r1
 800ab30:	3601      	adds	r6, #1
 800ab32:	9103      	str	r1, [sp, #12]
 800ab34:	1ad2      	subs	r2, r2, r3
 800ab36:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ab3a:	fba2 2304 	umull	r2, r3, r2, r4
 800ab3e:	e9cd 2300 	strd	r2, r3, [sp]
 800ab42:	fb04 3309 	mla	r3, r4, r9, r3
 800ab46:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800ab4a:	9301      	str	r3, [sp, #4]
 800ab4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab50:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ab54:	f143 0300 	adc.w	r3, r3, #0
 800ab58:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800ab5c:	005a      	lsls	r2, r3, #1
 800ab5e:	9b04      	ldr	r3, [sp, #16]
 800ab60:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800ab64:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800ab68:	f303 030f 	ssat	r3, #16, r3
 800ab6c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800ab70:	9b05      	ldr	r3, [sp, #20]
 800ab72:	429e      	cmp	r6, r3
 800ab74:	d010      	beq.n	800ab98 <D24_1CH_HTONS_VOL_HP+0x10c>
 800ab76:	f890 9003 	ldrb.w	r9, [r0, #3]
 800ab7a:	f016 0f01 	tst.w	r6, #1
 800ab7e:	7801      	ldrb	r1, [r0, #0]
 800ab80:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800ab84:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800ab88:	d09e      	beq.n	800aac8 <D24_1CH_HTONS_VOL_HP+0x3c>
 800ab8a:	f890 8002 	ldrb.w	r8, [r0, #2]
 800ab8e:	3004      	adds	r0, #4
 800ab90:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800ab94:	4488      	add	r8, r1
 800ab96:	e79c      	b.n	800aad2 <D24_1CH_HTONS_VOL_HP+0x46>
 800ab98:	4614      	mov	r4, r2
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	9a07      	ldr	r2, [sp, #28]
 800ab9e:	2000      	movs	r0, #0
 800aba0:	61d3      	str	r3, [r2, #28]
 800aba2:	9b06      	ldr	r3, [sp, #24]
 800aba4:	f8c2 c008 	str.w	ip, [r2, #8]
 800aba8:	f8c2 e00c 	str.w	lr, [r2, #12]
 800abac:	6193      	str	r3, [r2, #24]
 800abae:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800abb2:	b009      	add	sp, #36	; 0x24
 800abb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb8:	4651      	mov	r1, sl
 800abba:	e7f0      	b.n	800ab9e <D24_1CH_HTONS_VOL_HP+0x112>
 800abbc:	24000000 	.word	0x24000000
 800abc0:	00030001 	.word	0x00030001
 800abc4:	00060007 	.word	0x00060007

0800abc8 <D32_1CH_HTONS_VOL_HP>:
 800abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abcc:	6993      	ldr	r3, [r2, #24]
 800abce:	b087      	sub	sp, #28
 800abd0:	4683      	mov	fp, r0
 800abd2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800abd4:	9304      	str	r3, [sp, #16]
 800abd6:	69d5      	ldr	r5, [r2, #28]
 800abd8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800abda:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800abde:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800abe2:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d077      	beq.n	800acda <D32_1CH_HTONS_VOL_HP+0x112>
 800abea:	460f      	mov	r7, r1
 800abec:	46f1      	mov	r9, lr
 800abee:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800abf2:	f8cd 8000 	str.w	r8, [sp]
 800abf6:	4e3a      	ldr	r6, [pc, #232]	; (800ace0 <D32_1CH_HTONS_VOL_HP+0x118>)
 800abf8:	469e      	mov	lr, r3
 800abfa:	46a0      	mov	r8, r4
 800abfc:	9103      	str	r1, [sp, #12]
 800abfe:	9205      	str	r2, [sp, #20]
 800ac00:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ac04:	ba64      	rev16	r4, r4
 800ac06:	b2e0      	uxtb	r0, r4
 800ac08:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800ac0c:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800ac10:	0e24      	lsrs	r4, r4, #24
 800ac12:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800ac16:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ac1a:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800ac1e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800ac22:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800ac26:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800ac2a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ac2e:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800ac32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac36:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ac3a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ac3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac42:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800ac46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800ac4a:	4826      	ldr	r0, [pc, #152]	; (800ace4 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800ac4c:	fb23 c400 	smlad	r4, r3, r0, ip
 800ac50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ac54:	fb21 4402 	smlad	r4, r1, r2, r4
 800ac58:	4823      	ldr	r0, [pc, #140]	; (800ace8 <D32_1CH_HTONS_VOL_HP+0x120>)
 800ac5a:	fb23 ec00 	smlad	ip, r3, r0, lr
 800ac5e:	4823      	ldr	r0, [pc, #140]	; (800acec <D32_1CH_HTONS_VOL_HP+0x124>)
 800ac60:	fb21 cc00 	smlad	ip, r1, r0, ip
 800ac64:	2201      	movs	r2, #1
 800ac66:	fb23 f302 	smuad	r3, r3, r2
 800ac6a:	4821      	ldr	r0, [pc, #132]	; (800acf0 <D32_1CH_HTONS_VOL_HP+0x128>)
 800ac6c:	fb21 3e00 	smlad	lr, r1, r0, r3
 800ac70:	9b00      	ldr	r3, [sp, #0]
 800ac72:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800ac76:	4423      	add	r3, r4
 800ac78:	eba3 0209 	sub.w	r2, r3, r9
 800ac7c:	46a1      	mov	r9, r4
 800ac7e:	17d1      	asrs	r1, r2, #31
 800ac80:	fba2 230a 	umull	r2, r3, r2, sl
 800ac84:	e9cd 2300 	strd	r2, r3, [sp]
 800ac88:	fb0a 3301 	mla	r3, sl, r1, r3
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac92:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ac96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac9a:	f143 0300 	adc.w	r3, r3, #0
 800ac9e:	0399      	lsls	r1, r3, #14
 800aca0:	005b      	lsls	r3, r3, #1
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	2300      	movs	r3, #0
 800aca6:	fbc8 2301 	smlal	r2, r3, r8, r1
 800acaa:	109b      	asrs	r3, r3, #2
 800acac:	f303 030f 	ssat	r3, #16, r3
 800acb0:	f827 3b02 	strh.w	r3, [r7], #2
 800acb4:	9b03      	ldr	r3, [sp, #12]
 800acb6:	429f      	cmp	r7, r3
 800acb8:	d1a2      	bne.n	800ac00 <D32_1CH_HTONS_VOL_HP+0x38>
 800acba:	4673      	mov	r3, lr
 800acbc:	f8dd 8000 	ldr.w	r8, [sp]
 800acc0:	9a05      	ldr	r2, [sp, #20]
 800acc2:	6093      	str	r3, [r2, #8]
 800acc4:	2000      	movs	r0, #0
 800acc6:	9b04      	ldr	r3, [sp, #16]
 800acc8:	f8c2 c00c 	str.w	ip, [r2, #12]
 800accc:	61d5      	str	r5, [r2, #28]
 800acce:	6193      	str	r3, [r2, #24]
 800acd0:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800acd4:	b007      	add	sp, #28
 800acd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acda:	4674      	mov	r4, lr
 800acdc:	e7f1      	b.n	800acc2 <D32_1CH_HTONS_VOL_HP+0xfa>
 800acde:	bf00      	nop
 800ace0:	24000000 	.word	0x24000000
 800ace4:	00060003 	.word	0x00060003
 800ace8:	000a000c 	.word	0x000a000c
 800acec:	000c000a 	.word	0x000c000a
 800acf0:	00030006 	.word	0x00030006

0800acf4 <D48_1CH_HTONS_VOL_HP>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800acfa:	b087      	sub	sp, #28
 800acfc:	6993      	ldr	r3, [r2, #24]
 800acfe:	9701      	str	r7, [sp, #4]
 800ad00:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ad02:	6a17      	ldr	r7, [r2, #32]
 800ad04:	9304      	str	r3, [sp, #16]
 800ad06:	69d6      	ldr	r6, [r2, #28]
 800ad08:	9702      	str	r7, [sp, #8]
 800ad0a:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800ad0e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800ad12:	2d00      	cmp	r5, #0
 800ad14:	f000 8093 	beq.w	800ae3e <D48_1CH_HTONS_VOL_HP+0x14a>
 800ad18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad1c:	f1a1 0b02 	sub.w	fp, r1, #2
 800ad20:	46f2      	mov	sl, lr
 800ad22:	4f48      	ldr	r7, [pc, #288]	; (800ae44 <D48_1CH_HTONS_VOL_HP+0x150>)
 800ad24:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800ad28:	469e      	mov	lr, r3
 800ad2a:	9205      	str	r2, [sp, #20]
 800ad2c:	9103      	str	r1, [sp, #12]
 800ad2e:	e9d0 3200 	ldrd	r3, r2, [r0]
 800ad32:	3006      	adds	r0, #6
 800ad34:	ba5b      	rev16	r3, r3
 800ad36:	fa92 f992 	rev16.w	r9, r2
 800ad3a:	b2dd      	uxtb	r5, r3
 800ad3c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ad40:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ad44:	0e1b      	lsrs	r3, r3, #24
 800ad46:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800ad4a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800ad4e:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800ad52:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800ad56:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800ad5a:	fa5f f289 	uxtb.w	r2, r9
 800ad5e:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800ad62:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800ad66:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800ad6a:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800ad6e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ad72:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800ad76:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ad7a:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800ad7e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ad82:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800ad86:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800ad8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad8e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800ad92:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ad96:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800ad9a:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800ad9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800ada2:	4b29      	ldr	r3, [pc, #164]	; (800ae48 <D48_1CH_HTONS_VOL_HP+0x154>)
 800ada4:	fb28 c103 	smlad	r1, r8, r3, ip
 800ada8:	4b28      	ldr	r3, [pc, #160]	; (800ae4c <D48_1CH_HTONS_VOL_HP+0x158>)
 800adaa:	fb25 1103 	smlad	r1, r5, r3, r1
 800adae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800adb2:	fb22 1903 	smlad	r9, r2, r3, r1
 800adb6:	4b26      	ldr	r3, [pc, #152]	; (800ae50 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800adb8:	fb28 ec03 	smlad	ip, r8, r3, lr
 800adbc:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800adc0:	fb25 cc03 	smlad	ip, r5, r3, ip
 800adc4:	4b23      	ldr	r3, [pc, #140]	; (800ae54 <D48_1CH_HTONS_VOL_HP+0x160>)
 800adc6:	fb22 cc03 	smlad	ip, r2, r3, ip
 800adca:	2101      	movs	r1, #1
 800adcc:	fb28 f801 	smuad	r8, r8, r1
 800add0:	4b21      	ldr	r3, [pc, #132]	; (800ae58 <D48_1CH_HTONS_VOL_HP+0x164>)
 800add2:	fb25 8503 	smlad	r5, r5, r3, r8
 800add6:	4b21      	ldr	r3, [pc, #132]	; (800ae5c <D48_1CH_HTONS_VOL_HP+0x168>)
 800add8:	fb22 5e03 	smlad	lr, r2, r3, r5
 800addc:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800ade0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ade4:	190a      	adds	r2, r1, r4
 800ade6:	9c02      	ldr	r4, [sp, #8]
 800ade8:	eba2 020a 	sub.w	r2, r2, sl
 800adec:	468a      	mov	sl, r1
 800adee:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800adf2:	fba2 2304 	umull	r2, r3, r2, r4
 800adf6:	fb04 3309 	mla	r3, r4, r9, r3
 800adfa:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800adfe:	f04f 0900 	mov.w	r9, #0
 800ae02:	f143 0500 	adc.w	r5, r3, #0
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	032a      	lsls	r2, r5, #12
 800ae0a:	006c      	lsls	r4, r5, #1
 800ae0c:	fbc3 8902 	smlal	r8, r9, r3, r2
 800ae10:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800ae14:	f303 030f 	ssat	r3, #16, r3
 800ae18:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800ae1c:	9b03      	ldr	r3, [sp, #12]
 800ae1e:	4283      	cmp	r3, r0
 800ae20:	d185      	bne.n	800ad2e <D48_1CH_HTONS_VOL_HP+0x3a>
 800ae22:	4673      	mov	r3, lr
 800ae24:	9a05      	ldr	r2, [sp, #20]
 800ae26:	6093      	str	r3, [r2, #8]
 800ae28:	2000      	movs	r0, #0
 800ae2a:	9b04      	ldr	r3, [sp, #16]
 800ae2c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ae30:	61d6      	str	r6, [r2, #28]
 800ae32:	6193      	str	r3, [r2, #24]
 800ae34:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800ae38:	b007      	add	sp, #28
 800ae3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3e:	4671      	mov	r1, lr
 800ae40:	e7f1      	b.n	800ae26 <D48_1CH_HTONS_VOL_HP+0x132>
 800ae42:	bf00      	nop
 800ae44:	24000000 	.word	0x24000000
 800ae48:	000f000a 	.word	0x000f000a
 800ae4c:	00060003 	.word	0x00060003
 800ae50:	00150019 	.word	0x00150019
 800ae54:	00190015 	.word	0x00190015
 800ae58:	00030006 	.word	0x00030006
 800ae5c:	000a000f 	.word	0x000a000f

0800ae60 <D64_1CH_HTONS_VOL_HP>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ae66:	b089      	sub	sp, #36	; 0x24
 800ae68:	6993      	ldr	r3, [r2, #24]
 800ae6a:	4686      	mov	lr, r0
 800ae6c:	9503      	str	r5, [sp, #12]
 800ae6e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ae70:	6a15      	ldr	r5, [r2, #32]
 800ae72:	9306      	str	r3, [sp, #24]
 800ae74:	69d6      	ldr	r6, [r2, #28]
 800ae76:	9504      	str	r5, [sp, #16]
 800ae78:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800ae7c:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800ae80:	2800      	cmp	r0, #0
 800ae82:	f000 80a4 	beq.w	800afce <D64_1CH_HTONS_VOL_HP+0x16e>
 800ae86:	460f      	mov	r7, r1
 800ae88:	46f1      	mov	r9, lr
 800ae8a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800ae8e:	4d56      	ldr	r5, [pc, #344]	; (800afe8 <D64_1CH_HTONS_VOL_HP+0x188>)
 800ae90:	46a2      	mov	sl, r4
 800ae92:	469e      	mov	lr, r3
 800ae94:	9105      	str	r1, [sp, #20]
 800ae96:	9207      	str	r2, [sp, #28]
 800ae98:	f859 1b08 	ldr.w	r1, [r9], #8
 800ae9c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800aea0:	ba49      	rev16	r1, r1
 800aea2:	fa93 fb93 	rev16.w	fp, r3
 800aea6:	b2cb      	uxtb	r3, r1
 800aea8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800aeac:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800aeb0:	0e09      	lsrs	r1, r1, #24
 800aeb2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800aeb6:	fa5f f38b 	uxtb.w	r3, fp
 800aeba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800aebe:	4426      	add	r6, r4
 800aec0:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800aec4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800aec8:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800aecc:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800aed0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800aed4:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800aed8:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800aedc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800aee0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800aee4:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800aee8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800aeec:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800aef0:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800aef4:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800aef8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800aefc:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800af00:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800af04:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800af08:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800af0c:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800af10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800af14:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800af18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af1c:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800af20:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800af24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af28:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800af2c:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800af30:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800af34:	482d      	ldr	r0, [pc, #180]	; (800afec <D64_1CH_HTONS_VOL_HP+0x18c>)
 800af36:	fb22 cc00 	smlad	ip, r2, r0, ip
 800af3a:	482d      	ldr	r0, [pc, #180]	; (800aff0 <D64_1CH_HTONS_VOL_HP+0x190>)
 800af3c:	fb21 cc00 	smlad	ip, r1, r0, ip
 800af40:	482c      	ldr	r0, [pc, #176]	; (800aff4 <D64_1CH_HTONS_VOL_HP+0x194>)
 800af42:	fb23 cc00 	smlad	ip, r3, r0, ip
 800af46:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800af4a:	fb2b c404 	smlad	r4, fp, r4, ip
 800af4e:	482a      	ldr	r0, [pc, #168]	; (800aff8 <D64_1CH_HTONS_VOL_HP+0x198>)
 800af50:	fb22 ec00 	smlad	ip, r2, r0, lr
 800af54:	fb2b cc10 	smladx	ip, fp, r0, ip
 800af58:	4828      	ldr	r0, [pc, #160]	; (800affc <D64_1CH_HTONS_VOL_HP+0x19c>)
 800af5a:	fb21 cc00 	smlad	ip, r1, r0, ip
 800af5e:	fb23 cc10 	smladx	ip, r3, r0, ip
 800af62:	f04f 0e01 	mov.w	lr, #1
 800af66:	fb22 f20e 	smuad	r2, r2, lr
 800af6a:	4825      	ldr	r0, [pc, #148]	; (800b000 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800af6c:	fb21 2100 	smlad	r1, r1, r0, r2
 800af70:	4a24      	ldr	r2, [pc, #144]	; (800b004 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800af72:	fb23 1302 	smlad	r3, r3, r2, r1
 800af76:	4a24      	ldr	r2, [pc, #144]	; (800b008 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800af78:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800af7c:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800af80:	eb04 0208 	add.w	r2, r4, r8
 800af84:	eba2 020a 	sub.w	r2, r2, sl
 800af88:	46a2      	mov	sl, r4
 800af8a:	4610      	mov	r0, r2
 800af8c:	17d1      	asrs	r1, r2, #31
 800af8e:	e9cd 0100 	strd	r0, r1, [sp]
 800af92:	9904      	ldr	r1, [sp, #16]
 800af94:	9801      	ldr	r0, [sp, #4]
 800af96:	fba2 2301 	umull	r2, r3, r2, r1
 800af9a:	fb01 3300 	mla	r3, r1, r0, r3
 800af9e:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800afa2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800afa6:	f143 0100 	adc.w	r1, r3, #0
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	02ca      	lsls	r2, r1, #11
 800afae:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800afb2:	2100      	movs	r1, #0
 800afb4:	fbc3 0102 	smlal	r0, r1, r3, r2
 800afb8:	108b      	asrs	r3, r1, #2
 800afba:	f303 030f 	ssat	r3, #16, r3
 800afbe:	f827 3b02 	strh.w	r3, [r7], #2
 800afc2:	9b05      	ldr	r3, [sp, #20]
 800afc4:	429f      	cmp	r7, r3
 800afc6:	f47f af67 	bne.w	800ae98 <D64_1CH_HTONS_VOL_HP+0x38>
 800afca:	4673      	mov	r3, lr
 800afcc:	9a07      	ldr	r2, [sp, #28]
 800afce:	6093      	str	r3, [r2, #8]
 800afd0:	2000      	movs	r0, #0
 800afd2:	9b06      	ldr	r3, [sp, #24]
 800afd4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800afd8:	61d6      	str	r6, [r2, #28]
 800afda:	6193      	str	r3, [r2, #24]
 800afdc:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800afe0:	b009      	add	sp, #36	; 0x24
 800afe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe6:	bf00      	nop
 800afe8:	24000000 	.word	0x24000000
 800afec:	001c0015 	.word	0x001c0015
 800aff0:	000f000a 	.word	0x000f000a
 800aff4:	00060003 	.word	0x00060003
 800aff8:	0024002a 	.word	0x0024002a
 800affc:	002e0030 	.word	0x002e0030
 800b000:	00030006 	.word	0x00030006
 800b004:	000a000f 	.word	0x000a000f
 800b008:	0015001c 	.word	0x0015001c

0800b00c <D80_1CH_HTONS_VOL_HP>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	6913      	ldr	r3, [r2, #16]
 800b012:	b089      	sub	sp, #36	; 0x24
 800b014:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	9603      	str	r6, [sp, #12]
 800b01a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b01c:	6a16      	ldr	r6, [r2, #32]
 800b01e:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800b022:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800b026:	9306      	str	r3, [sp, #24]
 800b028:	9604      	str	r6, [sp, #16]
 800b02a:	69d3      	ldr	r3, [r2, #28]
 800b02c:	2c00      	cmp	r4, #0
 800b02e:	f000 80ce 	beq.w	800b1ce <D80_1CH_HTONS_VOL_HP+0x1c2>
 800b032:	3902      	subs	r1, #2
 800b034:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b038:	4e66      	ldr	r6, [pc, #408]	; (800b1d4 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800b03a:	469e      	mov	lr, r3
 800b03c:	9102      	str	r1, [sp, #8]
 800b03e:	46aa      	mov	sl, r5
 800b040:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800b044:	9207      	str	r2, [sp, #28]
 800b046:	9105      	str	r1, [sp, #20]
 800b048:	6883      	ldr	r3, [r0, #8]
 800b04a:	e9d0 4200 	ldrd	r4, r2, [r0]
 800b04e:	300a      	adds	r0, #10
 800b050:	ba64      	rev16	r4, r4
 800b052:	ba52      	rev16	r2, r2
 800b054:	fa93 fb93 	rev16.w	fp, r3
 800b058:	b2e5      	uxtb	r5, r4
 800b05a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b05e:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800b062:	0e24      	lsrs	r4, r4, #24
 800b064:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800b068:	b2d5      	uxtb	r5, r2
 800b06a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b06e:	44c6      	add	lr, r8
 800b070:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b074:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800b078:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800b07c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b080:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b084:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800b088:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b08c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b090:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800b094:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b098:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800b09c:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800b0a0:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800b0a4:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800b0a8:	0e12      	lsrs	r2, r2, #24
 800b0aa:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800b0ae:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800b0b2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b0b6:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800b0ba:	fa5f fb8b 	uxtb.w	fp, fp
 800b0be:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b0c2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b0c6:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800b0ca:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b0ce:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800b0d2:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b0d6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b0da:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800b0de:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800b0e2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b0e6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b0ea:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800b0ee:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b0f2:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800b0f6:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800b0fa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b0fe:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800b102:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800b106:	4934      	ldr	r1, [pc, #208]	; (800b1d8 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800b108:	fb23 cc01 	smlad	ip, r3, r1, ip
 800b10c:	4933      	ldr	r1, [pc, #204]	; (800b1dc <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800b10e:	fb24 cc01 	smlad	ip, r4, r1, ip
 800b112:	4933      	ldr	r1, [pc, #204]	; (800b1e0 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800b114:	fb28 cc01 	smlad	ip, r8, r1, ip
 800b118:	4932      	ldr	r1, [pc, #200]	; (800b1e4 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800b11a:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b11e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b122:	fb2b c901 	smlad	r9, fp, r1, ip
 800b126:	4930      	ldr	r1, [pc, #192]	; (800b1e8 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800b128:	fb23 7701 	smlad	r7, r3, r1, r7
 800b12c:	492f      	ldr	r1, [pc, #188]	; (800b1ec <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800b12e:	fb24 7701 	smlad	r7, r4, r1, r7
 800b132:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800b136:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800b13a:	492d      	ldr	r1, [pc, #180]	; (800b1f0 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800b13c:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b140:	492c      	ldr	r1, [pc, #176]	; (800b1f4 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800b142:	fb2b cc01 	smlad	ip, fp, r1, ip
 800b146:	2101      	movs	r1, #1
 800b148:	fb23 f301 	smuad	r3, r3, r1
 800b14c:	492a      	ldr	r1, [pc, #168]	; (800b1f8 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800b14e:	fb24 3401 	smlad	r4, r4, r1, r3
 800b152:	492a      	ldr	r1, [pc, #168]	; (800b1fc <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800b154:	fb28 4101 	smlad	r1, r8, r1, r4
 800b158:	4f29      	ldr	r7, [pc, #164]	; (800b200 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800b15a:	fb22 1207 	smlad	r2, r2, r7, r1
 800b15e:	4f29      	ldr	r7, [pc, #164]	; (800b204 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800b160:	fb2b 2707 	smlad	r7, fp, r7, r2
 800b164:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800b168:	9b01      	ldr	r3, [sp, #4]
 800b16a:	9c04      	ldr	r4, [sp, #16]
 800b16c:	440b      	add	r3, r1
 800b16e:	eba3 020a 	sub.w	r2, r3, sl
 800b172:	468a      	mov	sl, r1
 800b174:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b178:	fba2 2304 	umull	r2, r3, r2, r4
 800b17c:	fb04 3309 	mla	r3, r4, r9, r3
 800b180:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800b184:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b188:	f143 0500 	adc.w	r5, r3, #0
 800b18c:	006b      	lsls	r3, r5, #1
 800b18e:	02aa      	lsls	r2, r5, #10
 800b190:	2500      	movs	r5, #0
 800b192:	9301      	str	r3, [sp, #4]
 800b194:	9b03      	ldr	r3, [sp, #12]
 800b196:	fbc3 4502 	smlal	r4, r5, r3, r2
 800b19a:	9a02      	ldr	r2, [sp, #8]
 800b19c:	10ab      	asrs	r3, r5, #2
 800b19e:	f303 030f 	ssat	r3, #16, r3
 800b1a2:	f822 3f02 	strh.w	r3, [r2, #2]!
 800b1a6:	9b05      	ldr	r3, [sp, #20]
 800b1a8:	9202      	str	r2, [sp, #8]
 800b1aa:	4298      	cmp	r0, r3
 800b1ac:	f47f af4c 	bne.w	800b048 <D80_1CH_HTONS_VOL_HP+0x3c>
 800b1b0:	4673      	mov	r3, lr
 800b1b2:	9a07      	ldr	r2, [sp, #28]
 800b1b4:	61d3      	str	r3, [r2, #28]
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	9b01      	ldr	r3, [sp, #4]
 800b1ba:	6097      	str	r7, [r2, #8]
 800b1bc:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b1c0:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800b1c4:	9b06      	ldr	r3, [sp, #24]
 800b1c6:	6193      	str	r3, [r2, #24]
 800b1c8:	b009      	add	sp, #36	; 0x24
 800b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	e7f0      	b.n	800b1b4 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800b1d2:	bf00      	nop
 800b1d4:	24000000 	.word	0x24000000
 800b1d8:	002d0024 	.word	0x002d0024
 800b1dc:	001c0015 	.word	0x001c0015
 800b1e0:	000f000a 	.word	0x000f000a
 800b1e4:	00060003 	.word	0x00060003
 800b1e8:	0037003f 	.word	0x0037003f
 800b1ec:	00450049 	.word	0x00450049
 800b1f0:	00490045 	.word	0x00490045
 800b1f4:	003f0037 	.word	0x003f0037
 800b1f8:	00030006 	.word	0x00030006
 800b1fc:	000a000f 	.word	0x000a000f
 800b200:	0015001c 	.word	0x0015001c
 800b204:	0024002d 	.word	0x0024002d

0800b208 <D128_1CH_HTONS_VOL_HP>:
 800b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	6914      	ldr	r4, [r2, #16]
 800b20e:	b08d      	sub	sp, #52	; 0x34
 800b210:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b212:	9404      	str	r4, [sp, #16]
 800b214:	6954      	ldr	r4, [r2, #20]
 800b216:	920b      	str	r2, [sp, #44]	; 0x2c
 800b218:	9405      	str	r4, [sp, #20]
 800b21a:	6994      	ldr	r4, [r2, #24]
 800b21c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800b220:	940a      	str	r4, [sp, #40]	; 0x28
 800b222:	6894      	ldr	r4, [r2, #8]
 800b224:	9403      	str	r4, [sp, #12]
 800b226:	68d4      	ldr	r4, [r2, #12]
 800b228:	9402      	str	r4, [sp, #8]
 800b22a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b22c:	6a12      	ldr	r2, [r2, #32]
 800b22e:	9407      	str	r4, [sp, #28]
 800b230:	9208      	str	r2, [sp, #32]
 800b232:	2b00      	cmp	r3, #0
 800b234:	f000 812e 	beq.w	800b494 <D128_1CH_HTONS_VOL_HP+0x28c>
 800b238:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b23c:	f100 0b10 	add.w	fp, r0, #16
 800b240:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800b4d4 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800b244:	9106      	str	r1, [sp, #24]
 800b246:	9309      	str	r3, [sp, #36]	; 0x24
 800b248:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800b24c:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800b250:	ba40      	rev16	r0, r0
 800b252:	ba52      	rev16	r2, r2
 800b254:	ba5b      	rev16	r3, r3
 800b256:	ba76      	rev16	r6, r6
 800b258:	b2c5      	uxtb	r5, r0
 800b25a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800b25e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800b262:	0e00      	lsrs	r0, r0, #24
 800b264:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800b268:	b2d5      	uxtb	r5, r2
 800b26a:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800b26e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800b272:	44bc      	add	ip, r7
 800b274:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b278:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800b27c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800b280:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800b284:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800b288:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800b28c:	0e12      	lsrs	r2, r2, #24
 800b28e:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800b292:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b296:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b29a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b29e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800b2a2:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800b2a6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800b2b0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b2b4:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800b2b8:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800b2bc:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800b2c0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b2c4:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800b2c8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b2cc:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800b2d0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b2d4:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800b2d8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800b2dc:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800b2e0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b2e4:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800b2e8:	0e1b      	lsrs	r3, r3, #24
 800b2ea:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800b2ee:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b2f2:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800b2f6:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800b2fa:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800b2fe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b302:	b2f3      	uxtb	r3, r6
 800b304:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800b308:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800b30c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b310:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800b314:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800b318:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800b31c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b320:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b324:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800b328:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800b32c:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800b330:	0e36      	lsrs	r6, r6, #24
 800b332:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800b336:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b33a:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800b33e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b342:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800b346:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b34a:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800b34e:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800b352:	9101      	str	r1, [sp, #4]
 800b354:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800b358:	9b02      	ldr	r3, [sp, #8]
 800b35a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b35e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b362:	4611      	mov	r1, r2
 800b364:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800b368:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800b36c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800b370:	4a49      	ldr	r2, [pc, #292]	; (800b498 <D128_1CH_HTONS_VOL_HP+0x290>)
 800b372:	fb2e 3202 	smlad	r2, lr, r2, r3
 800b376:	4b49      	ldr	r3, [pc, #292]	; (800b49c <D128_1CH_HTONS_VOL_HP+0x294>)
 800b378:	fb27 2203 	smlad	r2, r7, r3, r2
 800b37c:	4b48      	ldr	r3, [pc, #288]	; (800b4a0 <D128_1CH_HTONS_VOL_HP+0x298>)
 800b37e:	fb25 2203 	smlad	r2, r5, r3, r2
 800b382:	4b48      	ldr	r3, [pc, #288]	; (800b4a4 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800b384:	fb24 2203 	smlad	r2, r4, r3, r2
 800b388:	4b47      	ldr	r3, [pc, #284]	; (800b4a8 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800b38a:	fb20 2803 	smlad	r8, r0, r3, r2
 800b38e:	4b47      	ldr	r3, [pc, #284]	; (800b4ac <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800b390:	9a01      	ldr	r2, [sp, #4]
 800b392:	fb22 8203 	smlad	r2, r2, r3, r8
 800b396:	4b46      	ldr	r3, [pc, #280]	; (800b4b0 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800b398:	9102      	str	r1, [sp, #8]
 800b39a:	fb21 2203 	smlad	r2, r1, r3, r2
 800b39e:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800b3a2:	fb26 2308 	smlad	r3, r6, r8, r2
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	9a03      	ldr	r2, [sp, #12]
 800b3aa:	4b42      	ldr	r3, [pc, #264]	; (800b4b4 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800b3ac:	fb2e 2803 	smlad	r8, lr, r3, r2
 800b3b0:	4b41      	ldr	r3, [pc, #260]	; (800b4b8 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800b3b2:	fb27 8a03 	smlad	sl, r7, r3, r8
 800b3b6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800b4d8 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800b3ba:	fb25 a808 	smlad	r8, r5, r8, sl
 800b3be:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800b4dc <D128_1CH_HTONS_VOL_HP+0x2d4>
 800b3c2:	fb24 880a 	smlad	r8, r4, sl, r8
 800b3c6:	f8df a118 	ldr.w	sl, [pc, #280]	; 800b4e0 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800b3ca:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800b3ce:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800b4e4 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800b3d2:	9b01      	ldr	r3, [sp, #4]
 800b3d4:	fb23 aa08 	smlad	sl, r3, r8, sl
 800b3d8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800b4e8 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800b3dc:	9a02      	ldr	r2, [sp, #8]
 800b3de:	fb22 a808 	smlad	r8, r2, r8, sl
 800b3e2:	f8df a108 	ldr.w	sl, [pc, #264]	; 800b4ec <D128_1CH_HTONS_VOL_HP+0x2e4>
 800b3e6:	fb26 830a 	smlad	r3, r6, sl, r8
 800b3ea:	f04f 0801 	mov.w	r8, #1
 800b3ee:	9302      	str	r3, [sp, #8]
 800b3f0:	fb2e fe08 	smuad	lr, lr, r8
 800b3f4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800b4f0 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800b3f8:	fb27 ee08 	smlad	lr, r7, r8, lr
 800b3fc:	4f2f      	ldr	r7, [pc, #188]	; (800b4bc <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800b3fe:	fb25 ee07 	smlad	lr, r5, r7, lr
 800b402:	4f2f      	ldr	r7, [pc, #188]	; (800b4c0 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800b404:	fb24 ee07 	smlad	lr, r4, r7, lr
 800b408:	4f2e      	ldr	r7, [pc, #184]	; (800b4c4 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800b40a:	fb20 ee07 	smlad	lr, r0, r7, lr
 800b40e:	4f2e      	ldr	r7, [pc, #184]	; (800b4c8 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800b410:	9b01      	ldr	r3, [sp, #4]
 800b412:	fb23 ee07 	smlad	lr, r3, r7, lr
 800b416:	4f2d      	ldr	r7, [pc, #180]	; (800b4cc <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800b418:	fb22 e707 	smlad	r7, r2, r7, lr
 800b41c:	4b2c      	ldr	r3, [pc, #176]	; (800b4d0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800b41e:	fb26 7303 	smlad	r3, r6, r3, r7
 800b422:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800b426:	9303      	str	r3, [sp, #12]
 800b428:	9b04      	ldr	r3, [sp, #16]
 800b42a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b42e:	9f08      	ldr	r7, [sp, #32]
 800b430:	2100      	movs	r1, #0
 800b432:	4433      	add	r3, r6
 800b434:	f10b 0b10 	add.w	fp, fp, #16
 800b438:	461a      	mov	r2, r3
 800b43a:	9b05      	ldr	r3, [sp, #20]
 800b43c:	9605      	str	r6, [sp, #20]
 800b43e:	1ad2      	subs	r2, r2, r3
 800b440:	17d5      	asrs	r5, r2, #31
 800b442:	fba2 2307 	umull	r2, r3, r2, r7
 800b446:	1814      	adds	r4, r2, r0
 800b448:	fb07 3305 	mla	r3, r7, r5, r3
 800b44c:	eb43 0501 	adc.w	r5, r3, r1
 800b450:	006b      	lsls	r3, r5, #1
 800b452:	022a      	lsls	r2, r5, #8
 800b454:	9304      	str	r3, [sp, #16]
 800b456:	9b07      	ldr	r3, [sp, #28]
 800b458:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b45c:	9a06      	ldr	r2, [sp, #24]
 800b45e:	108b      	asrs	r3, r1, #2
 800b460:	f303 030f 	ssat	r3, #16, r3
 800b464:	f822 3b02 	strh.w	r3, [r2], #2
 800b468:	4613      	mov	r3, r2
 800b46a:	9206      	str	r2, [sp, #24]
 800b46c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b46e:	4293      	cmp	r3, r2
 800b470:	f47f aeea 	bne.w	800b248 <D128_1CH_HTONS_VOL_HP+0x40>
 800b474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b476:	2000      	movs	r0, #0
 800b478:	9903      	ldr	r1, [sp, #12]
 800b47a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47c:	6099      	str	r1, [r3, #8]
 800b47e:	9902      	ldr	r1, [sp, #8]
 800b480:	f8c3 c01c 	str.w	ip, [r3, #28]
 800b484:	60d9      	str	r1, [r3, #12]
 800b486:	9904      	ldr	r1, [sp, #16]
 800b488:	619a      	str	r2, [r3, #24]
 800b48a:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800b48e:	b00d      	add	sp, #52	; 0x34
 800b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b494:	9e05      	ldr	r6, [sp, #20]
 800b496:	e7ed      	b.n	800b474 <D128_1CH_HTONS_VOL_HP+0x26c>
 800b498:	00780069 	.word	0x00780069
 800b49c:	005b004e 	.word	0x005b004e
 800b4a0:	00420037 	.word	0x00420037
 800b4a4:	002d0024 	.word	0x002d0024
 800b4a8:	001c0015 	.word	0x001c0015
 800b4ac:	000f000a 	.word	0x000f000a
 800b4b0:	00060003 	.word	0x00060003
 800b4b4:	00880096 	.word	0x00880096
 800b4b8:	00a200ac 	.word	0x00a200ac
 800b4bc:	000a000f 	.word	0x000a000f
 800b4c0:	0015001c 	.word	0x0015001c
 800b4c4:	0024002d 	.word	0x0024002d
 800b4c8:	00370042 	.word	0x00370042
 800b4cc:	004e005b 	.word	0x004e005b
 800b4d0:	00690078 	.word	0x00690078
 800b4d4:	24000000 	.word	0x24000000
 800b4d8:	00b400ba 	.word	0x00b400ba
 800b4dc:	00be00c0 	.word	0x00be00c0
 800b4e0:	00c000be 	.word	0x00c000be
 800b4e4:	00ba00b4 	.word	0x00ba00b4
 800b4e8:	00ac00a2 	.word	0x00ac00a2
 800b4ec:	00960088 	.word	0x00960088
 800b4f0:	00030006 	.word	0x00030006

0800b4f4 <PDM_Filter_Init>:
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	2240      	movs	r2, #64	; 0x40
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	300c      	adds	r0, #12
 800b4fe:	f000 f9ed 	bl	800b8dc <memset>
 800b502:	4a56      	ldr	r2, [pc, #344]	; (800b65c <PDM_Filter_Init+0x168>)
 800b504:	4856      	ldr	r0, [pc, #344]	; (800b660 <PDM_Filter_Init+0x16c>)
 800b506:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800b50a:	6813      	ldr	r3, [r2, #0]
 800b50c:	f24c 2540 	movw	r5, #49728	; 0xc240
 800b510:	f023 0301 	bic.w	r3, r3, #1
 800b514:	6013      	str	r3, [r2, #0]
 800b516:	6803      	ldr	r3, [r0, #0]
 800b518:	400b      	ands	r3, r1
 800b51a:	42ab      	cmp	r3, r5
 800b51c:	d040      	beq.n	800b5a0 <PDM_Filter_Init+0xac>
 800b51e:	6803      	ldr	r3, [r0, #0]
 800b520:	f24c 2270 	movw	r2, #49776	; 0xc270
 800b524:	4019      	ands	r1, r3
 800b526:	4291      	cmp	r1, r2
 800b528:	d03a      	beq.n	800b5a0 <PDM_Filter_Init+0xac>
 800b52a:	4b4e      	ldr	r3, [pc, #312]	; (800b664 <PDM_Filter_Init+0x170>)
 800b52c:	2101      	movs	r1, #1
 800b52e:	461a      	mov	r2, r3
 800b530:	6019      	str	r1, [r3, #0]
 800b532:	6813      	ldr	r3, [r2, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1fc      	bne.n	800b532 <PDM_Filter_Init+0x3e>
 800b538:	4b4b      	ldr	r3, [pc, #300]	; (800b668 <PDM_Filter_Init+0x174>)
 800b53a:	494c      	ldr	r1, [pc, #304]	; (800b66c <PDM_Filter_Init+0x178>)
 800b53c:	4a4c      	ldr	r2, [pc, #304]	; (800b670 <PDM_Filter_Init+0x17c>)
 800b53e:	6019      	str	r1, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	8820      	ldrh	r0, [r4, #0]
 800b544:	4293      	cmp	r3, r2
 800b546:	8961      	ldrh	r1, [r4, #10]
 800b548:	f04f 0300 	mov.w	r3, #0
 800b54c:	8922      	ldrh	r2, [r4, #8]
 800b54e:	bf14      	ite	ne
 800b550:	2500      	movne	r5, #0
 800b552:	4d47      	ldreq	r5, [pc, #284]	; (800b670 <PDM_Filter_Init+0x17c>)
 800b554:	2801      	cmp	r0, #1
 800b556:	61a3      	str	r3, [r4, #24]
 800b558:	6465      	str	r5, [r4, #68]	; 0x44
 800b55a:	60e3      	str	r3, [r4, #12]
 800b55c:	6263      	str	r3, [r4, #36]	; 0x24
 800b55e:	6423      	str	r3, [r4, #64]	; 0x40
 800b560:	86a1      	strh	r1, [r4, #52]	; 0x34
 800b562:	86e2      	strh	r2, [r4, #54]	; 0x36
 800b564:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800b568:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b56c:	d936      	bls.n	800b5dc <PDM_Filter_Init+0xe8>
 800b56e:	2003      	movs	r0, #3
 800b570:	2302      	movs	r3, #2
 800b572:	8862      	ldrh	r2, [r4, #2]
 800b574:	2a01      	cmp	r2, #1
 800b576:	d92e      	bls.n	800b5d6 <PDM_Filter_Init+0xe2>
 800b578:	2140      	movs	r1, #64	; 0x40
 800b57a:	2300      	movs	r3, #0
 800b57c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b57e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800b582:	d101      	bne.n	800b588 <PDM_Filter_Init+0x94>
 800b584:	460b      	mov	r3, r1
 800b586:	6421      	str	r1, [r4, #64]	; 0x40
 800b588:	6862      	ldr	r2, [r4, #4]
 800b58a:	b11a      	cbz	r2, 800b594 <PDM_Filter_Init+0xa0>
 800b58c:	f043 0310 	orr.w	r3, r3, #16
 800b590:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b592:	6423      	str	r3, [r4, #64]	; 0x40
 800b594:	2200      	movs	r2, #0
 800b596:	8722      	strh	r2, [r4, #56]	; 0x38
 800b598:	b908      	cbnz	r0, 800b59e <PDM_Filter_Init+0xaa>
 800b59a:	3380      	adds	r3, #128	; 0x80
 800b59c:	6423      	str	r3, [r4, #64]	; 0x40
 800b59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5a0:	4b34      	ldr	r3, [pc, #208]	; (800b674 <PDM_Filter_Init+0x180>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1c0      	bne.n	800b52a <PDM_Filter_Init+0x36>
 800b5a8:	4a33      	ldr	r2, [pc, #204]	; (800b678 <PDM_Filter_Init+0x184>)
 800b5aa:	6813      	ldr	r3, [r2, #0]
 800b5ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5b0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b5b4:	d006      	beq.n	800b5c4 <PDM_Filter_Init+0xd0>
 800b5b6:	6813      	ldr	r3, [r2, #0]
 800b5b8:	f240 4283 	movw	r2, #1155	; 0x483
 800b5bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d1b2      	bne.n	800b52a <PDM_Filter_Init+0x36>
 800b5c4:	4b2d      	ldr	r3, [pc, #180]	; (800b67c <PDM_Filter_Init+0x188>)
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	6019      	str	r1, [r3, #0]
 800b5cc:	6813      	ldr	r3, [r2, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1fc      	bne.n	800b5cc <PDM_Filter_Init+0xd8>
 800b5d2:	4b2b      	ldr	r3, [pc, #172]	; (800b680 <PDM_Filter_Init+0x18c>)
 800b5d4:	e7b1      	b.n	800b53a <PDM_Filter_Init+0x46>
 800b5d6:	d03a      	beq.n	800b64e <PDM_Filter_Init+0x15a>
 800b5d8:	4618      	mov	r0, r3
 800b5da:	e7cd      	b.n	800b578 <PDM_Filter_Init+0x84>
 800b5dc:	4d29      	ldr	r5, [pc, #164]	; (800b684 <PDM_Filter_Init+0x190>)
 800b5de:	782a      	ldrb	r2, [r5, #0]
 800b5e0:	d01b      	beq.n	800b61a <PDM_Filter_Init+0x126>
 800b5e2:	2a01      	cmp	r2, #1
 800b5e4:	d001      	beq.n	800b5ea <PDM_Filter_Init+0xf6>
 800b5e6:	2001      	movs	r0, #1
 800b5e8:	e7c3      	b.n	800b572 <PDM_Filter_Init+0x7e>
 800b5ea:	4927      	ldr	r1, [pc, #156]	; (800b688 <PDM_Filter_Init+0x194>)
 800b5ec:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800b690 <PDM_Filter_Init+0x19c>
 800b5f0:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800b5f4:	4e25      	ldr	r6, [pc, #148]	; (800b68c <PDM_Filter_Init+0x198>)
 800b5f6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b5fa:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b5fe:	ea02 0006 	and.w	r0, r2, r6
 800b602:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b606:	428f      	cmp	r7, r1
 800b608:	ea43 0300 	orr.w	r3, r3, r0
 800b60c:	4413      	add	r3, r2
 800b60e:	600b      	str	r3, [r1, #0]
 800b610:	d1f1      	bne.n	800b5f6 <PDM_Filter_Init+0x102>
 800b612:	2300      	movs	r3, #0
 800b614:	2001      	movs	r0, #1
 800b616:	702b      	strb	r3, [r5, #0]
 800b618:	e7ab      	b.n	800b572 <PDM_Filter_Init+0x7e>
 800b61a:	2a00      	cmp	r2, #0
 800b61c:	d1a9      	bne.n	800b572 <PDM_Filter_Init+0x7e>
 800b61e:	491a      	ldr	r1, [pc, #104]	; (800b688 <PDM_Filter_Init+0x194>)
 800b620:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800b690 <PDM_Filter_Init+0x19c>
 800b624:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800b628:	4e18      	ldr	r6, [pc, #96]	; (800b68c <PDM_Filter_Init+0x198>)
 800b62a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b62e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b632:	ea02 0006 	and.w	r0, r2, r6
 800b636:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b63a:	428f      	cmp	r7, r1
 800b63c:	ea43 0300 	orr.w	r3, r3, r0
 800b640:	4413      	add	r3, r2
 800b642:	600b      	str	r3, [r1, #0]
 800b644:	d1f1      	bne.n	800b62a <PDM_Filter_Init+0x136>
 800b646:	2001      	movs	r0, #1
 800b648:	2300      	movs	r3, #0
 800b64a:	7028      	strb	r0, [r5, #0]
 800b64c:	e791      	b.n	800b572 <PDM_Filter_Init+0x7e>
 800b64e:	2220      	movs	r2, #32
 800b650:	4618      	mov	r0, r3
 800b652:	2160      	movs	r1, #96	; 0x60
 800b654:	6422      	str	r2, [r4, #64]	; 0x40
 800b656:	4613      	mov	r3, r2
 800b658:	e790      	b.n	800b57c <PDM_Filter_Init+0x88>
 800b65a:	bf00      	nop
 800b65c:	e0002000 	.word	0xe0002000
 800b660:	e000ed00 	.word	0xe000ed00
 800b664:	40023008 	.word	0x40023008
 800b668:	40023000 	.word	0x40023000
 800b66c:	f407a5c2 	.word	0xf407a5c2
 800b670:	b5e8b5cd 	.word	0xb5e8b5cd
 800b674:	e0042000 	.word	0xe0042000
 800b678:	5c001000 	.word	0x5c001000
 800b67c:	58024c08 	.word	0x58024c08
 800b680:	58024c00 	.word	0x58024c00
 800b684:	24000490 	.word	0x24000490
 800b688:	23fffffc 	.word	0x23fffffc
 800b68c:	000ffc00 	.word	0x000ffc00
 800b690:	3ff00000 	.word	0x3ff00000

0800b694 <PDM_Filter_setConfig>:
 800b694:	4b67      	ldr	r3, [pc, #412]	; (800b834 <PDM_Filter_setConfig+0x1a0>)
 800b696:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b698:	429a      	cmp	r2, r3
 800b69a:	d128      	bne.n	800b6ee <PDM_Filter_setConfig+0x5a>
 800b69c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b69e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6a0:	880e      	ldrh	r6, [r1, #0]
 800b6a2:	460d      	mov	r5, r1
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800b6aa:	1e73      	subs	r3, r6, #1
 800b6ac:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800b6b0:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800b6b4:	2b06      	cmp	r3, #6
 800b6b6:	ed2d 8b02 	vpush	{d8}
 800b6ba:	6421      	str	r1, [r4, #64]	; 0x40
 800b6bc:	b083      	sub	sp, #12
 800b6be:	d820      	bhi.n	800b702 <PDM_Filter_setConfig+0x6e>
 800b6c0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b6c2:	42b3      	cmp	r3, r6
 800b6c4:	d03d      	beq.n	800b742 <PDM_Filter_setConfig+0xae>
 800b6c6:	4b5c      	ldr	r3, [pc, #368]	; (800b838 <PDM_Filter_setConfig+0x1a4>)
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	4333      	orrs	r3, r6
 800b6cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b6d0:	6423      	str	r3, [r4, #64]	; 0x40
 800b6d2:	f003 030f 	and.w	r3, r3, #15
 800b6d6:	2a70      	cmp	r2, #112	; 0x70
 800b6d8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b6dc:	d009      	beq.n	800b6f2 <PDM_Filter_setConfig+0x5e>
 800b6de:	2b06      	cmp	r3, #6
 800b6e0:	d824      	bhi.n	800b72c <PDM_Filter_setConfig+0x98>
 800b6e2:	e8df f003 	tbb	[pc, r3]
 800b6e6:	878a      	.short	0x878a
 800b6e8:	7b7e8184 	.word	0x7b7e8184
 800b6ec:	78          	.byte	0x78
 800b6ed:	00          	.byte	0x00
 800b6ee:	2004      	movs	r0, #4
 800b6f0:	4770      	bx	lr
 800b6f2:	2b06      	cmp	r3, #6
 800b6f4:	d81a      	bhi.n	800b72c <PDM_Filter_setConfig+0x98>
 800b6f6:	e8df f003 	tbb	[pc, r3]
 800b6fa:	8f92      	.short	0x8f92
 800b6fc:	8617898c 	.word	0x8617898c
 800b700:	83          	.byte	0x83
 800b701:	00          	.byte	0x00
 800b702:	4287      	cmp	r7, r0
 800b704:	f000 808e 	beq.w	800b824 <PDM_Filter_setConfig+0x190>
 800b708:	f117 0f0c 	cmn.w	r7, #12
 800b70c:	f04f 0008 	mov.w	r0, #8
 800b710:	da11      	bge.n	800b736 <PDM_Filter_setConfig+0xa2>
 800b712:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800b716:	3040      	adds	r0, #64	; 0x40
 800b718:	80ab      	strh	r3, [r5, #4]
 800b71a:	886b      	ldrh	r3, [r5, #2]
 800b71c:	8626      	strh	r6, [r4, #48]	; 0x30
 800b71e:	8663      	strh	r3, [r4, #50]	; 0x32
 800b720:	b003      	add	sp, #12
 800b722:	ecbd 8b02 	vpop	{d8}
 800b726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b728:	4b44      	ldr	r3, [pc, #272]	; (800b83c <PDM_Filter_setConfig+0x1a8>)
 800b72a:	64a3      	str	r3, [r4, #72]	; 0x48
 800b72c:	f117 0f0c 	cmn.w	r7, #12
 800b730:	f04f 0000 	mov.w	r0, #0
 800b734:	dbed      	blt.n	800b712 <PDM_Filter_setConfig+0x7e>
 800b736:	2f33      	cmp	r7, #51	; 0x33
 800b738:	dd10      	ble.n	800b75c <PDM_Filter_setConfig+0xc8>
 800b73a:	2333      	movs	r3, #51	; 0x33
 800b73c:	3040      	adds	r0, #64	; 0x40
 800b73e:	80ab      	strh	r3, [r5, #4]
 800b740:	e7eb      	b.n	800b71a <PDM_Filter_setConfig+0x86>
 800b742:	4287      	cmp	r7, r0
 800b744:	d1f2      	bne.n	800b72c <PDM_Filter_setConfig+0x98>
 800b746:	886b      	ldrh	r3, [r5, #2]
 800b748:	8663      	strh	r3, [r4, #50]	; 0x32
 800b74a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b74c:	2000      	movs	r0, #0
 800b74e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b752:	6423      	str	r3, [r4, #64]	; 0x40
 800b754:	b003      	add	sp, #12
 800b756:	ecbd 8b02 	vpop	{d8}
 800b75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b75c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b75e:	f003 030f 	and.w	r3, r3, #15
 800b762:	3b01      	subs	r3, #1
 800b764:	2b06      	cmp	r3, #6
 800b766:	d831      	bhi.n	800b7cc <PDM_Filter_setConfig+0x138>
 800b768:	4a35      	ldr	r2, [pc, #212]	; (800b840 <PDM_Filter_setConfig+0x1ac>)
 800b76a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b76e:	eddf 0a35 	vldr	s1, [pc, #212]	; 800b844 <PDM_Filter_setConfig+0x1b0>
 800b772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b776:	9001      	str	r0, [sp, #4]
 800b778:	edd3 7a07 	vldr	s15, [r3, #28]
 800b77c:	ed93 8a00 	vldr	s16, [r3]
 800b780:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b784:	f000 f8cc 	bl	800b920 <powf>
 800b788:	eef0 8a40 	vmov.f32	s17, s0
 800b78c:	9801      	ldr	r0, [sp, #4]
 800b78e:	ee07 7a90 	vmov	s15, r7
 800b792:	ee28 8a28 	vmul.f32	s16, s16, s17
 800b796:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800b79a:	9001      	str	r0, [sp, #4]
 800b79c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800b7a0:	eddf 7a29 	vldr	s15, [pc, #164]	; 800b848 <PDM_Filter_setConfig+0x1b4>
 800b7a4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b7a8:	f000 f8ba 	bl	800b920 <powf>
 800b7ac:	ee28 8a00 	vmul.f32	s16, s16, s0
 800b7b0:	886b      	ldrh	r3, [r5, #2]
 800b7b2:	9801      	ldr	r0, [sp, #4]
 800b7b4:	feb8 8a48 	vrinta.f32	s16, s16
 800b7b8:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800b7bc:	8727      	strh	r7, [r4, #56]	; 0x38
 800b7be:	8663      	strh	r3, [r4, #50]	; 0x32
 800b7c0:	8626      	strh	r6, [r4, #48]	; 0x30
 800b7c2:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d0bf      	beq.n	800b74a <PDM_Filter_setConfig+0xb6>
 800b7ca:	e7a9      	b.n	800b720 <PDM_Filter_setConfig+0x8c>
 800b7cc:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800b84c <PDM_Filter_setConfig+0x1b8>
 800b7d0:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800b850 <PDM_Filter_setConfig+0x1bc>
 800b7d4:	e7db      	b.n	800b78e <PDM_Filter_setConfig+0xfa>
 800b7d6:	4b1f      	ldr	r3, [pc, #124]	; (800b854 <PDM_Filter_setConfig+0x1c0>)
 800b7d8:	64a3      	str	r3, [r4, #72]	; 0x48
 800b7da:	e7a7      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b7dc:	4b1e      	ldr	r3, [pc, #120]	; (800b858 <PDM_Filter_setConfig+0x1c4>)
 800b7de:	64a3      	str	r3, [r4, #72]	; 0x48
 800b7e0:	e7a4      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b7e2:	4b1e      	ldr	r3, [pc, #120]	; (800b85c <PDM_Filter_setConfig+0x1c8>)
 800b7e4:	64a3      	str	r3, [r4, #72]	; 0x48
 800b7e6:	e7a1      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b7e8:	4b1d      	ldr	r3, [pc, #116]	; (800b860 <PDM_Filter_setConfig+0x1cc>)
 800b7ea:	64a3      	str	r3, [r4, #72]	; 0x48
 800b7ec:	e79e      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b7ee:	4b1d      	ldr	r3, [pc, #116]	; (800b864 <PDM_Filter_setConfig+0x1d0>)
 800b7f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800b7f2:	e79b      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b7f4:	4b1c      	ldr	r3, [pc, #112]	; (800b868 <PDM_Filter_setConfig+0x1d4>)
 800b7f6:	64a3      	str	r3, [r4, #72]	; 0x48
 800b7f8:	e798      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b7fa:	4b1c      	ldr	r3, [pc, #112]	; (800b86c <PDM_Filter_setConfig+0x1d8>)
 800b7fc:	64a3      	str	r3, [r4, #72]	; 0x48
 800b7fe:	e795      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b800:	4b1b      	ldr	r3, [pc, #108]	; (800b870 <PDM_Filter_setConfig+0x1dc>)
 800b802:	64a3      	str	r3, [r4, #72]	; 0x48
 800b804:	e792      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b806:	4b1b      	ldr	r3, [pc, #108]	; (800b874 <PDM_Filter_setConfig+0x1e0>)
 800b808:	64a3      	str	r3, [r4, #72]	; 0x48
 800b80a:	e78f      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b80c:	4b1a      	ldr	r3, [pc, #104]	; (800b878 <PDM_Filter_setConfig+0x1e4>)
 800b80e:	64a3      	str	r3, [r4, #72]	; 0x48
 800b810:	e78c      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b812:	4b1a      	ldr	r3, [pc, #104]	; (800b87c <PDM_Filter_setConfig+0x1e8>)
 800b814:	64a3      	str	r3, [r4, #72]	; 0x48
 800b816:	e789      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b818:	4b19      	ldr	r3, [pc, #100]	; (800b880 <PDM_Filter_setConfig+0x1ec>)
 800b81a:	64a3      	str	r3, [r4, #72]	; 0x48
 800b81c:	e786      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b81e:	4b19      	ldr	r3, [pc, #100]	; (800b884 <PDM_Filter_setConfig+0x1f0>)
 800b820:	64a3      	str	r3, [r4, #72]	; 0x48
 800b822:	e783      	b.n	800b72c <PDM_Filter_setConfig+0x98>
 800b824:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b826:	42b3      	cmp	r3, r6
 800b828:	f47f af6e 	bne.w	800b708 <PDM_Filter_setConfig+0x74>
 800b82c:	886b      	ldrh	r3, [r5, #2]
 800b82e:	2008      	movs	r0, #8
 800b830:	8663      	strh	r3, [r4, #50]	; 0x32
 800b832:	e775      	b.n	800b720 <PDM_Filter_setConfig+0x8c>
 800b834:	b5e8b5cd 	.word	0xb5e8b5cd
 800b838:	fffffef0 	.word	0xfffffef0
 800b83c:	0800a9ad 	.word	0x0800a9ad
 800b840:	0800bd08 	.word	0x0800bd08
 800b844:	42000000 	.word	0x42000000
 800b848:	3d4ccccd 	.word	0x3d4ccccd
 800b84c:	4f800000 	.word	0x4f800000
 800b850:	00000000 	.word	0x00000000
 800b854:	08009db9 	.word	0x08009db9
 800b858:	08009c41 	.word	0x08009c41
 800b85c:	08009b31 	.word	0x08009b31
 800b860:	0800a5f5 	.word	0x0800a5f5
 800b864:	0800a35d 	.word	0x0800a35d
 800b868:	0800a125 	.word	0x0800a125
 800b86c:	08009f41 	.word	0x08009f41
 800b870:	0800abc9 	.word	0x0800abc9
 800b874:	0800aa8d 	.word	0x0800aa8d
 800b878:	0800b209 	.word	0x0800b209
 800b87c:	0800b00d 	.word	0x0800b00d
 800b880:	0800ae61 	.word	0x0800ae61
 800b884:	0800acf5 	.word	0x0800acf5

0800b888 <__errno>:
 800b888:	4b01      	ldr	r3, [pc, #4]	; (800b890 <__errno+0x8>)
 800b88a:	6818      	ldr	r0, [r3, #0]
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	24000410 	.word	0x24000410

0800b894 <__libc_init_array>:
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	4d0d      	ldr	r5, [pc, #52]	; (800b8cc <__libc_init_array+0x38>)
 800b898:	4c0d      	ldr	r4, [pc, #52]	; (800b8d0 <__libc_init_array+0x3c>)
 800b89a:	1b64      	subs	r4, r4, r5
 800b89c:	10a4      	asrs	r4, r4, #2
 800b89e:	2600      	movs	r6, #0
 800b8a0:	42a6      	cmp	r6, r4
 800b8a2:	d109      	bne.n	800b8b8 <__libc_init_array+0x24>
 800b8a4:	4d0b      	ldr	r5, [pc, #44]	; (800b8d4 <__libc_init_array+0x40>)
 800b8a6:	4c0c      	ldr	r4, [pc, #48]	; (800b8d8 <__libc_init_array+0x44>)
 800b8a8:	f000 f9e6 	bl	800bc78 <_init>
 800b8ac:	1b64      	subs	r4, r4, r5
 800b8ae:	10a4      	asrs	r4, r4, #2
 800b8b0:	2600      	movs	r6, #0
 800b8b2:	42a6      	cmp	r6, r4
 800b8b4:	d105      	bne.n	800b8c2 <__libc_init_array+0x2e>
 800b8b6:	bd70      	pop	{r4, r5, r6, pc}
 800b8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8bc:	4798      	blx	r3
 800b8be:	3601      	adds	r6, #1
 800b8c0:	e7ee      	b.n	800b8a0 <__libc_init_array+0xc>
 800b8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8c6:	4798      	blx	r3
 800b8c8:	3601      	adds	r6, #1
 800b8ca:	e7f2      	b.n	800b8b2 <__libc_init_array+0x1e>
 800b8cc:	0800bfc8 	.word	0x0800bfc8
 800b8d0:	0800bfc8 	.word	0x0800bfc8
 800b8d4:	0800bfc8 	.word	0x0800bfc8
 800b8d8:	0800bfcc 	.word	0x0800bfcc

0800b8dc <memset>:
 800b8dc:	4402      	add	r2, r0
 800b8de:	4603      	mov	r3, r0
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d100      	bne.n	800b8e6 <memset+0xa>
 800b8e4:	4770      	bx	lr
 800b8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b8ea:	e7f9      	b.n	800b8e0 <memset+0x4>

0800b8ec <checkint>:
 800b8ec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b8f0:	2b7e      	cmp	r3, #126	; 0x7e
 800b8f2:	dd10      	ble.n	800b916 <checkint+0x2a>
 800b8f4:	2b96      	cmp	r3, #150	; 0x96
 800b8f6:	dc0c      	bgt.n	800b912 <checkint+0x26>
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b902:	1e5a      	subs	r2, r3, #1
 800b904:	4202      	tst	r2, r0
 800b906:	d106      	bne.n	800b916 <checkint+0x2a>
 800b908:	4203      	tst	r3, r0
 800b90a:	bf0c      	ite	eq
 800b90c:	2002      	moveq	r0, #2
 800b90e:	2001      	movne	r0, #1
 800b910:	4770      	bx	lr
 800b912:	2002      	movs	r0, #2
 800b914:	4770      	bx	lr
 800b916:	2000      	movs	r0, #0
 800b918:	4770      	bx	lr
 800b91a:	0000      	movs	r0, r0
 800b91c:	0000      	movs	r0, r0
	...

0800b920 <powf>:
 800b920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b922:	ee10 1a10 	vmov	r1, s0
 800b926:	ee10 6a90 	vmov	r6, s1
 800b92a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800b92e:	0072      	lsls	r2, r6, #1
 800b930:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b934:	b085      	sub	sp, #20
 800b936:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800b93a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800b93e:	d256      	bcs.n	800b9ee <powf+0xce>
 800b940:	4298      	cmp	r0, r3
 800b942:	d256      	bcs.n	800b9f2 <powf+0xd2>
 800b944:	2000      	movs	r0, #0
 800b946:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800b94a:	4ea3      	ldr	r6, [pc, #652]	; (800bbd8 <powf+0x2b8>)
 800b94c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800b950:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800b954:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800b958:	0dd2      	lsrs	r2, r2, #23
 800b95a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800b95e:	05d2      	lsls	r2, r2, #23
 800b960:	1a8b      	subs	r3, r1, r2
 800b962:	ed97 5b00 	vldr	d5, [r7]
 800b966:	ee07 3a90 	vmov	s15, r3
 800b96a:	15d2      	asrs	r2, r2, #23
 800b96c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b970:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b974:	ed97 5b02 	vldr	d5, [r7, #8]
 800b978:	ee26 2b06 	vmul.f64	d2, d6, d6
 800b97c:	ee22 1b02 	vmul.f64	d1, d2, d2
 800b980:	ee07 2a90 	vmov	s15, r2
 800b984:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800b988:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b98c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b990:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800b994:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800b998:	eea6 5b04 	vfma.f64	d5, d6, d4
 800b99c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800b9a0:	eea6 4b03 	vfma.f64	d4, d6, d3
 800b9a4:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800b9a8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800b9ac:	eea6 7b03 	vfma.f64	d7, d6, d3
 800b9b0:	eea2 7b04 	vfma.f64	d7, d2, d4
 800b9b4:	eea5 7b01 	vfma.f64	d7, d5, d1
 800b9b8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b9bc:	ee10 1a90 	vmov	r1, s1
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	2700      	movs	r7, #0
 800b9c4:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800b9c8:	f248 06be 	movw	r6, #32958	; 0x80be
 800b9cc:	429f      	cmp	r7, r3
 800b9ce:	bf08      	it	eq
 800b9d0:	4296      	cmpeq	r6, r2
 800b9d2:	f080 80b1 	bcs.w	800bb38 <powf+0x218>
 800b9d6:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800bbb8 <powf+0x298>
 800b9da:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e2:	dd79      	ble.n	800bad8 <powf+0x1b8>
 800b9e4:	b005      	add	sp, #20
 800b9e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b9ea:	f000 b91f 	b.w	800bc2c <__math_oflowf>
 800b9ee:	4298      	cmp	r0, r3
 800b9f0:	d32d      	bcc.n	800ba4e <powf+0x12e>
 800b9f2:	b952      	cbnz	r2, 800ba0a <powf+0xea>
 800b9f4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800b9fe:	f240 80cd 	bls.w	800bb9c <powf+0x27c>
 800ba02:	ee30 0a20 	vadd.f32	s0, s0, s1
 800ba06:	b005      	add	sp, #20
 800ba08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba0a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ba0e:	d105      	bne.n	800ba1c <powf+0xfc>
 800ba10:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800ba14:	0076      	lsls	r6, r6, #1
 800ba16:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ba1a:	e7f0      	b.n	800b9fe <powf+0xde>
 800ba1c:	004b      	lsls	r3, r1, #1
 800ba1e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800ba22:	d8ee      	bhi.n	800ba02 <powf+0xe2>
 800ba24:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800ba28:	d1eb      	bne.n	800ba02 <powf+0xe2>
 800ba2a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ba2e:	f000 80b5 	beq.w	800bb9c <powf+0x27c>
 800ba32:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ba36:	ea6f 0606 	mvn.w	r6, r6
 800ba3a:	bf34      	ite	cc
 800ba3c:	2300      	movcc	r3, #0
 800ba3e:	2301      	movcs	r3, #1
 800ba40:	0ff6      	lsrs	r6, r6, #31
 800ba42:	42b3      	cmp	r3, r6
 800ba44:	f040 80ad 	bne.w	800bba2 <powf+0x282>
 800ba48:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800ba4c:	e7db      	b.n	800ba06 <powf+0xe6>
 800ba4e:	004f      	lsls	r7, r1, #1
 800ba50:	1e7a      	subs	r2, r7, #1
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d31c      	bcc.n	800ba90 <powf+0x170>
 800ba56:	2900      	cmp	r1, #0
 800ba58:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ba5c:	da0f      	bge.n	800ba7e <powf+0x15e>
 800ba5e:	ee10 0a90 	vmov	r0, s1
 800ba62:	f7ff ff43 	bl	800b8ec <checkint>
 800ba66:	2801      	cmp	r0, #1
 800ba68:	d109      	bne.n	800ba7e <powf+0x15e>
 800ba6a:	eeb1 0a40 	vneg.f32	s0, s0
 800ba6e:	b947      	cbnz	r7, 800ba82 <powf+0x162>
 800ba70:	2e00      	cmp	r6, #0
 800ba72:	dac8      	bge.n	800ba06 <powf+0xe6>
 800ba74:	b005      	add	sp, #20
 800ba76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ba7a:	f000 b8dd 	b.w	800bc38 <__math_divzerof>
 800ba7e:	2000      	movs	r0, #0
 800ba80:	e7f5      	b.n	800ba6e <powf+0x14e>
 800ba82:	2e00      	cmp	r6, #0
 800ba84:	dabf      	bge.n	800ba06 <powf+0xe6>
 800ba86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba8a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ba8e:	e7ba      	b.n	800ba06 <powf+0xe6>
 800ba90:	2900      	cmp	r1, #0
 800ba92:	da1f      	bge.n	800bad4 <powf+0x1b4>
 800ba94:	ee10 0a90 	vmov	r0, s1
 800ba98:	f7ff ff28 	bl	800b8ec <checkint>
 800ba9c:	b920      	cbnz	r0, 800baa8 <powf+0x188>
 800ba9e:	b005      	add	sp, #20
 800baa0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800baa4:	f000 b8d8 	b.w	800bc58 <__math_invalidf>
 800baa8:	2801      	cmp	r0, #1
 800baaa:	bf14      	ite	ne
 800baac:	2000      	movne	r0, #0
 800baae:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bab2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bab6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800baba:	f4bf af44 	bcs.w	800b946 <powf+0x26>
 800babe:	eddf 7a47 	vldr	s15, [pc, #284]	; 800bbdc <powf+0x2bc>
 800bac2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bac6:	ee10 3a10 	vmov	r3, s0
 800baca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bace:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800bad2:	e738      	b.n	800b946 <powf+0x26>
 800bad4:	2000      	movs	r0, #0
 800bad6:	e7ee      	b.n	800bab6 <powf+0x196>
 800bad8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800bbc0 <powf+0x2a0>
 800badc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae4:	dd10      	ble.n	800bb08 <powf+0x1e8>
 800bae6:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800baea:	2800      	cmp	r0, #0
 800baec:	d15c      	bne.n	800bba8 <powf+0x288>
 800baee:	9302      	str	r3, [sp, #8]
 800baf0:	eddd 7a02 	vldr	s15, [sp, #8]
 800baf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bafc:	eef4 7a47 	vcmp.f32	s15, s14
 800bb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb04:	f47f af6e 	bne.w	800b9e4 <powf+0xc4>
 800bb08:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bbc8 <powf+0x2a8>
 800bb0c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb14:	d804      	bhi.n	800bb20 <powf+0x200>
 800bb16:	b005      	add	sp, #20
 800bb18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bb1c:	f000 b87a 	b.w	800bc14 <__math_uflowf>
 800bb20:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800bbd0 <powf+0x2b0>
 800bb24:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb2c:	d504      	bpl.n	800bb38 <powf+0x218>
 800bb2e:	b005      	add	sp, #20
 800bb30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bb34:	f000 b874 	b.w	800bc20 <__math_may_uflowf>
 800bb38:	4b29      	ldr	r3, [pc, #164]	; (800bbe0 <powf+0x2c0>)
 800bb3a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800bb3e:	ee30 6b07 	vadd.f64	d6, d0, d7
 800bb42:	ed8d 6b00 	vstr	d6, [sp]
 800bb46:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bb4a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800bb4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bb52:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bb56:	f006 011f 	and.w	r1, r6, #31
 800bb5a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bb5e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800bb62:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800bb66:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800bb6a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800bb6e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bb72:	ee27 5b07 	vmul.f64	d5, d7, d7
 800bb76:	1836      	adds	r6, r6, r0
 800bb78:	2300      	movs	r3, #0
 800bb7a:	eb13 040c 	adds.w	r4, r3, ip
 800bb7e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800bb82:	eb41 050e 	adc.w	r5, r1, lr
 800bb86:	eea7 0b04 	vfma.f64	d0, d7, d4
 800bb8a:	ec45 4b17 	vmov	d7, r4, r5
 800bb8e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800bb92:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bb96:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bb9a:	e734      	b.n	800ba06 <powf+0xe6>
 800bb9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bba0:	e731      	b.n	800ba06 <powf+0xe6>
 800bba2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bbe4 <powf+0x2c4>
 800bba6:	e72e      	b.n	800ba06 <powf+0xe6>
 800bba8:	9303      	str	r3, [sp, #12]
 800bbaa:	eddd 7a03 	vldr	s15, [sp, #12]
 800bbae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bbb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbb6:	e7a1      	b.n	800bafc <powf+0x1dc>
 800bbb8:	ffd1d571 	.word	0xffd1d571
 800bbbc:	405fffff 	.word	0x405fffff
 800bbc0:	ffa3aae2 	.word	0xffa3aae2
 800bbc4:	405fffff 	.word	0x405fffff
 800bbc8:	00000000 	.word	0x00000000
 800bbcc:	c062c000 	.word	0xc062c000
 800bbd0:	00000000 	.word	0x00000000
 800bbd4:	c062a000 	.word	0xc062a000
 800bbd8:	0800bd58 	.word	0x0800bd58
 800bbdc:	4b000000 	.word	0x4b000000
 800bbe0:	0800be80 	.word	0x0800be80
 800bbe4:	00000000 	.word	0x00000000

0800bbe8 <with_errnof>:
 800bbe8:	b513      	push	{r0, r1, r4, lr}
 800bbea:	4604      	mov	r4, r0
 800bbec:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bbf0:	f7ff fe4a 	bl	800b888 <__errno>
 800bbf4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bbf8:	6004      	str	r4, [r0, #0]
 800bbfa:	b002      	add	sp, #8
 800bbfc:	bd10      	pop	{r4, pc}

0800bbfe <xflowf>:
 800bbfe:	b130      	cbz	r0, 800bc0e <xflowf+0x10>
 800bc00:	eef1 7a40 	vneg.f32	s15, s0
 800bc04:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc08:	2022      	movs	r0, #34	; 0x22
 800bc0a:	f7ff bfed 	b.w	800bbe8 <with_errnof>
 800bc0e:	eef0 7a40 	vmov.f32	s15, s0
 800bc12:	e7f7      	b.n	800bc04 <xflowf+0x6>

0800bc14 <__math_uflowf>:
 800bc14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc1c <__math_uflowf+0x8>
 800bc18:	f7ff bff1 	b.w	800bbfe <xflowf>
 800bc1c:	10000000 	.word	0x10000000

0800bc20 <__math_may_uflowf>:
 800bc20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc28 <__math_may_uflowf+0x8>
 800bc24:	f7ff bfeb 	b.w	800bbfe <xflowf>
 800bc28:	1a200000 	.word	0x1a200000

0800bc2c <__math_oflowf>:
 800bc2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc34 <__math_oflowf+0x8>
 800bc30:	f7ff bfe5 	b.w	800bbfe <xflowf>
 800bc34:	70000000 	.word	0x70000000

0800bc38 <__math_divzerof>:
 800bc38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bc3c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800bc40:	2800      	cmp	r0, #0
 800bc42:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800bc46:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800bc54 <__math_divzerof+0x1c>
 800bc4a:	2022      	movs	r0, #34	; 0x22
 800bc4c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bc50:	f7ff bfca 	b.w	800bbe8 <with_errnof>
 800bc54:	00000000 	.word	0x00000000

0800bc58 <__math_invalidf>:
 800bc58:	eef0 7a40 	vmov.f32	s15, s0
 800bc5c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bc60:	eef4 7a67 	vcmp.f32	s15, s15
 800bc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc68:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800bc6c:	d602      	bvs.n	800bc74 <__math_invalidf+0x1c>
 800bc6e:	2021      	movs	r0, #33	; 0x21
 800bc70:	f7ff bfba 	b.w	800bbe8 <with_errnof>
 800bc74:	4770      	bx	lr
	...

0800bc78 <_init>:
 800bc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7a:	bf00      	nop
 800bc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7e:	bc08      	pop	{r3}
 800bc80:	469e      	mov	lr, r3
 800bc82:	4770      	bx	lr

0800bc84 <_fini>:
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	bf00      	nop
 800bc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8a:	bc08      	pop	{r3}
 800bc8c:	469e      	mov	lr, r3
 800bc8e:	4770      	bx	lr
