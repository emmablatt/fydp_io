
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080096a0  080096a0  000196a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000474  24000000  08009968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000728  24000474  08009ddc  00020474  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000b9c  08009ddc  00020b9c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f602  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002f12  00000000  00000000  0003faa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000cf0  00000000  00000000  000429b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c00  00000000  00000000  000436a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000035a3  00000000  00000000  000442a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012fd5  00000000  00000000  0004784b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150079  00000000  00000000  0005a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001aa899  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000035bc  00000000  00000000  001aa96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009688 	.word	0x08009688

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	08009688 	.word	0x08009688

08000310 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <HAL_SAI_ErrorCallback+0x28>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d103      	bne.n	800032a <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f80a 	bl	800033c <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8000328:	e002      	b.n	8000330 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 800032a:	2000      	movs	r0, #0
 800032c:	f000 f908 	bl	8000540 <BSP_AUDIO_IN_Error_CallBack>
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40015824 	.word	0x40015824

0800033c <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d002      	beq.n	800036e <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8000368:	f06f 0301 	mvn.w	r3, #1
 800036c:	e085      	b.n	800047a <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 800036e:	4b45      	ldr	r3, [pc, #276]	; (8000484 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000374:	4a43      	ldr	r2, [pc, #268]	; (8000484 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800037a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800037e:	4b41      	ldr	r3, [pc, #260]	; (8000484 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000388:	613b      	str	r3, [r7, #16]
 800038a:	693b      	ldr	r3, [r7, #16]


    for(index = 0; index < ChnlNbrIn; index++)
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e06e      	b.n	8000470 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8000392:	4a3d      	ldr	r2, [pc, #244]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	214c      	movs	r1, #76	; 0x4c
 8000398:	fb01 f303 	mul.w	r3, r1, r3
 800039c:	4413      	add	r3, r2
 800039e:	2201      	movs	r2, #1
 80003a0:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80003a2:	4a39      	ldr	r2, [pc, #228]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	214c      	movs	r1, #76	; 0x4c
 80003a8:	fb01 f303 	mul.w	r3, r1, r3
 80003ac:	4413      	add	r3, r2
 80003ae:	3302      	adds	r3, #2
 80003b0:	2200      	movs	r2, #0
 80003b2:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80003b4:	4a34      	ldr	r2, [pc, #208]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	214c      	movs	r1, #76	; 0x4c
 80003ba:	fb01 f303 	mul.w	r3, r1, r3
 80003be:	4413      	add	r3, r2
 80003c0:	3304      	adds	r3, #4
 80003c2:	4a32      	ldr	r2, [pc, #200]	; (800048c <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 80003c4:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	b298      	uxth	r0, r3
 80003ca:	4a2f      	ldr	r2, [pc, #188]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	214c      	movs	r1, #76	; 0x4c
 80003d0:	fb01 f303 	mul.w	r3, r1, r3
 80003d4:	4413      	add	r3, r2
 80003d6:	330a      	adds	r3, #10
 80003d8:	4602      	mov	r2, r0
 80003da:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	b298      	uxth	r0, r3
 80003e0:	4a29      	ldr	r2, [pc, #164]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	214c      	movs	r1, #76	; 0x4c
 80003e6:	fb01 f303 	mul.w	r3, r1, r3
 80003ea:	4413      	add	r3, r2
 80003ec:	3308      	adds	r3, #8
 80003ee:	4602      	mov	r2, r0
 80003f0:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	224c      	movs	r2, #76	; 0x4c
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	4a23      	ldr	r2, [pc, #140]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003fc:	4413      	add	r3, r2
 80003fe:	4618      	mov	r0, r3
 8000400:	f008 fd80 	bl	8008f04 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	4a22      	ldr	r2, [pc, #136]	; (8000490 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8000408:	fba2 2303 	umull	r2, r3, r2, r3
 800040c:	099b      	lsrs	r3, r3, #6
 800040e:	b298      	uxth	r0, r3
 8000410:	4920      	ldr	r1, [pc, #128]	; (8000494 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	4613      	mov	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	4413      	add	r3, r2
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	440b      	add	r3, r1
 800041e:	3302      	adds	r3, #2
 8000420:	4602      	mov	r2, r0
 8000422:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 8000424:	491b      	ldr	r1, [pc, #108]	; (8000494 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8000426:	697a      	ldr	r2, [r7, #20]
 8000428:	4613      	mov	r3, r2
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	4413      	add	r3, r2
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	440b      	add	r3, r1
 8000432:	3304      	adds	r3, #4
 8000434:	2218      	movs	r2, #24
 8000436:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8000438:	4916      	ldr	r1, [pc, #88]	; (8000494 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800043a:	697a      	ldr	r2, [r7, #20]
 800043c:	4613      	mov	r3, r2
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	440b      	add	r3, r1
 8000446:	2202      	movs	r2, #2
 8000448:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	224c      	movs	r2, #76	; 0x4c
 800044e:	fb02 f303 	mul.w	r3, r2, r3
 8000452:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000454:	1898      	adds	r0, r3, r2
 8000456:	697a      	ldr	r2, [r7, #20]
 8000458:	4613      	mov	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4413      	add	r3, r2
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8000462:	4413      	add	r3, r2
 8000464:	4619      	mov	r1, r3
 8000466:	f008 fe1d 	bl	80090a4 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	3301      	adds	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
 8000470:	697a      	ldr	r2, [r7, #20]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	429a      	cmp	r2, r3
 8000476:	d38c      	bcc.n	8000392 <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	58024400 	.word	0x58024400
 8000488:	240005c4 	.word	0x240005c4
 800048c:	7e809d48 	.word	0x7e809d48
 8000490:	10624dd3 	.word	0x10624dd3
 8000494:	2400065c 	.word	0x2400065c

08000498 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d003      	beq.n	80004b6 <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80004ae:	f06f 0301 	mvn.w	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	e011      	b.n	80004da <BSP_AUDIO_IN_RecordPDM+0x42>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[AUDIO_IN_INSTANCE], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[AUDIO_IN_INSTANCE].BitsPerSample/8U))) != HAL_OK)
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <BSP_AUDIO_IN_RecordPDM+0x4c>)
 80004b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ba:	08db      	lsrs	r3, r3, #3
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	461a      	mov	r2, r3
 80004c6:	68b9      	ldr	r1, [r7, #8]
 80004c8:	4807      	ldr	r0, [pc, #28]	; (80004e8 <BSP_AUDIO_IN_RecordPDM+0x50>)
 80004ca:	f006 f8af 	bl	800662c <HAL_SAI_Receive_DMA>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d002      	beq.n	80004da <BSP_AUDIO_IN_RecordPDM+0x42>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80004d4:	f06f 0303 	mvn.w	r3, #3
 80004d8:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 80004da:	697b      	ldr	r3, [r7, #20]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	240008c4 	.word	0x240008c4
 80004e8:	2400052c 	.word	0x2400052c

080004ec <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f819 	bl	800052c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b082      	sub	sp, #8
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 800050a:	2000      	movs	r0, #0
 800050c:	f000 f804 	bl	8000518 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055a:	2003      	movs	r0, #3
 800055c:	f000 f95c 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000560:	f003 fbe2 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8000564:	4602      	mov	r2, r0
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_Init+0x68>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	0a1b      	lsrs	r3, r3, #8
 800056c:	f003 030f 	and.w	r3, r3, #15
 8000570:	4913      	ldr	r1, [pc, #76]	; (80005c0 <HAL_Init+0x6c>)
 8000572:	5ccb      	ldrb	r3, [r1, r3]
 8000574:	f003 031f 	and.w	r3, r3, #31
 8000578:	fa22 f303 	lsr.w	r3, r2, r3
 800057c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_Init+0x68>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 030f 	and.w	r3, r3, #15
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_Init+0x6c>)
 8000588:	5cd3      	ldrb	r3, [r2, r3]
 800058a:	f003 031f 	and.w	r3, r3, #31
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	fa22 f303 	lsr.w	r3, r2, r3
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HAL_Init+0x70>)
 8000596:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <HAL_Init+0x74>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f814 	bl	80005cc <HAL_InitTick>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80005aa:	2301      	movs	r3, #1
 80005ac:	e002      	b.n	80005b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80005ae:	f006 fd1f 	bl	8006ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	58024400 	.word	0x58024400
 80005c0:	080096e0 	.word	0x080096e0
 80005c4:	2400040c 	.word	0x2400040c
 80005c8:	24000408 	.word	0x24000408

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_InitTick+0x60>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d101      	bne.n	80005e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80005dc:	2301      	movs	r3, #1
 80005de:	e021      	b.n	8000624 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <HAL_InitTick+0x64>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_InitTick+0x60>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f941 	bl	800087e <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000614:	f000 f90b 	bl	800082e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_InitTick+0x68>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	24000404 	.word	0x24000404
 8000630:	24000408 	.word	0x24000408
 8000634:	24000400 	.word	0x24000400

08000638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	24000404 	.word	0x24000404
 800065c:	24000954 	.word	0x24000954

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	24000954 	.word	0x24000954

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <__NVIC_SetPriorityGrouping+0x40>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006a2:	4313      	orrs	r3, r2
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <__NVIC_SetPriorityGrouping+0x40>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00
 80006bc:	05fa0000 	.word	0x05fa0000

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db0b      	blt.n	8000706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	f003 021f 	and.w	r2, r3, #31
 80006f4:	4907      	ldr	r1, [pc, #28]	; (8000714 <__NVIC_EnableIRQ+0x38>)
 80006f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fa:	095b      	lsrs	r3, r3, #5
 80006fc:	2001      	movs	r0, #1
 80006fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100

08000718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db0a      	blt.n	8000742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <__NVIC_SetPriority+0x4c>)
 8000732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000740:	e00a      	b.n	8000758 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <__NVIC_SetPriority+0x50>)
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	3b04      	subs	r3, #4
 8000750:	0112      	lsls	r2, r2, #4
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	440b      	add	r3, r1
 8000756:	761a      	strb	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f1c3 0307 	rsb	r3, r3, #7
 8000786:	2b04      	cmp	r3, #4
 8000788:	bf28      	it	cs
 800078a:	2304      	movcs	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3304      	adds	r3, #4
 8000792:	2b06      	cmp	r3, #6
 8000794:	d902      	bls.n	800079c <NVIC_EncodePriority+0x30>
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3b03      	subs	r3, #3
 800079a:	e000      	b.n	800079e <NVIC_EncodePriority+0x32>
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43da      	mvns	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	401a      	ands	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43d9      	mvns	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	4313      	orrs	r3, r2
         );
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007f8:	f7ff ff8e 	bl	8000718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff29 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff40 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff90 	bl	800076c <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5f 	bl	8000718 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff33 	bl	80006dc <__NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ffa4 	bl	80007d4 <SysTick_Config>
 800088c:	4603      	mov	r3, r0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e054      	b.n	8000954 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7f5b      	ldrb	r3, [r3, #29]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d105      	bne.n	80008c0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f006 fbb2 	bl	8007024 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2202      	movs	r2, #2
 80008c4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d10c      	bne.n	80008e8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a22      	ldr	r2, [pc, #136]	; (800095c <HAL_CRC_Init+0xc4>)
 80008d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f022 0218 	bic.w	r2, r2, #24
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	e00c      	b.n	8000902 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6899      	ldr	r1, [r3, #8]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	461a      	mov	r2, r3
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f834 	bl	8000960 <HAL_CRCEx_Polynomial_Set>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e028      	b.n	8000954 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	795b      	ldrb	r3, [r3, #5]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d105      	bne.n	8000916 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	e004      	b.n	8000920 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	6912      	ldr	r2, [r2, #16]
 800091e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695a      	ldr	r2, [r3, #20]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	430a      	orrs	r2, r1
 8000934:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	699a      	ldr	r2, [r3, #24]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	430a      	orrs	r2, r1
 800094a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2201      	movs	r2, #1
 8000950:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	04c11db7 	.word	0x04c11db7

08000960 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000960:	b480      	push	{r7}
 8000962:	b087      	sub	sp, #28
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000970:	231f      	movs	r3, #31
 8000972:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000974:	bf00      	nop
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	1e5a      	subs	r2, r3, #1
 800097a:	613a      	str	r2, [r7, #16]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d009      	beq.n	8000994 <HAL_CRCEx_Polynomial_Set+0x34>
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	f003 031f 	and.w	r3, r3, #31
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	fa22 f303 	lsr.w	r3, r2, r3
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0f0      	beq.n	8000976 <HAL_CRCEx_Polynomial_Set+0x16>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b18      	cmp	r3, #24
 8000998:	d846      	bhi.n	8000a28 <HAL_CRCEx_Polynomial_Set+0xc8>
 800099a:	a201      	add	r2, pc, #4	; (adr r2, 80009a0 <HAL_CRCEx_Polynomial_Set+0x40>)
 800099c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a0:	08000a2f 	.word	0x08000a2f
 80009a4:	08000a29 	.word	0x08000a29
 80009a8:	08000a29 	.word	0x08000a29
 80009ac:	08000a29 	.word	0x08000a29
 80009b0:	08000a29 	.word	0x08000a29
 80009b4:	08000a29 	.word	0x08000a29
 80009b8:	08000a29 	.word	0x08000a29
 80009bc:	08000a29 	.word	0x08000a29
 80009c0:	08000a1d 	.word	0x08000a1d
 80009c4:	08000a29 	.word	0x08000a29
 80009c8:	08000a29 	.word	0x08000a29
 80009cc:	08000a29 	.word	0x08000a29
 80009d0:	08000a29 	.word	0x08000a29
 80009d4:	08000a29 	.word	0x08000a29
 80009d8:	08000a29 	.word	0x08000a29
 80009dc:	08000a29 	.word	0x08000a29
 80009e0:	08000a11 	.word	0x08000a11
 80009e4:	08000a29 	.word	0x08000a29
 80009e8:	08000a29 	.word	0x08000a29
 80009ec:	08000a29 	.word	0x08000a29
 80009f0:	08000a29 	.word	0x08000a29
 80009f4:	08000a29 	.word	0x08000a29
 80009f8:	08000a29 	.word	0x08000a29
 80009fc:	08000a29 	.word	0x08000a29
 8000a00:	08000a05 	.word	0x08000a05
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d913      	bls.n	8000a32 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a0e:	e010      	b.n	8000a32 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	2b07      	cmp	r3, #7
 8000a14:	d90f      	bls.n	8000a36 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a1a:	e00c      	b.n	8000a36 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	2b0f      	cmp	r3, #15
 8000a20:	d90b      	bls.n	8000a3a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a26:	e008      	b.n	8000a3a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8000a2c:	e006      	b.n	8000a3c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a2e:	bf00      	nop
 8000a30:	e004      	b.n	8000a3c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a32:	bf00      	nop
 8000a34:	e002      	b.n	8000a3c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a36:	bf00      	nop
 8000a38:	e000      	b.n	8000a3c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a3a:	bf00      	nop
  }
  if (status == HAL_OK)
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d10d      	bne.n	8000a5e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f023 0118 	bic.w	r1, r3, #24
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	371c      	adds	r7, #28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff fdf4 	bl	8000660 <HAL_GetTick>
 8000a78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e314      	b.n	80010ae <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a66      	ldr	r2, [pc, #408]	; (8000c24 <HAL_DMA_Init+0x1b8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d04a      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a65      	ldr	r2, [pc, #404]	; (8000c28 <HAL_DMA_Init+0x1bc>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d045      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a63      	ldr	r2, [pc, #396]	; (8000c2c <HAL_DMA_Init+0x1c0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d040      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a62      	ldr	r2, [pc, #392]	; (8000c30 <HAL_DMA_Init+0x1c4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d03b      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a60      	ldr	r2, [pc, #384]	; (8000c34 <HAL_DMA_Init+0x1c8>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d036      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a5f      	ldr	r2, [pc, #380]	; (8000c38 <HAL_DMA_Init+0x1cc>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d031      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a5d      	ldr	r2, [pc, #372]	; (8000c3c <HAL_DMA_Init+0x1d0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d02c      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a5c      	ldr	r2, [pc, #368]	; (8000c40 <HAL_DMA_Init+0x1d4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d027      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a5a      	ldr	r2, [pc, #360]	; (8000c44 <HAL_DMA_Init+0x1d8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d022      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a59      	ldr	r2, [pc, #356]	; (8000c48 <HAL_DMA_Init+0x1dc>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d01d      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a57      	ldr	r2, [pc, #348]	; (8000c4c <HAL_DMA_Init+0x1e0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d018      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a56      	ldr	r2, [pc, #344]	; (8000c50 <HAL_DMA_Init+0x1e4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d013      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a54      	ldr	r2, [pc, #336]	; (8000c54 <HAL_DMA_Init+0x1e8>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d00e      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a53      	ldr	r2, [pc, #332]	; (8000c58 <HAL_DMA_Init+0x1ec>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d009      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a51      	ldr	r2, [pc, #324]	; (8000c5c <HAL_DMA_Init+0x1f0>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d004      	beq.n	8000b24 <HAL_DMA_Init+0xb8>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a50      	ldr	r2, [pc, #320]	; (8000c60 <HAL_DMA_Init+0x1f4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d101      	bne.n	8000b28 <HAL_DMA_Init+0xbc>
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <HAL_DMA_Init+0xbe>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 813c 	beq.w	8000da8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2202      	movs	r2, #2
 8000b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a37      	ldr	r2, [pc, #220]	; (8000c24 <HAL_DMA_Init+0x1b8>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d04a      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a36      	ldr	r2, [pc, #216]	; (8000c28 <HAL_DMA_Init+0x1bc>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d045      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a34      	ldr	r2, [pc, #208]	; (8000c2c <HAL_DMA_Init+0x1c0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d040      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a33      	ldr	r2, [pc, #204]	; (8000c30 <HAL_DMA_Init+0x1c4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d03b      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a31      	ldr	r2, [pc, #196]	; (8000c34 <HAL_DMA_Init+0x1c8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d036      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a30      	ldr	r2, [pc, #192]	; (8000c38 <HAL_DMA_Init+0x1cc>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d031      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <HAL_DMA_Init+0x1d0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d02c      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a2d      	ldr	r2, [pc, #180]	; (8000c40 <HAL_DMA_Init+0x1d4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d027      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a2b      	ldr	r2, [pc, #172]	; (8000c44 <HAL_DMA_Init+0x1d8>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d022      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a2a      	ldr	r2, [pc, #168]	; (8000c48 <HAL_DMA_Init+0x1dc>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d01d      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a28      	ldr	r2, [pc, #160]	; (8000c4c <HAL_DMA_Init+0x1e0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d018      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a27      	ldr	r2, [pc, #156]	; (8000c50 <HAL_DMA_Init+0x1e4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d013      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <HAL_DMA_Init+0x1e8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d00e      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a24      	ldr	r2, [pc, #144]	; (8000c58 <HAL_DMA_Init+0x1ec>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d009      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <HAL_DMA_Init+0x1f0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d004      	beq.n	8000be0 <HAL_DMA_Init+0x174>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <HAL_DMA_Init+0x1f4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d108      	bne.n	8000bf2 <HAL_DMA_Init+0x186>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f022 0201 	bic.w	r2, r2, #1
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e007      	b.n	8000c02 <HAL_DMA_Init+0x196>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0201 	bic.w	r2, r2, #1
 8000c00:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000c02:	e02f      	b.n	8000c64 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c04:	f7ff fd2c 	bl	8000660 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b05      	cmp	r3, #5
 8000c10:	d928      	bls.n	8000c64 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2220      	movs	r2, #32
 8000c16:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e244      	b.n	80010ae <HAL_DMA_Init+0x642>
 8000c24:	40020010 	.word	0x40020010
 8000c28:	40020028 	.word	0x40020028
 8000c2c:	40020040 	.word	0x40020040
 8000c30:	40020058 	.word	0x40020058
 8000c34:	40020070 	.word	0x40020070
 8000c38:	40020088 	.word	0x40020088
 8000c3c:	400200a0 	.word	0x400200a0
 8000c40:	400200b8 	.word	0x400200b8
 8000c44:	40020410 	.word	0x40020410
 8000c48:	40020428 	.word	0x40020428
 8000c4c:	40020440 	.word	0x40020440
 8000c50:	40020458 	.word	0x40020458
 8000c54:	40020470 	.word	0x40020470
 8000c58:	40020488 	.word	0x40020488
 8000c5c:	400204a0 	.word	0x400204a0
 8000c60:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1c8      	bne.n	8000c04 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	4b84      	ldr	r3, [pc, #528]	; (8000e90 <HAL_DMA_Init+0x424>)
 8000c7e:	4013      	ands	r3, r2
 8000c80:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000c8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c96:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
 8000ca8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d107      	bne.n	8000cc8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b28      	cmp	r3, #40	; 0x28
 8000cce:	d903      	bls.n	8000cd8 <HAL_DMA_Init+0x26c>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8000cd6:	d91f      	bls.n	8000d18 <HAL_DMA_Init+0x2ac>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8000cde:	d903      	bls.n	8000ce8 <HAL_DMA_Init+0x27c>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b42      	cmp	r3, #66	; 0x42
 8000ce6:	d917      	bls.n	8000d18 <HAL_DMA_Init+0x2ac>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b46      	cmp	r3, #70	; 0x46
 8000cee:	d903      	bls.n	8000cf8 <HAL_DMA_Init+0x28c>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b48      	cmp	r3, #72	; 0x48
 8000cf6:	d90f      	bls.n	8000d18 <HAL_DMA_Init+0x2ac>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b4e      	cmp	r3, #78	; 0x4e
 8000cfe:	d903      	bls.n	8000d08 <HAL_DMA_Init+0x29c>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b52      	cmp	r3, #82	; 0x52
 8000d06:	d907      	bls.n	8000d18 <HAL_DMA_Init+0x2ac>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b73      	cmp	r3, #115	; 0x73
 8000d0e:	d905      	bls.n	8000d1c <HAL_DMA_Init+0x2b0>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b77      	cmp	r3, #119	; 0x77
 8000d16:	d801      	bhi.n	8000d1c <HAL_DMA_Init+0x2b0>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <HAL_DMA_Init+0x2b2>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d28:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f023 0307 	bic.w	r3, r3, #7
 8000d40:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d117      	bne.n	8000d84 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00e      	beq.n	8000d84 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f001 fdd8 	bl	800291c <DMA_CheckFifoParam>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d008      	beq.n	8000d84 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2240      	movs	r2, #64	; 0x40
 8000d76:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e194      	b.n	80010ae <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f001 fd13 	bl	80027b8 <DMA_CalcBaseAndBitshift>
 8000d92:	4603      	mov	r3, r0
 8000d94:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d9a:	f003 031f 	and.w	r3, r3, #31
 8000d9e:	223f      	movs	r2, #63	; 0x3f
 8000da0:	409a      	lsls	r2, r3
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	e0ca      	b.n	8000f3e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a39      	ldr	r2, [pc, #228]	; (8000e94 <HAL_DMA_Init+0x428>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d022      	beq.n	8000df8 <HAL_DMA_Init+0x38c>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a38      	ldr	r2, [pc, #224]	; (8000e98 <HAL_DMA_Init+0x42c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d01d      	beq.n	8000df8 <HAL_DMA_Init+0x38c>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a36      	ldr	r2, [pc, #216]	; (8000e9c <HAL_DMA_Init+0x430>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d018      	beq.n	8000df8 <HAL_DMA_Init+0x38c>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a35      	ldr	r2, [pc, #212]	; (8000ea0 <HAL_DMA_Init+0x434>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d013      	beq.n	8000df8 <HAL_DMA_Init+0x38c>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a33      	ldr	r2, [pc, #204]	; (8000ea4 <HAL_DMA_Init+0x438>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00e      	beq.n	8000df8 <HAL_DMA_Init+0x38c>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a32      	ldr	r2, [pc, #200]	; (8000ea8 <HAL_DMA_Init+0x43c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d009      	beq.n	8000df8 <HAL_DMA_Init+0x38c>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a30      	ldr	r2, [pc, #192]	; (8000eac <HAL_DMA_Init+0x440>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d004      	beq.n	8000df8 <HAL_DMA_Init+0x38c>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <HAL_DMA_Init+0x444>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d101      	bne.n	8000dfc <HAL_DMA_Init+0x390>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <HAL_DMA_Init+0x392>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8094 	beq.w	8000f2c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a22      	ldr	r2, [pc, #136]	; (8000e94 <HAL_DMA_Init+0x428>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d021      	beq.n	8000e52 <HAL_DMA_Init+0x3e6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <HAL_DMA_Init+0x42c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d01c      	beq.n	8000e52 <HAL_DMA_Init+0x3e6>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <HAL_DMA_Init+0x430>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d017      	beq.n	8000e52 <HAL_DMA_Init+0x3e6>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <HAL_DMA_Init+0x434>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d012      	beq.n	8000e52 <HAL_DMA_Init+0x3e6>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <HAL_DMA_Init+0x438>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_DMA_Init+0x3e6>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <HAL_DMA_Init+0x43c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d008      	beq.n	8000e52 <HAL_DMA_Init+0x3e6>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a19      	ldr	r2, [pc, #100]	; (8000eac <HAL_DMA_Init+0x440>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d003      	beq.n	8000e52 <HAL_DMA_Init+0x3e6>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <HAL_DMA_Init+0x444>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2202      	movs	r2, #2
 8000e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_DMA_Init+0x448>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b40      	cmp	r3, #64	; 0x40
 8000e7a:	d01d      	beq.n	8000eb8 <HAL_DMA_Init+0x44c>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b80      	cmp	r3, #128	; 0x80
 8000e82:	d102      	bne.n	8000e8a <HAL_DMA_Init+0x41e>
 8000e84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e88:	e017      	b.n	8000eba <HAL_DMA_Init+0x44e>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e015      	b.n	8000eba <HAL_DMA_Init+0x44e>
 8000e8e:	bf00      	nop
 8000e90:	fe10803f 	.word	0xfe10803f
 8000e94:	58025408 	.word	0x58025408
 8000e98:	5802541c 	.word	0x5802541c
 8000e9c:	58025430 	.word	0x58025430
 8000ea0:	58025444 	.word	0x58025444
 8000ea4:	58025458 	.word	0x58025458
 8000ea8:	5802546c 	.word	0x5802546c
 8000eac:	58025480 	.word	0x58025480
 8000eb0:	58025494 	.word	0x58025494
 8000eb4:	fffe000f 	.word	0xfffe000f
 8000eb8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68d2      	ldr	r2, [r2, #12]
 8000ebe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000ec0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ee8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b6e      	ldr	r3, [pc, #440]	; (80010b8 <HAL_DMA_Init+0x64c>)
 8000f00:	4413      	add	r3, r2
 8000f02:	4a6e      	ldr	r2, [pc, #440]	; (80010bc <HAL_DMA_Init+0x650>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	009a      	lsls	r2, r3, #2
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f001 fc51 	bl	80027b8 <DMA_CalcBaseAndBitshift>
 8000f16:	4603      	mov	r3, r0
 8000f18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	2201      	movs	r2, #1
 8000f24:	409a      	lsls	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	e008      	b.n	8000f3e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2240      	movs	r2, #64	; 0x40
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0b7      	b.n	80010ae <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a5f      	ldr	r2, [pc, #380]	; (80010c0 <HAL_DMA_Init+0x654>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d072      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a5d      	ldr	r2, [pc, #372]	; (80010c4 <HAL_DMA_Init+0x658>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d06d      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a5c      	ldr	r2, [pc, #368]	; (80010c8 <HAL_DMA_Init+0x65c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d068      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a5a      	ldr	r2, [pc, #360]	; (80010cc <HAL_DMA_Init+0x660>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d063      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a59      	ldr	r2, [pc, #356]	; (80010d0 <HAL_DMA_Init+0x664>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d05e      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_DMA_Init+0x668>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d059      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_DMA_Init+0x66c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d054      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a54      	ldr	r2, [pc, #336]	; (80010dc <HAL_DMA_Init+0x670>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d04f      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a53      	ldr	r2, [pc, #332]	; (80010e0 <HAL_DMA_Init+0x674>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d04a      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a51      	ldr	r2, [pc, #324]	; (80010e4 <HAL_DMA_Init+0x678>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d045      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a50      	ldr	r2, [pc, #320]	; (80010e8 <HAL_DMA_Init+0x67c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d040      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a4e      	ldr	r2, [pc, #312]	; (80010ec <HAL_DMA_Init+0x680>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d03b      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a4d      	ldr	r2, [pc, #308]	; (80010f0 <HAL_DMA_Init+0x684>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d036      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a4b      	ldr	r2, [pc, #300]	; (80010f4 <HAL_DMA_Init+0x688>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d031      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <HAL_DMA_Init+0x68c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d02c      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a48      	ldr	r2, [pc, #288]	; (80010fc <HAL_DMA_Init+0x690>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d027      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a47      	ldr	r2, [pc, #284]	; (8001100 <HAL_DMA_Init+0x694>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d022      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a45      	ldr	r2, [pc, #276]	; (8001104 <HAL_DMA_Init+0x698>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01d      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a44      	ldr	r2, [pc, #272]	; (8001108 <HAL_DMA_Init+0x69c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d018      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a42      	ldr	r2, [pc, #264]	; (800110c <HAL_DMA_Init+0x6a0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a41      	ldr	r2, [pc, #260]	; (8001110 <HAL_DMA_Init+0x6a4>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d00e      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a3f      	ldr	r2, [pc, #252]	; (8001114 <HAL_DMA_Init+0x6a8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d009      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a3e      	ldr	r2, [pc, #248]	; (8001118 <HAL_DMA_Init+0x6ac>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d004      	beq.n	800102e <HAL_DMA_Init+0x5c2>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a3c      	ldr	r2, [pc, #240]	; (800111c <HAL_DMA_Init+0x6b0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_DMA_Init+0x5c6>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_DMA_Init+0x5c8>
 8001032:	2300      	movs	r3, #0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d032      	beq.n	800109e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f001 fceb 	bl	8002a14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b80      	cmp	r3, #128	; 0x80
 8001044:	d102      	bne.n	800104c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001060:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d010      	beq.n	800108c <HAL_DMA_Init+0x620>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b08      	cmp	r3, #8
 8001070:	d80c      	bhi.n	800108c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f001 fd68 	bl	8002b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	e008      	b.n	800109e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	a7fdabf8 	.word	0xa7fdabf8
 80010bc:	cccccccd 	.word	0xcccccccd
 80010c0:	40020010 	.word	0x40020010
 80010c4:	40020028 	.word	0x40020028
 80010c8:	40020040 	.word	0x40020040
 80010cc:	40020058 	.word	0x40020058
 80010d0:	40020070 	.word	0x40020070
 80010d4:	40020088 	.word	0x40020088
 80010d8:	400200a0 	.word	0x400200a0
 80010dc:	400200b8 	.word	0x400200b8
 80010e0:	40020410 	.word	0x40020410
 80010e4:	40020428 	.word	0x40020428
 80010e8:	40020440 	.word	0x40020440
 80010ec:	40020458 	.word	0x40020458
 80010f0:	40020470 	.word	0x40020470
 80010f4:	40020488 	.word	0x40020488
 80010f8:	400204a0 	.word	0x400204a0
 80010fc:	400204b8 	.word	0x400204b8
 8001100:	58025408 	.word	0x58025408
 8001104:	5802541c 	.word	0x5802541c
 8001108:	58025430 	.word	0x58025430
 800110c:	58025444 	.word	0x58025444
 8001110:	58025458 	.word	0x58025458
 8001114:	5802546c 	.word	0x5802546c
 8001118:	58025480 	.word	0x58025480
 800111c:	58025494 	.word	0x58025494

08001120 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e226      	b.n	800158a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001142:	2b01      	cmp	r3, #1
 8001144:	d101      	bne.n	800114a <HAL_DMA_Start_IT+0x2a>
 8001146:	2302      	movs	r3, #2
 8001148:	e21f      	b.n	800158a <HAL_DMA_Start_IT+0x46a>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b01      	cmp	r3, #1
 800115c:	f040 820a 	bne.w	8001574 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2202      	movs	r2, #2
 8001164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a68      	ldr	r2, [pc, #416]	; (8001314 <HAL_DMA_Start_IT+0x1f4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d04a      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a66      	ldr	r2, [pc, #408]	; (8001318 <HAL_DMA_Start_IT+0x1f8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d045      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a65      	ldr	r2, [pc, #404]	; (800131c <HAL_DMA_Start_IT+0x1fc>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d040      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a63      	ldr	r2, [pc, #396]	; (8001320 <HAL_DMA_Start_IT+0x200>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d03b      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a62      	ldr	r2, [pc, #392]	; (8001324 <HAL_DMA_Start_IT+0x204>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d036      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a60      	ldr	r2, [pc, #384]	; (8001328 <HAL_DMA_Start_IT+0x208>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d031      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a5f      	ldr	r2, [pc, #380]	; (800132c <HAL_DMA_Start_IT+0x20c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d02c      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a5d      	ldr	r2, [pc, #372]	; (8001330 <HAL_DMA_Start_IT+0x210>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d027      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a5c      	ldr	r2, [pc, #368]	; (8001334 <HAL_DMA_Start_IT+0x214>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d022      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a5a      	ldr	r2, [pc, #360]	; (8001338 <HAL_DMA_Start_IT+0x218>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d01d      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a59      	ldr	r2, [pc, #356]	; (800133c <HAL_DMA_Start_IT+0x21c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d018      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a57      	ldr	r2, [pc, #348]	; (8001340 <HAL_DMA_Start_IT+0x220>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a56      	ldr	r2, [pc, #344]	; (8001344 <HAL_DMA_Start_IT+0x224>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d00e      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a54      	ldr	r2, [pc, #336]	; (8001348 <HAL_DMA_Start_IT+0x228>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d009      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a53      	ldr	r2, [pc, #332]	; (800134c <HAL_DMA_Start_IT+0x22c>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d004      	beq.n	800120e <HAL_DMA_Start_IT+0xee>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_DMA_Start_IT+0x230>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d108      	bne.n	8001220 <HAL_DMA_Start_IT+0x100>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0201 	bic.w	r2, r2, #1
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e007      	b.n	8001230 <HAL_DMA_Start_IT+0x110>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f001 f912 	bl	8002460 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a34      	ldr	r2, [pc, #208]	; (8001314 <HAL_DMA_Start_IT+0x1f4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d04a      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a33      	ldr	r2, [pc, #204]	; (8001318 <HAL_DMA_Start_IT+0x1f8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d045      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a31      	ldr	r2, [pc, #196]	; (800131c <HAL_DMA_Start_IT+0x1fc>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d040      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a30      	ldr	r2, [pc, #192]	; (8001320 <HAL_DMA_Start_IT+0x200>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d03b      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a2e      	ldr	r2, [pc, #184]	; (8001324 <HAL_DMA_Start_IT+0x204>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d036      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a2d      	ldr	r2, [pc, #180]	; (8001328 <HAL_DMA_Start_IT+0x208>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d031      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <HAL_DMA_Start_IT+0x20c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d02c      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <HAL_DMA_Start_IT+0x210>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d027      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a28      	ldr	r2, [pc, #160]	; (8001334 <HAL_DMA_Start_IT+0x214>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d022      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a27      	ldr	r2, [pc, #156]	; (8001338 <HAL_DMA_Start_IT+0x218>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d01d      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a25      	ldr	r2, [pc, #148]	; (800133c <HAL_DMA_Start_IT+0x21c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d018      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a24      	ldr	r2, [pc, #144]	; (8001340 <HAL_DMA_Start_IT+0x220>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d013      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a22      	ldr	r2, [pc, #136]	; (8001344 <HAL_DMA_Start_IT+0x224>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00e      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a21      	ldr	r2, [pc, #132]	; (8001348 <HAL_DMA_Start_IT+0x228>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d009      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1f      	ldr	r2, [pc, #124]	; (800134c <HAL_DMA_Start_IT+0x22c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d004      	beq.n	80012dc <HAL_DMA_Start_IT+0x1bc>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <HAL_DMA_Start_IT+0x230>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_DMA_Start_IT+0x1c0>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_DMA_Start_IT+0x1c2>
 80012e0:	2300      	movs	r3, #0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d036      	beq.n	8001354 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 021e 	bic.w	r2, r3, #30
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 0216 	orr.w	r2, r2, #22
 80012f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d03e      	beq.n	8001380 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0208 	orr.w	r2, r2, #8
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e035      	b.n	8001380 <HAL_DMA_Start_IT+0x260>
 8001314:	40020010 	.word	0x40020010
 8001318:	40020028 	.word	0x40020028
 800131c:	40020040 	.word	0x40020040
 8001320:	40020058 	.word	0x40020058
 8001324:	40020070 	.word	0x40020070
 8001328:	40020088 	.word	0x40020088
 800132c:	400200a0 	.word	0x400200a0
 8001330:	400200b8 	.word	0x400200b8
 8001334:	40020410 	.word	0x40020410
 8001338:	40020428 	.word	0x40020428
 800133c:	40020440 	.word	0x40020440
 8001340:	40020458 	.word	0x40020458
 8001344:	40020470 	.word	0x40020470
 8001348:	40020488 	.word	0x40020488
 800134c:	400204a0 	.word	0x400204a0
 8001350:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 020e 	bic.w	r2, r3, #14
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 020a 	orr.w	r2, r2, #10
 8001366:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0204 	orr.w	r2, r2, #4
 800137e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a83      	ldr	r2, [pc, #524]	; (8001594 <HAL_DMA_Start_IT+0x474>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d072      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a82      	ldr	r2, [pc, #520]	; (8001598 <HAL_DMA_Start_IT+0x478>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d06d      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a80      	ldr	r2, [pc, #512]	; (800159c <HAL_DMA_Start_IT+0x47c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d068      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a7f      	ldr	r2, [pc, #508]	; (80015a0 <HAL_DMA_Start_IT+0x480>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d063      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a7d      	ldr	r2, [pc, #500]	; (80015a4 <HAL_DMA_Start_IT+0x484>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d05e      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a7c      	ldr	r2, [pc, #496]	; (80015a8 <HAL_DMA_Start_IT+0x488>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d059      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a7a      	ldr	r2, [pc, #488]	; (80015ac <HAL_DMA_Start_IT+0x48c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d054      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a79      	ldr	r2, [pc, #484]	; (80015b0 <HAL_DMA_Start_IT+0x490>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d04f      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a77      	ldr	r2, [pc, #476]	; (80015b4 <HAL_DMA_Start_IT+0x494>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d04a      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a76      	ldr	r2, [pc, #472]	; (80015b8 <HAL_DMA_Start_IT+0x498>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d045      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a74      	ldr	r2, [pc, #464]	; (80015bc <HAL_DMA_Start_IT+0x49c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d040      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a73      	ldr	r2, [pc, #460]	; (80015c0 <HAL_DMA_Start_IT+0x4a0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d03b      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a71      	ldr	r2, [pc, #452]	; (80015c4 <HAL_DMA_Start_IT+0x4a4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d036      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a70      	ldr	r2, [pc, #448]	; (80015c8 <HAL_DMA_Start_IT+0x4a8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d031      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a6e      	ldr	r2, [pc, #440]	; (80015cc <HAL_DMA_Start_IT+0x4ac>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d02c      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6d      	ldr	r2, [pc, #436]	; (80015d0 <HAL_DMA_Start_IT+0x4b0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d027      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6b      	ldr	r2, [pc, #428]	; (80015d4 <HAL_DMA_Start_IT+0x4b4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d022      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a6a      	ldr	r2, [pc, #424]	; (80015d8 <HAL_DMA_Start_IT+0x4b8>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d01d      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a68      	ldr	r2, [pc, #416]	; (80015dc <HAL_DMA_Start_IT+0x4bc>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d018      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a67      	ldr	r2, [pc, #412]	; (80015e0 <HAL_DMA_Start_IT+0x4c0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d013      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a65      	ldr	r2, [pc, #404]	; (80015e4 <HAL_DMA_Start_IT+0x4c4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00e      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a64      	ldr	r2, [pc, #400]	; (80015e8 <HAL_DMA_Start_IT+0x4c8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d009      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a62      	ldr	r2, [pc, #392]	; (80015ec <HAL_DMA_Start_IT+0x4cc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d004      	beq.n	8001470 <HAL_DMA_Start_IT+0x350>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a61      	ldr	r2, [pc, #388]	; (80015f0 <HAL_DMA_Start_IT+0x4d0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_DMA_Start_IT+0x354>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_DMA_Start_IT+0x356>
 8001474:	2300      	movs	r3, #0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01a      	beq.n	80014b0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001496:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800149c:	2b00      	cmp	r3, #0
 800149e:	d007      	beq.n	80014b0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a37      	ldr	r2, [pc, #220]	; (8001594 <HAL_DMA_Start_IT+0x474>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d04a      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a36      	ldr	r2, [pc, #216]	; (8001598 <HAL_DMA_Start_IT+0x478>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d045      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a34      	ldr	r2, [pc, #208]	; (800159c <HAL_DMA_Start_IT+0x47c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d040      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a33      	ldr	r2, [pc, #204]	; (80015a0 <HAL_DMA_Start_IT+0x480>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d03b      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a31      	ldr	r2, [pc, #196]	; (80015a4 <HAL_DMA_Start_IT+0x484>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d036      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a30      	ldr	r2, [pc, #192]	; (80015a8 <HAL_DMA_Start_IT+0x488>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d031      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a2e      	ldr	r2, [pc, #184]	; (80015ac <HAL_DMA_Start_IT+0x48c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d02c      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a2d      	ldr	r2, [pc, #180]	; (80015b0 <HAL_DMA_Start_IT+0x490>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d027      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a2b      	ldr	r2, [pc, #172]	; (80015b4 <HAL_DMA_Start_IT+0x494>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d022      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a2a      	ldr	r2, [pc, #168]	; (80015b8 <HAL_DMA_Start_IT+0x498>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d01d      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a28      	ldr	r2, [pc, #160]	; (80015bc <HAL_DMA_Start_IT+0x49c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d018      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <HAL_DMA_Start_IT+0x4a0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <HAL_DMA_Start_IT+0x4a4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00e      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_DMA_Start_IT+0x4a8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d009      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_DMA_Start_IT+0x4ac>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d004      	beq.n	8001550 <HAL_DMA_Start_IT+0x430>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_DMA_Start_IT+0x4b0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d108      	bne.n	8001562 <HAL_DMA_Start_IT+0x442>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e012      	b.n	8001588 <HAL_DMA_Start_IT+0x468>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0201 	orr.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e009      	b.n	8001588 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800157a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001588:	7dfb      	ldrb	r3, [r7, #23]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40020010 	.word	0x40020010
 8001598:	40020028 	.word	0x40020028
 800159c:	40020040 	.word	0x40020040
 80015a0:	40020058 	.word	0x40020058
 80015a4:	40020070 	.word	0x40020070
 80015a8:	40020088 	.word	0x40020088
 80015ac:	400200a0 	.word	0x400200a0
 80015b0:	400200b8 	.word	0x400200b8
 80015b4:	40020410 	.word	0x40020410
 80015b8:	40020428 	.word	0x40020428
 80015bc:	40020440 	.word	0x40020440
 80015c0:	40020458 	.word	0x40020458
 80015c4:	40020470 	.word	0x40020470
 80015c8:	40020488 	.word	0x40020488
 80015cc:	400204a0 	.word	0x400204a0
 80015d0:	400204b8 	.word	0x400204b8
 80015d4:	58025408 	.word	0x58025408
 80015d8:	5802541c 	.word	0x5802541c
 80015dc:	58025430 	.word	0x58025430
 80015e0:	58025444 	.word	0x58025444
 80015e4:	58025458 	.word	0x58025458
 80015e8:	5802546c 	.word	0x5802546c
 80015ec:	58025480 	.word	0x58025480
 80015f0:	58025494 	.word	0x58025494

080015f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001600:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <HAL_DMA_IRQHandler+0x1ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a67      	ldr	r2, [pc, #412]	; (80017a4 <HAL_DMA_IRQHandler+0x1b0>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0a9b      	lsrs	r3, r3, #10
 800160c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001618:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5f      	ldr	r2, [pc, #380]	; (80017a8 <HAL_DMA_IRQHandler+0x1b4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a5d      	ldr	r2, [pc, #372]	; (80017ac <HAL_DMA_IRQHandler+0x1b8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a5c      	ldr	r2, [pc, #368]	; (80017b0 <HAL_DMA_IRQHandler+0x1bc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a5a      	ldr	r2, [pc, #360]	; (80017b4 <HAL_DMA_IRQHandler+0x1c0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a59      	ldr	r2, [pc, #356]	; (80017b8 <HAL_DMA_IRQHandler+0x1c4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a57      	ldr	r2, [pc, #348]	; (80017bc <HAL_DMA_IRQHandler+0x1c8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <HAL_DMA_IRQHandler+0x1cc>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a54      	ldr	r2, [pc, #336]	; (80017c4 <HAL_DMA_IRQHandler+0x1d0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a53      	ldr	r2, [pc, #332]	; (80017c8 <HAL_DMA_IRQHandler+0x1d4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a51      	ldr	r2, [pc, #324]	; (80017cc <HAL_DMA_IRQHandler+0x1d8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a50      	ldr	r2, [pc, #320]	; (80017d0 <HAL_DMA_IRQHandler+0x1dc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a4e      	ldr	r2, [pc, #312]	; (80017d4 <HAL_DMA_IRQHandler+0x1e0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a4d      	ldr	r2, [pc, #308]	; (80017d8 <HAL_DMA_IRQHandler+0x1e4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <HAL_DMA_IRQHandler+0x1e8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a4a      	ldr	r2, [pc, #296]	; (80017e0 <HAL_DMA_IRQHandler+0x1ec>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xd2>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a48      	ldr	r2, [pc, #288]	; (80017e4 <HAL_DMA_IRQHandler+0x1f0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_DMA_IRQHandler+0xd6>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_DMA_IRQHandler+0xd8>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 842b 	beq.w	8001f28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80a2 	beq.w	800182c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a2e      	ldr	r2, [pc, #184]	; (80017a8 <HAL_DMA_IRQHandler+0x1b4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a2d      	ldr	r2, [pc, #180]	; (80017ac <HAL_DMA_IRQHandler+0x1b8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2b      	ldr	r2, [pc, #172]	; (80017b0 <HAL_DMA_IRQHandler+0x1bc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <HAL_DMA_IRQHandler+0x1c0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <HAL_DMA_IRQHandler+0x1c4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a27      	ldr	r2, [pc, #156]	; (80017bc <HAL_DMA_IRQHandler+0x1c8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <HAL_DMA_IRQHandler+0x1cc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <HAL_DMA_IRQHandler+0x1d0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <HAL_DMA_IRQHandler+0x1d4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a21      	ldr	r2, [pc, #132]	; (80017cc <HAL_DMA_IRQHandler+0x1d8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_DMA_IRQHandler+0x1dc>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_DMA_IRQHandler+0x1e0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <HAL_DMA_IRQHandler+0x1e4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <HAL_DMA_IRQHandler+0x1e8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_DMA_IRQHandler+0x1ec>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <HAL_DMA_IRQHandler+0x194>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a18      	ldr	r2, [pc, #96]	; (80017e4 <HAL_DMA_IRQHandler+0x1f0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d12f      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x1f4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf14      	ite	ne
 8001796:	2301      	movne	r3, #1
 8001798:	2300      	moveq	r3, #0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	e02e      	b.n	80017fc <HAL_DMA_IRQHandler+0x208>
 800179e:	bf00      	nop
 80017a0:	24000408 	.word	0x24000408
 80017a4:	1b4e81b5 	.word	0x1b4e81b5
 80017a8:	40020010 	.word	0x40020010
 80017ac:	40020028 	.word	0x40020028
 80017b0:	40020040 	.word	0x40020040
 80017b4:	40020058 	.word	0x40020058
 80017b8:	40020070 	.word	0x40020070
 80017bc:	40020088 	.word	0x40020088
 80017c0:	400200a0 	.word	0x400200a0
 80017c4:	400200b8 	.word	0x400200b8
 80017c8:	40020410 	.word	0x40020410
 80017cc:	40020428 	.word	0x40020428
 80017d0:	40020440 	.word	0x40020440
 80017d4:	40020458 	.word	0x40020458
 80017d8:	40020470 	.word	0x40020470
 80017dc:	40020488 	.word	0x40020488
 80017e0:	400204a0 	.word	0x400204a0
 80017e4:	400204b8 	.word	0x400204b8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d015      	beq.n	800182c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0204 	bic.w	r2, r2, #4
 800180e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2208      	movs	r2, #8
 800181a:	409a      	lsls	r2, r3
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d06e      	beq.n	8001920 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a69      	ldr	r2, [pc, #420]	; (80019ec <HAL_DMA_IRQHandler+0x3f8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d04a      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a67      	ldr	r2, [pc, #412]	; (80019f0 <HAL_DMA_IRQHandler+0x3fc>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d045      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a66      	ldr	r2, [pc, #408]	; (80019f4 <HAL_DMA_IRQHandler+0x400>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d040      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a64      	ldr	r2, [pc, #400]	; (80019f8 <HAL_DMA_IRQHandler+0x404>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d03b      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a63      	ldr	r2, [pc, #396]	; (80019fc <HAL_DMA_IRQHandler+0x408>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d036      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a61      	ldr	r2, [pc, #388]	; (8001a00 <HAL_DMA_IRQHandler+0x40c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d031      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a60      	ldr	r2, [pc, #384]	; (8001a04 <HAL_DMA_IRQHandler+0x410>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d02c      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a5e      	ldr	r2, [pc, #376]	; (8001a08 <HAL_DMA_IRQHandler+0x414>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d027      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a5d      	ldr	r2, [pc, #372]	; (8001a0c <HAL_DMA_IRQHandler+0x418>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d022      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a5b      	ldr	r2, [pc, #364]	; (8001a10 <HAL_DMA_IRQHandler+0x41c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01d      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a5a      	ldr	r2, [pc, #360]	; (8001a14 <HAL_DMA_IRQHandler+0x420>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d018      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_DMA_IRQHandler+0x424>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a57      	ldr	r2, [pc, #348]	; (8001a1c <HAL_DMA_IRQHandler+0x428>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00e      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a55      	ldr	r2, [pc, #340]	; (8001a20 <HAL_DMA_IRQHandler+0x42c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d009      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a54      	ldr	r2, [pc, #336]	; (8001a24 <HAL_DMA_IRQHandler+0x430>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d004      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x2ee>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_DMA_IRQHandler+0x434>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10a      	bne.n	80018f8 <HAL_DMA_IRQHandler+0x304>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf14      	ite	ne
 80018f0:	2301      	movne	r3, #1
 80018f2:	2300      	moveq	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	e003      	b.n	8001900 <HAL_DMA_IRQHandler+0x30c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2300      	movs	r3, #0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00d      	beq.n	8001920 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2201      	movs	r2, #1
 800190e:	409a      	lsls	r2, r3
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	f043 0202 	orr.w	r2, r3, #2
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	2204      	movs	r2, #4
 800192a:	409a      	lsls	r2, r3
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 808f 	beq.w	8001a54 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a2c      	ldr	r2, [pc, #176]	; (80019ec <HAL_DMA_IRQHandler+0x3f8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d04a      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2a      	ldr	r2, [pc, #168]	; (80019f0 <HAL_DMA_IRQHandler+0x3fc>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d045      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <HAL_DMA_IRQHandler+0x400>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d040      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <HAL_DMA_IRQHandler+0x404>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d03b      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a26      	ldr	r2, [pc, #152]	; (80019fc <HAL_DMA_IRQHandler+0x408>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d036      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_DMA_IRQHandler+0x40c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d031      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_DMA_IRQHandler+0x410>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d02c      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <HAL_DMA_IRQHandler+0x414>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d027      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a20      	ldr	r2, [pc, #128]	; (8001a0c <HAL_DMA_IRQHandler+0x418>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d022      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <HAL_DMA_IRQHandler+0x41c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d01d      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_DMA_IRQHandler+0x420>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d018      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <HAL_DMA_IRQHandler+0x424>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <HAL_DMA_IRQHandler+0x428>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d00e      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_DMA_IRQHandler+0x42c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d009      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_DMA_IRQHandler+0x430>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d004      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x3e2>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <HAL_DMA_IRQHandler+0x434>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12a      	bne.n	8001a2c <HAL_DMA_IRQHandler+0x438>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf14      	ite	ne
 80019e4:	2301      	movne	r3, #1
 80019e6:	2300      	moveq	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e023      	b.n	8001a34 <HAL_DMA_IRQHandler+0x440>
 80019ec:	40020010 	.word	0x40020010
 80019f0:	40020028 	.word	0x40020028
 80019f4:	40020040 	.word	0x40020040
 80019f8:	40020058 	.word	0x40020058
 80019fc:	40020070 	.word	0x40020070
 8001a00:	40020088 	.word	0x40020088
 8001a04:	400200a0 	.word	0x400200a0
 8001a08:	400200b8 	.word	0x400200b8
 8001a0c:	40020410 	.word	0x40020410
 8001a10:	40020428 	.word	0x40020428
 8001a14:	40020440 	.word	0x40020440
 8001a18:	40020458 	.word	0x40020458
 8001a1c:	40020470 	.word	0x40020470
 8001a20:	40020488 	.word	0x40020488
 8001a24:	400204a0 	.word	0x400204a0
 8001a28:	400204b8 	.word	0x400204b8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00d      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	2204      	movs	r2, #4
 8001a42:	409a      	lsls	r2, r3
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	f043 0204 	orr.w	r2, r3, #4
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	2210      	movs	r2, #16
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80a6 	beq.w	8001bb6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a85      	ldr	r2, [pc, #532]	; (8001c84 <HAL_DMA_IRQHandler+0x690>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d04a      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a83      	ldr	r2, [pc, #524]	; (8001c88 <HAL_DMA_IRQHandler+0x694>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d045      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a82      	ldr	r2, [pc, #520]	; (8001c8c <HAL_DMA_IRQHandler+0x698>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d040      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a80      	ldr	r2, [pc, #512]	; (8001c90 <HAL_DMA_IRQHandler+0x69c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d03b      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a7f      	ldr	r2, [pc, #508]	; (8001c94 <HAL_DMA_IRQHandler+0x6a0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d036      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a7d      	ldr	r2, [pc, #500]	; (8001c98 <HAL_DMA_IRQHandler+0x6a4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d031      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a7c      	ldr	r2, [pc, #496]	; (8001c9c <HAL_DMA_IRQHandler+0x6a8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d02c      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a7a      	ldr	r2, [pc, #488]	; (8001ca0 <HAL_DMA_IRQHandler+0x6ac>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d027      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a79      	ldr	r2, [pc, #484]	; (8001ca4 <HAL_DMA_IRQHandler+0x6b0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d022      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a77      	ldr	r2, [pc, #476]	; (8001ca8 <HAL_DMA_IRQHandler+0x6b4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d01d      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a76      	ldr	r2, [pc, #472]	; (8001cac <HAL_DMA_IRQHandler+0x6b8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d018      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a74      	ldr	r2, [pc, #464]	; (8001cb0 <HAL_DMA_IRQHandler+0x6bc>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a73      	ldr	r2, [pc, #460]	; (8001cb4 <HAL_DMA_IRQHandler+0x6c0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00e      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a71      	ldr	r2, [pc, #452]	; (8001cb8 <HAL_DMA_IRQHandler+0x6c4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d009      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a70      	ldr	r2, [pc, #448]	; (8001cbc <HAL_DMA_IRQHandler+0x6c8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d004      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x516>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <HAL_DMA_IRQHandler+0x6cc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10a      	bne.n	8001b20 <HAL_DMA_IRQHandler+0x52c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	e009      	b.n	8001b34 <HAL_DMA_IRQHandler+0x540>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03e      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	2210      	movs	r2, #16
 8001b42:	409a      	lsls	r2, r3
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d018      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d108      	bne.n	8001b76 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d024      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
 8001b74:	e01f      	b.n	8001bb6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01b      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
 8001b86:	e016      	b.n	8001bb6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d107      	bne.n	8001ba6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0208 	bic.w	r2, r2, #8
 8001ba4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8110 	beq.w	8001dec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a2c      	ldr	r2, [pc, #176]	; (8001c84 <HAL_DMA_IRQHandler+0x690>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d04a      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a2b      	ldr	r2, [pc, #172]	; (8001c88 <HAL_DMA_IRQHandler+0x694>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d045      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a29      	ldr	r2, [pc, #164]	; (8001c8c <HAL_DMA_IRQHandler+0x698>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d040      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a28      	ldr	r2, [pc, #160]	; (8001c90 <HAL_DMA_IRQHandler+0x69c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d03b      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a26      	ldr	r2, [pc, #152]	; (8001c94 <HAL_DMA_IRQHandler+0x6a0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d036      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <HAL_DMA_IRQHandler+0x6a4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d031      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <HAL_DMA_IRQHandler+0x6a8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d02c      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <HAL_DMA_IRQHandler+0x6ac>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d027      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <HAL_DMA_IRQHandler+0x6b0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d022      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_DMA_IRQHandler+0x6b4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d01d      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <HAL_DMA_IRQHandler+0x6b8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d018      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_DMA_IRQHandler+0x6bc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <HAL_DMA_IRQHandler+0x6c0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00e      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_DMA_IRQHandler+0x6c4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d009      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <HAL_DMA_IRQHandler+0x6c8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x678>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <HAL_DMA_IRQHandler+0x6cc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d12b      	bne.n	8001cc4 <HAL_DMA_IRQHandler+0x6d0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf14      	ite	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	2300      	moveq	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	e02a      	b.n	8001cd8 <HAL_DMA_IRQHandler+0x6e4>
 8001c82:	bf00      	nop
 8001c84:	40020010 	.word	0x40020010
 8001c88:	40020028 	.word	0x40020028
 8001c8c:	40020040 	.word	0x40020040
 8001c90:	40020058 	.word	0x40020058
 8001c94:	40020070 	.word	0x40020070
 8001c98:	40020088 	.word	0x40020088
 8001c9c:	400200a0 	.word	0x400200a0
 8001ca0:	400200b8 	.word	0x400200b8
 8001ca4:	40020410 	.word	0x40020410
 8001ca8:	40020428 	.word	0x40020428
 8001cac:	40020440 	.word	0x40020440
 8001cb0:	40020458 	.word	0x40020458
 8001cb4:	40020470 	.word	0x40020470
 8001cb8:	40020488 	.word	0x40020488
 8001cbc:	400204a0 	.word	0x400204a0
 8001cc0:	400204b8 	.word	0x400204b8
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf14      	ite	ne
 8001cd2:	2301      	movne	r3, #1
 8001cd4:	2300      	moveq	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 8087 	beq.w	8001dec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d139      	bne.n	8001d6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0216 	bic.w	r2, r2, #22
 8001d08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <HAL_DMA_IRQHandler+0x736>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0208 	bic.w	r2, r2, #8
 8001d38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	223f      	movs	r2, #63	; 0x3f
 8001d44:	409a      	lsls	r2, r3
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 834a 	beq.w	80023f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
          }
          return;
 8001d6c:	e344      	b.n	80023f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d018      	beq.n	8001dae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d108      	bne.n	8001d9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d02c      	beq.n	8001dec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
 8001d9a:	e027      	b.n	8001dec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d023      	beq.n	8001dec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
 8001dac:	e01e      	b.n	8001dec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10f      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0210 	bic.w	r2, r2, #16
 8001dca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8306 	beq.w	8002402 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8088 	beq.w	8001f14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2204      	movs	r2, #4
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a7a      	ldr	r2, [pc, #488]	; (8001ffc <HAL_DMA_IRQHandler+0xa08>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d04a      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a79      	ldr	r2, [pc, #484]	; (8002000 <HAL_DMA_IRQHandler+0xa0c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d045      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a77      	ldr	r2, [pc, #476]	; (8002004 <HAL_DMA_IRQHandler+0xa10>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d040      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a76      	ldr	r2, [pc, #472]	; (8002008 <HAL_DMA_IRQHandler+0xa14>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d03b      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a74      	ldr	r2, [pc, #464]	; (800200c <HAL_DMA_IRQHandler+0xa18>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d036      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a73      	ldr	r2, [pc, #460]	; (8002010 <HAL_DMA_IRQHandler+0xa1c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d031      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a71      	ldr	r2, [pc, #452]	; (8002014 <HAL_DMA_IRQHandler+0xa20>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02c      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a70      	ldr	r2, [pc, #448]	; (8002018 <HAL_DMA_IRQHandler+0xa24>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d027      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a6e      	ldr	r2, [pc, #440]	; (800201c <HAL_DMA_IRQHandler+0xa28>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d022      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a6d      	ldr	r2, [pc, #436]	; (8002020 <HAL_DMA_IRQHandler+0xa2c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d01d      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6b      	ldr	r2, [pc, #428]	; (8002024 <HAL_DMA_IRQHandler+0xa30>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d018      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6a      	ldr	r2, [pc, #424]	; (8002028 <HAL_DMA_IRQHandler+0xa34>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a68      	ldr	r2, [pc, #416]	; (800202c <HAL_DMA_IRQHandler+0xa38>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00e      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a67      	ldr	r2, [pc, #412]	; (8002030 <HAL_DMA_IRQHandler+0xa3c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a65      	ldr	r2, [pc, #404]	; (8002034 <HAL_DMA_IRQHandler+0xa40>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_DMA_IRQHandler+0x8b8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a64      	ldr	r2, [pc, #400]	; (8002038 <HAL_DMA_IRQHandler+0xa44>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d108      	bne.n	8001ebe <HAL_DMA_IRQHandler+0x8ca>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e007      	b.n	8001ece <HAL_DMA_IRQHandler+0x8da>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d307      	bcc.n	8001eea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f2      	bne.n	8001ece <HAL_DMA_IRQHandler+0x8da>
 8001ee8:	e000      	b.n	8001eec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001eea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2203      	movs	r2, #3
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001f02:	e003      	b.n	8001f0c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8272 	beq.w	8002402 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
 8001f26:	e26c      	b.n	8002402 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a43      	ldr	r2, [pc, #268]	; (800203c <HAL_DMA_IRQHandler+0xa48>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d022      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x984>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a42      	ldr	r2, [pc, #264]	; (8002040 <HAL_DMA_IRQHandler+0xa4c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d01d      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x984>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a40      	ldr	r2, [pc, #256]	; (8002044 <HAL_DMA_IRQHandler+0xa50>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d018      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x984>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a3f      	ldr	r2, [pc, #252]	; (8002048 <HAL_DMA_IRQHandler+0xa54>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d013      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x984>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3d      	ldr	r2, [pc, #244]	; (800204c <HAL_DMA_IRQHandler+0xa58>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00e      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x984>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	; (8002050 <HAL_DMA_IRQHandler+0xa5c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d009      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x984>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a3a      	ldr	r2, [pc, #232]	; (8002054 <HAL_DMA_IRQHandler+0xa60>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x984>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a39      	ldr	r2, [pc, #228]	; (8002058 <HAL_DMA_IRQHandler+0xa64>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x988>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_DMA_IRQHandler+0x98a>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 823f 	beq.w	8002402 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2204      	movs	r2, #4
 8001f96:	409a      	lsls	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80cd 	beq.w	800213c <HAL_DMA_IRQHandler+0xb48>
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80c7 	beq.w	800213c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d049      	beq.n	800205c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8210 	beq.w	80023fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001fe4:	e20a      	b.n	80023fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8206 	beq.w	80023fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ff8:	e200      	b.n	80023fc <HAL_DMA_IRQHandler+0xe08>
 8001ffa:	bf00      	nop
 8001ffc:	40020010 	.word	0x40020010
 8002000:	40020028 	.word	0x40020028
 8002004:	40020040 	.word	0x40020040
 8002008:	40020058 	.word	0x40020058
 800200c:	40020070 	.word	0x40020070
 8002010:	40020088 	.word	0x40020088
 8002014:	400200a0 	.word	0x400200a0
 8002018:	400200b8 	.word	0x400200b8
 800201c:	40020410 	.word	0x40020410
 8002020:	40020428 	.word	0x40020428
 8002024:	40020440 	.word	0x40020440
 8002028:	40020458 	.word	0x40020458
 800202c:	40020470 	.word	0x40020470
 8002030:	40020488 	.word	0x40020488
 8002034:	400204a0 	.word	0x400204a0
 8002038:	400204b8 	.word	0x400204b8
 800203c:	58025408 	.word	0x58025408
 8002040:	5802541c 	.word	0x5802541c
 8002044:	58025430 	.word	0x58025430
 8002048:	58025444 	.word	0x58025444
 800204c:	58025458 	.word	0x58025458
 8002050:	5802546c 	.word	0x5802546c
 8002054:	58025480 	.word	0x58025480
 8002058:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d160      	bne.n	8002128 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a8c      	ldr	r2, [pc, #560]	; (800229c <HAL_DMA_IRQHandler+0xca8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d04a      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a8a      	ldr	r2, [pc, #552]	; (80022a0 <HAL_DMA_IRQHandler+0xcac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d045      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a89      	ldr	r2, [pc, #548]	; (80022a4 <HAL_DMA_IRQHandler+0xcb0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d040      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a87      	ldr	r2, [pc, #540]	; (80022a8 <HAL_DMA_IRQHandler+0xcb4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d03b      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a86      	ldr	r2, [pc, #536]	; (80022ac <HAL_DMA_IRQHandler+0xcb8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d036      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a84      	ldr	r2, [pc, #528]	; (80022b0 <HAL_DMA_IRQHandler+0xcbc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d031      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a83      	ldr	r2, [pc, #524]	; (80022b4 <HAL_DMA_IRQHandler+0xcc0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d02c      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a81      	ldr	r2, [pc, #516]	; (80022b8 <HAL_DMA_IRQHandler+0xcc4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d027      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a80      	ldr	r2, [pc, #512]	; (80022bc <HAL_DMA_IRQHandler+0xcc8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d022      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a7e      	ldr	r2, [pc, #504]	; (80022c0 <HAL_DMA_IRQHandler+0xccc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01d      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7d      	ldr	r2, [pc, #500]	; (80022c4 <HAL_DMA_IRQHandler+0xcd0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d018      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a7b      	ldr	r2, [pc, #492]	; (80022c8 <HAL_DMA_IRQHandler+0xcd4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7a      	ldr	r2, [pc, #488]	; (80022cc <HAL_DMA_IRQHandler+0xcd8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00e      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a78      	ldr	r2, [pc, #480]	; (80022d0 <HAL_DMA_IRQHandler+0xcdc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d009      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a77      	ldr	r2, [pc, #476]	; (80022d4 <HAL_DMA_IRQHandler+0xce0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d004      	beq.n	8002106 <HAL_DMA_IRQHandler+0xb12>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a75      	ldr	r2, [pc, #468]	; (80022d8 <HAL_DMA_IRQHandler+0xce4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d108      	bne.n	8002118 <HAL_DMA_IRQHandler+0xb24>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0208 	bic.w	r2, r2, #8
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e007      	b.n	8002128 <HAL_DMA_IRQHandler+0xb34>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0204 	bic.w	r2, r2, #4
 8002126:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8165 	beq.w	80023fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800213a:	e15f      	b.n	80023fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2202      	movs	r2, #2
 8002146:	409a      	lsls	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80c5 	beq.w	80022dc <HAL_DMA_IRQHandler+0xce8>
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80bf 	beq.w	80022dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2202      	movs	r2, #2
 8002168:	409a      	lsls	r2, r3
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d018      	beq.n	80021aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 813a 	beq.w	8002400 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002194:	e134      	b.n	8002400 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8130 	beq.w	8002400 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021a8:	e12a      	b.n	8002400 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d168      	bne.n	8002286 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a38      	ldr	r2, [pc, #224]	; (800229c <HAL_DMA_IRQHandler+0xca8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d04a      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a37      	ldr	r2, [pc, #220]	; (80022a0 <HAL_DMA_IRQHandler+0xcac>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d045      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a35      	ldr	r2, [pc, #212]	; (80022a4 <HAL_DMA_IRQHandler+0xcb0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d040      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a34      	ldr	r2, [pc, #208]	; (80022a8 <HAL_DMA_IRQHandler+0xcb4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d03b      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a32      	ldr	r2, [pc, #200]	; (80022ac <HAL_DMA_IRQHandler+0xcb8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d036      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a31      	ldr	r2, [pc, #196]	; (80022b0 <HAL_DMA_IRQHandler+0xcbc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d031      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2f      	ldr	r2, [pc, #188]	; (80022b4 <HAL_DMA_IRQHandler+0xcc0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02c      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2e      	ldr	r2, [pc, #184]	; (80022b8 <HAL_DMA_IRQHandler+0xcc4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d027      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2c      	ldr	r2, [pc, #176]	; (80022bc <HAL_DMA_IRQHandler+0xcc8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d022      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2b      	ldr	r2, [pc, #172]	; (80022c0 <HAL_DMA_IRQHandler+0xccc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d01d      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a29      	ldr	r2, [pc, #164]	; (80022c4 <HAL_DMA_IRQHandler+0xcd0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d018      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a28      	ldr	r2, [pc, #160]	; (80022c8 <HAL_DMA_IRQHandler+0xcd4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a26      	ldr	r2, [pc, #152]	; (80022cc <HAL_DMA_IRQHandler+0xcd8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00e      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a25      	ldr	r2, [pc, #148]	; (80022d0 <HAL_DMA_IRQHandler+0xcdc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <HAL_DMA_IRQHandler+0xce0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_DMA_IRQHandler+0xc60>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_DMA_IRQHandler+0xce4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <HAL_DMA_IRQHandler+0xc72>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0214 	bic.w	r2, r2, #20
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e007      	b.n	8002276 <HAL_DMA_IRQHandler+0xc82>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 020a 	bic.w	r2, r2, #10
 8002274:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80b8 	beq.w	8002400 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002298:	e0b2      	b.n	8002400 <HAL_DMA_IRQHandler+0xe0c>
 800229a:	bf00      	nop
 800229c:	40020010 	.word	0x40020010
 80022a0:	40020028 	.word	0x40020028
 80022a4:	40020040 	.word	0x40020040
 80022a8:	40020058 	.word	0x40020058
 80022ac:	40020070 	.word	0x40020070
 80022b0:	40020088 	.word	0x40020088
 80022b4:	400200a0 	.word	0x400200a0
 80022b8:	400200b8 	.word	0x400200b8
 80022bc:	40020410 	.word	0x40020410
 80022c0:	40020428 	.word	0x40020428
 80022c4:	40020440 	.word	0x40020440
 80022c8:	40020458 	.word	0x40020458
 80022cc:	40020470 	.word	0x40020470
 80022d0:	40020488 	.word	0x40020488
 80022d4:	400204a0 	.word	0x400204a0
 80022d8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2208      	movs	r2, #8
 80022e6:	409a      	lsls	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8088 	beq.w	8002402 <HAL_DMA_IRQHandler+0xe0e>
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8082 	beq.w	8002402 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a41      	ldr	r2, [pc, #260]	; (8002408 <HAL_DMA_IRQHandler+0xe14>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d04a      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a3f      	ldr	r2, [pc, #252]	; (800240c <HAL_DMA_IRQHandler+0xe18>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d045      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a3e      	ldr	r2, [pc, #248]	; (8002410 <HAL_DMA_IRQHandler+0xe1c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d040      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a3c      	ldr	r2, [pc, #240]	; (8002414 <HAL_DMA_IRQHandler+0xe20>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d03b      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a3b      	ldr	r2, [pc, #236]	; (8002418 <HAL_DMA_IRQHandler+0xe24>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d036      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a39      	ldr	r2, [pc, #228]	; (800241c <HAL_DMA_IRQHandler+0xe28>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d031      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a38      	ldr	r2, [pc, #224]	; (8002420 <HAL_DMA_IRQHandler+0xe2c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d02c      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a36      	ldr	r2, [pc, #216]	; (8002424 <HAL_DMA_IRQHandler+0xe30>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d027      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a35      	ldr	r2, [pc, #212]	; (8002428 <HAL_DMA_IRQHandler+0xe34>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d022      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a33      	ldr	r2, [pc, #204]	; (800242c <HAL_DMA_IRQHandler+0xe38>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01d      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a32      	ldr	r2, [pc, #200]	; (8002430 <HAL_DMA_IRQHandler+0xe3c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d018      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a30      	ldr	r2, [pc, #192]	; (8002434 <HAL_DMA_IRQHandler+0xe40>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2f      	ldr	r2, [pc, #188]	; (8002438 <HAL_DMA_IRQHandler+0xe44>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00e      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2d      	ldr	r2, [pc, #180]	; (800243c <HAL_DMA_IRQHandler+0xe48>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2c      	ldr	r2, [pc, #176]	; (8002440 <HAL_DMA_IRQHandler+0xe4c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_DMA_IRQHandler+0xdaa>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <HAL_DMA_IRQHandler+0xe50>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d108      	bne.n	80023b0 <HAL_DMA_IRQHandler+0xdbc>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 021c 	bic.w	r2, r2, #28
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e007      	b.n	80023c0 <HAL_DMA_IRQHandler+0xdcc>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 020e 	bic.w	r2, r2, #14
 80023be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	2201      	movs	r2, #1
 80023ca:	409a      	lsls	r2, r3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
 80023f6:	e004      	b.n	8002402 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80023f8:	bf00      	nop
 80023fa:	e002      	b.n	8002402 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023fc:	bf00      	nop
 80023fe:	e000      	b.n	8002402 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002400:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002402:	3728      	adds	r7, #40	; 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40020010 	.word	0x40020010
 800240c:	40020028 	.word	0x40020028
 8002410:	40020040 	.word	0x40020040
 8002414:	40020058 	.word	0x40020058
 8002418:	40020070 	.word	0x40020070
 800241c:	40020088 	.word	0x40020088
 8002420:	400200a0 	.word	0x400200a0
 8002424:	400200b8 	.word	0x400200b8
 8002428:	40020410 	.word	0x40020410
 800242c:	40020428 	.word	0x40020428
 8002430:	40020440 	.word	0x40020440
 8002434:	40020458 	.word	0x40020458
 8002438:	40020470 	.word	0x40020470
 800243c:	40020488 	.word	0x40020488
 8002440:	400204a0 	.word	0x400204a0
 8002444:	400204b8 	.word	0x400204b8

08002448 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a84      	ldr	r2, [pc, #528]	; (8002690 <DMA_SetConfig+0x230>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d072      	beq.n	800256a <DMA_SetConfig+0x10a>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a82      	ldr	r2, [pc, #520]	; (8002694 <DMA_SetConfig+0x234>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d06d      	beq.n	800256a <DMA_SetConfig+0x10a>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a81      	ldr	r2, [pc, #516]	; (8002698 <DMA_SetConfig+0x238>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d068      	beq.n	800256a <DMA_SetConfig+0x10a>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a7f      	ldr	r2, [pc, #508]	; (800269c <DMA_SetConfig+0x23c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d063      	beq.n	800256a <DMA_SetConfig+0x10a>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7e      	ldr	r2, [pc, #504]	; (80026a0 <DMA_SetConfig+0x240>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d05e      	beq.n	800256a <DMA_SetConfig+0x10a>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a7c      	ldr	r2, [pc, #496]	; (80026a4 <DMA_SetConfig+0x244>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d059      	beq.n	800256a <DMA_SetConfig+0x10a>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a7b      	ldr	r2, [pc, #492]	; (80026a8 <DMA_SetConfig+0x248>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d054      	beq.n	800256a <DMA_SetConfig+0x10a>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a79      	ldr	r2, [pc, #484]	; (80026ac <DMA_SetConfig+0x24c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d04f      	beq.n	800256a <DMA_SetConfig+0x10a>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a78      	ldr	r2, [pc, #480]	; (80026b0 <DMA_SetConfig+0x250>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d04a      	beq.n	800256a <DMA_SetConfig+0x10a>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a76      	ldr	r2, [pc, #472]	; (80026b4 <DMA_SetConfig+0x254>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d045      	beq.n	800256a <DMA_SetConfig+0x10a>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a75      	ldr	r2, [pc, #468]	; (80026b8 <DMA_SetConfig+0x258>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d040      	beq.n	800256a <DMA_SetConfig+0x10a>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a73      	ldr	r2, [pc, #460]	; (80026bc <DMA_SetConfig+0x25c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d03b      	beq.n	800256a <DMA_SetConfig+0x10a>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a72      	ldr	r2, [pc, #456]	; (80026c0 <DMA_SetConfig+0x260>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d036      	beq.n	800256a <DMA_SetConfig+0x10a>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a70      	ldr	r2, [pc, #448]	; (80026c4 <DMA_SetConfig+0x264>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d031      	beq.n	800256a <DMA_SetConfig+0x10a>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a6f      	ldr	r2, [pc, #444]	; (80026c8 <DMA_SetConfig+0x268>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d02c      	beq.n	800256a <DMA_SetConfig+0x10a>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a6d      	ldr	r2, [pc, #436]	; (80026cc <DMA_SetConfig+0x26c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d027      	beq.n	800256a <DMA_SetConfig+0x10a>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6c      	ldr	r2, [pc, #432]	; (80026d0 <DMA_SetConfig+0x270>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <DMA_SetConfig+0x10a>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a6a      	ldr	r2, [pc, #424]	; (80026d4 <DMA_SetConfig+0x274>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01d      	beq.n	800256a <DMA_SetConfig+0x10a>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a69      	ldr	r2, [pc, #420]	; (80026d8 <DMA_SetConfig+0x278>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d018      	beq.n	800256a <DMA_SetConfig+0x10a>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a67      	ldr	r2, [pc, #412]	; (80026dc <DMA_SetConfig+0x27c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <DMA_SetConfig+0x10a>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a66      	ldr	r2, [pc, #408]	; (80026e0 <DMA_SetConfig+0x280>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00e      	beq.n	800256a <DMA_SetConfig+0x10a>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a64      	ldr	r2, [pc, #400]	; (80026e4 <DMA_SetConfig+0x284>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d009      	beq.n	800256a <DMA_SetConfig+0x10a>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a63      	ldr	r2, [pc, #396]	; (80026e8 <DMA_SetConfig+0x288>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <DMA_SetConfig+0x10a>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a61      	ldr	r2, [pc, #388]	; (80026ec <DMA_SetConfig+0x28c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <DMA_SetConfig+0x10e>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <DMA_SetConfig+0x110>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800257c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800258e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3e      	ldr	r2, [pc, #248]	; (8002690 <DMA_SetConfig+0x230>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d04a      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a3d      	ldr	r2, [pc, #244]	; (8002694 <DMA_SetConfig+0x234>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d045      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3b      	ldr	r2, [pc, #236]	; (8002698 <DMA_SetConfig+0x238>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d040      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a3a      	ldr	r2, [pc, #232]	; (800269c <DMA_SetConfig+0x23c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d03b      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a38      	ldr	r2, [pc, #224]	; (80026a0 <DMA_SetConfig+0x240>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d036      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a37      	ldr	r2, [pc, #220]	; (80026a4 <DMA_SetConfig+0x244>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d031      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <DMA_SetConfig+0x248>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d02c      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a34      	ldr	r2, [pc, #208]	; (80026ac <DMA_SetConfig+0x24c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d027      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a32      	ldr	r2, [pc, #200]	; (80026b0 <DMA_SetConfig+0x250>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d022      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a31      	ldr	r2, [pc, #196]	; (80026b4 <DMA_SetConfig+0x254>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d01d      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2f      	ldr	r2, [pc, #188]	; (80026b8 <DMA_SetConfig+0x258>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d018      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <DMA_SetConfig+0x25c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2c      	ldr	r2, [pc, #176]	; (80026c0 <DMA_SetConfig+0x260>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00e      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <DMA_SetConfig+0x264>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a29      	ldr	r2, [pc, #164]	; (80026c8 <DMA_SetConfig+0x268>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <DMA_SetConfig+0x1d0>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a28      	ldr	r2, [pc, #160]	; (80026cc <DMA_SetConfig+0x26c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <DMA_SetConfig+0x1d4>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <DMA_SetConfig+0x1d6>
 8002634:	2300      	movs	r3, #0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d05a      	beq.n	80026f0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	223f      	movs	r2, #63	; 0x3f
 8002644:	409a      	lsls	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002658:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d108      	bne.n	800267c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800267a:	e087      	b.n	800278c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
}
 800268c:	e07e      	b.n	800278c <DMA_SetConfig+0x32c>
 800268e:	bf00      	nop
 8002690:	40020010 	.word	0x40020010
 8002694:	40020028 	.word	0x40020028
 8002698:	40020040 	.word	0x40020040
 800269c:	40020058 	.word	0x40020058
 80026a0:	40020070 	.word	0x40020070
 80026a4:	40020088 	.word	0x40020088
 80026a8:	400200a0 	.word	0x400200a0
 80026ac:	400200b8 	.word	0x400200b8
 80026b0:	40020410 	.word	0x40020410
 80026b4:	40020428 	.word	0x40020428
 80026b8:	40020440 	.word	0x40020440
 80026bc:	40020458 	.word	0x40020458
 80026c0:	40020470 	.word	0x40020470
 80026c4:	40020488 	.word	0x40020488
 80026c8:	400204a0 	.word	0x400204a0
 80026cc:	400204b8 	.word	0x400204b8
 80026d0:	58025408 	.word	0x58025408
 80026d4:	5802541c 	.word	0x5802541c
 80026d8:	58025430 	.word	0x58025430
 80026dc:	58025444 	.word	0x58025444
 80026e0:	58025458 	.word	0x58025458
 80026e4:	5802546c 	.word	0x5802546c
 80026e8:	58025480 	.word	0x58025480
 80026ec:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a28      	ldr	r2, [pc, #160]	; (8002798 <DMA_SetConfig+0x338>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d022      	beq.n	8002740 <DMA_SetConfig+0x2e0>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a27      	ldr	r2, [pc, #156]	; (800279c <DMA_SetConfig+0x33c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d01d      	beq.n	8002740 <DMA_SetConfig+0x2e0>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <DMA_SetConfig+0x340>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d018      	beq.n	8002740 <DMA_SetConfig+0x2e0>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <DMA_SetConfig+0x344>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <DMA_SetConfig+0x2e0>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <DMA_SetConfig+0x348>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00e      	beq.n	8002740 <DMA_SetConfig+0x2e0>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <DMA_SetConfig+0x34c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d009      	beq.n	8002740 <DMA_SetConfig+0x2e0>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <DMA_SetConfig+0x350>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <DMA_SetConfig+0x2e0>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <DMA_SetConfig+0x354>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <DMA_SetConfig+0x2e4>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <DMA_SetConfig+0x2e6>
 8002744:	2300      	movs	r3, #0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d020      	beq.n	800278c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2201      	movs	r2, #1
 8002754:	409a      	lsls	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b40      	cmp	r3, #64	; 0x40
 8002768:	d108      	bne.n	800277c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	60da      	str	r2, [r3, #12]
}
 800277a:	e007      	b.n	800278c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	60da      	str	r2, [r3, #12]
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	58025408 	.word	0x58025408
 800279c:	5802541c 	.word	0x5802541c
 80027a0:	58025430 	.word	0x58025430
 80027a4:	58025444 	.word	0x58025444
 80027a8:	58025458 	.word	0x58025458
 80027ac:	5802546c 	.word	0x5802546c
 80027b0:	58025480 	.word	0x58025480
 80027b4:	58025494 	.word	0x58025494

080027b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a42      	ldr	r2, [pc, #264]	; (80028d0 <DMA_CalcBaseAndBitshift+0x118>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04a      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a41      	ldr	r2, [pc, #260]	; (80028d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d045      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a3f      	ldr	r2, [pc, #252]	; (80028d8 <DMA_CalcBaseAndBitshift+0x120>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d040      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a3e      	ldr	r2, [pc, #248]	; (80028dc <DMA_CalcBaseAndBitshift+0x124>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d03b      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a3c      	ldr	r2, [pc, #240]	; (80028e0 <DMA_CalcBaseAndBitshift+0x128>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d036      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a3b      	ldr	r2, [pc, #236]	; (80028e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d031      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a39      	ldr	r2, [pc, #228]	; (80028e8 <DMA_CalcBaseAndBitshift+0x130>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02c      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a38      	ldr	r2, [pc, #224]	; (80028ec <DMA_CalcBaseAndBitshift+0x134>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d027      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a36      	ldr	r2, [pc, #216]	; (80028f0 <DMA_CalcBaseAndBitshift+0x138>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a35      	ldr	r2, [pc, #212]	; (80028f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01d      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a33      	ldr	r2, [pc, #204]	; (80028f8 <DMA_CalcBaseAndBitshift+0x140>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d018      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a32      	ldr	r2, [pc, #200]	; (80028fc <DMA_CalcBaseAndBitshift+0x144>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a30      	ldr	r2, [pc, #192]	; (8002900 <DMA_CalcBaseAndBitshift+0x148>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00e      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2f      	ldr	r2, [pc, #188]	; (8002904 <DMA_CalcBaseAndBitshift+0x14c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2d      	ldr	r2, [pc, #180]	; (8002908 <DMA_CalcBaseAndBitshift+0x150>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <DMA_CalcBaseAndBitshift+0xa8>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2c      	ldr	r2, [pc, #176]	; (800290c <DMA_CalcBaseAndBitshift+0x154>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <DMA_CalcBaseAndBitshift+0xac>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <DMA_CalcBaseAndBitshift+0xae>
 8002864:	2300      	movs	r3, #0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d024      	beq.n	80028b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	3b10      	subs	r3, #16
 8002872:	4a27      	ldr	r2, [pc, #156]	; (8002910 <DMA_CalcBaseAndBitshift+0x158>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <DMA_CalcBaseAndBitshift+0x15c>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	461a      	mov	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d908      	bls.n	80028a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <DMA_CalcBaseAndBitshift+0x160>)
 800289a:	4013      	ands	r3, r2
 800289c:	1d1a      	adds	r2, r3, #4
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	659a      	str	r2, [r3, #88]	; 0x58
 80028a2:	e00d      	b.n	80028c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <DMA_CalcBaseAndBitshift+0x160>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6593      	str	r3, [r2, #88]	; 0x58
 80028b2:	e005      	b.n	80028c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	40020010 	.word	0x40020010
 80028d4:	40020028 	.word	0x40020028
 80028d8:	40020040 	.word	0x40020040
 80028dc:	40020058 	.word	0x40020058
 80028e0:	40020070 	.word	0x40020070
 80028e4:	40020088 	.word	0x40020088
 80028e8:	400200a0 	.word	0x400200a0
 80028ec:	400200b8 	.word	0x400200b8
 80028f0:	40020410 	.word	0x40020410
 80028f4:	40020428 	.word	0x40020428
 80028f8:	40020440 	.word	0x40020440
 80028fc:	40020458 	.word	0x40020458
 8002900:	40020470 	.word	0x40020470
 8002904:	40020488 	.word	0x40020488
 8002908:	400204a0 	.word	0x400204a0
 800290c:	400204b8 	.word	0x400204b8
 8002910:	aaaaaaab 	.word	0xaaaaaaab
 8002914:	080096d8 	.word	0x080096d8
 8002918:	fffffc00 	.word	0xfffffc00

0800291c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d120      	bne.n	8002972 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	2b03      	cmp	r3, #3
 8002936:	d858      	bhi.n	80029ea <DMA_CheckFifoParam+0xce>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <DMA_CheckFifoParam+0x24>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002951 	.word	0x08002951
 8002944:	08002963 	.word	0x08002963
 8002948:	08002951 	.word	0x08002951
 800294c:	080029eb 	.word	0x080029eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d048      	beq.n	80029ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002960:	e045      	b.n	80029ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800296a:	d142      	bne.n	80029f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002970:	e03f      	b.n	80029f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297a:	d123      	bne.n	80029c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	2b03      	cmp	r3, #3
 8002982:	d838      	bhi.n	80029f6 <DMA_CheckFifoParam+0xda>
 8002984:	a201      	add	r2, pc, #4	; (adr r2, 800298c <DMA_CheckFifoParam+0x70>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	0800299d 	.word	0x0800299d
 8002990:	080029a3 	.word	0x080029a3
 8002994:	0800299d 	.word	0x0800299d
 8002998:	080029b5 	.word	0x080029b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
        break;
 80029a0:	e030      	b.n	8002a04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d025      	beq.n	80029fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80029b2:	e022      	b.n	80029fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029bc:	d11f      	bne.n	80029fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80029c2:	e01c      	b.n	80029fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d902      	bls.n	80029d2 <DMA_CheckFifoParam+0xb6>
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d003      	beq.n	80029d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80029d0:	e018      	b.n	8002a04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
        break;
 80029d6:	e015      	b.n	8002a04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00e      	beq.n	8002a02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
    break;
 80029e8:	e00b      	b.n	8002a02 <DMA_CheckFifoParam+0xe6>
        break;
 80029ea:	bf00      	nop
 80029ec:	e00a      	b.n	8002a04 <DMA_CheckFifoParam+0xe8>
        break;
 80029ee:	bf00      	nop
 80029f0:	e008      	b.n	8002a04 <DMA_CheckFifoParam+0xe8>
        break;
 80029f2:	bf00      	nop
 80029f4:	e006      	b.n	8002a04 <DMA_CheckFifoParam+0xe8>
        break;
 80029f6:	bf00      	nop
 80029f8:	e004      	b.n	8002a04 <DMA_CheckFifoParam+0xe8>
        break;
 80029fa:	bf00      	nop
 80029fc:	e002      	b.n	8002a04 <DMA_CheckFifoParam+0xe8>
        break;
 80029fe:	bf00      	nop
 8002a00:	e000      	b.n	8002a04 <DMA_CheckFifoParam+0xe8>
    break;
 8002a02:	bf00      	nop
    }
  }

  return status;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop

08002a14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a38      	ldr	r2, [pc, #224]	; (8002b08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a36      	ldr	r2, [pc, #216]	; (8002b0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01d      	beq.n	8002a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a35      	ldr	r2, [pc, #212]	; (8002b10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d018      	beq.n	8002a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a33      	ldr	r2, [pc, #204]	; (8002b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a32      	ldr	r2, [pc, #200]	; (8002b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00e      	beq.n	8002a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a30      	ldr	r2, [pc, #192]	; (8002b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2d      	ldr	r2, [pc, #180]	; (8002b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01a      	beq.n	8002ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	3b08      	subs	r3, #8
 8002a84:	4a28      	ldr	r2, [pc, #160]	; (8002b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4b26      	ldr	r3, [pc, #152]	; (8002b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	461a      	mov	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002aa0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002ab0:	e024      	b.n	8002afc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3b10      	subs	r3, #16
 8002aba:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d806      	bhi.n	8002ada <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d902      	bls.n	8002ada <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002aec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2201      	movs	r2, #1
 8002af6:	409a      	lsls	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	58025408 	.word	0x58025408
 8002b0c:	5802541c 	.word	0x5802541c
 8002b10:	58025430 	.word	0x58025430
 8002b14:	58025444 	.word	0x58025444
 8002b18:	58025458 	.word	0x58025458
 8002b1c:	5802546c 	.word	0x5802546c
 8002b20:	58025480 	.word	0x58025480
 8002b24:	58025494 	.word	0x58025494
 8002b28:	cccccccd 	.word	0xcccccccd
 8002b2c:	16009600 	.word	0x16009600
 8002b30:	58025880 	.word	0x58025880
 8002b34:	aaaaaaab 	.word	0xaaaaaaab
 8002b38:	400204b8 	.word	0x400204b8
 8002b3c:	4002040f 	.word	0x4002040f
 8002b40:	10008200 	.word	0x10008200
 8002b44:	40020880 	.word	0x40020880

08002b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d04a      	beq.n	8002bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d847      	bhi.n	8002bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d022      	beq.n	8002bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d01d      	beq.n	8002bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d018      	beq.n	8002bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00e      	beq.n	8002bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d009      	beq.n	8002bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002bd0:	671a      	str	r2, [r3, #112]	; 0x70
 8002bd2:	e009      	b.n	8002be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002be6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	2201      	movs	r2, #1
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	58025408 	.word	0x58025408
 8002c04:	5802541c 	.word	0x5802541c
 8002c08:	58025430 	.word	0x58025430
 8002c0c:	58025444 	.word	0x58025444
 8002c10:	58025458 	.word	0x58025458
 8002c14:	5802546c 	.word	0x5802546c
 8002c18:	58025480 	.word	0x58025480
 8002c1c:	58025494 	.word	0x58025494
 8002c20:	1600963f 	.word	0x1600963f
 8002c24:	58025940 	.word	0x58025940
 8002c28:	1000823f 	.word	0x1000823f
 8002c2c:	40020940 	.word	0x40020940

08002c30 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	7a1b      	ldrb	r3, [r3, #8]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d155      	bne.n	8002cf6 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d049      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a49      	ldr	r2, [pc, #292]	; (8002d80 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d044      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d03f      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a46      	ldr	r2, [pc, #280]	; (8002d88 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d03a      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a45      	ldr	r2, [pc, #276]	; (8002d8c <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d035      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a43      	ldr	r2, [pc, #268]	; (8002d90 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d030      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a42      	ldr	r2, [pc, #264]	; (8002d94 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d02b      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a40      	ldr	r2, [pc, #256]	; (8002d98 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d026      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3f      	ldr	r2, [pc, #252]	; (8002d9c <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d021      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a3d      	ldr	r2, [pc, #244]	; (8002da0 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01c      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3c      	ldr	r2, [pc, #240]	; (8002da4 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d017      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a3a      	ldr	r2, [pc, #232]	; (8002da8 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d012      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a39      	ldr	r2, [pc, #228]	; (8002dac <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00d      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a37      	ldr	r2, [pc, #220]	; (8002db0 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d008      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a36      	ldr	r2, [pc, #216]	; (8002db4 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a34      	ldr	r2, [pc, #208]	; (8002db8 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d131      	bne.n	8002d66 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e02f      	b.n	8002d70 <HAL_DMAEx_ConfigMuxSync+0x140>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d22:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002d26:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b2d9      	uxtb	r1, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	061a      	lsls	r2, r3, #24
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	04db      	lsls	r3, r3, #19
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	7a1b      	ldrb	r3, [r3, #8]
 8002d46:	041b      	lsls	r3, r3, #16
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	7a5b      	ldrb	r3, [r3, #9]
 8002d4e:	025b      	lsls	r3, r3, #9
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e004      	b.n	8002d70 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40020010 	.word	0x40020010
 8002d80:	40020028 	.word	0x40020028
 8002d84:	40020040 	.word	0x40020040
 8002d88:	40020058 	.word	0x40020058
 8002d8c:	40020070 	.word	0x40020070
 8002d90:	40020088 	.word	0x40020088
 8002d94:	400200a0 	.word	0x400200a0
 8002d98:	400200b8 	.word	0x400200b8
 8002d9c:	40020410 	.word	0x40020410
 8002da0:	40020428 	.word	0x40020428
 8002da4:	40020440 	.word	0x40020440
 8002da8:	40020458 	.word	0x40020458
 8002dac:	40020470 	.word	0x40020470
 8002db0:	40020488 	.word	0x40020488
 8002db4:	400204a0 	.word	0x400204a0
 8002db8:	400204b8 	.word	0x400204b8

08002dbc <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01a      	beq.n	8002e0a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002dec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d022      	beq.n	8002e58 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01a      	beq.n	8002e58 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
      }
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e6e:	4b86      	ldr	r3, [pc, #536]	; (8003088 <HAL_GPIO_Init+0x228>)
 8002e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e72:	e18c      	b.n	800318e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2101      	movs	r1, #1
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 817e 	beq.w	8003188 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d005      	beq.n	8002ea4 <HAL_GPIO_Init+0x44>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d130      	bne.n	8002f06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eda:	2201      	movs	r2, #1
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0201 	and.w	r2, r3, #1
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d017      	beq.n	8002f42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d123      	bne.n	8002f96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	08da      	lsrs	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3208      	adds	r2, #8
 8002f90:	69b9      	ldr	r1, [r7, #24]
 8002f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0203 	and.w	r2, r3, #3
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80d8 	beq.w	8003188 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_GPIO_Init+0x22c>)
 8002fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fde:	4a2b      	ldr	r2, [pc, #172]	; (800308c <HAL_GPIO_Init+0x22c>)
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_GPIO_Init+0x22c>)
 8002fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff6:	4a26      	ldr	r2, [pc, #152]	; (8003090 <HAL_GPIO_Init+0x230>)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	220f      	movs	r2, #15
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <HAL_GPIO_Init+0x234>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d04a      	beq.n	80030b8 <HAL_GPIO_Init+0x258>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_GPIO_Init+0x238>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d02b      	beq.n	8003082 <HAL_GPIO_Init+0x222>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1b      	ldr	r2, [pc, #108]	; (800309c <HAL_GPIO_Init+0x23c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d025      	beq.n	800307e <HAL_GPIO_Init+0x21e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a1a      	ldr	r2, [pc, #104]	; (80030a0 <HAL_GPIO_Init+0x240>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01f      	beq.n	800307a <HAL_GPIO_Init+0x21a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <HAL_GPIO_Init+0x244>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d019      	beq.n	8003076 <HAL_GPIO_Init+0x216>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_GPIO_Init+0x248>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_Init+0x212>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a17      	ldr	r2, [pc, #92]	; (80030ac <HAL_GPIO_Init+0x24c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00d      	beq.n	800306e <HAL_GPIO_Init+0x20e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <HAL_GPIO_Init+0x250>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_Init+0x20a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <HAL_GPIO_Init+0x254>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_Init+0x206>
 8003062:	2309      	movs	r3, #9
 8003064:	e029      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 8003066:	230a      	movs	r3, #10
 8003068:	e027      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 800306a:	2307      	movs	r3, #7
 800306c:	e025      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 800306e:	2306      	movs	r3, #6
 8003070:	e023      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 8003072:	2305      	movs	r3, #5
 8003074:	e021      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 8003076:	2304      	movs	r3, #4
 8003078:	e01f      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 800307a:	2303      	movs	r3, #3
 800307c:	e01d      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 800307e:	2302      	movs	r3, #2
 8003080:	e01b      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 8003082:	2301      	movs	r3, #1
 8003084:	e019      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 8003086:	bf00      	nop
 8003088:	58000080 	.word	0x58000080
 800308c:	58024400 	.word	0x58024400
 8003090:	58000400 	.word	0x58000400
 8003094:	58020000 	.word	0x58020000
 8003098:	58020400 	.word	0x58020400
 800309c:	58020800 	.word	0x58020800
 80030a0:	58020c00 	.word	0x58020c00
 80030a4:	58021000 	.word	0x58021000
 80030a8:	58021400 	.word	0x58021400
 80030ac:	58021800 	.word	0x58021800
 80030b0:	58021c00 	.word	0x58021c00
 80030b4:	58022400 	.word	0x58022400
 80030b8:	2300      	movs	r3, #0
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	f002 0203 	and.w	r2, r2, #3
 80030c0:	0092      	lsls	r2, r2, #2
 80030c2:	4093      	lsls	r3, r2
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ca:	4938      	ldr	r1, [pc, #224]	; (80031ac <HAL_GPIO_Init+0x34c>)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	3302      	adds	r3, #2
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80030fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800312c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3301      	adds	r3, #1
 800318c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	f47f ae6b 	bne.w	8002e74 <HAL_GPIO_Init+0x14>
  }
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	3724      	adds	r7, #36	; 0x24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	58000400 	.word	0x58000400

080031b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80031b8:	4b29      	ldr	r3, [pc, #164]	; (8003260 <HAL_PWREx_ConfigSupply+0xb0>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	2b06      	cmp	r3, #6
 80031c2:	d00a      	beq.n	80031da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031c4:	4b26      	ldr	r3, [pc, #152]	; (8003260 <HAL_PWREx_ConfigSupply+0xb0>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e03f      	b.n	8003256 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e03d      	b.n	8003256 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_PWREx_ConfigSupply+0xb0>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80031e2:	491f      	ldr	r1, [pc, #124]	; (8003260 <HAL_PWREx_ConfigSupply+0xb0>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031ea:	f7fd fa39 	bl	8000660 <HAL_GetTick>
 80031ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031f0:	e009      	b.n	8003206 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031f2:	f7fd fa35 	bl	8000660 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003200:	d901      	bls.n	8003206 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e027      	b.n	8003256 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <HAL_PWREx_ConfigSupply+0xb0>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800320e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003212:	d1ee      	bne.n	80031f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b1e      	cmp	r3, #30
 8003218:	d008      	beq.n	800322c <HAL_PWREx_ConfigSupply+0x7c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b2e      	cmp	r3, #46	; 0x2e
 800321e:	d005      	beq.n	800322c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b1d      	cmp	r3, #29
 8003224:	d002      	beq.n	800322c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b2d      	cmp	r3, #45	; 0x2d
 800322a:	d113      	bne.n	8003254 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800322c:	f7fd fa18 	bl	8000660 <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003232:	e009      	b.n	8003248 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003234:	f7fd fa14 	bl	8000660 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003242:	d901      	bls.n	8003248 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e006      	b.n	8003256 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_PWREx_ConfigSupply+0xb0>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0311 	and.w	r3, r3, #17
 8003250:	2b11      	cmp	r3, #17
 8003252:	d1ef      	bne.n	8003234 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	58024800 	.word	0x58024800

08003264 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08c      	sub	sp, #48	; 0x30
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e397      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8087 	beq.w	8003392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003284:	4b9e      	ldr	r3, [pc, #632]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800328e:	4b9c      	ldr	r3, [pc, #624]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	2b10      	cmp	r3, #16
 8003298:	d007      	beq.n	80032aa <HAL_RCC_OscConfig+0x46>
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	2b18      	cmp	r3, #24
 800329e:	d110      	bne.n	80032c2 <HAL_RCC_OscConfig+0x5e>
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d10b      	bne.n	80032c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032aa:	4b95      	ldr	r3, [pc, #596]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d06c      	beq.n	8003390 <HAL_RCC_OscConfig+0x12c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d168      	bne.n	8003390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e371      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x76>
 80032cc:	4b8c      	ldr	r3, [pc, #560]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a8b      	ldr	r2, [pc, #556]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e02e      	b.n	8003338 <HAL_RCC_OscConfig+0xd4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x98>
 80032e2:	4b87      	ldr	r3, [pc, #540]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a86      	ldr	r2, [pc, #536]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b84      	ldr	r3, [pc, #528]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a83      	ldr	r2, [pc, #524]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80032f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e01d      	b.n	8003338 <HAL_RCC_OscConfig+0xd4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0xbc>
 8003306:	4b7e      	ldr	r3, [pc, #504]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7d      	ldr	r2, [pc, #500]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b7b      	ldr	r3, [pc, #492]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7a      	ldr	r2, [pc, #488]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0xd4>
 8003320:	4b77      	ldr	r3, [pc, #476]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a76      	ldr	r2, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b74      	ldr	r3, [pc, #464]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a73      	ldr	r2, [pc, #460]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fd f98e 	bl	8000660 <HAL_GetTick>
 8003344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003348:	f7fd f98a 	bl	8000660 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e325      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800335a:	4b69      	ldr	r3, [pc, #420]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0xe4>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd f97a 	bl	8000660 <HAL_GetTick>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003370:	f7fd f976 	bl	8000660 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e311      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x10c>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 808a 	beq.w	80034b4 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a0:	4b57      	ldr	r3, [pc, #348]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033aa:	4b55      	ldr	r3, [pc, #340]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <HAL_RCC_OscConfig+0x162>
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	2b18      	cmp	r3, #24
 80033ba:	d137      	bne.n	800342c <HAL_RCC_OscConfig+0x1c8>
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d132      	bne.n	800342c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c6:	4b4e      	ldr	r3, [pc, #312]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_RCC_OscConfig+0x17a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e2e3      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033de:	4b48      	ldr	r3, [pc, #288]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0219 	bic.w	r2, r3, #25
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	4945      	ldr	r1, [pc, #276]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033f0:	f7fd f936 	bl	8000660 <HAL_GetTick>
 80033f4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f8:	f7fd f932 	bl	8000660 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e2cd      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800340a:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	061b      	lsls	r3, r3, #24
 8003424:	4936      	ldr	r1, [pc, #216]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800342a:	e043      	b.n	80034b4 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d026      	beq.n	8003482 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 0219 	bic.w	r2, r3, #25
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	492f      	ldr	r1, [pc, #188]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fd f90b 	bl	8000660 <HAL_GetTick>
 800344a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344e:	f7fd f907 	bl	8000660 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e2a2      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003460:	4b27      	ldr	r3, [pc, #156]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346c:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	061b      	lsls	r3, r3, #24
 800347a:	4921      	ldr	r1, [pc, #132]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
 8003480:	e018      	b.n	80034b4 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003482:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fd f8e7 	bl	8000660 <HAL_GetTick>
 8003492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003496:	f7fd f8e3 	bl	8000660 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e27e      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d06d      	beq.n	800359c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034c8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d007      	beq.n	80034e6 <HAL_RCC_OscConfig+0x282>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b18      	cmp	r3, #24
 80034da:	d11e      	bne.n	800351a <HAL_RCC_OscConfig+0x2b6>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d119      	bne.n	800351a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_OscConfig+0x29c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_RCC_OscConfig+0x2a0>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	2b80      	cmp	r3, #128	; 0x80
 80034f8:	d004      	beq.n	8003504 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e253      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
 80034fe:	bf00      	nop
 8003500:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003504:	4ba3      	ldr	r3, [pc, #652]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	49a0      	ldr	r1, [pc, #640]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003514:	4313      	orrs	r3, r2
 8003516:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003518:	e040      	b.n	800359c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d023      	beq.n	800356a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003522:	4b9c      	ldr	r3, [pc, #624]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a9b      	ldr	r2, [pc, #620]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fd f897 	bl	8000660 <HAL_GetTick>
 8003532:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003536:	f7fd f893 	bl	8000660 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e22e      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003548:	4b92      	ldr	r3, [pc, #584]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003554:	4b8f      	ldr	r3, [pc, #572]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	498c      	ldr	r1, [pc, #560]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003564:	4313      	orrs	r3, r2
 8003566:	60cb      	str	r3, [r1, #12]
 8003568:	e018      	b.n	800359c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800356a:	4b8a      	ldr	r3, [pc, #552]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a89      	ldr	r2, [pc, #548]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fd f873 	bl	8000660 <HAL_GetTick>
 800357a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800357e:	f7fd f86f 	bl	8000660 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e20a      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003590:	4b80      	ldr	r3, [pc, #512]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d036      	beq.n	8003616 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d019      	beq.n	80035e4 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b0:	4b78      	ldr	r3, [pc, #480]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 80035b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b4:	4a77      	ldr	r2, [pc, #476]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fd f850 	bl	8000660 <HAL_GetTick>
 80035c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fd f84c 	bl	8000660 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e1e7      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035d6:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 80035d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x360>
 80035e2:	e018      	b.n	8003616 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e4:	4b6b      	ldr	r3, [pc, #428]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	4a6a      	ldr	r2, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fd f836 	bl	8000660 <HAL_GetTick>
 80035f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fd f832 	bl	8000660 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1cd      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800360a:	4b62      	ldr	r3, [pc, #392]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 800360c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d036      	beq.n	8003690 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d019      	beq.n	800365e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800362a:	4b5a      	ldr	r3, [pc, #360]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a59      	ldr	r2, [pc, #356]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003634:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003636:	f7fd f813 	bl	8000660 <HAL_GetTick>
 800363a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800363e:	f7fd f80f 	bl	8000660 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e1aa      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x3da>
 800365c:	e018      	b.n	8003690 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800365e:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a4c      	ldr	r2, [pc, #304]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003668:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800366a:	f7fc fff9 	bl	8000660 <HAL_GetTick>
 800366e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003672:	f7fc fff5 	bl	8000660 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e190      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8085 	beq.w	80037a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800369e:	4b3e      	ldr	r3, [pc, #248]	; (8003798 <HAL_RCC_OscConfig+0x534>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a3d      	ldr	r2, [pc, #244]	; (8003798 <HAL_RCC_OscConfig+0x534>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036aa:	f7fc ffd9 	bl	8000660 <HAL_GetTick>
 80036ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fc ffd5 	bl	8000660 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e170      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036c4:	4b34      	ldr	r3, [pc, #208]	; (8003798 <HAL_RCC_OscConfig+0x534>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x482>
 80036d8:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6713      	str	r3, [r2, #112]	; 0x70
 80036e4:	e02d      	b.n	8003742 <HAL_RCC_OscConfig+0x4de>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x4a4>
 80036ee:	4b29      	ldr	r3, [pc, #164]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	4a28      	ldr	r2, [pc, #160]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6713      	str	r3, [r2, #112]	; 0x70
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	4a25      	ldr	r2, [pc, #148]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	6713      	str	r3, [r2, #112]	; 0x70
 8003706:	e01c      	b.n	8003742 <HAL_RCC_OscConfig+0x4de>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d10c      	bne.n	800372a <HAL_RCC_OscConfig+0x4c6>
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
 8003728:	e00b      	b.n	8003742 <HAL_RCC_OscConfig+0x4de>
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	4a16      	ldr	r2, [pc, #88]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d015      	beq.n	8003776 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fc ff89 	bl	8000660 <HAL_GetTick>
 800374e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003750:	e00a      	b.n	8003768 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fc ff85 	bl	8000660 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e11e      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_RCC_OscConfig+0x530>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ee      	beq.n	8003752 <HAL_RCC_OscConfig+0x4ee>
 8003774:	e018      	b.n	80037a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fc ff73 	bl	8000660 <HAL_GetTick>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800377c:	e00e      	b.n	800379c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fc ff6f 	bl	8000660 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d905      	bls.n	800379c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e108      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
 8003794:	58024400 	.word	0x58024400
 8003798:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800379c:	4b84      	ldr	r3, [pc, #528]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ea      	bne.n	800377e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80f9 	beq.w	80039a4 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037b2:	4b7f      	ldr	r3, [pc, #508]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ba:	2b18      	cmp	r3, #24
 80037bc:	f000 80b4 	beq.w	8003928 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	f040 8095 	bne.w	80038f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ca:	4b79      	ldr	r3, [pc, #484]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a78      	ldr	r2, [pc, #480]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80037d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fc ff43 	bl	8000660 <HAL_GetTick>
 80037da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7fc ff3f 	bl	8000660 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e0da      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037f0:	4b6f      	ldr	r3, [pc, #444]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fc:	4b6c      	ldr	r3, [pc, #432]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80037fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003800:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <HAL_RCC_OscConfig+0x750>)
 8003802:	4013      	ands	r3, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	430a      	orrs	r2, r1
 8003810:	4967      	ldr	r1, [pc, #412]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 8003812:	4313      	orrs	r3, r2
 8003814:	628b      	str	r3, [r1, #40]	; 0x28
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	3b01      	subs	r3, #1
 800381c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003824:	3b01      	subs	r3, #1
 8003826:	025b      	lsls	r3, r3, #9
 8003828:	b29b      	uxth	r3, r3
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	3b01      	subs	r3, #1
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	3b01      	subs	r3, #1
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003846:	495a      	ldr	r1, [pc, #360]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800384c:	4b58      	ldr	r3, [pc, #352]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4a57      	ldr	r2, [pc, #348]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003858:	4b55      	ldr	r3, [pc, #340]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 800385a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385c:	4b56      	ldr	r3, [pc, #344]	; (80039b8 <HAL_RCC_OscConfig+0x754>)
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003864:	00d2      	lsls	r2, r2, #3
 8003866:	4952      	ldr	r1, [pc, #328]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 8003868:	4313      	orrs	r3, r2
 800386a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800386c:	4b50      	ldr	r3, [pc, #320]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f023 020c 	bic.w	r2, r3, #12
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	494d      	ldr	r1, [pc, #308]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 800387a:	4313      	orrs	r3, r2
 800387c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800387e:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	f023 0202 	bic.w	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	4949      	ldr	r1, [pc, #292]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003890:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a46      	ldr	r2, [pc, #280]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 8003896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389c:	4b44      	ldr	r3, [pc, #272]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	4a43      	ldr	r2, [pc, #268]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038a8:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	4a40      	ldr	r2, [pc, #256]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80038ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80038b4:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	4a3d      	ldr	r2, [pc, #244]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c0:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3a      	ldr	r2, [pc, #232]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80038c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fc fec8 	bl	8000660 <HAL_GetTick>
 80038d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fc fec4 	bl	8000660 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e05f      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038e6:	4b32      	ldr	r3, [pc, #200]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x670>
 80038f2:	e057      	b.n	80039a4 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f4:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2d      	ldr	r2, [pc, #180]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 80038fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fc feae 	bl	8000660 <HAL_GetTick>
 8003904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003908:	f7fc feaa 	bl	8000660 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e045      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800391a:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x6a4>
 8003926:	e03d      	b.n	80039a4 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003928:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_OscConfig+0x74c>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	2b01      	cmp	r3, #1
 800393a:	d031      	beq.n	80039a0 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0203 	and.w	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d12a      	bne.n	80039a0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d122      	bne.n	80039a0 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d11a      	bne.n	80039a0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	0a5b      	lsrs	r3, r3, #9
 800396e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d111      	bne.n	80039a0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d108      	bne.n	80039a0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	0e1b      	lsrs	r3, r3, #24
 8003992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3730      	adds	r7, #48	; 0x30
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	58024400 	.word	0x58024400
 80039b4:	fffffc0c 	.word	0xfffffc0c
 80039b8:	ffff0007 	.word	0xffff0007

080039bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e19c      	b.n	8003d0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d0:	4b8a      	ldr	r3, [pc, #552]	; (8003bfc <HAL_RCC_ClockConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d910      	bls.n	8003a00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039de:	4b87      	ldr	r3, [pc, #540]	; (8003bfc <HAL_RCC_ClockConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 020f 	bic.w	r2, r3, #15
 80039e6:	4985      	ldr	r1, [pc, #532]	; (8003bfc <HAL_RCC_ClockConfig+0x240>)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b83      	ldr	r3, [pc, #524]	; (8003bfc <HAL_RCC_ClockConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e184      	b.n	8003d0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	4b7b      	ldr	r3, [pc, #492]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d908      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a1c:	4b78      	ldr	r3, [pc, #480]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	4975      	ldr	r1, [pc, #468]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d010      	beq.n	8003a5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	4b70      	ldr	r3, [pc, #448]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d908      	bls.n	8003a5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a4a:	4b6d      	ldr	r3, [pc, #436]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	496a      	ldr	r1, [pc, #424]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d010      	beq.n	8003a8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	4b64      	ldr	r3, [pc, #400]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d908      	bls.n	8003a8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a78:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	495e      	ldr	r1, [pc, #376]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d010      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	4b59      	ldr	r3, [pc, #356]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d908      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003aa6:	4b56      	ldr	r3, [pc, #344]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	4953      	ldr	r1, [pc, #332]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d010      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	4b4d      	ldr	r3, [pc, #308]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d908      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b4a      	ldr	r3, [pc, #296]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f023 020f 	bic.w	r2, r3, #15
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4947      	ldr	r1, [pc, #284]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d055      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003af2:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	4940      	ldr	r1, [pc, #256]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b0c:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d121      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0f6      	b.n	8003d0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b24:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d115      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0ea      	b.n	8003d0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b3c:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0de      	b.n	8003d0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b4c:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0d6      	b.n	8003d0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b5c:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f023 0207 	bic.w	r2, r3, #7
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4925      	ldr	r1, [pc, #148]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fc fd77 	bl	8000660 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b76:	f7fc fd73 	bl	8000660 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0be      	b.n	8003d0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8c:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d1eb      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d010      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d208      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f023 020f 	bic.w	r2, r3, #15
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	490e      	ldr	r1, [pc, #56]	; (8003c00 <HAL_RCC_ClockConfig+0x244>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_ClockConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d214      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <HAL_RCC_ClockConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 020f 	bic.w	r2, r3, #15
 8003be2:	4906      	ldr	r1, [pc, #24]	; (8003bfc <HAL_RCC_ClockConfig+0x240>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <HAL_RCC_ClockConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e086      	b.n	8003d0a <HAL_RCC_ClockConfig+0x34e>
 8003bfc:	52002000 	.word	0x52002000
 8003c00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d010      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d208      	bcs.n	8003c32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c20:	4b3c      	ldr	r3, [pc, #240]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	4939      	ldr	r1, [pc, #228]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d010      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d208      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	492e      	ldr	r1, [pc, #184]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d208      	bcs.n	8003c8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	4922      	ldr	r1, [pc, #136]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d010      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d208      	bcs.n	8003cbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003caa:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	4917      	ldr	r1, [pc, #92]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cbc:	f000 f834 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	4912      	ldr	r1, [pc, #72]	; (8003d18 <HAL_RCC_ClockConfig+0x35c>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <HAL_RCC_ClockConfig+0x358>)
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	4a0d      	ldr	r2, [pc, #52]	; (8003d18 <HAL_RCC_ClockConfig+0x35c>)
 8003ce4:	5cd3      	ldrb	r3, [r2, r3]
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <HAL_RCC_ClockConfig+0x360>)
 8003cf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cf4:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <HAL_RCC_ClockConfig+0x364>)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_ClockConfig+0x368>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fc64 	bl	80005cc <HAL_InitTick>
 8003d04:	4603      	mov	r3, r0
 8003d06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	58024400 	.word	0x58024400
 8003d18:	080096e0 	.word	0x080096e0
 8003d1c:	2400040c 	.word	0x2400040c
 8003d20:	24000408 	.word	0x24000408
 8003d24:	24000400 	.word	0x24000400

08003d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	; 0x24
 8003d2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d2e:	4bb3      	ldr	r3, [pc, #716]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d36:	2b18      	cmp	r3, #24
 8003d38:	f200 8155 	bhi.w	8003fe6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003da9 	.word	0x08003da9
 8003d48:	08003fe7 	.word	0x08003fe7
 8003d4c:	08003fe7 	.word	0x08003fe7
 8003d50:	08003fe7 	.word	0x08003fe7
 8003d54:	08003fe7 	.word	0x08003fe7
 8003d58:	08003fe7 	.word	0x08003fe7
 8003d5c:	08003fe7 	.word	0x08003fe7
 8003d60:	08003fe7 	.word	0x08003fe7
 8003d64:	08003dcf 	.word	0x08003dcf
 8003d68:	08003fe7 	.word	0x08003fe7
 8003d6c:	08003fe7 	.word	0x08003fe7
 8003d70:	08003fe7 	.word	0x08003fe7
 8003d74:	08003fe7 	.word	0x08003fe7
 8003d78:	08003fe7 	.word	0x08003fe7
 8003d7c:	08003fe7 	.word	0x08003fe7
 8003d80:	08003fe7 	.word	0x08003fe7
 8003d84:	08003dd5 	.word	0x08003dd5
 8003d88:	08003fe7 	.word	0x08003fe7
 8003d8c:	08003fe7 	.word	0x08003fe7
 8003d90:	08003fe7 	.word	0x08003fe7
 8003d94:	08003fe7 	.word	0x08003fe7
 8003d98:	08003fe7 	.word	0x08003fe7
 8003d9c:	08003fe7 	.word	0x08003fe7
 8003da0:	08003fe7 	.word	0x08003fe7
 8003da4:	08003ddb 	.word	0x08003ddb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003da8:	4b94      	ldr	r3, [pc, #592]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003db4:	4b91      	ldr	r3, [pc, #580]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	08db      	lsrs	r3, r3, #3
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	4a90      	ldr	r2, [pc, #576]	; (8004000 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003dc6:	e111      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003dc8:	4b8d      	ldr	r3, [pc, #564]	; (8004000 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dca:	61bb      	str	r3, [r7, #24]
    break;
 8003dcc:	e10e      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003dce:	4b8d      	ldr	r3, [pc, #564]	; (8004004 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dd0:	61bb      	str	r3, [r7, #24]
    break;
 8003dd2:	e10b      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003dd4:	4b8c      	ldr	r3, [pc, #560]	; (8004008 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dd6:	61bb      	str	r3, [r7, #24]
    break;
 8003dd8:	e108      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dda:	4b88      	ldr	r3, [pc, #544]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003de4:	4b85      	ldr	r3, [pc, #532]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003df0:	4b82      	ldr	r3, [pc, #520]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003dfa:	4b80      	ldr	r3, [pc, #512]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	08db      	lsrs	r3, r3, #3
 8003e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80e1 	beq.w	8003fe0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	f000 8083 	beq.w	8003f2c <HAL_RCC_GetSysClockFreq+0x204>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	f200 80a1 	bhi.w	8003f70 <HAL_RCC_GetSysClockFreq+0x248>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x114>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d056      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e3a:	e099      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e3c:	4b6f      	ldr	r3, [pc, #444]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d02d      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e48:	4b6c      	ldr	r3, [pc, #432]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	4a6b      	ldr	r2, [pc, #428]	; (8004000 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
 8003e58:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	ee07 3a90 	vmov	s15, r3
 8003e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e72:	4b62      	ldr	r3, [pc, #392]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e86:	eddf 5a61 	vldr	s11, [pc, #388]	; 800400c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003ea2:	e087      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004010 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb6:	4b51      	ldr	r3, [pc, #324]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800400c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ee6:	e065      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004014 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efa:	4b40      	ldr	r3, [pc, #256]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800400c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f2a:	e043      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004018 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3e:	4b2f      	ldr	r3, [pc, #188]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800400c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f6e:	e021      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004014 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f82:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800400c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fb2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	0a5b      	lsrs	r3, r3, #9
 8003fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	ee07 3a90 	vmov	s15, r3
 8003fc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd8:	ee17 3a90 	vmov	r3, s15
 8003fdc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003fde:	e005      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
    break;
 8003fe4:	e002      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003fe6:	4b07      	ldr	r3, [pc, #28]	; (8004004 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fe8:	61bb      	str	r3, [r7, #24]
    break;
 8003fea:	bf00      	nop
  }

  return sysclockfreq;
 8003fec:	69bb      	ldr	r3, [r7, #24]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	58024400 	.word	0x58024400
 8004000:	03d09000 	.word	0x03d09000
 8004004:	003d0900 	.word	0x003d0900
 8004008:	017d7840 	.word	0x017d7840
 800400c:	46000000 	.word	0x46000000
 8004010:	4c742400 	.word	0x4c742400
 8004014:	4a742400 	.word	0x4a742400
 8004018:	4bbebc20 	.word	0x4bbebc20

0800401c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004022:	f7ff fe81 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8004026:	4602      	mov	r2, r0
 8004028:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_RCC_GetHCLKFreq+0x50>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	0a1b      	lsrs	r3, r3, #8
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	490f      	ldr	r1, [pc, #60]	; (8004070 <HAL_RCC_GetHCLKFreq+0x54>)
 8004034:	5ccb      	ldrb	r3, [r1, r3]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <HAL_RCC_GetHCLKFreq+0x50>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	4a09      	ldr	r2, [pc, #36]	; (8004070 <HAL_RCC_GetHCLKFreq+0x54>)
 800404a:	5cd3      	ldrb	r3, [r2, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	fa22 f303 	lsr.w	r3, r2, r3
 8004056:	4a07      	ldr	r2, [pc, #28]	; (8004074 <HAL_RCC_GetHCLKFreq+0x58>)
 8004058:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800405a:	4a07      	ldr	r2, [pc, #28]	; (8004078 <HAL_RCC_GetHCLKFreq+0x5c>)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <HAL_RCC_GetHCLKFreq+0x58>)
 8004062:	681b      	ldr	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	58024400 	.word	0x58024400
 8004070:	080096e0 	.word	0x080096e0
 8004074:	2400040c 	.word	0x2400040c
 8004078:	24000408 	.word	0x24000408

0800407c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004084:	2300      	movs	r3, #0
 8004086:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004088:	2300      	movs	r3, #0
 800408a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d03f      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040a0:	d02a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040a6:	d824      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ac:	d018      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040b2:	d81e      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040bc:	d007      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040be:	e018      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c0:	4bab      	ldr	r3, [pc, #684]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	4aaa      	ldr	r2, [pc, #680]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040cc:	e015      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 feff 	bl	8005ed8 <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040de:	e00c      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3324      	adds	r3, #36	; 0x24
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 ffa8 	bl	800603c <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040f0:	e003      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
      break;
 80040f6:	e000      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004100:	4b9b      	ldr	r3, [pc, #620]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410c:	4998      	ldr	r1, [pc, #608]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	650b      	str	r3, [r1, #80]	; 0x50
 8004112:	e001      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03d      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	2b04      	cmp	r3, #4
 800412a:	d826      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004149 	.word	0x08004149
 8004138:	08004157 	.word	0x08004157
 800413c:	08004169 	.word	0x08004169
 8004140:	08004181 	.word	0x08004181
 8004144:	08004181 	.word	0x08004181
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004148:	4b89      	ldr	r3, [pc, #548]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	4a88      	ldr	r2, [pc, #544]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800414e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004154:	e015      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f001 febb 	bl	8005ed8 <RCCEx_PLL2_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004166:	e00c      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3324      	adds	r3, #36	; 0x24
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f001 ff64 	bl	800603c <RCCEx_PLL3_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004178:	e003      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	75fb      	strb	r3, [r7, #23]
      break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004188:	4b79      	ldr	r3, [pc, #484]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	f023 0207 	bic.w	r2, r3, #7
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	4976      	ldr	r1, [pc, #472]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004196:	4313      	orrs	r3, r2
 8004198:	650b      	str	r3, [r1, #80]	; 0x50
 800419a:	e001      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d051      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041b2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80041b6:	d036      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041b8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80041bc:	d830      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041c2:	d032      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80041c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041c8:	d82a      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041ce:	d02e      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80041d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041d4:	d824      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041da:	d018      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80041dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e0:	d81e      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x172>
 80041e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ea:	d007      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80041ec:	e018      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ee:	4b60      	ldr	r3, [pc, #384]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	4a5f      	ldr	r2, [pc, #380]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041fa:	e019      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f001 fe68 	bl	8005ed8 <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800420c:	e010      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3324      	adds	r3, #36	; 0x24
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f001 ff11 	bl	800603c <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800421e:	e007      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	75fb      	strb	r3, [r7, #23]
      break;
 8004224:	e004      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004226:	bf00      	nop
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800422e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004236:	4b4e      	ldr	r3, [pc, #312]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004244:	494a      	ldr	r1, [pc, #296]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004246:	4313      	orrs	r3, r2
 8004248:	658b      	str	r3, [r1, #88]	; 0x58
 800424a:	e001      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424c:	7dfb      	ldrb	r3, [r7, #23]
 800424e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004258:	2b00      	cmp	r3, #0
 800425a:	d051      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004262:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004266:	d036      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004268:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800426c:	d830      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800426e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004272:	d032      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004278:	d82a      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800427a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800427e:	d02e      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004280:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004284:	d824      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800428a:	d018      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x242>
 800428c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004290:	d81e      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004296:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800429a:	d007      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 800429c:	e018      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429e:	4b34      	ldr	r3, [pc, #208]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	4a33      	ldr	r2, [pc, #204]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042aa:	e019      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 fe10 	bl	8005ed8 <RCCEx_PLL2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042bc:	e010      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3324      	adds	r3, #36	; 0x24
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 feb9 	bl	800603c <RCCEx_PLL3_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042ce:	e007      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
      break;
 80042d4:	e004      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042d6:	bf00      	nop
 80042d8:	e002      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10a      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042f4:	491e      	ldr	r1, [pc, #120]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	658b      	str	r3, [r1, #88]	; 0x58
 80042fa:	e001      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d035      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004310:	2b30      	cmp	r3, #48	; 0x30
 8004312:	d01c      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004314:	2b30      	cmp	r3, #48	; 0x30
 8004316:	d817      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004318:	2b20      	cmp	r3, #32
 800431a:	d00c      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800431c:	2b20      	cmp	r3, #32
 800431e:	d813      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d016      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004324:	2b10      	cmp	r3, #16
 8004326:	d10f      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	4a10      	ldr	r2, [pc, #64]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800432e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004332:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004334:	e00e      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3304      	adds	r3, #4
 800433a:	2102      	movs	r1, #2
 800433c:	4618      	mov	r0, r3
 800433e:	f001 fdcb 	bl	8005ed8 <RCCEx_PLL2_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004346:	e005      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
      break;
 800434c:	e002      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10c      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004366:	4902      	ldr	r1, [pc, #8]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004368:	4313      	orrs	r3, r2
 800436a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800436c:	e004      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800436e:	bf00      	nop
 8004370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d047      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438c:	d030      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800438e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004392:	d82a      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004394:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004398:	d02c      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800439a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800439e:	d824      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a4:	d018      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043aa:	d81e      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d007      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043b6:	e018      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b8:	4bac      	ldr	r3, [pc, #688]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	4aab      	ldr	r2, [pc, #684]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043c4:	e017      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3304      	adds	r3, #4
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fd83 	bl	8005ed8 <RCCEx_PLL2_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043d6:	e00e      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3324      	adds	r3, #36	; 0x24
 80043dc:	2100      	movs	r1, #0
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 fe2c 	bl	800603c <RCCEx_PLL3_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043e8:	e005      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
      break;
 80043ee:	e002      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80043f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043fc:	4b9b      	ldr	r3, [pc, #620]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	4998      	ldr	r1, [pc, #608]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800440a:	4313      	orrs	r3, r2
 800440c:	650b      	str	r3, [r1, #80]	; 0x50
 800440e:	e001      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d049      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004428:	d02e      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800442a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800442e:	d828      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004430:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004434:	d02a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004436:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800443a:	d822      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800443c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004440:	d026      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004442:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004446:	d81c      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800444c:	d010      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800444e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004452:	d816      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01d      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445c:	d111      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3304      	adds	r3, #4
 8004462:	2101      	movs	r1, #1
 8004464:	4618      	mov	r0, r3
 8004466:	f001 fd37 	bl	8005ed8 <RCCEx_PLL2_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800446e:	e012      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3324      	adds	r3, #36	; 0x24
 8004474:	2101      	movs	r1, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f001 fde0 	bl	800603c <RCCEx_PLL3_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004480:	e009      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	75fb      	strb	r3, [r7, #23]
      break;
 8004486:	e006      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004488:	bf00      	nop
 800448a:	e004      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800448c:	bf00      	nop
 800448e:	e002      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004490:	bf00      	nop
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004496:	7dfb      	ldrb	r3, [r7, #23]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800449c:	4b73      	ldr	r3, [pc, #460]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800449e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	4970      	ldr	r1, [pc, #448]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	650b      	str	r3, [r1, #80]	; 0x50
 80044ae:	e001      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d04b      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ca:	d02e      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80044cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044d0:	d828      	bhi.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d6:	d02a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d822      	bhi.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044e2:	d026      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80044e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044e8:	d81c      	bhi.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ee:	d010      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80044f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f4:	d816      	bhi.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01d      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80044fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044fe:	d111      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	2101      	movs	r1, #1
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fce6 	bl	8005ed8 <RCCEx_PLL2_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004510:	e012      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3324      	adds	r3, #36	; 0x24
 8004516:	2101      	movs	r1, #1
 8004518:	4618      	mov	r0, r3
 800451a:	f001 fd8f 	bl	800603c <RCCEx_PLL3_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004522:	e009      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
      break;
 8004528:	e006      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800452a:	bf00      	nop
 800452c:	e004      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800452e:	bf00      	nop
 8004530:	e002      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004532:	bf00      	nop
 8004534:	e000      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800453e:	4b4b      	ldr	r3, [pc, #300]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800454c:	4947      	ldr	r1, [pc, #284]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800454e:	4313      	orrs	r3, r2
 8004550:	658b      	str	r3, [r1, #88]	; 0x58
 8004552:	e001      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02f      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800456c:	d00e      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800456e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004572:	d814      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d015      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800457c:	d10f      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800457e:	4b3b      	ldr	r3, [pc, #236]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	4a3a      	ldr	r2, [pc, #232]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004588:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800458a:	e00c      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fca0 	bl	8005ed8 <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800459c:	e003      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
      break;
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80045a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045ac:	4b2f      	ldr	r3, [pc, #188]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b8:	492c      	ldr	r1, [pc, #176]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	650b      	str	r3, [r1, #80]	; 0x50
 80045be:	e001      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d032      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d81b      	bhi.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004617 	.word	0x08004617
 80045e4:	080045f1 	.word	0x080045f1
 80045e8:	080045ff 	.word	0x080045ff
 80045ec:	08004617 	.word	0x08004617
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f0:	4b1e      	ldr	r3, [pc, #120]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80045fc:	e00c      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3304      	adds	r3, #4
 8004602:	2102      	movs	r1, #2
 8004604:	4618      	mov	r0, r3
 8004606:	f001 fc67 	bl	8005ed8 <RCCEx_PLL2_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800460e:	e003      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	75fb      	strb	r3, [r7, #23]
      break;
 8004614:	e000      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	4910      	ldr	r1, [pc, #64]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800462c:	4313      	orrs	r3, r2
 800462e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004630:	e001      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 808a 	beq.w	8004758 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a09      	ldr	r2, [pc, #36]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800464a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004650:	f7fc f806 	bl	8000660 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004656:	e00d      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004658:	f7fc f802 	bl	8000660 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d906      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	75fb      	strb	r3, [r7, #23]
        break;
 800466a:	e009      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800466c:	58024400 	.word	0x58024400
 8004670:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004674:	4bb9      	ldr	r3, [pc, #740]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0eb      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d166      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004686:	4bb6      	ldr	r3, [pc, #728]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004688:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004690:	4053      	eors	r3, r2
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	2b00      	cmp	r3, #0
 8004698:	d013      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800469a:	4bb1      	ldr	r3, [pc, #708]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046a4:	4bae      	ldr	r3, [pc, #696]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	4aad      	ldr	r2, [pc, #692]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046b0:	4bab      	ldr	r3, [pc, #684]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4aaa      	ldr	r2, [pc, #680]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046bc:	4aa8      	ldr	r2, [pc, #672]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046cc:	d115      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fb ffc7 	bl	8000660 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046d4:	e00b      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fb ffc3 	bl	8000660 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d902      	bls.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	75fb      	strb	r3, [r7, #23]
            break;
 80046ec:	e005      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046ee:	4b9c      	ldr	r3, [pc, #624]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0ed      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d126      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470e:	d10d      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004710:	4b93      	ldr	r3, [pc, #588]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800471e:	0919      	lsrs	r1, r3, #4
 8004720:	4b90      	ldr	r3, [pc, #576]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004722:	400b      	ands	r3, r1
 8004724:	498e      	ldr	r1, [pc, #568]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004726:	4313      	orrs	r3, r2
 8004728:	610b      	str	r3, [r1, #16]
 800472a:	e005      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800472c:	4b8c      	ldr	r3, [pc, #560]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	4a8b      	ldr	r2, [pc, #556]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004732:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004736:	6113      	str	r3, [r2, #16]
 8004738:	4b89      	ldr	r3, [pc, #548]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800473a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004746:	4986      	ldr	r1, [pc, #536]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	670b      	str	r3, [r1, #112]	; 0x70
 800474c:	e004      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	75bb      	strb	r3, [r7, #22]
 8004752:	e001      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d07e      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004768:	2b28      	cmp	r3, #40	; 0x28
 800476a:	d867      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004843 	.word	0x08004843
 8004778:	0800483d 	.word	0x0800483d
 800477c:	0800483d 	.word	0x0800483d
 8004780:	0800483d 	.word	0x0800483d
 8004784:	0800483d 	.word	0x0800483d
 8004788:	0800483d 	.word	0x0800483d
 800478c:	0800483d 	.word	0x0800483d
 8004790:	0800483d 	.word	0x0800483d
 8004794:	08004819 	.word	0x08004819
 8004798:	0800483d 	.word	0x0800483d
 800479c:	0800483d 	.word	0x0800483d
 80047a0:	0800483d 	.word	0x0800483d
 80047a4:	0800483d 	.word	0x0800483d
 80047a8:	0800483d 	.word	0x0800483d
 80047ac:	0800483d 	.word	0x0800483d
 80047b0:	0800483d 	.word	0x0800483d
 80047b4:	0800482b 	.word	0x0800482b
 80047b8:	0800483d 	.word	0x0800483d
 80047bc:	0800483d 	.word	0x0800483d
 80047c0:	0800483d 	.word	0x0800483d
 80047c4:	0800483d 	.word	0x0800483d
 80047c8:	0800483d 	.word	0x0800483d
 80047cc:	0800483d 	.word	0x0800483d
 80047d0:	0800483d 	.word	0x0800483d
 80047d4:	08004843 	.word	0x08004843
 80047d8:	0800483d 	.word	0x0800483d
 80047dc:	0800483d 	.word	0x0800483d
 80047e0:	0800483d 	.word	0x0800483d
 80047e4:	0800483d 	.word	0x0800483d
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	0800483d 	.word	0x0800483d
 80047f4:	08004843 	.word	0x08004843
 80047f8:	0800483d 	.word	0x0800483d
 80047fc:	0800483d 	.word	0x0800483d
 8004800:	0800483d 	.word	0x0800483d
 8004804:	0800483d 	.word	0x0800483d
 8004808:	0800483d 	.word	0x0800483d
 800480c:	0800483d 	.word	0x0800483d
 8004810:	0800483d 	.word	0x0800483d
 8004814:	08004843 	.word	0x08004843
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f001 fb5a 	bl	8005ed8 <RCCEx_PLL2_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004828:	e00c      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3324      	adds	r3, #36	; 0x24
 800482e:	2101      	movs	r1, #1
 8004830:	4618      	mov	r0, r3
 8004832:	f001 fc03 	bl	800603c <RCCEx_PLL3_Config>
 8004836:	4603      	mov	r3, r0
 8004838:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800483a:	e003      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]
      break;
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800484a:	4b45      	ldr	r3, [pc, #276]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004856:	4942      	ldr	r1, [pc, #264]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	654b      	str	r3, [r1, #84]	; 0x54
 800485c:	e001      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d037      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	2b05      	cmp	r3, #5
 8004874:	d820      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	080048bf 	.word	0x080048bf
 8004880:	08004895 	.word	0x08004895
 8004884:	080048a7 	.word	0x080048a7
 8004888:	080048bf 	.word	0x080048bf
 800488c:	080048bf 	.word	0x080048bf
 8004890:	080048bf 	.word	0x080048bf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3304      	adds	r3, #4
 8004898:	2101      	movs	r1, #1
 800489a:	4618      	mov	r0, r3
 800489c:	f001 fb1c 	bl	8005ed8 <RCCEx_PLL2_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048a4:	e00c      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3324      	adds	r3, #36	; 0x24
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 fbc5 	bl	800603c <RCCEx_PLL3_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048b6:	e003      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
      break;
 80048bc:	e000      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80048be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048c6:	4b26      	ldr	r3, [pc, #152]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	f023 0207 	bic.w	r2, r3, #7
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d2:	4923      	ldr	r1, [pc, #140]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	654b      	str	r3, [r1, #84]	; 0x54
 80048d8:	e001      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d040      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	d821      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80048f4:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	0800493f 	.word	0x0800493f
 8004900:	08004915 	.word	0x08004915
 8004904:	08004927 	.word	0x08004927
 8004908:	0800493f 	.word	0x0800493f
 800490c:	0800493f 	.word	0x0800493f
 8004910:	0800493f 	.word	0x0800493f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	2101      	movs	r1, #1
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fadc 	bl	8005ed8 <RCCEx_PLL2_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004924:	e00c      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3324      	adds	r3, #36	; 0x24
 800492a:	2101      	movs	r1, #1
 800492c:	4618      	mov	r0, r3
 800492e:	f001 fb85 	bl	800603c <RCCEx_PLL3_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004936:	e003      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	75fb      	strb	r3, [r7, #23]
      break;
 800493c:	e000      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800493e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d110      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004946:	4b06      	ldr	r3, [pc, #24]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494a:	f023 0207 	bic.w	r2, r3, #7
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004954:	4902      	ldr	r1, [pc, #8]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	658b      	str	r3, [r1, #88]	; 0x58
 800495a:	e007      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800495c:	58024800 	.word	0x58024800
 8004960:	58024400 	.word	0x58024400
 8004964:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d04b      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004982:	d02e      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004988:	d828      	bhi.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498e:	d02a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004994:	d822      	bhi.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004996:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800499a:	d026      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800499c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049a0:	d81c      	bhi.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a6:	d010      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80049a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ac:	d816      	bhi.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01d      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x972>
 80049b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049b6:	d111      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 fa8a 	bl	8005ed8 <RCCEx_PLL2_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049c8:	e012      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3324      	adds	r3, #36	; 0x24
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 fb33 	bl	800603c <RCCEx_PLL3_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049da:	e009      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	75fb      	strb	r3, [r7, #23]
      break;
 80049e0:	e006      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049e2:	bf00      	nop
 80049e4:	e004      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049e6:	bf00      	nop
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049ea:	bf00      	nop
 80049ec:	e000      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f6:	4bb2      	ldr	r3, [pc, #712]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	49ae      	ldr	r1, [pc, #696]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	654b      	str	r3, [r1, #84]	; 0x54
 8004a0a:	e001      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d04b      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a26:	d02e      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004a28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a2c:	d828      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a32:	d02a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a38:	d822      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a3e:	d026      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a44:	d81c      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4a:	d010      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a50:	d816      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01d      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5a:	d111      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fa38 	bl	8005ed8 <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a6c:	e012      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3324      	adds	r3, #36	; 0x24
 8004a72:	2102      	movs	r1, #2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 fae1 	bl	800603c <RCCEx_PLL3_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a7e:	e009      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	75fb      	strb	r3, [r7, #23]
      break;
 8004a84:	e006      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a86:	bf00      	nop
 8004a88:	e004      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a8a:	bf00      	nop
 8004a8c:	e002      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a9a:	4b89      	ldr	r3, [pc, #548]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa8:	4985      	ldr	r1, [pc, #532]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	658b      	str	r3, [r1, #88]	; 0x58
 8004aae:	e001      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
 8004ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d04b      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004aca:	d02e      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004acc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ad0:	d828      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad6:	d02a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004adc:	d822      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ade:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ae2:	d026      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004ae4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ae8:	d81c      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aee:	d010      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af4:	d816      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01d      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afe:	d111      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 f9e6 	bl	8005ed8 <RCCEx_PLL2_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b10:	e012      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3324      	adds	r3, #36	; 0x24
 8004b16:	2102      	movs	r1, #2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fa8f 	bl	800603c <RCCEx_PLL3_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b22:	e009      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	75fb      	strb	r3, [r7, #23]
      break;
 8004b28:	e006      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e004      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b3e:	4b60      	ldr	r3, [pc, #384]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b4c:	495c      	ldr	r1, [pc, #368]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	658b      	str	r3, [r1, #88]	; 0x58
 8004b52:	e001      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d018      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6c:	d10a      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3324      	adds	r3, #36	; 0x24
 8004b72:	2102      	movs	r1, #2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f001 fa61 	bl	800603c <RCCEx_PLL3_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b84:	4b4e      	ldr	r3, [pc, #312]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b90:	494b      	ldr	r1, [pc, #300]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bac:	d10a      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3324      	adds	r3, #36	; 0x24
 8004bb2:	2102      	movs	r1, #2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 fa41 	bl	800603c <RCCEx_PLL3_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bc4:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	493b      	ldr	r1, [pc, #236]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d034      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bee:	d01d      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bf4:	d817      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d009      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004c00:	e011      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 f965 	bl	8005ed8 <RCCEx_PLL2_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c12:	e00c      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3324      	adds	r3, #36	; 0x24
 8004c18:	2102      	movs	r1, #2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 fa0e 	bl	800603c <RCCEx_PLL3_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c24:	e003      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c34:	4b22      	ldr	r3, [pc, #136]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c42:	491f      	ldr	r1, [pc, #124]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	658b      	str	r3, [r1, #88]	; 0x58
 8004c48:	e001      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d036      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c64:	d01c      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004c66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c6a:	d816      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c70:	d003      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c76:	d007      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004c78:	e00f      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	4a10      	ldr	r2, [pc, #64]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c86:	e00c      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3324      	adds	r3, #36	; 0x24
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 f9d4 	bl	800603c <RCCEx_PLL3_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c98:	e003      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb6:	4902      	ldr	r1, [pc, #8]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	654b      	str	r3, [r1, #84]	; 0x54
 8004cbc:	e004      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004cbe:	bf00      	nop
 8004cc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d029      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce0:	d007      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004ce2:	e00f      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce4:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4a60      	ldr	r2, [pc, #384]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004cf0:	e00b      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 f8ed 	bl	8005ed8 <RCCEx_PLL2_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	75fb      	strb	r3, [r7, #23]
      break;
 8004d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d10:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1c:	4953      	ldr	r1, [pc, #332]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d22:	e001      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	2102      	movs	r1, #2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 f97e 	bl	800603c <RCCEx_PLL3_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d030      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d5e:	d017      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d64:	d811      	bhi.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d70:	d80b      	bhi.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d010      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7c:	4b3b      	ldr	r3, [pc, #236]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	4a3a      	ldr	r2, [pc, #232]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004d88:	e007      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8e:	e004      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d90:	bf00      	nop
 8004d92:	e002      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d94:	bf00      	nop
 8004d96:	e000      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004da0:	4b32      	ldr	r3, [pc, #200]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dac:	492f      	ldr	r1, [pc, #188]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	654b      	str	r3, [r1, #84]	; 0x54
 8004db2:	e001      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
 8004db6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004dc4:	4b29      	ldr	r3, [pc, #164]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd0:	4926      	ldr	r1, [pc, #152]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004de2:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dee:	491f      	ldr	r1, [pc, #124]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00d      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e00:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e0a:	6113      	str	r3, [r2, #16]
 8004e0c:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e16:	4915      	ldr	r1, [pc, #84]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	da08      	bge.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e24:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e30:	490e      	ldr	r1, [pc, #56]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e50:	4906      	ldr	r1, [pc, #24]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004e56:	7dbb      	ldrb	r3, [r7, #22]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e000      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	58024400 	.word	0x58024400

08004e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b090      	sub	sp, #64	; 0x40
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7e:	f040 8089 	bne.w	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004e82:	4b95      	ldr	r3, [pc, #596]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d87d      	bhi.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ead 	.word	0x08004ead
 8004e9c:	08004ed1 	.word	0x08004ed1
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004f89 	.word	0x08004f89
 8004ea8:	08004f19 	.word	0x08004f19

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004eac:	4b8a      	ldr	r3, [pc, #552]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eb8:	d107      	bne.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 feb8 	bl	8005c34 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ec8:	e3ed      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ece:	e3ea      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ed0:	4b81      	ldr	r3, [pc, #516]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004edc:	d107      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ede:	f107 0318 	add.w	r3, r7, #24
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fbfe 	bl	80056e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004eec:	e3db      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ef2:	e3d8      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ef4:	4b78      	ldr	r3, [pc, #480]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f00:	d107      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f02:	f107 030c 	add.w	r3, r7, #12
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fd40 	bl	800598c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f10:	e3c9      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f16:	e3c6      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f18:	4b6f      	ldr	r3, [pc, #444]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f22:	4b6d      	ldr	r3, [pc, #436]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f34:	4b68      	ldr	r3, [pc, #416]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	08db      	lsrs	r3, r3, #3
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	4a67      	ldr	r2, [pc, #412]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f46:	e01e      	b.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f48:	4b63      	ldr	r3, [pc, #396]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f54:	d106      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f5c:	d102      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f5e:	4b60      	ldr	r3, [pc, #384]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f62:	e010      	b.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f64:	4b5c      	ldr	r3, [pc, #368]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f70:	d106      	bne.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f78:	d102      	bne.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004f7a:	4b5a      	ldr	r3, [pc, #360]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7e:	e002      	b.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004f84:	e38f      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f86:	e38e      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f88:	4b57      	ldr	r3, [pc, #348]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f8c:	e38b      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f92:	e388      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9a:	f040 80a7 	bne.w	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004f9e:	4b4e      	ldr	r3, [pc, #312]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004fa6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fae:	d054      	beq.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fb6:	f200 808b 	bhi.w	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fc0:	f000 8083 	beq.w	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fca:	f200 8081 	bhi.w	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd4:	d02f      	beq.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fdc:	d878      	bhi.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fea:	d012      	beq.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004fec:	e070      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fee:	4b3a      	ldr	r3, [pc, #232]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ffa:	d107      	bne.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fe17 	bl	8005c34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800500a:	e34c      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005010:	e349      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800501a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800501e:	d107      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005020:	f107 0318 	add.w	r3, r7, #24
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fb5d 	bl	80056e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800502e:	e33a      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005034:	e337      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005036:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800503e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005042:	d107      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005044:	f107 030c 	add.w	r3, r7, #12
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fc9f 	bl	800598c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005052:	e328      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005058:	e325      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800505a:	4b1f      	ldr	r3, [pc, #124]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005062:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005064:	4b1c      	ldr	r3, [pc, #112]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b04      	cmp	r3, #4
 800506e:	d10c      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005076:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	08db      	lsrs	r3, r3, #3
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	4a16      	ldr	r2, [pc, #88]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005082:	fa22 f303 	lsr.w	r3, r2, r3
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005088:	e01e      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800508a:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005096:	d106      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509e:	d102      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80050a0:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a4:	e010      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050a6:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b2:	d106      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80050b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ba:	d102      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80050be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c0:	e002      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80050c6:	e2ee      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80050c8:	e2ed      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050ce:	e2ea      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050d4:	e2e7      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80050d6:	bf00      	nop
 80050d8:	58024400 	.word	0x58024400
 80050dc:	03d09000 	.word	0x03d09000
 80050e0:	003d0900 	.word	0x003d0900
 80050e4:	017d7840 	.word	0x017d7840
 80050e8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f2:	f040 809c 	bne.w	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80050f6:	4b9e      	ldr	r3, [pc, #632]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80050fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005106:	d054      	beq.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800510e:	f200 808b 	bhi.w	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005118:	f000 8083 	beq.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005122:	f200 8081 	bhi.w	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800512c:	d02f      	beq.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005134:	d878      	bhi.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005142:	d012      	beq.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005144:	e070      	b.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005146:	4b8a      	ldr	r3, [pc, #552]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005152:	d107      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fd6b 	bl	8005c34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005162:	e2a0      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005168:	e29d      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800516a:	4b81      	ldr	r3, [pc, #516]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005176:	d107      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005178:	f107 0318 	add.w	r3, r7, #24
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fab1 	bl	80056e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005186:	e28e      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800518c:	e28b      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800518e:	4b78      	ldr	r3, [pc, #480]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519a:	d107      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800519c:	f107 030c 	add.w	r3, r7, #12
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fbf3 	bl	800598c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051aa:	e27c      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051b0:	e279      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80051b2:	4b6f      	ldr	r3, [pc, #444]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051bc:	4b6c      	ldr	r3, [pc, #432]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d10c      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051ce:	4b68      	ldr	r3, [pc, #416]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	08db      	lsrs	r3, r3, #3
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	4a66      	ldr	r2, [pc, #408]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80051da:	fa22 f303 	lsr.w	r3, r2, r3
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e0:	e01e      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051e2:	4b63      	ldr	r3, [pc, #396]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ee:	d106      	bne.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80051f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051f6:	d102      	bne.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80051f8:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051fc:	e010      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051fe:	4b5c      	ldr	r3, [pc, #368]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800520a:	d106      	bne.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005212:	d102      	bne.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005214:	4b59      	ldr	r3, [pc, #356]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005218:	e002      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800521e:	e242      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005220:	e241      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005222:	4b57      	ldr	r3, [pc, #348]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005226:	e23e      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800522c:	e23b      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	f040 80a6 	bne.w	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005238:	4b4d      	ldr	r3, [pc, #308]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005240:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005248:	d054      	beq.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005250:	f200 808b 	bhi.w	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800525a:	f000 8083 	beq.w	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005260:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005264:	f200 8081 	bhi.w	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526e:	d02f      	beq.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005276:	d878      	bhi.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	2b00      	cmp	r3, #0
 800527c:	d004      	beq.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005284:	d012      	beq.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8005286:	e070      	b.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005288:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005294:	d107      	bne.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fcca 	bl	8005c34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052a4:	e1ff      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052aa:	e1fc      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052ac:	4b30      	ldr	r3, [pc, #192]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b8:	d107      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ba:	f107 0318 	add.w	r3, r7, #24
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fa10 	bl	80056e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052c8:	e1ed      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ce:	e1ea      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052dc:	d107      	bne.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052de:	f107 030c 	add.w	r3, r7, #12
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fb52 	bl	800598c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052ec:	e1db      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052f2:	e1d8      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052f4:	4b1e      	ldr	r3, [pc, #120]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052fe:	4b1c      	ldr	r3, [pc, #112]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b04      	cmp	r3, #4
 8005308:	d10c      	bne.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	08db      	lsrs	r3, r3, #3
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005322:	e01e      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005324:	4b12      	ldr	r3, [pc, #72]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005330:	d106      	bne.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005338:	d102      	bne.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800533a:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800533c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533e:	e010      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800534c:	d106      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005354:	d102      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800535a:	e002      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005360:	e1a1      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005362:	e1a0      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005368:	e19d      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800536e:	e19a      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005370:	58024400 	.word	0x58024400
 8005374:	03d09000 	.word	0x03d09000
 8005378:	003d0900 	.word	0x003d0900
 800537c:	017d7840 	.word	0x017d7840
 8005380:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800538a:	d173      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800538c:	4b9a      	ldr	r3, [pc, #616]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800538e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800539c:	d02f      	beq.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053a4:	d863      	bhi.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b2:	d012      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80053b4:	e05b      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053b6:	4b90      	ldr	r3, [pc, #576]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c2:	d107      	bne.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c4:	f107 0318 	add.w	r3, r7, #24
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 f98b 	bl	80056e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053d2:	e168      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053d8:	e165      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053da:	4b87      	ldr	r3, [pc, #540]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e6:	d107      	bne.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e8:	f107 030c 	add.w	r3, r7, #12
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 facd 	bl	800598c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053f6:	e156      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053fc:	e153      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053fe:	4b7e      	ldr	r3, [pc, #504]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005406:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005408:	4b7b      	ldr	r3, [pc, #492]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b04      	cmp	r3, #4
 8005412:	d10c      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8005414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800541a:	4b77      	ldr	r3, [pc, #476]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	08db      	lsrs	r3, r3, #3
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	4a75      	ldr	r2, [pc, #468]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005426:	fa22 f303 	lsr.w	r3, r2, r3
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800542c:	e01e      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800542e:	4b72      	ldr	r3, [pc, #456]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543a:	d106      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005442:	d102      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005444:	4b6e      	ldr	r3, [pc, #440]	; (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005448:	e010      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800544a:	4b6b      	ldr	r3, [pc, #428]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005452:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005456:	d106      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545e:	d102      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005460:	4b68      	ldr	r3, [pc, #416]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005464:	e002      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005466:	2300      	movs	r3, #0
 8005468:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800546a:	e11c      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800546c:	e11b      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005472:	e118      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547a:	d133      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800547c:	4b5e      	ldr	r3, [pc, #376]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800547e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005484:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005492:	d012      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005494:	e023      	b.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005496:	4b58      	ldr	r3, [pc, #352]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054a2:	d107      	bne.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fbc3 	bl	8005c34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054b2:	e0f8      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054b8:	e0f5      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054ba:	4b4f      	ldr	r3, [pc, #316]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054c6:	d107      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054c8:	f107 0318 	add.w	r3, r7, #24
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f909 	bl	80056e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054d6:	e0e6      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054dc:	e0e3      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054e2:	e0e0      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ea:	f040 808d 	bne.w	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80054ee:	4b42      	ldr	r3, [pc, #264]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80054f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054fe:	d06b      	beq.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005506:	d874      	bhi.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d056      	beq.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d86c      	bhi.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800551e:	d03b      	beq.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005526:	d864      	bhi.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800552e:	d021      	beq.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005536:	d85c      	bhi.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	2b00      	cmp	r3, #0
 800553c:	d004      	beq.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005544:	d004      	beq.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005546:	e054      	b.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005548:	f000 f8b6 	bl	80056b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800554c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800554e:	e0aa      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005550:	4b29      	ldr	r3, [pc, #164]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800555c:	d107      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800555e:	f107 0318 	add.w	r3, r7, #24
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f8be 	bl	80056e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800556c:	e09b      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005572:	e098      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005574:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800557c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005580:	d107      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005582:	f107 030c 	add.w	r3, r7, #12
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fa00 	bl	800598c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005590:	e089      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005596:	e086      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005598:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d109      	bne.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055a4:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	4a13      	ldr	r2, [pc, #76]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055b6:	e076      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055bc:	e073      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80055be:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ca:	d102      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80055cc:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055d0:	e069      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055d6:	e066      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e4:	d102      	bne.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055ea:	e05c      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055f0:	e059      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055f6:	e056      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80055f8:	58024400 	.word	0x58024400
 80055fc:	03d09000 	.word	0x03d09000
 8005600:	003d0900 	.word	0x003d0900
 8005604:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560e:	d148      	bne.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005610:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005620:	d02a      	beq.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005628:	d838      	bhi.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005636:	d00d      	beq.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005638:	e030      	b.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800563a:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005646:	d102      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8005648:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800564c:	e02b      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005652:	e028      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005654:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005660:	d107      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fae4 	bl	8005c34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005670:	e019      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005676:	e016      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005678:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005684:	d107      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005686:	f107 0318 	add.w	r3, r7, #24
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f82a 	bl	80056e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005694:	e007      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800569a:	e004      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056a0:	e001      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80056a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3740      	adds	r7, #64	; 0x40
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	58024400 	.word	0x58024400
 80056b4:	017d7840 	.word	0x017d7840

080056b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80056bc:	f7fe fcae 	bl	800401c <HAL_RCC_GetHCLKFreq>
 80056c0:	4602      	mov	r2, r0
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	091b      	lsrs	r3, r3, #4
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	4904      	ldr	r1, [pc, #16]	; (80056e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056ce:	5ccb      	ldrb	r3, [r1, r3]
 80056d0:	f003 031f 	and.w	r3, r3, #31
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056d8:	4618      	mov	r0, r3
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	58024400 	.word	0x58024400
 80056e0:	080096e0 	.word	0x080096e0

080056e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b089      	sub	sp, #36	; 0x24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056ec:	4ba1      	ldr	r3, [pc, #644]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80056f6:	4b9f      	ldr	r3, [pc, #636]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	0b1b      	lsrs	r3, r3, #12
 80056fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005700:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005702:	4b9c      	ldr	r3, [pc, #624]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	091b      	lsrs	r3, r3, #4
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800570e:	4b99      	ldr	r3, [pc, #612]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	08db      	lsrs	r3, r3, #3
 8005714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	fb02 f303 	mul.w	r3, r2, r3
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005726:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8111 	beq.w	8005954 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b02      	cmp	r3, #2
 8005736:	f000 8083 	beq.w	8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b02      	cmp	r3, #2
 800573e:	f200 80a1 	bhi.w	8005884 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d056      	beq.n	80057fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800574e:	e099      	b.n	8005884 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005750:	4b88      	ldr	r3, [pc, #544]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b00      	cmp	r3, #0
 800575a:	d02d      	beq.n	80057b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800575c:	4b85      	ldr	r3, [pc, #532]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	08db      	lsrs	r3, r3, #3
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	4a84      	ldr	r2, [pc, #528]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005786:	4b7b      	ldr	r3, [pc, #492]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005796:	ed97 6a03 	vldr	s12, [r7, #12]
 800579a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800597c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800579e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057b6:	e087      	b.n	80058c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005980 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b6a      	ldr	r3, [pc, #424]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a03 	vldr	s12, [r7, #12]
 80057de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800597c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057fa:	e065      	b.n	80058c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b59      	ldr	r3, [pc, #356]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005822:	eddf 5a56 	vldr	s11, [pc, #344]	; 800597c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800583e:	e043      	b.n	80058c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b48      	ldr	r3, [pc, #288]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a03 	vldr	s12, [r7, #12]
 8005866:	eddf 5a45 	vldr	s11, [pc, #276]	; 800597c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005882:	e021      	b.n	80058c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005896:	4b37      	ldr	r3, [pc, #220]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800597c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80058c8:	4b2a      	ldr	r3, [pc, #168]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	0a5b      	lsrs	r3, r3, #9
 80058ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ee:	ee17 2a90 	vmov	r2, s15
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80058f6:	4b1f      	ldr	r3, [pc, #124]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	0c1b      	lsrs	r3, r3, #16
 80058fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005900:	ee07 3a90 	vmov	s15, r3
 8005904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800590c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005910:	edd7 6a07 	vldr	s13, [r7, #28]
 8005914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591c:	ee17 2a90 	vmov	r2, s15
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	0e1b      	lsrs	r3, r3, #24
 800592a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800593a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800593e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800594a:	ee17 2a90 	vmov	r2, s15
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	609a      	str	r2, [r3, #8]
}
 8005966:	bf00      	nop
 8005968:	3724      	adds	r7, #36	; 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	58024400 	.word	0x58024400
 8005978:	03d09000 	.word	0x03d09000
 800597c:	46000000 	.word	0x46000000
 8005980:	4c742400 	.word	0x4c742400
 8005984:	4a742400 	.word	0x4a742400
 8005988:	4bbebc20 	.word	0x4bbebc20

0800598c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800598c:	b480      	push	{r7}
 800598e:	b089      	sub	sp, #36	; 0x24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005994:	4ba1      	ldr	r3, [pc, #644]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800599e:	4b9f      	ldr	r3, [pc, #636]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	0d1b      	lsrs	r3, r3, #20
 80059a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80059aa:	4b9c      	ldr	r3, [pc, #624]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059b6:	4b99      	ldr	r3, [pc, #612]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ba:	08db      	lsrs	r3, r3, #3
 80059bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8111 	beq.w	8005bfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	f000 8083 	beq.w	8005ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	f200 80a1 	bhi.w	8005b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d056      	beq.n	8005aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059f6:	e099      	b.n	8005b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059f8:	4b88      	ldr	r3, [pc, #544]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d02d      	beq.n	8005a60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a04:	4b85      	ldr	r3, [pc, #532]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	08db      	lsrs	r3, r3, #3
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	4a84      	ldr	r2, [pc, #528]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
 8005a14:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	ee07 3a90 	vmov	s15, r3
 8005a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2e:	4b7b      	ldr	r3, [pc, #492]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a5e:	e087      	b.n	8005b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b6a      	ldr	r3, [pc, #424]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa2:	e065      	b.n	8005b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab6:	4b59      	ldr	r3, [pc, #356]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ae6:	e043      	b.n	8005b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afa:	4b48      	ldr	r3, [pc, #288]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b2a:	e021      	b.n	8005b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3e:	4b37      	ldr	r3, [pc, #220]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b70:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	0a5b      	lsrs	r3, r3, #9
 8005b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b96:	ee17 2a90 	vmov	r2, s15
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005b9e:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	0c1b      	lsrs	r3, r3, #16
 8005ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba8:	ee07 3a90 	vmov	s15, r3
 8005bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc4:	ee17 2a90 	vmov	r2, s15
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005bcc:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	0e1b      	lsrs	r3, r3, #24
 8005bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf2:	ee17 2a90 	vmov	r2, s15
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005bfa:	e008      	b.n	8005c0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	609a      	str	r2, [r3, #8]
}
 8005c0e:	bf00      	nop
 8005c10:	3724      	adds	r7, #36	; 0x24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	58024400 	.word	0x58024400
 8005c20:	03d09000 	.word	0x03d09000
 8005c24:	46000000 	.word	0x46000000
 8005c28:	4c742400 	.word	0x4c742400
 8005c2c:	4a742400 	.word	0x4a742400
 8005c30:	4bbebc20 	.word	0x4bbebc20

08005c34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b089      	sub	sp, #36	; 0x24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c3c:	4ba0      	ldr	r3, [pc, #640]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005c46:	4b9e      	ldr	r3, [pc, #632]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	091b      	lsrs	r3, r3, #4
 8005c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005c52:	4b9b      	ldr	r3, [pc, #620]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005c5c:	4b98      	ldr	r3, [pc, #608]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c60:	08db      	lsrs	r3, r3, #3
 8005c62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	fb02 f303 	mul.w	r3, r2, r3
 8005c6c:	ee07 3a90 	vmov	s15, r3
 8005c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8111 	beq.w	8005ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	f000 8083 	beq.w	8005d8e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	f200 80a1 	bhi.w	8005dd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d056      	beq.n	8005d4a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005c9c:	e099      	b.n	8005dd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c9e:	4b88      	ldr	r3, [pc, #544]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d02d      	beq.n	8005d06 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005caa:	4b85      	ldr	r3, [pc, #532]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	08db      	lsrs	r3, r3, #3
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	4a83      	ldr	r2, [pc, #524]	; (8005ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cba:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd4:	4b7a      	ldr	r3, [pc, #488]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cdc:	ee07 3a90 	vmov	s15, r3
 8005ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005cec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d00:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d04:	e087      	b.n	8005e16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	ee07 3a90 	vmov	s15, r3
 8005d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d10:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005ecc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005d14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d18:	4b69      	ldr	r3, [pc, #420]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d20:	ee07 3a90 	vmov	s15, r3
 8005d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d28:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d48:	e065      	b.n	8005e16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	ee07 3a90 	vmov	s15, r3
 8005d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d54:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005d58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5c:	4b58      	ldr	r3, [pc, #352]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d64:	ee07 3a90 	vmov	s15, r3
 8005d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d70:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d8c:	e043      	b.n	8005e16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d98:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da0:	4b47      	ldr	r3, [pc, #284]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da8:	ee07 3a90 	vmov	s15, r3
 8005dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005db8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dd0:	e021      	b.n	8005e16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	ee07 3a90 	vmov	s15, r3
 8005dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ddc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005ecc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dec:	ee07 3a90 	vmov	s15, r3
 8005df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e14:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005e16:	4b2a      	ldr	r3, [pc, #168]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	0a5b      	lsrs	r3, r3, #9
 8005e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e3c:	ee17 2a90 	vmov	r2, s15
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005e44:	4b1e      	ldr	r3, [pc, #120]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e6a:	ee17 2a90 	vmov	r2, s15
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005e72:	4b13      	ldr	r3, [pc, #76]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	0e1b      	lsrs	r3, r3, #24
 8005e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e98:	ee17 2a90 	vmov	r2, s15
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	609a      	str	r2, [r3, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	3724      	adds	r7, #36	; 0x24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	58024400 	.word	0x58024400
 8005ec4:	03d09000 	.word	0x03d09000
 8005ec8:	46000000 	.word	0x46000000
 8005ecc:	4c742400 	.word	0x4c742400
 8005ed0:	4a742400 	.word	0x4a742400
 8005ed4:	4bbebc20 	.word	0x4bbebc20

08005ed8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ee6:	4b53      	ldr	r3, [pc, #332]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d101      	bne.n	8005ef6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e099      	b.n	800602a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005ef6:	4b4f      	ldr	r3, [pc, #316]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a4e      	ldr	r2, [pc, #312]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005efc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f02:	f7fa fbad 	bl	8000660 <HAL_GetTick>
 8005f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f08:	e008      	b.n	8005f1c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f0a:	f7fa fba9 	bl	8000660 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d901      	bls.n	8005f1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e086      	b.n	800602a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f1c:	4b45      	ldr	r3, [pc, #276]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f0      	bne.n	8005f0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f28:	4b42      	ldr	r3, [pc, #264]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	031b      	lsls	r3, r3, #12
 8005f36:	493f      	ldr	r1, [pc, #252]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	628b      	str	r3, [r1, #40]	; 0x28
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	025b      	lsls	r3, r3, #9
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	041b      	lsls	r3, r3, #16
 8005f5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	061b      	lsls	r3, r3, #24
 8005f68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f6c:	4931      	ldr	r1, [pc, #196]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f72:	4b30      	ldr	r3, [pc, #192]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	492d      	ldr	r1, [pc, #180]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f84:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	f023 0220 	bic.w	r2, r3, #32
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	4928      	ldr	r1, [pc, #160]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f96:	4b27      	ldr	r3, [pc, #156]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	4a26      	ldr	r2, [pc, #152]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005f9c:	f023 0310 	bic.w	r3, r3, #16
 8005fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005fa2:	4b24      	ldr	r3, [pc, #144]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa6:	4b24      	ldr	r3, [pc, #144]	; (8006038 <RCCEx_PLL2_Config+0x160>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	69d2      	ldr	r2, [r2, #28]
 8005fae:	00d2      	lsls	r2, r2, #3
 8005fb0:	4920      	ldr	r1, [pc, #128]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005fb6:	4b1f      	ldr	r3, [pc, #124]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005fbc:	f043 0310 	orr.w	r3, r3, #16
 8005fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005fc8:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	4a19      	ldr	r2, [pc, #100]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005fce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fd4:	e00f      	b.n	8005ff6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d106      	bne.n	8005fea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005fdc:	4b15      	ldr	r3, [pc, #84]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	4a14      	ldr	r2, [pc, #80]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fe8:	e005      	b.n	8005ff6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	4a11      	ldr	r2, [pc, #68]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005ff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ff4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a0e      	ldr	r2, [pc, #56]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 8005ffc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006002:	f7fa fb2d 	bl	8000660 <HAL_GetTick>
 8006006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006008:	e008      	b.n	800601c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800600a:	f7fa fb29 	bl	8000660 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e006      	b.n	800602a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <RCCEx_PLL2_Config+0x15c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f0      	beq.n	800600a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	58024400 	.word	0x58024400
 8006038:	ffff0007 	.word	0xffff0007

0800603c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800604a:	4b53      	ldr	r3, [pc, #332]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	2b03      	cmp	r3, #3
 8006054:	d101      	bne.n	800605a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e099      	b.n	800618e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800605a:	4b4f      	ldr	r3, [pc, #316]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a4e      	ldr	r2, [pc, #312]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006066:	f7fa fafb 	bl	8000660 <HAL_GetTick>
 800606a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800606c:	e008      	b.n	8006080 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800606e:	f7fa faf7 	bl	8000660 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e086      	b.n	800618e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006080:	4b45      	ldr	r3, [pc, #276]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f0      	bne.n	800606e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800608c:	4b42      	ldr	r3, [pc, #264]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	051b      	lsls	r3, r3, #20
 800609a:	493f      	ldr	r1, [pc, #252]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 800609c:	4313      	orrs	r3, r2
 800609e:	628b      	str	r3, [r1, #40]	; 0x28
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	025b      	lsls	r3, r3, #9
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	041b      	lsls	r3, r3, #16
 80060be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	061b      	lsls	r3, r3, #24
 80060cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060d0:	4931      	ldr	r1, [pc, #196]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80060d6:	4b30      	ldr	r3, [pc, #192]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	492d      	ldr	r1, [pc, #180]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060e8:	4b2b      	ldr	r3, [pc, #172]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	4928      	ldr	r1, [pc, #160]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060fa:	4b27      	ldr	r3, [pc, #156]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	4a26      	ldr	r2, [pc, #152]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006104:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006106:	4b24      	ldr	r3, [pc, #144]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800610a:	4b24      	ldr	r3, [pc, #144]	; (800619c <RCCEx_PLL3_Config+0x160>)
 800610c:	4013      	ands	r3, r2
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	69d2      	ldr	r2, [r2, #28]
 8006112:	00d2      	lsls	r2, r2, #3
 8006114:	4920      	ldr	r1, [pc, #128]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006116:	4313      	orrs	r3, r2
 8006118:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800611a:	4b1f      	ldr	r3, [pc, #124]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006124:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800612c:	4b1a      	ldr	r3, [pc, #104]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	4a19      	ldr	r2, [pc, #100]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006132:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006136:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006138:	e00f      	b.n	800615a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d106      	bne.n	800614e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006140:	4b15      	ldr	r3, [pc, #84]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	4a14      	ldr	r2, [pc, #80]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006146:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800614a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800614c:	e005      	b.n	800615a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800614e:	4b12      	ldr	r3, [pc, #72]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	4a11      	ldr	r2, [pc, #68]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006158:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800615a:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a0e      	ldr	r2, [pc, #56]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006166:	f7fa fa7b 	bl	8000660 <HAL_GetTick>
 800616a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800616c:	e008      	b.n	8006180 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800616e:	f7fa fa77 	bl	8000660 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e006      	b.n	800618e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006180:	4b05      	ldr	r3, [pc, #20]	; (8006198 <RCCEx_PLL3_Config+0x15c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0f0      	beq.n	800616e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	58024400 	.word	0x58024400
 800619c:	ffff0007 	.word	0xffff0007

080061a0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d904      	bls.n	80061be <HAL_SAI_InitProtocol+0x1e>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	3b03      	subs	r3, #3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d812      	bhi.n	80061e2 <HAL_SAI_InitProtocol+0x42>
 80061bc:	e008      	b.n	80061d0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fac5 	bl	8006754 <SAI_InitI2S>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]
      break;
 80061ce:	e00b      	b.n	80061e8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fb6e 	bl	80068b8 <SAI_InitPCM>
 80061dc:	4603      	mov	r3, r0
 80061de:	75fb      	strb	r3, [r7, #23]
      break;
 80061e0:	e002      	b.n	80061e8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	75fb      	strb	r3, [r7, #23]
      break;
 80061e6:	bf00      	nop
  }

  if (status == HAL_OK)
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f808 	bl	8006204 <HAL_SAI_Init>
 80061f4:	4603      	mov	r3, r0
 80061f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e1fb      	b.n	800660e <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800621c:	2b01      	cmp	r3, #1
 800621e:	d113      	bne.n	8006248 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a96      	ldr	r2, [pc, #600]	; (8006480 <HAL_SAI_Init+0x27c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_SAI_Init+0x30>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a95      	ldr	r2, [pc, #596]	; (8006484 <HAL_SAI_Init+0x280>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d107      	bne.n	8006244 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006238:	2b01      	cmp	r3, #1
 800623a:	d103      	bne.n	8006244 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e1e2      	b.n	800660e <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a8c      	ldr	r2, [pc, #560]	; (8006480 <HAL_SAI_Init+0x27c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <HAL_SAI_Init+0x58>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a8c      	ldr	r2, [pc, #560]	; (8006488 <HAL_SAI_Init+0x284>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d102      	bne.n	8006262 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800625c:	4b8b      	ldr	r3, [pc, #556]	; (800648c <HAL_SAI_Init+0x288>)
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e00e      	b.n	8006280 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a87      	ldr	r2, [pc, #540]	; (8006484 <HAL_SAI_Init+0x280>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_SAI_Init+0x72>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a87      	ldr	r2, [pc, #540]	; (8006490 <HAL_SAI_Init+0x28c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d102      	bne.n	800627c <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8006276:	4b87      	ldr	r3, [pc, #540]	; (8006494 <HAL_SAI_Init+0x290>)
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	e001      	b.n	8006280 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e1c6      	b.n	800660e <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fee7 	bl	8007068 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fbc6 	bl	8006a2c <SAI_Disable>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e1b1      	b.n	800660e <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d00c      	beq.n	80062d4 <HAL_SAI_Init+0xd0>
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d80d      	bhi.n	80062da <HAL_SAI_Init+0xd6>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_SAI_Init+0xc4>
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d003      	beq.n	80062ce <HAL_SAI_Init+0xca>
 80062c6:	e008      	b.n	80062da <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80062c8:	2300      	movs	r3, #0
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80062cc:	e008      	b.n	80062e0 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80062ce:	2310      	movs	r3, #16
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80062d2:	e005      	b.n	80062e0 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80062d4:	2320      	movs	r3, #32
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80062d8:	e002      	b.n	80062e0 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80062de:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b05      	cmp	r3, #5
 80062e6:	d822      	bhi.n	800632e <HAL_SAI_Init+0x12a>
 80062e8:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <HAL_SAI_Init+0xec>)
 80062ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ee:	bf00      	nop
 80062f0:	08006309 	.word	0x08006309
 80062f4:	0800630f 	.word	0x0800630f
 80062f8:	08006317 	.word	0x08006317
 80062fc:	0800632f 	.word	0x0800632f
 8006300:	0800632f 	.word	0x0800632f
 8006304:	0800631f 	.word	0x0800631f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
      break;
 800630c:	e012      	b.n	8006334 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800630e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006312:	61fb      	str	r3, [r7, #28]
      break;
 8006314:	e00e      	b.n	8006334 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800631a:	61fb      	str	r3, [r7, #28]
      break;
 800631c:	e00a      	b.n	8006334 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800631e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006322:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	f043 0303 	orr.w	r3, r3, #3
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800632c:	e002      	b.n	8006334 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
      break;
 8006332:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006338:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8084 	beq.w	800644c <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a4c      	ldr	r2, [pc, #304]	; (8006480 <HAL_SAI_Init+0x27c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_SAI_Init+0x158>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a4c      	ldr	r2, [pc, #304]	; (8006488 <HAL_SAI_Init+0x284>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d104      	bne.n	8006366 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800635c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006360:	f7fe fd86 	bl	8004e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8006364:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a46      	ldr	r2, [pc, #280]	; (8006484 <HAL_SAI_Init+0x280>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d104      	bne.n	800637a <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006370:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006374:	f7fe fd7c 	bl	8004e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8006378:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a44      	ldr	r2, [pc, #272]	; (8006490 <HAL_SAI_Init+0x28c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d104      	bne.n	800638e <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006384:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006388:	f7fe fd72 	bl	8004e70 <HAL_RCCEx_GetPeriphCLKFreq>
 800638c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006396:	d120      	bne.n	80063da <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639c:	2b04      	cmp	r3, #4
 800639e:	d102      	bne.n	80063a6 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80063a0:	2340      	movs	r3, #64	; 0x40
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	e00a      	b.n	80063bc <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d103      	bne.n	80063b6 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80063ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e002      	b.n	80063bc <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ba:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	4619      	mov	r1, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
 80063d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	e017      	b.n	800640a <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e2:	d101      	bne.n	80063e8 <HAL_SAI_Init+0x1e4>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e000      	b.n	80063ea <HAL_SAI_Init+0x1e6>
 80063e8:	2301      	movs	r3, #1
 80063ea:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	4619      	mov	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	fbb1 f3f3 	udiv	r3, r1, r3
 8006408:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	4a22      	ldr	r2, [pc, #136]	; (8006498 <HAL_SAI_Init+0x294>)
 800640e:	fba2 2303 	umull	r2, r3, r2, r3
 8006412:	08da      	lsrs	r2, r3, #3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006418:	6939      	ldr	r1, [r7, #16]
 800641a:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <HAL_SAI_Init+0x294>)
 800641c:	fba3 2301 	umull	r2, r3, r3, r1
 8006420:	08da      	lsrs	r2, r3, #3
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	1aca      	subs	r2, r1, r3
 800642c:	2a08      	cmp	r2, #8
 800642e:	d904      	bls.n	800643a <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	2b04      	cmp	r3, #4
 8006440:	d104      	bne.n	800644c <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	085a      	lsrs	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_SAI_Init+0x258>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d109      	bne.n	8006470 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_SAI_Init+0x264>
 8006464:	2300      	movs	r3, #0
 8006466:	e001      	b.n	800646c <HAL_SAI_Init+0x268>
 8006468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800646c:	623b      	str	r3, [r7, #32]
 800646e:	e017      	b.n	80064a0 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006474:	2b01      	cmp	r3, #1
 8006476:	d111      	bne.n	800649c <HAL_SAI_Init+0x298>
 8006478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800647c:	e00f      	b.n	800649e <HAL_SAI_Init+0x29a>
 800647e:	bf00      	nop
 8006480:	40015804 	.word	0x40015804
 8006484:	58005404 	.word	0x58005404
 8006488:	40015824 	.word	0x40015824
 800648c:	40015800 	.word	0x40015800
 8006490:	58005424 	.word	0x58005424
 8006494:	58005400 	.word	0x58005400
 8006498:	cccccccd 	.word	0xcccccccd
 800649c:	2300      	movs	r3, #0
 800649e:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6819      	ldr	r1, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b5b      	ldr	r3, [pc, #364]	; (8006618 <HAL_SAI_Init+0x414>)
 80064ac:	400b      	ands	r3, r1
 80064ae:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6819      	ldr	r1, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064be:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064c4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ca:	431a      	orrs	r2, r3
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80064d8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064e4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	051b      	lsls	r3, r3, #20
 80064ec:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064f2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6859      	ldr	r1, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b43      	ldr	r3, [pc, #268]	; (800661c <HAL_SAI_Init+0x418>)
 800650e:	400b      	ands	r3, r1
 8006510:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6859      	ldr	r1, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6899      	ldr	r1, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4b39      	ldr	r3, [pc, #228]	; (8006620 <HAL_SAI_Init+0x41c>)
 800653c:	400b      	ands	r3, r1
 800653e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6899      	ldr	r1, [r3, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006550:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006556:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800655c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006562:	3b01      	subs	r3, #1
 8006564:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006566:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68d9      	ldr	r1, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800657e:	400b      	ands	r3, r1
 8006580:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68d9      	ldr	r1, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006590:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006596:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006598:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	3b01      	subs	r3, #1
 80065a0:	021b      	lsls	r3, r3, #8
 80065a2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a1c      	ldr	r2, [pc, #112]	; (8006624 <HAL_SAI_Init+0x420>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d004      	beq.n	80065c0 <HAL_SAI_Init+0x3bc>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <HAL_SAI_Init+0x424>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d119      	bne.n	80065f4 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c4:	f023 0201 	bic.w	r2, r3, #1
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10e      	bne.n	80065f4 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	3b01      	subs	r3, #1
 80065e0:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80065e2:	431a      	orrs	r2, r3
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ec:	f043 0201 	orr.w	r2, r3, #1
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3728      	adds	r7, #40	; 0x28
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	f005c010 	.word	0xf005c010
 800661c:	ffff1ff0 	.word	0xffff1ff0
 8006620:	fff88000 	.word	0xfff88000
 8006624:	40015804 	.word	0x40015804
 8006628:	58005404 	.word	0x58005404

0800662c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	4613      	mov	r3, r2
 8006638:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_SAI_Receive_DMA+0x1a>
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e079      	b.n	800673e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b01      	cmp	r3, #1
 8006654:	d172      	bne.n	800673c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_SAI_Receive_DMA+0x38>
 8006660:	2302      	movs	r3, #2
 8006662:	e06c      	b.n	800673e <HAL_SAI_Receive_DMA+0x112>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2222      	movs	r2, #34	; 0x22
 800668e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006698:	4a2b      	ldr	r2, [pc, #172]	; (8006748 <HAL_SAI_Receive_DMA+0x11c>)
 800669a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a2:	4a2a      	ldr	r2, [pc, #168]	; (800674c <HAL_SAI_Receive_DMA+0x120>)
 80066a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ac:	4a28      	ldr	r2, [pc, #160]	; (8006750 <HAL_SAI_Receive_DMA+0x124>)
 80066ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b6:	2200      	movs	r2, #0
 80066b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	331c      	adds	r3, #28
 80066c6:	4619      	mov	r1, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066cc:	461a      	mov	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80066d4:	f7fa fd24 	bl	8001120 <HAL_DMA_Start_IT>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e029      	b.n	800673e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80066ea:	2100      	movs	r1, #0
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f965 	bl	80069bc <SAI_InterruptFlag>
 80066f2:	4601      	mov	r1, r0
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006710:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800672e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
  }
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	08006b01 	.word	0x08006b01
 800674c:	08006aa1 	.word	0x08006aa1
 8006750:	08006b1d 	.word	0x08006b1d

08006754 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <SAI_InitI2S+0x2e>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d103      	bne.n	800678a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	651a      	str	r2, [r3, #80]	; 0x50
 8006788:	e002      	b.n	8006790 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006796:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800679e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e077      	b.n	80068aa <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80067cc:	665a      	str	r2, [r3, #100]	; 0x64
 80067ce:	e006      	b.n	80067de <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067d6:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	665a      	str	r2, [r3, #100]	; 0x64
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d84f      	bhi.n	8006884 <SAI_InitI2S+0x130>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <SAI_InitI2S+0x98>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	0800681f 	.word	0x0800681f
 80067f4:	08006841 	.word	0x08006841
 80067f8:	08006863 	.word	0x08006863

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2280      	movs	r2, #128	; 0x80
 8006800:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	011a      	lsls	r2, r3, #4
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2240      	movs	r2, #64	; 0x40
 800681a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800681c:	e035      	b.n	800688a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2280      	movs	r2, #128	; 0x80
 8006822:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	019a      	lsls	r2, r3, #6
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2280      	movs	r2, #128	; 0x80
 800683c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800683e:	e024      	b.n	800688a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	22c0      	movs	r2, #192	; 0xc0
 8006844:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	019a      	lsls	r2, r3, #6
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2280      	movs	r2, #128	; 0x80
 800685e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006860:	e013      	b.n	800688a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	22e0      	movs	r2, #224	; 0xe0
 8006866:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	019a      	lsls	r2, r3, #6
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2280      	movs	r2, #128	; 0x80
 8006880:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006882:	e002      	b.n	800688a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
      break;
 8006888:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b02      	cmp	r3, #2
 800688e:	d10b      	bne.n	80068a8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d102      	bne.n	800689c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2210      	movs	r2, #16
 800689a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d102      	bne.n	80068a8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2208      	movs	r2, #8
 80068a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop

080068b8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <SAI_InitPCM+0x2e>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d103      	bne.n	80068ee <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	651a      	str	r2, [r3, #80]	; 0x50
 80068ec:	e002      	b.n	80068f4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006900:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006908:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800691c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b04      	cmp	r3, #4
 8006922:	d103      	bne.n	800692c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	659a      	str	r2, [r3, #88]	; 0x58
 800692a:	e002      	b.n	8006932 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	220d      	movs	r2, #13
 8006930:	659a      	str	r2, [r3, #88]	; 0x58
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b03      	cmp	r3, #3
 8006936:	d837      	bhi.n	80069a8 <SAI_InitPCM+0xf0>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <SAI_InitPCM+0x88>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006951 	.word	0x08006951
 8006944:	08006967 	.word	0x08006967
 8006948:	0800697d 	.word	0x0800697d
 800694c:	08006993 	.word	0x08006993
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2280      	movs	r2, #128	; 0x80
 8006954:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	011a      	lsls	r2, r3, #4
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2240      	movs	r2, #64	; 0x40
 8006962:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006964:	e023      	b.n	80069ae <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2280      	movs	r2, #128	; 0x80
 800696a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2280      	movs	r2, #128	; 0x80
 8006978:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800697a:	e018      	b.n	80069ae <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	22c0      	movs	r2, #192	; 0xc0
 8006980:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2280      	movs	r2, #128	; 0x80
 800698e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006990:	e00d      	b.n	80069ae <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	22e0      	movs	r2, #224	; 0xe0
 8006996:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2280      	movs	r2, #128	; 0x80
 80069a4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80069a6:	e002      	b.n	80069ae <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
      break;
 80069ac:	bf00      	nop
  }

  return status;
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d103      	bne.n	80069da <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f043 0308 	orr.w	r3, r3, #8
 80069d8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d10b      	bne.n	80069fa <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d003      	beq.n	80069f2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d103      	bne.n	80069fa <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f043 0310 	orr.w	r3, r3, #16
 80069f8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d003      	beq.n	8006a0a <SAI_InterruptFlag+0x4e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d104      	bne.n	8006a14 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	e003      	b.n	8006a1c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f043 0304 	orr.w	r3, r3, #4
 8006a1a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006a34:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <SAI_Disable+0x6c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <SAI_Disable+0x70>)
 8006a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3e:	0b1b      	lsrs	r3, r3, #12
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a56:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	72fb      	strb	r3, [r7, #11]
      break;
 8006a72:	e009      	b.n	8006a88 <SAI_Disable+0x5c>
    }
    count--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e7      	bne.n	8006a58 <SAI_Disable+0x2c>

  return status;
 8006a88:	7afb      	ldrb	r3, [r7, #11]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	24000408 	.word	0x24000408
 8006a9c:	95cbec1b 	.word	0x95cbec1b

08006aa0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab6:	d01c      	beq.n	8006af2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006ac6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff ff72 	bl	80069bc <SAI_InterruptFlag>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	43d9      	mvns	r1, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	400a      	ands	r2, r1
 8006ae8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7f9 fd05 	bl	8000502 <HAL_SAI_RxCpltCallback>
#endif
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7f9 fcec 	bl	80004ec <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fb fc8c 	bl	8002448 <HAL_DMA_GetError>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d01d      	beq.n	8006b72 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006b54:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f7ff ff68 	bl	8006a2c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7f9 fbcf 	bl	8000310 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8006b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006b84:	f7f9 fce6 	bl	8000554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b88:	f000 f83c 	bl	8006c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b8c:	f000 f9e2 	bl	8006f54 <MX_GPIO_Init>
  MX_SAI4_Init();
 8006b90:	f000 f91e 	bl	8006dd0 <MX_SAI4_Init>
  MX_BDMA_Init();
 8006b94:	f000 f98e 	bl	8006eb4 <MX_BDMA_Init>
  MX_CRC_Init();
 8006b98:	f000 f8a2 	bl	8006ce0 <MX_CRC_Init>
  MX_DMA_Init();
 8006b9c:	f000 f9b2 	bl	8006f04 <MX_DMA_Init>
  if (HAL_SAI_Init(&haudio_in_sai[AUDIO_IN_INSTANCE]) != HAL_OK)
 8006ba0:	4816      	ldr	r0, [pc, #88]	; (8006bfc <main+0x80>)
 8006ba2:	f7ff fb2f 	bl	8006204 <HAL_SAI_Init>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <main+0x34>
  {
    Error_Handler();
 8006bac:	f000 fa1a 	bl	8006fe4 <Error_Handler>
  }
  //MX_PDM2PCM_Init();
  //MX_DFSDM1_Init();
  MX_SAI1_Init();
 8006bb0:	f000 f8d8 	bl	8006d64 <MX_SAI1_Init>



  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM

  Audio_In_Ctx[AUDIO_IN_INSTANCE].Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 8006bb4:	4b12      	ldr	r3, [pc, #72]	; (8006c00 <main+0x84>)
 8006bb6:	2230      	movs	r2, #48	; 0x30
 8006bb8:	635a      	str	r2, [r3, #52]	; 0x34
  Audio_In_Ctx[AUDIO_IN_INSTANCE].ChannelsNbr = 0;
 8006bba:	4b11      	ldr	r3, [pc, #68]	; (8006c00 <main+0x84>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40
  Audio_In_Ctx[AUDIO_IN_INSTANCE].SampleRate = SAI_AUDIO_FREQUENCY_48K;
 8006bc0:	4b0f      	ldr	r3, [pc, #60]	; (8006c00 <main+0x84>)
 8006bc2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38
  Audio_In_Ctx[AUDIO_IN_INSTANCE].BitsPerSample = AUDIO_RESOLUTION_8B;
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <main+0x84>)
 8006bca:	2208      	movs	r2, #8
 8006bcc:	63da      	str	r2, [r3, #60]	; 0x3c
  Audio_In_Ctx[AUDIO_IN_INSTANCE].Volume = 80;
 8006bce:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <main+0x84>)
 8006bd0:	2250      	movs	r2, #80	; 0x50
 8006bd2:	651a      	str	r2, [r3, #80]	; 0x50

  // initialize audio instance: (NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U)
  // needs to be HAL_OK = 0
  // 64 bytes / mic_buffer[AUDIO_IN_INSTANCE].16bits/sample / 8
  int32_t status_init = BSP_AUDIO_IN_PDMToPCM_Init(AUDIO_IN_INSTANCE, SAI_AUDIO_FREQUENCY_16K, 1, 1);
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8006bdc:	2001      	movs	r0, #1
 8006bde:	f7f9 fbb7 	bl	8000350 <BSP_AUDIO_IN_PDMToPCM_Init>
 8006be2:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
  int32_t status_record = BSP_AUDIO_IN_RecordPDM(AUDIO_IN_INSTANCE, mic_buffer, 64);
 8006be6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006bea:	2240      	movs	r2, #64	; 0x40
 8006bec:	4619      	mov	r1, r3
 8006bee:	2001      	movs	r0, #1
 8006bf0:	f7f9 fc52 	bl	8000498 <BSP_AUDIO_IN_RecordPDM>
 8006bf4:	f8c7 0480 	str.w	r0, [r7, #1152]	; 0x480
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8006bf8:	e7fe      	b.n	8006bf8 <main+0x7c>
 8006bfa:	bf00      	nop
 8006bfc:	2400052c 	.word	0x2400052c
 8006c00:	240008c4 	.word	0x240008c4

08006c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b09c      	sub	sp, #112	; 0x70
 8006c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c0e:	224c      	movs	r2, #76	; 0x4c
 8006c10:	2100      	movs	r1, #0
 8006c12:	4618      	mov	r0, r3
 8006c14:	f002 fb6a 	bl	80092ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c18:	1d3b      	adds	r3, r7, #4
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f002 fb64 	bl	80092ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8006c24:	2004      	movs	r0, #4
 8006c26:	f7fc fac3 	bl	80031b0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	603b      	str	r3, [r7, #0]
 8006c2e:	4b2b      	ldr	r3, [pc, #172]	; (8006cdc <SystemClock_Config+0xd8>)
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	4a2a      	ldr	r2, [pc, #168]	; (8006cdc <SystemClock_Config+0xd8>)
 8006c34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c38:	6193      	str	r3, [r2, #24]
 8006c3a:	4b28      	ldr	r3, [pc, #160]	; (8006cdc <SystemClock_Config+0xd8>)
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006c46:	bf00      	nop
 8006c48:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <SystemClock_Config+0xd8>)
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c54:	d1f8      	bne.n	8006c48 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c56:	2302      	movs	r3, #2
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c5e:	2340      	movs	r3, #64	; 0x40
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c62:	2302      	movs	r3, #2
 8006c64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c66:	2300      	movs	r3, #0
 8006c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006c6a:	2304      	movs	r3, #4
 8006c6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8006c6e:	2318      	movs	r3, #24
 8006c70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006c72:	2301      	movs	r3, #1
 8006c74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8006c76:	237d      	movs	r3, #125	; 0x7d
 8006c78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006c7e:	230c      	movs	r3, #12
 8006c80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006c82:	2300      	movs	r3, #0
 8006c84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fc fae8 	bl	8003264 <HAL_RCC_OscConfig>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006c9a:	f000 f9a3 	bl	8006fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c9e:	233f      	movs	r3, #63	; 0x3f
 8006ca0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006caa:	2308      	movs	r3, #8
 8006cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006cae:	2340      	movs	r3, #64	; 0x40
 8006cb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006cb2:	2340      	movs	r3, #64	; 0x40
 8006cb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006cbc:	2340      	movs	r3, #64	; 0x40
 8006cbe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	2102      	movs	r1, #2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fc fe79 	bl	80039bc <HAL_RCC_ClockConfig>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006cd0:	f000 f988 	bl	8006fe4 <Error_Handler>
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	3770      	adds	r7, #112	; 0x70
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	58024800 	.word	0x58024800

08006ce0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006ce6:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <MX_CRC_Init+0x78>)
 8006ce8:	4a1c      	ldr	r2, [pc, #112]	; (8006d5c <MX_CRC_Init+0x7c>)
 8006cea:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006cec:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <MX_CRC_Init+0x78>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006cf2:	4b19      	ldr	r3, [pc, #100]	; (8006d58 <MX_CRC_Init+0x78>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006cf8:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <MX_CRC_Init+0x78>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006cfe:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <MX_CRC_Init+0x78>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006d04:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <MX_CRC_Init+0x78>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006d0a:	4813      	ldr	r0, [pc, #76]	; (8006d58 <MX_CRC_Init+0x78>)
 8006d0c:	f7f9 fdc4 	bl	8000898 <HAL_CRC_Init>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8006d16:	f000 f965 	bl	8006fe4 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8006d1a:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <MX_CRC_Init+0x78>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <MX_CRC_Init+0x78>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0201 	orr.w	r2, r2, #1
 8006d28:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <MX_CRC_Init+0x80>)
 8006d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d30:	4a0b      	ldr	r2, [pc, #44]	; (8006d60 <MX_CRC_Init+0x80>)
 8006d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d3a:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <MX_CRC_Init+0x80>)
 8006d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8006d48:	4803      	ldr	r0, [pc, #12]	; (8006d58 <MX_CRC_Init+0x78>)
 8006d4a:	f000 f96b 	bl	8007024 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	24000958 	.word	0x24000958
 8006d5c:	58024c00 	.word	0x58024c00
 8006d60:	58024400 	.word	0x58024400

08006d64 <MX_SAI1_Init>:
//  * @brief SAI1 Initialization Function
//  * @param None
//  * @retval None
//  */
static void MX_SAI1_Init(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006d68:	4b16      	ldr	r3, [pc, #88]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006d6a:	4a17      	ldr	r2, [pc, #92]	; (8006dc8 <MX_SAI1_Init+0x64>)
 8006d6c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8006d6e:	4b15      	ldr	r3, [pc, #84]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8006d74:	4b13      	ldr	r3, [pc, #76]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006d7a:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006d80:	4b10      	ldr	r3, [pc, #64]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006d86:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006d8e:	4a0f      	ldr	r2, [pc, #60]	; (8006dcc <MX_SAI1_Init+0x68>)
 8006d90:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006d92:	4b0c      	ldr	r3, [pc, #48]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8006d98:	4b0a      	ldr	r3, [pc, #40]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006d9e:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006da4:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8006daa:	2302      	movs	r3, #2
 8006dac:	2200      	movs	r2, #0
 8006dae:	2100      	movs	r1, #0
 8006db0:	4804      	ldr	r0, [pc, #16]	; (8006dc4 <MX_SAI1_Init+0x60>)
 8006db2:	f7ff f9f5 	bl	80061a0 <HAL_SAI_InitProtocol>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8006dbc:	f000 f912 	bl	8006fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8006dc0:	bf00      	nop
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	2400097c 	.word	0x2400097c
 8006dc8:	40015824 	.word	0x40015824
 8006dcc:	0002ee00 	.word	0x0002ee00

08006dd0 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */

  /* USER CODE BEGIN SAI4_Init 2 */
  haudio_in_sai[AUDIO_IN_INSTANCE].Instance = AUDIO_IN_SAI_PDMx;
 8006dd4:	4b35      	ldr	r3, [pc, #212]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006dd6:	4a36      	ldr	r2, [pc, #216]	; (8006eb0 <MX_SAI4_Init+0xe0>)
 8006dd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.Protocol = SAI_FREE_PROTOCOL;
 8006ddc:	4b33      	ldr	r3, [pc, #204]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.AudioMode = SAI_MODEMASTER_RX;
 8006de4:	4b31      	ldr	r3, [pc, #196]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006de6:	2201      	movs	r2, #1
 8006de8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.DataSize = SAI_DATASIZE_8;
 8006dec:	4b2f      	ldr	r3, [pc, #188]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006dee:	2240      	movs	r2, #64	; 0x40
 8006df0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006df4:	4b2d      	ldr	r3, [pc, #180]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006dfc:	4b2b      	ldr	r3, [pc, #172]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.Synchro = SAI_ASYNCHRONOUS;
 8006e04:	4b29      	ldr	r3, [pc, #164]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006e0c:	4b27      	ldr	r3, [pc, #156]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006e14:	4b25      	ldr	r3, [pc, #148]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006e1c:	4b23      	ldr	r3, [pc, #140]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006e24:	4b21      	ldr	r3, [pc, #132]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e26:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006e2a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.MonoStereoMode = SAI_STEREOMODE;
 8006e2e:	4b1f      	ldr	r3, [pc, #124]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.CompandingMode = SAI_NOCOMPANDING;
 8006e36:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.Activation = ENABLE;
 8006e3e:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.MicPairsNbr = 0;
 8006e46:	4b19      	ldr	r3, [pc, #100]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8006e4e:	4b17      	ldr	r3, [pc, #92]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e54:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FrameLength = 15;
 8006e58:	4b14      	ldr	r3, [pc, #80]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e5a:	220f      	movs	r2, #15
 8006e5c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.ActiveFrameLength = 8;
 8006e60:	4b12      	ldr	r3, [pc, #72]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e62:	2208      	movs	r2, #8
 8006e64:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8006e68:	4b10      	ldr	r3, [pc, #64]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8006e78:	4b0c      	ldr	r3, [pc, #48]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.FirstBitOffset = 0;
 8006e80:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006e88:	4b08      	ldr	r3, [pc, #32]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotNumber = 0;
 8006e90:	4b06      	ldr	r3, [pc, #24]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotActive = 0x0000FFFF;
 8006e98:	4b04      	ldr	r3, [pc, #16]	; (8006eac <MX_SAI4_Init+0xdc>)
 8006e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e9e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  // 6.144 mhz bit clk frequency
  // 384khz frame sync frequency
  // 0 slots, 16 bits per frame
  /* USER CODE END SAI4_Init 2 */

}
 8006ea2:	bf00      	nop
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	24000494 	.word	0x24000494
 8006eb0:	58005404 	.word	0x58005404

08006eb4 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8006eba:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <MX_BDMA_Init+0x4c>)
 8006ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ec0:	4a0f      	ldr	r2, [pc, #60]	; (8006f00 <MX_BDMA_Init+0x4c>)
 8006ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006eca:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <MX_BDMA_Init+0x4c>)
 8006ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ed4:	607b      	str	r3, [r7, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2100      	movs	r1, #0
 8006edc:	2080      	movs	r0, #128	; 0x80
 8006ede:	f7f9 fca6 	bl	800082e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8006ee2:	2080      	movs	r0, #128	; 0x80
 8006ee4:	f7f9 fcbd 	bl	8000862 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2100      	movs	r1, #0
 8006eec:	2081      	movs	r0, #129	; 0x81
 8006eee:	f7f9 fc9e 	bl	800082e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8006ef2:	2081      	movs	r0, #129	; 0x81
 8006ef4:	f7f9 fcb5 	bl	8000862 <HAL_NVIC_EnableIRQ>

}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	58024400 	.word	0x58024400

08006f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f0a:	4b11      	ldr	r3, [pc, #68]	; (8006f50 <MX_DMA_Init+0x4c>)
 8006f0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f10:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <MX_DMA_Init+0x4c>)
 8006f12:	f043 0301 	orr.w	r3, r3, #1
 8006f16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <MX_DMA_Init+0x4c>)
 8006f1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	607b      	str	r3, [r7, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	200c      	movs	r0, #12
 8006f2e:	f7f9 fc7e 	bl	800082e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006f32:	200c      	movs	r0, #12
 8006f34:	f7f9 fc95 	bl	8000862 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	2066      	movs	r0, #102	; 0x66
 8006f3e:	f7f9 fc76 	bl	800082e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8006f42:	2066      	movs	r0, #102	; 0x66
 8006f44:	f7f9 fc8d 	bl	8000862 <HAL_NVIC_EnableIRQ>

}
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	58024400 	.word	0x58024400

08006f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f5a:	4b21      	ldr	r3, [pc, #132]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f60:	4a1f      	ldr	r2, [pc, #124]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f6a:	4b1d      	ldr	r3, [pc, #116]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f78:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f7e:	4a18      	ldr	r2, [pc, #96]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006f80:	f043 0310 	orr.w	r3, r3, #16
 8006f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f88:	4b15      	ldr	r3, [pc, #84]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f8e:	f003 0310 	and.w	r3, r3, #16
 8006f92:	60bb      	str	r3, [r7, #8]
 8006f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f96:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f9c:	4a10      	ldr	r2, [pc, #64]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006f9e:	f043 0308 	orr.w	r3, r3, #8
 8006fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fa6:	4b0e      	ldr	r3, [pc, #56]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fba:	4a09      	ldr	r2, [pc, #36]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006fbc:	f043 0320 	orr.w	r3, r3, #32
 8006fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fc4:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <MX_GPIO_Init+0x8c>)
 8006fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	683b      	ldr	r3, [r7, #0]

}
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	58024400 	.word	0x58024400

08006fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006fe8:	b672      	cpsid	i
}
 8006fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006fec:	e7fe      	b.n	8006fec <Error_Handler+0x8>
	...

08006ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ff6:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <HAL_MspInit+0x30>)
 8006ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ffc:	4a08      	ldr	r2, [pc, #32]	; (8007020 <HAL_MspInit+0x30>)
 8006ffe:	f043 0302 	orr.w	r3, r3, #2
 8007002:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <HAL_MspInit+0x30>)
 8007008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	607b      	str	r3, [r7, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	58024400 	.word	0x58024400

08007024 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a0b      	ldr	r2, [pc, #44]	; (8007060 <HAL_CRC_MspInit+0x3c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d10e      	bne.n	8007054 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007036:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <HAL_CRC_MspInit+0x40>)
 8007038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800703c:	4a09      	ldr	r2, [pc, #36]	; (8007064 <HAL_CRC_MspInit+0x40>)
 800703e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007046:	4b07      	ldr	r3, [pc, #28]	; (8007064 <HAL_CRC_MspInit+0x40>)
 8007048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800704c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	58024c00 	.word	0x58024c00
 8007064:	58024400 	.word	0x58024400

08007068 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b0ba      	sub	sp, #232	; 0xe8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007070:	f107 0310 	add.w	r3, r7, #16
 8007074:	22b4      	movs	r2, #180	; 0xb4
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f002 f937 	bl	80092ec <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4aa9      	ldr	r2, [pc, #676]	; (8007328 <HAL_SAI_MspInit+0x2c0>)
 8007084:	4293      	cmp	r3, r2
 8007086:	f040 80a5 	bne.w	80071d4 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800708a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800708e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8007090:	2300      	movs	r3, #0
 8007092:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007094:	f107 0310 	add.w	r3, r7, #16
 8007098:	4618      	mov	r0, r3
 800709a:	f7fc ffef 	bl	800407c <HAL_RCCEx_PeriphCLKConfig>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 80070a4:	f7ff ff9e 	bl	8006fe4 <Error_Handler>
    }

      if (SAI1_client == 0)
 80070a8:	4ba0      	ldr	r3, [pc, #640]	; (800732c <HAL_SAI_MspInit+0x2c4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10e      	bne.n	80070ce <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80070b0:	4b9f      	ldr	r3, [pc, #636]	; (8007330 <HAL_SAI_MspInit+0x2c8>)
 80070b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070b6:	4a9e      	ldr	r2, [pc, #632]	; (8007330 <HAL_SAI_MspInit+0x2c8>)
 80070b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80070c0:	4b9b      	ldr	r3, [pc, #620]	; (8007330 <HAL_SAI_MspInit+0x2c8>)
 80070c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80070ce:	4b97      	ldr	r3, [pc, #604]	; (800732c <HAL_SAI_MspInit+0x2c4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	4a95      	ldr	r2, [pc, #596]	; (800732c <HAL_SAI_MspInit+0x2c4>)
 80070d6:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80070d8:	2308      	movs	r3, #8
 80070da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070de:	2302      	movs	r3, #2
 80070e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80070f0:	2306      	movs	r3, #6
 80070f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80070f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80070fa:	4619      	mov	r1, r3
 80070fc:	488d      	ldr	r0, [pc, #564]	; (8007334 <HAL_SAI_MspInit+0x2cc>)
 80070fe:	f7fb feaf 	bl	8002e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8007102:	f44f 7360 	mov.w	r3, #896	; 0x380
 8007106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800710a:	2302      	movs	r3, #2
 800710c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007110:	2300      	movs	r3, #0
 8007112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007116:	2300      	movs	r3, #0
 8007118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800711c:	2306      	movs	r3, #6
 800711e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007122:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007126:	4619      	mov	r1, r3
 8007128:	4883      	ldr	r0, [pc, #524]	; (8007338 <HAL_SAI_MspInit+0x2d0>)
 800712a:	f7fb fe99 	bl	8002e60 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800712e:	4b83      	ldr	r3, [pc, #524]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 8007130:	4a83      	ldr	r2, [pc, #524]	; (8007340 <HAL_SAI_MspInit+0x2d8>)
 8007132:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8007134:	4b81      	ldr	r3, [pc, #516]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 8007136:	2258      	movs	r2, #88	; 0x58
 8007138:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800713a:	4b80      	ldr	r3, [pc, #512]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 800713c:	2240      	movs	r2, #64	; 0x40
 800713e:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8007140:	4b7e      	ldr	r3, [pc, #504]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 8007142:	2200      	movs	r2, #0
 8007144:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8007146:	4b7d      	ldr	r3, [pc, #500]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 8007148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800714c:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800714e:	4b7b      	ldr	r3, [pc, #492]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 8007150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007154:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007156:	4b79      	ldr	r3, [pc, #484]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 8007158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800715c:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800715e:	4b77      	ldr	r3, [pc, #476]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 8007160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007164:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8007166:	4b75      	ldr	r3, [pc, #468]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 8007168:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800716c:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800716e:	4b73      	ldr	r3, [pc, #460]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 8007170:	2200      	movs	r2, #0
 8007172:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8007174:	4871      	ldr	r0, [pc, #452]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 8007176:	f7f9 fc79 	bl	8000a6c <HAL_DMA_Init>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8007180:	f7ff ff30 	bl	8006fe4 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8007184:	2306      	movs	r3, #6
 8007186:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800718a:	2300      	movs	r3, #0
 800718c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8007190:	2300      	movs	r3, #0
 8007192:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800719c:	2301      	movs	r3, #1
 800719e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 80071a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071a6:	4619      	mov	r1, r3
 80071a8:	4864      	ldr	r0, [pc, #400]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 80071aa:	f7fb fd41 	bl	8002c30 <HAL_DMAEx_ConfigMuxSync>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 80071b4:	f7ff ff16 	bl	8006fe4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a60      	ldr	r2, [pc, #384]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 80071bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80071c0:	4a5e      	ldr	r2, [pc, #376]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a5c      	ldr	r2, [pc, #368]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 80071ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80071ce:	4a5b      	ldr	r2, [pc, #364]	; (800733c <HAL_SAI_MspInit+0x2d4>)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a5a      	ldr	r2, [pc, #360]	; (8007344 <HAL_SAI_MspInit+0x2dc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	f040 80a0 	bne.w	8007320 <HAL_SAI_MspInit+0x2b8>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 80071e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80071ec:	f107 0310 	add.w	r3, r7, #16
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fc ff43 	bl	800407c <HAL_RCCEx_PeriphCLKConfig>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 80071fc:	f7ff fef2 	bl	8006fe4 <Error_Handler>
    }

    if (SAI4_client == 0)
 8007200:	4b51      	ldr	r3, [pc, #324]	; (8007348 <HAL_SAI_MspInit+0x2e0>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10e      	bne.n	8007226 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8007208:	4b49      	ldr	r3, [pc, #292]	; (8007330 <HAL_SAI_MspInit+0x2c8>)
 800720a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800720e:	4a48      	ldr	r2, [pc, #288]	; (8007330 <HAL_SAI_MspInit+0x2c8>)
 8007210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007214:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007218:	4b45      	ldr	r3, [pc, #276]	; (8007330 <HAL_SAI_MspInit+0x2c8>)
 800721a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800721e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8007226:	4b48      	ldr	r3, [pc, #288]	; (8007348 <HAL_SAI_MspInit+0x2e0>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3301      	adds	r3, #1
 800722c:	4a46      	ldr	r2, [pc, #280]	; (8007348 <HAL_SAI_MspInit+0x2e0>)
 800722e:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007230:	2330      	movs	r3, #48	; 0x30
 8007232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007236:	2302      	movs	r3, #2
 8007238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800723c:	2300      	movs	r3, #0
 800723e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007242:	2300      	movs	r3, #0
 8007244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8007248:	230a      	movs	r3, #10
 800724a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800724e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007252:	4619      	mov	r1, r3
 8007254:	4837      	ldr	r0, [pc, #220]	; (8007334 <HAL_SAI_MspInit+0x2cc>)
 8007256:	f7fb fe03 	bl	8002e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800725a:	2340      	movs	r3, #64	; 0x40
 800725c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007260:	2302      	movs	r3, #2
 8007262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007266:	2300      	movs	r3, #0
 8007268:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800726c:	2300      	movs	r3, #0
 800726e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8007272:	2301      	movs	r3, #1
 8007274:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007278:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800727c:	4619      	mov	r1, r3
 800727e:	4833      	ldr	r0, [pc, #204]	; (800734c <HAL_SAI_MspInit+0x2e4>)
 8007280:	f7fb fdee 	bl	8002e60 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8007284:	4b32      	ldr	r3, [pc, #200]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 8007286:	4a33      	ldr	r2, [pc, #204]	; (8007354 <HAL_SAI_MspInit+0x2ec>)
 8007288:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800728a:	4b31      	ldr	r3, [pc, #196]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 800728c:	220f      	movs	r2, #15
 800728e:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007290:	4b2f      	ldr	r3, [pc, #188]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 8007292:	2200      	movs	r2, #0
 8007294:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8007296:	4b2e      	ldr	r3, [pc, #184]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 8007298:	2200      	movs	r2, #0
 800729a:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800729c:	4b2c      	ldr	r3, [pc, #176]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 800729e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072a2:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072a4:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072aa:	4b29      	ldr	r3, [pc, #164]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 80072b0:	4b27      	ldr	r3, [pc, #156]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 80072b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072b6:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 80072b8:	4b25      	ldr	r3, [pc, #148]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 80072ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80072be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 80072c0:	4823      	ldr	r0, [pc, #140]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 80072c2:	f7f9 fbd3 	bl	8000a6c <HAL_DMA_Init>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <HAL_SAI_MspInit+0x268>
    {
      Error_Handler();
 80072cc:	f7ff fe8a 	bl	8006fe4 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 80072d0:	230e      	movs	r3, #14
 80072d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80072d6:	2300      	movs	r3, #0
 80072d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 80072e2:	2301      	movs	r3, #1
 80072e4:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 80072e8:	2301      	movs	r3, #1
 80072ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 80072ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80072f2:	4619      	mov	r1, r3
 80072f4:	4816      	ldr	r0, [pc, #88]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 80072f6:	f7fb fc9b 	bl	8002c30 <HAL_DMAEx_ConfigMuxSync>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <HAL_SAI_MspInit+0x29c>
    {
      Error_Handler();
 8007300:	f7ff fe70 	bl	8006fe4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a12      	ldr	r2, [pc, #72]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 8007308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800730c:	4a10      	ldr	r2, [pc, #64]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a0e      	ldr	r2, [pc, #56]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 8007316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800731a:	4a0d      	ldr	r2, [pc, #52]	; (8007350 <HAL_SAI_MspInit+0x2e8>)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8007320:	bf00      	nop
 8007322:	37e8      	adds	r7, #232	; 0xe8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40015824 	.word	0x40015824
 800732c:	24000668 	.word	0x24000668
 8007330:	58024400 	.word	0x58024400
 8007334:	58021000 	.word	0x58021000
 8007338:	58021400 	.word	0x58021400
 800733c:	24000b24 	.word	0x24000b24
 8007340:	40020028 	.word	0x40020028
 8007344:	58005404 	.word	0x58005404
 8007348:	2400066c 	.word	0x2400066c
 800734c:	58020c00 	.word	0x58020c00
 8007350:	24000aac 	.word	0x24000aac
 8007354:	58025408 	.word	0x58025408

08007358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800735c:	e7fe      	b.n	800735c <NMI_Handler+0x4>

0800735e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800735e:	b480      	push	{r7}
 8007360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007362:	e7fe      	b.n	8007362 <HardFault_Handler+0x4>

08007364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007368:	e7fe      	b.n	8007368 <MemManage_Handler+0x4>

0800736a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800736a:	b480      	push	{r7}
 800736c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800736e:	e7fe      	b.n	800736e <BusFault_Handler+0x4>

08007370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007374:	e7fe      	b.n	8007374 <UsageFault_Handler+0x4>

08007376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007376:	b480      	push	{r7}
 8007378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800737a:	bf00      	nop
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007388:	bf00      	nop
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007392:	b480      	push	{r7}
 8007394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007396:	bf00      	nop
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073a4:	f7f9 f948 	bl	8000638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073a8:	bf00      	nop
 80073aa:	bd80      	pop	{r7, pc}

080073ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80073b0:	4802      	ldr	r0, [pc, #8]	; (80073bc <DMA1_Stream1_IRQHandler+0x10>)
 80073b2:	f7fa f91f 	bl	80015f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80073b6:	bf00      	nop
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	24000b24 	.word	0x24000b24

080073c0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 80073c4:	4802      	ldr	r0, [pc, #8]	; (80073d0 <DMAMUX1_OVR_IRQHandler+0x10>)
 80073c6:	f7fb fcf9 	bl	8002dbc <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	24000b24 	.word	0x24000b24

080073d4 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 80073d8:	4802      	ldr	r0, [pc, #8]	; (80073e4 <DMAMUX2_OVR_IRQHandler+0x10>)
 80073da:	f7fb fcef 	bl	8002dbc <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 80073de:	bf00      	nop
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	24000aac 	.word	0x24000aac

080073e8 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 80073ec:	4802      	ldr	r0, [pc, #8]	; (80073f8 <BDMA_Channel0_IRQHandler+0x10>)
 80073ee:	f7fa f901 	bl	80015f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80073f2:	bf00      	nop
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	24000aac 	.word	0x24000aac

080073fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007400:	4b32      	ldr	r3, [pc, #200]	; (80074cc <SystemInit+0xd0>)
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007406:	4a31      	ldr	r2, [pc, #196]	; (80074cc <SystemInit+0xd0>)
 8007408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800740c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007410:	4b2f      	ldr	r3, [pc, #188]	; (80074d0 <SystemInit+0xd4>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	2b06      	cmp	r3, #6
 800741a:	d807      	bhi.n	800742c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800741c:	4b2c      	ldr	r3, [pc, #176]	; (80074d0 <SystemInit+0xd4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f023 030f 	bic.w	r3, r3, #15
 8007424:	4a2a      	ldr	r2, [pc, #168]	; (80074d0 <SystemInit+0xd4>)
 8007426:	f043 0307 	orr.w	r3, r3, #7
 800742a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800742c:	4b29      	ldr	r3, [pc, #164]	; (80074d4 <SystemInit+0xd8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a28      	ldr	r2, [pc, #160]	; (80074d4 <SystemInit+0xd8>)
 8007432:	f043 0301 	orr.w	r3, r3, #1
 8007436:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007438:	4b26      	ldr	r3, [pc, #152]	; (80074d4 <SystemInit+0xd8>)
 800743a:	2200      	movs	r2, #0
 800743c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800743e:	4b25      	ldr	r3, [pc, #148]	; (80074d4 <SystemInit+0xd8>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4924      	ldr	r1, [pc, #144]	; (80074d4 <SystemInit+0xd8>)
 8007444:	4b24      	ldr	r3, [pc, #144]	; (80074d8 <SystemInit+0xdc>)
 8007446:	4013      	ands	r3, r2
 8007448:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800744a:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <SystemInit+0xd4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d007      	beq.n	8007466 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007456:	4b1e      	ldr	r3, [pc, #120]	; (80074d0 <SystemInit+0xd4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f023 030f 	bic.w	r3, r3, #15
 800745e:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <SystemInit+0xd4>)
 8007460:	f043 0307 	orr.w	r3, r3, #7
 8007464:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007466:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <SystemInit+0xd8>)
 8007468:	2200      	movs	r2, #0
 800746a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800746c:	4b19      	ldr	r3, [pc, #100]	; (80074d4 <SystemInit+0xd8>)
 800746e:	2200      	movs	r2, #0
 8007470:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007472:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <SystemInit+0xd8>)
 8007474:	2200      	movs	r2, #0
 8007476:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007478:	4b16      	ldr	r3, [pc, #88]	; (80074d4 <SystemInit+0xd8>)
 800747a:	4a18      	ldr	r2, [pc, #96]	; (80074dc <SystemInit+0xe0>)
 800747c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800747e:	4b15      	ldr	r3, [pc, #84]	; (80074d4 <SystemInit+0xd8>)
 8007480:	4a17      	ldr	r2, [pc, #92]	; (80074e0 <SystemInit+0xe4>)
 8007482:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007484:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <SystemInit+0xd8>)
 8007486:	4a17      	ldr	r2, [pc, #92]	; (80074e4 <SystemInit+0xe8>)
 8007488:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800748a:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <SystemInit+0xd8>)
 800748c:	2200      	movs	r2, #0
 800748e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007490:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <SystemInit+0xd8>)
 8007492:	4a14      	ldr	r2, [pc, #80]	; (80074e4 <SystemInit+0xe8>)
 8007494:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007496:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <SystemInit+0xd8>)
 8007498:	2200      	movs	r2, #0
 800749a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800749c:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <SystemInit+0xd8>)
 800749e:	4a11      	ldr	r2, [pc, #68]	; (80074e4 <SystemInit+0xe8>)
 80074a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80074a2:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <SystemInit+0xd8>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <SystemInit+0xd8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a09      	ldr	r2, [pc, #36]	; (80074d4 <SystemInit+0xd8>)
 80074ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80074b4:	4b07      	ldr	r3, [pc, #28]	; (80074d4 <SystemInit+0xd8>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80074ba:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <SystemInit+0xec>)
 80074bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80074c0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80074c2:	bf00      	nop
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	e000ed00 	.word	0xe000ed00
 80074d0:	52002000 	.word	0x52002000
 80074d4:	58024400 	.word	0x58024400
 80074d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80074dc:	02020200 	.word	0x02020200
 80074e0:	01ff0000 	.word	0x01ff0000
 80074e4:	01010280 	.word	0x01010280
 80074e8:	52004000 	.word	0x52004000

080074ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80074ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80074f0:	f7ff ff84 	bl	80073fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80074f4:	480c      	ldr	r0, [pc, #48]	; (8007528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80074f6:	490d      	ldr	r1, [pc, #52]	; (800752c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80074f8:	4a0d      	ldr	r2, [pc, #52]	; (8007530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80074fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80074fc:	e002      	b.n	8007504 <LoopCopyDataInit>

080074fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80074fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007502:	3304      	adds	r3, #4

08007504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007508:	d3f9      	bcc.n	80074fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800750a:	4a0a      	ldr	r2, [pc, #40]	; (8007534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800750c:	4c0a      	ldr	r4, [pc, #40]	; (8007538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800750e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007510:	e001      	b.n	8007516 <LoopFillZerobss>

08007512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007514:	3204      	adds	r2, #4

08007516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007518:	d3fb      	bcc.n	8007512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800751a:	f001 fec3 	bl	80092a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800751e:	f7ff fb2d 	bl	8006b7c <main>
  bx  lr
 8007522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007524:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8007528:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800752c:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8007530:	08009968 	.word	0x08009968
  ldr r2, =_sbss
 8007534:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8007538:	24000b9c 	.word	0x24000b9c

0800753c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800753c:	e7fe      	b.n	800753c <ADC3_IRQHandler>
	...

08007540 <D16_GENERIC>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	b089      	sub	sp, #36	; 0x24
 8007546:	6993      	ldr	r3, [r2, #24]
 8007548:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800754a:	9103      	str	r1, [sp, #12]
 800754c:	9307      	str	r3, [sp, #28]
 800754e:	69d3      	ldr	r3, [r2, #28]
 8007550:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8007554:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8007558:	9106      	str	r1, [sp, #24]
 800755a:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800755e:	2d00      	cmp	r5, #0
 8007560:	d063      	beq.n	800762a <D16_GENERIC+0xea>
 8007562:	f001 0520 	and.w	r5, r1, #32
 8007566:	f001 0110 	and.w	r1, r1, #16
 800756a:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800764c <D16_GENERIC+0x10c>
 800756e:	46c1      	mov	r9, r8
 8007570:	9104      	str	r1, [sp, #16]
 8007572:	2100      	movs	r1, #0
 8007574:	9505      	str	r5, [sp, #20]
 8007576:	e04d      	b.n	8007614 <D16_GENERIC+0xd4>
 8007578:	5d87      	ldrb	r7, [r0, r6]
 800757a:	7805      	ldrb	r5, [r0, #0]
 800757c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007580:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8007584:	b2fe      	uxtb	r6, r7
 8007586:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800758a:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800758e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8007592:	441d      	add	r5, r3
 8007594:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8007598:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800759c:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80075a0:	0a9b      	lsrs	r3, r3, #10
 80075a2:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80075a6:	4d27      	ldr	r5, [pc, #156]	; (8007644 <D16_GENERIC+0x104>)
 80075a8:	fb26 c505 	smlad	r5, r6, r5, ip
 80075ac:	4f26      	ldr	r7, [pc, #152]	; (8007648 <D16_GENERIC+0x108>)
 80075ae:	fb26 fc07 	smuad	ip, r6, r7
 80075b2:	9e04      	ldr	r6, [sp, #16]
 80075b4:	f101 0801 	add.w	r8, r1, #1
 80075b8:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 80075bc:	b1ae      	cbz	r6, 80075ea <D16_GENERIC+0xaa>
 80075be:	442c      	add	r4, r5
 80075c0:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80075c4:	eba4 040a 	sub.w	r4, r4, sl
 80075c8:	46aa      	mov	sl, r5
 80075ca:	17e7      	asrs	r7, r4, #31
 80075cc:	fba4 450b 	umull	r4, r5, r4, fp
 80075d0:	e9cd 4500 	strd	r4, r5, [sp]
 80075d4:	fb0b 5407 	mla	r4, fp, r7, r5
 80075d8:	9401      	str	r4, [sp, #4]
 80075da:	e9dd 4500 	ldrd	r4, r5, [sp]
 80075de:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80075e2:	f145 0500 	adc.w	r5, r5, #0
 80075e6:	006c      	lsls	r4, r5, #1
 80075e8:	4625      	mov	r5, r4
 80075ea:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 80075ee:	042d      	lsls	r5, r5, #16
 80075f0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80075f4:	2700      	movs	r7, #0
 80075f6:	fb01 fb0b 	mul.w	fp, r1, fp
 80075fa:	fa1f f188 	uxth.w	r1, r8
 80075fe:	fbc9 6705 	smlal	r6, r7, r9, r5
 8007602:	9e03      	ldr	r6, [sp, #12]
 8007604:	10bd      	asrs	r5, r7, #2
 8007606:	f305 050f 	ssat	r5, #16, r5
 800760a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800760e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007610:	428d      	cmp	r5, r1
 8007612:	d90a      	bls.n	800762a <D16_GENERIC+0xea>
 8007614:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007616:	2d01      	cmp	r5, #1
 8007618:	b2ee      	uxtb	r6, r5
 800761a:	d1ad      	bne.n	8007578 <D16_GENERIC+0x38>
 800761c:	9d05      	ldr	r5, [sp, #20]
 800761e:	f850 7b02 	ldr.w	r7, [r0], #2
 8007622:	2d00      	cmp	r5, #0
 8007624:	d0ae      	beq.n	8007584 <D16_GENERIC+0x44>
 8007626:	ba7f      	rev16	r7, r7
 8007628:	e7ac      	b.n	8007584 <D16_GENERIC+0x44>
 800762a:	2000      	movs	r0, #0
 800762c:	9906      	ldr	r1, [sp, #24]
 800762e:	61d3      	str	r3, [r2, #28]
 8007630:	9b07      	ldr	r3, [sp, #28]
 8007632:	f8c2 c008 	str.w	ip, [r2, #8]
 8007636:	60d1      	str	r1, [r2, #12]
 8007638:	6193      	str	r3, [r2, #24]
 800763a:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800763e:	b009      	add	sp, #36	; 0x24
 8007640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007644:	00030001 	.word	0x00030001
 8007648:	00010003 	.word	0x00010003
 800764c:	24000000 	.word	0x24000000

08007650 <D24_GENERIC>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8007658:	b089      	sub	sp, #36	; 0x24
 800765a:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800765c:	9303      	str	r3, [sp, #12]
 800765e:	6993      	ldr	r3, [r2, #24]
 8007660:	9104      	str	r1, [sp, #16]
 8007662:	9307      	str	r3, [sp, #28]
 8007664:	69d1      	ldr	r1, [r2, #28]
 8007666:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800766a:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800766e:	2e00      	cmp	r6, #0
 8007670:	f000 8088 	beq.w	8007784 <D24_GENERIC+0x134>
 8007674:	f005 0620 	and.w	r6, r5, #32
 8007678:	f005 0510 	and.w	r5, r5, #16
 800767c:	f04f 0c00 	mov.w	ip, #0
 8007680:	f8df e140 	ldr.w	lr, [pc, #320]	; 80077c4 <D24_GENERIC+0x174>
 8007684:	9606      	str	r6, [sp, #24]
 8007686:	9505      	str	r5, [sp, #20]
 8007688:	e064      	b.n	8007754 <D24_GENERIC+0x104>
 800768a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800768e:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8007692:	f810 b007 	ldrb.w	fp, [r0, r7]
 8007696:	042d      	lsls	r5, r5, #16
 8007698:	19f0      	adds	r0, r6, r7
 800769a:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800769e:	44a9      	add	r9, r5
 80076a0:	fa5f f689 	uxtb.w	r6, r9
 80076a4:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80076a8:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80076ac:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 80076b0:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80076b4:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80076b8:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 80076bc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80076c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80076c4:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80076c8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80076cc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80076d0:	4d3a      	ldr	r5, [pc, #232]	; (80077bc <D24_GENERIC+0x16c>)
 80076d2:	fb26 8705 	smlad	r7, r6, r5, r8
 80076d6:	4d3a      	ldr	r5, [pc, #232]	; (80077c0 <D24_GENERIC+0x170>)
 80076d8:	fb26 3805 	smlad	r8, r6, r5, r3
 80076dc:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80076e0:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 80076e4:	2301      	movs	r3, #1
 80076e6:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 80076ea:	fb26 f603 	smuad	r6, r6, r3
 80076ee:	eb0c 0903 	add.w	r9, ip, r3
 80076f2:	eb0b 0306 	add.w	r3, fp, r6
 80076f6:	9e05      	ldr	r6, [sp, #20]
 80076f8:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80076fc:	b1ae      	cbz	r6, 800772a <D24_GENERIC+0xda>
 80076fe:	442c      	add	r4, r5
 8007700:	9e03      	ldr	r6, [sp, #12]
 8007702:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8007706:	1ba4      	subs	r4, r4, r6
 8007708:	9503      	str	r5, [sp, #12]
 800770a:	17e7      	asrs	r7, r4, #31
 800770c:	fba4 450b 	umull	r4, r5, r4, fp
 8007710:	e9cd 4500 	strd	r4, r5, [sp]
 8007714:	fb0b 5407 	mla	r4, fp, r7, r5
 8007718:	9401      	str	r4, [sp, #4]
 800771a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800771e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007722:	f145 0500 	adc.w	r5, r5, #0
 8007726:	006c      	lsls	r4, r5, #1
 8007728:	4625      	mov	r5, r4
 800772a:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800772e:	03ad      	lsls	r5, r5, #14
 8007730:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007734:	2700      	movs	r7, #0
 8007736:	fb0c fb0b 	mul.w	fp, ip, fp
 800773a:	fa1f fc89 	uxth.w	ip, r9
 800773e:	fbca 6705 	smlal	r6, r7, sl, r5
 8007742:	9e04      	ldr	r6, [sp, #16]
 8007744:	10bd      	asrs	r5, r7, #2
 8007746:	f305 050f 	ssat	r5, #16, r5
 800774a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800774e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007750:	4565      	cmp	r5, ip
 8007752:	d917      	bls.n	8007784 <D24_GENERIC+0x134>
 8007754:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007756:	f890 9000 	ldrb.w	r9, [r0]
 800775a:	b2ef      	uxtb	r7, r5
 800775c:	2d01      	cmp	r5, #1
 800775e:	b23e      	sxth	r6, r7
 8007760:	d193      	bne.n	800768a <D24_GENERIC+0x3a>
 8007762:	9d06      	ldr	r5, [sp, #24]
 8007764:	b1dd      	cbz	r5, 800779e <D24_GENERIC+0x14e>
 8007766:	78c7      	ldrb	r7, [r0, #3]
 8007768:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800776c:	f01c 0f01 	tst.w	ip, #1
 8007770:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8007774:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8007778:	d11a      	bne.n	80077b0 <D24_GENERIC+0x160>
 800777a:	f890 9001 	ldrb.w	r9, [r0, #1]
 800777e:	3002      	adds	r0, #2
 8007780:	44b1      	add	r9, r6
 8007782:	e78d      	b.n	80076a0 <D24_GENERIC+0x50>
 8007784:	6093      	str	r3, [r2, #8]
 8007786:	2000      	movs	r0, #0
 8007788:	9b03      	ldr	r3, [sp, #12]
 800778a:	f8c2 800c 	str.w	r8, [r2, #12]
 800778e:	6153      	str	r3, [r2, #20]
 8007790:	9b07      	ldr	r3, [sp, #28]
 8007792:	61d1      	str	r1, [r2, #28]
 8007794:	6114      	str	r4, [r2, #16]
 8007796:	6193      	str	r3, [r2, #24]
 8007798:	b009      	add	sp, #36	; 0x24
 800779a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800779e:	7845      	ldrb	r5, [r0, #1]
 80077a0:	3003      	adds	r0, #3
 80077a2:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80077a6:	022d      	lsls	r5, r5, #8
 80077a8:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80077ac:	44a9      	add	r9, r5
 80077ae:	e777      	b.n	80076a0 <D24_GENERIC+0x50>
 80077b0:	7886      	ldrb	r6, [r0, #2]
 80077b2:	3004      	adds	r0, #4
 80077b4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80077b8:	44a9      	add	r9, r5
 80077ba:	e771      	b.n	80076a0 <D24_GENERIC+0x50>
 80077bc:	00030001 	.word	0x00030001
 80077c0:	00060007 	.word	0x00060007
 80077c4:	24000000 	.word	0x24000000

080077c8 <D32_GENERIC>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80077d0:	b089      	sub	sp, #36	; 0x24
 80077d2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80077d4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80077d6:	9302      	str	r3, [sp, #8]
 80077d8:	6993      	ldr	r3, [r2, #24]
 80077da:	9104      	str	r1, [sp, #16]
 80077dc:	9307      	str	r3, [sp, #28]
 80077de:	9503      	str	r5, [sp, #12]
 80077e0:	69d1      	ldr	r1, [r2, #28]
 80077e2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80077e4:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80077e8:	2e00      	cmp	r6, #0
 80077ea:	f000 8097 	beq.w	800791c <D32_GENERIC+0x154>
 80077ee:	f005 0620 	and.w	r6, r5, #32
 80077f2:	f005 0510 	and.w	r5, r5, #16
 80077f6:	f04f 0e00 	mov.w	lr, #0
 80077fa:	f8df c150 	ldr.w	ip, [pc, #336]	; 800794c <D32_GENERIC+0x184>
 80077fe:	9606      	str	r6, [sp, #24]
 8007800:	9505      	str	r5, [sp, #20]
 8007802:	e079      	b.n	80078f8 <D32_GENERIC+0x130>
 8007804:	783d      	ldrb	r5, [r7, #0]
 8007806:	f810 b009 	ldrb.w	fp, [r0, r9]
 800780a:	042d      	lsls	r5, r5, #16
 800780c:	f810 a006 	ldrb.w	sl, [r0, r6]
 8007810:	f890 9000 	ldrb.w	r9, [r0]
 8007814:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8007818:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800781c:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8007820:	44a9      	add	r9, r5
 8007822:	fa5f f789 	uxtb.w	r7, r9
 8007826:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800782a:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800782e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007832:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8007836:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800783a:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800783e:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8007842:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8007846:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800784a:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800784e:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8007852:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007856:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800785a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800785e:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8007862:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8007866:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800786a:	4d34      	ldr	r5, [pc, #208]	; (800793c <D32_GENERIC+0x174>)
 800786c:	fb29 8805 	smlad	r8, r9, r5, r8
 8007870:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8007874:	fb26 8705 	smlad	r7, r6, r5, r8
 8007878:	4d31      	ldr	r5, [pc, #196]	; (8007940 <D32_GENERIC+0x178>)
 800787a:	fb29 3305 	smlad	r3, r9, r5, r3
 800787e:	4d31      	ldr	r5, [pc, #196]	; (8007944 <D32_GENERIC+0x17c>)
 8007880:	fb26 3805 	smlad	r8, r6, r5, r3
 8007884:	2301      	movs	r3, #1
 8007886:	fb29 f903 	smuad	r9, r9, r3
 800788a:	4b2f      	ldr	r3, [pc, #188]	; (8007948 <D32_GENERIC+0x180>)
 800788c:	fb26 9303 	smlad	r3, r6, r3, r9
 8007890:	9e05      	ldr	r6, [sp, #20]
 8007892:	f10e 0901 	add.w	r9, lr, #1
 8007896:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800789a:	b1ae      	cbz	r6, 80078c8 <D32_GENERIC+0x100>
 800789c:	442c      	add	r4, r5
 800789e:	9e02      	ldr	r6, [sp, #8]
 80078a0:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80078a4:	1ba4      	subs	r4, r4, r6
 80078a6:	9502      	str	r5, [sp, #8]
 80078a8:	17e7      	asrs	r7, r4, #31
 80078aa:	fba4 450a 	umull	r4, r5, r4, sl
 80078ae:	e9cd 4500 	strd	r4, r5, [sp]
 80078b2:	fb0a 5407 	mla	r4, sl, r7, r5
 80078b6:	9401      	str	r4, [sp, #4]
 80078b8:	e9dd 4500 	ldrd	r4, r5, [sp]
 80078bc:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80078c0:	f145 0500 	adc.w	r5, r5, #0
 80078c4:	006c      	lsls	r4, r5, #1
 80078c6:	4625      	mov	r5, r4
 80078c8:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 80078cc:	036d      	lsls	r5, r5, #13
 80078ce:	9f03      	ldr	r7, [sp, #12]
 80078d0:	fb0e fb0a 	mul.w	fp, lr, sl
 80078d4:	fa1f fe89 	uxth.w	lr, r9
 80078d8:	f04f 0a00 	mov.w	sl, #0
 80078dc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80078e0:	9e04      	ldr	r6, [sp, #16]
 80078e2:	fbc7 9a05 	smlal	r9, sl, r7, r5
 80078e6:	4657      	mov	r7, sl
 80078e8:	10bd      	asrs	r5, r7, #2
 80078ea:	f305 050f 	ssat	r5, #16, r5
 80078ee:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80078f2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80078f4:	4575      	cmp	r5, lr
 80078f6:	d911      	bls.n	800791c <D32_GENERIC+0x154>
 80078f8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80078fa:	b2ee      	uxtb	r6, r5
 80078fc:	2d01      	cmp	r5, #1
 80078fe:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8007902:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 8007906:	f47f af7d 	bne.w	8007804 <D32_GENERIC+0x3c>
 800790a:	1d05      	adds	r5, r0, #4
 800790c:	f8d0 9000 	ldr.w	r9, [r0]
 8007910:	9806      	ldr	r0, [sp, #24]
 8007912:	b180      	cbz	r0, 8007936 <D32_GENERIC+0x16e>
 8007914:	fa99 f999 	rev16.w	r9, r9
 8007918:	4628      	mov	r0, r5
 800791a:	e782      	b.n	8007822 <D32_GENERIC+0x5a>
 800791c:	6093      	str	r3, [r2, #8]
 800791e:	2000      	movs	r0, #0
 8007920:	9b02      	ldr	r3, [sp, #8]
 8007922:	f8c2 800c 	str.w	r8, [r2, #12]
 8007926:	6153      	str	r3, [r2, #20]
 8007928:	9b07      	ldr	r3, [sp, #28]
 800792a:	61d1      	str	r1, [r2, #28]
 800792c:	6114      	str	r4, [r2, #16]
 800792e:	6193      	str	r3, [r2, #24]
 8007930:	b009      	add	sp, #36	; 0x24
 8007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007936:	4628      	mov	r0, r5
 8007938:	e773      	b.n	8007822 <D32_GENERIC+0x5a>
 800793a:	bf00      	nop
 800793c:	00060003 	.word	0x00060003
 8007940:	000a000c 	.word	0x000a000c
 8007944:	000c000a 	.word	0x000c000a
 8007948:	00030006 	.word	0x00030006
 800794c:	24000000 	.word	0x24000000

08007950 <D48_GENERIC>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	6913      	ldr	r3, [r2, #16]
 8007956:	b089      	sub	sp, #36	; 0x24
 8007958:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	6953      	ldr	r3, [r2, #20]
 800795e:	9104      	str	r1, [sp, #16]
 8007960:	9302      	str	r3, [sp, #8]
 8007962:	6993      	ldr	r3, [r2, #24]
 8007964:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8007968:	9307      	str	r3, [sp, #28]
 800796a:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800796e:	9100      	str	r1, [sp, #0]
 8007970:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007972:	9103      	str	r1, [sp, #12]
 8007974:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007976:	2c00      	cmp	r4, #0
 8007978:	f000 80be 	beq.w	8007af8 <D48_GENERIC+0x1a8>
 800797c:	f001 0420 	and.w	r4, r1, #32
 8007980:	f001 0110 	and.w	r1, r1, #16
 8007984:	f04f 0e00 	mov.w	lr, #0
 8007988:	9105      	str	r1, [sp, #20]
 800798a:	9406      	str	r4, [sp, #24]
 800798c:	4962      	ldr	r1, [pc, #392]	; (8007b18 <D48_GENERIC+0x1c8>)
 800798e:	e0a0      	b.n	8007ad2 <D48_GENERIC+0x182>
 8007990:	eb00 0608 	add.w	r6, r0, r8
 8007994:	f810 a008 	ldrb.w	sl, [r0, r8]
 8007998:	f810 9005 	ldrb.w	r9, [r0, r5]
 800799c:	5df4      	ldrb	r4, [r6, r7]
 800799e:	443e      	add	r6, r7
 80079a0:	f890 b000 	ldrb.w	fp, [r0]
 80079a4:	0420      	lsls	r0, r4, #16
 80079a6:	eb06 0408 	add.w	r4, r6, r8
 80079aa:	f816 6008 	ldrb.w	r6, [r6, r8]
 80079ae:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 80079b2:	f814 8007 	ldrb.w	r8, [r4, r7]
 80079b6:	4427      	add	r7, r4
 80079b8:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 80079bc:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 80079c0:	eb0a 040b 	add.w	r4, sl, fp
 80079c4:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 80079c8:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80079cc:	b2f7      	uxtb	r7, r6
 80079ce:	b2e6      	uxtb	r6, r4
 80079d0:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80079d4:	f3c4 4907 	ubfx	r9, r4, #16, #8
 80079d8:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 80079dc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80079e0:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 80079e4:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 80079e8:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 80079ec:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 80079f0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80079f4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80079f8:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 80079fc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007a00:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8007a04:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007a08:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8007a0c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007a10:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007a14:	9d00      	ldr	r5, [sp, #0]
 8007a16:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007a1a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007a1e:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8007a22:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007a26:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8007a2a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8007a2e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007a32:	4c3a      	ldr	r4, [pc, #232]	; (8007b1c <D48_GENERIC+0x1cc>)
 8007a34:	fb26 5a04 	smlad	sl, r6, r4, r5
 8007a38:	4c39      	ldr	r4, [pc, #228]	; (8007b20 <D48_GENERIC+0x1d0>)
 8007a3a:	fb29 aa04 	smlad	sl, r9, r4, sl
 8007a3e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8007a42:	fb27 aa04 	smlad	sl, r7, r4, sl
 8007a46:	4c37      	ldr	r4, [pc, #220]	; (8007b24 <D48_GENERIC+0x1d4>)
 8007a48:	fb26 3304 	smlad	r3, r6, r4, r3
 8007a4c:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8007a50:	fb29 3304 	smlad	r3, r9, r4, r3
 8007a54:	4c34      	ldr	r4, [pc, #208]	; (8007b28 <D48_GENERIC+0x1d8>)
 8007a56:	fb27 3304 	smlad	r3, r7, r4, r3
 8007a5a:	2501      	movs	r5, #1
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	fb26 f605 	smuad	r6, r6, r5
 8007a62:	4b32      	ldr	r3, [pc, #200]	; (8007b2c <D48_GENERIC+0x1dc>)
 8007a64:	fb29 6903 	smlad	r9, r9, r3, r6
 8007a68:	4b31      	ldr	r3, [pc, #196]	; (8007b30 <D48_GENERIC+0x1e0>)
 8007a6a:	fb27 9303 	smlad	r3, r7, r3, r9
 8007a6e:	9c05      	ldr	r4, [sp, #20]
 8007a70:	eb0e 0805 	add.w	r8, lr, r5
 8007a74:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8007a78:	b19c      	cbz	r4, 8007aa2 <D48_GENERIC+0x152>
 8007a7a:	9c01      	ldr	r4, [sp, #4]
 8007a7c:	9d02      	ldr	r5, [sp, #8]
 8007a7e:	4454      	add	r4, sl
 8007a80:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8007a84:	f8cd a008 	str.w	sl, [sp, #8]
 8007a88:	1b64      	subs	r4, r4, r5
 8007a8a:	fba4 ab09 	umull	sl, fp, r4, r9
 8007a8e:	17e7      	asrs	r7, r4, #31
 8007a90:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8007a94:	fb09 bb07 	mla	fp, r9, r7, fp
 8007a98:	f14b 0500 	adc.w	r5, fp, #0
 8007a9c:	006c      	lsls	r4, r5, #1
 8007a9e:	46a2      	mov	sl, r4
 8007aa0:	9401      	str	r4, [sp, #4]
 8007aa2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8007aa4:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8007aa8:	9d03      	ldr	r5, [sp, #12]
 8007aaa:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007aae:	fb0e f606 	mul.w	r6, lr, r6
 8007ab2:	fa1f fe88 	uxth.w	lr, r8
 8007ab6:	f04f 0800 	mov.w	r8, #0
 8007aba:	fbc5 780a 	smlal	r7, r8, r5, sl
 8007abe:	4645      	mov	r5, r8
 8007ac0:	10ac      	asrs	r4, r5, #2
 8007ac2:	9d04      	ldr	r5, [sp, #16]
 8007ac4:	f304 040f 	ssat	r4, #16, r4
 8007ac8:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8007acc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007ace:	4574      	cmp	r4, lr
 8007ad0:	d912      	bls.n	8007af8 <D48_GENERIC+0x1a8>
 8007ad2:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8007ad4:	b2e5      	uxtb	r5, r4
 8007ad6:	2c01      	cmp	r4, #1
 8007ad8:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8007adc:	f1c5 0700 	rsb	r7, r5, #0
 8007ae0:	f47f af56 	bne.w	8007990 <D48_GENERIC+0x40>
 8007ae4:	9d06      	ldr	r5, [sp, #24]
 8007ae6:	e9d0 4600 	ldrd	r4, r6, [r0]
 8007aea:	3006      	adds	r0, #6
 8007aec:	2d00      	cmp	r5, #0
 8007aee:	f43f af6b 	beq.w	80079c8 <D48_GENERIC+0x78>
 8007af2:	ba64      	rev16	r4, r4
 8007af4:	ba76      	rev16	r6, r6
 8007af6:	e767      	b.n	80079c8 <D48_GENERIC+0x78>
 8007af8:	6093      	str	r3, [r2, #8]
 8007afa:	2000      	movs	r0, #0
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	f8c2 c01c 	str.w	ip, [r2, #28]
 8007b02:	60d3      	str	r3, [r2, #12]
 8007b04:	9b01      	ldr	r3, [sp, #4]
 8007b06:	6113      	str	r3, [r2, #16]
 8007b08:	9b02      	ldr	r3, [sp, #8]
 8007b0a:	6153      	str	r3, [r2, #20]
 8007b0c:	9b07      	ldr	r3, [sp, #28]
 8007b0e:	6193      	str	r3, [r2, #24]
 8007b10:	b009      	add	sp, #36	; 0x24
 8007b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b16:	bf00      	nop
 8007b18:	24000000 	.word	0x24000000
 8007b1c:	000f000a 	.word	0x000f000a
 8007b20:	00060003 	.word	0x00060003
 8007b24:	00150019 	.word	0x00150019
 8007b28:	00190015 	.word	0x00190015
 8007b2c:	00030006 	.word	0x00030006
 8007b30:	000a000f 	.word	0x000a000f

08007b34 <D64_GENERIC>:
 8007b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	6913      	ldr	r3, [r2, #16]
 8007b3a:	b089      	sub	sp, #36	; 0x24
 8007b3c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	6953      	ldr	r3, [r2, #20]
 8007b42:	9105      	str	r1, [sp, #20]
 8007b44:	9303      	str	r3, [sp, #12]
 8007b46:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8007b48:	6993      	ldr	r3, [r2, #24]
 8007b4a:	69d4      	ldr	r4, [r2, #28]
 8007b4c:	9307      	str	r3, [sp, #28]
 8007b4e:	9504      	str	r5, [sp, #16]
 8007b50:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8007b54:	2900      	cmp	r1, #0
 8007b56:	f000 80e8 	beq.w	8007d2a <D64_GENERIC+0x1f6>
 8007b5a:	6a11      	ldr	r1, [r2, #32]
 8007b5c:	2500      	movs	r5, #0
 8007b5e:	46b3      	mov	fp, r6
 8007b60:	9302      	str	r3, [sp, #8]
 8007b62:	9106      	str	r1, [sp, #24]
 8007b64:	4978      	ldr	r1, [pc, #480]	; (8007d48 <D64_GENERIC+0x214>)
 8007b66:	e0cc      	b.n	8007d02 <D64_GENERIC+0x1ce>
 8007b68:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8007b6c:	f1ce 0c00 	rsb	ip, lr, #0
 8007b70:	f890 9000 	ldrb.w	r9, [r0]
 8007b74:	eb00 0708 	add.w	r7, r0, r8
 8007b78:	f810 6008 	ldrb.w	r6, [r0, r8]
 8007b7c:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8007b80:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007b84:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8007b88:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8007b8c:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8007b90:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8007b94:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007b98:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8007b9c:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8007ba0:	0400      	lsls	r0, r0, #16
 8007ba2:	4467      	add	r7, ip
 8007ba4:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8007ba8:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8007bac:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8007bb0:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8007bb4:	444e      	add	r6, r9
 8007bb6:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8007bba:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8007bbe:	44c2      	add	sl, r8
 8007bc0:	b2f7      	uxtb	r7, r6
 8007bc2:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8007bc6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8007bca:	0e36      	lsrs	r6, r6, #24
 8007bcc:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007bd0:	fa5f fc8a 	uxtb.w	ip, sl
 8007bd4:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8007bd8:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8007bdc:	443c      	add	r4, r7
 8007bde:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8007be2:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007be6:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8007bea:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8007bee:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007bf2:	4b56      	ldr	r3, [pc, #344]	; (8007d4c <D64_GENERIC+0x218>)
 8007bf4:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8007bf8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007bfc:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8007c00:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8007c04:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007c08:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8007c0c:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8007c10:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8007c14:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007c18:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007c1c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007c20:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8007c24:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007c28:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8007c2c:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8007c30:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8007c34:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007c38:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8007c3c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007c40:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8007c44:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8007c48:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8007c4c:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8007c50:	fb28 b903 	smlad	r9, r8, r3, fp
 8007c54:	4b3e      	ldr	r3, [pc, #248]	; (8007d50 <D64_GENERIC+0x21c>)
 8007c56:	fb26 9903 	smlad	r9, r6, r3, r9
 8007c5a:	4b3e      	ldr	r3, [pc, #248]	; (8007d54 <D64_GENERIC+0x220>)
 8007c5c:	fb2c 9703 	smlad	r7, ip, r3, r9
 8007c60:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8007c64:	fb2a 7909 	smlad	r9, sl, r9, r7
 8007c68:	4f3b      	ldr	r7, [pc, #236]	; (8007d58 <D64_GENERIC+0x224>)
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	fb28 3307 	smlad	r3, r8, r7, r3
 8007c70:	fb2a 3317 	smladx	r3, sl, r7, r3
 8007c74:	4f39      	ldr	r7, [pc, #228]	; (8007d5c <D64_GENERIC+0x228>)
 8007c76:	fb26 3307 	smlad	r3, r6, r7, r3
 8007c7a:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8007c7e:	f04f 0e01 	mov.w	lr, #1
 8007c82:	fb28 f80e 	smuad	r8, r8, lr
 8007c86:	4b36      	ldr	r3, [pc, #216]	; (8007d60 <D64_GENERIC+0x22c>)
 8007c88:	fb26 8603 	smlad	r6, r6, r3, r8
 8007c8c:	4b35      	ldr	r3, [pc, #212]	; (8007d64 <D64_GENERIC+0x230>)
 8007c8e:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8007c92:	4b35      	ldr	r3, [pc, #212]	; (8007d68 <D64_GENERIC+0x234>)
 8007c94:	fb2a c303 	smlad	r3, sl, r3, ip
 8007c98:	9f06      	ldr	r7, [sp, #24]
 8007c9a:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8007c9e:	9302      	str	r3, [sp, #8]
 8007ca0:	b1cf      	cbz	r7, 8007cd6 <D64_GENERIC+0x1a2>
 8007ca2:	9b00      	ldr	r3, [sp, #0]
 8007ca4:	444b      	add	r3, r9
 8007ca6:	461e      	mov	r6, r3
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cae:	1af6      	subs	r6, r6, r3
 8007cb0:	46b0      	mov	r8, r6
 8007cb2:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8007cb6:	e9cd 8900 	strd	r8, r9, [sp]
 8007cba:	fba6 8907 	umull	r8, r9, r6, r7
 8007cbe:	9e01      	ldr	r6, [sp, #4]
 8007cc0:	fb07 9306 	mla	r3, r7, r6, r9
 8007cc4:	4646      	mov	r6, r8
 8007cc6:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8007cca:	f143 0700 	adc.w	r7, r3, #0
 8007cce:	fa07 f30e 	lsl.w	r3, r7, lr
 8007cd2:	4699      	mov	r9, r3
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8007cda:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007ce4:	2700      	movs	r7, #0
 8007ce6:	fb05 fc0c 	mul.w	ip, r5, ip
 8007cea:	3501      	adds	r5, #1
 8007cec:	fbc3 6709 	smlal	r6, r7, r3, r9
 8007cf0:	9b05      	ldr	r3, [sp, #20]
 8007cf2:	10be      	asrs	r6, r7, #2
 8007cf4:	f306 060f 	ssat	r6, #16, r6
 8007cf8:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8007cfc:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007cfe:	42ae      	cmp	r6, r5
 8007d00:	dd11      	ble.n	8007d26 <D64_GENERIC+0x1f2>
 8007d02:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 8007d06:	f1be 0f01 	cmp.w	lr, #1
 8007d0a:	f47f af2d 	bne.w	8007b68 <D64_GENERIC+0x34>
 8007d0e:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8007d10:	f100 0c08 	add.w	ip, r0, #8
 8007d14:	06bb      	lsls	r3, r7, #26
 8007d16:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8007d1a:	d513      	bpl.n	8007d44 <D64_GENERIC+0x210>
 8007d1c:	ba76      	rev16	r6, r6
 8007d1e:	fa9a fa9a 	rev16.w	sl, sl
 8007d22:	4660      	mov	r0, ip
 8007d24:	e74c      	b.n	8007bc0 <D64_GENERIC+0x8c>
 8007d26:	465e      	mov	r6, fp
 8007d28:	9b02      	ldr	r3, [sp, #8]
 8007d2a:	6093      	str	r3, [r2, #8]
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	9b00      	ldr	r3, [sp, #0]
 8007d30:	60d6      	str	r6, [r2, #12]
 8007d32:	6113      	str	r3, [r2, #16]
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	61d4      	str	r4, [r2, #28]
 8007d38:	6153      	str	r3, [r2, #20]
 8007d3a:	9b07      	ldr	r3, [sp, #28]
 8007d3c:	6193      	str	r3, [r2, #24]
 8007d3e:	b009      	add	sp, #36	; 0x24
 8007d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d44:	4660      	mov	r0, ip
 8007d46:	e73b      	b.n	8007bc0 <D64_GENERIC+0x8c>
 8007d48:	24000000 	.word	0x24000000
 8007d4c:	001c0015 	.word	0x001c0015
 8007d50:	000f000a 	.word	0x000f000a
 8007d54:	00060003 	.word	0x00060003
 8007d58:	0024002a 	.word	0x0024002a
 8007d5c:	002e0030 	.word	0x002e0030
 8007d60:	00030006 	.word	0x00030006
 8007d64:	000a000f 	.word	0x000a000f
 8007d68:	0015001c 	.word	0x0015001c

08007d6c <D80_GENERIC>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	b08b      	sub	sp, #44	; 0x2c
 8007d72:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8007d74:	9107      	str	r1, [sp, #28]
 8007d76:	6911      	ldr	r1, [r2, #16]
 8007d78:	9104      	str	r1, [sp, #16]
 8007d7a:	6951      	ldr	r1, [r2, #20]
 8007d7c:	9105      	str	r1, [sp, #20]
 8007d7e:	6991      	ldr	r1, [r2, #24]
 8007d80:	9109      	str	r1, [sp, #36]	; 0x24
 8007d82:	69d1      	ldr	r1, [r2, #28]
 8007d84:	9102      	str	r1, [sp, #8]
 8007d86:	6891      	ldr	r1, [r2, #8]
 8007d88:	9103      	str	r1, [sp, #12]
 8007d8a:	68d1      	ldr	r1, [r2, #12]
 8007d8c:	9101      	str	r1, [sp, #4]
 8007d8e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007d90:	9106      	str	r1, [sp, #24]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 810b 	beq.w	8007fae <D80_GENERIC+0x242>
 8007d98:	6a13      	ldr	r3, [r2, #32]
 8007d9a:	f04f 0800 	mov.w	r8, #0
 8007d9e:	f8df c260 	ldr.w	ip, [pc, #608]	; 8008000 <D80_GENERIC+0x294>
 8007da2:	9308      	str	r3, [sp, #32]
 8007da4:	9200      	str	r2, [sp, #0]
 8007da6:	e0ee      	b.n	8007f86 <D80_GENERIC+0x21a>
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	f890 e000 	ldrb.w	lr, [r0]
 8007dae:	b219      	sxth	r1, r3
 8007db0:	425c      	negs	r4, r3
 8007db2:	f810 9003 	ldrb.w	r9, [r0, r3]
 8007db6:	004e      	lsls	r6, r1, #1
 8007db8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8007dbc:	4431      	add	r1, r6
 8007dbe:	1843      	adds	r3, r0, r1
 8007dc0:	f810 b001 	ldrb.w	fp, [r0, r1]
 8007dc4:	1919      	adds	r1, r3, r4
 8007dc6:	5d1b      	ldrb	r3, [r3, r4]
 8007dc8:	1948      	adds	r0, r1, r5
 8007dca:	f811 a005 	ldrb.w	sl, [r1, r5]
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	1907      	adds	r7, r0, r4
 8007dd2:	5d01      	ldrb	r1, [r0, r4]
 8007dd4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007dd8:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8007ddc:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8007de0:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8007de4:	0409      	lsls	r1, r1, #16
 8007de6:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8007dea:	eb0b 0905 	add.w	r9, fp, r5
 8007dee:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8007df2:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8007df6:	eb09 0b04 	add.w	fp, r9, r4
 8007dfa:	f819 4004 	ldrb.w	r4, [r9, r4]
 8007dfe:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007e02:	4473      	add	r3, lr
 8007e04:	eb0b 0006 	add.w	r0, fp, r6
 8007e08:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8007e0c:	4439      	add	r1, r7
 8007e0e:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8007e12:	b2df      	uxtb	r7, r3
 8007e14:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8007e18:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8007e1c:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8007e20:	fa5f fa81 	uxtb.w	sl, r1
 8007e24:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8007e28:	9c02      	ldr	r4, [sp, #8]
 8007e2a:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8007e2e:	441c      	add	r4, r3
 8007e30:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8007e34:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8007e38:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8007e3c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007e40:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8007e44:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8007e48:	b2ed      	uxtb	r5, r5
 8007e4a:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8007e4e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007e52:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8007e56:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8007e5a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8007e5e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8007e62:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8007e66:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007e6a:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8007e6e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8007e72:	0e09      	lsrs	r1, r1, #24
 8007e74:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8007e78:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007e7c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007e80:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007e84:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007e88:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007e8c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007e90:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007e94:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007e98:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8007e9c:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8007ea0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007ea4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8007ea8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007eac:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007eb0:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8007eb4:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8007eb8:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8007ebc:	9202      	str	r2, [sp, #8]
 8007ebe:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8007ec2:	4a43      	ldr	r2, [pc, #268]	; (8007fd0 <D80_GENERIC+0x264>)
 8007ec4:	9f01      	ldr	r7, [sp, #4]
 8007ec6:	fb23 7a02 	smlad	sl, r3, r2, r7
 8007eca:	4a42      	ldr	r2, [pc, #264]	; (8007fd4 <D80_GENERIC+0x268>)
 8007ecc:	fb26 aa02 	smlad	sl, r6, r2, sl
 8007ed0:	4a41      	ldr	r2, [pc, #260]	; (8007fd8 <D80_GENERIC+0x26c>)
 8007ed2:	fb24 aa02 	smlad	sl, r4, r2, sl
 8007ed6:	4a41      	ldr	r2, [pc, #260]	; (8007fdc <D80_GENERIC+0x270>)
 8007ed8:	fb21 a702 	smlad	r7, r1, r2, sl
 8007edc:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8007ee0:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8007ee4:	4a3e      	ldr	r2, [pc, #248]	; (8007fe0 <D80_GENERIC+0x274>)
 8007ee6:	9f03      	ldr	r7, [sp, #12]
 8007ee8:	fb23 7e02 	smlad	lr, r3, r2, r7
 8007eec:	4a3d      	ldr	r2, [pc, #244]	; (8007fe4 <D80_GENERIC+0x278>)
 8007eee:	fb26 ee02 	smlad	lr, r6, r2, lr
 8007ef2:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8007ef6:	fb24 e707 	smlad	r7, r4, r7, lr
 8007efa:	4a3b      	ldr	r2, [pc, #236]	; (8007fe8 <D80_GENERIC+0x27c>)
 8007efc:	fb21 7702 	smlad	r7, r1, r2, r7
 8007f00:	4a3a      	ldr	r2, [pc, #232]	; (8007fec <D80_GENERIC+0x280>)
 8007f02:	fb25 7202 	smlad	r2, r5, r2, r7
 8007f06:	f04f 0901 	mov.w	r9, #1
 8007f0a:	9201      	str	r2, [sp, #4]
 8007f0c:	fb23 f909 	smuad	r9, r3, r9
 8007f10:	4b37      	ldr	r3, [pc, #220]	; (8007ff0 <D80_GENERIC+0x284>)
 8007f12:	fb26 9603 	smlad	r6, r6, r3, r9
 8007f16:	4f37      	ldr	r7, [pc, #220]	; (8007ff4 <D80_GENERIC+0x288>)
 8007f18:	fb24 6407 	smlad	r4, r4, r7, r6
 8007f1c:	4f36      	ldr	r7, [pc, #216]	; (8007ff8 <D80_GENERIC+0x28c>)
 8007f1e:	fb21 4707 	smlad	r7, r1, r7, r4
 8007f22:	4936      	ldr	r1, [pc, #216]	; (8007ffc <D80_GENERIC+0x290>)
 8007f24:	fb25 7301 	smlad	r3, r5, r1, r7
 8007f28:	9303      	str	r3, [sp, #12]
 8007f2a:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8007f2e:	9b08      	ldr	r3, [sp, #32]
 8007f30:	b193      	cbz	r3, 8007f58 <D80_GENERIC+0x1ec>
 8007f32:	9a04      	ldr	r2, [sp, #16]
 8007f34:	4452      	add	r2, sl
 8007f36:	4614      	mov	r4, r2
 8007f38:	9a05      	ldr	r2, [sp, #20]
 8007f3a:	f8cd a014 	str.w	sl, [sp, #20]
 8007f3e:	1aa4      	subs	r4, r4, r2
 8007f40:	fba4 1203 	umull	r1, r2, r4, r3
 8007f44:	17e7      	asrs	r7, r4, #31
 8007f46:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8007f4a:	fb03 2207 	mla	r2, r3, r7, r2
 8007f4e:	f142 0500 	adc.w	r5, r2, #0
 8007f52:	006b      	lsls	r3, r5, #1
 8007f54:	469a      	mov	sl, r3
 8007f56:	9304      	str	r3, [sp, #16]
 8007f58:	9e00      	ldr	r6, [sp, #0]
 8007f5a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8007f5e:	9a06      	ldr	r2, [sp, #24]
 8007f60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f64:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8007f66:	2500      	movs	r5, #0
 8007f68:	fb08 f303 	mul.w	r3, r8, r3
 8007f6c:	fbc2 450a 	smlal	r4, r5, r2, sl
 8007f70:	9a07      	ldr	r2, [sp, #28]
 8007f72:	f108 0801 	add.w	r8, r8, #1
 8007f76:	10a9      	asrs	r1, r5, #2
 8007f78:	f301 010f 	ssat	r1, #16, r1
 8007f7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007f80:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8007f82:	4543      	cmp	r3, r8
 8007f84:	dd12      	ble.n	8007fac <D80_GENERIC+0x240>
 8007f86:	9b00      	ldr	r3, [sp, #0]
 8007f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	f47f af0c 	bne.w	8007da8 <D80_GENERIC+0x3c>
 8007f90:	9b00      	ldr	r3, [sp, #0]
 8007f92:	6885      	ldr	r5, [r0, #8]
 8007f94:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007f96:	06b2      	lsls	r2, r6, #26
 8007f98:	e9d0 3100 	ldrd	r3, r1, [r0]
 8007f9c:	f100 000a 	add.w	r0, r0, #10
 8007fa0:	f57f af35 	bpl.w	8007e0e <D80_GENERIC+0xa2>
 8007fa4:	ba5b      	rev16	r3, r3
 8007fa6:	ba49      	rev16	r1, r1
 8007fa8:	ba6d      	rev16	r5, r5
 8007faa:	e730      	b.n	8007e0e <D80_GENERIC+0xa2>
 8007fac:	4632      	mov	r2, r6
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	6093      	str	r3, [r2, #8]
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	60d3      	str	r3, [r2, #12]
 8007fb8:	9b02      	ldr	r3, [sp, #8]
 8007fba:	61d3      	str	r3, [r2, #28]
 8007fbc:	9b04      	ldr	r3, [sp, #16]
 8007fbe:	6113      	str	r3, [r2, #16]
 8007fc0:	9b05      	ldr	r3, [sp, #20]
 8007fc2:	6153      	str	r3, [r2, #20]
 8007fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc6:	6193      	str	r3, [r2, #24]
 8007fc8:	b00b      	add	sp, #44	; 0x2c
 8007fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fce:	bf00      	nop
 8007fd0:	002d0024 	.word	0x002d0024
 8007fd4:	001c0015 	.word	0x001c0015
 8007fd8:	000f000a 	.word	0x000f000a
 8007fdc:	00060003 	.word	0x00060003
 8007fe0:	0037003f 	.word	0x0037003f
 8007fe4:	00450049 	.word	0x00450049
 8007fe8:	00490045 	.word	0x00490045
 8007fec:	003f0037 	.word	0x003f0037
 8007ff0:	00030006 	.word	0x00030006
 8007ff4:	000a000f 	.word	0x000a000f
 8007ff8:	0015001c 	.word	0x0015001c
 8007ffc:	0024002d 	.word	0x0024002d
 8008000:	24000000 	.word	0x24000000

08008004 <D128_GENERIC>:
 8008004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008008:	b08d      	sub	sp, #52	; 0x34
 800800a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800800c:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8008010:	9109      	str	r1, [sp, #36]	; 0x24
 8008012:	6911      	ldr	r1, [r2, #16]
 8008014:	9201      	str	r2, [sp, #4]
 8008016:	9106      	str	r1, [sp, #24]
 8008018:	6951      	ldr	r1, [r2, #20]
 800801a:	9107      	str	r1, [sp, #28]
 800801c:	6991      	ldr	r1, [r2, #24]
 800801e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008020:	6891      	ldr	r1, [r2, #8]
 8008022:	9103      	str	r1, [sp, #12]
 8008024:	68d1      	ldr	r1, [r2, #12]
 8008026:	9102      	str	r1, [sp, #8]
 8008028:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800802a:	9108      	str	r1, [sp, #32]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 8183 	beq.w	8008338 <D128_GENERIC+0x334>
 8008032:	2300      	movs	r3, #0
 8008034:	6a12      	ldr	r2, [r2, #32]
 8008036:	4681      	mov	r9, r0
 8008038:	920a      	str	r2, [sp, #40]	; 0x28
 800803a:	e9cd a304 	strd	sl, r3, [sp, #16]
 800803e:	e165      	b.n	800830c <D128_GENERIC+0x308>
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	f899 b000 	ldrb.w	fp, [r9]
 8008046:	b213      	sxth	r3, r2
 8008048:	4255      	negs	r5, r2
 800804a:	f819 0002 	ldrb.w	r0, [r9, r2]
 800804e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008052:	009f      	lsls	r7, r3, #2
 8008054:	eb09 0402 	add.w	r4, r9, r2
 8008058:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800805c:	f819 8002 	ldrb.w	r8, [r9, r2]
 8008060:	443b      	add	r3, r7
 8008062:	1962      	adds	r2, r4, r5
 8008064:	5d64      	ldrb	r4, [r4, r5]
 8008066:	eb02 0c03 	add.w	ip, r2, r3
 800806a:	0424      	lsls	r4, r4, #16
 800806c:	5cd3      	ldrb	r3, [r2, r3]
 800806e:	eb0c 0e05 	add.w	lr, ip, r5
 8008072:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8008076:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800807a:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800807e:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8008082:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8008086:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800808a:	eb0c 0e06 	add.w	lr, ip, r6
 800808e:	f81c a006 	ldrb.w	sl, [ip, r6]
 8008092:	0412      	lsls	r2, r2, #16
 8008094:	445c      	add	r4, fp
 8008096:	eb0e 0c05 	add.w	ip, lr, r5
 800809a:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800809e:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80080a2:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 80080a6:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80080aa:	041b      	lsls	r3, r3, #16
 80080ac:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80080b0:	eb00 0b06 	add.w	fp, r0, r6
 80080b4:	5d80      	ldrb	r0, [r0, r6]
 80080b6:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 80080ba:	f81b 6005 	ldrb.w	r6, [fp, r5]
 80080be:	eb0b 0a05 	add.w	sl, fp, r5
 80080c2:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 80080c6:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 80080ca:	0436      	lsls	r6, r6, #16
 80080cc:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 80080d0:	4442      	add	r2, r8
 80080d2:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 80080d6:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 80080da:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80080de:	44b9      	add	r9, r7
 80080e0:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 80080e4:	4463      	add	r3, ip
 80080e6:	eb06 0508 	add.w	r5, r6, r8
 80080ea:	b2e7      	uxtb	r7, r4
 80080ec:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80080f0:	499b      	ldr	r1, [pc, #620]	; (8008360 <D128_GENERIC+0x35c>)
 80080f2:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80080f6:	0e24      	lsrs	r4, r4, #24
 80080f8:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 80080fc:	b2d7      	uxtb	r7, r2
 80080fe:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8008102:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8008106:	9904      	ldr	r1, [sp, #16]
 8008108:	4461      	add	r1, ip
 800810a:	468c      	mov	ip, r1
 800810c:	4994      	ldr	r1, [pc, #592]	; (8008360 <D128_GENERIC+0x35c>)
 800810e:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8008112:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008116:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800811a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800811e:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8008122:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8008126:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800812a:	0e12      	lsrs	r2, r2, #24
 800812c:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8008130:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008134:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8008138:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800813c:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8008140:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008144:	b2da      	uxtb	r2, r3
 8008146:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800814a:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800814e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008152:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008156:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800815a:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800815e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008162:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8008166:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800816a:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800816e:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8008172:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008176:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800817a:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800817e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008182:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8008186:	0e1b      	lsrs	r3, r3, #24
 8008188:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800818c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008190:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8008194:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8008198:	b2eb      	uxtb	r3, r5
 800819a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800819e:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 80081a2:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80081a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081aa:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 80081ae:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 80081b2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80081b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081ba:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80081be:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 80081c2:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 80081c6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80081ca:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80081ce:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 80081d2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80081d6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 80081da:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80081de:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 80081e2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80081e6:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 80081ea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80081ee:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 80081f2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80081f6:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 80081fa:	ea4f 219e 	mov.w	r1, lr, lsr #10
 80081fe:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8008202:	9104      	str	r1, [sp, #16]
 8008204:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8008208:	9902      	ldr	r1, [sp, #8]
 800820a:	4a56      	ldr	r2, [pc, #344]	; (8008364 <D128_GENERIC+0x360>)
 800820c:	fb2b 1202 	smlad	r2, fp, r2, r1
 8008210:	4955      	ldr	r1, [pc, #340]	; (8008368 <D128_GENERIC+0x364>)
 8008212:	fb28 2201 	smlad	r2, r8, r1, r2
 8008216:	4955      	ldr	r1, [pc, #340]	; (800836c <D128_GENERIC+0x368>)
 8008218:	fb27 2201 	smlad	r2, r7, r1, r2
 800821c:	4954      	ldr	r1, [pc, #336]	; (8008370 <D128_GENERIC+0x36c>)
 800821e:	fb26 2201 	smlad	r2, r6, r1, r2
 8008222:	4954      	ldr	r1, [pc, #336]	; (8008374 <D128_GENERIC+0x370>)
 8008224:	fb24 2201 	smlad	r2, r4, r1, r2
 8008228:	4953      	ldr	r1, [pc, #332]	; (8008378 <D128_GENERIC+0x374>)
 800822a:	fb20 2201 	smlad	r2, r0, r1, r2
 800822e:	4953      	ldr	r1, [pc, #332]	; (800837c <D128_GENERIC+0x378>)
 8008230:	fb23 2201 	smlad	r2, r3, r1, r2
 8008234:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8008238:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800823c:	4950      	ldr	r1, [pc, #320]	; (8008380 <D128_GENERIC+0x37c>)
 800823e:	9a03      	ldr	r2, [sp, #12]
 8008240:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8008244:	4a4f      	ldr	r2, [pc, #316]	; (8008384 <D128_GENERIC+0x380>)
 8008246:	fb28 ce02 	smlad	lr, r8, r2, ip
 800824a:	f8df c150 	ldr.w	ip, [pc, #336]	; 800839c <D128_GENERIC+0x398>
 800824e:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8008252:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80083a0 <D128_GENERIC+0x39c>
 8008256:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800825a:	f8df e148 	ldr.w	lr, [pc, #328]	; 80083a4 <D128_GENERIC+0x3a0>
 800825e:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8008262:	f8df c144 	ldr.w	ip, [pc, #324]	; 80083a8 <D128_GENERIC+0x3a4>
 8008266:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800826a:	f8df c140 	ldr.w	ip, [pc, #320]	; 80083ac <D128_GENERIC+0x3a8>
 800826e:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8008272:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80083b0 <D128_GENERIC+0x3ac>
 8008276:	fb25 c20e 	smlad	r2, r5, lr, ip
 800827a:	f04f 0c01 	mov.w	ip, #1
 800827e:	9202      	str	r2, [sp, #8]
 8008280:	fb2b fb0c 	smuad	fp, fp, ip
 8008284:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80083b4 <D128_GENERIC+0x3b0>
 8008288:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800828c:	f8df c128 	ldr.w	ip, [pc, #296]	; 80083b8 <D128_GENERIC+0x3b4>
 8008290:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8008294:	4f3c      	ldr	r7, [pc, #240]	; (8008388 <D128_GENERIC+0x384>)
 8008296:	fb26 bb07 	smlad	fp, r6, r7, fp
 800829a:	4f3c      	ldr	r7, [pc, #240]	; (800838c <D128_GENERIC+0x388>)
 800829c:	fb24 bb07 	smlad	fp, r4, r7, fp
 80082a0:	4f3b      	ldr	r7, [pc, #236]	; (8008390 <D128_GENERIC+0x38c>)
 80082a2:	fb20 bb07 	smlad	fp, r0, r7, fp
 80082a6:	4f3b      	ldr	r7, [pc, #236]	; (8008394 <D128_GENERIC+0x390>)
 80082a8:	fb23 bb07 	smlad	fp, r3, r7, fp
 80082ac:	4b3a      	ldr	r3, [pc, #232]	; (8008398 <D128_GENERIC+0x394>)
 80082ae:	fb25 b303 	smlad	r3, r5, r3, fp
 80082b2:	9303      	str	r3, [sp, #12]
 80082b4:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 80082b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ba:	b183      	cbz	r3, 80082de <D128_GENERIC+0x2da>
 80082bc:	9a06      	ldr	r2, [sp, #24]
 80082be:	9907      	ldr	r1, [sp, #28]
 80082c0:	4422      	add	r2, r4
 80082c2:	9407      	str	r4, [sp, #28]
 80082c4:	1a52      	subs	r2, r2, r1
 80082c6:	fba2 0103 	umull	r0, r1, r2, r3
 80082ca:	17d5      	asrs	r5, r2, #31
 80082cc:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 80082d0:	fb03 1105 	mla	r1, r3, r5, r1
 80082d4:	f141 0300 	adc.w	r3, r1, #0
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	461c      	mov	r4, r3
 80082dc:	9306      	str	r3, [sp, #24]
 80082de:	9d01      	ldr	r5, [sp, #4]
 80082e0:	01e4      	lsls	r4, r4, #7
 80082e2:	9e05      	ldr	r6, [sp, #20]
 80082e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082e8:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 80082ea:	2300      	movs	r3, #0
 80082ec:	9908      	ldr	r1, [sp, #32]
 80082ee:	fb06 f000 	mul.w	r0, r6, r0
 80082f2:	3601      	adds	r6, #1
 80082f4:	fbc1 2304 	smlal	r2, r3, r1, r4
 80082f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082fa:	109b      	asrs	r3, r3, #2
 80082fc:	9605      	str	r6, [sp, #20]
 80082fe:	f303 030f 	ssat	r3, #16, r3
 8008302:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8008306:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8008308:	42b3      	cmp	r3, r6
 800830a:	dd13      	ble.n	8008334 <D128_GENERIC+0x330>
 800830c:	9b01      	ldr	r3, [sp, #4]
 800830e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008310:	2a01      	cmp	r2, #1
 8008312:	f47f ae95 	bne.w	8008040 <D128_GENERIC+0x3c>
 8008316:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008318:	f109 0610 	add.w	r6, r9, #16
 800831c:	0681      	lsls	r1, r0, #26
 800831e:	e9d9 4200 	ldrd	r4, r2, [r9]
 8008322:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8008326:	d518      	bpl.n	800835a <D128_GENERIC+0x356>
 8008328:	ba64      	rev16	r4, r4
 800832a:	ba52      	rev16	r2, r2
 800832c:	ba5b      	rev16	r3, r3
 800832e:	ba6d      	rev16	r5, r5
 8008330:	46b1      	mov	r9, r6
 8008332:	e6da      	b.n	80080ea <D128_GENERIC+0xe6>
 8008334:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008338:	9b01      	ldr	r3, [sp, #4]
 800833a:	2000      	movs	r0, #0
 800833c:	9903      	ldr	r1, [sp, #12]
 800833e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008340:	6099      	str	r1, [r3, #8]
 8008342:	9902      	ldr	r1, [sp, #8]
 8008344:	f8c3 a01c 	str.w	sl, [r3, #28]
 8008348:	60d9      	str	r1, [r3, #12]
 800834a:	9906      	ldr	r1, [sp, #24]
 800834c:	619a      	str	r2, [r3, #24]
 800834e:	6119      	str	r1, [r3, #16]
 8008350:	9907      	ldr	r1, [sp, #28]
 8008352:	6159      	str	r1, [r3, #20]
 8008354:	b00d      	add	sp, #52	; 0x34
 8008356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800835a:	46b1      	mov	r9, r6
 800835c:	e6c5      	b.n	80080ea <D128_GENERIC+0xe6>
 800835e:	bf00      	nop
 8008360:	24000000 	.word	0x24000000
 8008364:	00780069 	.word	0x00780069
 8008368:	005b004e 	.word	0x005b004e
 800836c:	00420037 	.word	0x00420037
 8008370:	002d0024 	.word	0x002d0024
 8008374:	001c0015 	.word	0x001c0015
 8008378:	000f000a 	.word	0x000f000a
 800837c:	00060003 	.word	0x00060003
 8008380:	00880096 	.word	0x00880096
 8008384:	00a200ac 	.word	0x00a200ac
 8008388:	0015001c 	.word	0x0015001c
 800838c:	0024002d 	.word	0x0024002d
 8008390:	00370042 	.word	0x00370042
 8008394:	004e005b 	.word	0x004e005b
 8008398:	00690078 	.word	0x00690078
 800839c:	00b400ba 	.word	0x00b400ba
 80083a0:	00be00c0 	.word	0x00be00c0
 80083a4:	00c000be 	.word	0x00c000be
 80083a8:	00ba00b4 	.word	0x00ba00b4
 80083ac:	00ac00a2 	.word	0x00ac00a2
 80083b0:	00960088 	.word	0x00960088
 80083b4:	00030006 	.word	0x00030006
 80083b8:	000a000f 	.word	0x000a000f

080083bc <D16_1CH_HTONS_VOL_HP>:
 80083bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c0:	6993      	ldr	r3, [r2, #24]
 80083c2:	b087      	sub	sp, #28
 80083c4:	4682      	mov	sl, r0
 80083c6:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 80083ce:	69d3      	ldr	r3, [r2, #28]
 80083d0:	f8d2 e020 	ldr.w	lr, [r2, #32]
 80083d4:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 80083d8:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 80083dc:	9403      	str	r4, [sp, #12]
 80083de:	2800      	cmp	r0, #0
 80083e0:	d054      	beq.n	800848c <D16_1CH_HTONS_VOL_HP+0xd0>
 80083e2:	f1a1 0902 	sub.w	r9, r1, #2
 80083e6:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 80083ea:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008498 <D16_1CH_HTONS_VOL_HP+0xdc>
 80083ee:	4650      	mov	r0, sl
 80083f0:	9101      	str	r1, [sp, #4]
 80083f2:	4619      	mov	r1, r3
 80083f4:	f8cd b008 	str.w	fp, [sp, #8]
 80083f8:	9205      	str	r2, [sp, #20]
 80083fa:	f850 3b02 	ldr.w	r3, [r0], #2
 80083fe:	ba5b      	rev16	r3, r3
 8008400:	b2dc      	uxtb	r4, r3
 8008402:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008406:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800840a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800840e:	4419      	add	r1, r3
 8008410:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8008414:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8008418:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800841c:	0aa1      	lsrs	r1, r4, #10
 800841e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008422:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8008424:	fb23 5402 	smlad	r4, r3, r2, r5
 8008428:	4a1a      	ldr	r2, [pc, #104]	; (8008494 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800842a:	fb23 f502 	smuad	r5, r3, r2
 800842e:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8008432:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8008436:	f04f 0b00 	mov.w	fp, #0
 800843a:	19a2      	adds	r2, r4, r6
 800843c:	eba2 020c 	sub.w	r2, r2, ip
 8008440:	46a4      	mov	ip, r4
 8008442:	17d7      	asrs	r7, r2, #31
 8008444:	fba2 230e 	umull	r2, r3, r2, lr
 8008448:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800844c:	fb0e 3307 	mla	r3, lr, r7, r3
 8008450:	f143 0700 	adc.w	r7, r3, #0
 8008454:	9b02      	ldr	r3, [sp, #8]
 8008456:	047a      	lsls	r2, r7, #17
 8008458:	007e      	lsls	r6, r7, #1
 800845a:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800845e:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8008462:	f303 030f 	ssat	r3, #16, r3
 8008466:	f829 3f02 	strh.w	r3, [r9, #2]!
 800846a:	9b01      	ldr	r3, [sp, #4]
 800846c:	4298      	cmp	r0, r3
 800846e:	d1c4      	bne.n	80083fa <D16_1CH_HTONS_VOL_HP+0x3e>
 8008470:	460b      	mov	r3, r1
 8008472:	9a05      	ldr	r2, [sp, #20]
 8008474:	2000      	movs	r0, #0
 8008476:	9903      	ldr	r1, [sp, #12]
 8008478:	61d3      	str	r3, [r2, #28]
 800847a:	9b04      	ldr	r3, [sp, #16]
 800847c:	6095      	str	r5, [r2, #8]
 800847e:	60d1      	str	r1, [r2, #12]
 8008480:	6193      	str	r3, [r2, #24]
 8008482:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8008486:	b007      	add	sp, #28
 8008488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848c:	4664      	mov	r4, ip
 800848e:	e7f1      	b.n	8008474 <D16_1CH_HTONS_VOL_HP+0xb8>
 8008490:	00030001 	.word	0x00030001
 8008494:	00010003 	.word	0x00010003
 8008498:	24000000 	.word	0x24000000

0800849c <D24_1CH_HTONS_VOL_HP>:
 800849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80084a2:	b089      	sub	sp, #36	; 0x24
 80084a4:	6993      	ldr	r3, [r2, #24]
 80084a6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80084a8:	9604      	str	r6, [sp, #16]
 80084aa:	6a16      	ldr	r6, [r2, #32]
 80084ac:	9306      	str	r3, [sp, #24]
 80084ae:	9505      	str	r5, [sp, #20]
 80084b0:	69d3      	ldr	r3, [r2, #28]
 80084b2:	9600      	str	r6, [sp, #0]
 80084b4:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80084b8:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 80084bc:	2d00      	cmp	r5, #0
 80084be:	f000 8083 	beq.w	80085c8 <D24_1CH_HTONS_VOL_HP+0x12c>
 80084c2:	9207      	str	r2, [sp, #28]
 80084c4:	2600      	movs	r6, #0
 80084c6:	4622      	mov	r2, r4
 80084c8:	f1a1 0b02 	sub.w	fp, r1, #2
 80084cc:	4f3f      	ldr	r7, [pc, #252]	; (80085cc <D24_1CH_HTONS_VOL_HP+0x130>)
 80084ce:	461d      	mov	r5, r3
 80084d0:	f8cd a00c 	str.w	sl, [sp, #12]
 80084d4:	9c00      	ldr	r4, [sp, #0]
 80084d6:	e056      	b.n	8008586 <D24_1CH_HTONS_VOL_HP+0xea>
 80084d8:	7841      	ldrb	r1, [r0, #1]
 80084da:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 80084de:	3002      	adds	r0, #2
 80084e0:	4488      	add	r8, r1
 80084e2:	fa5f f388 	uxtb.w	r3, r8
 80084e6:	f3c8 2907 	ubfx	r9, r8, #8, #8
 80084ea:	ea4f 4818 	mov.w	r8, r8, lsr #16
 80084ee:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80084f2:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 80084f6:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 80084fa:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 80084fe:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008502:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008506:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800850a:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800850e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008512:	492f      	ldr	r1, [pc, #188]	; (80085d0 <D24_1CH_HTONS_VOL_HP+0x134>)
 8008514:	fb23 e901 	smlad	r9, r3, r1, lr
 8008518:	492e      	ldr	r1, [pc, #184]	; (80085d4 <D24_1CH_HTONS_VOL_HP+0x138>)
 800851a:	fb23 ce01 	smlad	lr, r3, r1, ip
 800851e:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8008522:	2101      	movs	r1, #1
 8008524:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8008528:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800852c:	fb23 f301 	smuad	r3, r3, r1
 8008530:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8008534:	eb08 0c03 	add.w	ip, r8, r3
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	f04f 0a00 	mov.w	sl, #0
 800853e:	440a      	add	r2, r1
 8008540:	3601      	adds	r6, #1
 8008542:	9103      	str	r1, [sp, #12]
 8008544:	1ad2      	subs	r2, r2, r3
 8008546:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800854a:	fba2 2304 	umull	r2, r3, r2, r4
 800854e:	e9cd 2300 	strd	r2, r3, [sp]
 8008552:	fb04 3309 	mla	r3, r4, r9, r3
 8008556:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008560:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008564:	f143 0300 	adc.w	r3, r3, #0
 8008568:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800856c:	005a      	lsls	r2, r3, #1
 800856e:	9b04      	ldr	r3, [sp, #16]
 8008570:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8008574:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8008578:	f303 030f 	ssat	r3, #16, r3
 800857c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8008580:	9b05      	ldr	r3, [sp, #20]
 8008582:	429e      	cmp	r6, r3
 8008584:	d010      	beq.n	80085a8 <D24_1CH_HTONS_VOL_HP+0x10c>
 8008586:	f890 9003 	ldrb.w	r9, [r0, #3]
 800858a:	f016 0f01 	tst.w	r6, #1
 800858e:	7801      	ldrb	r1, [r0, #0]
 8008590:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8008594:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8008598:	d09e      	beq.n	80084d8 <D24_1CH_HTONS_VOL_HP+0x3c>
 800859a:	f890 8002 	ldrb.w	r8, [r0, #2]
 800859e:	3004      	adds	r0, #4
 80085a0:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 80085a4:	4488      	add	r8, r1
 80085a6:	e79c      	b.n	80084e2 <D24_1CH_HTONS_VOL_HP+0x46>
 80085a8:	4614      	mov	r4, r2
 80085aa:	462b      	mov	r3, r5
 80085ac:	9a07      	ldr	r2, [sp, #28]
 80085ae:	2000      	movs	r0, #0
 80085b0:	61d3      	str	r3, [r2, #28]
 80085b2:	9b06      	ldr	r3, [sp, #24]
 80085b4:	f8c2 c008 	str.w	ip, [r2, #8]
 80085b8:	f8c2 e00c 	str.w	lr, [r2, #12]
 80085bc:	6193      	str	r3, [r2, #24]
 80085be:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80085c2:	b009      	add	sp, #36	; 0x24
 80085c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	4651      	mov	r1, sl
 80085ca:	e7f0      	b.n	80085ae <D24_1CH_HTONS_VOL_HP+0x112>
 80085cc:	24000000 	.word	0x24000000
 80085d0:	00030001 	.word	0x00030001
 80085d4:	00060007 	.word	0x00060007

080085d8 <D32_1CH_HTONS_VOL_HP>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	6993      	ldr	r3, [r2, #24]
 80085de:	b087      	sub	sp, #28
 80085e0:	4683      	mov	fp, r0
 80085e2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	69d5      	ldr	r5, [r2, #28]
 80085e8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80085ea:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80085ee:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 80085f2:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d077      	beq.n	80086ea <D32_1CH_HTONS_VOL_HP+0x112>
 80085fa:	460f      	mov	r7, r1
 80085fc:	46f1      	mov	r9, lr
 80085fe:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008602:	f8cd 8000 	str.w	r8, [sp]
 8008606:	4e3a      	ldr	r6, [pc, #232]	; (80086f0 <D32_1CH_HTONS_VOL_HP+0x118>)
 8008608:	469e      	mov	lr, r3
 800860a:	46a0      	mov	r8, r4
 800860c:	9103      	str	r1, [sp, #12]
 800860e:	9205      	str	r2, [sp, #20]
 8008610:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008614:	ba64      	rev16	r4, r4
 8008616:	b2e0      	uxtb	r0, r4
 8008618:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800861c:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008620:	0e24      	lsrs	r4, r4, #24
 8008622:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8008626:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800862a:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800862e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008632:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8008636:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800863a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800863e:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8008642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008646:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800864a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800864e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008652:	f3c5 0009 	ubfx	r0, r5, #0, #10
 8008656:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800865a:	4826      	ldr	r0, [pc, #152]	; (80086f4 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800865c:	fb23 c400 	smlad	r4, r3, r0, ip
 8008660:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008664:	fb21 4402 	smlad	r4, r1, r2, r4
 8008668:	4823      	ldr	r0, [pc, #140]	; (80086f8 <D32_1CH_HTONS_VOL_HP+0x120>)
 800866a:	fb23 ec00 	smlad	ip, r3, r0, lr
 800866e:	4823      	ldr	r0, [pc, #140]	; (80086fc <D32_1CH_HTONS_VOL_HP+0x124>)
 8008670:	fb21 cc00 	smlad	ip, r1, r0, ip
 8008674:	2201      	movs	r2, #1
 8008676:	fb23 f302 	smuad	r3, r3, r2
 800867a:	4821      	ldr	r0, [pc, #132]	; (8008700 <D32_1CH_HTONS_VOL_HP+0x128>)
 800867c:	fb21 3e00 	smlad	lr, r1, r0, r3
 8008680:	9b00      	ldr	r3, [sp, #0]
 8008682:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 8008686:	4423      	add	r3, r4
 8008688:	eba3 0209 	sub.w	r2, r3, r9
 800868c:	46a1      	mov	r9, r4
 800868e:	17d1      	asrs	r1, r2, #31
 8008690:	fba2 230a 	umull	r2, r3, r2, sl
 8008694:	e9cd 2300 	strd	r2, r3, [sp]
 8008698:	fb0a 3301 	mla	r3, sl, r1, r3
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086a2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80086a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086aa:	f143 0300 	adc.w	r3, r3, #0
 80086ae:	0399      	lsls	r1, r3, #14
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	2300      	movs	r3, #0
 80086b6:	fbc8 2301 	smlal	r2, r3, r8, r1
 80086ba:	109b      	asrs	r3, r3, #2
 80086bc:	f303 030f 	ssat	r3, #16, r3
 80086c0:	f827 3b02 	strh.w	r3, [r7], #2
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	429f      	cmp	r7, r3
 80086c8:	d1a2      	bne.n	8008610 <D32_1CH_HTONS_VOL_HP+0x38>
 80086ca:	4673      	mov	r3, lr
 80086cc:	f8dd 8000 	ldr.w	r8, [sp]
 80086d0:	9a05      	ldr	r2, [sp, #20]
 80086d2:	6093      	str	r3, [r2, #8]
 80086d4:	2000      	movs	r0, #0
 80086d6:	9b04      	ldr	r3, [sp, #16]
 80086d8:	f8c2 c00c 	str.w	ip, [r2, #12]
 80086dc:	61d5      	str	r5, [r2, #28]
 80086de:	6193      	str	r3, [r2, #24]
 80086e0:	e9c2 8404 	strd	r8, r4, [r2, #16]
 80086e4:	b007      	add	sp, #28
 80086e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ea:	4674      	mov	r4, lr
 80086ec:	e7f1      	b.n	80086d2 <D32_1CH_HTONS_VOL_HP+0xfa>
 80086ee:	bf00      	nop
 80086f0:	24000000 	.word	0x24000000
 80086f4:	00060003 	.word	0x00060003
 80086f8:	000a000c 	.word	0x000a000c
 80086fc:	000c000a 	.word	0x000c000a
 8008700:	00030006 	.word	0x00030006

08008704 <D48_1CH_HTONS_VOL_HP>:
 8008704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800870a:	b087      	sub	sp, #28
 800870c:	6993      	ldr	r3, [r2, #24]
 800870e:	9701      	str	r7, [sp, #4]
 8008710:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008712:	6a17      	ldr	r7, [r2, #32]
 8008714:	9304      	str	r3, [sp, #16]
 8008716:	69d6      	ldr	r6, [r2, #28]
 8008718:	9702      	str	r7, [sp, #8]
 800871a:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800871e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008722:	2d00      	cmp	r5, #0
 8008724:	f000 8093 	beq.w	800884e <D48_1CH_HTONS_VOL_HP+0x14a>
 8008728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800872c:	f1a1 0b02 	sub.w	fp, r1, #2
 8008730:	46f2      	mov	sl, lr
 8008732:	4f48      	ldr	r7, [pc, #288]	; (8008854 <D48_1CH_HTONS_VOL_HP+0x150>)
 8008734:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8008738:	469e      	mov	lr, r3
 800873a:	9205      	str	r2, [sp, #20]
 800873c:	9103      	str	r1, [sp, #12]
 800873e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8008742:	3006      	adds	r0, #6
 8008744:	ba5b      	rev16	r3, r3
 8008746:	fa92 f992 	rev16.w	r9, r2
 800874a:	b2dd      	uxtb	r5, r3
 800874c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008750:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008754:	0e1b      	lsrs	r3, r3, #24
 8008756:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800875a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800875e:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8008762:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 8008766:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800876a:	fa5f f289 	uxtb.w	r2, r9
 800876e:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8008772:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8008776:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800877a:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800877e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008782:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 8008786:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800878a:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800878e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008792:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8008796:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800879a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800879e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80087a2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80087a6:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80087aa:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80087ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80087b2:	4b29      	ldr	r3, [pc, #164]	; (8008858 <D48_1CH_HTONS_VOL_HP+0x154>)
 80087b4:	fb28 c103 	smlad	r1, r8, r3, ip
 80087b8:	4b28      	ldr	r3, [pc, #160]	; (800885c <D48_1CH_HTONS_VOL_HP+0x158>)
 80087ba:	fb25 1103 	smlad	r1, r5, r3, r1
 80087be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087c2:	fb22 1903 	smlad	r9, r2, r3, r1
 80087c6:	4b26      	ldr	r3, [pc, #152]	; (8008860 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80087c8:	fb28 ec03 	smlad	ip, r8, r3, lr
 80087cc:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80087d0:	fb25 cc03 	smlad	ip, r5, r3, ip
 80087d4:	4b23      	ldr	r3, [pc, #140]	; (8008864 <D48_1CH_HTONS_VOL_HP+0x160>)
 80087d6:	fb22 cc03 	smlad	ip, r2, r3, ip
 80087da:	2101      	movs	r1, #1
 80087dc:	fb28 f801 	smuad	r8, r8, r1
 80087e0:	4b21      	ldr	r3, [pc, #132]	; (8008868 <D48_1CH_HTONS_VOL_HP+0x164>)
 80087e2:	fb25 8503 	smlad	r5, r5, r3, r8
 80087e6:	4b21      	ldr	r3, [pc, #132]	; (800886c <D48_1CH_HTONS_VOL_HP+0x168>)
 80087e8:	fb22 5e03 	smlad	lr, r2, r3, r5
 80087ec:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 80087f0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80087f4:	190a      	adds	r2, r1, r4
 80087f6:	9c02      	ldr	r4, [sp, #8]
 80087f8:	eba2 020a 	sub.w	r2, r2, sl
 80087fc:	468a      	mov	sl, r1
 80087fe:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008802:	fba2 2304 	umull	r2, r3, r2, r4
 8008806:	fb04 3309 	mla	r3, r4, r9, r3
 800880a:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800880e:	f04f 0900 	mov.w	r9, #0
 8008812:	f143 0500 	adc.w	r5, r3, #0
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	032a      	lsls	r2, r5, #12
 800881a:	006c      	lsls	r4, r5, #1
 800881c:	fbc3 8902 	smlal	r8, r9, r3, r2
 8008820:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008824:	f303 030f 	ssat	r3, #16, r3
 8008828:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	4283      	cmp	r3, r0
 8008830:	d185      	bne.n	800873e <D48_1CH_HTONS_VOL_HP+0x3a>
 8008832:	4673      	mov	r3, lr
 8008834:	9a05      	ldr	r2, [sp, #20]
 8008836:	6093      	str	r3, [r2, #8]
 8008838:	2000      	movs	r0, #0
 800883a:	9b04      	ldr	r3, [sp, #16]
 800883c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008840:	61d6      	str	r6, [r2, #28]
 8008842:	6193      	str	r3, [r2, #24]
 8008844:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8008848:	b007      	add	sp, #28
 800884a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884e:	4671      	mov	r1, lr
 8008850:	e7f1      	b.n	8008836 <D48_1CH_HTONS_VOL_HP+0x132>
 8008852:	bf00      	nop
 8008854:	24000000 	.word	0x24000000
 8008858:	000f000a 	.word	0x000f000a
 800885c:	00060003 	.word	0x00060003
 8008860:	00150019 	.word	0x00150019
 8008864:	00190015 	.word	0x00190015
 8008868:	00030006 	.word	0x00030006
 800886c:	000a000f 	.word	0x000a000f

08008870 <D64_1CH_HTONS_VOL_HP>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008876:	b089      	sub	sp, #36	; 0x24
 8008878:	6993      	ldr	r3, [r2, #24]
 800887a:	4686      	mov	lr, r0
 800887c:	9503      	str	r5, [sp, #12]
 800887e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008880:	6a15      	ldr	r5, [r2, #32]
 8008882:	9306      	str	r3, [sp, #24]
 8008884:	69d6      	ldr	r6, [r2, #28]
 8008886:	9504      	str	r5, [sp, #16]
 8008888:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800888c:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008890:	2800      	cmp	r0, #0
 8008892:	f000 80a4 	beq.w	80089de <D64_1CH_HTONS_VOL_HP+0x16e>
 8008896:	460f      	mov	r7, r1
 8008898:	46f1      	mov	r9, lr
 800889a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800889e:	4d56      	ldr	r5, [pc, #344]	; (80089f8 <D64_1CH_HTONS_VOL_HP+0x188>)
 80088a0:	46a2      	mov	sl, r4
 80088a2:	469e      	mov	lr, r3
 80088a4:	9105      	str	r1, [sp, #20]
 80088a6:	9207      	str	r2, [sp, #28]
 80088a8:	f859 1b08 	ldr.w	r1, [r9], #8
 80088ac:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80088b0:	ba49      	rev16	r1, r1
 80088b2:	fa93 fb93 	rev16.w	fp, r3
 80088b6:	b2cb      	uxtb	r3, r1
 80088b8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80088bc:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80088c0:	0e09      	lsrs	r1, r1, #24
 80088c2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80088c6:	fa5f f38b 	uxtb.w	r3, fp
 80088ca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80088ce:	4426      	add	r6, r4
 80088d0:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80088d4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80088d8:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80088dc:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80088e0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80088e4:	f3cb 2307 	ubfx	r3, fp, #8, #8
 80088e8:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80088ec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80088f0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80088f4:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 80088f8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80088fc:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008900:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8008904:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 8008908:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800890c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8008910:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8008914:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8008918:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800891c:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8008920:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008924:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8008928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800892c:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8008930:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8008934:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008938:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800893c:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8008940:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8008944:	482d      	ldr	r0, [pc, #180]	; (80089fc <D64_1CH_HTONS_VOL_HP+0x18c>)
 8008946:	fb22 cc00 	smlad	ip, r2, r0, ip
 800894a:	482d      	ldr	r0, [pc, #180]	; (8008a00 <D64_1CH_HTONS_VOL_HP+0x190>)
 800894c:	fb21 cc00 	smlad	ip, r1, r0, ip
 8008950:	482c      	ldr	r0, [pc, #176]	; (8008a04 <D64_1CH_HTONS_VOL_HP+0x194>)
 8008952:	fb23 cc00 	smlad	ip, r3, r0, ip
 8008956:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800895a:	fb2b c404 	smlad	r4, fp, r4, ip
 800895e:	482a      	ldr	r0, [pc, #168]	; (8008a08 <D64_1CH_HTONS_VOL_HP+0x198>)
 8008960:	fb22 ec00 	smlad	ip, r2, r0, lr
 8008964:	fb2b cc10 	smladx	ip, fp, r0, ip
 8008968:	4828      	ldr	r0, [pc, #160]	; (8008a0c <D64_1CH_HTONS_VOL_HP+0x19c>)
 800896a:	fb21 cc00 	smlad	ip, r1, r0, ip
 800896e:	fb23 cc10 	smladx	ip, r3, r0, ip
 8008972:	f04f 0e01 	mov.w	lr, #1
 8008976:	fb22 f20e 	smuad	r2, r2, lr
 800897a:	4825      	ldr	r0, [pc, #148]	; (8008a10 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800897c:	fb21 2100 	smlad	r1, r1, r0, r2
 8008980:	4a24      	ldr	r2, [pc, #144]	; (8008a14 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8008982:	fb23 1302 	smlad	r3, r3, r2, r1
 8008986:	4a24      	ldr	r2, [pc, #144]	; (8008a18 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8008988:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800898c:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 8008990:	eb04 0208 	add.w	r2, r4, r8
 8008994:	eba2 020a 	sub.w	r2, r2, sl
 8008998:	46a2      	mov	sl, r4
 800899a:	4610      	mov	r0, r2
 800899c:	17d1      	asrs	r1, r2, #31
 800899e:	e9cd 0100 	strd	r0, r1, [sp]
 80089a2:	9904      	ldr	r1, [sp, #16]
 80089a4:	9801      	ldr	r0, [sp, #4]
 80089a6:	fba2 2301 	umull	r2, r3, r2, r1
 80089aa:	fb01 3300 	mla	r3, r1, r0, r3
 80089ae:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 80089b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80089b6:	f143 0100 	adc.w	r1, r3, #0
 80089ba:	9b03      	ldr	r3, [sp, #12]
 80089bc:	02ca      	lsls	r2, r1, #11
 80089be:	ea4f 0841 	mov.w	r8, r1, lsl #1
 80089c2:	2100      	movs	r1, #0
 80089c4:	fbc3 0102 	smlal	r0, r1, r3, r2
 80089c8:	108b      	asrs	r3, r1, #2
 80089ca:	f303 030f 	ssat	r3, #16, r3
 80089ce:	f827 3b02 	strh.w	r3, [r7], #2
 80089d2:	9b05      	ldr	r3, [sp, #20]
 80089d4:	429f      	cmp	r7, r3
 80089d6:	f47f af67 	bne.w	80088a8 <D64_1CH_HTONS_VOL_HP+0x38>
 80089da:	4673      	mov	r3, lr
 80089dc:	9a07      	ldr	r2, [sp, #28]
 80089de:	6093      	str	r3, [r2, #8]
 80089e0:	2000      	movs	r0, #0
 80089e2:	9b06      	ldr	r3, [sp, #24]
 80089e4:	f8c2 c00c 	str.w	ip, [r2, #12]
 80089e8:	61d6      	str	r6, [r2, #28]
 80089ea:	6193      	str	r3, [r2, #24]
 80089ec:	e9c2 8404 	strd	r8, r4, [r2, #16]
 80089f0:	b009      	add	sp, #36	; 0x24
 80089f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f6:	bf00      	nop
 80089f8:	24000000 	.word	0x24000000
 80089fc:	001c0015 	.word	0x001c0015
 8008a00:	000f000a 	.word	0x000f000a
 8008a04:	00060003 	.word	0x00060003
 8008a08:	0024002a 	.word	0x0024002a
 8008a0c:	002e0030 	.word	0x002e0030
 8008a10:	00030006 	.word	0x00030006
 8008a14:	000a000f 	.word	0x000a000f
 8008a18:	0015001c 	.word	0x0015001c

08008a1c <D80_1CH_HTONS_VOL_HP>:
 8008a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a20:	6913      	ldr	r3, [r2, #16]
 8008a22:	b089      	sub	sp, #36	; 0x24
 8008a24:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	9603      	str	r6, [sp, #12]
 8008a2a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008a2c:	6a16      	ldr	r6, [r2, #32]
 8008a2e:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 8008a32:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 8008a36:	9306      	str	r3, [sp, #24]
 8008a38:	9604      	str	r6, [sp, #16]
 8008a3a:	69d3      	ldr	r3, [r2, #28]
 8008a3c:	2c00      	cmp	r4, #0
 8008a3e:	f000 80ce 	beq.w	8008bde <D80_1CH_HTONS_VOL_HP+0x1c2>
 8008a42:	3902      	subs	r1, #2
 8008a44:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008a48:	4e66      	ldr	r6, [pc, #408]	; (8008be4 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 8008a4a:	469e      	mov	lr, r3
 8008a4c:	9102      	str	r1, [sp, #8]
 8008a4e:	46aa      	mov	sl, r5
 8008a50:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8008a54:	9207      	str	r2, [sp, #28]
 8008a56:	9105      	str	r1, [sp, #20]
 8008a58:	6883      	ldr	r3, [r0, #8]
 8008a5a:	e9d0 4200 	ldrd	r4, r2, [r0]
 8008a5e:	300a      	adds	r0, #10
 8008a60:	ba64      	rev16	r4, r4
 8008a62:	ba52      	rev16	r2, r2
 8008a64:	fa93 fb93 	rev16.w	fp, r3
 8008a68:	b2e5      	uxtb	r5, r4
 8008a6a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008a6e:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008a72:	0e24      	lsrs	r4, r4, #24
 8008a74:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8008a78:	b2d5      	uxtb	r5, r2
 8008a7a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008a7e:	44c6      	add	lr, r8
 8008a80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008a84:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8008a88:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8008a8c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8008a90:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008a94:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8008a98:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aa0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8008aa4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008aa8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8008aac:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8008ab0:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8008ab4:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8008ab8:	0e12      	lsrs	r2, r2, #24
 8008aba:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8008abe:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8008ac2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8008ac6:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008aca:	fa5f fb8b 	uxtb.w	fp, fp
 8008ace:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008ad2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008ad6:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8008ada:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008ade:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8008ae2:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008ae6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008aea:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8008aee:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8008af2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008af6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008afa:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8008afe:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008b02:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8008b06:	f3ce 0109 	ubfx	r1, lr, #0, #10
 8008b0a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8008b0e:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8008b12:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8008b16:	4934      	ldr	r1, [pc, #208]	; (8008be8 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8008b18:	fb23 cc01 	smlad	ip, r3, r1, ip
 8008b1c:	4933      	ldr	r1, [pc, #204]	; (8008bec <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8008b1e:	fb24 cc01 	smlad	ip, r4, r1, ip
 8008b22:	4933      	ldr	r1, [pc, #204]	; (8008bf0 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8008b24:	fb28 cc01 	smlad	ip, r8, r1, ip
 8008b28:	4932      	ldr	r1, [pc, #200]	; (8008bf4 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8008b2a:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008b2e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008b32:	fb2b c901 	smlad	r9, fp, r1, ip
 8008b36:	4930      	ldr	r1, [pc, #192]	; (8008bf8 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8008b38:	fb23 7701 	smlad	r7, r3, r1, r7
 8008b3c:	492f      	ldr	r1, [pc, #188]	; (8008bfc <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008b3e:	fb24 7701 	smlad	r7, r4, r1, r7
 8008b42:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 8008b46:	fb28 7c0c 	smlad	ip, r8, ip, r7
 8008b4a:	492d      	ldr	r1, [pc, #180]	; (8008c00 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008b4c:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008b50:	492c      	ldr	r1, [pc, #176]	; (8008c04 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008b52:	fb2b cc01 	smlad	ip, fp, r1, ip
 8008b56:	2101      	movs	r1, #1
 8008b58:	fb23 f301 	smuad	r3, r3, r1
 8008b5c:	492a      	ldr	r1, [pc, #168]	; (8008c08 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008b5e:	fb24 3401 	smlad	r4, r4, r1, r3
 8008b62:	492a      	ldr	r1, [pc, #168]	; (8008c0c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008b64:	fb28 4101 	smlad	r1, r8, r1, r4
 8008b68:	4f29      	ldr	r7, [pc, #164]	; (8008c10 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008b6a:	fb22 1207 	smlad	r2, r2, r7, r1
 8008b6e:	4f29      	ldr	r7, [pc, #164]	; (8008c14 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008b70:	fb2b 2707 	smlad	r7, fp, r7, r2
 8008b74:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	9c04      	ldr	r4, [sp, #16]
 8008b7c:	440b      	add	r3, r1
 8008b7e:	eba3 020a 	sub.w	r2, r3, sl
 8008b82:	468a      	mov	sl, r1
 8008b84:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008b88:	fba2 2304 	umull	r2, r3, r2, r4
 8008b8c:	fb04 3309 	mla	r3, r4, r9, r3
 8008b90:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8008b94:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008b98:	f143 0500 	adc.w	r5, r3, #0
 8008b9c:	006b      	lsls	r3, r5, #1
 8008b9e:	02aa      	lsls	r2, r5, #10
 8008ba0:	2500      	movs	r5, #0
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	fbc3 4502 	smlal	r4, r5, r3, r2
 8008baa:	9a02      	ldr	r2, [sp, #8]
 8008bac:	10ab      	asrs	r3, r5, #2
 8008bae:	f303 030f 	ssat	r3, #16, r3
 8008bb2:	f822 3f02 	strh.w	r3, [r2, #2]!
 8008bb6:	9b05      	ldr	r3, [sp, #20]
 8008bb8:	9202      	str	r2, [sp, #8]
 8008bba:	4298      	cmp	r0, r3
 8008bbc:	f47f af4c 	bne.w	8008a58 <D80_1CH_HTONS_VOL_HP+0x3c>
 8008bc0:	4673      	mov	r3, lr
 8008bc2:	9a07      	ldr	r2, [sp, #28]
 8008bc4:	61d3      	str	r3, [r2, #28]
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	6097      	str	r7, [r2, #8]
 8008bcc:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008bd0:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8008bd4:	9b06      	ldr	r3, [sp, #24]
 8008bd6:	6193      	str	r3, [r2, #24]
 8008bd8:	b009      	add	sp, #36	; 0x24
 8008bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bde:	4629      	mov	r1, r5
 8008be0:	e7f0      	b.n	8008bc4 <D80_1CH_HTONS_VOL_HP+0x1a8>
 8008be2:	bf00      	nop
 8008be4:	24000000 	.word	0x24000000
 8008be8:	002d0024 	.word	0x002d0024
 8008bec:	001c0015 	.word	0x001c0015
 8008bf0:	000f000a 	.word	0x000f000a
 8008bf4:	00060003 	.word	0x00060003
 8008bf8:	0037003f 	.word	0x0037003f
 8008bfc:	00450049 	.word	0x00450049
 8008c00:	00490045 	.word	0x00490045
 8008c04:	003f0037 	.word	0x003f0037
 8008c08:	00030006 	.word	0x00030006
 8008c0c:	000a000f 	.word	0x000a000f
 8008c10:	0015001c 	.word	0x0015001c
 8008c14:	0024002d 	.word	0x0024002d

08008c18 <D128_1CH_HTONS_VOL_HP>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	6914      	ldr	r4, [r2, #16]
 8008c1e:	b08d      	sub	sp, #52	; 0x34
 8008c20:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008c22:	9404      	str	r4, [sp, #16]
 8008c24:	6954      	ldr	r4, [r2, #20]
 8008c26:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c28:	9405      	str	r4, [sp, #20]
 8008c2a:	6994      	ldr	r4, [r2, #24]
 8008c2c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8008c30:	940a      	str	r4, [sp, #40]	; 0x28
 8008c32:	6894      	ldr	r4, [r2, #8]
 8008c34:	9403      	str	r4, [sp, #12]
 8008c36:	68d4      	ldr	r4, [r2, #12]
 8008c38:	9402      	str	r4, [sp, #8]
 8008c3a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008c3c:	6a12      	ldr	r2, [r2, #32]
 8008c3e:	9407      	str	r4, [sp, #28]
 8008c40:	9208      	str	r2, [sp, #32]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 812e 	beq.w	8008ea4 <D128_1CH_HTONS_VOL_HP+0x28c>
 8008c48:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008c4c:	f100 0b10 	add.w	fp, r0, #16
 8008c50:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8008ee4 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8008c54:	9106      	str	r1, [sp, #24]
 8008c56:	9309      	str	r3, [sp, #36]	; 0x24
 8008c58:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8008c5c:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8008c60:	ba40      	rev16	r0, r0
 8008c62:	ba52      	rev16	r2, r2
 8008c64:	ba5b      	rev16	r3, r3
 8008c66:	ba76      	rev16	r6, r6
 8008c68:	b2c5      	uxtb	r5, r0
 8008c6a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8008c6e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008c72:	0e00      	lsrs	r0, r0, #24
 8008c74:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8008c78:	b2d5      	uxtb	r5, r2
 8008c7a:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8008c7e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008c82:	44bc      	add	ip, r7
 8008c84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008c88:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8008c8c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008c90:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8008c94:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8008c98:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008c9c:	0e12      	lsrs	r2, r2, #24
 8008c9e:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8008ca2:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8008ca6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008caa:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008cae:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8008cb2:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8008cb6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8008cc0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008cc4:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8008cc8:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8008ccc:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8008cd0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008cd4:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8008cd8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008cdc:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8008ce0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008ce4:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8008ce8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008cec:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008cf0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008cf4:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8008cf8:	0e1b      	lsrs	r3, r3, #24
 8008cfa:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8008cfe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008d02:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8008d06:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8008d0a:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8008d0e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008d12:	b2f3      	uxtb	r3, r6
 8008d14:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8008d18:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8008d1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d20:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8008d24:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8008d28:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8008d2c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8008d30:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008d34:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008d38:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8008d3c:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8008d40:	0e36      	lsrs	r6, r6, #24
 8008d42:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8008d46:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008d4a:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8008d4e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008d52:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8008d56:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d5a:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8008d5e:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8008d62:	9101      	str	r1, [sp, #4]
 8008d64:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8008d68:	9b02      	ldr	r3, [sp, #8]
 8008d6a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8008d6e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008d72:	4611      	mov	r1, r2
 8008d74:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8008d78:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8008d7c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008d80:	4a49      	ldr	r2, [pc, #292]	; (8008ea8 <D128_1CH_HTONS_VOL_HP+0x290>)
 8008d82:	fb2e 3202 	smlad	r2, lr, r2, r3
 8008d86:	4b49      	ldr	r3, [pc, #292]	; (8008eac <D128_1CH_HTONS_VOL_HP+0x294>)
 8008d88:	fb27 2203 	smlad	r2, r7, r3, r2
 8008d8c:	4b48      	ldr	r3, [pc, #288]	; (8008eb0 <D128_1CH_HTONS_VOL_HP+0x298>)
 8008d8e:	fb25 2203 	smlad	r2, r5, r3, r2
 8008d92:	4b48      	ldr	r3, [pc, #288]	; (8008eb4 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8008d94:	fb24 2203 	smlad	r2, r4, r3, r2
 8008d98:	4b47      	ldr	r3, [pc, #284]	; (8008eb8 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8008d9a:	fb20 2803 	smlad	r8, r0, r3, r2
 8008d9e:	4b47      	ldr	r3, [pc, #284]	; (8008ebc <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8008da0:	9a01      	ldr	r2, [sp, #4]
 8008da2:	fb22 8203 	smlad	r2, r2, r3, r8
 8008da6:	4b46      	ldr	r3, [pc, #280]	; (8008ec0 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8008da8:	9102      	str	r1, [sp, #8]
 8008daa:	fb21 2203 	smlad	r2, r1, r3, r2
 8008dae:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8008db2:	fb26 2308 	smlad	r3, r6, r8, r2
 8008db6:	4619      	mov	r1, r3
 8008db8:	9a03      	ldr	r2, [sp, #12]
 8008dba:	4b42      	ldr	r3, [pc, #264]	; (8008ec4 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8008dbc:	fb2e 2803 	smlad	r8, lr, r3, r2
 8008dc0:	4b41      	ldr	r3, [pc, #260]	; (8008ec8 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8008dc2:	fb27 8a03 	smlad	sl, r7, r3, r8
 8008dc6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008ee8 <D128_1CH_HTONS_VOL_HP+0x2d0>
 8008dca:	fb25 a808 	smlad	r8, r5, r8, sl
 8008dce:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8008eec <D128_1CH_HTONS_VOL_HP+0x2d4>
 8008dd2:	fb24 880a 	smlad	r8, r4, sl, r8
 8008dd6:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008ef0 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8008dda:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8008dde:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8008ef4 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	fb23 aa08 	smlad	sl, r3, r8, sl
 8008de8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008ef8 <D128_1CH_HTONS_VOL_HP+0x2e0>
 8008dec:	9a02      	ldr	r2, [sp, #8]
 8008dee:	fb22 a808 	smlad	r8, r2, r8, sl
 8008df2:	f8df a108 	ldr.w	sl, [pc, #264]	; 8008efc <D128_1CH_HTONS_VOL_HP+0x2e4>
 8008df6:	fb26 830a 	smlad	r3, r6, sl, r8
 8008dfa:	f04f 0801 	mov.w	r8, #1
 8008dfe:	9302      	str	r3, [sp, #8]
 8008e00:	fb2e fe08 	smuad	lr, lr, r8
 8008e04:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8008f00 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8008e08:	fb27 ee08 	smlad	lr, r7, r8, lr
 8008e0c:	4f2f      	ldr	r7, [pc, #188]	; (8008ecc <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8008e0e:	fb25 ee07 	smlad	lr, r5, r7, lr
 8008e12:	4f2f      	ldr	r7, [pc, #188]	; (8008ed0 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8008e14:	fb24 ee07 	smlad	lr, r4, r7, lr
 8008e18:	4f2e      	ldr	r7, [pc, #184]	; (8008ed4 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8008e1a:	fb20 ee07 	smlad	lr, r0, r7, lr
 8008e1e:	4f2e      	ldr	r7, [pc, #184]	; (8008ed8 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8008e20:	9b01      	ldr	r3, [sp, #4]
 8008e22:	fb23 ee07 	smlad	lr, r3, r7, lr
 8008e26:	4f2d      	ldr	r7, [pc, #180]	; (8008edc <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8008e28:	fb22 e707 	smlad	r7, r2, r7, lr
 8008e2c:	4b2c      	ldr	r3, [pc, #176]	; (8008ee0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008e2e:	fb26 7303 	smlad	r3, r6, r3, r7
 8008e32:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8008e36:	9303      	str	r3, [sp, #12]
 8008e38:	9b04      	ldr	r3, [sp, #16]
 8008e3a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008e3e:	9f08      	ldr	r7, [sp, #32]
 8008e40:	2100      	movs	r1, #0
 8008e42:	4433      	add	r3, r6
 8008e44:	f10b 0b10 	add.w	fp, fp, #16
 8008e48:	461a      	mov	r2, r3
 8008e4a:	9b05      	ldr	r3, [sp, #20]
 8008e4c:	9605      	str	r6, [sp, #20]
 8008e4e:	1ad2      	subs	r2, r2, r3
 8008e50:	17d5      	asrs	r5, r2, #31
 8008e52:	fba2 2307 	umull	r2, r3, r2, r7
 8008e56:	1814      	adds	r4, r2, r0
 8008e58:	fb07 3305 	mla	r3, r7, r5, r3
 8008e5c:	eb43 0501 	adc.w	r5, r3, r1
 8008e60:	006b      	lsls	r3, r5, #1
 8008e62:	022a      	lsls	r2, r5, #8
 8008e64:	9304      	str	r3, [sp, #16]
 8008e66:	9b07      	ldr	r3, [sp, #28]
 8008e68:	fbc3 0102 	smlal	r0, r1, r3, r2
 8008e6c:	9a06      	ldr	r2, [sp, #24]
 8008e6e:	108b      	asrs	r3, r1, #2
 8008e70:	f303 030f 	ssat	r3, #16, r3
 8008e74:	f822 3b02 	strh.w	r3, [r2], #2
 8008e78:	4613      	mov	r3, r2
 8008e7a:	9206      	str	r2, [sp, #24]
 8008e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	f47f aeea 	bne.w	8008c58 <D128_1CH_HTONS_VOL_HP+0x40>
 8008e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e86:	2000      	movs	r0, #0
 8008e88:	9903      	ldr	r1, [sp, #12]
 8008e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e8c:	6099      	str	r1, [r3, #8]
 8008e8e:	9902      	ldr	r1, [sp, #8]
 8008e90:	f8c3 c01c 	str.w	ip, [r3, #28]
 8008e94:	60d9      	str	r1, [r3, #12]
 8008e96:	9904      	ldr	r1, [sp, #16]
 8008e98:	619a      	str	r2, [r3, #24]
 8008e9a:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8008e9e:	b00d      	add	sp, #52	; 0x34
 8008ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea4:	9e05      	ldr	r6, [sp, #20]
 8008ea6:	e7ed      	b.n	8008e84 <D128_1CH_HTONS_VOL_HP+0x26c>
 8008ea8:	00780069 	.word	0x00780069
 8008eac:	005b004e 	.word	0x005b004e
 8008eb0:	00420037 	.word	0x00420037
 8008eb4:	002d0024 	.word	0x002d0024
 8008eb8:	001c0015 	.word	0x001c0015
 8008ebc:	000f000a 	.word	0x000f000a
 8008ec0:	00060003 	.word	0x00060003
 8008ec4:	00880096 	.word	0x00880096
 8008ec8:	00a200ac 	.word	0x00a200ac
 8008ecc:	000a000f 	.word	0x000a000f
 8008ed0:	0015001c 	.word	0x0015001c
 8008ed4:	0024002d 	.word	0x0024002d
 8008ed8:	00370042 	.word	0x00370042
 8008edc:	004e005b 	.word	0x004e005b
 8008ee0:	00690078 	.word	0x00690078
 8008ee4:	24000000 	.word	0x24000000
 8008ee8:	00b400ba 	.word	0x00b400ba
 8008eec:	00be00c0 	.word	0x00be00c0
 8008ef0:	00c000be 	.word	0x00c000be
 8008ef4:	00ba00b4 	.word	0x00ba00b4
 8008ef8:	00ac00a2 	.word	0x00ac00a2
 8008efc:	00960088 	.word	0x00960088
 8008f00:	00030006 	.word	0x00030006

08008f04 <PDM_Filter_Init>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	2240      	movs	r2, #64	; 0x40
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	300c      	adds	r0, #12
 8008f0e:	f000 f9ed 	bl	80092ec <memset>
 8008f12:	4a56      	ldr	r2, [pc, #344]	; (800906c <PDM_Filter_Init+0x168>)
 8008f14:	4856      	ldr	r0, [pc, #344]	; (8009070 <PDM_Filter_Init+0x16c>)
 8008f16:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8008f1a:	6813      	ldr	r3, [r2, #0]
 8008f1c:	f24c 2540 	movw	r5, #49728	; 0xc240
 8008f20:	f023 0301 	bic.w	r3, r3, #1
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	6803      	ldr	r3, [r0, #0]
 8008f28:	400b      	ands	r3, r1
 8008f2a:	42ab      	cmp	r3, r5
 8008f2c:	d040      	beq.n	8008fb0 <PDM_Filter_Init+0xac>
 8008f2e:	6803      	ldr	r3, [r0, #0]
 8008f30:	f24c 2270 	movw	r2, #49776	; 0xc270
 8008f34:	4019      	ands	r1, r3
 8008f36:	4291      	cmp	r1, r2
 8008f38:	d03a      	beq.n	8008fb0 <PDM_Filter_Init+0xac>
 8008f3a:	4b4e      	ldr	r3, [pc, #312]	; (8009074 <PDM_Filter_Init+0x170>)
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6019      	str	r1, [r3, #0]
 8008f42:	6813      	ldr	r3, [r2, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1fc      	bne.n	8008f42 <PDM_Filter_Init+0x3e>
 8008f48:	4b4b      	ldr	r3, [pc, #300]	; (8009078 <PDM_Filter_Init+0x174>)
 8008f4a:	494c      	ldr	r1, [pc, #304]	; (800907c <PDM_Filter_Init+0x178>)
 8008f4c:	4a4c      	ldr	r2, [pc, #304]	; (8009080 <PDM_Filter_Init+0x17c>)
 8008f4e:	6019      	str	r1, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	8820      	ldrh	r0, [r4, #0]
 8008f54:	4293      	cmp	r3, r2
 8008f56:	8961      	ldrh	r1, [r4, #10]
 8008f58:	f04f 0300 	mov.w	r3, #0
 8008f5c:	8922      	ldrh	r2, [r4, #8]
 8008f5e:	bf14      	ite	ne
 8008f60:	2500      	movne	r5, #0
 8008f62:	4d47      	ldreq	r5, [pc, #284]	; (8009080 <PDM_Filter_Init+0x17c>)
 8008f64:	2801      	cmp	r0, #1
 8008f66:	61a3      	str	r3, [r4, #24]
 8008f68:	6465      	str	r5, [r4, #68]	; 0x44
 8008f6a:	60e3      	str	r3, [r4, #12]
 8008f6c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f6e:	6423      	str	r3, [r4, #64]	; 0x40
 8008f70:	86a1      	strh	r1, [r4, #52]	; 0x34
 8008f72:	86e2      	strh	r2, [r4, #54]	; 0x36
 8008f74:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8008f78:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008f7c:	d936      	bls.n	8008fec <PDM_Filter_Init+0xe8>
 8008f7e:	2003      	movs	r0, #3
 8008f80:	2302      	movs	r3, #2
 8008f82:	8862      	ldrh	r2, [r4, #2]
 8008f84:	2a01      	cmp	r2, #1
 8008f86:	d92e      	bls.n	8008fe6 <PDM_Filter_Init+0xe2>
 8008f88:	2140      	movs	r1, #64	; 0x40
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008f8e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8008f92:	d101      	bne.n	8008f98 <PDM_Filter_Init+0x94>
 8008f94:	460b      	mov	r3, r1
 8008f96:	6421      	str	r1, [r4, #64]	; 0x40
 8008f98:	6862      	ldr	r2, [r4, #4]
 8008f9a:	b11a      	cbz	r2, 8008fa4 <PDM_Filter_Init+0xa0>
 8008f9c:	f043 0310 	orr.w	r3, r3, #16
 8008fa0:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008fa2:	6423      	str	r3, [r4, #64]	; 0x40
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	8722      	strh	r2, [r4, #56]	; 0x38
 8008fa8:	b908      	cbnz	r0, 8008fae <PDM_Filter_Init+0xaa>
 8008faa:	3380      	adds	r3, #128	; 0x80
 8008fac:	6423      	str	r3, [r4, #64]	; 0x40
 8008fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb0:	4b34      	ldr	r3, [pc, #208]	; (8009084 <PDM_Filter_Init+0x180>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1c0      	bne.n	8008f3a <PDM_Filter_Init+0x36>
 8008fb8:	4a33      	ldr	r2, [pc, #204]	; (8009088 <PDM_Filter_Init+0x184>)
 8008fba:	6813      	ldr	r3, [r2, #0]
 8008fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fc0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008fc4:	d006      	beq.n	8008fd4 <PDM_Filter_Init+0xd0>
 8008fc6:	6813      	ldr	r3, [r2, #0]
 8008fc8:	f240 4283 	movw	r2, #1155	; 0x483
 8008fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d1b2      	bne.n	8008f3a <PDM_Filter_Init+0x36>
 8008fd4:	4b2d      	ldr	r3, [pc, #180]	; (800908c <PDM_Filter_Init+0x188>)
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6019      	str	r1, [r3, #0]
 8008fdc:	6813      	ldr	r3, [r2, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1fc      	bne.n	8008fdc <PDM_Filter_Init+0xd8>
 8008fe2:	4b2b      	ldr	r3, [pc, #172]	; (8009090 <PDM_Filter_Init+0x18c>)
 8008fe4:	e7b1      	b.n	8008f4a <PDM_Filter_Init+0x46>
 8008fe6:	d03a      	beq.n	800905e <PDM_Filter_Init+0x15a>
 8008fe8:	4618      	mov	r0, r3
 8008fea:	e7cd      	b.n	8008f88 <PDM_Filter_Init+0x84>
 8008fec:	4d29      	ldr	r5, [pc, #164]	; (8009094 <PDM_Filter_Init+0x190>)
 8008fee:	782a      	ldrb	r2, [r5, #0]
 8008ff0:	d01b      	beq.n	800902a <PDM_Filter_Init+0x126>
 8008ff2:	2a01      	cmp	r2, #1
 8008ff4:	d001      	beq.n	8008ffa <PDM_Filter_Init+0xf6>
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	e7c3      	b.n	8008f82 <PDM_Filter_Init+0x7e>
 8008ffa:	4927      	ldr	r1, [pc, #156]	; (8009098 <PDM_Filter_Init+0x194>)
 8008ffc:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80090a0 <PDM_Filter_Init+0x19c>
 8009000:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009004:	4e25      	ldr	r6, [pc, #148]	; (800909c <PDM_Filter_Init+0x198>)
 8009006:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800900a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800900e:	ea02 0006 	and.w	r0, r2, r6
 8009012:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009016:	428f      	cmp	r7, r1
 8009018:	ea43 0300 	orr.w	r3, r3, r0
 800901c:	4413      	add	r3, r2
 800901e:	600b      	str	r3, [r1, #0]
 8009020:	d1f1      	bne.n	8009006 <PDM_Filter_Init+0x102>
 8009022:	2300      	movs	r3, #0
 8009024:	2001      	movs	r0, #1
 8009026:	702b      	strb	r3, [r5, #0]
 8009028:	e7ab      	b.n	8008f82 <PDM_Filter_Init+0x7e>
 800902a:	2a00      	cmp	r2, #0
 800902c:	d1a9      	bne.n	8008f82 <PDM_Filter_Init+0x7e>
 800902e:	491a      	ldr	r1, [pc, #104]	; (8009098 <PDM_Filter_Init+0x194>)
 8009030:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80090a0 <PDM_Filter_Init+0x19c>
 8009034:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009038:	4e18      	ldr	r6, [pc, #96]	; (800909c <PDM_Filter_Init+0x198>)
 800903a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800903e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009042:	ea02 0006 	and.w	r0, r2, r6
 8009046:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800904a:	428f      	cmp	r7, r1
 800904c:	ea43 0300 	orr.w	r3, r3, r0
 8009050:	4413      	add	r3, r2
 8009052:	600b      	str	r3, [r1, #0]
 8009054:	d1f1      	bne.n	800903a <PDM_Filter_Init+0x136>
 8009056:	2001      	movs	r0, #1
 8009058:	2300      	movs	r3, #0
 800905a:	7028      	strb	r0, [r5, #0]
 800905c:	e791      	b.n	8008f82 <PDM_Filter_Init+0x7e>
 800905e:	2220      	movs	r2, #32
 8009060:	4618      	mov	r0, r3
 8009062:	2160      	movs	r1, #96	; 0x60
 8009064:	6422      	str	r2, [r4, #64]	; 0x40
 8009066:	4613      	mov	r3, r2
 8009068:	e790      	b.n	8008f8c <PDM_Filter_Init+0x88>
 800906a:	bf00      	nop
 800906c:	e0002000 	.word	0xe0002000
 8009070:	e000ed00 	.word	0xe000ed00
 8009074:	40023008 	.word	0x40023008
 8009078:	40023000 	.word	0x40023000
 800907c:	f407a5c2 	.word	0xf407a5c2
 8009080:	b5e8b5cd 	.word	0xb5e8b5cd
 8009084:	e0042000 	.word	0xe0042000
 8009088:	5c001000 	.word	0x5c001000
 800908c:	58024c08 	.word	0x58024c08
 8009090:	58024c00 	.word	0x58024c00
 8009094:	24000490 	.word	0x24000490
 8009098:	23fffffc 	.word	0x23fffffc
 800909c:	000ffc00 	.word	0x000ffc00
 80090a0:	3ff00000 	.word	0x3ff00000

080090a4 <PDM_Filter_setConfig>:
 80090a4:	4b67      	ldr	r3, [pc, #412]	; (8009244 <PDM_Filter_setConfig+0x1a0>)
 80090a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d128      	bne.n	80090fe <PDM_Filter_setConfig+0x5a>
 80090ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80090ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090b0:	880e      	ldrh	r6, [r1, #0]
 80090b2:	460d      	mov	r5, r1
 80090b4:	4604      	mov	r4, r0
 80090b6:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80090ba:	1e73      	subs	r3, r6, #1
 80090bc:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 80090c0:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 80090c4:	2b06      	cmp	r3, #6
 80090c6:	ed2d 8b02 	vpush	{d8}
 80090ca:	6421      	str	r1, [r4, #64]	; 0x40
 80090cc:	b083      	sub	sp, #12
 80090ce:	d820      	bhi.n	8009112 <PDM_Filter_setConfig+0x6e>
 80090d0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80090d2:	42b3      	cmp	r3, r6
 80090d4:	d03d      	beq.n	8009152 <PDM_Filter_setConfig+0xae>
 80090d6:	4b5c      	ldr	r3, [pc, #368]	; (8009248 <PDM_Filter_setConfig+0x1a4>)
 80090d8:	4013      	ands	r3, r2
 80090da:	4333      	orrs	r3, r6
 80090dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80090e0:	6423      	str	r3, [r4, #64]	; 0x40
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	2a70      	cmp	r2, #112	; 0x70
 80090e8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80090ec:	d009      	beq.n	8009102 <PDM_Filter_setConfig+0x5e>
 80090ee:	2b06      	cmp	r3, #6
 80090f0:	d824      	bhi.n	800913c <PDM_Filter_setConfig+0x98>
 80090f2:	e8df f003 	tbb	[pc, r3]
 80090f6:	878a      	.short	0x878a
 80090f8:	7b7e8184 	.word	0x7b7e8184
 80090fc:	78          	.byte	0x78
 80090fd:	00          	.byte	0x00
 80090fe:	2004      	movs	r0, #4
 8009100:	4770      	bx	lr
 8009102:	2b06      	cmp	r3, #6
 8009104:	d81a      	bhi.n	800913c <PDM_Filter_setConfig+0x98>
 8009106:	e8df f003 	tbb	[pc, r3]
 800910a:	8f92      	.short	0x8f92
 800910c:	8617898c 	.word	0x8617898c
 8009110:	83          	.byte	0x83
 8009111:	00          	.byte	0x00
 8009112:	4287      	cmp	r7, r0
 8009114:	f000 808e 	beq.w	8009234 <PDM_Filter_setConfig+0x190>
 8009118:	f117 0f0c 	cmn.w	r7, #12
 800911c:	f04f 0008 	mov.w	r0, #8
 8009120:	da11      	bge.n	8009146 <PDM_Filter_setConfig+0xa2>
 8009122:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8009126:	3040      	adds	r0, #64	; 0x40
 8009128:	80ab      	strh	r3, [r5, #4]
 800912a:	886b      	ldrh	r3, [r5, #2]
 800912c:	8626      	strh	r6, [r4, #48]	; 0x30
 800912e:	8663      	strh	r3, [r4, #50]	; 0x32
 8009130:	b003      	add	sp, #12
 8009132:	ecbd 8b02 	vpop	{d8}
 8009136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009138:	4b44      	ldr	r3, [pc, #272]	; (800924c <PDM_Filter_setConfig+0x1a8>)
 800913a:	64a3      	str	r3, [r4, #72]	; 0x48
 800913c:	f117 0f0c 	cmn.w	r7, #12
 8009140:	f04f 0000 	mov.w	r0, #0
 8009144:	dbed      	blt.n	8009122 <PDM_Filter_setConfig+0x7e>
 8009146:	2f33      	cmp	r7, #51	; 0x33
 8009148:	dd10      	ble.n	800916c <PDM_Filter_setConfig+0xc8>
 800914a:	2333      	movs	r3, #51	; 0x33
 800914c:	3040      	adds	r0, #64	; 0x40
 800914e:	80ab      	strh	r3, [r5, #4]
 8009150:	e7eb      	b.n	800912a <PDM_Filter_setConfig+0x86>
 8009152:	4287      	cmp	r7, r0
 8009154:	d1f2      	bne.n	800913c <PDM_Filter_setConfig+0x98>
 8009156:	886b      	ldrh	r3, [r5, #2]
 8009158:	8663      	strh	r3, [r4, #50]	; 0x32
 800915a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800915c:	2000      	movs	r0, #0
 800915e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009162:	6423      	str	r3, [r4, #64]	; 0x40
 8009164:	b003      	add	sp, #12
 8009166:	ecbd 8b02 	vpop	{d8}
 800916a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800916c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	3b01      	subs	r3, #1
 8009174:	2b06      	cmp	r3, #6
 8009176:	d831      	bhi.n	80091dc <PDM_Filter_setConfig+0x138>
 8009178:	4a35      	ldr	r2, [pc, #212]	; (8009250 <PDM_Filter_setConfig+0x1ac>)
 800917a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800917e:	eddf 0a35 	vldr	s1, [pc, #212]	; 8009254 <PDM_Filter_setConfig+0x1b0>
 8009182:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009186:	9001      	str	r0, [sp, #4]
 8009188:	edd3 7a07 	vldr	s15, [r3, #28]
 800918c:	ed93 8a00 	vldr	s16, [r3]
 8009190:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009194:	f000 f8cc 	bl	8009330 <powf>
 8009198:	eef0 8a40 	vmov.f32	s17, s0
 800919c:	9801      	ldr	r0, [sp, #4]
 800919e:	ee07 7a90 	vmov	s15, r7
 80091a2:	ee28 8a28 	vmul.f32	s16, s16, s17
 80091a6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80091aa:	9001      	str	r0, [sp, #4]
 80091ac:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80091b0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8009258 <PDM_Filter_setConfig+0x1b4>
 80091b4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80091b8:	f000 f8ba 	bl	8009330 <powf>
 80091bc:	ee28 8a00 	vmul.f32	s16, s16, s0
 80091c0:	886b      	ldrh	r3, [r5, #2]
 80091c2:	9801      	ldr	r0, [sp, #4]
 80091c4:	feb8 8a48 	vrinta.f32	s16, s16
 80091c8:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 80091cc:	8727      	strh	r7, [r4, #56]	; 0x38
 80091ce:	8663      	strh	r3, [r4, #50]	; 0x32
 80091d0:	8626      	strh	r6, [r4, #48]	; 0x30
 80091d2:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d0bf      	beq.n	800915a <PDM_Filter_setConfig+0xb6>
 80091da:	e7a9      	b.n	8009130 <PDM_Filter_setConfig+0x8c>
 80091dc:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800925c <PDM_Filter_setConfig+0x1b8>
 80091e0:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8009260 <PDM_Filter_setConfig+0x1bc>
 80091e4:	e7db      	b.n	800919e <PDM_Filter_setConfig+0xfa>
 80091e6:	4b1f      	ldr	r3, [pc, #124]	; (8009264 <PDM_Filter_setConfig+0x1c0>)
 80091e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80091ea:	e7a7      	b.n	800913c <PDM_Filter_setConfig+0x98>
 80091ec:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <PDM_Filter_setConfig+0x1c4>)
 80091ee:	64a3      	str	r3, [r4, #72]	; 0x48
 80091f0:	e7a4      	b.n	800913c <PDM_Filter_setConfig+0x98>
 80091f2:	4b1e      	ldr	r3, [pc, #120]	; (800926c <PDM_Filter_setConfig+0x1c8>)
 80091f4:	64a3      	str	r3, [r4, #72]	; 0x48
 80091f6:	e7a1      	b.n	800913c <PDM_Filter_setConfig+0x98>
 80091f8:	4b1d      	ldr	r3, [pc, #116]	; (8009270 <PDM_Filter_setConfig+0x1cc>)
 80091fa:	64a3      	str	r3, [r4, #72]	; 0x48
 80091fc:	e79e      	b.n	800913c <PDM_Filter_setConfig+0x98>
 80091fe:	4b1d      	ldr	r3, [pc, #116]	; (8009274 <PDM_Filter_setConfig+0x1d0>)
 8009200:	64a3      	str	r3, [r4, #72]	; 0x48
 8009202:	e79b      	b.n	800913c <PDM_Filter_setConfig+0x98>
 8009204:	4b1c      	ldr	r3, [pc, #112]	; (8009278 <PDM_Filter_setConfig+0x1d4>)
 8009206:	64a3      	str	r3, [r4, #72]	; 0x48
 8009208:	e798      	b.n	800913c <PDM_Filter_setConfig+0x98>
 800920a:	4b1c      	ldr	r3, [pc, #112]	; (800927c <PDM_Filter_setConfig+0x1d8>)
 800920c:	64a3      	str	r3, [r4, #72]	; 0x48
 800920e:	e795      	b.n	800913c <PDM_Filter_setConfig+0x98>
 8009210:	4b1b      	ldr	r3, [pc, #108]	; (8009280 <PDM_Filter_setConfig+0x1dc>)
 8009212:	64a3      	str	r3, [r4, #72]	; 0x48
 8009214:	e792      	b.n	800913c <PDM_Filter_setConfig+0x98>
 8009216:	4b1b      	ldr	r3, [pc, #108]	; (8009284 <PDM_Filter_setConfig+0x1e0>)
 8009218:	64a3      	str	r3, [r4, #72]	; 0x48
 800921a:	e78f      	b.n	800913c <PDM_Filter_setConfig+0x98>
 800921c:	4b1a      	ldr	r3, [pc, #104]	; (8009288 <PDM_Filter_setConfig+0x1e4>)
 800921e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009220:	e78c      	b.n	800913c <PDM_Filter_setConfig+0x98>
 8009222:	4b1a      	ldr	r3, [pc, #104]	; (800928c <PDM_Filter_setConfig+0x1e8>)
 8009224:	64a3      	str	r3, [r4, #72]	; 0x48
 8009226:	e789      	b.n	800913c <PDM_Filter_setConfig+0x98>
 8009228:	4b19      	ldr	r3, [pc, #100]	; (8009290 <PDM_Filter_setConfig+0x1ec>)
 800922a:	64a3      	str	r3, [r4, #72]	; 0x48
 800922c:	e786      	b.n	800913c <PDM_Filter_setConfig+0x98>
 800922e:	4b19      	ldr	r3, [pc, #100]	; (8009294 <PDM_Filter_setConfig+0x1f0>)
 8009230:	64a3      	str	r3, [r4, #72]	; 0x48
 8009232:	e783      	b.n	800913c <PDM_Filter_setConfig+0x98>
 8009234:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009236:	42b3      	cmp	r3, r6
 8009238:	f47f af6e 	bne.w	8009118 <PDM_Filter_setConfig+0x74>
 800923c:	886b      	ldrh	r3, [r5, #2]
 800923e:	2008      	movs	r0, #8
 8009240:	8663      	strh	r3, [r4, #50]	; 0x32
 8009242:	e775      	b.n	8009130 <PDM_Filter_setConfig+0x8c>
 8009244:	b5e8b5cd 	.word	0xb5e8b5cd
 8009248:	fffffef0 	.word	0xfffffef0
 800924c:	080083bd 	.word	0x080083bd
 8009250:	080096a0 	.word	0x080096a0
 8009254:	42000000 	.word	0x42000000
 8009258:	3d4ccccd 	.word	0x3d4ccccd
 800925c:	4f800000 	.word	0x4f800000
 8009260:	00000000 	.word	0x00000000
 8009264:	080077c9 	.word	0x080077c9
 8009268:	08007651 	.word	0x08007651
 800926c:	08007541 	.word	0x08007541
 8009270:	08008005 	.word	0x08008005
 8009274:	08007d6d 	.word	0x08007d6d
 8009278:	08007b35 	.word	0x08007b35
 800927c:	08007951 	.word	0x08007951
 8009280:	080085d9 	.word	0x080085d9
 8009284:	0800849d 	.word	0x0800849d
 8009288:	08008c19 	.word	0x08008c19
 800928c:	08008a1d 	.word	0x08008a1d
 8009290:	08008871 	.word	0x08008871
 8009294:	08008705 	.word	0x08008705

08009298 <__errno>:
 8009298:	4b01      	ldr	r3, [pc, #4]	; (80092a0 <__errno+0x8>)
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	24000410 	.word	0x24000410

080092a4 <__libc_init_array>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	4d0d      	ldr	r5, [pc, #52]	; (80092dc <__libc_init_array+0x38>)
 80092a8:	4c0d      	ldr	r4, [pc, #52]	; (80092e0 <__libc_init_array+0x3c>)
 80092aa:	1b64      	subs	r4, r4, r5
 80092ac:	10a4      	asrs	r4, r4, #2
 80092ae:	2600      	movs	r6, #0
 80092b0:	42a6      	cmp	r6, r4
 80092b2:	d109      	bne.n	80092c8 <__libc_init_array+0x24>
 80092b4:	4d0b      	ldr	r5, [pc, #44]	; (80092e4 <__libc_init_array+0x40>)
 80092b6:	4c0c      	ldr	r4, [pc, #48]	; (80092e8 <__libc_init_array+0x44>)
 80092b8:	f000 f9e6 	bl	8009688 <_init>
 80092bc:	1b64      	subs	r4, r4, r5
 80092be:	10a4      	asrs	r4, r4, #2
 80092c0:	2600      	movs	r6, #0
 80092c2:	42a6      	cmp	r6, r4
 80092c4:	d105      	bne.n	80092d2 <__libc_init_array+0x2e>
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092cc:	4798      	blx	r3
 80092ce:	3601      	adds	r6, #1
 80092d0:	e7ee      	b.n	80092b0 <__libc_init_array+0xc>
 80092d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d6:	4798      	blx	r3
 80092d8:	3601      	adds	r6, #1
 80092da:	e7f2      	b.n	80092c2 <__libc_init_array+0x1e>
 80092dc:	08009960 	.word	0x08009960
 80092e0:	08009960 	.word	0x08009960
 80092e4:	08009960 	.word	0x08009960
 80092e8:	08009964 	.word	0x08009964

080092ec <memset>:
 80092ec:	4402      	add	r2, r0
 80092ee:	4603      	mov	r3, r0
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d100      	bne.n	80092f6 <memset+0xa>
 80092f4:	4770      	bx	lr
 80092f6:	f803 1b01 	strb.w	r1, [r3], #1
 80092fa:	e7f9      	b.n	80092f0 <memset+0x4>

080092fc <checkint>:
 80092fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009300:	2b7e      	cmp	r3, #126	; 0x7e
 8009302:	dd10      	ble.n	8009326 <checkint+0x2a>
 8009304:	2b96      	cmp	r3, #150	; 0x96
 8009306:	dc0c      	bgt.n	8009322 <checkint+0x26>
 8009308:	2201      	movs	r2, #1
 800930a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800930e:	fa02 f303 	lsl.w	r3, r2, r3
 8009312:	1e5a      	subs	r2, r3, #1
 8009314:	4202      	tst	r2, r0
 8009316:	d106      	bne.n	8009326 <checkint+0x2a>
 8009318:	4203      	tst	r3, r0
 800931a:	bf0c      	ite	eq
 800931c:	2002      	moveq	r0, #2
 800931e:	2001      	movne	r0, #1
 8009320:	4770      	bx	lr
 8009322:	2002      	movs	r0, #2
 8009324:	4770      	bx	lr
 8009326:	2000      	movs	r0, #0
 8009328:	4770      	bx	lr
 800932a:	0000      	movs	r0, r0
 800932c:	0000      	movs	r0, r0
	...

08009330 <powf>:
 8009330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009332:	ee10 1a10 	vmov	r1, s0
 8009336:	ee10 6a90 	vmov	r6, s1
 800933a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800933e:	0072      	lsls	r2, r6, #1
 8009340:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009344:	b085      	sub	sp, #20
 8009346:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800934a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800934e:	d256      	bcs.n	80093fe <powf+0xce>
 8009350:	4298      	cmp	r0, r3
 8009352:	d256      	bcs.n	8009402 <powf+0xd2>
 8009354:	2000      	movs	r0, #0
 8009356:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800935a:	4ea3      	ldr	r6, [pc, #652]	; (80095e8 <powf+0x2b8>)
 800935c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009360:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8009364:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8009368:	0dd2      	lsrs	r2, r2, #23
 800936a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800936e:	05d2      	lsls	r2, r2, #23
 8009370:	1a8b      	subs	r3, r1, r2
 8009372:	ed97 5b00 	vldr	d5, [r7]
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	15d2      	asrs	r2, r2, #23
 800937c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009380:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009384:	ed97 5b02 	vldr	d5, [r7, #8]
 8009388:	ee26 2b06 	vmul.f64	d2, d6, d6
 800938c:	ee22 1b02 	vmul.f64	d1, d2, d2
 8009390:	ee07 2a90 	vmov	s15, r2
 8009394:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8009398:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800939c:	ee37 7b05 	vadd.f64	d7, d7, d5
 80093a0:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 80093a4:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 80093a8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80093ac:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 80093b0:	eea6 4b03 	vfma.f64	d4, d6, d3
 80093b4:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 80093b8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80093bc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80093c0:	eea2 7b04 	vfma.f64	d7, d2, d4
 80093c4:	eea5 7b01 	vfma.f64	d7, d5, d1
 80093c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80093cc:	ee10 1a90 	vmov	r1, s1
 80093d0:	2300      	movs	r3, #0
 80093d2:	2700      	movs	r7, #0
 80093d4:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 80093d8:	f248 06be 	movw	r6, #32958	; 0x80be
 80093dc:	429f      	cmp	r7, r3
 80093de:	bf08      	it	eq
 80093e0:	4296      	cmpeq	r6, r2
 80093e2:	f080 80b1 	bcs.w	8009548 <powf+0x218>
 80093e6:	ed9f 7b78 	vldr	d7, [pc, #480]	; 80095c8 <powf+0x298>
 80093ea:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80093ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f2:	dd79      	ble.n	80094e8 <powf+0x1b8>
 80093f4:	b005      	add	sp, #20
 80093f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80093fa:	f000 b91f 	b.w	800963c <__math_oflowf>
 80093fe:	4298      	cmp	r0, r3
 8009400:	d32d      	bcc.n	800945e <powf+0x12e>
 8009402:	b952      	cbnz	r2, 800941a <powf+0xea>
 8009404:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800940e:	f240 80cd 	bls.w	80095ac <powf+0x27c>
 8009412:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009416:	b005      	add	sp, #20
 8009418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800941a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800941e:	d105      	bne.n	800942c <powf+0xfc>
 8009420:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8009424:	0076      	lsls	r6, r6, #1
 8009426:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800942a:	e7f0      	b.n	800940e <powf+0xde>
 800942c:	004b      	lsls	r3, r1, #1
 800942e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8009432:	d8ee      	bhi.n	8009412 <powf+0xe2>
 8009434:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8009438:	d1eb      	bne.n	8009412 <powf+0xe2>
 800943a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800943e:	f000 80b5 	beq.w	80095ac <powf+0x27c>
 8009442:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009446:	ea6f 0606 	mvn.w	r6, r6
 800944a:	bf34      	ite	cc
 800944c:	2300      	movcc	r3, #0
 800944e:	2301      	movcs	r3, #1
 8009450:	0ff6      	lsrs	r6, r6, #31
 8009452:	42b3      	cmp	r3, r6
 8009454:	f040 80ad 	bne.w	80095b2 <powf+0x282>
 8009458:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800945c:	e7db      	b.n	8009416 <powf+0xe6>
 800945e:	004f      	lsls	r7, r1, #1
 8009460:	1e7a      	subs	r2, r7, #1
 8009462:	429a      	cmp	r2, r3
 8009464:	d31c      	bcc.n	80094a0 <powf+0x170>
 8009466:	2900      	cmp	r1, #0
 8009468:	ee20 0a00 	vmul.f32	s0, s0, s0
 800946c:	da0f      	bge.n	800948e <powf+0x15e>
 800946e:	ee10 0a90 	vmov	r0, s1
 8009472:	f7ff ff43 	bl	80092fc <checkint>
 8009476:	2801      	cmp	r0, #1
 8009478:	d109      	bne.n	800948e <powf+0x15e>
 800947a:	eeb1 0a40 	vneg.f32	s0, s0
 800947e:	b947      	cbnz	r7, 8009492 <powf+0x162>
 8009480:	2e00      	cmp	r6, #0
 8009482:	dac8      	bge.n	8009416 <powf+0xe6>
 8009484:	b005      	add	sp, #20
 8009486:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800948a:	f000 b8dd 	b.w	8009648 <__math_divzerof>
 800948e:	2000      	movs	r0, #0
 8009490:	e7f5      	b.n	800947e <powf+0x14e>
 8009492:	2e00      	cmp	r6, #0
 8009494:	dabf      	bge.n	8009416 <powf+0xe6>
 8009496:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800949a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800949e:	e7ba      	b.n	8009416 <powf+0xe6>
 80094a0:	2900      	cmp	r1, #0
 80094a2:	da1f      	bge.n	80094e4 <powf+0x1b4>
 80094a4:	ee10 0a90 	vmov	r0, s1
 80094a8:	f7ff ff28 	bl	80092fc <checkint>
 80094ac:	b920      	cbnz	r0, 80094b8 <powf+0x188>
 80094ae:	b005      	add	sp, #20
 80094b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80094b4:	f000 b8d8 	b.w	8009668 <__math_invalidf>
 80094b8:	2801      	cmp	r0, #1
 80094ba:	bf14      	ite	ne
 80094bc:	2000      	movne	r0, #0
 80094be:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80094c2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80094c6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80094ca:	f4bf af44 	bcs.w	8009356 <powf+0x26>
 80094ce:	eddf 7a47 	vldr	s15, [pc, #284]	; 80095ec <powf+0x2bc>
 80094d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80094d6:	ee10 3a10 	vmov	r3, s0
 80094da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094de:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80094e2:	e738      	b.n	8009356 <powf+0x26>
 80094e4:	2000      	movs	r0, #0
 80094e6:	e7ee      	b.n	80094c6 <powf+0x196>
 80094e8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80095d0 <powf+0x2a0>
 80094ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80094f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f4:	dd10      	ble.n	8009518 <powf+0x1e8>
 80094f6:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d15c      	bne.n	80095b8 <powf+0x288>
 80094fe:	9302      	str	r3, [sp, #8]
 8009500:	eddd 7a02 	vldr	s15, [sp, #8]
 8009504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800950c:	eef4 7a47 	vcmp.f32	s15, s14
 8009510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009514:	f47f af6e 	bne.w	80093f4 <powf+0xc4>
 8009518:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80095d8 <powf+0x2a8>
 800951c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009524:	d804      	bhi.n	8009530 <powf+0x200>
 8009526:	b005      	add	sp, #20
 8009528:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800952c:	f000 b87a 	b.w	8009624 <__math_uflowf>
 8009530:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80095e0 <powf+0x2b0>
 8009534:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953c:	d504      	bpl.n	8009548 <powf+0x218>
 800953e:	b005      	add	sp, #20
 8009540:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009544:	f000 b874 	b.w	8009630 <__math_may_uflowf>
 8009548:	4b29      	ldr	r3, [pc, #164]	; (80095f0 <powf+0x2c0>)
 800954a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800954e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8009552:	ed8d 6b00 	vstr	d6, [sp]
 8009556:	ee36 7b47 	vsub.f64	d7, d6, d7
 800955a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800955e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009562:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009566:	f006 011f 	and.w	r1, r6, #31
 800956a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800956e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 8009572:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8009576:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800957a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800957e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009582:	ee27 5b07 	vmul.f64	d5, d7, d7
 8009586:	1836      	adds	r6, r6, r0
 8009588:	2300      	movs	r3, #0
 800958a:	eb13 040c 	adds.w	r4, r3, ip
 800958e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 8009592:	eb41 050e 	adc.w	r5, r1, lr
 8009596:	eea7 0b04 	vfma.f64	d0, d7, d4
 800959a:	ec45 4b17 	vmov	d7, r4, r5
 800959e:	eea6 0b05 	vfma.f64	d0, d6, d5
 80095a2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80095a6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80095aa:	e734      	b.n	8009416 <powf+0xe6>
 80095ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80095b0:	e731      	b.n	8009416 <powf+0xe6>
 80095b2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80095f4 <powf+0x2c4>
 80095b6:	e72e      	b.n	8009416 <powf+0xe6>
 80095b8:	9303      	str	r3, [sp, #12]
 80095ba:	eddd 7a03 	vldr	s15, [sp, #12]
 80095be:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80095c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095c6:	e7a1      	b.n	800950c <powf+0x1dc>
 80095c8:	ffd1d571 	.word	0xffd1d571
 80095cc:	405fffff 	.word	0x405fffff
 80095d0:	ffa3aae2 	.word	0xffa3aae2
 80095d4:	405fffff 	.word	0x405fffff
 80095d8:	00000000 	.word	0x00000000
 80095dc:	c062c000 	.word	0xc062c000
 80095e0:	00000000 	.word	0x00000000
 80095e4:	c062a000 	.word	0xc062a000
 80095e8:	080096f0 	.word	0x080096f0
 80095ec:	4b000000 	.word	0x4b000000
 80095f0:	08009818 	.word	0x08009818
 80095f4:	00000000 	.word	0x00000000

080095f8 <with_errnof>:
 80095f8:	b513      	push	{r0, r1, r4, lr}
 80095fa:	4604      	mov	r4, r0
 80095fc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009600:	f7ff fe4a 	bl	8009298 <__errno>
 8009604:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009608:	6004      	str	r4, [r0, #0]
 800960a:	b002      	add	sp, #8
 800960c:	bd10      	pop	{r4, pc}

0800960e <xflowf>:
 800960e:	b130      	cbz	r0, 800961e <xflowf+0x10>
 8009610:	eef1 7a40 	vneg.f32	s15, s0
 8009614:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009618:	2022      	movs	r0, #34	; 0x22
 800961a:	f7ff bfed 	b.w	80095f8 <with_errnof>
 800961e:	eef0 7a40 	vmov.f32	s15, s0
 8009622:	e7f7      	b.n	8009614 <xflowf+0x6>

08009624 <__math_uflowf>:
 8009624:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800962c <__math_uflowf+0x8>
 8009628:	f7ff bff1 	b.w	800960e <xflowf>
 800962c:	10000000 	.word	0x10000000

08009630 <__math_may_uflowf>:
 8009630:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009638 <__math_may_uflowf+0x8>
 8009634:	f7ff bfeb 	b.w	800960e <xflowf>
 8009638:	1a200000 	.word	0x1a200000

0800963c <__math_oflowf>:
 800963c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009644 <__math_oflowf+0x8>
 8009640:	f7ff bfe5 	b.w	800960e <xflowf>
 8009644:	70000000 	.word	0x70000000

08009648 <__math_divzerof>:
 8009648:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800964c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009650:	2800      	cmp	r0, #0
 8009652:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8009656:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8009664 <__math_divzerof+0x1c>
 800965a:	2022      	movs	r0, #34	; 0x22
 800965c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009660:	f7ff bfca 	b.w	80095f8 <with_errnof>
 8009664:	00000000 	.word	0x00000000

08009668 <__math_invalidf>:
 8009668:	eef0 7a40 	vmov.f32	s15, s0
 800966c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009670:	eef4 7a67 	vcmp.f32	s15, s15
 8009674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009678:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800967c:	d602      	bvs.n	8009684 <__math_invalidf+0x1c>
 800967e:	2021      	movs	r0, #33	; 0x21
 8009680:	f7ff bfba 	b.w	80095f8 <with_errnof>
 8009684:	4770      	bx	lr
	...

08009688 <_init>:
 8009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968a:	bf00      	nop
 800968c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968e:	bc08      	pop	{r3}
 8009690:	469e      	mov	lr, r3
 8009692:	4770      	bx	lr

08009694 <_fini>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	bf00      	nop
 8009698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969a:	bc08      	pop	{r3}
 800969c:	469e      	mov	lr, r3
 800969e:	4770      	bx	lr
