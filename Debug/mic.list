
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa08  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800acd8  0800acd8  0001acd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800afa0  0800afa0  0001afa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800afa4  0800afa4  0001afa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  24000000  0800afa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RAM_D3       00002000  2400047c  0800b424  0002047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000063c4  2400247c  0800d424  0002247c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24008840  0800d424  00028840  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002247c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000255b7  00000000  00000000  000224aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ad4  00000000  00000000  00047a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f0  00000000  00000000  0004b538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fc0  00000000  00000000  0004c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032cf9  00000000  00000000  0004d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001867a  00000000  00000000  000802e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151bb0  00000000  00000000  0009895b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000d1  00000000  00000000  001ea50b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004728  00000000  00000000  001ea5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400247c 	.word	0x2400247c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800acc0 	.word	0x0800acc0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24002480 	.word	0x24002480
 800030c:	0800acc0 	.word	0x0800acc0

08000310 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10f      	bne.n	8000344 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <BSP_LED_Init+0xb0>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	e015      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <BSP_LED_Init+0xb0>)
 800034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <BSP_LED_Init+0xb0>)
 800035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	e002      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800036a:	f06f 0301 	mvn.w	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <BSP_LED_Init+0xb4>)
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <BSP_LED_Init+0xb8>)
 800038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038e:	f107 0210 	add.w	r2, r7, #16
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f002 ffe9 	bl	800336c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <BSP_LED_Init+0xb8>)
 800039e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <BSP_LED_Init+0xb4>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	f003 f984 	bl	80036bc <HAL_GPIO_WritePin>

  return ret;
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58024400 	.word	0x58024400
 80003c4:	0800ad10 	.word	0x0800ad10
 80003c8:	24000400 	.word	0x24000400

080003cc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <BSP_LED_On+0x34>)
 80003de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <BSP_LED_On+0x38>)
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	f003 f964 	bl	80036bc <HAL_GPIO_WritePin>
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	24000400 	.word	0x24000400
 8000404:	0800ad10 	.word	0x0800ad10

08000408 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <BSP_LED_Off+0x34>)
 800041a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <BSP_LED_Off+0x38>)
 8000422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000426:	b29b      	uxth	r3, r3
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	f003 f946 	bl	80036bc <HAL_GPIO_WritePin>
  return ret;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	24000400 	.word	0x24000400
 8000440:	0800ad10 	.word	0x0800ad10

08000444 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a06      	ldr	r2, [pc, #24]	; (800046c <HAL_SAI_ErrorCallback+0x28>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d103      	bne.n	800045e <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8000456:	2000      	movs	r0, #0
 8000458:	f000 f80a 	bl	8000470 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 800045c:	e002      	b.n	8000464 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f825 	bl	80004ae <BSP_AUDIO_IN_Error_CallBack>
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40015824 	.word	0x40015824

08000470 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 800048c:	2000      	movs	r0, #0
 800048e:	f000 f804 	bl	800049a <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ca:	2003      	movs	r0, #3
 80004cc:	f000 f95c 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80004d0:	f004 fd98 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 80004d4:	4602      	mov	r2, r0
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <HAL_Init+0x68>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	f003 030f 	and.w	r3, r3, #15
 80004e0:	4913      	ldr	r1, [pc, #76]	; (8000530 <HAL_Init+0x6c>)
 80004e2:	5ccb      	ldrb	r3, [r1, r3]
 80004e4:	f003 031f 	and.w	r3, r3, #31
 80004e8:	fa22 f303 	lsr.w	r3, r2, r3
 80004ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_Init+0x68>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 030f 	and.w	r3, r3, #15
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_Init+0x6c>)
 80004f8:	5cd3      	ldrb	r3, [r2, r3]
 80004fa:	f003 031f 	and.w	r3, r3, #31
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	fa22 f303 	lsr.w	r3, r2, r3
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <HAL_Init+0x70>)
 8000506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <HAL_Init+0x74>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800050e:	2000      	movs	r0, #0
 8000510:	f000 f814 	bl	800053c <HAL_InitTick>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800051a:	2301      	movs	r3, #1
 800051c:	e002      	b.n	8000524 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800051e:	f008 f837 	bl	8008590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	58024400 	.word	0x58024400
 8000530:	0800ad20 	.word	0x0800ad20
 8000534:	24000414 	.word	0x24000414
 8000538:	24000410 	.word	0x24000410

0800053c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_InitTick+0x60>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d101      	bne.n	8000550 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800054c:	2301      	movs	r3, #1
 800054e:	e021      	b.n	8000594 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <HAL_InitTick+0x64>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_InitTick+0x60>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f941 	bl	80007ee <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 f90b 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x68>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2400040c 	.word	0x2400040c
 80005a0:	24000410 	.word	0x24000410
 80005a4:	24000408 	.word	0x24000408

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	2400040c 	.word	0x2400040c
 80005cc:	240024a4 	.word	0x240024a4

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	240024a4 	.word	0x240024a4

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <__NVIC_SetPriorityGrouping+0x40>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	4313      	orrs	r3, r2
 8000614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <__NVIC_SetPriorityGrouping+0x40>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	60d3      	str	r3, [r2, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00
 800062c:	05fa0000 	.word	0x05fa0000

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db0b      	blt.n	8000676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	4907      	ldr	r1, [pc, #28]	; (8000684 <__NVIC_EnableIRQ+0x38>)
 8000666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	2001      	movs	r0, #1
 800066e:	fa00 f202 	lsl.w	r2, r0, r2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	490c      	ldr	r1, [pc, #48]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 80006a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43da      	mvns	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	401a      	ands	r2, r3
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43d9      	mvns	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000768:	f7ff ff8e 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff29 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff40 	bl	8000630 <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff90 	bl	80006dc <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5f 	bl	8000688 <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff33 	bl	800064c <__NVIC_EnableIRQ>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffa4 	bl	8000744 <SysTick_Config>
 80007fc:	4603      	mov	r3, r0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800080c:	f3bf 8f5f 	dmb	sy
}
 8000810:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_MPU_Disable+0x28>)
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	4a06      	ldr	r2, [pc, #24]	; (8000830 <HAL_MPU_Disable+0x28>)
 8000818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800081c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_MPU_Disable+0x2c>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00
 8000834:	e000ed90 	.word	0xe000ed90

08000838 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <HAL_MPU_Enable+0x38>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <HAL_MPU_Enable+0x3c>)
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	4a09      	ldr	r2, [pc, #36]	; (8000874 <HAL_MPU_Enable+0x3c>)
 8000850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000854:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000856:	f3bf 8f4f 	dsb	sy
}
 800085a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085c:	f3bf 8f6f 	isb	sy
}
 8000860:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed90 	.word	0xe000ed90
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	785a      	ldrb	r2, [r3, #1]
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <HAL_MPU_ConfigRegion+0x84>)
 8000886:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d029      	beq.n	80008e4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000890:	4a1a      	ldr	r2, [pc, #104]	; (80008fc <HAL_MPU_ConfigRegion+0x84>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7b1b      	ldrb	r3, [r3, #12]
 800089c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7adb      	ldrb	r3, [r3, #11]
 80008a2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7a9b      	ldrb	r3, [r3, #10]
 80008aa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80008ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7b5b      	ldrb	r3, [r3, #13]
 80008b2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80008b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7b9b      	ldrb	r3, [r3, #14]
 80008ba:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80008bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	7bdb      	ldrb	r3, [r3, #15]
 80008c2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80008c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7a5b      	ldrb	r3, [r3, #9]
 80008ca:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80008cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7a1b      	ldrb	r3, [r3, #8]
 80008d2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80008d4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80008de:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008e0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80008e2:	e005      	b.n	80008f0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_MPU_ConfigRegion+0x84>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <HAL_MPU_ConfigRegion+0x84>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed90 	.word	0xe000ed90

08000900 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d101      	bne.n	8000912 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e054      	b.n	80009bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7f5b      	ldrb	r3, [r3, #29]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d105      	bne.n	8000928 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f007 fe4e 	bl	80085c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2202      	movs	r2, #2
 800092c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10c      	bne.n	8000950 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <HAL_CRC_Init+0xc4>)
 800093c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f022 0218 	bic.w	r2, r2, #24
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	e00c      	b.n	800096a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6899      	ldr	r1, [r3, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	461a      	mov	r2, r3
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f834 	bl	80009c8 <HAL_CRCEx_Polynomial_Set>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e028      	b.n	80009bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	795b      	ldrb	r3, [r3, #5]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d105      	bne.n	800097e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800097a:	611a      	str	r2, [r3, #16]
 800097c:	e004      	b.n	8000988 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	6912      	ldr	r2, [r2, #16]
 8000986:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	695a      	ldr	r2, [r3, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	430a      	orrs	r2, r1
 800099c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	699a      	ldr	r2, [r3, #24]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	430a      	orrs	r2, r1
 80009b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2201      	movs	r2, #1
 80009b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	04c11db7 	.word	0x04c11db7

080009c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80009d8:	231f      	movs	r3, #31
 80009da:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80009dc:	bf00      	nop
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	1e5a      	subs	r2, r3, #1
 80009e2:	613a      	str	r2, [r7, #16]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d009      	beq.n	80009fc <HAL_CRCEx_Polynomial_Set+0x34>
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	f003 031f 	and.w	r3, r3, #31
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	fa22 f303 	lsr.w	r3, r2, r3
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f0      	beq.n	80009de <HAL_CRCEx_Polynomial_Set+0x16>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b18      	cmp	r3, #24
 8000a00:	d846      	bhi.n	8000a90 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a97 	.word	0x08000a97
 8000a0c:	08000a91 	.word	0x08000a91
 8000a10:	08000a91 	.word	0x08000a91
 8000a14:	08000a91 	.word	0x08000a91
 8000a18:	08000a91 	.word	0x08000a91
 8000a1c:	08000a91 	.word	0x08000a91
 8000a20:	08000a91 	.word	0x08000a91
 8000a24:	08000a91 	.word	0x08000a91
 8000a28:	08000a85 	.word	0x08000a85
 8000a2c:	08000a91 	.word	0x08000a91
 8000a30:	08000a91 	.word	0x08000a91
 8000a34:	08000a91 	.word	0x08000a91
 8000a38:	08000a91 	.word	0x08000a91
 8000a3c:	08000a91 	.word	0x08000a91
 8000a40:	08000a91 	.word	0x08000a91
 8000a44:	08000a91 	.word	0x08000a91
 8000a48:	08000a79 	.word	0x08000a79
 8000a4c:	08000a91 	.word	0x08000a91
 8000a50:	08000a91 	.word	0x08000a91
 8000a54:	08000a91 	.word	0x08000a91
 8000a58:	08000a91 	.word	0x08000a91
 8000a5c:	08000a91 	.word	0x08000a91
 8000a60:	08000a91 	.word	0x08000a91
 8000a64:	08000a91 	.word	0x08000a91
 8000a68:	08000a6d 	.word	0x08000a6d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d913      	bls.n	8000a9a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a76:	e010      	b.n	8000a9a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	2b07      	cmp	r3, #7
 8000a7c:	d90f      	bls.n	8000a9e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a82:	e00c      	b.n	8000a9e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	d90b      	bls.n	8000aa2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a8e:	e008      	b.n	8000aa2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	75fb      	strb	r3, [r7, #23]
      break;
 8000a94:	e006      	b.n	8000aa4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a96:	bf00      	nop
 8000a98:	e004      	b.n	8000aa4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a9a:	bf00      	nop
 8000a9c:	e002      	b.n	8000aa4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a9e:	bf00      	nop
 8000aa0:	e000      	b.n	8000aa4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000aa2:	bf00      	nop
  }
  if (status == HAL_OK)
 8000aa4:	7dfb      	ldrb	r3, [r7, #23]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10d      	bne.n	8000ac6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	f023 0118 	bic.w	r1, r3, #24
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	371c      	adds	r7, #28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff fd78 	bl	80005d0 <HAL_GetTick>
 8000ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d101      	bne.n	8000aec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e314      	b.n	8001116 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a66      	ldr	r2, [pc, #408]	; (8000c8c <HAL_DMA_Init+0x1b8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d04a      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a65      	ldr	r2, [pc, #404]	; (8000c90 <HAL_DMA_Init+0x1bc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d045      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a63      	ldr	r2, [pc, #396]	; (8000c94 <HAL_DMA_Init+0x1c0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d040      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a62      	ldr	r2, [pc, #392]	; (8000c98 <HAL_DMA_Init+0x1c4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d03b      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a60      	ldr	r2, [pc, #384]	; (8000c9c <HAL_DMA_Init+0x1c8>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d036      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a5f      	ldr	r2, [pc, #380]	; (8000ca0 <HAL_DMA_Init+0x1cc>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d031      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a5d      	ldr	r2, [pc, #372]	; (8000ca4 <HAL_DMA_Init+0x1d0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d02c      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a5c      	ldr	r2, [pc, #368]	; (8000ca8 <HAL_DMA_Init+0x1d4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d027      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a5a      	ldr	r2, [pc, #360]	; (8000cac <HAL_DMA_Init+0x1d8>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d022      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a59      	ldr	r2, [pc, #356]	; (8000cb0 <HAL_DMA_Init+0x1dc>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d01d      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a57      	ldr	r2, [pc, #348]	; (8000cb4 <HAL_DMA_Init+0x1e0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d018      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a56      	ldr	r2, [pc, #344]	; (8000cb8 <HAL_DMA_Init+0x1e4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d013      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a54      	ldr	r2, [pc, #336]	; (8000cbc <HAL_DMA_Init+0x1e8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d00e      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a53      	ldr	r2, [pc, #332]	; (8000cc0 <HAL_DMA_Init+0x1ec>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d009      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a51      	ldr	r2, [pc, #324]	; (8000cc4 <HAL_DMA_Init+0x1f0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d004      	beq.n	8000b8c <HAL_DMA_Init+0xb8>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a50      	ldr	r2, [pc, #320]	; (8000cc8 <HAL_DMA_Init+0x1f4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d101      	bne.n	8000b90 <HAL_DMA_Init+0xbc>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e000      	b.n	8000b92 <HAL_DMA_Init+0xbe>
 8000b90:	2300      	movs	r3, #0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 813c 	beq.w	8000e10 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a37      	ldr	r2, [pc, #220]	; (8000c8c <HAL_DMA_Init+0x1b8>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d04a      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a36      	ldr	r2, [pc, #216]	; (8000c90 <HAL_DMA_Init+0x1bc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d045      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a34      	ldr	r2, [pc, #208]	; (8000c94 <HAL_DMA_Init+0x1c0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d040      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a33      	ldr	r2, [pc, #204]	; (8000c98 <HAL_DMA_Init+0x1c4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d03b      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <HAL_DMA_Init+0x1c8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d036      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <HAL_DMA_Init+0x1cc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d031      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a2e      	ldr	r2, [pc, #184]	; (8000ca4 <HAL_DMA_Init+0x1d0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d02c      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a2d      	ldr	r2, [pc, #180]	; (8000ca8 <HAL_DMA_Init+0x1d4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d027      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a2b      	ldr	r2, [pc, #172]	; (8000cac <HAL_DMA_Init+0x1d8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d022      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a2a      	ldr	r2, [pc, #168]	; (8000cb0 <HAL_DMA_Init+0x1dc>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d01d      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a28      	ldr	r2, [pc, #160]	; (8000cb4 <HAL_DMA_Init+0x1e0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d018      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <HAL_DMA_Init+0x1e4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d013      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <HAL_DMA_Init+0x1e8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d00e      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a24      	ldr	r2, [pc, #144]	; (8000cc0 <HAL_DMA_Init+0x1ec>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d009      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <HAL_DMA_Init+0x1f0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d004      	beq.n	8000c48 <HAL_DMA_Init+0x174>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <HAL_DMA_Init+0x1f4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d108      	bne.n	8000c5a <HAL_DMA_Init+0x186>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_DMA_Init+0x196>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0201 	bic.w	r2, r2, #1
 8000c68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000c6a:	e02f      	b.n	8000ccc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c6c:	f7ff fcb0 	bl	80005d0 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b05      	cmp	r3, #5
 8000c78:	d928      	bls.n	8000ccc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2203      	movs	r2, #3
 8000c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e244      	b.n	8001116 <HAL_DMA_Init+0x642>
 8000c8c:	40020010 	.word	0x40020010
 8000c90:	40020028 	.word	0x40020028
 8000c94:	40020040 	.word	0x40020040
 8000c98:	40020058 	.word	0x40020058
 8000c9c:	40020070 	.word	0x40020070
 8000ca0:	40020088 	.word	0x40020088
 8000ca4:	400200a0 	.word	0x400200a0
 8000ca8:	400200b8 	.word	0x400200b8
 8000cac:	40020410 	.word	0x40020410
 8000cb0:	40020428 	.word	0x40020428
 8000cb4:	40020440 	.word	0x40020440
 8000cb8:	40020458 	.word	0x40020458
 8000cbc:	40020470 	.word	0x40020470
 8000cc0:	40020488 	.word	0x40020488
 8000cc4:	400204a0 	.word	0x400204a0
 8000cc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1c8      	bne.n	8000c6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4b84      	ldr	r3, [pc, #528]	; (8000ef8 <HAL_DMA_Init+0x424>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000cf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a1b      	ldr	r3, [r3, #32]
 8000d10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d107      	bne.n	8000d30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b28      	cmp	r3, #40	; 0x28
 8000d36:	d903      	bls.n	8000d40 <HAL_DMA_Init+0x26c>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8000d3e:	d91f      	bls.n	8000d80 <HAL_DMA_Init+0x2ac>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b3e      	cmp	r3, #62	; 0x3e
 8000d46:	d903      	bls.n	8000d50 <HAL_DMA_Init+0x27c>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b42      	cmp	r3, #66	; 0x42
 8000d4e:	d917      	bls.n	8000d80 <HAL_DMA_Init+0x2ac>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b46      	cmp	r3, #70	; 0x46
 8000d56:	d903      	bls.n	8000d60 <HAL_DMA_Init+0x28c>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b48      	cmp	r3, #72	; 0x48
 8000d5e:	d90f      	bls.n	8000d80 <HAL_DMA_Init+0x2ac>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b4e      	cmp	r3, #78	; 0x4e
 8000d66:	d903      	bls.n	8000d70 <HAL_DMA_Init+0x29c>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b52      	cmp	r3, #82	; 0x52
 8000d6e:	d907      	bls.n	8000d80 <HAL_DMA_Init+0x2ac>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b73      	cmp	r3, #115	; 0x73
 8000d76:	d905      	bls.n	8000d84 <HAL_DMA_Init+0x2b0>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b77      	cmp	r3, #119	; 0x77
 8000d7e:	d801      	bhi.n	8000d84 <HAL_DMA_Init+0x2b0>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <HAL_DMA_Init+0x2b2>
 8000d84:	2300      	movs	r3, #0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d90:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f023 0307 	bic.w	r3, r3, #7
 8000da8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d117      	bne.n	8000dec <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00e      	beq.n	8000dec <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f002 f82a 	bl	8002e28 <DMA_CheckFifoParam>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d008      	beq.n	8000dec <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2240      	movs	r2, #64	; 0x40
 8000dde:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e194      	b.n	8001116 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f001 ff65 	bl	8002cc4 <DMA_CalcBaseAndBitshift>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e02:	f003 031f 	and.w	r3, r3, #31
 8000e06:	223f      	movs	r2, #63	; 0x3f
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	e0ca      	b.n	8000fa6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a39      	ldr	r2, [pc, #228]	; (8000efc <HAL_DMA_Init+0x428>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d022      	beq.n	8000e60 <HAL_DMA_Init+0x38c>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a38      	ldr	r2, [pc, #224]	; (8000f00 <HAL_DMA_Init+0x42c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d01d      	beq.n	8000e60 <HAL_DMA_Init+0x38c>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a36      	ldr	r2, [pc, #216]	; (8000f04 <HAL_DMA_Init+0x430>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d018      	beq.n	8000e60 <HAL_DMA_Init+0x38c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a35      	ldr	r2, [pc, #212]	; (8000f08 <HAL_DMA_Init+0x434>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d013      	beq.n	8000e60 <HAL_DMA_Init+0x38c>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a33      	ldr	r2, [pc, #204]	; (8000f0c <HAL_DMA_Init+0x438>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00e      	beq.n	8000e60 <HAL_DMA_Init+0x38c>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a32      	ldr	r2, [pc, #200]	; (8000f10 <HAL_DMA_Init+0x43c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d009      	beq.n	8000e60 <HAL_DMA_Init+0x38c>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a30      	ldr	r2, [pc, #192]	; (8000f14 <HAL_DMA_Init+0x440>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d004      	beq.n	8000e60 <HAL_DMA_Init+0x38c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <HAL_DMA_Init+0x444>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d101      	bne.n	8000e64 <HAL_DMA_Init+0x390>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <HAL_DMA_Init+0x392>
 8000e64:	2300      	movs	r3, #0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8094 	beq.w	8000f94 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a22      	ldr	r2, [pc, #136]	; (8000efc <HAL_DMA_Init+0x428>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d021      	beq.n	8000eba <HAL_DMA_Init+0x3e6>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <HAL_DMA_Init+0x42c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d01c      	beq.n	8000eba <HAL_DMA_Init+0x3e6>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <HAL_DMA_Init+0x430>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d017      	beq.n	8000eba <HAL_DMA_Init+0x3e6>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <HAL_DMA_Init+0x434>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d012      	beq.n	8000eba <HAL_DMA_Init+0x3e6>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <HAL_DMA_Init+0x438>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_DMA_Init+0x3e6>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_DMA_Init+0x43c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d008      	beq.n	8000eba <HAL_DMA_Init+0x3e6>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <HAL_DMA_Init+0x440>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d003      	beq.n	8000eba <HAL_DMA_Init+0x3e6>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <HAL_DMA_Init+0x444>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_DMA_Init+0x448>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b40      	cmp	r3, #64	; 0x40
 8000ee2:	d01d      	beq.n	8000f20 <HAL_DMA_Init+0x44c>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b80      	cmp	r3, #128	; 0x80
 8000eea:	d102      	bne.n	8000ef2 <HAL_DMA_Init+0x41e>
 8000eec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ef0:	e017      	b.n	8000f22 <HAL_DMA_Init+0x44e>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e015      	b.n	8000f22 <HAL_DMA_Init+0x44e>
 8000ef6:	bf00      	nop
 8000ef8:	fe10803f 	.word	0xfe10803f
 8000efc:	58025408 	.word	0x58025408
 8000f00:	5802541c 	.word	0x5802541c
 8000f04:	58025430 	.word	0x58025430
 8000f08:	58025444 	.word	0x58025444
 8000f0c:	58025458 	.word	0x58025458
 8000f10:	5802546c 	.word	0x5802546c
 8000f14:	58025480 	.word	0x58025480
 8000f18:	58025494 	.word	0x58025494
 8000f1c:	fffe000f 	.word	0xfffe000f
 8000f20:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68d2      	ldr	r2, [r2, #12]
 8000f26:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000f40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000f48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000f50:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b6e      	ldr	r3, [pc, #440]	; (8001120 <HAL_DMA_Init+0x64c>)
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a6e      	ldr	r2, [pc, #440]	; (8001124 <HAL_DMA_Init+0x650>)
 8000f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	009a      	lsls	r2, r3, #2
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f001 fea3 	bl	8002cc4 <DMA_CalcBaseAndBitshift>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	e008      	b.n	8000fa6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2240      	movs	r2, #64	; 0x40
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e0b7      	b.n	8001116 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <HAL_DMA_Init+0x654>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d072      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a5d      	ldr	r2, [pc, #372]	; (800112c <HAL_DMA_Init+0x658>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d06d      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a5c      	ldr	r2, [pc, #368]	; (8001130 <HAL_DMA_Init+0x65c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d068      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a5a      	ldr	r2, [pc, #360]	; (8001134 <HAL_DMA_Init+0x660>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d063      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a59      	ldr	r2, [pc, #356]	; (8001138 <HAL_DMA_Init+0x664>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d05e      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a57      	ldr	r2, [pc, #348]	; (800113c <HAL_DMA_Init+0x668>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d059      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a56      	ldr	r2, [pc, #344]	; (8001140 <HAL_DMA_Init+0x66c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d054      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a54      	ldr	r2, [pc, #336]	; (8001144 <HAL_DMA_Init+0x670>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d04f      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a53      	ldr	r2, [pc, #332]	; (8001148 <HAL_DMA_Init+0x674>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d04a      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a51      	ldr	r2, [pc, #324]	; (800114c <HAL_DMA_Init+0x678>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d045      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a50      	ldr	r2, [pc, #320]	; (8001150 <HAL_DMA_Init+0x67c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d040      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <HAL_DMA_Init+0x680>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d03b      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <HAL_DMA_Init+0x684>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d036      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a4b      	ldr	r2, [pc, #300]	; (800115c <HAL_DMA_Init+0x688>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d031      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a4a      	ldr	r2, [pc, #296]	; (8001160 <HAL_DMA_Init+0x68c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d02c      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a48      	ldr	r2, [pc, #288]	; (8001164 <HAL_DMA_Init+0x690>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d027      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a47      	ldr	r2, [pc, #284]	; (8001168 <HAL_DMA_Init+0x694>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d022      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a45      	ldr	r2, [pc, #276]	; (800116c <HAL_DMA_Init+0x698>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d01d      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a44      	ldr	r2, [pc, #272]	; (8001170 <HAL_DMA_Init+0x69c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d018      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a42      	ldr	r2, [pc, #264]	; (8001174 <HAL_DMA_Init+0x6a0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a41      	ldr	r2, [pc, #260]	; (8001178 <HAL_DMA_Init+0x6a4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d00e      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a3f      	ldr	r2, [pc, #252]	; (800117c <HAL_DMA_Init+0x6a8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d009      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a3e      	ldr	r2, [pc, #248]	; (8001180 <HAL_DMA_Init+0x6ac>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d004      	beq.n	8001096 <HAL_DMA_Init+0x5c2>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a3c      	ldr	r2, [pc, #240]	; (8001184 <HAL_DMA_Init+0x6b0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_DMA_Init+0x5c6>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_DMA_Init+0x5c8>
 800109a:	2300      	movs	r3, #0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d032      	beq.n	8001106 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f001 ff3d 	bl	8002f20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b80      	cmp	r3, #128	; 0x80
 80010ac:	d102      	bne.n	80010b4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80010c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d010      	beq.n	80010f4 <HAL_DMA_Init+0x620>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d80c      	bhi.n	80010f4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 ffba 	bl	8003054 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	e008      	b.n	8001106 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	a7fdabf8 	.word	0xa7fdabf8
 8001124:	cccccccd 	.word	0xcccccccd
 8001128:	40020010 	.word	0x40020010
 800112c:	40020028 	.word	0x40020028
 8001130:	40020040 	.word	0x40020040
 8001134:	40020058 	.word	0x40020058
 8001138:	40020070 	.word	0x40020070
 800113c:	40020088 	.word	0x40020088
 8001140:	400200a0 	.word	0x400200a0
 8001144:	400200b8 	.word	0x400200b8
 8001148:	40020410 	.word	0x40020410
 800114c:	40020428 	.word	0x40020428
 8001150:	40020440 	.word	0x40020440
 8001154:	40020458 	.word	0x40020458
 8001158:	40020470 	.word	0x40020470
 800115c:	40020488 	.word	0x40020488
 8001160:	400204a0 	.word	0x400204a0
 8001164:	400204b8 	.word	0x400204b8
 8001168:	58025408 	.word	0x58025408
 800116c:	5802541c 	.word	0x5802541c
 8001170:	58025430 	.word	0x58025430
 8001174:	58025444 	.word	0x58025444
 8001178:	58025458 	.word	0x58025458
 800117c:	5802546c 	.word	0x5802546c
 8001180:	58025480 	.word	0x58025480
 8001184:	58025494 	.word	0x58025494

08001188 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e226      	b.n	80015f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_DMA_Start_IT+0x2a>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e21f      	b.n	80015f2 <HAL_DMA_Start_IT+0x46a>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	f040 820a 	bne.w	80015dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2202      	movs	r2, #2
 80011cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a68      	ldr	r2, [pc, #416]	; (800137c <HAL_DMA_Start_IT+0x1f4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d04a      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a66      	ldr	r2, [pc, #408]	; (8001380 <HAL_DMA_Start_IT+0x1f8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d045      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a65      	ldr	r2, [pc, #404]	; (8001384 <HAL_DMA_Start_IT+0x1fc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d040      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a63      	ldr	r2, [pc, #396]	; (8001388 <HAL_DMA_Start_IT+0x200>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d03b      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a62      	ldr	r2, [pc, #392]	; (800138c <HAL_DMA_Start_IT+0x204>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d036      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a60      	ldr	r2, [pc, #384]	; (8001390 <HAL_DMA_Start_IT+0x208>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d031      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a5f      	ldr	r2, [pc, #380]	; (8001394 <HAL_DMA_Start_IT+0x20c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d02c      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a5d      	ldr	r2, [pc, #372]	; (8001398 <HAL_DMA_Start_IT+0x210>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d027      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a5c      	ldr	r2, [pc, #368]	; (800139c <HAL_DMA_Start_IT+0x214>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d022      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a5a      	ldr	r2, [pc, #360]	; (80013a0 <HAL_DMA_Start_IT+0x218>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01d      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a59      	ldr	r2, [pc, #356]	; (80013a4 <HAL_DMA_Start_IT+0x21c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d018      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <HAL_DMA_Start_IT+0x220>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a56      	ldr	r2, [pc, #344]	; (80013ac <HAL_DMA_Start_IT+0x224>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d00e      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a54      	ldr	r2, [pc, #336]	; (80013b0 <HAL_DMA_Start_IT+0x228>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d009      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a53      	ldr	r2, [pc, #332]	; (80013b4 <HAL_DMA_Start_IT+0x22c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d004      	beq.n	8001276 <HAL_DMA_Start_IT+0xee>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a51      	ldr	r2, [pc, #324]	; (80013b8 <HAL_DMA_Start_IT+0x230>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d108      	bne.n	8001288 <HAL_DMA_Start_IT+0x100>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0201 	bic.w	r2, r2, #1
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e007      	b.n	8001298 <HAL_DMA_Start_IT+0x110>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f001 fb64 	bl	800296c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a34      	ldr	r2, [pc, #208]	; (800137c <HAL_DMA_Start_IT+0x1f4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d04a      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a33      	ldr	r2, [pc, #204]	; (8001380 <HAL_DMA_Start_IT+0x1f8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d045      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a31      	ldr	r2, [pc, #196]	; (8001384 <HAL_DMA_Start_IT+0x1fc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d040      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a30      	ldr	r2, [pc, #192]	; (8001388 <HAL_DMA_Start_IT+0x200>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d03b      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a2e      	ldr	r2, [pc, #184]	; (800138c <HAL_DMA_Start_IT+0x204>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d036      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_DMA_Start_IT+0x208>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d031      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a2b      	ldr	r2, [pc, #172]	; (8001394 <HAL_DMA_Start_IT+0x20c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d02c      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a2a      	ldr	r2, [pc, #168]	; (8001398 <HAL_DMA_Start_IT+0x210>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d027      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a28      	ldr	r2, [pc, #160]	; (800139c <HAL_DMA_Start_IT+0x214>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d022      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_DMA_Start_IT+0x218>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d01d      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a25      	ldr	r2, [pc, #148]	; (80013a4 <HAL_DMA_Start_IT+0x21c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d018      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <HAL_DMA_Start_IT+0x220>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d013      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a22      	ldr	r2, [pc, #136]	; (80013ac <HAL_DMA_Start_IT+0x224>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00e      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <HAL_DMA_Start_IT+0x228>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d009      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <HAL_DMA_Start_IT+0x22c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d004      	beq.n	8001344 <HAL_DMA_Start_IT+0x1bc>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <HAL_DMA_Start_IT+0x230>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_DMA_Start_IT+0x1c0>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_DMA_Start_IT+0x1c2>
 8001348:	2300      	movs	r3, #0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d036      	beq.n	80013bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 021e 	bic.w	r2, r3, #30
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0216 	orr.w	r2, r2, #22
 8001360:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d03e      	beq.n	80013e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0208 	orr.w	r2, r2, #8
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e035      	b.n	80013e8 <HAL_DMA_Start_IT+0x260>
 800137c:	40020010 	.word	0x40020010
 8001380:	40020028 	.word	0x40020028
 8001384:	40020040 	.word	0x40020040
 8001388:	40020058 	.word	0x40020058
 800138c:	40020070 	.word	0x40020070
 8001390:	40020088 	.word	0x40020088
 8001394:	400200a0 	.word	0x400200a0
 8001398:	400200b8 	.word	0x400200b8
 800139c:	40020410 	.word	0x40020410
 80013a0:	40020428 	.word	0x40020428
 80013a4:	40020440 	.word	0x40020440
 80013a8:	40020458 	.word	0x40020458
 80013ac:	40020470 	.word	0x40020470
 80013b0:	40020488 	.word	0x40020488
 80013b4:	400204a0 	.word	0x400204a0
 80013b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 020e 	bic.w	r2, r3, #14
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 020a 	orr.w	r2, r2, #10
 80013ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d007      	beq.n	80013e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0204 	orr.w	r2, r2, #4
 80013e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a83      	ldr	r2, [pc, #524]	; (80015fc <HAL_DMA_Start_IT+0x474>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d072      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a82      	ldr	r2, [pc, #520]	; (8001600 <HAL_DMA_Start_IT+0x478>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d06d      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a80      	ldr	r2, [pc, #512]	; (8001604 <HAL_DMA_Start_IT+0x47c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d068      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a7f      	ldr	r2, [pc, #508]	; (8001608 <HAL_DMA_Start_IT+0x480>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d063      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a7d      	ldr	r2, [pc, #500]	; (800160c <HAL_DMA_Start_IT+0x484>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d05e      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a7c      	ldr	r2, [pc, #496]	; (8001610 <HAL_DMA_Start_IT+0x488>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d059      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a7a      	ldr	r2, [pc, #488]	; (8001614 <HAL_DMA_Start_IT+0x48c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d054      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a79      	ldr	r2, [pc, #484]	; (8001618 <HAL_DMA_Start_IT+0x490>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d04f      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a77      	ldr	r2, [pc, #476]	; (800161c <HAL_DMA_Start_IT+0x494>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d04a      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a76      	ldr	r2, [pc, #472]	; (8001620 <HAL_DMA_Start_IT+0x498>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d045      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a74      	ldr	r2, [pc, #464]	; (8001624 <HAL_DMA_Start_IT+0x49c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d040      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a73      	ldr	r2, [pc, #460]	; (8001628 <HAL_DMA_Start_IT+0x4a0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d03b      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a71      	ldr	r2, [pc, #452]	; (800162c <HAL_DMA_Start_IT+0x4a4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d036      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a70      	ldr	r2, [pc, #448]	; (8001630 <HAL_DMA_Start_IT+0x4a8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d031      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_DMA_Start_IT+0x4ac>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d02c      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a6d      	ldr	r2, [pc, #436]	; (8001638 <HAL_DMA_Start_IT+0x4b0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d027      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a6b      	ldr	r2, [pc, #428]	; (800163c <HAL_DMA_Start_IT+0x4b4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d022      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a6a      	ldr	r2, [pc, #424]	; (8001640 <HAL_DMA_Start_IT+0x4b8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d01d      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a68      	ldr	r2, [pc, #416]	; (8001644 <HAL_DMA_Start_IT+0x4bc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d018      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a67      	ldr	r2, [pc, #412]	; (8001648 <HAL_DMA_Start_IT+0x4c0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d013      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a65      	ldr	r2, [pc, #404]	; (800164c <HAL_DMA_Start_IT+0x4c4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00e      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a64      	ldr	r2, [pc, #400]	; (8001650 <HAL_DMA_Start_IT+0x4c8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d009      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a62      	ldr	r2, [pc, #392]	; (8001654 <HAL_DMA_Start_IT+0x4cc>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d004      	beq.n	80014d8 <HAL_DMA_Start_IT+0x350>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a61      	ldr	r2, [pc, #388]	; (8001658 <HAL_DMA_Start_IT+0x4d0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d101      	bne.n	80014dc <HAL_DMA_Start_IT+0x354>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_DMA_Start_IT+0x356>
 80014dc:	2300      	movs	r3, #0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01a      	beq.n	8001518 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001516:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a37      	ldr	r2, [pc, #220]	; (80015fc <HAL_DMA_Start_IT+0x474>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d04a      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a36      	ldr	r2, [pc, #216]	; (8001600 <HAL_DMA_Start_IT+0x478>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d045      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a34      	ldr	r2, [pc, #208]	; (8001604 <HAL_DMA_Start_IT+0x47c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d040      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a33      	ldr	r2, [pc, #204]	; (8001608 <HAL_DMA_Start_IT+0x480>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d03b      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a31      	ldr	r2, [pc, #196]	; (800160c <HAL_DMA_Start_IT+0x484>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d036      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a30      	ldr	r2, [pc, #192]	; (8001610 <HAL_DMA_Start_IT+0x488>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d031      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a2e      	ldr	r2, [pc, #184]	; (8001614 <HAL_DMA_Start_IT+0x48c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d02c      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a2d      	ldr	r2, [pc, #180]	; (8001618 <HAL_DMA_Start_IT+0x490>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d027      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a2b      	ldr	r2, [pc, #172]	; (800161c <HAL_DMA_Start_IT+0x494>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d022      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a2a      	ldr	r2, [pc, #168]	; (8001620 <HAL_DMA_Start_IT+0x498>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d01d      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a28      	ldr	r2, [pc, #160]	; (8001624 <HAL_DMA_Start_IT+0x49c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d018      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a27      	ldr	r2, [pc, #156]	; (8001628 <HAL_DMA_Start_IT+0x4a0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d013      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a25      	ldr	r2, [pc, #148]	; (800162c <HAL_DMA_Start_IT+0x4a4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00e      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a24      	ldr	r2, [pc, #144]	; (8001630 <HAL_DMA_Start_IT+0x4a8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d009      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_DMA_Start_IT+0x4ac>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d004      	beq.n	80015b8 <HAL_DMA_Start_IT+0x430>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_DMA_Start_IT+0x4b0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d108      	bne.n	80015ca <HAL_DMA_Start_IT+0x442>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e012      	b.n	80015f0 <HAL_DMA_Start_IT+0x468>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e009      	b.n	80015f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40020010 	.word	0x40020010
 8001600:	40020028 	.word	0x40020028
 8001604:	40020040 	.word	0x40020040
 8001608:	40020058 	.word	0x40020058
 800160c:	40020070 	.word	0x40020070
 8001610:	40020088 	.word	0x40020088
 8001614:	400200a0 	.word	0x400200a0
 8001618:	400200b8 	.word	0x400200b8
 800161c:	40020410 	.word	0x40020410
 8001620:	40020428 	.word	0x40020428
 8001624:	40020440 	.word	0x40020440
 8001628:	40020458 	.word	0x40020458
 800162c:	40020470 	.word	0x40020470
 8001630:	40020488 	.word	0x40020488
 8001634:	400204a0 	.word	0x400204a0
 8001638:	400204b8 	.word	0x400204b8
 800163c:	58025408 	.word	0x58025408
 8001640:	5802541c 	.word	0x5802541c
 8001644:	58025430 	.word	0x58025430
 8001648:	58025444 	.word	0x58025444
 800164c:	58025458 	.word	0x58025458
 8001650:	5802546c 	.word	0x5802546c
 8001654:	58025480 	.word	0x58025480
 8001658:	58025494 	.word	0x58025494

0800165c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e205      	b.n	8001a7a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d004      	beq.n	8001684 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e1fa      	b.n	8001a7a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a8c      	ldr	r2, [pc, #560]	; (80018bc <HAL_DMA_Abort_IT+0x260>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d04a      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a8b      	ldr	r2, [pc, #556]	; (80018c0 <HAL_DMA_Abort_IT+0x264>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d045      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a89      	ldr	r2, [pc, #548]	; (80018c4 <HAL_DMA_Abort_IT+0x268>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d040      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a88      	ldr	r2, [pc, #544]	; (80018c8 <HAL_DMA_Abort_IT+0x26c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d03b      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a86      	ldr	r2, [pc, #536]	; (80018cc <HAL_DMA_Abort_IT+0x270>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d036      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a85      	ldr	r2, [pc, #532]	; (80018d0 <HAL_DMA_Abort_IT+0x274>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d031      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a83      	ldr	r2, [pc, #524]	; (80018d4 <HAL_DMA_Abort_IT+0x278>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d02c      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a82      	ldr	r2, [pc, #520]	; (80018d8 <HAL_DMA_Abort_IT+0x27c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d027      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a80      	ldr	r2, [pc, #512]	; (80018dc <HAL_DMA_Abort_IT+0x280>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d022      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a7f      	ldr	r2, [pc, #508]	; (80018e0 <HAL_DMA_Abort_IT+0x284>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d01d      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a7d      	ldr	r2, [pc, #500]	; (80018e4 <HAL_DMA_Abort_IT+0x288>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d018      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7c      	ldr	r2, [pc, #496]	; (80018e8 <HAL_DMA_Abort_IT+0x28c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d013      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a7a      	ldr	r2, [pc, #488]	; (80018ec <HAL_DMA_Abort_IT+0x290>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00e      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a79      	ldr	r2, [pc, #484]	; (80018f0 <HAL_DMA_Abort_IT+0x294>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d009      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a77      	ldr	r2, [pc, #476]	; (80018f4 <HAL_DMA_Abort_IT+0x298>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d004      	beq.n	8001724 <HAL_DMA_Abort_IT+0xc8>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a76      	ldr	r2, [pc, #472]	; (80018f8 <HAL_DMA_Abort_IT+0x29c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d101      	bne.n	8001728 <HAL_DMA_Abort_IT+0xcc>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_DMA_Abort_IT+0xce>
 8001728:	2300      	movs	r3, #0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d065      	beq.n	80017fa <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2204      	movs	r2, #4
 8001732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a60      	ldr	r2, [pc, #384]	; (80018bc <HAL_DMA_Abort_IT+0x260>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04a      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a5e      	ldr	r2, [pc, #376]	; (80018c0 <HAL_DMA_Abort_IT+0x264>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d045      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a5d      	ldr	r2, [pc, #372]	; (80018c4 <HAL_DMA_Abort_IT+0x268>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d040      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a5b      	ldr	r2, [pc, #364]	; (80018c8 <HAL_DMA_Abort_IT+0x26c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d03b      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a5a      	ldr	r2, [pc, #360]	; (80018cc <HAL_DMA_Abort_IT+0x270>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d036      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <HAL_DMA_Abort_IT+0x274>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d031      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a57      	ldr	r2, [pc, #348]	; (80018d4 <HAL_DMA_Abort_IT+0x278>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d02c      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a55      	ldr	r2, [pc, #340]	; (80018d8 <HAL_DMA_Abort_IT+0x27c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d027      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a54      	ldr	r2, [pc, #336]	; (80018dc <HAL_DMA_Abort_IT+0x280>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d022      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_DMA_Abort_IT+0x284>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01d      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_DMA_Abort_IT+0x288>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d018      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a4f      	ldr	r2, [pc, #316]	; (80018e8 <HAL_DMA_Abort_IT+0x28c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a4e      	ldr	r2, [pc, #312]	; (80018ec <HAL_DMA_Abort_IT+0x290>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d00e      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a4c      	ldr	r2, [pc, #304]	; (80018f0 <HAL_DMA_Abort_IT+0x294>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d009      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a4b      	ldr	r2, [pc, #300]	; (80018f4 <HAL_DMA_Abort_IT+0x298>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d004      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x17a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <HAL_DMA_Abort_IT+0x29c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d108      	bne.n	80017e8 <HAL_DMA_Abort_IT+0x18c>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e147      	b.n	8001a78 <HAL_DMA_Abort_IT+0x41c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e13e      	b.n	8001a78 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 020e 	bic.w	r2, r2, #14
 8001808:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a2b      	ldr	r2, [pc, #172]	; (80018bc <HAL_DMA_Abort_IT+0x260>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d04a      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <HAL_DMA_Abort_IT+0x264>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d045      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <HAL_DMA_Abort_IT+0x268>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d040      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_DMA_Abort_IT+0x26c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d03b      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a25      	ldr	r2, [pc, #148]	; (80018cc <HAL_DMA_Abort_IT+0x270>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d036      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <HAL_DMA_Abort_IT+0x274>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d031      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_DMA_Abort_IT+0x278>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d02c      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <HAL_DMA_Abort_IT+0x27c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d027      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <HAL_DMA_Abort_IT+0x280>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d022      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <HAL_DMA_Abort_IT+0x284>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01d      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_DMA_Abort_IT+0x288>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d018      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <HAL_DMA_Abort_IT+0x28c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_DMA_Abort_IT+0x290>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00e      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_DMA_Abort_IT+0x294>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d009      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <HAL_DMA_Abort_IT+0x298>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d004      	beq.n	80018aa <HAL_DMA_Abort_IT+0x24e>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_DMA_Abort_IT+0x29c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d128      	bne.n	80018fc <HAL_DMA_Abort_IT+0x2a0>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0201 	bic.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e027      	b.n	800190c <HAL_DMA_Abort_IT+0x2b0>
 80018bc:	40020010 	.word	0x40020010
 80018c0:	40020028 	.word	0x40020028
 80018c4:	40020040 	.word	0x40020040
 80018c8:	40020058 	.word	0x40020058
 80018cc:	40020070 	.word	0x40020070
 80018d0:	40020088 	.word	0x40020088
 80018d4:	400200a0 	.word	0x400200a0
 80018d8:	400200b8 	.word	0x400200b8
 80018dc:	40020410 	.word	0x40020410
 80018e0:	40020428 	.word	0x40020428
 80018e4:	40020440 	.word	0x40020440
 80018e8:	40020458 	.word	0x40020458
 80018ec:	40020470 	.word	0x40020470
 80018f0:	40020488 	.word	0x40020488
 80018f4:	400204a0 	.word	0x400204a0
 80018f8:	400204b8 	.word	0x400204b8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a5c      	ldr	r2, [pc, #368]	; (8001a84 <HAL_DMA_Abort_IT+0x428>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d072      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a5b      	ldr	r2, [pc, #364]	; (8001a88 <HAL_DMA_Abort_IT+0x42c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d06d      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a59      	ldr	r2, [pc, #356]	; (8001a8c <HAL_DMA_Abort_IT+0x430>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d068      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_DMA_Abort_IT+0x434>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d063      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a56      	ldr	r2, [pc, #344]	; (8001a94 <HAL_DMA_Abort_IT+0x438>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d05e      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a55      	ldr	r2, [pc, #340]	; (8001a98 <HAL_DMA_Abort_IT+0x43c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d059      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a53      	ldr	r2, [pc, #332]	; (8001a9c <HAL_DMA_Abort_IT+0x440>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d054      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <HAL_DMA_Abort_IT+0x444>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d04f      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a50      	ldr	r2, [pc, #320]	; (8001aa4 <HAL_DMA_Abort_IT+0x448>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d04a      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a4f      	ldr	r2, [pc, #316]	; (8001aa8 <HAL_DMA_Abort_IT+0x44c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d045      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <HAL_DMA_Abort_IT+0x450>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d040      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a4c      	ldr	r2, [pc, #304]	; (8001ab0 <HAL_DMA_Abort_IT+0x454>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d03b      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_DMA_Abort_IT+0x458>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d036      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_DMA_Abort_IT+0x45c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d031      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a47      	ldr	r2, [pc, #284]	; (8001abc <HAL_DMA_Abort_IT+0x460>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d02c      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a46      	ldr	r2, [pc, #280]	; (8001ac0 <HAL_DMA_Abort_IT+0x464>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d027      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a44      	ldr	r2, [pc, #272]	; (8001ac4 <HAL_DMA_Abort_IT+0x468>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d022      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <HAL_DMA_Abort_IT+0x46c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d01d      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a41      	ldr	r2, [pc, #260]	; (8001acc <HAL_DMA_Abort_IT+0x470>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d018      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a40      	ldr	r2, [pc, #256]	; (8001ad0 <HAL_DMA_Abort_IT+0x474>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a3e      	ldr	r2, [pc, #248]	; (8001ad4 <HAL_DMA_Abort_IT+0x478>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00e      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a3d      	ldr	r2, [pc, #244]	; (8001ad8 <HAL_DMA_Abort_IT+0x47c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d009      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a3b      	ldr	r2, [pc, #236]	; (8001adc <HAL_DMA_Abort_IT+0x480>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d004      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3a0>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a3a      	ldr	r2, [pc, #232]	; (8001ae0 <HAL_DMA_Abort_IT+0x484>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_DMA_Abort_IT+0x3a4>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_DMA_Abort_IT+0x3a6>
 8001a00:	2300      	movs	r3, #0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d028      	beq.n	8001a58 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2201      	movs	r2, #1
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40020010 	.word	0x40020010
 8001a88:	40020028 	.word	0x40020028
 8001a8c:	40020040 	.word	0x40020040
 8001a90:	40020058 	.word	0x40020058
 8001a94:	40020070 	.word	0x40020070
 8001a98:	40020088 	.word	0x40020088
 8001a9c:	400200a0 	.word	0x400200a0
 8001aa0:	400200b8 	.word	0x400200b8
 8001aa4:	40020410 	.word	0x40020410
 8001aa8:	40020428 	.word	0x40020428
 8001aac:	40020440 	.word	0x40020440
 8001ab0:	40020458 	.word	0x40020458
 8001ab4:	40020470 	.word	0x40020470
 8001ab8:	40020488 	.word	0x40020488
 8001abc:	400204a0 	.word	0x400204a0
 8001ac0:	400204b8 	.word	0x400204b8
 8001ac4:	58025408 	.word	0x58025408
 8001ac8:	5802541c 	.word	0x5802541c
 8001acc:	58025430 	.word	0x58025430
 8001ad0:	58025444 	.word	0x58025444
 8001ad4:	58025458 	.word	0x58025458
 8001ad8:	5802546c 	.word	0x5802546c
 8001adc:	58025480 	.word	0x58025480
 8001ae0:	58025494 	.word	0x58025494

08001ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001af0:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_DMA_IRQHandler+0x1ac>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a67      	ldr	r2, [pc, #412]	; (8001c94 <HAL_DMA_IRQHandler+0x1b0>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0a9b      	lsrs	r3, r3, #10
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a5f      	ldr	r2, [pc, #380]	; (8001c98 <HAL_DMA_IRQHandler+0x1b4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04a      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a5d      	ldr	r2, [pc, #372]	; (8001c9c <HAL_DMA_IRQHandler+0x1b8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d045      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ca0 <HAL_DMA_IRQHandler+0x1bc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d040      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a5a      	ldr	r2, [pc, #360]	; (8001ca4 <HAL_DMA_IRQHandler+0x1c0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d03b      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a59      	ldr	r2, [pc, #356]	; (8001ca8 <HAL_DMA_IRQHandler+0x1c4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d036      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a57      	ldr	r2, [pc, #348]	; (8001cac <HAL_DMA_IRQHandler+0x1c8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d031      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a56      	ldr	r2, [pc, #344]	; (8001cb0 <HAL_DMA_IRQHandler+0x1cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d02c      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a54      	ldr	r2, [pc, #336]	; (8001cb4 <HAL_DMA_IRQHandler+0x1d0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d027      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a53      	ldr	r2, [pc, #332]	; (8001cb8 <HAL_DMA_IRQHandler+0x1d4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d022      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a51      	ldr	r2, [pc, #324]	; (8001cbc <HAL_DMA_IRQHandler+0x1d8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01d      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <HAL_DMA_IRQHandler+0x1dc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d018      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a4e      	ldr	r2, [pc, #312]	; (8001cc4 <HAL_DMA_IRQHandler+0x1e0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <HAL_DMA_IRQHandler+0x1e4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <HAL_DMA_IRQHandler+0x1e8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d009      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a4a      	ldr	r2, [pc, #296]	; (8001cd0 <HAL_DMA_IRQHandler+0x1ec>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xd2>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_DMA_IRQHandler+0x1f0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_DMA_IRQHandler+0xd6>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_DMA_IRQHandler+0xd8>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 842b 	beq.w	8002418 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	2208      	movs	r2, #8
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80a2 	beq.w	8001d1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2e      	ldr	r2, [pc, #184]	; (8001c98 <HAL_DMA_IRQHandler+0x1b4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d04a      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <HAL_DMA_IRQHandler+0x1b8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d045      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <HAL_DMA_IRQHandler+0x1bc>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d040      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <HAL_DMA_IRQHandler+0x1c0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d03b      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_DMA_IRQHandler+0x1c4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d036      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a27      	ldr	r2, [pc, #156]	; (8001cac <HAL_DMA_IRQHandler+0x1c8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d031      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <HAL_DMA_IRQHandler+0x1cc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d02c      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <HAL_DMA_IRQHandler+0x1d0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d027      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <HAL_DMA_IRQHandler+0x1d4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d022      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <HAL_DMA_IRQHandler+0x1d8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d01d      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_DMA_IRQHandler+0x1dc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d018      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <HAL_DMA_IRQHandler+0x1e0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d013      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_DMA_IRQHandler+0x1e4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00e      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <HAL_DMA_IRQHandler+0x1e8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d009      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_DMA_IRQHandler+0x1ec>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d004      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x194>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <HAL_DMA_IRQHandler+0x1f0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d12f      	bne.n	8001cd8 <HAL_DMA_IRQHandler+0x1f4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bf14      	ite	ne
 8001c86:	2301      	movne	r3, #1
 8001c88:	2300      	moveq	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	e02e      	b.n	8001cec <HAL_DMA_IRQHandler+0x208>
 8001c8e:	bf00      	nop
 8001c90:	24000410 	.word	0x24000410
 8001c94:	1b4e81b5 	.word	0x1b4e81b5
 8001c98:	40020010 	.word	0x40020010
 8001c9c:	40020028 	.word	0x40020028
 8001ca0:	40020040 	.word	0x40020040
 8001ca4:	40020058 	.word	0x40020058
 8001ca8:	40020070 	.word	0x40020070
 8001cac:	40020088 	.word	0x40020088
 8001cb0:	400200a0 	.word	0x400200a0
 8001cb4:	400200b8 	.word	0x400200b8
 8001cb8:	40020410 	.word	0x40020410
 8001cbc:	40020428 	.word	0x40020428
 8001cc0:	40020440 	.word	0x40020440
 8001cc4:	40020458 	.word	0x40020458
 8001cc8:	40020470 	.word	0x40020470
 8001ccc:	40020488 	.word	0x40020488
 8001cd0:	400204a0 	.word	0x400204a0
 8001cd4:	400204b8 	.word	0x400204b8
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf14      	ite	ne
 8001ce6:	2301      	movne	r3, #1
 8001ce8:	2300      	moveq	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d015      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0204 	bic.w	r2, r2, #4
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2208      	movs	r2, #8
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06e      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a69      	ldr	r2, [pc, #420]	; (8001edc <HAL_DMA_IRQHandler+0x3f8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d04a      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a67      	ldr	r2, [pc, #412]	; (8001ee0 <HAL_DMA_IRQHandler+0x3fc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d045      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a66      	ldr	r2, [pc, #408]	; (8001ee4 <HAL_DMA_IRQHandler+0x400>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d040      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a64      	ldr	r2, [pc, #400]	; (8001ee8 <HAL_DMA_IRQHandler+0x404>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d03b      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a63      	ldr	r2, [pc, #396]	; (8001eec <HAL_DMA_IRQHandler+0x408>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d036      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a61      	ldr	r2, [pc, #388]	; (8001ef0 <HAL_DMA_IRQHandler+0x40c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d031      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a60      	ldr	r2, [pc, #384]	; (8001ef4 <HAL_DMA_IRQHandler+0x410>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d02c      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a5e      	ldr	r2, [pc, #376]	; (8001ef8 <HAL_DMA_IRQHandler+0x414>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d027      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a5d      	ldr	r2, [pc, #372]	; (8001efc <HAL_DMA_IRQHandler+0x418>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d022      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a5b      	ldr	r2, [pc, #364]	; (8001f00 <HAL_DMA_IRQHandler+0x41c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01d      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a5a      	ldr	r2, [pc, #360]	; (8001f04 <HAL_DMA_IRQHandler+0x420>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d018      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <HAL_DMA_IRQHandler+0x424>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a57      	ldr	r2, [pc, #348]	; (8001f0c <HAL_DMA_IRQHandler+0x428>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00e      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a55      	ldr	r2, [pc, #340]	; (8001f10 <HAL_DMA_IRQHandler+0x42c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d009      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a54      	ldr	r2, [pc, #336]	; (8001f14 <HAL_DMA_IRQHandler+0x430>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d004      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x2ee>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	; (8001f18 <HAL_DMA_IRQHandler+0x434>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10a      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x304>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e003      	b.n	8001df0 <HAL_DMA_IRQHandler+0x30c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2300      	movs	r3, #0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00d      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e08:	f043 0202 	orr.w	r2, r3, #2
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2204      	movs	r2, #4
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 808f 	beq.w	8001f44 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <HAL_DMA_IRQHandler+0x3f8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <HAL_DMA_IRQHandler+0x3fc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <HAL_DMA_IRQHandler+0x400>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a27      	ldr	r2, [pc, #156]	; (8001ee8 <HAL_DMA_IRQHandler+0x404>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a26      	ldr	r2, [pc, #152]	; (8001eec <HAL_DMA_IRQHandler+0x408>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <HAL_DMA_IRQHandler+0x40c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <HAL_DMA_IRQHandler+0x410>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <HAL_DMA_IRQHandler+0x414>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a20      	ldr	r2, [pc, #128]	; (8001efc <HAL_DMA_IRQHandler+0x418>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <HAL_DMA_IRQHandler+0x41c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_DMA_IRQHandler+0x420>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_DMA_IRQHandler+0x424>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_DMA_IRQHandler+0x428>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_DMA_IRQHandler+0x42c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <HAL_DMA_IRQHandler+0x430>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x3e2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a15      	ldr	r2, [pc, #84]	; (8001f18 <HAL_DMA_IRQHandler+0x434>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12a      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x438>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e023      	b.n	8001f24 <HAL_DMA_IRQHandler+0x440>
 8001edc:	40020010 	.word	0x40020010
 8001ee0:	40020028 	.word	0x40020028
 8001ee4:	40020040 	.word	0x40020040
 8001ee8:	40020058 	.word	0x40020058
 8001eec:	40020070 	.word	0x40020070
 8001ef0:	40020088 	.word	0x40020088
 8001ef4:	400200a0 	.word	0x400200a0
 8001ef8:	400200b8 	.word	0x400200b8
 8001efc:	40020410 	.word	0x40020410
 8001f00:	40020428 	.word	0x40020428
 8001f04:	40020440 	.word	0x40020440
 8001f08:	40020458 	.word	0x40020458
 8001f0c:	40020470 	.word	0x40020470
 8001f10:	40020488 	.word	0x40020488
 8001f14:	400204a0 	.word	0x400204a0
 8001f18:	400204b8 	.word	0x400204b8
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00d      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	2204      	movs	r2, #4
 8001f32:	409a      	lsls	r2, r3
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0204 	orr.w	r2, r3, #4
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a6 	beq.w	80020a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a85      	ldr	r2, [pc, #532]	; (8002174 <HAL_DMA_IRQHandler+0x690>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04a      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a83      	ldr	r2, [pc, #524]	; (8002178 <HAL_DMA_IRQHandler+0x694>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d045      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a82      	ldr	r2, [pc, #520]	; (800217c <HAL_DMA_IRQHandler+0x698>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d040      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a80      	ldr	r2, [pc, #512]	; (8002180 <HAL_DMA_IRQHandler+0x69c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d03b      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7f      	ldr	r2, [pc, #508]	; (8002184 <HAL_DMA_IRQHandler+0x6a0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d036      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a7d      	ldr	r2, [pc, #500]	; (8002188 <HAL_DMA_IRQHandler+0x6a4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d031      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7c      	ldr	r2, [pc, #496]	; (800218c <HAL_DMA_IRQHandler+0x6a8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d02c      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a7a      	ldr	r2, [pc, #488]	; (8002190 <HAL_DMA_IRQHandler+0x6ac>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d027      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a79      	ldr	r2, [pc, #484]	; (8002194 <HAL_DMA_IRQHandler+0x6b0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a77      	ldr	r2, [pc, #476]	; (8002198 <HAL_DMA_IRQHandler+0x6b4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01d      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a76      	ldr	r2, [pc, #472]	; (800219c <HAL_DMA_IRQHandler+0x6b8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d018      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a74      	ldr	r2, [pc, #464]	; (80021a0 <HAL_DMA_IRQHandler+0x6bc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a73      	ldr	r2, [pc, #460]	; (80021a4 <HAL_DMA_IRQHandler+0x6c0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00e      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a71      	ldr	r2, [pc, #452]	; (80021a8 <HAL_DMA_IRQHandler+0x6c4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a70      	ldr	r2, [pc, #448]	; (80021ac <HAL_DMA_IRQHandler+0x6c8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d004      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x516>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <HAL_DMA_IRQHandler+0x6cc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10a      	bne.n	8002010 <HAL_DMA_IRQHandler+0x52c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e009      	b.n	8002024 <HAL_DMA_IRQHandler+0x540>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d03e      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2210      	movs	r2, #16
 8002032:	409a      	lsls	r2, r3
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d018      	beq.n	8002078 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d108      	bne.n	8002066 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d024      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e01f      	b.n	80020a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206a:	2b00      	cmp	r3, #0
 800206c:	d01b      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e016      	b.n	80020a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d107      	bne.n	8002096 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0208 	bic.w	r2, r2, #8
 8002094:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2220      	movs	r2, #32
 80020b0:	409a      	lsls	r2, r3
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8110 	beq.w	80022dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2c      	ldr	r2, [pc, #176]	; (8002174 <HAL_DMA_IRQHandler+0x690>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d04a      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <HAL_DMA_IRQHandler+0x694>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d045      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a29      	ldr	r2, [pc, #164]	; (800217c <HAL_DMA_IRQHandler+0x698>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d040      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a28      	ldr	r2, [pc, #160]	; (8002180 <HAL_DMA_IRQHandler+0x69c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d03b      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_DMA_IRQHandler+0x6a0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d036      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a25      	ldr	r2, [pc, #148]	; (8002188 <HAL_DMA_IRQHandler+0x6a4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d031      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a23      	ldr	r2, [pc, #140]	; (800218c <HAL_DMA_IRQHandler+0x6a8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d02c      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <HAL_DMA_IRQHandler+0x6ac>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d027      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a20      	ldr	r2, [pc, #128]	; (8002194 <HAL_DMA_IRQHandler+0x6b0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d022      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_DMA_IRQHandler+0x6b4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d01d      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_DMA_IRQHandler+0x6b8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d018      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <HAL_DMA_IRQHandler+0x6bc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_DMA_IRQHandler+0x6c0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00e      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <HAL_DMA_IRQHandler+0x6c4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d009      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_DMA_IRQHandler+0x6c8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d004      	beq.n	800215c <HAL_DMA_IRQHandler+0x678>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_DMA_IRQHandler+0x6cc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d12b      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x6d0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	e02a      	b.n	80021c8 <HAL_DMA_IRQHandler+0x6e4>
 8002172:	bf00      	nop
 8002174:	40020010 	.word	0x40020010
 8002178:	40020028 	.word	0x40020028
 800217c:	40020040 	.word	0x40020040
 8002180:	40020058 	.word	0x40020058
 8002184:	40020070 	.word	0x40020070
 8002188:	40020088 	.word	0x40020088
 800218c:	400200a0 	.word	0x400200a0
 8002190:	400200b8 	.word	0x400200b8
 8002194:	40020410 	.word	0x40020410
 8002198:	40020428 	.word	0x40020428
 800219c:	40020440 	.word	0x40020440
 80021a0:	40020458 	.word	0x40020458
 80021a4:	40020470 	.word	0x40020470
 80021a8:	40020488 	.word	0x40020488
 80021ac:	400204a0 	.word	0x400204a0
 80021b0:	400204b8 	.word	0x400204b8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8087 	beq.w	80022dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2220      	movs	r2, #32
 80021d8:	409a      	lsls	r2, r3
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d139      	bne.n	800225e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0216 	bic.w	r2, r2, #22
 80021f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002208:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d103      	bne.n	800221a <HAL_DMA_IRQHandler+0x736>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0208 	bic.w	r2, r2, #8
 8002228:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	223f      	movs	r2, #63	; 0x3f
 8002234:	409a      	lsls	r2, r3
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 834a 	beq.w	80028e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
          }
          return;
 800225c:	e344      	b.n	80028e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d018      	beq.n	800229e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d108      	bne.n	800228c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	2b00      	cmp	r3, #0
 8002280:	d02c      	beq.n	80022dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
 800228a:	e027      	b.n	80022dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d023      	beq.n	80022dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
 800229c:	e01e      	b.n	80022dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10f      	bne.n	80022cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0210 	bic.w	r2, r2, #16
 80022ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8306 	beq.w	80028f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8088 	beq.w	8002404 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2204      	movs	r2, #4
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a7a      	ldr	r2, [pc, #488]	; (80024ec <HAL_DMA_IRQHandler+0xa08>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d04a      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a79      	ldr	r2, [pc, #484]	; (80024f0 <HAL_DMA_IRQHandler+0xa0c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d045      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a77      	ldr	r2, [pc, #476]	; (80024f4 <HAL_DMA_IRQHandler+0xa10>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d040      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a76      	ldr	r2, [pc, #472]	; (80024f8 <HAL_DMA_IRQHandler+0xa14>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d03b      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a74      	ldr	r2, [pc, #464]	; (80024fc <HAL_DMA_IRQHandler+0xa18>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d036      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a73      	ldr	r2, [pc, #460]	; (8002500 <HAL_DMA_IRQHandler+0xa1c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d031      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a71      	ldr	r2, [pc, #452]	; (8002504 <HAL_DMA_IRQHandler+0xa20>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02c      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a70      	ldr	r2, [pc, #448]	; (8002508 <HAL_DMA_IRQHandler+0xa24>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d027      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6e      	ldr	r2, [pc, #440]	; (800250c <HAL_DMA_IRQHandler+0xa28>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d022      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6d      	ldr	r2, [pc, #436]	; (8002510 <HAL_DMA_IRQHandler+0xa2c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d01d      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a6b      	ldr	r2, [pc, #428]	; (8002514 <HAL_DMA_IRQHandler+0xa30>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d018      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6a      	ldr	r2, [pc, #424]	; (8002518 <HAL_DMA_IRQHandler+0xa34>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a68      	ldr	r2, [pc, #416]	; (800251c <HAL_DMA_IRQHandler+0xa38>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00e      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a67      	ldr	r2, [pc, #412]	; (8002520 <HAL_DMA_IRQHandler+0xa3c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a65      	ldr	r2, [pc, #404]	; (8002524 <HAL_DMA_IRQHandler+0xa40>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_DMA_IRQHandler+0x8b8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a64      	ldr	r2, [pc, #400]	; (8002528 <HAL_DMA_IRQHandler+0xa44>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d108      	bne.n	80023ae <HAL_DMA_IRQHandler+0x8ca>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e007      	b.n	80023be <HAL_DMA_IRQHandler+0x8da>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3301      	adds	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d307      	bcc.n	80023da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f2      	bne.n	80023be <HAL_DMA_IRQHandler+0x8da>
 80023d8:	e000      	b.n	80023dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80023da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2203      	movs	r2, #3
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80023f2:	e003      	b.n	80023fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 8272 	beq.w	80028f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
 8002416:	e26c      	b.n	80028f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a43      	ldr	r2, [pc, #268]	; (800252c <HAL_DMA_IRQHandler+0xa48>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d022      	beq.n	8002468 <HAL_DMA_IRQHandler+0x984>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a42      	ldr	r2, [pc, #264]	; (8002530 <HAL_DMA_IRQHandler+0xa4c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d01d      	beq.n	8002468 <HAL_DMA_IRQHandler+0x984>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a40      	ldr	r2, [pc, #256]	; (8002534 <HAL_DMA_IRQHandler+0xa50>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d018      	beq.n	8002468 <HAL_DMA_IRQHandler+0x984>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a3f      	ldr	r2, [pc, #252]	; (8002538 <HAL_DMA_IRQHandler+0xa54>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d013      	beq.n	8002468 <HAL_DMA_IRQHandler+0x984>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3d      	ldr	r2, [pc, #244]	; (800253c <HAL_DMA_IRQHandler+0xa58>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00e      	beq.n	8002468 <HAL_DMA_IRQHandler+0x984>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a3c      	ldr	r2, [pc, #240]	; (8002540 <HAL_DMA_IRQHandler+0xa5c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_DMA_IRQHandler+0x984>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a3a      	ldr	r2, [pc, #232]	; (8002544 <HAL_DMA_IRQHandler+0xa60>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_DMA_IRQHandler+0x984>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a39      	ldr	r2, [pc, #228]	; (8002548 <HAL_DMA_IRQHandler+0xa64>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_DMA_IRQHandler+0x988>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_DMA_IRQHandler+0x98a>
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 823f 	beq.w	80028f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	2204      	movs	r2, #4
 8002486:	409a      	lsls	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80cd 	beq.w	800262c <HAL_DMA_IRQHandler+0xb48>
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80c7 	beq.w	800262c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2204      	movs	r2, #4
 80024a8:	409a      	lsls	r2, r3
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d049      	beq.n	800254c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8210 	beq.w	80028ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024d4:	e20a      	b.n	80028ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8206 	beq.w	80028ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024e8:	e200      	b.n	80028ec <HAL_DMA_IRQHandler+0xe08>
 80024ea:	bf00      	nop
 80024ec:	40020010 	.word	0x40020010
 80024f0:	40020028 	.word	0x40020028
 80024f4:	40020040 	.word	0x40020040
 80024f8:	40020058 	.word	0x40020058
 80024fc:	40020070 	.word	0x40020070
 8002500:	40020088 	.word	0x40020088
 8002504:	400200a0 	.word	0x400200a0
 8002508:	400200b8 	.word	0x400200b8
 800250c:	40020410 	.word	0x40020410
 8002510:	40020428 	.word	0x40020428
 8002514:	40020440 	.word	0x40020440
 8002518:	40020458 	.word	0x40020458
 800251c:	40020470 	.word	0x40020470
 8002520:	40020488 	.word	0x40020488
 8002524:	400204a0 	.word	0x400204a0
 8002528:	400204b8 	.word	0x400204b8
 800252c:	58025408 	.word	0x58025408
 8002530:	5802541c 	.word	0x5802541c
 8002534:	58025430 	.word	0x58025430
 8002538:	58025444 	.word	0x58025444
 800253c:	58025458 	.word	0x58025458
 8002540:	5802546c 	.word	0x5802546c
 8002544:	58025480 	.word	0x58025480
 8002548:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d160      	bne.n	8002618 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a8c      	ldr	r2, [pc, #560]	; (800278c <HAL_DMA_IRQHandler+0xca8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d04a      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a8a      	ldr	r2, [pc, #552]	; (8002790 <HAL_DMA_IRQHandler+0xcac>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d045      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a89      	ldr	r2, [pc, #548]	; (8002794 <HAL_DMA_IRQHandler+0xcb0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d040      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a87      	ldr	r2, [pc, #540]	; (8002798 <HAL_DMA_IRQHandler+0xcb4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d03b      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a86      	ldr	r2, [pc, #536]	; (800279c <HAL_DMA_IRQHandler+0xcb8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d036      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a84      	ldr	r2, [pc, #528]	; (80027a0 <HAL_DMA_IRQHandler+0xcbc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d031      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a83      	ldr	r2, [pc, #524]	; (80027a4 <HAL_DMA_IRQHandler+0xcc0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d02c      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a81      	ldr	r2, [pc, #516]	; (80027a8 <HAL_DMA_IRQHandler+0xcc4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d027      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a80      	ldr	r2, [pc, #512]	; (80027ac <HAL_DMA_IRQHandler+0xcc8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d022      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a7e      	ldr	r2, [pc, #504]	; (80027b0 <HAL_DMA_IRQHandler+0xccc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01d      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a7d      	ldr	r2, [pc, #500]	; (80027b4 <HAL_DMA_IRQHandler+0xcd0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d018      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a7b      	ldr	r2, [pc, #492]	; (80027b8 <HAL_DMA_IRQHandler+0xcd4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a7a      	ldr	r2, [pc, #488]	; (80027bc <HAL_DMA_IRQHandler+0xcd8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00e      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a78      	ldr	r2, [pc, #480]	; (80027c0 <HAL_DMA_IRQHandler+0xcdc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <HAL_DMA_IRQHandler+0xce0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xb12>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a75      	ldr	r2, [pc, #468]	; (80027c8 <HAL_DMA_IRQHandler+0xce4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d108      	bne.n	8002608 <HAL_DMA_IRQHandler+0xb24>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0208 	bic.w	r2, r2, #8
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e007      	b.n	8002618 <HAL_DMA_IRQHandler+0xb34>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0204 	bic.w	r2, r2, #4
 8002616:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8165 	beq.w	80028ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800262a:	e15f      	b.n	80028ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2202      	movs	r2, #2
 8002636:	409a      	lsls	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80c5 	beq.w	80027cc <HAL_DMA_IRQHandler+0xce8>
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80bf 	beq.w	80027cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2202      	movs	r2, #2
 8002658:	409a      	lsls	r2, r3
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 813a 	beq.w	80028f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002684:	e134      	b.n	80028f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8130 	beq.w	80028f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002698:	e12a      	b.n	80028f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d168      	bne.n	8002776 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a38      	ldr	r2, [pc, #224]	; (800278c <HAL_DMA_IRQHandler+0xca8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d04a      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a37      	ldr	r2, [pc, #220]	; (8002790 <HAL_DMA_IRQHandler+0xcac>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d045      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a35      	ldr	r2, [pc, #212]	; (8002794 <HAL_DMA_IRQHandler+0xcb0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d040      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a34      	ldr	r2, [pc, #208]	; (8002798 <HAL_DMA_IRQHandler+0xcb4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d03b      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a32      	ldr	r2, [pc, #200]	; (800279c <HAL_DMA_IRQHandler+0xcb8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d036      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a31      	ldr	r2, [pc, #196]	; (80027a0 <HAL_DMA_IRQHandler+0xcbc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d031      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2f      	ldr	r2, [pc, #188]	; (80027a4 <HAL_DMA_IRQHandler+0xcc0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d02c      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2e      	ldr	r2, [pc, #184]	; (80027a8 <HAL_DMA_IRQHandler+0xcc4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d027      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <HAL_DMA_IRQHandler+0xcc8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d022      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <HAL_DMA_IRQHandler+0xccc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d01d      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <HAL_DMA_IRQHandler+0xcd0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d018      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <HAL_DMA_IRQHandler+0xcd4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d013      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a26      	ldr	r2, [pc, #152]	; (80027bc <HAL_DMA_IRQHandler+0xcd8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00e      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <HAL_DMA_IRQHandler+0xcdc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d009      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a23      	ldr	r2, [pc, #140]	; (80027c4 <HAL_DMA_IRQHandler+0xce0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d004      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc60>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <HAL_DMA_IRQHandler+0xce4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d108      	bne.n	8002756 <HAL_DMA_IRQHandler+0xc72>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0214 	bic.w	r2, r2, #20
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	e007      	b.n	8002766 <HAL_DMA_IRQHandler+0xc82>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 020a 	bic.w	r2, r2, #10
 8002764:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80b8 	beq.w	80028f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002788:	e0b2      	b.n	80028f0 <HAL_DMA_IRQHandler+0xe0c>
 800278a:	bf00      	nop
 800278c:	40020010 	.word	0x40020010
 8002790:	40020028 	.word	0x40020028
 8002794:	40020040 	.word	0x40020040
 8002798:	40020058 	.word	0x40020058
 800279c:	40020070 	.word	0x40020070
 80027a0:	40020088 	.word	0x40020088
 80027a4:	400200a0 	.word	0x400200a0
 80027a8:	400200b8 	.word	0x400200b8
 80027ac:	40020410 	.word	0x40020410
 80027b0:	40020428 	.word	0x40020428
 80027b4:	40020440 	.word	0x40020440
 80027b8:	40020458 	.word	0x40020458
 80027bc:	40020470 	.word	0x40020470
 80027c0:	40020488 	.word	0x40020488
 80027c4:	400204a0 	.word	0x400204a0
 80027c8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	2208      	movs	r2, #8
 80027d6:	409a      	lsls	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8088 	beq.w	80028f2 <HAL_DMA_IRQHandler+0xe0e>
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8082 	beq.w	80028f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a41      	ldr	r2, [pc, #260]	; (80028f8 <HAL_DMA_IRQHandler+0xe14>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d04a      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a3f      	ldr	r2, [pc, #252]	; (80028fc <HAL_DMA_IRQHandler+0xe18>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d045      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a3e      	ldr	r2, [pc, #248]	; (8002900 <HAL_DMA_IRQHandler+0xe1c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d040      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a3c      	ldr	r2, [pc, #240]	; (8002904 <HAL_DMA_IRQHandler+0xe20>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d03b      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a3b      	ldr	r2, [pc, #236]	; (8002908 <HAL_DMA_IRQHandler+0xe24>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d036      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a39      	ldr	r2, [pc, #228]	; (800290c <HAL_DMA_IRQHandler+0xe28>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d031      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a38      	ldr	r2, [pc, #224]	; (8002910 <HAL_DMA_IRQHandler+0xe2c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d02c      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a36      	ldr	r2, [pc, #216]	; (8002914 <HAL_DMA_IRQHandler+0xe30>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d027      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a35      	ldr	r2, [pc, #212]	; (8002918 <HAL_DMA_IRQHandler+0xe34>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d022      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a33      	ldr	r2, [pc, #204]	; (800291c <HAL_DMA_IRQHandler+0xe38>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01d      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a32      	ldr	r2, [pc, #200]	; (8002920 <HAL_DMA_IRQHandler+0xe3c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d018      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a30      	ldr	r2, [pc, #192]	; (8002924 <HAL_DMA_IRQHandler+0xe40>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2f      	ldr	r2, [pc, #188]	; (8002928 <HAL_DMA_IRQHandler+0xe44>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00e      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a2d      	ldr	r2, [pc, #180]	; (800292c <HAL_DMA_IRQHandler+0xe48>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <HAL_DMA_IRQHandler+0xe4c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_DMA_IRQHandler+0xdaa>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2a      	ldr	r2, [pc, #168]	; (8002934 <HAL_DMA_IRQHandler+0xe50>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d108      	bne.n	80028a0 <HAL_DMA_IRQHandler+0xdbc>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 021c 	bic.w	r2, r2, #28
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e007      	b.n	80028b0 <HAL_DMA_IRQHandler+0xdcc>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 020e 	bic.w	r2, r2, #14
 80028ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	2201      	movs	r2, #1
 80028ba:	409a      	lsls	r2, r3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
 80028e6:	e004      	b.n	80028f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80028e8:	bf00      	nop
 80028ea:	e002      	b.n	80028f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028ec:	bf00      	nop
 80028ee:	e000      	b.n	80028f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40020010 	.word	0x40020010
 80028fc:	40020028 	.word	0x40020028
 8002900:	40020040 	.word	0x40020040
 8002904:	40020058 	.word	0x40020058
 8002908:	40020070 	.word	0x40020070
 800290c:	40020088 	.word	0x40020088
 8002910:	400200a0 	.word	0x400200a0
 8002914:	400200b8 	.word	0x400200b8
 8002918:	40020410 	.word	0x40020410
 800291c:	40020428 	.word	0x40020428
 8002920:	40020440 	.word	0x40020440
 8002924:	40020458 	.word	0x40020458
 8002928:	40020470 	.word	0x40020470
 800292c:	40020488 	.word	0x40020488
 8002930:	400204a0 	.word	0x400204a0
 8002934:	400204b8 	.word	0x400204b8

08002938 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002946:	b2db      	uxtb	r3, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a84      	ldr	r2, [pc, #528]	; (8002b9c <DMA_SetConfig+0x230>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d072      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a82      	ldr	r2, [pc, #520]	; (8002ba0 <DMA_SetConfig+0x234>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d06d      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a81      	ldr	r2, [pc, #516]	; (8002ba4 <DMA_SetConfig+0x238>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d068      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a7f      	ldr	r2, [pc, #508]	; (8002ba8 <DMA_SetConfig+0x23c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d063      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7e      	ldr	r2, [pc, #504]	; (8002bac <DMA_SetConfig+0x240>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d05e      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a7c      	ldr	r2, [pc, #496]	; (8002bb0 <DMA_SetConfig+0x244>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d059      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7b      	ldr	r2, [pc, #492]	; (8002bb4 <DMA_SetConfig+0x248>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d054      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a79      	ldr	r2, [pc, #484]	; (8002bb8 <DMA_SetConfig+0x24c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d04f      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a78      	ldr	r2, [pc, #480]	; (8002bbc <DMA_SetConfig+0x250>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d04a      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a76      	ldr	r2, [pc, #472]	; (8002bc0 <DMA_SetConfig+0x254>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d045      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a75      	ldr	r2, [pc, #468]	; (8002bc4 <DMA_SetConfig+0x258>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d040      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a73      	ldr	r2, [pc, #460]	; (8002bc8 <DMA_SetConfig+0x25c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d03b      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a72      	ldr	r2, [pc, #456]	; (8002bcc <DMA_SetConfig+0x260>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d036      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a70      	ldr	r2, [pc, #448]	; (8002bd0 <DMA_SetConfig+0x264>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d031      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a6f      	ldr	r2, [pc, #444]	; (8002bd4 <DMA_SetConfig+0x268>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d02c      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6d      	ldr	r2, [pc, #436]	; (8002bd8 <DMA_SetConfig+0x26c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d027      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6c      	ldr	r2, [pc, #432]	; (8002bdc <DMA_SetConfig+0x270>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6a      	ldr	r2, [pc, #424]	; (8002be0 <DMA_SetConfig+0x274>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01d      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a69      	ldr	r2, [pc, #420]	; (8002be4 <DMA_SetConfig+0x278>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d018      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a67      	ldr	r2, [pc, #412]	; (8002be8 <DMA_SetConfig+0x27c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a66      	ldr	r2, [pc, #408]	; (8002bec <DMA_SetConfig+0x280>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00e      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a64      	ldr	r2, [pc, #400]	; (8002bf0 <DMA_SetConfig+0x284>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d009      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a63      	ldr	r2, [pc, #396]	; (8002bf4 <DMA_SetConfig+0x288>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d004      	beq.n	8002a76 <DMA_SetConfig+0x10a>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a61      	ldr	r2, [pc, #388]	; (8002bf8 <DMA_SetConfig+0x28c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <DMA_SetConfig+0x10e>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <DMA_SetConfig+0x110>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00d      	beq.n	8002a9c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a9a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a3e      	ldr	r2, [pc, #248]	; (8002b9c <DMA_SetConfig+0x230>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d04a      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a3d      	ldr	r2, [pc, #244]	; (8002ba0 <DMA_SetConfig+0x234>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d045      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <DMA_SetConfig+0x238>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d040      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a3a      	ldr	r2, [pc, #232]	; (8002ba8 <DMA_SetConfig+0x23c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d03b      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a38      	ldr	r2, [pc, #224]	; (8002bac <DMA_SetConfig+0x240>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d036      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a37      	ldr	r2, [pc, #220]	; (8002bb0 <DMA_SetConfig+0x244>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d031      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <DMA_SetConfig+0x248>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02c      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a34      	ldr	r2, [pc, #208]	; (8002bb8 <DMA_SetConfig+0x24c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d027      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a32      	ldr	r2, [pc, #200]	; (8002bbc <DMA_SetConfig+0x250>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d022      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a31      	ldr	r2, [pc, #196]	; (8002bc0 <DMA_SetConfig+0x254>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d01d      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2f      	ldr	r2, [pc, #188]	; (8002bc4 <DMA_SetConfig+0x258>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d018      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2e      	ldr	r2, [pc, #184]	; (8002bc8 <DMA_SetConfig+0x25c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d013      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <DMA_SetConfig+0x260>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00e      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <DMA_SetConfig+0x264>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d009      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a29      	ldr	r2, [pc, #164]	; (8002bd4 <DMA_SetConfig+0x268>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <DMA_SetConfig+0x1d0>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a28      	ldr	r2, [pc, #160]	; (8002bd8 <DMA_SetConfig+0x26c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <DMA_SetConfig+0x1d4>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <DMA_SetConfig+0x1d6>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d05a      	beq.n	8002bfc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	223f      	movs	r2, #63	; 0x3f
 8002b50:	409a      	lsls	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b64:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d108      	bne.n	8002b88 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002b86:	e087      	b.n	8002c98 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
}
 8002b98:	e07e      	b.n	8002c98 <DMA_SetConfig+0x32c>
 8002b9a:	bf00      	nop
 8002b9c:	40020010 	.word	0x40020010
 8002ba0:	40020028 	.word	0x40020028
 8002ba4:	40020040 	.word	0x40020040
 8002ba8:	40020058 	.word	0x40020058
 8002bac:	40020070 	.word	0x40020070
 8002bb0:	40020088 	.word	0x40020088
 8002bb4:	400200a0 	.word	0x400200a0
 8002bb8:	400200b8 	.word	0x400200b8
 8002bbc:	40020410 	.word	0x40020410
 8002bc0:	40020428 	.word	0x40020428
 8002bc4:	40020440 	.word	0x40020440
 8002bc8:	40020458 	.word	0x40020458
 8002bcc:	40020470 	.word	0x40020470
 8002bd0:	40020488 	.word	0x40020488
 8002bd4:	400204a0 	.word	0x400204a0
 8002bd8:	400204b8 	.word	0x400204b8
 8002bdc:	58025408 	.word	0x58025408
 8002be0:	5802541c 	.word	0x5802541c
 8002be4:	58025430 	.word	0x58025430
 8002be8:	58025444 	.word	0x58025444
 8002bec:	58025458 	.word	0x58025458
 8002bf0:	5802546c 	.word	0x5802546c
 8002bf4:	58025480 	.word	0x58025480
 8002bf8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a28      	ldr	r2, [pc, #160]	; (8002ca4 <DMA_SetConfig+0x338>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d022      	beq.n	8002c4c <DMA_SetConfig+0x2e0>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <DMA_SetConfig+0x33c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01d      	beq.n	8002c4c <DMA_SetConfig+0x2e0>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a25      	ldr	r2, [pc, #148]	; (8002cac <DMA_SetConfig+0x340>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d018      	beq.n	8002c4c <DMA_SetConfig+0x2e0>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a24      	ldr	r2, [pc, #144]	; (8002cb0 <DMA_SetConfig+0x344>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <DMA_SetConfig+0x2e0>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <DMA_SetConfig+0x348>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <DMA_SetConfig+0x2e0>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <DMA_SetConfig+0x34c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <DMA_SetConfig+0x2e0>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <DMA_SetConfig+0x350>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <DMA_SetConfig+0x2e0>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <DMA_SetConfig+0x354>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <DMA_SetConfig+0x2e4>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <DMA_SetConfig+0x2e6>
 8002c50:	2300      	movs	r3, #0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d020      	beq.n	8002c98 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2201      	movs	r2, #1
 8002c60:	409a      	lsls	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d108      	bne.n	8002c88 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	60da      	str	r2, [r3, #12]
}
 8002c86:	e007      	b.n	8002c98 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	60da      	str	r2, [r3, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	58025408 	.word	0x58025408
 8002ca8:	5802541c 	.word	0x5802541c
 8002cac:	58025430 	.word	0x58025430
 8002cb0:	58025444 	.word	0x58025444
 8002cb4:	58025458 	.word	0x58025458
 8002cb8:	5802546c 	.word	0x5802546c
 8002cbc:	58025480 	.word	0x58025480
 8002cc0:	58025494 	.word	0x58025494

08002cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a42      	ldr	r2, [pc, #264]	; (8002ddc <DMA_CalcBaseAndBitshift+0x118>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d04a      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a41      	ldr	r2, [pc, #260]	; (8002de0 <DMA_CalcBaseAndBitshift+0x11c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d045      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3f      	ldr	r2, [pc, #252]	; (8002de4 <DMA_CalcBaseAndBitshift+0x120>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d040      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3e      	ldr	r2, [pc, #248]	; (8002de8 <DMA_CalcBaseAndBitshift+0x124>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d03b      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3c      	ldr	r2, [pc, #240]	; (8002dec <DMA_CalcBaseAndBitshift+0x128>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d036      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d031      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a39      	ldr	r2, [pc, #228]	; (8002df4 <DMA_CalcBaseAndBitshift+0x130>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d02c      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <DMA_CalcBaseAndBitshift+0x134>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d027      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a36      	ldr	r2, [pc, #216]	; (8002dfc <DMA_CalcBaseAndBitshift+0x138>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d022      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a35      	ldr	r2, [pc, #212]	; (8002e00 <DMA_CalcBaseAndBitshift+0x13c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d01d      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a33      	ldr	r2, [pc, #204]	; (8002e04 <DMA_CalcBaseAndBitshift+0x140>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d018      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a32      	ldr	r2, [pc, #200]	; (8002e08 <DMA_CalcBaseAndBitshift+0x144>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a30      	ldr	r2, [pc, #192]	; (8002e0c <DMA_CalcBaseAndBitshift+0x148>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00e      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <DMA_CalcBaseAndBitshift+0x14c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d009      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2d      	ldr	r2, [pc, #180]	; (8002e14 <DMA_CalcBaseAndBitshift+0x150>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <DMA_CalcBaseAndBitshift+0xa8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2c      	ldr	r2, [pc, #176]	; (8002e18 <DMA_CalcBaseAndBitshift+0x154>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <DMA_CalcBaseAndBitshift+0xac>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <DMA_CalcBaseAndBitshift+0xae>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d024      	beq.n	8002dc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3b10      	subs	r3, #16
 8002d7e:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <DMA_CalcBaseAndBitshift+0x158>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <DMA_CalcBaseAndBitshift+0x15c>)
 8002d90:	5cd3      	ldrb	r3, [r2, r3]
 8002d92:	461a      	mov	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d908      	bls.n	8002db0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <DMA_CalcBaseAndBitshift+0x160>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	1d1a      	adds	r2, r3, #4
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	659a      	str	r2, [r3, #88]	; 0x58
 8002dae:	e00d      	b.n	8002dcc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <DMA_CalcBaseAndBitshift+0x160>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dbe:	e005      	b.n	8002dcc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40020010 	.word	0x40020010
 8002de0:	40020028 	.word	0x40020028
 8002de4:	40020040 	.word	0x40020040
 8002de8:	40020058 	.word	0x40020058
 8002dec:	40020070 	.word	0x40020070
 8002df0:	40020088 	.word	0x40020088
 8002df4:	400200a0 	.word	0x400200a0
 8002df8:	400200b8 	.word	0x400200b8
 8002dfc:	40020410 	.word	0x40020410
 8002e00:	40020428 	.word	0x40020428
 8002e04:	40020440 	.word	0x40020440
 8002e08:	40020458 	.word	0x40020458
 8002e0c:	40020470 	.word	0x40020470
 8002e10:	40020488 	.word	0x40020488
 8002e14:	400204a0 	.word	0x400204a0
 8002e18:	400204b8 	.word	0x400204b8
 8002e1c:	aaaaaaab 	.word	0xaaaaaaab
 8002e20:	0800ad18 	.word	0x0800ad18
 8002e24:	fffffc00 	.word	0xfffffc00

08002e28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d120      	bne.n	8002e7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d858      	bhi.n	8002ef6 <DMA_CheckFifoParam+0xce>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <DMA_CheckFifoParam+0x24>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e5d 	.word	0x08002e5d
 8002e50:	08002e6f 	.word	0x08002e6f
 8002e54:	08002e5d 	.word	0x08002e5d
 8002e58:	08002ef7 	.word	0x08002ef7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d048      	beq.n	8002efa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e6c:	e045      	b.n	8002efa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e76:	d142      	bne.n	8002efe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e7c:	e03f      	b.n	8002efe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e86:	d123      	bne.n	8002ed0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d838      	bhi.n	8002f02 <DMA_CheckFifoParam+0xda>
 8002e90:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <DMA_CheckFifoParam+0x70>)
 8002e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e96:	bf00      	nop
 8002e98:	08002ea9 	.word	0x08002ea9
 8002e9c:	08002eaf 	.word	0x08002eaf
 8002ea0:	08002ea9 	.word	0x08002ea9
 8002ea4:	08002ec1 	.word	0x08002ec1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
        break;
 8002eac:	e030      	b.n	8002f10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d025      	beq.n	8002f06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ebe:	e022      	b.n	8002f06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ec8:	d11f      	bne.n	8002f0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ece:	e01c      	b.n	8002f0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d902      	bls.n	8002ede <DMA_CheckFifoParam+0xb6>
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d003      	beq.n	8002ee4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002edc:	e018      	b.n	8002f10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ee2:	e015      	b.n	8002f10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00e      	beq.n	8002f0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8002ef4:	e00b      	b.n	8002f0e <DMA_CheckFifoParam+0xe6>
        break;
 8002ef6:	bf00      	nop
 8002ef8:	e00a      	b.n	8002f10 <DMA_CheckFifoParam+0xe8>
        break;
 8002efa:	bf00      	nop
 8002efc:	e008      	b.n	8002f10 <DMA_CheckFifoParam+0xe8>
        break;
 8002efe:	bf00      	nop
 8002f00:	e006      	b.n	8002f10 <DMA_CheckFifoParam+0xe8>
        break;
 8002f02:	bf00      	nop
 8002f04:	e004      	b.n	8002f10 <DMA_CheckFifoParam+0xe8>
        break;
 8002f06:	bf00      	nop
 8002f08:	e002      	b.n	8002f10 <DMA_CheckFifoParam+0xe8>
        break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <DMA_CheckFifoParam+0xe8>
    break;
 8002f0e:	bf00      	nop
    }
  }

  return status;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop

08002f20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a38      	ldr	r2, [pc, #224]	; (8003014 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d022      	beq.n	8002f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a36      	ldr	r2, [pc, #216]	; (8003018 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01d      	beq.n	8002f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a35      	ldr	r2, [pc, #212]	; (800301c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d018      	beq.n	8002f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a33      	ldr	r2, [pc, #204]	; (8003020 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a32      	ldr	r2, [pc, #200]	; (8003024 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00e      	beq.n	8002f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a30      	ldr	r2, [pc, #192]	; (8003028 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d009      	beq.n	8002f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2f      	ldr	r2, [pc, #188]	; (800302c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2d      	ldr	r2, [pc, #180]	; (8003030 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01a      	beq.n	8002fbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	3b08      	subs	r3, #8
 8002f90:	4a28      	ldr	r2, [pc, #160]	; (8003034 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a24      	ldr	r2, [pc, #144]	; (800303c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002fac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002fbc:	e024      	b.n	8003008 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3b10      	subs	r3, #16
 8002fc6:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d806      	bhi.n	8002fe6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d902      	bls.n	8002fe6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a16      	ldr	r2, [pc, #88]	; (8003050 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002ff8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2201      	movs	r2, #1
 8003002:	409a      	lsls	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	58025408 	.word	0x58025408
 8003018:	5802541c 	.word	0x5802541c
 800301c:	58025430 	.word	0x58025430
 8003020:	58025444 	.word	0x58025444
 8003024:	58025458 	.word	0x58025458
 8003028:	5802546c 	.word	0x5802546c
 800302c:	58025480 	.word	0x58025480
 8003030:	58025494 	.word	0x58025494
 8003034:	cccccccd 	.word	0xcccccccd
 8003038:	16009600 	.word	0x16009600
 800303c:	58025880 	.word	0x58025880
 8003040:	aaaaaaab 	.word	0xaaaaaaab
 8003044:	400204b8 	.word	0x400204b8
 8003048:	4002040f 	.word	0x4002040f
 800304c:	10008200 	.word	0x10008200
 8003050:	40020880 	.word	0x40020880

08003054 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d04a      	beq.n	8003100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d847      	bhi.n	8003100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a25      	ldr	r2, [pc, #148]	; (800310c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d022      	beq.n	80030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a24      	ldr	r2, [pc, #144]	; (8003110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d01d      	beq.n	80030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a22      	ldr	r2, [pc, #136]	; (8003114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a21      	ldr	r2, [pc, #132]	; (8003118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1f      	ldr	r2, [pc, #124]	; (800311c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1c      	ldr	r2, [pc, #112]	; (8003124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1b      	ldr	r2, [pc, #108]	; (8003128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80030c4:	2300      	movs	r3, #0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4b17      	ldr	r3, [pc, #92]	; (800312c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	461a      	mov	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a15      	ldr	r2, [pc, #84]	; (8003130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80030dc:	671a      	str	r2, [r3, #112]	; 0x70
 80030de:	e009      	b.n	80030f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	461a      	mov	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80030f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	2201      	movs	r2, #1
 80030fa:	409a      	lsls	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	58025408 	.word	0x58025408
 8003110:	5802541c 	.word	0x5802541c
 8003114:	58025430 	.word	0x58025430
 8003118:	58025444 	.word	0x58025444
 800311c:	58025458 	.word	0x58025458
 8003120:	5802546c 	.word	0x5802546c
 8003124:	58025480 	.word	0x58025480
 8003128:	58025494 	.word	0x58025494
 800312c:	1600963f 	.word	0x1600963f
 8003130:	58025940 	.word	0x58025940
 8003134:	1000823f 	.word	0x1000823f
 8003138:	40020940 	.word	0x40020940

0800313c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	7a1b      	ldrb	r3, [r3, #8]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d155      	bne.n	8003202 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a4b      	ldr	r2, [pc, #300]	; (8003288 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d049      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a49      	ldr	r2, [pc, #292]	; (800328c <HAL_DMAEx_ConfigMuxSync+0x150>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d044      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a48      	ldr	r2, [pc, #288]	; (8003290 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d03f      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a46      	ldr	r2, [pc, #280]	; (8003294 <HAL_DMAEx_ConfigMuxSync+0x158>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d03a      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a45      	ldr	r2, [pc, #276]	; (8003298 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d035      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a43      	ldr	r2, [pc, #268]	; (800329c <HAL_DMAEx_ConfigMuxSync+0x160>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d030      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a42      	ldr	r2, [pc, #264]	; (80032a0 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d02b      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a40      	ldr	r2, [pc, #256]	; (80032a4 <HAL_DMAEx_ConfigMuxSync+0x168>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d026      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a3f      	ldr	r2, [pc, #252]	; (80032a8 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d021      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a3d      	ldr	r2, [pc, #244]	; (80032ac <HAL_DMAEx_ConfigMuxSync+0x170>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01c      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a3c      	ldr	r2, [pc, #240]	; (80032b0 <HAL_DMAEx_ConfigMuxSync+0x174>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d017      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_DMAEx_ConfigMuxSync+0x178>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d012      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a39      	ldr	r2, [pc, #228]	; (80032b8 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00d      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a37      	ldr	r2, [pc, #220]	; (80032bc <HAL_DMAEx_ConfigMuxSync+0x180>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d008      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a36      	ldr	r2, [pc, #216]	; (80032c0 <HAL_DMAEx_ConfigMuxSync+0x184>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <HAL_DMAEx_ConfigMuxSync+0x188>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d131      	bne.n	8003272 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_DMAEx_ConfigMuxSync+0xe0>
 8003218:	2302      	movs	r3, #2
 800321a:	e02f      	b.n	800327c <HAL_DMAEx_ConfigMuxSync+0x140>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322e:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8003232:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	b2d9      	uxtb	r1, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	061a      	lsls	r2, r3, #24
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	3b01      	subs	r3, #1
 8003246:	04db      	lsls	r3, r3, #19
 8003248:	431a      	orrs	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	431a      	orrs	r2, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	7a1b      	ldrb	r3, [r3, #8]
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	431a      	orrs	r2, r3
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	7a5b      	ldrb	r3, [r3, #9]
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	e004      	b.n	800327c <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003278:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40020010 	.word	0x40020010
 800328c:	40020028 	.word	0x40020028
 8003290:	40020040 	.word	0x40020040
 8003294:	40020058 	.word	0x40020058
 8003298:	40020070 	.word	0x40020070
 800329c:	40020088 	.word	0x40020088
 80032a0:	400200a0 	.word	0x400200a0
 80032a4:	400200b8 	.word	0x400200b8
 80032a8:	40020410 	.word	0x40020410
 80032ac:	40020428 	.word	0x40020428
 80032b0:	40020440 	.word	0x40020440
 80032b4:	40020458 	.word	0x40020458
 80032b8:	40020470 	.word	0x40020470
 80032bc:	40020488 	.word	0x40020488
 80032c0:	400204a0 	.word	0x400204a0
 80032c4:	400204b8 	.word	0x400204b8

080032c8 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01a      	beq.n	8003316 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d022      	beq.n	8003364 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01a      	beq.n	8003364 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800333c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003346:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
      }
    }
  }
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800337a:	4b86      	ldr	r3, [pc, #536]	; (8003594 <HAL_GPIO_Init+0x228>)
 800337c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800337e:	e18c      	b.n	800369a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 817e 	beq.w	8003694 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d005      	beq.n	80033b0 <HAL_GPIO_Init+0x44>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d130      	bne.n	8003412 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	2203      	movs	r2, #3
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033e6:	2201      	movs	r2, #1
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 0201 	and.w	r2, r3, #1
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b03      	cmp	r3, #3
 800341c:	d017      	beq.n	800344e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d123      	bne.n	80034a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	08da      	lsrs	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3208      	adds	r2, #8
 8003462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	220f      	movs	r2, #15
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	69b9      	ldr	r1, [r7, #24]
 800349e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0203 	and.w	r2, r3, #3
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80d8 	beq.w	8003694 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e4:	4b2c      	ldr	r3, [pc, #176]	; (8003598 <HAL_GPIO_Init+0x22c>)
 80034e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034ea:	4a2b      	ldr	r2, [pc, #172]	; (8003598 <HAL_GPIO_Init+0x22c>)
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80034f4:	4b28      	ldr	r3, [pc, #160]	; (8003598 <HAL_GPIO_Init+0x22c>)
 80034f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003502:	4a26      	ldr	r2, [pc, #152]	; (800359c <HAL_GPIO_Init+0x230>)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <HAL_GPIO_Init+0x234>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d04a      	beq.n	80035c4 <HAL_GPIO_Init+0x258>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <HAL_GPIO_Init+0x238>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02b      	beq.n	800358e <HAL_GPIO_Init+0x222>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <HAL_GPIO_Init+0x23c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d025      	beq.n	800358a <HAL_GPIO_Init+0x21e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <HAL_GPIO_Init+0x240>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <HAL_GPIO_Init+0x21a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_GPIO_Init+0x244>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d019      	beq.n	8003582 <HAL_GPIO_Init+0x216>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a18      	ldr	r2, [pc, #96]	; (80035b4 <HAL_GPIO_Init+0x248>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_GPIO_Init+0x212>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <HAL_GPIO_Init+0x24c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00d      	beq.n	800357a <HAL_GPIO_Init+0x20e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a16      	ldr	r2, [pc, #88]	; (80035bc <HAL_GPIO_Init+0x250>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <HAL_GPIO_Init+0x20a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <HAL_GPIO_Init+0x254>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_GPIO_Init+0x206>
 800356e:	2309      	movs	r3, #9
 8003570:	e029      	b.n	80035c6 <HAL_GPIO_Init+0x25a>
 8003572:	230a      	movs	r3, #10
 8003574:	e027      	b.n	80035c6 <HAL_GPIO_Init+0x25a>
 8003576:	2307      	movs	r3, #7
 8003578:	e025      	b.n	80035c6 <HAL_GPIO_Init+0x25a>
 800357a:	2306      	movs	r3, #6
 800357c:	e023      	b.n	80035c6 <HAL_GPIO_Init+0x25a>
 800357e:	2305      	movs	r3, #5
 8003580:	e021      	b.n	80035c6 <HAL_GPIO_Init+0x25a>
 8003582:	2304      	movs	r3, #4
 8003584:	e01f      	b.n	80035c6 <HAL_GPIO_Init+0x25a>
 8003586:	2303      	movs	r3, #3
 8003588:	e01d      	b.n	80035c6 <HAL_GPIO_Init+0x25a>
 800358a:	2302      	movs	r3, #2
 800358c:	e01b      	b.n	80035c6 <HAL_GPIO_Init+0x25a>
 800358e:	2301      	movs	r3, #1
 8003590:	e019      	b.n	80035c6 <HAL_GPIO_Init+0x25a>
 8003592:	bf00      	nop
 8003594:	58000080 	.word	0x58000080
 8003598:	58024400 	.word	0x58024400
 800359c:	58000400 	.word	0x58000400
 80035a0:	58020000 	.word	0x58020000
 80035a4:	58020400 	.word	0x58020400
 80035a8:	58020800 	.word	0x58020800
 80035ac:	58020c00 	.word	0x58020c00
 80035b0:	58021000 	.word	0x58021000
 80035b4:	58021400 	.word	0x58021400
 80035b8:	58021800 	.word	0x58021800
 80035bc:	58021c00 	.word	0x58021c00
 80035c0:	58022400 	.word	0x58022400
 80035c4:	2300      	movs	r3, #0
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	f002 0203 	and.w	r2, r2, #3
 80035cc:	0092      	lsls	r2, r2, #2
 80035ce:	4093      	lsls	r3, r2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d6:	4938      	ldr	r1, [pc, #224]	; (80036b8 <HAL_GPIO_Init+0x34c>)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	089b      	lsrs	r3, r3, #2
 80035dc:	3302      	adds	r3, #2
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800360a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	3301      	adds	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f47f ae6b 	bne.w	8003380 <HAL_GPIO_Init+0x14>
  }
}
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	3724      	adds	r7, #36	; 0x24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	58000400 	.word	0x58000400

080036bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
 80036c8:	4613      	mov	r3, r2
 80036ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036cc:	787b      	ldrb	r3, [r7, #1]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80036d8:	e003      	b.n	80036e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	041a      	lsls	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	619a      	str	r2, [r3, #24]
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4603      	mov	r3, r0
 80036f6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80036f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 f804 	bl	8003722 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d010      	beq.n	800377e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	09db      	lsrs	r3, r3, #7
 8003760:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800377c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	0a9b      	lsrs	r3, r3, #10
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d010      	beq.n	80037ac <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	09db      	lsrs	r3, r3, #7
 800378e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f043 0208 	orr.w	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	0a5b      	lsrs	r3, r3, #9
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d010      	beq.n	80037da <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	09db      	lsrs	r3, r3, #7
 80037bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	f043 0202 	orr.w	r2, r3, #2
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 030b 	and.w	r3, r3, #11
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80037ea:	68f9      	ldr	r1, [r7, #12]
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fc77 	bl	80040e0 <I2C_ITError>
  }
}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
 800382e:	4613      	mov	r3, r2
 8003830:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <I2C_Slave_ISR_IT+0x24>
 800389a:	2302      	movs	r3, #2
 800389c:	e0ec      	b.n	8003a78 <I2C_Slave_ISR_IT+0x1fe>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80038be:	6939      	ldr	r1, [r7, #16]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f9bf 	bl	8003c44 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d04d      	beq.n	800396e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d047      	beq.n	800396e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d128      	bne.n	800393a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b28      	cmp	r3, #40	; 0x28
 80038f2:	d108      	bne.n	8003906 <I2C_Slave_ISR_IT+0x8c>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038fa:	d104      	bne.n	8003906 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80038fc:	6939      	ldr	r1, [r7, #16]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fb98 	bl	8004034 <I2C_ITListenCplt>
 8003904:	e032      	b.n	800396c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b29      	cmp	r3, #41	; 0x29
 8003910:	d10e      	bne.n	8003930 <I2C_Slave_ISR_IT+0xb6>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003918:	d00a      	beq.n	8003930 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2210      	movs	r2, #16
 8003920:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fcd3 	bl	80042ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f92d 	bl	8003b88 <I2C_ITSlaveSeqCplt>
 800392e:	e01d      	b.n	800396c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2210      	movs	r2, #16
 8003936:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003938:	e096      	b.n	8003a68 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2210      	movs	r2, #16
 8003940:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f043 0204 	orr.w	r2, r3, #4
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <I2C_Slave_ISR_IT+0xe4>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800395a:	f040 8085 	bne.w	8003a68 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	4619      	mov	r1, r3
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fbbb 	bl	80040e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800396a:	e07d      	b.n	8003a68 <I2C_Slave_ISR_IT+0x1ee>
 800396c:	e07c      	b.n	8003a68 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d030      	beq.n	80039dc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003982:	2b00      	cmp	r3, #0
 8003984:	d02a      	beq.n	80039dc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d018      	beq.n	80039c2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d14f      	bne.n	8003a6c <I2C_Slave_ISR_IT+0x1f2>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039d2:	d04b      	beq.n	8003a6c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f8d7 	bl	8003b88 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80039da:	e047      	b.n	8003a6c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	08db      	lsrs	r3, r3, #3
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	08db      	lsrs	r3, r3, #3
 80039ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80039f4:	6939      	ldr	r1, [r7, #16]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f842 	bl	8003a80 <I2C_ITAddrCplt>
 80039fc:	e037      	b.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d031      	beq.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02b      	beq.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d018      	beq.n	8003a52 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003a50:	e00d      	b.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a58:	d002      	beq.n	8003a60 <I2C_Slave_ISR_IT+0x1e6>
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f891 	bl	8003b88 <I2C_ITSlaveSeqCplt>
 8003a66:	e002      	b.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003a68:	bf00      	nop
 8003a6a:	e000      	b.n	8003a6e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003a6c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a96:	2b28      	cmp	r3, #40	; 0x28
 8003a98:	d16a      	bne.n	8003b70 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ab8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ad4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d138      	bne.n	8003b50 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003ade:	897b      	ldrh	r3, [r7, #10]
 8003ae0:	09db      	lsrs	r3, r3, #7
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	89bb      	ldrh	r3, [r7, #12]
 8003ae6:	4053      	eors	r3, r2
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f003 0306 	and.w	r3, r3, #6
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11c      	bne.n	8003b2c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003af2:	897b      	ldrh	r3, [r7, #10]
 8003af4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d13b      	bne.n	8003b80 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2208      	movs	r2, #8
 8003b14:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b1e:	89ba      	ldrh	r2, [r7, #12]
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fe7c 	bl	8003822 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b2a:	e029      	b.n	8003b80 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003b2c:	893b      	ldrh	r3, [r7, #8]
 8003b2e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fc0c 	bl	8004352 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b42:	89ba      	ldrh	r2, [r7, #12]
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fe6a 	bl	8003822 <HAL_I2C_AddrCallback>
}
 8003b4e:	e017      	b.n	8003b80 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fbfc 	bl	8004352 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b62:	89ba      	ldrh	r2, [r7, #12]
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff fe5a 	bl	8003822 <HAL_I2C_AddrCallback>
}
 8003b6e:	e007      	b.n	8003b80 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2208      	movs	r2, #8
 8003b76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	0b9b      	lsrs	r3, r3, #14
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e00d      	b.n	8003bda <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	0bdb      	lsrs	r3, r3, #15
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bd8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b29      	cmp	r3, #41	; 0x29
 8003be4:	d112      	bne.n	8003c0c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2228      	movs	r2, #40	; 0x28
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2221      	movs	r2, #33	; 0x21
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fbab 	bl	8004352 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fdf8 	bl	80037fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c0a:	e017      	b.n	8003c3c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b2a      	cmp	r3, #42	; 0x2a
 8003c16:	d111      	bne.n	8003c3c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2228      	movs	r2, #40	; 0x28
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2222      	movs	r2, #34	; 0x22
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c26:	2102      	movs	r1, #2
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fb92 	bl	8004352 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fde9 	bl	800380e <HAL_I2C_SlaveRxCpltCallback>
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c60:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2220      	movs	r2, #32
 8003c68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	2b21      	cmp	r3, #33	; 0x21
 8003c6e:	d002      	beq.n	8003c76 <I2C_ITSlaveCplt+0x32>
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b29      	cmp	r3, #41	; 0x29
 8003c74:	d108      	bne.n	8003c88 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003c76:	f248 0101 	movw	r1, #32769	; 0x8001
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fb69 	bl	8004352 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2221      	movs	r2, #33	; 0x21
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
 8003c86:	e00d      	b.n	8003ca4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b22      	cmp	r3, #34	; 0x22
 8003c8c:	d002      	beq.n	8003c94 <I2C_ITSlaveCplt+0x50>
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b2a      	cmp	r3, #42	; 0x2a
 8003c92:	d107      	bne.n	8003ca4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003c94:	f248 0102 	movw	r1, #32770	; 0x8002
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fb5a 	bl	8004352 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2222      	movs	r2, #34	; 0x22
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b80      	ldr	r3, [pc, #512]	; (8003ec0 <I2C_ITSlaveCplt+0x27c>)
 8003cc0:	400b      	ands	r3, r1
 8003cc2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fb02 	bl	80042ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	0b9b      	lsrs	r3, r3, #14
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d07a      	beq.n	8003dcc <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ce4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8111 	beq.w	8003f12 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a73      	ldr	r2, [pc, #460]	; (8003ec4 <I2C_ITSlaveCplt+0x280>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d059      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a71      	ldr	r2, [pc, #452]	; (8003ec8 <I2C_ITSlaveCplt+0x284>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d053      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a6f      	ldr	r2, [pc, #444]	; (8003ecc <I2C_ITSlaveCplt+0x288>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d04d      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a6d      	ldr	r2, [pc, #436]	; (8003ed0 <I2C_ITSlaveCplt+0x28c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d047      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a6b      	ldr	r2, [pc, #428]	; (8003ed4 <I2C_ITSlaveCplt+0x290>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d041      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a69      	ldr	r2, [pc, #420]	; (8003ed8 <I2C_ITSlaveCplt+0x294>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d03b      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a67      	ldr	r2, [pc, #412]	; (8003edc <I2C_ITSlaveCplt+0x298>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d035      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a65      	ldr	r2, [pc, #404]	; (8003ee0 <I2C_ITSlaveCplt+0x29c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d02f      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a63      	ldr	r2, [pc, #396]	; (8003ee4 <I2C_ITSlaveCplt+0x2a0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d029      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a61      	ldr	r2, [pc, #388]	; (8003ee8 <I2C_ITSlaveCplt+0x2a4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d023      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a5f      	ldr	r2, [pc, #380]	; (8003eec <I2C_ITSlaveCplt+0x2a8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d01d      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a5d      	ldr	r2, [pc, #372]	; (8003ef0 <I2C_ITSlaveCplt+0x2ac>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d017      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a5b      	ldr	r2, [pc, #364]	; (8003ef4 <I2C_ITSlaveCplt+0x2b0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d011      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a59      	ldr	r2, [pc, #356]	; (8003ef8 <I2C_ITSlaveCplt+0x2b4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a57      	ldr	r2, [pc, #348]	; (8003efc <I2C_ITSlaveCplt+0x2b8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d005      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a55      	ldr	r2, [pc, #340]	; (8003f00 <I2C_ITSlaveCplt+0x2bc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d105      	bne.n	8003dbc <I2C_ITSlaveCplt+0x178>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	e004      	b.n	8003dc6 <I2C_ITSlaveCplt+0x182>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	8553      	strh	r3, [r2, #42]	; 0x2a
 8003dca:	e0a2      	b.n	8003f12 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	0bdb      	lsrs	r3, r3, #15
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 809c 	beq.w	8003f12 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 808f 	beq.w	8003f12 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a32      	ldr	r2, [pc, #200]	; (8003ec4 <I2C_ITSlaveCplt+0x280>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d059      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a30      	ldr	r2, [pc, #192]	; (8003ec8 <I2C_ITSlaveCplt+0x284>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d053      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a2e      	ldr	r2, [pc, #184]	; (8003ecc <I2C_ITSlaveCplt+0x288>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d04d      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ed0 <I2C_ITSlaveCplt+0x28c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d047      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <I2C_ITSlaveCplt+0x290>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d041      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a28      	ldr	r2, [pc, #160]	; (8003ed8 <I2C_ITSlaveCplt+0x294>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d03b      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a26      	ldr	r2, [pc, #152]	; (8003edc <I2C_ITSlaveCplt+0x298>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d035      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a24      	ldr	r2, [pc, #144]	; (8003ee0 <I2C_ITSlaveCplt+0x29c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d02f      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a22      	ldr	r2, [pc, #136]	; (8003ee4 <I2C_ITSlaveCplt+0x2a0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d029      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a20      	ldr	r2, [pc, #128]	; (8003ee8 <I2C_ITSlaveCplt+0x2a4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d023      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <I2C_ITSlaveCplt+0x2a8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <I2C_ITSlaveCplt+0x2ac>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d017      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1a      	ldr	r2, [pc, #104]	; (8003ef4 <I2C_ITSlaveCplt+0x2b0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d011      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <I2C_ITSlaveCplt+0x2b4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	; (8003efc <I2C_ITSlaveCplt+0x2b8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d005      	beq.n	8003eb4 <I2C_ITSlaveCplt+0x270>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <I2C_ITSlaveCplt+0x2bc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d127      	bne.n	8003f04 <I2C_ITSlaveCplt+0x2c0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	e026      	b.n	8003f0e <I2C_ITSlaveCplt+0x2ca>
 8003ec0:	fe00e800 	.word	0xfe00e800
 8003ec4:	40020010 	.word	0x40020010
 8003ec8:	40020028 	.word	0x40020028
 8003ecc:	40020040 	.word	0x40020040
 8003ed0:	40020058 	.word	0x40020058
 8003ed4:	40020070 	.word	0x40020070
 8003ed8:	40020088 	.word	0x40020088
 8003edc:	400200a0 	.word	0x400200a0
 8003ee0:	400200b8 	.word	0x400200b8
 8003ee4:	40020410 	.word	0x40020410
 8003ee8:	40020428 	.word	0x40020428
 8003eec:	40020440 	.word	0x40020440
 8003ef0:	40020458 	.word	0x40020458
 8003ef4:	40020470 	.word	0x40020470
 8003ef8:	40020488 	.word	0x40020488
 8003efc:	400204a0 	.word	0x400204a0
 8003f00:	400204b8 	.word	0x400204b8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d020      	beq.n	8003f60 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00c      	beq.n	8003f60 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f043 0204 	orr.w	r2, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d010      	beq.n	8003fae <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8a4 	bl	80040e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b28      	cmp	r3, #40	; 0x28
 8003fa2:	d141      	bne.n	8004028 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f844 	bl	8004034 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fac:	e03c      	b.n	8004028 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fb6:	d014      	beq.n	8003fe2 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff fde5 	bl	8003b88 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <I2C_ITSlaveCplt+0x3ec>)
 8003fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fc2f 	bl	800383e <HAL_I2C_ListenCpltCallback>
}
 8003fe0:	e022      	b.n	8004028 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b22      	cmp	r3, #34	; 0x22
 8003fec:	d10e      	bne.n	800400c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fc02 	bl	800380e <HAL_I2C_SlaveRxCpltCallback>
}
 800400a:	e00d      	b.n	8004028 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fbe9 	bl	80037fa <HAL_I2C_SlaveTxCpltCallback>
}
 8004028:	bf00      	nop
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	ffff0000 	.word	0xffff0000

08004034 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a26      	ldr	r2, [pc, #152]	; (80040dc <I2C_ITListenCplt+0xa8>)
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d022      	beq.n	80040b2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f043 0204 	orr.w	r2, r3, #4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80040b2:	f248 0103 	movw	r1, #32771	; 0x8003
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f94b 	bl	8004352 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2210      	movs	r2, #16
 80040c2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff fbb6 	bl	800383e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	ffff0000 	.word	0xffff0000

080040e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a5d      	ldr	r2, [pc, #372]	; (8004274 <I2C_ITError+0x194>)
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b28      	cmp	r3, #40	; 0x28
 8004116:	d005      	beq.n	8004124 <I2C_ITError+0x44>
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b29      	cmp	r3, #41	; 0x29
 800411c:	d002      	beq.n	8004124 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	2b2a      	cmp	r3, #42	; 0x2a
 8004122:	d10b      	bne.n	800413c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004124:	2103      	movs	r1, #3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f913 	bl	8004352 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2228      	movs	r2, #40	; 0x28
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a50      	ldr	r2, [pc, #320]	; (8004278 <I2C_ITError+0x198>)
 8004138:	635a      	str	r2, [r3, #52]	; 0x34
 800413a:	e011      	b.n	8004160 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800413c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f906 	bl	8004352 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b60      	cmp	r3, #96	; 0x60
 8004150:	d003      	beq.n	800415a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	2b00      	cmp	r3, #0
 800416c:	d039      	beq.n	80041e2 <I2C_ITError+0x102>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b11      	cmp	r3, #17
 8004172:	d002      	beq.n	800417a <I2C_ITError+0x9a>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b21      	cmp	r3, #33	; 0x21
 8004178:	d133      	bne.n	80041e2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004188:	d107      	bne.n	800419a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004198:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fbca 	bl	8002938 <HAL_DMA_GetState>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d017      	beq.n	80041da <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	4a33      	ldr	r2, [pc, #204]	; (800427c <I2C_ITError+0x19c>)
 80041b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd fa4c 	bl	800165c <HAL_DMA_Abort_IT>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d04d      	beq.n	8004266 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041d4:	4610      	mov	r0, r2
 80041d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041d8:	e045      	b.n	8004266 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f850 	bl	8004280 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041e0:	e041      	b.n	8004266 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d039      	beq.n	800425e <I2C_ITError+0x17e>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b12      	cmp	r3, #18
 80041ee:	d002      	beq.n	80041f6 <I2C_ITError+0x116>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b22      	cmp	r3, #34	; 0x22
 80041f4:	d133      	bne.n	800425e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004204:	d107      	bne.n	8004216 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004214:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe fb8c 	bl	8002938 <HAL_DMA_GetState>
 8004220:	4603      	mov	r3, r0
 8004222:	2b01      	cmp	r3, #1
 8004224:	d017      	beq.n	8004256 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	4a14      	ldr	r2, [pc, #80]	; (800427c <I2C_ITError+0x19c>)
 800422c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd fa0e 	bl	800165c <HAL_DMA_Abort_IT>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d011      	beq.n	800426a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004250:	4610      	mov	r0, r2
 8004252:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004254:	e009      	b.n	800426a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f812 	bl	8004280 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800425c:	e005      	b.n	800426a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f80e 	bl	8004280 <I2C_TreatErrorCallback>
  }
}
 8004264:	e002      	b.n	800426c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800426a:	bf00      	nop
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	ffff0000 	.word	0xffff0000
 8004278:	0800387b 	.word	0x0800387b
 800427c:	08004317 	.word	0x08004317

08004280 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b60      	cmp	r3, #96	; 0x60
 8004292:	d10e      	bne.n	80042b2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fadb 	bl	8003866 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042b0:	e009      	b.n	80042c6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff fac6 	bl	8003852 <HAL_I2C_ErrorCallback>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d103      	bne.n	80042ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2200      	movs	r2, #0
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d007      	beq.n	800430a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	619a      	str	r2, [r3, #24]
  }
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	2200      	movs	r2, #0
 8004332:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	2200      	movs	r2, #0
 8004342:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff ff9b 	bl	8004280 <I2C_TreatErrorCallback>
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004362:	887b      	ldrh	r3, [r7, #2]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00f      	beq.n	800438c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004372:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004380:	2b28      	cmp	r3, #40	; 0x28
 8004382:	d003      	beq.n	800438c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800438a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800438c:	887b      	ldrh	r3, [r7, #2]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00f      	beq.n	80043b6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800439c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043aa:	2b28      	cmp	r3, #40	; 0x28
 80043ac:	d003      	beq.n	80043b6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80043b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80043b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da03      	bge.n	80043c6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d103      	bne.n	80043d4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80043d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80043d4:	887b      	ldrh	r3, [r7, #2]
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d103      	bne.n	80043e2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f043 0320 	orr.w	r3, r3, #32
 80043e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80043e2:	887b      	ldrh	r3, [r7, #2]
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d103      	bne.n	80043f0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	43da      	mvns	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	400a      	ands	r2, r1
 8004400:	601a      	str	r2, [r3, #0]
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004418:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	2b06      	cmp	r3, #6
 8004422:	d00a      	beq.n	800443a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004424:	4b26      	ldr	r3, [pc, #152]	; (80044c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	d001      	beq.n	8004436 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e03f      	b.n	80044b6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e03d      	b.n	80044b6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800443a:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004442:	491f      	ldr	r1, [pc, #124]	; (80044c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4313      	orrs	r3, r2
 8004448:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800444a:	f7fc f8c1 	bl	80005d0 <HAL_GetTick>
 800444e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004450:	e009      	b.n	8004466 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004452:	f7fc f8bd 	bl	80005d0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004460:	d901      	bls.n	8004466 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e027      	b.n	80044b6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004466:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004472:	d1ee      	bne.n	8004452 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b1e      	cmp	r3, #30
 8004478:	d008      	beq.n	800448c <HAL_PWREx_ConfigSupply+0x7c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b2e      	cmp	r3, #46	; 0x2e
 800447e:	d005      	beq.n	800448c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b1d      	cmp	r3, #29
 8004484:	d002      	beq.n	800448c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b2d      	cmp	r3, #45	; 0x2d
 800448a:	d113      	bne.n	80044b4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800448c:	f7fc f8a0 	bl	80005d0 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004492:	e009      	b.n	80044a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004494:	f7fc f89c 	bl	80005d0 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a2:	d901      	bls.n	80044a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e006      	b.n	80044b6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0311 	and.w	r3, r3, #17
 80044b0:	2b11      	cmp	r3, #17
 80044b2:	d1ef      	bne.n	8004494 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	58024800 	.word	0x58024800

080044c4 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e02d      	b.n	8004532 <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2202      	movs	r2, #2
 80044da:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0220 	bic.w	r2, r2, #32
 80044ea:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044fe:	f023 030f 	bic.w	r3, r3, #15
 8004502:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 021c 	bic.w	r2, r2, #28
 8004512:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0207 	bic.w	r2, r2, #7
 8004522:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08c      	sub	sp, #48	; 0x30
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e397      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 8087 	beq.w	800466e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004560:	4b9e      	ldr	r3, [pc, #632]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800456a:	4b9c      	ldr	r3, [pc, #624]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	2b10      	cmp	r3, #16
 8004574:	d007      	beq.n	8004586 <HAL_RCC_OscConfig+0x46>
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	2b18      	cmp	r3, #24
 800457a:	d110      	bne.n	800459e <HAL_RCC_OscConfig+0x5e>
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d10b      	bne.n	800459e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004586:	4b95      	ldr	r3, [pc, #596]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d06c      	beq.n	800466c <HAL_RCC_OscConfig+0x12c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d168      	bne.n	800466c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e371      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a6:	d106      	bne.n	80045b6 <HAL_RCC_OscConfig+0x76>
 80045a8:	4b8c      	ldr	r3, [pc, #560]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a8b      	ldr	r2, [pc, #556]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	e02e      	b.n	8004614 <HAL_RCC_OscConfig+0xd4>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x98>
 80045be:	4b87      	ldr	r3, [pc, #540]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a86      	ldr	r2, [pc, #536]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	4b84      	ldr	r3, [pc, #528]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a83      	ldr	r2, [pc, #524]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xd4>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0xbc>
 80045e2:	4b7e      	ldr	r3, [pc, #504]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7d      	ldr	r2, [pc, #500]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b7b      	ldr	r3, [pc, #492]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a7a      	ldr	r2, [pc, #488]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xd4>
 80045fc:	4b77      	ldr	r3, [pc, #476]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a76      	ldr	r2, [pc, #472]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b74      	ldr	r3, [pc, #464]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a73      	ldr	r2, [pc, #460]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fb ffd8 	bl	80005d0 <HAL_GetTick>
 8004620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004624:	f7fb ffd4 	bl	80005d0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e325      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004636:	4b69      	ldr	r3, [pc, #420]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xe4>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fb ffc4 	bl	80005d0 <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800464c:	f7fb ffc0 	bl	80005d0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e311      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800465e:	4b5f      	ldr	r3, [pc, #380]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x10c>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 808a 	beq.w	8004790 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467c:	4b57      	ldr	r3, [pc, #348]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004684:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004686:	4b55      	ldr	r3, [pc, #340]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <HAL_RCC_OscConfig+0x162>
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	2b18      	cmp	r3, #24
 8004696:	d137      	bne.n	8004708 <HAL_RCC_OscConfig+0x1c8>
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d132      	bne.n	8004708 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a2:	4b4e      	ldr	r3, [pc, #312]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_RCC_OscConfig+0x17a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e2e3      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046ba:	4b48      	ldr	r3, [pc, #288]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 0219 	bic.w	r2, r3, #25
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	4945      	ldr	r1, [pc, #276]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046cc:	f7fb ff80 	bl	80005d0 <HAL_GetTick>
 80046d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fb ff7c 	bl	80005d0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e2cd      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046e6:	4b3d      	ldr	r3, [pc, #244]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f2:	4b3a      	ldr	r3, [pc, #232]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	4936      	ldr	r1, [pc, #216]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004706:	e043      	b.n	8004790 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d026      	beq.n	800475e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004710:	4b32      	ldr	r3, [pc, #200]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 0219 	bic.w	r2, r3, #25
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	492f      	ldr	r1, [pc, #188]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004722:	f7fb ff55 	bl	80005d0 <HAL_GetTick>
 8004726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800472a:	f7fb ff51 	bl	80005d0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e2a2      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004748:	4b24      	ldr	r3, [pc, #144]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	4921      	ldr	r1, [pc, #132]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
 800475c:	e018      	b.n	8004790 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800475e:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476a:	f7fb ff31 	bl	80005d0 <HAL_GetTick>
 800476e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004772:	f7fb ff2d 	bl	80005d0 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e27e      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004784:	4b15      	ldr	r3, [pc, #84]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f0      	bne.n	8004772 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	d06d      	beq.n	8004878 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d007      	beq.n	80047c2 <HAL_RCC_OscConfig+0x282>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b18      	cmp	r3, #24
 80047b6:	d11e      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2b6>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d119      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_RCC_OscConfig+0x29c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_RCC_OscConfig+0x2a0>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d004      	beq.n	80047e0 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e253      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
 80047da:	bf00      	nop
 80047dc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047e0:	4ba3      	ldr	r3, [pc, #652]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	061b      	lsls	r3, r3, #24
 80047ee:	49a0      	ldr	r1, [pc, #640]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047f4:	e040      	b.n	8004878 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d023      	beq.n	8004846 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80047fe:	4b9c      	ldr	r3, [pc, #624]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a9b      	ldr	r2, [pc, #620]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fb fee1 	bl	80005d0 <HAL_GetTick>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004812:	f7fb fedd 	bl	80005d0 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e22e      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004824:	4b92      	ldr	r3, [pc, #584]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004830:	4b8f      	ldr	r3, [pc, #572]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	498c      	ldr	r1, [pc, #560]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004840:	4313      	orrs	r3, r2
 8004842:	60cb      	str	r3, [r1, #12]
 8004844:	e018      	b.n	8004878 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004846:	4b8a      	ldr	r3, [pc, #552]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a89      	ldr	r2, [pc, #548]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 800484c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fb febd 	bl	80005d0 <HAL_GetTick>
 8004856:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800485a:	f7fb feb9 	bl	80005d0 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e20a      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800486c:	4b80      	ldr	r3, [pc, #512]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f0      	bne.n	800485a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d036      	beq.n	80048f2 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d019      	beq.n	80048c0 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488c:	4b78      	ldr	r3, [pc, #480]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	4a77      	ldr	r2, [pc, #476]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fb fe9a 	bl	80005d0 <HAL_GetTick>
 800489c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a0:	f7fb fe96 	bl	80005d0 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e1e7      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048b2:	4b6f      	ldr	r3, [pc, #444]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80048b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x360>
 80048be:	e018      	b.n	80048f2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c0:	4b6b      	ldr	r3, [pc, #428]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80048c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c4:	4a6a      	ldr	r2, [pc, #424]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fb fe80 	bl	80005d0 <HAL_GetTick>
 80048d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d4:	f7fb fe7c 	bl	80005d0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e1cd      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048e6:	4b62      	ldr	r3, [pc, #392]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80048e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d036      	beq.n	800496c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d019      	beq.n	800493a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004906:	4b5a      	ldr	r3, [pc, #360]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a59      	ldr	r2, [pc, #356]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 800490c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004910:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004912:	f7fb fe5d 	bl	80005d0 <HAL_GetTick>
 8004916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800491a:	f7fb fe59 	bl	80005d0 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e1aa      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800492c:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x3da>
 8004938:	e018      	b.n	800496c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800493a:	4b4d      	ldr	r3, [pc, #308]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a4c      	ldr	r2, [pc, #304]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004944:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004946:	f7fb fe43 	bl	80005d0 <HAL_GetTick>
 800494a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800494e:	f7fb fe3f 	bl	80005d0 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e190      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004960:	4b43      	ldr	r3, [pc, #268]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f0      	bne.n	800494e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8085 	beq.w	8004a84 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800497a:	4b3e      	ldr	r3, [pc, #248]	; (8004a74 <HAL_RCC_OscConfig+0x534>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a3d      	ldr	r2, [pc, #244]	; (8004a74 <HAL_RCC_OscConfig+0x534>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004986:	f7fb fe23 	bl	80005d0 <HAL_GetTick>
 800498a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fb fe1f 	bl	80005d0 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b64      	cmp	r3, #100	; 0x64
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e170      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049a0:	4b34      	ldr	r3, [pc, #208]	; (8004a74 <HAL_RCC_OscConfig+0x534>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d106      	bne.n	80049c2 <HAL_RCC_OscConfig+0x482>
 80049b4:	4b2e      	ldr	r3, [pc, #184]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	4a2d      	ldr	r2, [pc, #180]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	6713      	str	r3, [r2, #112]	; 0x70
 80049c0:	e02d      	b.n	8004a1e <HAL_RCC_OscConfig+0x4de>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x4a4>
 80049ca:	4b29      	ldr	r3, [pc, #164]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	4a28      	ldr	r2, [pc, #160]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	6713      	str	r3, [r2, #112]	; 0x70
 80049d6:	4b26      	ldr	r3, [pc, #152]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a25      	ldr	r2, [pc, #148]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
 80049e2:	e01c      	b.n	8004a1e <HAL_RCC_OscConfig+0x4de>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b05      	cmp	r3, #5
 80049ea:	d10c      	bne.n	8004a06 <HAL_RCC_OscConfig+0x4c6>
 80049ec:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	4a1f      	ldr	r2, [pc, #124]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80049f2:	f043 0304 	orr.w	r3, r3, #4
 80049f6:	6713      	str	r3, [r2, #112]	; 0x70
 80049f8:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70
 8004a04:	e00b      	b.n	8004a1e <HAL_RCC_OscConfig+0x4de>
 8004a06:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	6713      	str	r3, [r2, #112]	; 0x70
 8004a12:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004a18:	f023 0304 	bic.w	r3, r3, #4
 8004a1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d015      	beq.n	8004a52 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a26:	f7fb fdd3 	bl	80005d0 <HAL_GetTick>
 8004a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a2e:	f7fb fdcf 	bl	80005d0 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e11e      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <HAL_RCC_OscConfig+0x530>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0ee      	beq.n	8004a2e <HAL_RCC_OscConfig+0x4ee>
 8004a50:	e018      	b.n	8004a84 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a52:	f7fb fdbd 	bl	80005d0 <HAL_GetTick>
 8004a56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a58:	e00e      	b.n	8004a78 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5a:	f7fb fdb9 	bl	80005d0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d905      	bls.n	8004a78 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e108      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
 8004a70:	58024400 	.word	0x58024400
 8004a74:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a78:	4b84      	ldr	r3, [pc, #528]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1ea      	bne.n	8004a5a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80f9 	beq.w	8004c80 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a8e:	4b7f      	ldr	r3, [pc, #508]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a96:	2b18      	cmp	r3, #24
 8004a98:	f000 80b4 	beq.w	8004c04 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	f040 8095 	bne.w	8004bd0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b79      	ldr	r3, [pc, #484]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a78      	ldr	r2, [pc, #480]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fb fd8d 	bl	80005d0 <HAL_GetTick>
 8004ab6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fb fd89 	bl	80005d0 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e0da      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004acc:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ad8:	4b6c      	ldr	r3, [pc, #432]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004adc:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <HAL_RCC_OscConfig+0x750>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ae8:	0112      	lsls	r2, r2, #4
 8004aea:	430a      	orrs	r2, r1
 8004aec:	4967      	ldr	r1, [pc, #412]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	628b      	str	r3, [r1, #40]	; 0x28
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	3b01      	subs	r3, #1
 8004af8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	3b01      	subs	r3, #1
 8004b02:	025b      	lsls	r3, r3, #9
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b22:	495a      	ldr	r1, [pc, #360]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004b28:	4b58      	ldr	r3, [pc, #352]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	4a57      	ldr	r2, [pc, #348]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b34:	4b55      	ldr	r3, [pc, #340]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b38:	4b56      	ldr	r3, [pc, #344]	; (8004c94 <HAL_RCC_OscConfig+0x754>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b40:	00d2      	lsls	r2, r2, #3
 8004b42:	4952      	ldr	r1, [pc, #328]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b48:	4b50      	ldr	r3, [pc, #320]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	f023 020c 	bic.w	r2, r3, #12
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	494d      	ldr	r1, [pc, #308]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b5a:	4b4c      	ldr	r3, [pc, #304]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	f023 0202 	bic.w	r2, r3, #2
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	4949      	ldr	r1, [pc, #292]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b6c:	4b47      	ldr	r3, [pc, #284]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4a46      	ldr	r2, [pc, #280]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b78:	4b44      	ldr	r3, [pc, #272]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4a43      	ldr	r2, [pc, #268]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b84:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	4a40      	ldr	r2, [pc, #256]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004b90:	4b3e      	ldr	r3, [pc, #248]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4a3d      	ldr	r2, [pc, #244]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a3a      	ldr	r2, [pc, #232]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fb fd12 	bl	80005d0 <HAL_GetTick>
 8004bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fb fd0e 	bl	80005d0 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e05f      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bc2:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x670>
 8004bce:	e057      	b.n	8004c80 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd0:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2d      	ldr	r2, [pc, #180]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fb fcf8 	bl	80005d0 <HAL_GetTick>
 8004be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fb fcf4 	bl	80005d0 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e045      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bf6:	4b25      	ldr	r3, [pc, #148]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x6a4>
 8004c02:	e03d      	b.n	8004c80 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c04:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c0a:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <HAL_RCC_OscConfig+0x74c>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d031      	beq.n	8004c7c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f003 0203 	and.w	r2, r3, #3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d12a      	bne.n	8004c7c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d122      	bne.n	8004c7c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d11a      	bne.n	8004c7c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	0a5b      	lsrs	r3, r3, #9
 8004c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d111      	bne.n	8004c7c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d108      	bne.n	8004c7c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	0e1b      	lsrs	r3, r3, #24
 8004c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3730      	adds	r7, #48	; 0x30
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	fffffc0c 	.word	0xfffffc0c
 8004c94:	ffff0007 	.word	0xffff0007

08004c98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e19c      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b8a      	ldr	r3, [pc, #552]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d910      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b87      	ldr	r3, [pc, #540]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 020f 	bic.w	r2, r3, #15
 8004cc2:	4985      	ldr	r1, [pc, #532]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b83      	ldr	r3, [pc, #524]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e184      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d010      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	4b7b      	ldr	r3, [pc, #492]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d908      	bls.n	8004d0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cf8:	4b78      	ldr	r3, [pc, #480]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	4975      	ldr	r1, [pc, #468]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d010      	beq.n	8004d38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	4b70      	ldr	r3, [pc, #448]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d908      	bls.n	8004d38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d26:	4b6d      	ldr	r3, [pc, #436]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	496a      	ldr	r1, [pc, #424]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d010      	beq.n	8004d66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699a      	ldr	r2, [r3, #24]
 8004d48:	4b64      	ldr	r3, [pc, #400]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d908      	bls.n	8004d66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d54:	4b61      	ldr	r3, [pc, #388]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	495e      	ldr	r1, [pc, #376]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d010      	beq.n	8004d94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	4b59      	ldr	r3, [pc, #356]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d908      	bls.n	8004d94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d82:	4b56      	ldr	r3, [pc, #344]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	4953      	ldr	r1, [pc, #332]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d010      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	4b4d      	ldr	r3, [pc, #308]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d908      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db0:	4b4a      	ldr	r3, [pc, #296]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f023 020f 	bic.w	r2, r3, #15
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4947      	ldr	r1, [pc, #284]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d055      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004dce:	4b43      	ldr	r3, [pc, #268]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4940      	ldr	r1, [pc, #256]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d107      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004de8:	4b3c      	ldr	r3, [pc, #240]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d121      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0f6      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e00:	4b36      	ldr	r3, [pc, #216]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d115      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0ea      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e18:	4b30      	ldr	r3, [pc, #192]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0de      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e28:	4b2c      	ldr	r3, [pc, #176]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0d6      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e38:	4b28      	ldr	r3, [pc, #160]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f023 0207 	bic.w	r2, r3, #7
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4925      	ldr	r1, [pc, #148]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fb fbc1 	bl	80005d0 <HAL_GetTick>
 8004e4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e52:	f7fb fbbd 	bl	80005d0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0be      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e68:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d1eb      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d010      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	4b14      	ldr	r3, [pc, #80]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d208      	bcs.n	8004ea8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e96:	4b11      	ldr	r3, [pc, #68]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f023 020f 	bic.w	r2, r3, #15
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	490e      	ldr	r1, [pc, #56]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d214      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 020f 	bic.w	r2, r3, #15
 8004ebe:	4906      	ldr	r1, [pc, #24]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e086      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
 8004ed8:	52002000 	.word	0x52002000
 8004edc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d010      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	4b3f      	ldr	r3, [pc, #252]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d208      	bcs.n	8004f0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004efc:	4b3c      	ldr	r3, [pc, #240]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	4939      	ldr	r1, [pc, #228]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d010      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d208      	bcs.n	8004f3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f2a:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	492e      	ldr	r1, [pc, #184]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d010      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	4b28      	ldr	r3, [pc, #160]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d208      	bcs.n	8004f6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f58:	4b25      	ldr	r3, [pc, #148]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	4922      	ldr	r1, [pc, #136]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d010      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69da      	ldr	r2, [r3, #28]
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d208      	bcs.n	8004f98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f86:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	4917      	ldr	r1, [pc, #92]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f98:	f000 f834 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	0a1b      	lsrs	r3, r3, #8
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	4912      	ldr	r1, [pc, #72]	; (8004ff4 <HAL_RCC_ClockConfig+0x35c>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <HAL_RCC_ClockConfig+0x35c>)
 8004fc0:	5cd3      	ldrb	r3, [r2, r3]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fcc:	4a0a      	ldr	r2, [pc, #40]	; (8004ff8 <HAL_RCC_ClockConfig+0x360>)
 8004fce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <HAL_RCC_ClockConfig+0x364>)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <HAL_RCC_ClockConfig+0x368>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb faae 	bl	800053c <HAL_InitTick>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	0800ad20 	.word	0x0800ad20
 8004ff8:	24000414 	.word	0x24000414
 8004ffc:	24000410 	.word	0x24000410
 8005000:	24000408 	.word	0x24000408

08005004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005004:	b480      	push	{r7}
 8005006:	b089      	sub	sp, #36	; 0x24
 8005008:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800500a:	4bb3      	ldr	r3, [pc, #716]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005012:	2b18      	cmp	r3, #24
 8005014:	f200 8155 	bhi.w	80052c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <HAL_RCC_GetSysClockFreq+0x1c>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005085 	.word	0x08005085
 8005024:	080052c3 	.word	0x080052c3
 8005028:	080052c3 	.word	0x080052c3
 800502c:	080052c3 	.word	0x080052c3
 8005030:	080052c3 	.word	0x080052c3
 8005034:	080052c3 	.word	0x080052c3
 8005038:	080052c3 	.word	0x080052c3
 800503c:	080052c3 	.word	0x080052c3
 8005040:	080050ab 	.word	0x080050ab
 8005044:	080052c3 	.word	0x080052c3
 8005048:	080052c3 	.word	0x080052c3
 800504c:	080052c3 	.word	0x080052c3
 8005050:	080052c3 	.word	0x080052c3
 8005054:	080052c3 	.word	0x080052c3
 8005058:	080052c3 	.word	0x080052c3
 800505c:	080052c3 	.word	0x080052c3
 8005060:	080050b1 	.word	0x080050b1
 8005064:	080052c3 	.word	0x080052c3
 8005068:	080052c3 	.word	0x080052c3
 800506c:	080052c3 	.word	0x080052c3
 8005070:	080052c3 	.word	0x080052c3
 8005074:	080052c3 	.word	0x080052c3
 8005078:	080052c3 	.word	0x080052c3
 800507c:	080052c3 	.word	0x080052c3
 8005080:	080050b7 	.word	0x080050b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005084:	4b94      	ldr	r3, [pc, #592]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005090:	4b91      	ldr	r3, [pc, #580]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	08db      	lsrs	r3, r3, #3
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	4a90      	ldr	r2, [pc, #576]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
 80050a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80050a2:	e111      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050a4:	4b8d      	ldr	r3, [pc, #564]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050a6:	61bb      	str	r3, [r7, #24]
    break;
 80050a8:	e10e      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80050aa:	4b8d      	ldr	r3, [pc, #564]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050ac:	61bb      	str	r3, [r7, #24]
    break;
 80050ae:	e10b      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80050b0:	4b8c      	ldr	r3, [pc, #560]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050b2:	61bb      	str	r3, [r7, #24]
    break;
 80050b4:	e108      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050b6:	4b88      	ldr	r3, [pc, #544]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80050c0:	4b85      	ldr	r3, [pc, #532]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050cc:	4b82      	ldr	r3, [pc, #520]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80050d6:	4b80      	ldr	r3, [pc, #512]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050da:	08db      	lsrs	r3, r3, #3
 80050dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	fb02 f303 	mul.w	r3, r2, r3
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80e1 	beq.w	80052bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	f000 8083 	beq.w	8005208 <HAL_RCC_GetSysClockFreq+0x204>
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b02      	cmp	r3, #2
 8005106:	f200 80a1 	bhi.w	800524c <HAL_RCC_GetSysClockFreq+0x248>
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0x114>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d056      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005116:	e099      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005118:	4b6f      	ldr	r3, [pc, #444]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b00      	cmp	r3, #0
 8005122:	d02d      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005124:	4b6c      	ldr	r3, [pc, #432]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	08db      	lsrs	r3, r3, #3
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	4a6b      	ldr	r2, [pc, #428]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
 8005134:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	ee07 3a90 	vmov	s15, r3
 800513c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514e:	4b62      	ldr	r3, [pc, #392]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005162:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800517e:	e087      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80052ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800518e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005192:	4b51      	ldr	r3, [pc, #324]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c2:	e065      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80052f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d6:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005206:	e043      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	eddf 6a38 	vldr	s13, [pc, #224]	; 80052f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521a:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522a:	ed97 6a02 	vldr	s12, [r7, #8]
 800522e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800523e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800524a:	e021      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005256:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800525a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525e:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005272:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800528e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	0a5b      	lsrs	r3, r3, #9
 8005296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529a:	3301      	adds	r3, #1
 800529c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b4:	ee17 3a90 	vmov	r3, s15
 80052b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80052ba:	e005      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	61bb      	str	r3, [r7, #24]
    break;
 80052c0:	e002      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052c4:	61bb      	str	r3, [r7, #24]
    break;
 80052c6:	bf00      	nop
  }

  return sysclockfreq;
 80052c8:	69bb      	ldr	r3, [r7, #24]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3724      	adds	r7, #36	; 0x24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	58024400 	.word	0x58024400
 80052dc:	03d09000 	.word	0x03d09000
 80052e0:	003d0900 	.word	0x003d0900
 80052e4:	017d7840 	.word	0x017d7840
 80052e8:	46000000 	.word	0x46000000
 80052ec:	4c742400 	.word	0x4c742400
 80052f0:	4a742400 	.word	0x4a742400
 80052f4:	4bbebc20 	.word	0x4bbebc20

080052f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80052fe:	f7ff fe81 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 8005302:	4602      	mov	r2, r0
 8005304:	4b10      	ldr	r3, [pc, #64]	; (8005348 <HAL_RCC_GetHCLKFreq+0x50>)
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	0a1b      	lsrs	r3, r3, #8
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	490f      	ldr	r1, [pc, #60]	; (800534c <HAL_RCC_GetHCLKFreq+0x54>)
 8005310:	5ccb      	ldrb	r3, [r1, r3]
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <HAL_RCC_GetHCLKFreq+0x50>)
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	4a09      	ldr	r2, [pc, #36]	; (800534c <HAL_RCC_GetHCLKFreq+0x54>)
 8005326:	5cd3      	ldrb	r3, [r2, r3]
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a07      	ldr	r2, [pc, #28]	; (8005350 <HAL_RCC_GetHCLKFreq+0x58>)
 8005334:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005336:	4a07      	ldr	r2, [pc, #28]	; (8005354 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <HAL_RCC_GetHCLKFreq+0x58>)
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	58024400 	.word	0x58024400
 800534c:	0800ad20 	.word	0x0800ad20
 8005350:	24000414 	.word	0x24000414
 8005354:	24000410 	.word	0x24000410

08005358 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005360:	2300      	movs	r3, #0
 8005362:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005364:	2300      	movs	r3, #0
 8005366:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d03f      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005378:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800537c:	d02a      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800537e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005382:	d824      	bhi.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005388:	d018      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800538a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800538e:	d81e      	bhi.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005398:	d007      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800539a:	e018      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539c:	4bab      	ldr	r3, [pc, #684]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	4aaa      	ldr	r2, [pc, #680]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053a8:	e015      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3304      	adds	r3, #4
 80053ae:	2102      	movs	r1, #2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 feff 	bl	80071b4 <RCCEx_PLL2_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053ba:	e00c      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3324      	adds	r3, #36	; 0x24
 80053c0:	2102      	movs	r1, #2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 ffa8 	bl	8007318 <RCCEx_PLL3_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053cc:	e003      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	75fb      	strb	r3, [r7, #23]
      break;
 80053d2:	e000      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80053d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053dc:	4b9b      	ldr	r3, [pc, #620]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e8:	4998      	ldr	r1, [pc, #608]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	650b      	str	r3, [r1, #80]	; 0x50
 80053ee:	e001      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d03d      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	2b04      	cmp	r3, #4
 8005406:	d826      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005425 	.word	0x08005425
 8005414:	08005433 	.word	0x08005433
 8005418:	08005445 	.word	0x08005445
 800541c:	0800545d 	.word	0x0800545d
 8005420:	0800545d 	.word	0x0800545d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005424:	4b89      	ldr	r3, [pc, #548]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	4a88      	ldr	r2, [pc, #544]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800542a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005430:	e015      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f001 febb 	bl	80071b4 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005442:	e00c      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3324      	adds	r3, #36	; 0x24
 8005448:	2100      	movs	r1, #0
 800544a:	4618      	mov	r0, r3
 800544c:	f001 ff64 	bl	8007318 <RCCEx_PLL3_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005454:	e003      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	75fb      	strb	r3, [r7, #23]
      break;
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800545c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005464:	4b79      	ldr	r3, [pc, #484]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005468:	f023 0207 	bic.w	r2, r3, #7
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	4976      	ldr	r1, [pc, #472]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005472:	4313      	orrs	r3, r2
 8005474:	650b      	str	r3, [r1, #80]	; 0x50
 8005476:	e001      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005484:	2b00      	cmp	r3, #0
 8005486:	d051      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800548e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005492:	d036      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005494:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005498:	d830      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800549a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800549e:	d032      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80054a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054a4:	d82a      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80054a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054aa:	d02e      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80054ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054b0:	d824      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80054b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b6:	d018      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x192>
 80054b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054bc:	d81e      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x172>
 80054c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c6:	d007      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80054c8:	e018      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ca:	4b60      	ldr	r3, [pc, #384]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	4a5f      	ldr	r2, [pc, #380]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054d6:	e019      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 fe68 	bl	80071b4 <RCCEx_PLL2_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054e8:	e010      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3324      	adds	r3, #36	; 0x24
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 ff11 	bl	8007318 <RCCEx_PLL3_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054fa:	e007      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005500:	e004      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005502:	bf00      	nop
 8005504:	e002      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800550a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005512:	4b4e      	ldr	r3, [pc, #312]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005516:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005520:	494a      	ldr	r1, [pc, #296]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005522:	4313      	orrs	r3, r2
 8005524:	658b      	str	r3, [r1, #88]	; 0x58
 8005526:	e001      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005528:	7dfb      	ldrb	r3, [r7, #23]
 800552a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005534:	2b00      	cmp	r3, #0
 8005536:	d051      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800553e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005542:	d036      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005544:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005548:	d830      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800554a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800554e:	d032      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005554:	d82a      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800555a:	d02e      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x262>
 800555c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005560:	d824      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005566:	d018      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800556c:	d81e      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005572:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005576:	d007      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005578:	e018      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557a:	4b34      	ldr	r3, [pc, #208]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	4a33      	ldr	r2, [pc, #204]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005586:	e019      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	2100      	movs	r1, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f001 fe10 	bl	80071b4 <RCCEx_PLL2_Config>
 8005594:	4603      	mov	r3, r0
 8005596:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005598:	e010      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3324      	adds	r3, #36	; 0x24
 800559e:	2100      	movs	r1, #0
 80055a0:	4618      	mov	r0, r3
 80055a2:	f001 feb9 	bl	8007318 <RCCEx_PLL3_Config>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055aa:	e007      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	75fb      	strb	r3, [r7, #23]
      break;
 80055b0:	e004      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80055b2:	bf00      	nop
 80055b4:	e002      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80055b6:	bf00      	nop
 80055b8:	e000      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80055ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055c2:	4b22      	ldr	r3, [pc, #136]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055d0:	491e      	ldr	r1, [pc, #120]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	658b      	str	r3, [r1, #88]	; 0x58
 80055d6:	e001      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d035      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ec:	2b30      	cmp	r3, #48	; 0x30
 80055ee:	d01c      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80055f0:	2b30      	cmp	r3, #48	; 0x30
 80055f2:	d817      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d00c      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d813      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d016      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005600:	2b10      	cmp	r3, #16
 8005602:	d10f      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005604:	4b11      	ldr	r3, [pc, #68]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	4a10      	ldr	r2, [pc, #64]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800560a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800560e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005610:	e00e      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3304      	adds	r3, #4
 8005616:	2102      	movs	r1, #2
 8005618:	4618      	mov	r0, r3
 800561a:	f001 fdcb 	bl	80071b4 <RCCEx_PLL2_Config>
 800561e:	4603      	mov	r3, r0
 8005620:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005622:	e005      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
      break;
 8005628:	e002      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800562a:	bf00      	nop
 800562c:	e000      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800562e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005630:	7dfb      	ldrb	r3, [r7, #23]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10c      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005642:	4902      	ldr	r1, [pc, #8]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005644:	4313      	orrs	r3, r2
 8005646:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005648:	e004      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800564a:	bf00      	nop
 800564c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d047      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005668:	d030      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800566a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800566e:	d82a      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005670:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005674:	d02c      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005676:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800567a:	d824      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800567c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005680:	d018      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005686:	d81e      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800568c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005690:	d007      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005692:	e018      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005694:	4bac      	ldr	r3, [pc, #688]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	4aab      	ldr	r2, [pc, #684]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800569a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800569e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056a0:	e017      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3304      	adds	r3, #4
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 fd83 	bl	80071b4 <RCCEx_PLL2_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056b2:	e00e      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3324      	adds	r3, #36	; 0x24
 80056b8:	2100      	movs	r1, #0
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 fe2c 	bl	8007318 <RCCEx_PLL3_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056c4:	e005      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	75fb      	strb	r3, [r7, #23]
      break;
 80056ca:	e002      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80056cc:	bf00      	nop
 80056ce:	e000      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80056d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056d8:	4b9b      	ldr	r3, [pc, #620]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e4:	4998      	ldr	r1, [pc, #608]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	650b      	str	r3, [r1, #80]	; 0x50
 80056ea:	e001      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d049      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005704:	d02e      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800570a:	d828      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800570c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005710:	d02a      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005712:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005716:	d822      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005718:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800571c:	d026      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800571e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005722:	d81c      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005728:	d010      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800572a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800572e:	d816      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01d      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d111      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3304      	adds	r3, #4
 800573e:	2101      	movs	r1, #1
 8005740:	4618      	mov	r0, r3
 8005742:	f001 fd37 	bl	80071b4 <RCCEx_PLL2_Config>
 8005746:	4603      	mov	r3, r0
 8005748:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800574a:	e012      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3324      	adds	r3, #36	; 0x24
 8005750:	2101      	movs	r1, #1
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fde0 	bl	8007318 <RCCEx_PLL3_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800575c:	e009      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	75fb      	strb	r3, [r7, #23]
      break;
 8005762:	e006      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005764:	bf00      	nop
 8005766:	e004      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005768:	bf00      	nop
 800576a:	e002      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800576c:	bf00      	nop
 800576e:	e000      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005778:	4b73      	ldr	r3, [pc, #460]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800577a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005784:	4970      	ldr	r1, [pc, #448]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005786:	4313      	orrs	r3, r2
 8005788:	650b      	str	r3, [r1, #80]	; 0x50
 800578a:	e001      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d04b      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057a6:	d02e      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80057a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057ac:	d828      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80057ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b2:	d02a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b8:	d822      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80057ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057be:	d026      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80057c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057c4:	d81c      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80057c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ca:	d010      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x496>
 80057cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d0:	d816      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01d      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80057d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057da:	d111      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	2101      	movs	r1, #1
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 fce6 	bl	80071b4 <RCCEx_PLL2_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80057ec:	e012      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3324      	adds	r3, #36	; 0x24
 80057f2:	2101      	movs	r1, #1
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 fd8f 	bl	8007318 <RCCEx_PLL3_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80057fe:	e009      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	75fb      	strb	r3, [r7, #23]
      break;
 8005804:	e006      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005806:	bf00      	nop
 8005808:	e004      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800580a:	bf00      	nop
 800580c:	e002      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800580e:	bf00      	nop
 8005810:	e000      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10a      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800581a:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800581c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005828:	4947      	ldr	r1, [pc, #284]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800582a:	4313      	orrs	r3, r2
 800582c:	658b      	str	r3, [r1, #88]	; 0x58
 800582e:	e001      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02f      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005848:	d00e      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800584a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800584e:	d814      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005858:	d10f      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585a:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	4a3a      	ldr	r2, [pc, #232]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005866:	e00c      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fca0 	bl	80071b4 <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005878:	e003      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	75fb      	strb	r3, [r7, #23]
      break;
 800587e:	e000      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005882:	7dfb      	ldrb	r3, [r7, #23]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005888:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800588a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005894:	492c      	ldr	r1, [pc, #176]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005896:	4313      	orrs	r3, r2
 8005898:	650b      	str	r3, [r1, #80]	; 0x50
 800589a:	e001      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d032      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d81b      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x594>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058f3 	.word	0x080058f3
 80058c0:	080058cd 	.word	0x080058cd
 80058c4:	080058db 	.word	0x080058db
 80058c8:	080058f3 	.word	0x080058f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058cc:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	4a1d      	ldr	r2, [pc, #116]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80058d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80058d8:	e00c      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	2102      	movs	r1, #2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 fc67 	bl	80071b4 <RCCEx_PLL2_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80058ea:	e003      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	75fb      	strb	r3, [r7, #23]
      break;
 80058f0:	e000      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80058f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	f023 0203 	bic.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	4910      	ldr	r1, [pc, #64]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005908:	4313      	orrs	r3, r2
 800590a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800590c:	e001      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 808a 	beq.w	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a09      	ldr	r2, [pc, #36]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800592c:	f7fa fe50 	bl	80005d0 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005932:	e00d      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005934:	f7fa fe4c 	bl	80005d0 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	; 0x64
 8005940:	d906      	bls.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	75fb      	strb	r3, [r7, #23]
        break;
 8005946:	e009      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005948:	58024400 	.word	0x58024400
 800594c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005950:	4bb9      	ldr	r3, [pc, #740]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0eb      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d166      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005962:	4bb6      	ldr	r3, [pc, #728]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005964:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800596c:	4053      	eors	r3, r2
 800596e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005972:	2b00      	cmp	r3, #0
 8005974:	d013      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005976:	4bb1      	ldr	r3, [pc, #708]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005980:	4bae      	ldr	r3, [pc, #696]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	4aad      	ldr	r2, [pc, #692]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800598c:	4bab      	ldr	r3, [pc, #684]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	4aaa      	ldr	r2, [pc, #680]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005996:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005998:	4aa8      	ldr	r2, [pc, #672]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a8:	d115      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059aa:	f7fa fe11 	bl	80005d0 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059b0:	e00b      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fa fe0d 	bl	80005d0 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d902      	bls.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	75fb      	strb	r3, [r7, #23]
            break;
 80059c8:	e005      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059ca:	4b9c      	ldr	r3, [pc, #624]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0ed      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d126      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ea:	d10d      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80059ec:	4b93      	ldr	r3, [pc, #588]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059fa:	0919      	lsrs	r1, r3, #4
 80059fc:	4b90      	ldr	r3, [pc, #576]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059fe:	400b      	ands	r3, r1
 8005a00:	498e      	ldr	r1, [pc, #568]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]
 8005a06:	e005      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005a08:	4b8c      	ldr	r3, [pc, #560]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	4a8b      	ldr	r2, [pc, #556]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a12:	6113      	str	r3, [r2, #16]
 8005a14:	4b89      	ldr	r3, [pc, #548]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a22:	4986      	ldr	r1, [pc, #536]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	670b      	str	r3, [r1, #112]	; 0x70
 8005a28:	e004      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
 8005a2c:	75bb      	strb	r3, [r7, #22]
 8005a2e:	e001      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d07e      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a44:	2b28      	cmp	r3, #40	; 0x28
 8005a46:	d867      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005a48:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005b1f 	.word	0x08005b1f
 8005a54:	08005b19 	.word	0x08005b19
 8005a58:	08005b19 	.word	0x08005b19
 8005a5c:	08005b19 	.word	0x08005b19
 8005a60:	08005b19 	.word	0x08005b19
 8005a64:	08005b19 	.word	0x08005b19
 8005a68:	08005b19 	.word	0x08005b19
 8005a6c:	08005b19 	.word	0x08005b19
 8005a70:	08005af5 	.word	0x08005af5
 8005a74:	08005b19 	.word	0x08005b19
 8005a78:	08005b19 	.word	0x08005b19
 8005a7c:	08005b19 	.word	0x08005b19
 8005a80:	08005b19 	.word	0x08005b19
 8005a84:	08005b19 	.word	0x08005b19
 8005a88:	08005b19 	.word	0x08005b19
 8005a8c:	08005b19 	.word	0x08005b19
 8005a90:	08005b07 	.word	0x08005b07
 8005a94:	08005b19 	.word	0x08005b19
 8005a98:	08005b19 	.word	0x08005b19
 8005a9c:	08005b19 	.word	0x08005b19
 8005aa0:	08005b19 	.word	0x08005b19
 8005aa4:	08005b19 	.word	0x08005b19
 8005aa8:	08005b19 	.word	0x08005b19
 8005aac:	08005b19 	.word	0x08005b19
 8005ab0:	08005b1f 	.word	0x08005b1f
 8005ab4:	08005b19 	.word	0x08005b19
 8005ab8:	08005b19 	.word	0x08005b19
 8005abc:	08005b19 	.word	0x08005b19
 8005ac0:	08005b19 	.word	0x08005b19
 8005ac4:	08005b19 	.word	0x08005b19
 8005ac8:	08005b19 	.word	0x08005b19
 8005acc:	08005b19 	.word	0x08005b19
 8005ad0:	08005b1f 	.word	0x08005b1f
 8005ad4:	08005b19 	.word	0x08005b19
 8005ad8:	08005b19 	.word	0x08005b19
 8005adc:	08005b19 	.word	0x08005b19
 8005ae0:	08005b19 	.word	0x08005b19
 8005ae4:	08005b19 	.word	0x08005b19
 8005ae8:	08005b19 	.word	0x08005b19
 8005aec:	08005b19 	.word	0x08005b19
 8005af0:	08005b1f 	.word	0x08005b1f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	2101      	movs	r1, #1
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 fb5a 	bl	80071b4 <RCCEx_PLL2_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b04:	e00c      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3324      	adds	r3, #36	; 0x24
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 fc03 	bl	8007318 <RCCEx_PLL3_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b16:	e003      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b1c:	e000      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8005b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b26:	4b45      	ldr	r3, [pc, #276]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b32:	4942      	ldr	r1, [pc, #264]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	654b      	str	r3, [r1, #84]	; 0x54
 8005b38:	e001      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
 8005b3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d037      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d820      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b9b 	.word	0x08005b9b
 8005b5c:	08005b71 	.word	0x08005b71
 8005b60:	08005b83 	.word	0x08005b83
 8005b64:	08005b9b 	.word	0x08005b9b
 8005b68:	08005b9b 	.word	0x08005b9b
 8005b6c:	08005b9b 	.word	0x08005b9b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	2101      	movs	r1, #1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fb1c 	bl	80071b4 <RCCEx_PLL2_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b80:	e00c      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3324      	adds	r3, #36	; 0x24
 8005b86:	2101      	movs	r1, #1
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fbc5 	bl	8007318 <RCCEx_PLL3_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b92:	e003      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	75fb      	strb	r3, [r7, #23]
      break;
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8005b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ba2:	4b26      	ldr	r3, [pc, #152]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba6:	f023 0207 	bic.w	r2, r3, #7
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	4923      	ldr	r1, [pc, #140]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	654b      	str	r3, [r1, #84]	; 0x54
 8005bb4:	e001      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d040      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bcc:	2b05      	cmp	r3, #5
 8005bce:	d821      	bhi.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005bd0:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd6:	bf00      	nop
 8005bd8:	08005c1b 	.word	0x08005c1b
 8005bdc:	08005bf1 	.word	0x08005bf1
 8005be0:	08005c03 	.word	0x08005c03
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c1b 	.word	0x08005c1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 fadc 	bl	80071b4 <RCCEx_PLL2_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c00:	e00c      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3324      	adds	r3, #36	; 0x24
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fb85 	bl	8007318 <RCCEx_PLL3_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c12:	e003      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	75fb      	strb	r3, [r7, #23]
      break;
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8005c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d110      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c22:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c26:	f023 0207 	bic.w	r2, r3, #7
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c30:	4902      	ldr	r1, [pc, #8]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	658b      	str	r3, [r1, #88]	; 0x58
 8005c36:	e007      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8005c38:	58024800 	.word	0x58024800
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d04b      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c5e:	d02e      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c64:	d828      	bhi.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6a:	d02a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c70:	d822      	bhi.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005c72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c76:	d026      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005c78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c7c:	d81c      	bhi.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c82:	d010      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8005c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c88:	d816      	bhi.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01d      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c92:	d111      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 fa8a 	bl	80071b4 <RCCEx_PLL2_Config>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ca4:	e012      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3324      	adds	r3, #36	; 0x24
 8005caa:	2102      	movs	r1, #2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 fb33 	bl	8007318 <RCCEx_PLL3_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005cb6:	e009      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	75fb      	strb	r3, [r7, #23]
      break;
 8005cbc:	e006      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e004      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005cc2:	bf00      	nop
 8005cc4:	e002      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005cc6:	bf00      	nop
 8005cc8:	e000      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cd2:	4bb2      	ldr	r3, [pc, #712]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	49ae      	ldr	r1, [pc, #696]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	654b      	str	r3, [r1, #84]	; 0x54
 8005ce6:	e001      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d04b      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cfe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d02:	d02e      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005d04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d08:	d828      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0e:	d02a      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d14:	d822      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d1a:	d026      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d20:	d81c      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d26:	d010      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8005d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2c:	d816      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d01d      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d36:	d111      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 fa38 	bl	80071b4 <RCCEx_PLL2_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d48:	e012      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3324      	adds	r3, #36	; 0x24
 8005d4e:	2102      	movs	r1, #2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 fae1 	bl	8007318 <RCCEx_PLL3_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d5a:	e009      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d60:	e006      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005d62:	bf00      	nop
 8005d64:	e004      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005d66:	bf00      	nop
 8005d68:	e002      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d76:	4b89      	ldr	r3, [pc, #548]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d84:	4985      	ldr	r1, [pc, #532]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	658b      	str	r3, [r1, #88]	; 0x58
 8005d8a:	e001      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d04b      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005da2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005da6:	d02e      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005da8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dac:	d828      	bhi.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db2:	d02a      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db8:	d822      	bhi.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005dba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005dbe:	d026      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005dc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005dc4:	d81c      	bhi.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dca:	d010      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8005dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dd0:	d816      	bhi.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01d      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8005dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dda:	d111      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	2100      	movs	r1, #0
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f9e6 	bl	80071b4 <RCCEx_PLL2_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005dec:	e012      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3324      	adds	r3, #36	; 0x24
 8005df2:	2102      	movs	r1, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fa8f 	bl	8007318 <RCCEx_PLL3_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005dfe:	e009      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	75fb      	strb	r3, [r7, #23]
      break;
 8005e04:	e006      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005e06:	bf00      	nop
 8005e08:	e004      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005e0a:	bf00      	nop
 8005e0c:	e002      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e1a:	4b60      	ldr	r3, [pc, #384]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e28:	495c      	ldr	r1, [pc, #368]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	658b      	str	r3, [r1, #88]	; 0x58
 8005e2e:	e001      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d018      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e48:	d10a      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3324      	adds	r3, #36	; 0x24
 8005e4e:	2102      	movs	r1, #2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fa61 	bl	8007318 <RCCEx_PLL3_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005e60:	4b4e      	ldr	r3, [pc, #312]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e6c:	494b      	ldr	r1, [pc, #300]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e88:	d10a      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3324      	adds	r3, #36	; 0x24
 8005e8e:	2102      	movs	r1, #2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 fa41 	bl	8007318 <RCCEx_PLL3_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ea0:	4b3e      	ldr	r3, [pc, #248]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eae:	493b      	ldr	r1, [pc, #236]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d034      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eca:	d01d      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ed0:	d817      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eda:	d009      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005edc:	e011      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 f965 	bl	80071b4 <RCCEx_PLL2_Config>
 8005eea:	4603      	mov	r3, r0
 8005eec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005eee:	e00c      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3324      	adds	r3, #36	; 0x24
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fa0e 	bl	8007318 <RCCEx_PLL3_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	75fb      	strb	r3, [r7, #23]
      break;
 8005f06:	e000      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f10:	4b22      	ldr	r3, [pc, #136]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f1e:	491f      	ldr	r1, [pc, #124]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	658b      	str	r3, [r1, #88]	; 0x58
 8005f24:	e001      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d036      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f40:	d01c      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005f42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f46:	d816      	bhi.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f4c:	d003      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f52:	d007      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005f54:	e00f      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f56:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	4a10      	ldr	r2, [pc, #64]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f62:	e00c      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3324      	adds	r3, #36	; 0x24
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 f9d4 	bl	8007318 <RCCEx_PLL3_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f74:	e003      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	75fb      	strb	r3, [r7, #23]
      break;
 8005f7a:	e000      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8005f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10d      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f92:	4902      	ldr	r1, [pc, #8]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	654b      	str	r3, [r1, #84]	; 0x54
 8005f98:	e004      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8005f9a:	bf00      	nop
 8005f9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d029      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fbc:	d007      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005fbe:	e00f      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc0:	4b61      	ldr	r3, [pc, #388]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	4a60      	ldr	r2, [pc, #384]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005fcc:	e00b      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 f8ed 	bl	80071b4 <RCCEx_PLL2_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005fde:	e002      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d109      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005fec:	4b56      	ldr	r3, [pc, #344]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff8:	4953      	ldr	r1, [pc, #332]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ffe:	e001      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3324      	adds	r3, #36	; 0x24
 8006014:	2102      	movs	r1, #2
 8006016:	4618      	mov	r0, r3
 8006018:	f001 f97e 	bl	8007318 <RCCEx_PLL3_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d030      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800603a:	d017      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800603c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006040:	d811      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006046:	d013      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604c:	d80b      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d010      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006056:	d106      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006058:	4b3b      	ldr	r3, [pc, #236]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	4a3a      	ldr	r2, [pc, #232]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800605e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006064:	e007      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
      break;
 800606a:	e004      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800606c:	bf00      	nop
 800606e:	e002      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006070:	bf00      	nop
 8006072:	e000      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800607c:	4b32      	ldr	r3, [pc, #200]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800607e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006088:	492f      	ldr	r1, [pc, #188]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800608a:	4313      	orrs	r3, r2
 800608c:	654b      	str	r3, [r1, #84]	; 0x54
 800608e:	e001      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80060a0:	4b29      	ldr	r3, [pc, #164]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ac:	4926      	ldr	r1, [pc, #152]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d008      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060be:	4b22      	ldr	r3, [pc, #136]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ca:	491f      	ldr	r1, [pc, #124]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00d      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060dc:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	4a19      	ldr	r2, [pc, #100]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060e6:	6113      	str	r3, [r2, #16]
 80060e8:	4b17      	ldr	r3, [pc, #92]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060f2:	4915      	ldr	r1, [pc, #84]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	da08      	bge.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006100:	4b11      	ldr	r3, [pc, #68]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006104:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610c:	490e      	ldr	r1, [pc, #56]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800610e:	4313      	orrs	r3, r2
 8006110:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d009      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800611e:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800612c:	4906      	ldr	r1, [pc, #24]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800612e:	4313      	orrs	r3, r2
 8006130:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006132:	7dbb      	ldrb	r3, [r7, #22]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	e000      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	58024400 	.word	0x58024400

0800614c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b090      	sub	sp, #64	; 0x40
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800615a:	f040 8089 	bne.w	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800615e:	4b95      	ldr	r3, [pc, #596]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	633b      	str	r3, [r7, #48]	; 0x30
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	2b04      	cmp	r3, #4
 800616c:	d87d      	bhi.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800616e:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	08006189 	.word	0x08006189
 8006178:	080061ad 	.word	0x080061ad
 800617c:	080061d1 	.word	0x080061d1
 8006180:	08006265 	.word	0x08006265
 8006184:	080061f5 	.word	0x080061f5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006188:	4b8a      	ldr	r3, [pc, #552]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006194:	d107      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800619a:	4618      	mov	r0, r3
 800619c:	f000 feb8 	bl	8006f10 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061a4:	e3ed      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061aa:	e3ea      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061ac:	4b81      	ldr	r3, [pc, #516]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061b8:	d107      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ba:	f107 0318 	add.w	r3, r7, #24
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fbfe 	bl	80069c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061c8:	e3db      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061ce:	e3d8      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061d0:	4b78      	ldr	r3, [pc, #480]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061dc:	d107      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061de:	f107 030c 	add.w	r3, r7, #12
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fd40 	bl	8006c68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061ec:	e3c9      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061f2:	e3c6      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80061f4:	4b6f      	ldr	r3, [pc, #444]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80061f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061fe:	4b6d      	ldr	r3, [pc, #436]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b04      	cmp	r3, #4
 8006208:	d10c      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800620a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006210:	4b68      	ldr	r3, [pc, #416]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	08db      	lsrs	r3, r3, #3
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	4a67      	ldr	r2, [pc, #412]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800621c:	fa22 f303 	lsr.w	r3, r2, r3
 8006220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006222:	e01e      	b.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006224:	4b63      	ldr	r3, [pc, #396]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006230:	d106      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006238:	d102      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800623a:	4b60      	ldr	r3, [pc, #384]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800623c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800623e:	e010      	b.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006240:	4b5c      	ldr	r3, [pc, #368]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800624c:	d106      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800624e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006254:	d102      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006256:	4b5a      	ldr	r3, [pc, #360]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800625a:	e002      	b.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006260:	e38f      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006262:	e38e      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006264:	4b57      	ldr	r3, [pc, #348]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006268:	e38b      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800626e:	e388      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006276:	f040 80a7 	bne.w	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800627a:	4b4e      	ldr	r3, [pc, #312]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800627c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006282:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800628a:	d054      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006292:	f200 808b 	bhi.w	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800629c:	f000 8083 	beq.w	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062a6:	f200 8081 	bhi.w	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062b0:	d02f      	beq.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062b8:	d878      	bhi.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062c6:	d012      	beq.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80062c8:	e070      	b.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062ca:	4b3a      	ldr	r3, [pc, #232]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062d6:	d107      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fe17 	bl	8006f10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062e6:	e34c      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062ec:	e349      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062ee:	4b31      	ldr	r3, [pc, #196]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062fa:	d107      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062fc:	f107 0318 	add.w	r3, r7, #24
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fb5d 	bl	80069c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800630a:	e33a      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006310:	e337      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006312:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800631a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631e:	d107      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006320:	f107 030c 	add.w	r3, r7, #12
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fc9f 	bl	8006c68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800632e:	e328      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006334:	e325      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006336:	4b1f      	ldr	r3, [pc, #124]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800633e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006340:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b04      	cmp	r3, #4
 800634a:	d10c      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800634c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006352:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	08db      	lsrs	r3, r3, #3
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800635e:	fa22 f303 	lsr.w	r3, r2, r3
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006364:	e01e      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006366:	4b13      	ldr	r3, [pc, #76]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006372:	d106      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800637a:	d102      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800637e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006380:	e010      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006382:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800638e:	d106      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006396:	d102      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006398:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800639a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639c:	e002      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80063a2:	e2ee      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80063a4:	e2ed      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80063a6:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80063a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063aa:	e2ea      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063b0:	e2e7      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80063b2:	bf00      	nop
 80063b4:	58024400 	.word	0x58024400
 80063b8:	03d09000 	.word	0x03d09000
 80063bc:	003d0900 	.word	0x003d0900
 80063c0:	017d7840 	.word	0x017d7840
 80063c4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ce:	f040 809c 	bne.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80063d2:	4b9e      	ldr	r3, [pc, #632]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80063d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80063da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e2:	d054      	beq.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ea:	f200 808b 	bhi.w	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063f4:	f000 8083 	beq.w	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063fe:	f200 8081 	bhi.w	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006408:	d02f      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006410:	d878      	bhi.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800641e:	d012      	beq.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006420:	e070      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006422:	4b8a      	ldr	r3, [pc, #552]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800642e:	d107      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fd6b 	bl	8006f10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800643e:	e2a0      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006444:	e29d      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006446:	4b81      	ldr	r3, [pc, #516]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800644e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006452:	d107      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006454:	f107 0318 	add.w	r3, r7, #24
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fab1 	bl	80069c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006462:	e28e      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006468:	e28b      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800646a:	4b78      	ldr	r3, [pc, #480]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006476:	d107      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006478:	f107 030c 	add.w	r3, r7, #12
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fbf3 	bl	8006c68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006486:	e27c      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800648c:	e279      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800648e:	4b6f      	ldr	r3, [pc, #444]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006496:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006498:	4b6c      	ldr	r3, [pc, #432]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d10c      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80064a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064aa:	4b68      	ldr	r3, [pc, #416]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	08db      	lsrs	r3, r3, #3
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	4a66      	ldr	r2, [pc, #408]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064b6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064bc:	e01e      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064be:	4b63      	ldr	r3, [pc, #396]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ca:	d106      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80064cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064d2:	d102      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80064d4:	4b5f      	ldr	r3, [pc, #380]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d8:	e010      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064da:	4b5c      	ldr	r3, [pc, #368]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e6:	d106      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80064e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ee:	d102      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80064f0:	4b59      	ldr	r3, [pc, #356]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064f4:	e002      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80064fa:	e242      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80064fc:	e241      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80064fe:	4b57      	ldr	r3, [pc, #348]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006502:	e23e      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006508:	e23b      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006510:	f040 80a6 	bne.w	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006514:	4b4d      	ldr	r3, [pc, #308]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006518:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800651c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006524:	d054      	beq.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800652c:	f200 808b 	bhi.w	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006532:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006536:	f000 8083 	beq.w	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006540:	f200 8081 	bhi.w	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800654a:	d02f      	beq.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800654c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006552:	d878      	bhi.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006560:	d012      	beq.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8006562:	e070      	b.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006564:	4b39      	ldr	r3, [pc, #228]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006570:	d107      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fcca 	bl	8006f10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006580:	e1ff      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006586:	e1fc      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006588:	4b30      	ldr	r3, [pc, #192]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006594:	d107      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006596:	f107 0318 	add.w	r3, r7, #24
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fa10 	bl	80069c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065a4:	e1ed      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065aa:	e1ea      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065ac:	4b27      	ldr	r3, [pc, #156]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b8:	d107      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ba:	f107 030c 	add.w	r3, r7, #12
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fb52 	bl	8006c68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065c8:	e1db      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ce:	e1d8      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80065d0:	4b1e      	ldr	r3, [pc, #120]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80065d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065d8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065da:	4b1c      	ldr	r3, [pc, #112]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d10c      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80065e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065ec:	4b17      	ldr	r3, [pc, #92]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	08db      	lsrs	r3, r3, #3
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	4a16      	ldr	r2, [pc, #88]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fe:	e01e      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006600:	4b12      	ldr	r3, [pc, #72]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660c:	d106      	bne.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800660e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006614:	d102      	bne.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800661a:	e010      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800661c:	4b0b      	ldr	r3, [pc, #44]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006628:	d106      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006630:	d102      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006636:	e002      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800663c:	e1a1      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800663e:	e1a0      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006644:	e19d      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664a:	e19a      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800664c:	58024400 	.word	0x58024400
 8006650:	03d09000 	.word	0x03d09000
 8006654:	003d0900 	.word	0x003d0900
 8006658:	017d7840 	.word	0x017d7840
 800665c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006666:	d173      	bne.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006668:	4b9a      	ldr	r3, [pc, #616]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800666a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006670:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006678:	d02f      	beq.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006680:	d863      	bhi.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800668e:	d012      	beq.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006690:	e05b      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006692:	4b90      	ldr	r3, [pc, #576]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800669a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800669e:	d107      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066a0:	f107 0318 	add.w	r3, r7, #24
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 f98b 	bl	80069c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066ae:	e168      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066b4:	e165      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066b6:	4b87      	ldr	r3, [pc, #540]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c2:	d107      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066c4:	f107 030c 	add.w	r3, r7, #12
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 facd 	bl	8006c68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066d2:	e156      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066d8:	e153      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066da:	4b7e      	ldr	r3, [pc, #504]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80066dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066e4:	4b7b      	ldr	r3, [pc, #492]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d10c      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066f6:	4b77      	ldr	r3, [pc, #476]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	08db      	lsrs	r3, r3, #3
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	4a75      	ldr	r2, [pc, #468]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006702:	fa22 f303 	lsr.w	r3, r2, r3
 8006706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006708:	e01e      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800670a:	4b72      	ldr	r3, [pc, #456]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006716:	d106      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800671e:	d102      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006720:	4b6e      	ldr	r3, [pc, #440]	; (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006724:	e010      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006726:	4b6b      	ldr	r3, [pc, #428]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006732:	d106      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800673a:	d102      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800673c:	4b68      	ldr	r3, [pc, #416]	; (80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006740:	e002      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006746:	e11c      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006748:	e11b      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800674e:	e118      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006756:	d133      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006758:	4b5e      	ldr	r3, [pc, #376]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800675a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006760:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800676e:	d012      	beq.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006770:	e023      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006772:	4b58      	ldr	r3, [pc, #352]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800677e:	d107      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fbc3 	bl	8006f10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800678e:	e0f8      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006794:	e0f5      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006796:	4b4f      	ldr	r3, [pc, #316]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800679e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067a2:	d107      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067a4:	f107 0318 	add.w	r3, r7, #24
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 f909 	bl	80069c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067b2:	e0e6      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067b8:	e0e3      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067be:	e0e0      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c6:	f040 808d 	bne.w	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80067ca:	4b42      	ldr	r3, [pc, #264]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80067cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80067d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067da:	d06b      	beq.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067e2:	d874      	bhi.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ea:	d056      	beq.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f2:	d86c      	bhi.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067fa:	d03b      	beq.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006802:	d864      	bhi.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800680a:	d021      	beq.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006812:	d85c      	bhi.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006820:	d004      	beq.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006822:	e054      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006824:	f000 f8b6 	bl	8006994 <HAL_RCCEx_GetD3PCLK1Freq>
 8006828:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800682a:	e0aa      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800682c:	4b29      	ldr	r3, [pc, #164]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006838:	d107      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800683a:	f107 0318 	add.w	r3, r7, #24
 800683e:	4618      	mov	r0, r3
 8006840:	f000 f8be 	bl	80069c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006848:	e09b      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800684e:	e098      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006850:	4b20      	ldr	r3, [pc, #128]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800685c:	d107      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800685e:	f107 030c 	add.w	r3, r7, #12
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fa00 	bl	8006c68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800686c:	e089      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006872:	e086      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006874:	4b17      	ldr	r3, [pc, #92]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b04      	cmp	r3, #4
 800687e:	d109      	bne.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006880:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	08db      	lsrs	r3, r3, #3
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	4a13      	ldr	r2, [pc, #76]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800688c:	fa22 f303 	lsr.w	r3, r2, r3
 8006890:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006892:	e076      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006898:	e073      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800689a:	4b0e      	ldr	r3, [pc, #56]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a6:	d102      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80068a8:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068ac:	e069      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068b2:	e066      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068b4:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068c0:	d102      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80068c2:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80068c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80068c6:	e05c      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068cc:	e059      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d2:	e056      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80068d4:	58024400 	.word	0x58024400
 80068d8:	03d09000 	.word	0x03d09000
 80068dc:	003d0900 	.word	0x003d0900
 80068e0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ea:	d148      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80068ec:	4b27      	ldr	r3, [pc, #156]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068fc:	d02a      	beq.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006904:	d838      	bhi.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006912:	d00d      	beq.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8006914:	e030      	b.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006916:	4b1d      	ldr	r3, [pc, #116]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006922:	d102      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8006924:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006928:	e02b      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800692e:	e028      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006930:	4b16      	ldr	r3, [pc, #88]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800693c:	d107      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800693e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fae4 	bl	8006f10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800694c:	e019      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006952:	e016      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006954:	4b0d      	ldr	r3, [pc, #52]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800695c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006960:	d107      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006962:	f107 0318 	add.w	r3, r7, #24
 8006966:	4618      	mov	r0, r3
 8006968:	f000 f82a 	bl	80069c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006970:	e007      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006976:	e004      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800697c:	e001      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006984:	4618      	mov	r0, r3
 8006986:	3740      	adds	r7, #64	; 0x40
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	58024400 	.word	0x58024400
 8006990:	017d7840 	.word	0x017d7840

08006994 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006998:	f7fe fcae 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 800699c:	4602      	mov	r2, r0
 800699e:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	091b      	lsrs	r3, r3, #4
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	4904      	ldr	r1, [pc, #16]	; (80069bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069aa:	5ccb      	ldrb	r3, [r1, r3]
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	58024400 	.word	0x58024400
 80069bc:	0800ad20 	.word	0x0800ad20

080069c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b089      	sub	sp, #36	; 0x24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069c8:	4ba1      	ldr	r3, [pc, #644]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80069d2:	4b9f      	ldr	r3, [pc, #636]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	0b1b      	lsrs	r3, r3, #12
 80069d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069de:	4b9c      	ldr	r3, [pc, #624]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e2:	091b      	lsrs	r3, r3, #4
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80069ea:	4b99      	ldr	r3, [pc, #612]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ee:	08db      	lsrs	r3, r3, #3
 80069f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	fb02 f303 	mul.w	r3, r2, r3
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8111 	beq.w	8006c30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	f000 8083 	beq.w	8006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	f200 80a1 	bhi.w	8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d056      	beq.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a2a:	e099      	b.n	8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a2c:	4b88      	ldr	r3, [pc, #544]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d02d      	beq.n	8006a94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a38:	4b85      	ldr	r3, [pc, #532]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	08db      	lsrs	r3, r3, #3
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	4a84      	ldr	r2, [pc, #528]	; (8006c54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
 8006a48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	ee07 3a90 	vmov	s15, r3
 8006a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a62:	4b7b      	ldr	r3, [pc, #492]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a92:	e087      	b.n	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa6:	4b6a      	ldr	r3, [pc, #424]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ad6:	e065      	b.n	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aea:	4b59      	ldr	r3, [pc, #356]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006afe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b1a:	e043      	b.n	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	4b48      	ldr	r3, [pc, #288]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b5e:	e021      	b.n	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b37      	ldr	r3, [pc, #220]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ba2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006ba4:	4b2a      	ldr	r3, [pc, #168]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	0a5b      	lsrs	r3, r3, #9
 8006baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bca:	ee17 2a90 	vmov	r2, s15
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006bd2:	4b1f      	ldr	r3, [pc, #124]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	0c1b      	lsrs	r3, r3, #16
 8006bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006be8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf8:	ee17 2a90 	vmov	r2, s15
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006c00:	4b13      	ldr	r3, [pc, #76]	; (8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	0e1b      	lsrs	r3, r3, #24
 8006c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c26:	ee17 2a90 	vmov	r2, s15
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c2e:	e008      	b.n	8006c42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	609a      	str	r2, [r3, #8]
}
 8006c42:	bf00      	nop
 8006c44:	3724      	adds	r7, #36	; 0x24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	58024400 	.word	0x58024400
 8006c54:	03d09000 	.word	0x03d09000
 8006c58:	46000000 	.word	0x46000000
 8006c5c:	4c742400 	.word	0x4c742400
 8006c60:	4a742400 	.word	0x4a742400
 8006c64:	4bbebc20 	.word	0x4bbebc20

08006c68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b089      	sub	sp, #36	; 0x24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c70:	4ba1      	ldr	r3, [pc, #644]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006c7a:	4b9f      	ldr	r3, [pc, #636]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7e:	0d1b      	lsrs	r3, r3, #20
 8006c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c86:	4b9c      	ldr	r3, [pc, #624]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006c92:	4b99      	ldr	r3, [pc, #612]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	08db      	lsrs	r3, r3, #3
 8006c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8111 	beq.w	8006ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	f000 8083 	beq.w	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	f200 80a1 	bhi.w	8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d056      	beq.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006cd2:	e099      	b.n	8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cd4:	4b88      	ldr	r3, [pc, #544]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d02d      	beq.n	8006d3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ce0:	4b85      	ldr	r3, [pc, #532]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	08db      	lsrs	r3, r3, #3
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	4a84      	ldr	r2, [pc, #528]	; (8006efc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006cec:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	ee07 3a90 	vmov	s15, r3
 8006cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0a:	4b7b      	ldr	r3, [pc, #492]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d3a:	e087      	b.n	8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4e:	4b6a      	ldr	r3, [pc, #424]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d7e:	e065      	b.n	8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d92:	4b59      	ldr	r3, [pc, #356]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006da6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dc2:	e043      	b.n	8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd6:	4b48      	ldr	r3, [pc, #288]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e06:	e021      	b.n	8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e1a:	4b37      	ldr	r3, [pc, #220]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006e4c:	4b2a      	ldr	r3, [pc, #168]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	0a5b      	lsrs	r3, r3, #9
 8006e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e72:	ee17 2a90 	vmov	r2, s15
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006e7a:	4b1f      	ldr	r3, [pc, #124]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	0c1b      	lsrs	r3, r3, #16
 8006e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ea0:	ee17 2a90 	vmov	r2, s15
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006ea8:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	0e1b      	lsrs	r3, r3, #24
 8006eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ece:	ee17 2a90 	vmov	r2, s15
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006ed6:	e008      	b.n	8006eea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	609a      	str	r2, [r3, #8]
}
 8006eea:	bf00      	nop
 8006eec:	3724      	adds	r7, #36	; 0x24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	58024400 	.word	0x58024400
 8006efc:	03d09000 	.word	0x03d09000
 8006f00:	46000000 	.word	0x46000000
 8006f04:	4c742400 	.word	0x4c742400
 8006f08:	4a742400 	.word	0x4a742400
 8006f0c:	4bbebc20 	.word	0x4bbebc20

08006f10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b089      	sub	sp, #36	; 0x24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f18:	4ba0      	ldr	r3, [pc, #640]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	f003 0303 	and.w	r3, r3, #3
 8006f20:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006f22:	4b9e      	ldr	r3, [pc, #632]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f26:	091b      	lsrs	r3, r3, #4
 8006f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f2c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f2e:	4b9b      	ldr	r3, [pc, #620]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f38:	4b98      	ldr	r3, [pc, #608]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3c:	08db      	lsrs	r3, r3, #3
 8006f3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	fb02 f303 	mul.w	r3, r2, r3
 8006f48:	ee07 3a90 	vmov	s15, r3
 8006f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f50:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 8111 	beq.w	800717e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	f000 8083 	beq.w	800706a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	f200 80a1 	bhi.w	80070ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d056      	beq.n	8007026 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006f78:	e099      	b.n	80070ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f7a:	4b88      	ldr	r3, [pc, #544]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d02d      	beq.n	8006fe2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f86:	4b85      	ldr	r3, [pc, #532]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	08db      	lsrs	r3, r3, #3
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	4a83      	ldr	r2, [pc, #524]	; (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006f92:	fa22 f303 	lsr.w	r3, r2, r3
 8006f96:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	ee07 3a90 	vmov	s15, r3
 8006fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb0:	4b7a      	ldr	r3, [pc, #488]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb8:	ee07 3a90 	vmov	s15, r3
 8006fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80071a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fdc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006fe0:	e087      	b.n	80070f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff4:	4b69      	ldr	r3, [pc, #420]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffc:	ee07 3a90 	vmov	s15, r3
 8007000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007004:	ed97 6a03 	vldr	s12, [r7, #12]
 8007008:	eddf 5a66 	vldr	s11, [pc, #408]	; 80071a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800700c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007010:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007014:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007020:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007024:	e065      	b.n	80070f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007030:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80071ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007038:	4b58      	ldr	r3, [pc, #352]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007040:	ee07 3a90 	vmov	s15, r3
 8007044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007048:	ed97 6a03 	vldr	s12, [r7, #12]
 800704c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80071a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007050:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007054:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800705c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007064:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007068:	e043      	b.n	80070f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007074:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80071b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707c:	4b47      	ldr	r3, [pc, #284]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007090:	eddf 5a44 	vldr	s11, [pc, #272]	; 80071a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070ac:	e021      	b.n	80070f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80070bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c0:	4b36      	ldr	r3, [pc, #216]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80070d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80071a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80070f2:	4b2a      	ldr	r3, [pc, #168]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f6:	0a5b      	lsrs	r3, r3, #9
 80070f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800710c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007118:	ee17 2a90 	vmov	r2, s15
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007120:	4b1e      	ldr	r3, [pc, #120]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800713a:	edd7 6a07 	vldr	s13, [r7, #28]
 800713e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007146:	ee17 2a90 	vmov	r2, s15
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800714e:	4b13      	ldr	r3, [pc, #76]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	0e1b      	lsrs	r3, r3, #24
 8007154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007168:	edd7 6a07 	vldr	s13, [r7, #28]
 800716c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007174:	ee17 2a90 	vmov	r2, s15
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800717c:	e008      	b.n	8007190 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	609a      	str	r2, [r3, #8]
}
 8007190:	bf00      	nop
 8007192:	3724      	adds	r7, #36	; 0x24
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	58024400 	.word	0x58024400
 80071a0:	03d09000 	.word	0x03d09000
 80071a4:	46000000 	.word	0x46000000
 80071a8:	4c742400 	.word	0x4c742400
 80071ac:	4a742400 	.word	0x4a742400
 80071b0:	4bbebc20 	.word	0x4bbebc20

080071b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071c2:	4b53      	ldr	r3, [pc, #332]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d101      	bne.n	80071d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e099      	b.n	8007306 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80071d2:	4b4f      	ldr	r3, [pc, #316]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a4e      	ldr	r2, [pc, #312]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80071d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071de:	f7f9 f9f7 	bl	80005d0 <HAL_GetTick>
 80071e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071e4:	e008      	b.n	80071f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80071e6:	f7f9 f9f3 	bl	80005d0 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d901      	bls.n	80071f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e086      	b.n	8007306 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071f8:	4b45      	ldr	r3, [pc, #276]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1f0      	bne.n	80071e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007204:	4b42      	ldr	r3, [pc, #264]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	031b      	lsls	r3, r3, #12
 8007212:	493f      	ldr	r1, [pc, #252]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 8007214:	4313      	orrs	r3, r2
 8007216:	628b      	str	r3, [r1, #40]	; 0x28
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	3b01      	subs	r3, #1
 800721e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	3b01      	subs	r3, #1
 8007228:	025b      	lsls	r3, r3, #9
 800722a:	b29b      	uxth	r3, r3
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	3b01      	subs	r3, #1
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	3b01      	subs	r3, #1
 8007242:	061b      	lsls	r3, r3, #24
 8007244:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007248:	4931      	ldr	r1, [pc, #196]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 800724a:	4313      	orrs	r3, r2
 800724c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800724e:	4b30      	ldr	r3, [pc, #192]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	492d      	ldr	r1, [pc, #180]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 800725c:	4313      	orrs	r3, r2
 800725e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007260:	4b2b      	ldr	r3, [pc, #172]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	f023 0220 	bic.w	r2, r3, #32
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	4928      	ldr	r1, [pc, #160]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 800726e:	4313      	orrs	r3, r2
 8007270:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007272:	4b27      	ldr	r3, [pc, #156]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007276:	4a26      	ldr	r2, [pc, #152]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 8007278:	f023 0310 	bic.w	r3, r3, #16
 800727c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800727e:	4b24      	ldr	r3, [pc, #144]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 8007280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007282:	4b24      	ldr	r3, [pc, #144]	; (8007314 <RCCEx_PLL2_Config+0x160>)
 8007284:	4013      	ands	r3, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	69d2      	ldr	r2, [r2, #28]
 800728a:	00d2      	lsls	r2, r2, #3
 800728c:	4920      	ldr	r1, [pc, #128]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 800728e:	4313      	orrs	r3, r2
 8007290:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007292:	4b1f      	ldr	r3, [pc, #124]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	4a1e      	ldr	r2, [pc, #120]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 8007298:	f043 0310 	orr.w	r3, r3, #16
 800729c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d106      	bne.n	80072b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80072a4:	4b1a      	ldr	r3, [pc, #104]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	4a19      	ldr	r2, [pc, #100]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80072aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072b0:	e00f      	b.n	80072d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d106      	bne.n	80072c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80072b8:	4b15      	ldr	r3, [pc, #84]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	4a14      	ldr	r2, [pc, #80]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80072be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072c4:	e005      	b.n	80072d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	4a11      	ldr	r2, [pc, #68]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80072cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80072d2:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a0e      	ldr	r2, [pc, #56]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80072d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072de:	f7f9 f977 	bl	80005d0 <HAL_GetTick>
 80072e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072e4:	e008      	b.n	80072f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80072e6:	f7f9 f973 	bl	80005d0 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e006      	b.n	8007306 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072f8:	4b05      	ldr	r3, [pc, #20]	; (8007310 <RCCEx_PLL2_Config+0x15c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0f0      	beq.n	80072e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	58024400 	.word	0x58024400
 8007314:	ffff0007 	.word	0xffff0007

08007318 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007326:	4b53      	ldr	r3, [pc, #332]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	2b03      	cmp	r3, #3
 8007330:	d101      	bne.n	8007336 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e099      	b.n	800746a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007336:	4b4f      	ldr	r3, [pc, #316]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a4e      	ldr	r2, [pc, #312]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 800733c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007342:	f7f9 f945 	bl	80005d0 <HAL_GetTick>
 8007346:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007348:	e008      	b.n	800735c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800734a:	f7f9 f941 	bl	80005d0 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d901      	bls.n	800735c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e086      	b.n	800746a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800735c:	4b45      	ldr	r3, [pc, #276]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1f0      	bne.n	800734a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007368:	4b42      	ldr	r3, [pc, #264]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	051b      	lsls	r3, r3, #20
 8007376:	493f      	ldr	r1, [pc, #252]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 8007378:	4313      	orrs	r3, r2
 800737a:	628b      	str	r3, [r1, #40]	; 0x28
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	3b01      	subs	r3, #1
 8007382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	3b01      	subs	r3, #1
 800738c:	025b      	lsls	r3, r3, #9
 800738e:	b29b      	uxth	r3, r3
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	3b01      	subs	r3, #1
 8007398:	041b      	lsls	r3, r3, #16
 800739a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	061b      	lsls	r3, r3, #24
 80073a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073ac:	4931      	ldr	r1, [pc, #196]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073b2:	4b30      	ldr	r3, [pc, #192]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	492d      	ldr	r1, [pc, #180]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80073c4:	4b2b      	ldr	r3, [pc, #172]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	4928      	ldr	r1, [pc, #160]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80073d6:	4b27      	ldr	r3, [pc, #156]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	4a26      	ldr	r2, [pc, #152]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073e6:	4b24      	ldr	r3, [pc, #144]	; (8007478 <RCCEx_PLL3_Config+0x160>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	69d2      	ldr	r2, [r2, #28]
 80073ee:	00d2      	lsls	r2, r2, #3
 80073f0:	4920      	ldr	r1, [pc, #128]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80073f6:	4b1f      	ldr	r3, [pc, #124]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	4a1e      	ldr	r2, [pc, #120]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 80073fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d106      	bne.n	8007416 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007408:	4b1a      	ldr	r3, [pc, #104]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	4a19      	ldr	r2, [pc, #100]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 800740e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007412:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007414:	e00f      	b.n	8007436 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d106      	bne.n	800742a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800741c:	4b15      	ldr	r3, [pc, #84]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	4a14      	ldr	r2, [pc, #80]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 8007422:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007426:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007428:	e005      	b.n	8007436 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800742a:	4b12      	ldr	r3, [pc, #72]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	4a11      	ldr	r2, [pc, #68]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 8007430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007434:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007436:	4b0f      	ldr	r3, [pc, #60]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a0e      	ldr	r2, [pc, #56]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 800743c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007442:	f7f9 f8c5 	bl	80005d0 <HAL_GetTick>
 8007446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007448:	e008      	b.n	800745c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800744a:	f7f9 f8c1 	bl	80005d0 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d901      	bls.n	800745c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e006      	b.n	800746a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <RCCEx_PLL3_Config+0x15c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0f0      	beq.n	800744a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	58024400 	.word	0x58024400
 8007478:	ffff0007 	.word	0xffff0007

0800747c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d904      	bls.n	800749a <HAL_SAI_InitProtocol+0x1e>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	3b03      	subs	r3, #3
 8007494:	2b01      	cmp	r3, #1
 8007496:	d812      	bhi.n	80074be <HAL_SAI_InitProtocol+0x42>
 8007498:	e008      	b.n	80074ac <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	68b9      	ldr	r1, [r7, #8]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fac5 	bl	8007a30 <SAI_InitI2S>
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]
      break;
 80074aa:	e00b      	b.n	80074c4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fb6e 	bl	8007b94 <SAI_InitPCM>
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]
      break;
 80074bc:	e002      	b.n	80074c4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	75fb      	strb	r3, [r7, #23]
      break;
 80074c2:	bf00      	nop
  }

  if (status == HAL_OK)
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f808 	bl	80074e0 <HAL_SAI_Init>
 80074d0:	4603      	mov	r3, r0
 80074d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	; 0x28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e1fb      	b.n	80078ea <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d113      	bne.n	8007524 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a96      	ldr	r2, [pc, #600]	; (800775c <HAL_SAI_Init+0x27c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d004      	beq.n	8007510 <HAL_SAI_Init+0x30>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a95      	ldr	r2, [pc, #596]	; (8007760 <HAL_SAI_Init+0x280>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d107      	bne.n	8007520 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007514:	2b01      	cmp	r3, #1
 8007516:	d103      	bne.n	8007520 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e1e2      	b.n	80078ea <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a8c      	ldr	r2, [pc, #560]	; (800775c <HAL_SAI_Init+0x27c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d004      	beq.n	8007538 <HAL_SAI_Init+0x58>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a8c      	ldr	r2, [pc, #560]	; (8007764 <HAL_SAI_Init+0x284>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d102      	bne.n	800753e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8007538:	4b8b      	ldr	r3, [pc, #556]	; (8007768 <HAL_SAI_Init+0x288>)
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	e00e      	b.n	800755c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a87      	ldr	r2, [pc, #540]	; (8007760 <HAL_SAI_Init+0x280>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d004      	beq.n	8007552 <HAL_SAI_Init+0x72>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a87      	ldr	r2, [pc, #540]	; (800776c <HAL_SAI_Init+0x28c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d102      	bne.n	8007558 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8007552:	4b87      	ldr	r3, [pc, #540]	; (8007770 <HAL_SAI_Init+0x290>)
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	e001      	b.n	800755c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e1c6      	b.n	80078ea <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 f849 	bl	8008608 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fbc6 	bl	8007d08 <SAI_Disable>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e1b1      	b.n	80078ea <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d00c      	beq.n	80075b0 <HAL_SAI_Init+0xd0>
 8007596:	2b02      	cmp	r3, #2
 8007598:	d80d      	bhi.n	80075b6 <HAL_SAI_Init+0xd6>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <HAL_SAI_Init+0xc4>
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d003      	beq.n	80075aa <HAL_SAI_Init+0xca>
 80075a2:	e008      	b.n	80075b6 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80075a8:	e008      	b.n	80075bc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80075aa:	2310      	movs	r3, #16
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80075ae:	e005      	b.n	80075bc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80075b0:	2320      	movs	r3, #32
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80075b4:	e002      	b.n	80075bc <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80075ba:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2b05      	cmp	r3, #5
 80075c2:	d822      	bhi.n	800760a <HAL_SAI_Init+0x12a>
 80075c4:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <HAL_SAI_Init+0xec>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	080075e5 	.word	0x080075e5
 80075d0:	080075eb 	.word	0x080075eb
 80075d4:	080075f3 	.word	0x080075f3
 80075d8:	0800760b 	.word	0x0800760b
 80075dc:	0800760b 	.word	0x0800760b
 80075e0:	080075fb 	.word	0x080075fb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]
      break;
 80075e8:	e012      	b.n	8007610 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80075ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ee:	61fb      	str	r3, [r7, #28]
      break;
 80075f0:	e00e      	b.n	8007610 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80075f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075f6:	61fb      	str	r3, [r7, #28]
      break;
 80075f8:	e00a      	b.n	8007610 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80075fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075fe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	f043 0303 	orr.w	r3, r3, #3
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007608:	e002      	b.n	8007610 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	61fb      	str	r3, [r7, #28]
      break;
 800760e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007614:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8084 	beq.w	8007728 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a4c      	ldr	r2, [pc, #304]	; (800775c <HAL_SAI_Init+0x27c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_SAI_Init+0x158>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a4c      	ldr	r2, [pc, #304]	; (8007764 <HAL_SAI_Init+0x284>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d104      	bne.n	8007642 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007638:	f44f 7080 	mov.w	r0, #256	; 0x100
 800763c:	f7fe fd86 	bl	800614c <HAL_RCCEx_GetPeriphCLKFreq>
 8007640:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a46      	ldr	r2, [pc, #280]	; (8007760 <HAL_SAI_Init+0x280>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d104      	bne.n	8007656 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800764c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007650:	f7fe fd7c 	bl	800614c <HAL_RCCEx_GetPeriphCLKFreq>
 8007654:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a44      	ldr	r2, [pc, #272]	; (800776c <HAL_SAI_Init+0x28c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d104      	bne.n	800766a <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007660:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007664:	f7fe fd72 	bl	800614c <HAL_RCCEx_GetPeriphCLKFreq>
 8007668:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007672:	d120      	bne.n	80076b6 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007678:	2b04      	cmp	r3, #4
 800767a:	d102      	bne.n	8007682 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800767c:	2340      	movs	r3, #64	; 0x40
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e00a      	b.n	8007698 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007686:	2b08      	cmp	r3, #8
 8007688:	d103      	bne.n	8007692 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800768a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e002      	b.n	8007698 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007696:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	4619      	mov	r1, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
 80076ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	e017      	b.n	80076e6 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076be:	d101      	bne.n	80076c4 <HAL_SAI_Init+0x1e4>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e000      	b.n	80076c6 <HAL_SAI_Init+0x1e6>
 80076c4:	2301      	movs	r3, #1
 80076c6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4619      	mov	r1, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	fb02 f303 	mul.w	r3, r2, r3
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80076e4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4a22      	ldr	r2, [pc, #136]	; (8007774 <HAL_SAI_Init+0x294>)
 80076ea:	fba2 2303 	umull	r2, r3, r2, r3
 80076ee:	08da      	lsrs	r2, r3, #3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80076f4:	6939      	ldr	r1, [r7, #16]
 80076f6:	4b1f      	ldr	r3, [pc, #124]	; (8007774 <HAL_SAI_Init+0x294>)
 80076f8:	fba3 2301 	umull	r2, r3, r3, r1
 80076fc:	08da      	lsrs	r2, r3, #3
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	1aca      	subs	r2, r1, r3
 8007708:	2a08      	cmp	r2, #8
 800770a:	d904      	bls.n	8007716 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771a:	2b04      	cmp	r3, #4
 800771c:	d104      	bne.n	8007728 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	085a      	lsrs	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <HAL_SAI_Init+0x258>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2b02      	cmp	r3, #2
 8007736:	d109      	bne.n	800774c <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_SAI_Init+0x264>
 8007740:	2300      	movs	r3, #0
 8007742:	e001      	b.n	8007748 <HAL_SAI_Init+0x268>
 8007744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007748:	623b      	str	r3, [r7, #32]
 800774a:	e017      	b.n	800777c <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007750:	2b01      	cmp	r3, #1
 8007752:	d111      	bne.n	8007778 <HAL_SAI_Init+0x298>
 8007754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007758:	e00f      	b.n	800777a <HAL_SAI_Init+0x29a>
 800775a:	bf00      	nop
 800775c:	40015804 	.word	0x40015804
 8007760:	58005404 	.word	0x58005404
 8007764:	40015824 	.word	0x40015824
 8007768:	40015800 	.word	0x40015800
 800776c:	58005424 	.word	0x58005424
 8007770:	58005400 	.word	0x58005400
 8007774:	cccccccd 	.word	0xcccccccd
 8007778:	2300      	movs	r3, #0
 800777a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6819      	ldr	r1, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	4b5b      	ldr	r3, [pc, #364]	; (80078f4 <HAL_SAI_Init+0x414>)
 8007788:	400b      	ands	r3, r1
 800778a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6819      	ldr	r1, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077a0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a6:	431a      	orrs	r2, r3
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80077b4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077c0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	051b      	lsls	r3, r3, #20
 80077c8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80077ce:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6859      	ldr	r1, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	4b43      	ldr	r3, [pc, #268]	; (80078f8 <HAL_SAI_Init+0x418>)
 80077ea:	400b      	ands	r3, r1
 80077ec:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6859      	ldr	r1, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	69da      	ldr	r2, [r3, #28]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007802:	431a      	orrs	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6899      	ldr	r1, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	4b39      	ldr	r3, [pc, #228]	; (80078fc <HAL_SAI_Init+0x41c>)
 8007818:	400b      	ands	r3, r1
 800781a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6899      	ldr	r1, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800782c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007832:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007838:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783e:	3b01      	subs	r3, #1
 8007840:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007842:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68d9      	ldr	r1, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	f24f 0320 	movw	r3, #61472	; 0xf020
 800785a:	400b      	ands	r3, r1
 800785c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68d9      	ldr	r1, [r3, #12]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800786c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007872:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007874:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	3b01      	subs	r3, #1
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a1c      	ldr	r2, [pc, #112]	; (8007900 <HAL_SAI_Init+0x420>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d004      	beq.n	800789c <HAL_SAI_Init+0x3bc>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1b      	ldr	r2, [pc, #108]	; (8007904 <HAL_SAI_Init+0x424>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d119      	bne.n	80078d0 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a0:	f023 0201 	bic.w	r2, r3, #1
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d10e      	bne.n	80078d0 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ba:	3b01      	subs	r3, #1
 80078bc:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80078be:	431a      	orrs	r2, r3
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c8:	f043 0201 	orr.w	r2, r3, #1
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3728      	adds	r7, #40	; 0x28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	f005c010 	.word	0xf005c010
 80078f8:	ffff1ff0 	.word	0xffff1ff0
 80078fc:	fff88000 	.word	0xfff88000
 8007900:	40015804 	.word	0x40015804
 8007904:	58005404 	.word	0x58005404

08007908 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_SAI_Receive_DMA+0x1a>
 800791c:	88fb      	ldrh	r3, [r7, #6]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e079      	b.n	8007a1a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b01      	cmp	r3, #1
 8007930:	d172      	bne.n	8007a18 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_SAI_Receive_DMA+0x38>
 800793c:	2302      	movs	r3, #2
 800793e:	e06c      	b.n	8007a1a <HAL_SAI_Receive_DMA+0x112>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	88fa      	ldrh	r2, [r7, #6]
 800795a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2222      	movs	r2, #34	; 0x22
 800796a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007974:	4a2b      	ldr	r2, [pc, #172]	; (8007a24 <HAL_SAI_Receive_DMA+0x11c>)
 8007976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797e:	4a2a      	ldr	r2, [pc, #168]	; (8007a28 <HAL_SAI_Receive_DMA+0x120>)
 8007980:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007988:	4a28      	ldr	r2, [pc, #160]	; (8007a2c <HAL_SAI_Receive_DMA+0x124>)
 800798a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007992:	2200      	movs	r2, #0
 8007994:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	331c      	adds	r3, #28
 80079a2:	4619      	mov	r1, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079a8:	461a      	mov	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80079b0:	f7f9 fbea 	bl	8001188 <HAL_DMA_Start_IT>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e029      	b.n	8007a1a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80079c6:	2100      	movs	r1, #0
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 f965 	bl	8007c98 <SAI_InterruptFlag>
 80079ce:	4601      	mov	r1, r0
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691a      	ldr	r2, [r3, #16]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80079ec:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d107      	bne.n	8007a0c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a0a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	e000      	b.n	8007a1a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8007a18:	2302      	movs	r3, #2
  }
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	08007ddd 	.word	0x08007ddd
 8007a28:	08007d7d 	.word	0x08007d7d
 8007a2c:	08007df9 	.word	0x08007df9

08007a30 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <SAI_InitI2S+0x2e>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d103      	bne.n	8007a66 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	651a      	str	r2, [r3, #80]	; 0x50
 8007a64:	e002      	b.n	8007a6c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007a72:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a7a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e077      	b.n	8007b86 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d107      	bne.n	8007aac <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007aa8:	665a      	str	r2, [r3, #100]	; 0x64
 8007aaa:	e006      	b.n	8007aba <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007ab2:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	665a      	str	r2, [r3, #100]	; 0x64
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d84f      	bhi.n	8007b60 <SAI_InitI2S+0x130>
 8007ac0:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <SAI_InitI2S+0x98>)
 8007ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac6:	bf00      	nop
 8007ac8:	08007ad9 	.word	0x08007ad9
 8007acc:	08007afb 	.word	0x08007afb
 8007ad0:	08007b1d 	.word	0x08007b1d
 8007ad4:	08007b3f 	.word	0x08007b3f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2280      	movs	r2, #128	; 0x80
 8007adc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	085b      	lsrs	r3, r3, #1
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	011a      	lsls	r2, r3, #4
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2240      	movs	r2, #64	; 0x40
 8007af6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007af8:	e035      	b.n	8007b66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2280      	movs	r2, #128	; 0x80
 8007afe:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	019a      	lsls	r2, r3, #6
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	085b      	lsrs	r3, r3, #1
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2280      	movs	r2, #128	; 0x80
 8007b18:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007b1a:	e024      	b.n	8007b66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	22c0      	movs	r2, #192	; 0xc0
 8007b20:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	019a      	lsls	r2, r3, #6
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	085b      	lsrs	r3, r3, #1
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2280      	movs	r2, #128	; 0x80
 8007b3a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007b3c:	e013      	b.n	8007b66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	22e0      	movs	r2, #224	; 0xe0
 8007b42:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	085b      	lsrs	r3, r3, #1
 8007b48:	019a      	lsls	r2, r3, #6
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	085b      	lsrs	r3, r3, #1
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2280      	movs	r2, #128	; 0x80
 8007b5c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007b5e:	e002      	b.n	8007b66 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	75fb      	strb	r3, [r7, #23]
      break;
 8007b64:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d10b      	bne.n	8007b84 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d102      	bne.n	8007b78 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2210      	movs	r2, #16
 8007b76:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d102      	bne.n	8007b84 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2208      	movs	r2, #8
 8007b82:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop

08007b94 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <SAI_InitPCM+0x2e>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d103      	bne.n	8007bca <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8007bc8:	e002      	b.n	8007bd0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007bdc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007be4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bf8:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d103      	bne.n	8007c08 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	659a      	str	r2, [r3, #88]	; 0x58
 8007c06:	e002      	b.n	8007c0e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	220d      	movs	r2, #13
 8007c0c:	659a      	str	r2, [r3, #88]	; 0x58
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d837      	bhi.n	8007c84 <SAI_InitPCM+0xf0>
 8007c14:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <SAI_InitPCM+0x88>)
 8007c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1a:	bf00      	nop
 8007c1c:	08007c2d 	.word	0x08007c2d
 8007c20:	08007c43 	.word	0x08007c43
 8007c24:	08007c59 	.word	0x08007c59
 8007c28:	08007c6f 	.word	0x08007c6f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2280      	movs	r2, #128	; 0x80
 8007c30:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	011a      	lsls	r2, r3, #4
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2240      	movs	r2, #64	; 0x40
 8007c3e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007c40:	e023      	b.n	8007c8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2280      	movs	r2, #128	; 0x80
 8007c46:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2280      	movs	r2, #128	; 0x80
 8007c54:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007c56:	e018      	b.n	8007c8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	22c0      	movs	r2, #192	; 0xc0
 8007c5c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2280      	movs	r2, #128	; 0x80
 8007c6a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007c6c:	e00d      	b.n	8007c8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	22e0      	movs	r2, #224	; 0xe0
 8007c72:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2280      	movs	r2, #128	; 0x80
 8007c80:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007c82:	e002      	b.n	8007c8a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	75fb      	strb	r3, [r7, #23]
      break;
 8007c88:	bf00      	nop
  }

  return status;
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d103      	bne.n	8007cb6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f043 0308 	orr.w	r3, r3, #8
 8007cb4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d10b      	bne.n	8007cd6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d003      	beq.n	8007cce <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d103      	bne.n	8007cd6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f043 0310 	orr.w	r3, r3, #16
 8007cd4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d003      	beq.n	8007ce6 <SAI_InterruptFlag+0x4e>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d104      	bne.n	8007cf0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	e003      	b.n	8007cf8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f043 0304 	orr.w	r3, r3, #4
 8007cf6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007d10:	4b18      	ldr	r3, [pc, #96]	; (8007d74 <SAI_Disable+0x6c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a18      	ldr	r2, [pc, #96]	; (8007d78 <SAI_Disable+0x70>)
 8007d16:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1a:	0b1b      	lsrs	r3, r3, #12
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d32:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10a      	bne.n	8007d50 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d4e:	e009      	b.n	8007d64 <SAI_Disable+0x5c>
    }
    count--;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e7      	bne.n	8007d34 <SAI_Disable+0x2c>

  return status;
 8007d64:	7afb      	ldrb	r3, [r7, #11]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	24000410 	.word	0x24000410
 8007d78:	95cbec1b 	.word	0x95cbec1b

08007d7c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d88:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d92:	d01c      	beq.n	8007dce <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007da2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007dac:	2100      	movs	r1, #0
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff ff72 	bl	8007c98 <SAI_InterruptFlag>
 8007db4:	4603      	mov	r3, r0
 8007db6:	43d9      	mvns	r1, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691a      	ldr	r2, [r3, #16]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	400a      	ands	r2, r1
 8007dc4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 fe08 	bl	80089e4 <HAL_SAI_RxCpltCallback>
#endif
}
 8007dd4:	bf00      	nop
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f7f8 fb4a 	bl	8000484 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7fa fda4 	bl	8002954 <HAL_DMA_GetError>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d01d      	beq.n	8007e4e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007e30:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff ff68 	bl	8007d08 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7f8 fafb 	bl	8000444 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8007e5e:	f000 fb3b 	bl	80084d8 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007e62:	4b4c      	ldr	r3, [pc, #304]	; (8007f94 <main+0x13c>)
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d11b      	bne.n	8007ea6 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007e6e:	f3bf 8f4f 	dsb	sy
}
 8007e72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007e74:	f3bf 8f6f 	isb	sy
}
 8007e78:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007e7a:	4b46      	ldr	r3, [pc, #280]	; (8007f94 <main+0x13c>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007e82:	f3bf 8f4f 	dsb	sy
}
 8007e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007e88:	f3bf 8f6f 	isb	sy
}
 8007e8c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007e8e:	4b41      	ldr	r3, [pc, #260]	; (8007f94 <main+0x13c>)
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	4a40      	ldr	r2, [pc, #256]	; (8007f94 <main+0x13c>)
 8007e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e98:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e9a:	f3bf 8f4f 	dsb	sy
}
 8007e9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007ea0:	f3bf 8f6f 	isb	sy
}
 8007ea4:	e000      	b.n	8007ea8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007ea6:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8007ea8:	4b3a      	ldr	r3, [pc, #232]	; (8007f94 <main+0x13c>)
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d138      	bne.n	8007f26 <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8007eb4:	4b37      	ldr	r3, [pc, #220]	; (8007f94 <main+0x13c>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007ebc:	f3bf 8f4f 	dsb	sy
}
 8007ec0:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8007ec2:	4b34      	ldr	r3, [pc, #208]	; (8007f94 <main+0x13c>)
 8007ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ec8:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	0b5b      	lsrs	r3, r3, #13
 8007ece:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007ed2:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	08db      	lsrs	r3, r3, #3
 8007ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007edc:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007ee6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007eec:	4929      	ldr	r1, [pc, #164]	; (8007f94 <main+0x13c>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	1e5a      	subs	r2, r3, #1
 8007ef8:	607a      	str	r2, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1ef      	bne.n	8007ede <main+0x86>
    } while(sets-- != 0U);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	1e5a      	subs	r2, r3, #1
 8007f02:	60ba      	str	r2, [r7, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e5      	bne.n	8007ed4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8007f08:	f3bf 8f4f 	dsb	sy
}
 8007f0c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007f0e:	4b21      	ldr	r3, [pc, #132]	; (8007f94 <main+0x13c>)
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	4a20      	ldr	r2, [pc, #128]	; (8007f94 <main+0x13c>)
 8007f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f18:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f1a:	f3bf 8f4f 	dsb	sy
}
 8007f1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007f20:	f3bf 8f6f 	isb	sy
}
 8007f24:	e000      	b.n	8007f28 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8007f26:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f28:	f7f8 facc 	bl	80004c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	f7f8 f9ef 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8007f32:	2001      	movs	r0, #1
 8007f34:	f7f8 f9ec 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 8007f38:	2000      	movs	r0, #0
 8007f3a:	f7f8 fa65 	bl	8000408 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8007f3e:	2001      	movs	r0, #1
 8007f40:	f7f8 fa62 	bl	8000408 <BSP_LED_Off>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f44:	f000 f834 	bl	8007fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f48:	f000 fa5a 	bl	8008400 <MX_GPIO_Init>
  MX_BDMA_Init();
 8007f4c:	f000 f9ce 	bl	80082ec <MX_BDMA_Init>
  MX_SAI4_Init();
 8007f50:	f000 f96a 	bl	8008228 <MX_SAI4_Init>
  MX_CRC_Init();
 8007f54:	f000 f8be 	bl	80080d4 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8007f58:	f000 faf0 	bl	800853c <MX_PDM2PCM_Init>
  MX_DMA_Init();
 8007f5c:	f000 f9e0 	bl	8008320 <MX_DMA_Init>
  MX_SAI1_Init();
 8007f60:	f000 f92c 	bl	80081bc <MX_SAI1_Init>
  MX_RAMECC_Init();
 8007f64:	f000 f8f8 	bl	8008158 <MX_RAMECC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8007f68:	f000 f890 	bl	800808c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, input_buffer, pdm_buffer, NUM_BYTES);
 8007f6c:	490a      	ldr	r1, [pc, #40]	; (8007f98 <main+0x140>)
 8007f6e:	4a0b      	ldr	r2, [pc, #44]	; (8007f9c <main+0x144>)
 8007f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f74:	480a      	ldr	r0, [pc, #40]	; (8007fa0 <main+0x148>)
 8007f76:	f7f9 f907 	bl	8001188 <HAL_DMA_Start_IT>
  HAL_SAI_Receive_DMA(&hsai_BlockA4, input_buffer, NUM_BYTES);
 8007f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f7e:	4906      	ldr	r1, [pc, #24]	; (8007f98 <main+0x140>)
 8007f80:	4808      	ldr	r0, [pc, #32]	; (8007fa4 <main+0x14c>)
 8007f82:	f7ff fcc1 	bl	8007908 <HAL_SAI_Receive_DMA>
//  while(!hsai_BlockA4.Ack) {}
  PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 8007f86:	4a08      	ldr	r2, [pc, #32]	; (8007fa8 <main+0x150>)
 8007f88:	4908      	ldr	r1, [pc, #32]	; (8007fac <main+0x154>)
 8007f8a:	4804      	ldr	r0, [pc, #16]	; (8007f9c <main+0x144>)
 8007f8c:	f002 fc86 	bl	800a89c <PDM_Filter>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8007f90:	e7fe      	b.n	8007f90 <main+0x138>
 8007f92:	bf00      	nop
 8007f94:	e000ed00 	.word	0xe000ed00
 8007f98:	2400047c 	.word	0x2400047c
 8007f9c:	240025a4 	.word	0x240025a4
 8007fa0:	24002508 	.word	0x24002508
 8007fa4:	24004640 	.word	0x24004640
 8007fa8:	240087f4 	.word	0x240087f4
 8007fac:	24004774 	.word	0x24004774

08007fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b09c      	sub	sp, #112	; 0x70
 8007fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fba:	224c      	movs	r2, #76	; 0x4c
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f002 fcb0 	bl	800a924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fc4:	1d3b      	adds	r3, r7, #4
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f002 fcaa 	bl	800a924 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8007fd0:	2004      	movs	r0, #4
 8007fd2:	f7fc fa1d 	bl	8004410 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	603b      	str	r3, [r7, #0]
 8007fda:	4b2b      	ldr	r3, [pc, #172]	; (8008088 <SystemClock_Config+0xd8>)
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	4a2a      	ldr	r2, [pc, #168]	; (8008088 <SystemClock_Config+0xd8>)
 8007fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fe4:	6193      	str	r3, [r2, #24]
 8007fe6:	4b28      	ldr	r3, [pc, #160]	; (8008088 <SystemClock_Config+0xd8>)
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007ff2:	bf00      	nop
 8007ff4:	4b24      	ldr	r3, [pc, #144]	; (8008088 <SystemClock_Config+0xd8>)
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008000:	d1f8      	bne.n	8007ff4 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008002:	2302      	movs	r3, #2
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008006:	2301      	movs	r3, #1
 8008008:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800800a:	2340      	movs	r3, #64	; 0x40
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800800e:	2302      	movs	r3, #2
 8008010:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008012:	2300      	movs	r3, #0
 8008014:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008016:	2304      	movs	r3, #4
 8008018:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800801a:	2318      	movs	r3, #24
 800801c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800801e:	2301      	movs	r3, #1
 8008020:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8008022:	237d      	movs	r3, #125	; 0x7d
 8008024:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008026:	2302      	movs	r3, #2
 8008028:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800802a:	230c      	movs	r3, #12
 800802c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800802e:	2300      	movs	r3, #0
 8008030:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800803a:	4618      	mov	r0, r3
 800803c:	f7fc fa80 	bl	8004540 <HAL_RCC_OscConfig>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008046:	f000 fa74 	bl	8008532 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800804a:	233f      	movs	r3, #63	; 0x3f
 800804c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800804e:	2303      	movs	r3, #3
 8008050:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8008056:	2308      	movs	r3, #8
 8008058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800805a:	2340      	movs	r3, #64	; 0x40
 800805c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800805e:	2340      	movs	r3, #64	; 0x40
 8008060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008066:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008068:	2340      	movs	r3, #64	; 0x40
 800806a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800806c:	1d3b      	adds	r3, r7, #4
 800806e:	2102      	movs	r1, #2
 8008070:	4618      	mov	r0, r3
 8008072:	f7fc fe11 	bl	8004c98 <HAL_RCC_ClockConfig>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800807c:	f000 fa59 	bl	8008532 <Error_Handler>
  }
}
 8008080:	bf00      	nop
 8008082:	3770      	adds	r7, #112	; 0x70
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	58024800 	.word	0x58024800

0800808c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 8008090:	2200      	movs	r2, #0
 8008092:	2100      	movs	r1, #0
 8008094:	2082      	movs	r0, #130	; 0x82
 8008096:	f7f8 fb82 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 800809a:	2082      	movs	r0, #130	; 0x82
 800809c:	f7f8 fb99 	bl	80007d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80080a0:	2200      	movs	r2, #0
 80080a2:	2100      	movs	r1, #0
 80080a4:	2038      	movs	r0, #56	; 0x38
 80080a6:	f7f8 fb7a 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80080aa:	2038      	movs	r0, #56	; 0x38
 80080ac:	f7f8 fb91 	bl	80007d2 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80080b0:	2200      	movs	r2, #0
 80080b2:	2100      	movs	r1, #0
 80080b4:	2006      	movs	r0, #6
 80080b6:	f7f8 fb72 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80080ba:	2006      	movs	r0, #6
 80080bc:	f7f8 fb89 	bl	80007d2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 80080c0:	2200      	movs	r2, #0
 80080c2:	2100      	movs	r1, #0
 80080c4:	2080      	movs	r0, #128	; 0x80
 80080c6:	f7f8 fb6a 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 80080ca:	2080      	movs	r0, #128	; 0x80
 80080cc:	f7f8 fb81 	bl	80007d2 <HAL_NVIC_EnableIRQ>
}
 80080d0:	bf00      	nop
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80080da:	4b1c      	ldr	r3, [pc, #112]	; (800814c <MX_CRC_Init+0x78>)
 80080dc:	4a1c      	ldr	r2, [pc, #112]	; (8008150 <MX_CRC_Init+0x7c>)
 80080de:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80080e0:	4b1a      	ldr	r3, [pc, #104]	; (800814c <MX_CRC_Init+0x78>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80080e6:	4b19      	ldr	r3, [pc, #100]	; (800814c <MX_CRC_Init+0x78>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80080ec:	4b17      	ldr	r3, [pc, #92]	; (800814c <MX_CRC_Init+0x78>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80080f2:	4b16      	ldr	r3, [pc, #88]	; (800814c <MX_CRC_Init+0x78>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80080f8:	4b14      	ldr	r3, [pc, #80]	; (800814c <MX_CRC_Init+0x78>)
 80080fa:	2201      	movs	r2, #1
 80080fc:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80080fe:	4813      	ldr	r0, [pc, #76]	; (800814c <MX_CRC_Init+0x78>)
 8008100:	f7f8 fbfe 	bl	8000900 <HAL_CRC_Init>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800810a:	f000 fa12 	bl	8008532 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <MX_CRC_Init+0x78>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	4b0d      	ldr	r3, [pc, #52]	; (800814c <MX_CRC_Init+0x78>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 0201 	orr.w	r2, r2, #1
 800811c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800811e:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <MX_CRC_Init+0x80>)
 8008120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008124:	4a0b      	ldr	r2, [pc, #44]	; (8008154 <MX_CRC_Init+0x80>)
 8008126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800812a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800812e:	4b09      	ldr	r3, [pc, #36]	; (8008154 <MX_CRC_Init+0x80>)
 8008130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008138:	607b      	str	r3, [r7, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 800813c:	4803      	ldr	r0, [pc, #12]	; (800814c <MX_CRC_Init+0x78>)
 800813e:	f000 fa41 	bl	80085c4 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	24002580 	.word	0x24002580
 8008150:	58024c00 	.word	0x58024c00
 8008154:	58024400 	.word	0x58024400

08008158 <MX_RAMECC_Init>:
//  * @brief RAMECC Initialization Function
//  * @param None
//  * @retval None
//  */
static void MX_RAMECC_Init(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RAMECC_Init 1 */

  /* USER CODE END RAMECC_Init 1 */
  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 800815c:	4b11      	ldr	r3, [pc, #68]	; (80081a4 <MX_RAMECC_Init+0x4c>)
 800815e:	4a12      	ldr	r2, [pc, #72]	; (80081a8 <MX_RAMECC_Init+0x50>)
 8008160:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 8008162:	4810      	ldr	r0, [pc, #64]	; (80081a4 <MX_RAMECC_Init+0x4c>)
 8008164:	f7fc f9ae 	bl	80044c4 <HAL_RAMECC_Init>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 800816e:	f000 f9e0 	bl	8008532 <Error_Handler>
  }
  /** Initialize RAMECC2 M2 : SRAM2_0
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 8008172:	4b0e      	ldr	r3, [pc, #56]	; (80081ac <MX_RAMECC_Init+0x54>)
 8008174:	4a0e      	ldr	r2, [pc, #56]	; (80081b0 <MX_RAMECC_Init+0x58>)
 8008176:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 8008178:	480c      	ldr	r0, [pc, #48]	; (80081ac <MX_RAMECC_Init+0x54>)
 800817a:	f7fc f9a3 	bl	80044c4 <HAL_RAMECC_Init>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 8008184:	f000 f9d5 	bl	8008532 <Error_Handler>
  }
  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <MX_RAMECC_Init+0x5c>)
 800818a:	4a0b      	ldr	r2, [pc, #44]	; (80081b8 <MX_RAMECC_Init+0x60>)
 800818c:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 800818e:	4809      	ldr	r0, [pc, #36]	; (80081b4 <MX_RAMECC_Init+0x5c>)
 8008190:	f7fc f998 	bl	80044c4 <HAL_RAMECC_Init>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 800819a:	f000 f9ca 	bl	8008532 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	24004764 	.word	0x24004764
 80081a8:	48023020 	.word	0x48023020
 80081ac:	240046dc 	.word	0x240046dc
 80081b0:	48023040 	.word	0x48023040
 80081b4:	240024f8 	.word	0x240024f8
 80081b8:	58027020 	.word	0x58027020

080081bc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 80081c0:	4b16      	ldr	r3, [pc, #88]	; (800821c <MX_SAI1_Init+0x60>)
 80081c2:	4a17      	ldr	r2, [pc, #92]	; (8008220 <MX_SAI1_Init+0x64>)
 80081c4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 80081c6:	4b15      	ldr	r3, [pc, #84]	; (800821c <MX_SAI1_Init+0x60>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 80081cc:	4b13      	ldr	r3, [pc, #76]	; (800821c <MX_SAI1_Init+0x60>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80081d2:	4b12      	ldr	r3, [pc, #72]	; (800821c <MX_SAI1_Init+0x60>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80081d8:	4b10      	ldr	r3, [pc, #64]	; (800821c <MX_SAI1_Init+0x60>)
 80081da:	2200      	movs	r2, #0
 80081dc:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <MX_SAI1_Init+0x60>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80081e4:	4b0d      	ldr	r3, [pc, #52]	; (800821c <MX_SAI1_Init+0x60>)
 80081e6:	4a0f      	ldr	r2, [pc, #60]	; (8008224 <MX_SAI1_Init+0x68>)
 80081e8:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80081ea:	4b0c      	ldr	r3, [pc, #48]	; (800821c <MX_SAI1_Init+0x60>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <MX_SAI1_Init+0x60>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <MX_SAI1_Init+0x60>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80081fc:	4b07      	ldr	r3, [pc, #28]	; (800821c <MX_SAI1_Init+0x60>)
 80081fe:	2200      	movs	r2, #0
 8008200:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8008202:	2302      	movs	r3, #2
 8008204:	2200      	movs	r2, #0
 8008206:	2100      	movs	r1, #0
 8008208:	4804      	ldr	r0, [pc, #16]	; (800821c <MX_SAI1_Init+0x60>)
 800820a:	f7ff f937 	bl	800747c <HAL_SAI_InitProtocol>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8008214:	f000 f98d 	bl	8008532 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8008218:	bf00      	nop
 800821a:	bd80      	pop	{r7, pc}
 800821c:	240045a4 	.word	0x240045a4
 8008220:	40015824 	.word	0x40015824
 8008224:	0002ee00 	.word	0x0002ee00

08008228 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 800822c:	4b2d      	ldr	r3, [pc, #180]	; (80082e4 <MX_SAI4_Init+0xbc>)
 800822e:	4a2e      	ldr	r2, [pc, #184]	; (80082e8 <MX_SAI4_Init+0xc0>)
 8008230:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8008232:	4b2c      	ldr	r3, [pc, #176]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008234:	2200      	movs	r2, #0
 8008236:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8008238:	4b2a      	ldr	r3, [pc, #168]	; (80082e4 <MX_SAI4_Init+0xbc>)
 800823a:	2201      	movs	r2, #1
 800823c:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 800823e:	4b29      	ldr	r3, [pc, #164]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008240:	2280      	movs	r2, #128	; 0x80
 8008242:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8008244:	4b27      	ldr	r3, [pc, #156]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008246:	2200      	movs	r2, #0
 8008248:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800824a:	4b26      	ldr	r3, [pc, #152]	; (80082e4 <MX_SAI4_Init+0xbc>)
 800824c:	2200      	movs	r2, #0
 800824e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8008250:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008252:	2200      	movs	r2, #0
 8008254:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008256:	4b23      	ldr	r3, [pc, #140]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008258:	2200      	movs	r2, #0
 800825a:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 800825c:	4b21      	ldr	r3, [pc, #132]	; (80082e4 <MX_SAI4_Init+0xbc>)
 800825e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008262:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8008264:	4b1f      	ldr	r3, [pc, #124]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008266:	2200      	movs	r2, #0
 8008268:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 800826a:	4b1e      	ldr	r3, [pc, #120]	; (80082e4 <MX_SAI4_Init+0xbc>)
 800826c:	2200      	movs	r2, #0
 800826e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8008270:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008272:	2200      	movs	r2, #0
 8008274:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 8008276:	4b1b      	ldr	r3, [pc, #108]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 800827e:	4b19      	ldr	r3, [pc, #100]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008280:	2202      	movs	r2, #2
 8008282:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8008284:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800828a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 64;
 800828c:	4b15      	ldr	r3, [pc, #84]	; (80082e4 <MX_SAI4_Init+0xbc>)
 800828e:	2240      	movs	r2, #64	; 0x40
 8008290:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 32;
 8008292:	4b14      	ldr	r3, [pc, #80]	; (80082e4 <MX_SAI4_Init+0xbc>)
 8008294:	2220      	movs	r2, #32
 8008296:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8008298:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <MX_SAI4_Init+0xbc>)
 800829a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800829e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80082a0:	4b10      	ldr	r3, [pc, #64]	; (80082e4 <MX_SAI4_Init+0xbc>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80082a6:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <MX_SAI4_Init+0xbc>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 80082ac:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <MX_SAI4_Init+0xbc>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <MX_SAI4_Init+0xbc>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 4;
 80082b8:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <MX_SAI4_Init+0xbc>)
 80082ba:	2204      	movs	r2, #4
 80082bc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 80082be:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <MX_SAI4_Init+0xbc>)
 80082c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082c4:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 80082c6:	4807      	ldr	r0, [pc, #28]	; (80082e4 <MX_SAI4_Init+0xbc>)
 80082c8:	f7ff f90a 	bl	80074e0 <HAL_SAI_Init>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <MX_SAI4_Init+0xae>
  {
    Error_Handler();
 80082d2:	f000 f92e 	bl	8008532 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */
  hsai_BlockA4.Ack = 0;
 80082d6:	4b03      	ldr	r3, [pc, #12]	; (80082e4 <MX_SAI4_Init+0xbc>)
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* USER CODE END SAI4_Init 2 */

}
 80082de:	bf00      	nop
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	24004640 	.word	0x24004640
 80082e8:	58005404 	.word	0x58005404

080082ec <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80082f2:	4b0a      	ldr	r3, [pc, #40]	; (800831c <MX_BDMA_Init+0x30>)
 80082f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082f8:	4a08      	ldr	r2, [pc, #32]	; (800831c <MX_BDMA_Init+0x30>)
 80082fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008302:	4b06      	ldr	r3, [pc, #24]	; (800831c <MX_BDMA_Init+0x30>)
 8008304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800830c:	607b      	str	r3, [r7, #4]
 800830e:	687b      	ldr	r3, [r7, #4]

}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	58024400 	.word	0x58024400

08008320 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008326:	4b33      	ldr	r3, [pc, #204]	; (80083f4 <MX_DMA_Init+0xd4>)
 8008328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800832c:	4a31      	ldr	r2, [pc, #196]	; (80083f4 <MX_DMA_Init+0xd4>)
 800832e:	f043 0302 	orr.w	r3, r3, #2
 8008332:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008336:	4b2f      	ldr	r3, [pc, #188]	; (80083f4 <MX_DMA_Init+0xd4>)
 8008338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	607b      	str	r3, [r7, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008344:	4b2b      	ldr	r3, [pc, #172]	; (80083f4 <MX_DMA_Init+0xd4>)
 8008346:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800834a:	4a2a      	ldr	r2, [pc, #168]	; (80083f4 <MX_DMA_Init+0xd4>)
 800834c:	f043 0301 	orr.w	r3, r3, #1
 8008350:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008354:	4b27      	ldr	r3, [pc, #156]	; (80083f4 <MX_DMA_Init+0xd4>)
 8008356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8008362:	4b25      	ldr	r3, [pc, #148]	; (80083f8 <MX_DMA_Init+0xd8>)
 8008364:	4a25      	ldr	r2, [pc, #148]	; (80083fc <MX_DMA_Init+0xdc>)
 8008366:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8008368:	4b23      	ldr	r3, [pc, #140]	; (80083f8 <MX_DMA_Init+0xd8>)
 800836a:	2200      	movs	r2, #0
 800836c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800836e:	4b22      	ldr	r3, [pc, #136]	; (80083f8 <MX_DMA_Init+0xd8>)
 8008370:	2280      	movs	r2, #128	; 0x80
 8008372:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8008374:	4b20      	ldr	r3, [pc, #128]	; (80083f8 <MX_DMA_Init+0xd8>)
 8008376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800837a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800837c:	4b1e      	ldr	r3, [pc, #120]	; (80083f8 <MX_DMA_Init+0xd8>)
 800837e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008382:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008384:	4b1c      	ldr	r3, [pc, #112]	; (80083f8 <MX_DMA_Init+0xd8>)
 8008386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800838a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800838c:	4b1a      	ldr	r3, [pc, #104]	; (80083f8 <MX_DMA_Init+0xd8>)
 800838e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008392:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8008394:	4b18      	ldr	r3, [pc, #96]	; (80083f8 <MX_DMA_Init+0xd8>)
 8008396:	2200      	movs	r2, #0
 8008398:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800839a:	4b17      	ldr	r3, [pc, #92]	; (80083f8 <MX_DMA_Init+0xd8>)
 800839c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80083a0:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80083a2:	4b15      	ldr	r3, [pc, #84]	; (80083f8 <MX_DMA_Init+0xd8>)
 80083a4:	2204      	movs	r2, #4
 80083a6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80083a8:	4b13      	ldr	r3, [pc, #76]	; (80083f8 <MX_DMA_Init+0xd8>)
 80083aa:	2203      	movs	r2, #3
 80083ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80083ae:	4b12      	ldr	r3, [pc, #72]	; (80083f8 <MX_DMA_Init+0xd8>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80083b4:	4b10      	ldr	r3, [pc, #64]	; (80083f8 <MX_DMA_Init+0xd8>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80083ba:	480f      	ldr	r0, [pc, #60]	; (80083f8 <MX_DMA_Init+0xd8>)
 80083bc:	f7f8 fb8a 	bl	8000ad4 <HAL_DMA_Init>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <MX_DMA_Init+0xaa>
  {
    Error_Handler( );
 80083c6:	f000 f8b4 	bl	8008532 <Error_Handler>

  // Register some callbacks for the DMA
//    HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_HALFCPLT_CB_ID, &FYDP_SAI4_RxHalfCallback);
  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80083ca:	2200      	movs	r2, #0
 80083cc:	2100      	movs	r1, #0
 80083ce:	200c      	movs	r0, #12
 80083d0:	f7f8 f9e5 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80083d4:	200c      	movs	r0, #12
 80083d6:	f7f8 f9fc 	bl	80007d2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80083da:	2200      	movs	r2, #0
 80083dc:	2100      	movs	r1, #0
 80083de:	2066      	movs	r0, #102	; 0x66
 80083e0:	f7f8 f9dd 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80083e4:	2066      	movs	r0, #102	; 0x66
 80083e6:	f7f8 f9f4 	bl	80007d2 <HAL_NVIC_EnableIRQ>

}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	58024400 	.word	0x58024400
 80083f8:	24002508 	.word	0x24002508
 80083fc:	40020410 	.word	0x40020410

08008400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	; 0x28
 8008404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008406:	f107 0314 	add.w	r3, r7, #20
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	605a      	str	r2, [r3, #4]
 8008410:	609a      	str	r2, [r3, #8]
 8008412:	60da      	str	r2, [r3, #12]
 8008414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008416:	4b2e      	ldr	r3, [pc, #184]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800841c:	4a2c      	ldr	r2, [pc, #176]	; (80084d0 <MX_GPIO_Init+0xd0>)
 800841e:	f043 0302 	orr.w	r3, r3, #2
 8008422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008426:	4b2a      	ldr	r3, [pc, #168]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	613b      	str	r3, [r7, #16]
 8008432:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008434:	4b26      	ldr	r3, [pc, #152]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800843a:	4a25      	ldr	r2, [pc, #148]	; (80084d0 <MX_GPIO_Init+0xd0>)
 800843c:	f043 0301 	orr.w	r3, r3, #1
 8008440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008444:	4b22      	ldr	r3, [pc, #136]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008452:	4b1f      	ldr	r3, [pc, #124]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008458:	4a1d      	ldr	r2, [pc, #116]	; (80084d0 <MX_GPIO_Init+0xd0>)
 800845a:	f043 0310 	orr.w	r3, r3, #16
 800845e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008462:	4b1b      	ldr	r3, [pc, #108]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008468:	f003 0310 	and.w	r3, r3, #16
 800846c:	60bb      	str	r3, [r7, #8]
 800846e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008470:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008476:	4a16      	ldr	r2, [pc, #88]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008478:	f043 0308 	orr.w	r3, r3, #8
 800847c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008480:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008486:	f003 0308 	and.w	r3, r3, #8
 800848a:	607b      	str	r3, [r7, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800848e:	4b10      	ldr	r3, [pc, #64]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008494:	4a0e      	ldr	r2, [pc, #56]	; (80084d0 <MX_GPIO_Init+0xd0>)
 8008496:	f043 0320 	orr.w	r3, r3, #32
 800849a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <MX_GPIO_Init+0xd0>)
 80084a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	603b      	str	r3, [r7, #0]
 80084aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80084ac:	2301      	movs	r3, #1
 80084ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80084b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80084b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084ba:	f107 0314 	add.w	r3, r7, #20
 80084be:	4619      	mov	r1, r3
 80084c0:	4804      	ldr	r0, [pc, #16]	; (80084d4 <MX_GPIO_Init+0xd4>)
 80084c2:	f7fa ff53 	bl	800336c <HAL_GPIO_Init>

}
 80084c6:	bf00      	nop
 80084c8:	3728      	adds	r7, #40	; 0x28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	58024400 	.word	0x58024400
 80084d4:	58021000 	.word	0x58021000

080084d8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80084de:	463b      	mov	r3, r7
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	609a      	str	r2, [r3, #8]
 80084e8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80084ea:	f7f8 f98d 	bl	8000808 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80084ee:	2301      	movs	r3, #1
 80084f0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80084f6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80084fa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80084fc:	2310      	movs	r3, #16
 80084fe:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8008500:	2300      	movs	r3, #0
 8008502:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8008504:	2300      	movs	r3, #0
 8008506:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008508:	2303      	movs	r3, #3
 800850a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800850c:	2300      	movs	r3, #0
 800850e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008510:	2301      	movs	r3, #1
 8008512:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8008514:	2301      	movs	r3, #1
 8008516:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800851c:	463b      	mov	r3, r7
 800851e:	4618      	mov	r0, r3
 8008520:	f7f8 f9aa 	bl	8000878 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8008524:	2006      	movs	r0, #6
 8008526:	f7f8 f987 	bl	8000838 <HAL_MPU_Enable>

}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008532:	b480      	push	{r7}
 8008534:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008536:	b672      	cpsid	i
}
 8008538:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800853a:	e7fe      	b.n	800853a <Error_Handler+0x8>

0800853c <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8008540:	4b10      	ldr	r3, [pc, #64]	; (8008584 <MX_PDM2PCM_Init+0x48>)
 8008542:	2201      	movs	r2, #1
 8008544:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8008546:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <MX_PDM2PCM_Init+0x48>)
 8008548:	2201      	movs	r2, #1
 800854a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800854c:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <MX_PDM2PCM_Init+0x48>)
 800854e:	4a0e      	ldr	r2, [pc, #56]	; (8008588 <MX_PDM2PCM_Init+0x4c>)
 8008550:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <MX_PDM2PCM_Init+0x48>)
 8008554:	2201      	movs	r2, #1
 8008556:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <MX_PDM2PCM_Init+0x48>)
 800855a:	2201      	movs	r2, #1
 800855c:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800855e:	4809      	ldr	r0, [pc, #36]	; (8008584 <MX_PDM2PCM_Init+0x48>)
 8008560:	f001 ffd2 	bl	800a508 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8008564:	4b09      	ldr	r3, [pc, #36]	; (800858c <MX_PDM2PCM_Init+0x50>)
 8008566:	2202      	movs	r2, #2
 8008568:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800856a:	4b08      	ldr	r3, [pc, #32]	; (800858c <MX_PDM2PCM_Init+0x50>)
 800856c:	2210      	movs	r2, #16
 800856e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8008570:	4b06      	ldr	r3, [pc, #24]	; (800858c <MX_PDM2PCM_Init+0x50>)
 8008572:	2200      	movs	r2, #0
 8008574:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8008576:	4905      	ldr	r1, [pc, #20]	; (800858c <MX_PDM2PCM_Init+0x50>)
 8008578:	4802      	ldr	r0, [pc, #8]	; (8008584 <MX_PDM2PCM_Init+0x48>)
 800857a:	f002 f895 	bl	800a6a8 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800857e:	bf00      	nop
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	240087f4 	.word	0x240087f4
 8008588:	7d70a3d6 	.word	0x7d70a3d6
 800858c:	240087ec 	.word	0x240087ec

08008590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008596:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <HAL_MspInit+0x30>)
 8008598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800859c:	4a08      	ldr	r2, [pc, #32]	; (80085c0 <HAL_MspInit+0x30>)
 800859e:	f043 0302 	orr.w	r3, r3, #2
 80085a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80085a6:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <HAL_MspInit+0x30>)
 80085a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	607b      	str	r3, [r7, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	58024400 	.word	0x58024400

080085c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a0b      	ldr	r2, [pc, #44]	; (8008600 <HAL_CRC_MspInit+0x3c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d10e      	bne.n	80085f4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <HAL_CRC_MspInit+0x40>)
 80085d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085dc:	4a09      	ldr	r2, [pc, #36]	; (8008604 <HAL_CRC_MspInit+0x40>)
 80085de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085e6:	4b07      	ldr	r3, [pc, #28]	; (8008604 <HAL_CRC_MspInit+0x40>)
 80085e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	58024c00 	.word	0x58024c00
 8008604:	58024400 	.word	0x58024400

08008608 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b0ba      	sub	sp, #232	; 0xe8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008610:	f107 0310 	add.w	r3, r7, #16
 8008614:	22b4      	movs	r2, #180	; 0xb4
 8008616:	2100      	movs	r1, #0
 8008618:	4618      	mov	r0, r3
 800861a:	f002 f983 	bl	800a924 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4aaa      	ldr	r2, [pc, #680]	; (80088cc <HAL_SAI_MspInit+0x2c4>)
 8008624:	4293      	cmp	r3, r2
 8008626:	f040 80a5 	bne.w	8008774 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800862a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800862e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8008630:	2300      	movs	r3, #0
 8008632:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008634:	f107 0310 	add.w	r3, r7, #16
 8008638:	4618      	mov	r0, r3
 800863a:	f7fc fe8d 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8008644:	f7ff ff75 	bl	8008532 <Error_Handler>
    }

      if (SAI1_client == 0)
 8008648:	4ba1      	ldr	r3, [pc, #644]	; (80088d0 <HAL_SAI_MspInit+0x2c8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10e      	bne.n	800866e <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008650:	4ba0      	ldr	r3, [pc, #640]	; (80088d4 <HAL_SAI_MspInit+0x2cc>)
 8008652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008656:	4a9f      	ldr	r2, [pc, #636]	; (80088d4 <HAL_SAI_MspInit+0x2cc>)
 8008658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800865c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008660:	4b9c      	ldr	r3, [pc, #624]	; (80088d4 <HAL_SAI_MspInit+0x2cc>)
 8008662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800866e:	4b98      	ldr	r3, [pc, #608]	; (80088d0 <HAL_SAI_MspInit+0x2c8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3301      	adds	r3, #1
 8008674:	4a96      	ldr	r2, [pc, #600]	; (80088d0 <HAL_SAI_MspInit+0x2c8>)
 8008676:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008678:	2308      	movs	r3, #8
 800867a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800867e:	2302      	movs	r3, #2
 8008680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008684:	2300      	movs	r3, #0
 8008686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800868a:	2300      	movs	r3, #0
 800868c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008690:	2306      	movs	r3, #6
 8008692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008696:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800869a:	4619      	mov	r1, r3
 800869c:	488e      	ldr	r0, [pc, #568]	; (80088d8 <HAL_SAI_MspInit+0x2d0>)
 800869e:	f7fa fe65 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80086a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80086a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086aa:	2302      	movs	r3, #2
 80086ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086b6:	2300      	movs	r3, #0
 80086b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80086bc:	2306      	movs	r3, #6
 80086be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80086c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80086c6:	4619      	mov	r1, r3
 80086c8:	4884      	ldr	r0, [pc, #528]	; (80088dc <HAL_SAI_MspInit+0x2d4>)
 80086ca:	f7fa fe4f 	bl	800336c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 80086ce:	4b84      	ldr	r3, [pc, #528]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 80086d0:	4a84      	ldr	r2, [pc, #528]	; (80088e4 <HAL_SAI_MspInit+0x2dc>)
 80086d2:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80086d4:	4b82      	ldr	r3, [pc, #520]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 80086d6:	2258      	movs	r2, #88	; 0x58
 80086d8:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80086da:	4b81      	ldr	r3, [pc, #516]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 80086dc:	2240      	movs	r2, #64	; 0x40
 80086de:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80086e0:	4b7f      	ldr	r3, [pc, #508]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80086e6:	4b7e      	ldr	r3, [pc, #504]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 80086e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086ec:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80086ee:	4b7c      	ldr	r3, [pc, #496]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 80086f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80086f4:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80086f6:	4b7a      	ldr	r3, [pc, #488]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 80086f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086fc:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80086fe:	4b78      	ldr	r3, [pc, #480]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 8008700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008704:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8008706:	4b76      	ldr	r3, [pc, #472]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 8008708:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800870c:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800870e:	4b74      	ldr	r3, [pc, #464]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 8008710:	2200      	movs	r2, #0
 8008712:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8008714:	4872      	ldr	r0, [pc, #456]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 8008716:	f7f8 f9dd 	bl	8000ad4 <HAL_DMA_Init>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8008720:	f7ff ff07 	bl	8008532 <Error_Handler>
    }
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8008724:	2306      	movs	r3, #6
 8008726:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800872a:	2300      	movs	r3, #0
 800872c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008730:	2300      	movs	r3, #0
 8008732:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008736:	2301      	movs	r3, #1
 8008738:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800873c:	2301      	movs	r3, #1
 800873e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8008742:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008746:	4619      	mov	r1, r3
 8008748:	4865      	ldr	r0, [pc, #404]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 800874a:	f7fa fcf7 	bl	800313c <HAL_DMAEx_ConfigMuxSync>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8008754:	f7ff feed 	bl	8008532 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a61      	ldr	r2, [pc, #388]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 800875c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008760:	4a5f      	ldr	r2, [pc, #380]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a5d      	ldr	r2, [pc, #372]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 800876a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800876e:	4a5c      	ldr	r2, [pc, #368]	; (80088e0 <HAL_SAI_MspInit+0x2d8>)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a5b      	ldr	r2, [pc, #364]	; (80088e8 <HAL_SAI_MspInit+0x2e0>)
 800877a:	4293      	cmp	r3, r2
 800877c:	f040 80a2 	bne.w	80088c4 <HAL_SAI_MspInit+0x2bc>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8008780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008784:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8008786:	2300      	movs	r3, #0
 8008788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800878c:	f107 0310 	add.w	r3, r7, #16
 8008790:	4618      	mov	r0, r3
 8008792:	f7fc fde1 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 800879c:	f7ff fec9 	bl	8008532 <Error_Handler>
    }

    if (SAI4_client == 0)
 80087a0:	4b52      	ldr	r3, [pc, #328]	; (80088ec <HAL_SAI_MspInit+0x2e4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10e      	bne.n	80087c6 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 80087a8:	4b4a      	ldr	r3, [pc, #296]	; (80088d4 <HAL_SAI_MspInit+0x2cc>)
 80087aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087ae:	4a49      	ldr	r2, [pc, #292]	; (80088d4 <HAL_SAI_MspInit+0x2cc>)
 80087b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80087b8:	4b46      	ldr	r3, [pc, #280]	; (80088d4 <HAL_SAI_MspInit+0x2cc>)
 80087ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087c2:	60bb      	str	r3, [r7, #8]
 80087c4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 80087c6:	4b49      	ldr	r3, [pc, #292]	; (80088ec <HAL_SAI_MspInit+0x2e4>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3301      	adds	r3, #1
 80087cc:	4a47      	ldr	r2, [pc, #284]	; (80088ec <HAL_SAI_MspInit+0x2e4>)
 80087ce:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80087d0:	2330      	movs	r3, #48	; 0x30
 80087d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087d6:	2302      	movs	r3, #2
 80087d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087dc:	2300      	movs	r3, #0
 80087de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087e2:	2300      	movs	r3, #0
 80087e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80087e8:	230a      	movs	r3, #10
 80087ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80087ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80087f2:	4619      	mov	r1, r3
 80087f4:	4838      	ldr	r0, [pc, #224]	; (80088d8 <HAL_SAI_MspInit+0x2d0>)
 80087f6:	f7fa fdb9 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80087fa:	2340      	movs	r3, #64	; 0x40
 80087fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008800:	2302      	movs	r3, #2
 8008802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008806:	2300      	movs	r3, #0
 8008808:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800880c:	2300      	movs	r3, #0
 800880e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8008812:	2301      	movs	r3, #1
 8008814:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008818:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800881c:	4619      	mov	r1, r3
 800881e:	4834      	ldr	r0, [pc, #208]	; (80088f0 <HAL_SAI_MspInit+0x2e8>)
 8008820:	f7fa fda4 	bl	800336c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 8008824:	4b33      	ldr	r3, [pc, #204]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 8008826:	4a34      	ldr	r2, [pc, #208]	; (80088f8 <HAL_SAI_MspInit+0x2f0>)
 8008828:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800882a:	4b32      	ldr	r3, [pc, #200]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 800882c:	220f      	movs	r2, #15
 800882e:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008830:	4b30      	ldr	r3, [pc, #192]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 8008832:	2200      	movs	r2, #0
 8008834:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008836:	4b2f      	ldr	r3, [pc, #188]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 8008838:	2200      	movs	r2, #0
 800883a:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800883c:	4b2d      	ldr	r3, [pc, #180]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 800883e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008842:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008844:	4b2b      	ldr	r3, [pc, #172]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 8008846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800884a:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800884c:	4b29      	ldr	r3, [pc, #164]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 800884e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008852:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8008854:	4b27      	ldr	r3, [pc, #156]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 8008856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800885a:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800885c:	4b25      	ldr	r3, [pc, #148]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 800885e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008862:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8008864:	4823      	ldr	r0, [pc, #140]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 8008866:	f7f8 f935 	bl	8000ad4 <HAL_DMA_Init>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <HAL_SAI_MspInit+0x26c>
    {
      Error_Handler();
 8008870:	f7ff fe5f 	bl	8008532 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8008874:	230e      	movs	r3, #14
 8008876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800887a:	2300      	movs	r3, #0
 800887c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008880:	2300      	movs	r3, #0
 8008882:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800888c:	2301      	movs	r3, #1
 800888e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8008892:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008896:	4619      	mov	r1, r3
 8008898:	4816      	ldr	r0, [pc, #88]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 800889a:	f7fa fc4f 	bl	800313c <HAL_DMAEx_ConfigMuxSync>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <HAL_SAI_MspInit+0x2a0>
    {
      Error_Handler();
 80088a4:	f7ff fe45 	bl	8008532 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a12      	ldr	r2, [pc, #72]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 80088ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80088b0:	4a10      	ldr	r2, [pc, #64]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a0e      	ldr	r2, [pc, #56]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 80088ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80088be:	4a0d      	ldr	r2, [pc, #52]	; (80088f4 <HAL_SAI_MspInit+0x2ec>)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80088c4:	bf00      	nop
 80088c6:	37e8      	adds	r7, #232	; 0xe8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	40015824 	.word	0x40015824
 80088d0:	2400249c 	.word	0x2400249c
 80088d4:	58024400 	.word	0x58024400
 80088d8:	58021000 	.word	0x58021000
 80088dc:	58021400 	.word	0x58021400
 80088e0:	24008774 	.word	0x24008774
 80088e4:	40020028 	.word	0x40020028
 80088e8:	58005404 	.word	0x58005404
 80088ec:	240024a0 	.word	0x240024a0
 80088f0:	58020c00 	.word	0x58020c00
 80088f4:	240046ec 	.word	0x240046ec
 80088f8:	5802541c 	.word	0x5802541c

080088fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088fc:	b480      	push	{r7}
 80088fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008900:	e7fe      	b.n	8008900 <NMI_Handler+0x4>

08008902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008902:	b480      	push	{r7}
 8008904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008906:	e7fe      	b.n	8008906 <HardFault_Handler+0x4>

08008908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800890c:	e7fe      	b.n	800890c <MemManage_Handler+0x4>

0800890e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800890e:	b480      	push	{r7}
 8008910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008912:	e7fe      	b.n	8008912 <BusFault_Handler+0x4>

08008914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008914:	b480      	push	{r7}
 8008916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008918:	e7fe      	b.n	8008918 <UsageFault_Handler+0x4>

0800891a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800891a:	b480      	push	{r7}
 800891c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800891e:	bf00      	nop
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008928:	b480      	push	{r7}
 800892a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800892c:	bf00      	nop
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008936:	b480      	push	{r7}
 8008938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800893a:	bf00      	nop
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008948:	f7f7 fe2e 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800894c:	bf00      	nop
 800894e:	bd80      	pop	{r7, pc}

08008950 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BSP_LED_On(LED1);
 8008954:	2000      	movs	r0, #0
 8008956:	f7f7 fd39 	bl	80003cc <BSP_LED_On>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800895a:	2001      	movs	r0, #1
 800895c:	f7fa fec7 	bl	80036ee <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8008960:	bf00      	nop
 8008962:	bd80      	pop	{r7, pc}

08008964 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008968:	4802      	ldr	r0, [pc, #8]	; (8008974 <DMA1_Stream1_IRQHandler+0x10>)
 800896a:	f7f9 f8bb 	bl	8001ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800896e:	bf00      	nop
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	24008774 	.word	0x24008774

08008978 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800897c:	4803      	ldr	r0, [pc, #12]	; (800898c <DMA2_Stream0_IRQHandler+0x14>)
 800897e:	f7f9 f8b1 	bl	8001ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  BSP_LED_On(LED1);
 8008982:	2000      	movs	r0, #0
 8008984:	f7f7 fd22 	bl	80003cc <BSP_LED_On>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008988:	bf00      	nop
 800898a:	bd80      	pop	{r7, pc}
 800898c:	24002508 	.word	0x24002508

08008990 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8008994:	4802      	ldr	r0, [pc, #8]	; (80089a0 <I2C4_ER_IRQHandler+0x10>)
 8008996:	f7fa fecf 	bl	8003738 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800899a:	bf00      	nop
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	240024ac 	.word	0x240024ac

080089a4 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 80089a8:	4802      	ldr	r0, [pc, #8]	; (80089b4 <DMAMUX1_OVR_IRQHandler+0x10>)
 80089aa:	f7fa fc8d 	bl	80032c8 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80089ae:	bf00      	nop
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	24008774 	.word	0x24008774

080089b8 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 80089bc:	4802      	ldr	r0, [pc, #8]	; (80089c8 <DMAMUX2_OVR_IRQHandler+0x10>)
 80089be:	f7fa fc83 	bl	80032c8 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */
  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 80089c2:	bf00      	nop
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	240046ec 	.word	0x240046ec

080089cc <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 80089d0:	4803      	ldr	r0, [pc, #12]	; (80089e0 <BDMA_Channel1_IRQHandler+0x14>)
 80089d2:	f7f9 f887 	bl	8001ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */
  BSP_LED_On(LED2);
 80089d6:	2001      	movs	r0, #1
 80089d8:	f7f7 fcf8 	bl	80003cc <BSP_LED_On>
  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 80089dc:	bf00      	nop
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	240046ec 	.word	0x240046ec

080089e4 <HAL_SAI_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//	HAL_EXTI_GenerateSWI(&hexti0);
	hsai->Ack = 1;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008a00:	b480      	push	{r7}
 8008a02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008a04:	4b32      	ldr	r3, [pc, #200]	; (8008ad0 <SystemInit+0xd0>)
 8008a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a0a:	4a31      	ldr	r2, [pc, #196]	; (8008ad0 <SystemInit+0xd0>)
 8008a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008a14:	4b2f      	ldr	r3, [pc, #188]	; (8008ad4 <SystemInit+0xd4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 030f 	and.w	r3, r3, #15
 8008a1c:	2b06      	cmp	r3, #6
 8008a1e:	d807      	bhi.n	8008a30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008a20:	4b2c      	ldr	r3, [pc, #176]	; (8008ad4 <SystemInit+0xd4>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f023 030f 	bic.w	r3, r3, #15
 8008a28:	4a2a      	ldr	r2, [pc, #168]	; (8008ad4 <SystemInit+0xd4>)
 8008a2a:	f043 0307 	orr.w	r3, r3, #7
 8008a2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008a30:	4b29      	ldr	r3, [pc, #164]	; (8008ad8 <SystemInit+0xd8>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a28      	ldr	r2, [pc, #160]	; (8008ad8 <SystemInit+0xd8>)
 8008a36:	f043 0301 	orr.w	r3, r3, #1
 8008a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008a3c:	4b26      	ldr	r3, [pc, #152]	; (8008ad8 <SystemInit+0xd8>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008a42:	4b25      	ldr	r3, [pc, #148]	; (8008ad8 <SystemInit+0xd8>)
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	4924      	ldr	r1, [pc, #144]	; (8008ad8 <SystemInit+0xd8>)
 8008a48:	4b24      	ldr	r3, [pc, #144]	; (8008adc <SystemInit+0xdc>)
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008a4e:	4b21      	ldr	r3, [pc, #132]	; (8008ad4 <SystemInit+0xd4>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0308 	and.w	r3, r3, #8
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d007      	beq.n	8008a6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008a5a:	4b1e      	ldr	r3, [pc, #120]	; (8008ad4 <SystemInit+0xd4>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f023 030f 	bic.w	r3, r3, #15
 8008a62:	4a1c      	ldr	r2, [pc, #112]	; (8008ad4 <SystemInit+0xd4>)
 8008a64:	f043 0307 	orr.w	r3, r3, #7
 8008a68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008a6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ad8 <SystemInit+0xd8>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008a70:	4b19      	ldr	r3, [pc, #100]	; (8008ad8 <SystemInit+0xd8>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008a76:	4b18      	ldr	r3, [pc, #96]	; (8008ad8 <SystemInit+0xd8>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008a7c:	4b16      	ldr	r3, [pc, #88]	; (8008ad8 <SystemInit+0xd8>)
 8008a7e:	4a18      	ldr	r2, [pc, #96]	; (8008ae0 <SystemInit+0xe0>)
 8008a80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <SystemInit+0xd8>)
 8008a84:	4a17      	ldr	r2, [pc, #92]	; (8008ae4 <SystemInit+0xe4>)
 8008a86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008a88:	4b13      	ldr	r3, [pc, #76]	; (8008ad8 <SystemInit+0xd8>)
 8008a8a:	4a17      	ldr	r2, [pc, #92]	; (8008ae8 <SystemInit+0xe8>)
 8008a8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008a8e:	4b12      	ldr	r3, [pc, #72]	; (8008ad8 <SystemInit+0xd8>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008a94:	4b10      	ldr	r3, [pc, #64]	; (8008ad8 <SystemInit+0xd8>)
 8008a96:	4a14      	ldr	r2, [pc, #80]	; (8008ae8 <SystemInit+0xe8>)
 8008a98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008a9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ad8 <SystemInit+0xd8>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008aa0:	4b0d      	ldr	r3, [pc, #52]	; (8008ad8 <SystemInit+0xd8>)
 8008aa2:	4a11      	ldr	r2, [pc, #68]	; (8008ae8 <SystemInit+0xe8>)
 8008aa4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008aa6:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <SystemInit+0xd8>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <SystemInit+0xd8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a09      	ldr	r2, [pc, #36]	; (8008ad8 <SystemInit+0xd8>)
 8008ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ab6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008ab8:	4b07      	ldr	r3, [pc, #28]	; (8008ad8 <SystemInit+0xd8>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008abe:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <SystemInit+0xec>)
 8008ac0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008ac4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008ac6:	bf00      	nop
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	e000ed00 	.word	0xe000ed00
 8008ad4:	52002000 	.word	0x52002000
 8008ad8:	58024400 	.word	0x58024400
 8008adc:	eaf6ed7f 	.word	0xeaf6ed7f
 8008ae0:	02020200 	.word	0x02020200
 8008ae4:	01ff0000 	.word	0x01ff0000
 8008ae8:	01010280 	.word	0x01010280
 8008aec:	52004000 	.word	0x52004000

08008af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008b28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008af4:	f7ff ff84 	bl	8008a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008af8:	480c      	ldr	r0, [pc, #48]	; (8008b2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008afa:	490d      	ldr	r1, [pc, #52]	; (8008b30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008afc:	4a0d      	ldr	r2, [pc, #52]	; (8008b34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b00:	e002      	b.n	8008b08 <LoopCopyDataInit>

08008b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b06:	3304      	adds	r3, #4

08008b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b0c:	d3f9      	bcc.n	8008b02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b0e:	4a0a      	ldr	r2, [pc, #40]	; (8008b38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008b10:	4c0a      	ldr	r4, [pc, #40]	; (8008b3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b14:	e001      	b.n	8008b1a <LoopFillZerobss>

08008b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b18:	3204      	adds	r2, #4

08008b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b1c:	d3fb      	bcc.n	8008b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008b1e:	f001 fedd 	bl	800a8dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b22:	f7ff f999 	bl	8007e58 <main>
  bx  lr
 8008b26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008b28:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008b2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008b30:	2400047c 	.word	0x2400047c
  ldr r2, =_sidata
 8008b34:	0800afa8 	.word	0x0800afa8
  ldr r2, =_sbss
 8008b38:	2400247c 	.word	0x2400247c
  ldr r4, =_ebss
 8008b3c:	24008840 	.word	0x24008840

08008b40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b40:	e7fe      	b.n	8008b40 <ADC3_IRQHandler>
	...

08008b44 <D16_GENERIC>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	b089      	sub	sp, #36	; 0x24
 8008b4a:	6993      	ldr	r3, [r2, #24]
 8008b4c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008b4e:	9103      	str	r1, [sp, #12]
 8008b50:	9307      	str	r3, [sp, #28]
 8008b52:	69d3      	ldr	r3, [r2, #28]
 8008b54:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8008b58:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8008b5c:	9106      	str	r1, [sp, #24]
 8008b5e:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8008b62:	2d00      	cmp	r5, #0
 8008b64:	d063      	beq.n	8008c2e <D16_GENERIC+0xea>
 8008b66:	f001 0520 	and.w	r5, r1, #32
 8008b6a:	f001 0110 	and.w	r1, r1, #16
 8008b6e:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8008c50 <D16_GENERIC+0x10c>
 8008b72:	46c1      	mov	r9, r8
 8008b74:	9104      	str	r1, [sp, #16]
 8008b76:	2100      	movs	r1, #0
 8008b78:	9505      	str	r5, [sp, #20]
 8008b7a:	e04d      	b.n	8008c18 <D16_GENERIC+0xd4>
 8008b7c:	5d87      	ldrb	r7, [r0, r6]
 8008b7e:	7805      	ldrb	r5, [r0, #0]
 8008b80:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8008b84:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8008b88:	b2fe      	uxtb	r6, r7
 8008b8a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8008b8e:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8008b92:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8008b96:	441d      	add	r5, r3
 8008b98:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8008b9c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008ba0:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8008ba4:	0a9b      	lsrs	r3, r3, #10
 8008ba6:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8008baa:	4d27      	ldr	r5, [pc, #156]	; (8008c48 <D16_GENERIC+0x104>)
 8008bac:	fb26 c505 	smlad	r5, r6, r5, ip
 8008bb0:	4f26      	ldr	r7, [pc, #152]	; (8008c4c <D16_GENERIC+0x108>)
 8008bb2:	fb26 fc07 	smuad	ip, r6, r7
 8008bb6:	9e04      	ldr	r6, [sp, #16]
 8008bb8:	f101 0801 	add.w	r8, r1, #1
 8008bbc:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8008bc0:	b1ae      	cbz	r6, 8008bee <D16_GENERIC+0xaa>
 8008bc2:	442c      	add	r4, r5
 8008bc4:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8008bc8:	eba4 040a 	sub.w	r4, r4, sl
 8008bcc:	46aa      	mov	sl, r5
 8008bce:	17e7      	asrs	r7, r4, #31
 8008bd0:	fba4 450b 	umull	r4, r5, r4, fp
 8008bd4:	e9cd 4500 	strd	r4, r5, [sp]
 8008bd8:	fb0b 5407 	mla	r4, fp, r7, r5
 8008bdc:	9401      	str	r4, [sp, #4]
 8008bde:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008be2:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008be6:	f145 0500 	adc.w	r5, r5, #0
 8008bea:	006c      	lsls	r4, r5, #1
 8008bec:	4625      	mov	r5, r4
 8008bee:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008bf2:	042d      	lsls	r5, r5, #16
 8008bf4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008bf8:	2700      	movs	r7, #0
 8008bfa:	fb01 fb0b 	mul.w	fp, r1, fp
 8008bfe:	fa1f f188 	uxth.w	r1, r8
 8008c02:	fbc9 6705 	smlal	r6, r7, r9, r5
 8008c06:	9e03      	ldr	r6, [sp, #12]
 8008c08:	10bd      	asrs	r5, r7, #2
 8008c0a:	f305 050f 	ssat	r5, #16, r5
 8008c0e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008c12:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008c14:	428d      	cmp	r5, r1
 8008c16:	d90a      	bls.n	8008c2e <D16_GENERIC+0xea>
 8008c18:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008c1a:	2d01      	cmp	r5, #1
 8008c1c:	b2ee      	uxtb	r6, r5
 8008c1e:	d1ad      	bne.n	8008b7c <D16_GENERIC+0x38>
 8008c20:	9d05      	ldr	r5, [sp, #20]
 8008c22:	f850 7b02 	ldr.w	r7, [r0], #2
 8008c26:	2d00      	cmp	r5, #0
 8008c28:	d0ae      	beq.n	8008b88 <D16_GENERIC+0x44>
 8008c2a:	ba7f      	rev16	r7, r7
 8008c2c:	e7ac      	b.n	8008b88 <D16_GENERIC+0x44>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	9906      	ldr	r1, [sp, #24]
 8008c32:	61d3      	str	r3, [r2, #28]
 8008c34:	9b07      	ldr	r3, [sp, #28]
 8008c36:	f8c2 c008 	str.w	ip, [r2, #8]
 8008c3a:	60d1      	str	r1, [r2, #12]
 8008c3c:	6193      	str	r3, [r2, #24]
 8008c3e:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8008c42:	b009      	add	sp, #36	; 0x24
 8008c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c48:	00030001 	.word	0x00030001
 8008c4c:	00010003 	.word	0x00010003
 8008c50:	24000000 	.word	0x24000000

08008c54 <D24_GENERIC>:
 8008c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c58:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8008c5c:	b089      	sub	sp, #36	; 0x24
 8008c5e:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	6993      	ldr	r3, [r2, #24]
 8008c64:	9104      	str	r1, [sp, #16]
 8008c66:	9307      	str	r3, [sp, #28]
 8008c68:	69d1      	ldr	r1, [r2, #28]
 8008c6a:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8008c6e:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	f000 8088 	beq.w	8008d88 <D24_GENERIC+0x134>
 8008c78:	f005 0620 	and.w	r6, r5, #32
 8008c7c:	f005 0510 	and.w	r5, r5, #16
 8008c80:	f04f 0c00 	mov.w	ip, #0
 8008c84:	f8df e140 	ldr.w	lr, [pc, #320]	; 8008dc8 <D24_GENERIC+0x174>
 8008c88:	9606      	str	r6, [sp, #24]
 8008c8a:	9505      	str	r5, [sp, #20]
 8008c8c:	e064      	b.n	8008d58 <D24_GENERIC+0x104>
 8008c8e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8008c92:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8008c96:	f810 b007 	ldrb.w	fp, [r0, r7]
 8008c9a:	042d      	lsls	r5, r5, #16
 8008c9c:	19f0      	adds	r0, r6, r7
 8008c9e:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8008ca2:	44a9      	add	r9, r5
 8008ca4:	fa5f f689 	uxtb.w	r6, r9
 8008ca8:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8008cac:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8008cb0:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8008cb4:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8008cb8:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8008cbc:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8008cc0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8008cc4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008cc8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8008ccc:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8008cd0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8008cd4:	4d3a      	ldr	r5, [pc, #232]	; (8008dc0 <D24_GENERIC+0x16c>)
 8008cd6:	fb26 8705 	smlad	r7, r6, r5, r8
 8008cda:	4d3a      	ldr	r5, [pc, #232]	; (8008dc4 <D24_GENERIC+0x170>)
 8008cdc:	fb26 3805 	smlad	r8, r6, r5, r3
 8008ce0:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8008ce4:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8008ce8:	2301      	movs	r3, #1
 8008cea:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8008cee:	fb26 f603 	smuad	r6, r6, r3
 8008cf2:	eb0c 0903 	add.w	r9, ip, r3
 8008cf6:	eb0b 0306 	add.w	r3, fp, r6
 8008cfa:	9e05      	ldr	r6, [sp, #20]
 8008cfc:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8008d00:	b1ae      	cbz	r6, 8008d2e <D24_GENERIC+0xda>
 8008d02:	442c      	add	r4, r5
 8008d04:	9e03      	ldr	r6, [sp, #12]
 8008d06:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8008d0a:	1ba4      	subs	r4, r4, r6
 8008d0c:	9503      	str	r5, [sp, #12]
 8008d0e:	17e7      	asrs	r7, r4, #31
 8008d10:	fba4 450b 	umull	r4, r5, r4, fp
 8008d14:	e9cd 4500 	strd	r4, r5, [sp]
 8008d18:	fb0b 5407 	mla	r4, fp, r7, r5
 8008d1c:	9401      	str	r4, [sp, #4]
 8008d1e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008d22:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008d26:	f145 0500 	adc.w	r5, r5, #0
 8008d2a:	006c      	lsls	r4, r5, #1
 8008d2c:	4625      	mov	r5, r4
 8008d2e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008d32:	03ad      	lsls	r5, r5, #14
 8008d34:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008d38:	2700      	movs	r7, #0
 8008d3a:	fb0c fb0b 	mul.w	fp, ip, fp
 8008d3e:	fa1f fc89 	uxth.w	ip, r9
 8008d42:	fbca 6705 	smlal	r6, r7, sl, r5
 8008d46:	9e04      	ldr	r6, [sp, #16]
 8008d48:	10bd      	asrs	r5, r7, #2
 8008d4a:	f305 050f 	ssat	r5, #16, r5
 8008d4e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008d52:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008d54:	4565      	cmp	r5, ip
 8008d56:	d917      	bls.n	8008d88 <D24_GENERIC+0x134>
 8008d58:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008d5a:	f890 9000 	ldrb.w	r9, [r0]
 8008d5e:	b2ef      	uxtb	r7, r5
 8008d60:	2d01      	cmp	r5, #1
 8008d62:	b23e      	sxth	r6, r7
 8008d64:	d193      	bne.n	8008c8e <D24_GENERIC+0x3a>
 8008d66:	9d06      	ldr	r5, [sp, #24]
 8008d68:	b1dd      	cbz	r5, 8008da2 <D24_GENERIC+0x14e>
 8008d6a:	78c7      	ldrb	r7, [r0, #3]
 8008d6c:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8008d70:	f01c 0f01 	tst.w	ip, #1
 8008d74:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8008d78:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8008d7c:	d11a      	bne.n	8008db4 <D24_GENERIC+0x160>
 8008d7e:	f890 9001 	ldrb.w	r9, [r0, #1]
 8008d82:	3002      	adds	r0, #2
 8008d84:	44b1      	add	r9, r6
 8008d86:	e78d      	b.n	8008ca4 <D24_GENERIC+0x50>
 8008d88:	6093      	str	r3, [r2, #8]
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	f8c2 800c 	str.w	r8, [r2, #12]
 8008d92:	6153      	str	r3, [r2, #20]
 8008d94:	9b07      	ldr	r3, [sp, #28]
 8008d96:	61d1      	str	r1, [r2, #28]
 8008d98:	6114      	str	r4, [r2, #16]
 8008d9a:	6193      	str	r3, [r2, #24]
 8008d9c:	b009      	add	sp, #36	; 0x24
 8008d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da2:	7845      	ldrb	r5, [r0, #1]
 8008da4:	3003      	adds	r0, #3
 8008da6:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8008daa:	022d      	lsls	r5, r5, #8
 8008dac:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8008db0:	44a9      	add	r9, r5
 8008db2:	e777      	b.n	8008ca4 <D24_GENERIC+0x50>
 8008db4:	7886      	ldrb	r6, [r0, #2]
 8008db6:	3004      	adds	r0, #4
 8008db8:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8008dbc:	44a9      	add	r9, r5
 8008dbe:	e771      	b.n	8008ca4 <D24_GENERIC+0x50>
 8008dc0:	00030001 	.word	0x00030001
 8008dc4:	00060007 	.word	0x00060007
 8008dc8:	24000000 	.word	0x24000000

08008dcc <D32_GENERIC>:
 8008dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd0:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8008dd4:	b089      	sub	sp, #36	; 0x24
 8008dd6:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008dd8:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008dda:	9302      	str	r3, [sp, #8]
 8008ddc:	6993      	ldr	r3, [r2, #24]
 8008dde:	9104      	str	r1, [sp, #16]
 8008de0:	9307      	str	r3, [sp, #28]
 8008de2:	9503      	str	r5, [sp, #12]
 8008de4:	69d1      	ldr	r1, [r2, #28]
 8008de6:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8008de8:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8008dec:	2e00      	cmp	r6, #0
 8008dee:	f000 8097 	beq.w	8008f20 <D32_GENERIC+0x154>
 8008df2:	f005 0620 	and.w	r6, r5, #32
 8008df6:	f005 0510 	and.w	r5, r5, #16
 8008dfa:	f04f 0e00 	mov.w	lr, #0
 8008dfe:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008f50 <D32_GENERIC+0x184>
 8008e02:	9606      	str	r6, [sp, #24]
 8008e04:	9505      	str	r5, [sp, #20]
 8008e06:	e079      	b.n	8008efc <D32_GENERIC+0x130>
 8008e08:	783d      	ldrb	r5, [r7, #0]
 8008e0a:	f810 b009 	ldrb.w	fp, [r0, r9]
 8008e0e:	042d      	lsls	r5, r5, #16
 8008e10:	f810 a006 	ldrb.w	sl, [r0, r6]
 8008e14:	f890 9000 	ldrb.w	r9, [r0]
 8008e18:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8008e1c:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8008e20:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8008e24:	44a9      	add	r9, r5
 8008e26:	fa5f f789 	uxtb.w	r7, r9
 8008e2a:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8008e2e:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8008e32:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8008e36:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8008e3a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8008e3e:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8008e42:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8008e46:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8008e4a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008e4e:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8008e52:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8008e56:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008e5a:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8008e5e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008e62:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8008e66:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8008e6a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8008e6e:	4d34      	ldr	r5, [pc, #208]	; (8008f40 <D32_GENERIC+0x174>)
 8008e70:	fb29 8805 	smlad	r8, r9, r5, r8
 8008e74:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8008e78:	fb26 8705 	smlad	r7, r6, r5, r8
 8008e7c:	4d31      	ldr	r5, [pc, #196]	; (8008f44 <D32_GENERIC+0x178>)
 8008e7e:	fb29 3305 	smlad	r3, r9, r5, r3
 8008e82:	4d31      	ldr	r5, [pc, #196]	; (8008f48 <D32_GENERIC+0x17c>)
 8008e84:	fb26 3805 	smlad	r8, r6, r5, r3
 8008e88:	2301      	movs	r3, #1
 8008e8a:	fb29 f903 	smuad	r9, r9, r3
 8008e8e:	4b2f      	ldr	r3, [pc, #188]	; (8008f4c <D32_GENERIC+0x180>)
 8008e90:	fb26 9303 	smlad	r3, r6, r3, r9
 8008e94:	9e05      	ldr	r6, [sp, #20]
 8008e96:	f10e 0901 	add.w	r9, lr, #1
 8008e9a:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 8008e9e:	b1ae      	cbz	r6, 8008ecc <D32_GENERIC+0x100>
 8008ea0:	442c      	add	r4, r5
 8008ea2:	9e02      	ldr	r6, [sp, #8]
 8008ea4:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8008ea8:	1ba4      	subs	r4, r4, r6
 8008eaa:	9502      	str	r5, [sp, #8]
 8008eac:	17e7      	asrs	r7, r4, #31
 8008eae:	fba4 450a 	umull	r4, r5, r4, sl
 8008eb2:	e9cd 4500 	strd	r4, r5, [sp]
 8008eb6:	fb0a 5407 	mla	r4, sl, r7, r5
 8008eba:	9401      	str	r4, [sp, #4]
 8008ebc:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008ec0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008ec4:	f145 0500 	adc.w	r5, r5, #0
 8008ec8:	006c      	lsls	r4, r5, #1
 8008eca:	4625      	mov	r5, r4
 8008ecc:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8008ed0:	036d      	lsls	r5, r5, #13
 8008ed2:	9f03      	ldr	r7, [sp, #12]
 8008ed4:	fb0e fb0a 	mul.w	fp, lr, sl
 8008ed8:	fa1f fe89 	uxth.w	lr, r9
 8008edc:	f04f 0a00 	mov.w	sl, #0
 8008ee0:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8008ee4:	9e04      	ldr	r6, [sp, #16]
 8008ee6:	fbc7 9a05 	smlal	r9, sl, r7, r5
 8008eea:	4657      	mov	r7, sl
 8008eec:	10bd      	asrs	r5, r7, #2
 8008eee:	f305 050f 	ssat	r5, #16, r5
 8008ef2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008ef6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008ef8:	4575      	cmp	r5, lr
 8008efa:	d911      	bls.n	8008f20 <D32_GENERIC+0x154>
 8008efc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008efe:	b2ee      	uxtb	r6, r5
 8008f00:	2d01      	cmp	r5, #1
 8008f02:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8008f06:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 8008f0a:	f47f af7d 	bne.w	8008e08 <D32_GENERIC+0x3c>
 8008f0e:	1d05      	adds	r5, r0, #4
 8008f10:	f8d0 9000 	ldr.w	r9, [r0]
 8008f14:	9806      	ldr	r0, [sp, #24]
 8008f16:	b180      	cbz	r0, 8008f3a <D32_GENERIC+0x16e>
 8008f18:	fa99 f999 	rev16.w	r9, r9
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	e782      	b.n	8008e26 <D32_GENERIC+0x5a>
 8008f20:	6093      	str	r3, [r2, #8]
 8008f22:	2000      	movs	r0, #0
 8008f24:	9b02      	ldr	r3, [sp, #8]
 8008f26:	f8c2 800c 	str.w	r8, [r2, #12]
 8008f2a:	6153      	str	r3, [r2, #20]
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	61d1      	str	r1, [r2, #28]
 8008f30:	6114      	str	r4, [r2, #16]
 8008f32:	6193      	str	r3, [r2, #24]
 8008f34:	b009      	add	sp, #36	; 0x24
 8008f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	e773      	b.n	8008e26 <D32_GENERIC+0x5a>
 8008f3e:	bf00      	nop
 8008f40:	00060003 	.word	0x00060003
 8008f44:	000a000c 	.word	0x000a000c
 8008f48:	000c000a 	.word	0x000c000a
 8008f4c:	00030006 	.word	0x00030006
 8008f50:	24000000 	.word	0x24000000

08008f54 <D48_GENERIC>:
 8008f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f58:	6913      	ldr	r3, [r2, #16]
 8008f5a:	b089      	sub	sp, #36	; 0x24
 8008f5c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	6953      	ldr	r3, [r2, #20]
 8008f62:	9104      	str	r1, [sp, #16]
 8008f64:	9302      	str	r3, [sp, #8]
 8008f66:	6993      	ldr	r3, [r2, #24]
 8008f68:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8008f6c:	9307      	str	r3, [sp, #28]
 8008f6e:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8008f72:	9100      	str	r1, [sp, #0]
 8008f74:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008f76:	9103      	str	r1, [sp, #12]
 8008f78:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008f7a:	2c00      	cmp	r4, #0
 8008f7c:	f000 80be 	beq.w	80090fc <D48_GENERIC+0x1a8>
 8008f80:	f001 0420 	and.w	r4, r1, #32
 8008f84:	f001 0110 	and.w	r1, r1, #16
 8008f88:	f04f 0e00 	mov.w	lr, #0
 8008f8c:	9105      	str	r1, [sp, #20]
 8008f8e:	9406      	str	r4, [sp, #24]
 8008f90:	4962      	ldr	r1, [pc, #392]	; (800911c <D48_GENERIC+0x1c8>)
 8008f92:	e0a0      	b.n	80090d6 <D48_GENERIC+0x182>
 8008f94:	eb00 0608 	add.w	r6, r0, r8
 8008f98:	f810 a008 	ldrb.w	sl, [r0, r8]
 8008f9c:	f810 9005 	ldrb.w	r9, [r0, r5]
 8008fa0:	5df4      	ldrb	r4, [r6, r7]
 8008fa2:	443e      	add	r6, r7
 8008fa4:	f890 b000 	ldrb.w	fp, [r0]
 8008fa8:	0420      	lsls	r0, r4, #16
 8008faa:	eb06 0408 	add.w	r4, r6, r8
 8008fae:	f816 6008 	ldrb.w	r6, [r6, r8]
 8008fb2:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8008fb6:	f814 8007 	ldrb.w	r8, [r4, r7]
 8008fba:	4427      	add	r7, r4
 8008fbc:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8008fc0:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8008fc4:	eb0a 040b 	add.w	r4, sl, fp
 8008fc8:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8008fcc:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8008fd0:	b2f7      	uxtb	r7, r6
 8008fd2:	b2e6      	uxtb	r6, r4
 8008fd4:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8008fd8:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8008fdc:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8008fe0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008fe4:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8008fe8:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8008fec:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8008ff0:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8008ff4:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8008ff8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008ffc:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8009000:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009004:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8009008:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800900c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8009010:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009014:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009018:	9d00      	ldr	r5, [sp, #0]
 800901a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800901e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009022:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8009026:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800902a:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800902e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8009032:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8009036:	4c3a      	ldr	r4, [pc, #232]	; (8009120 <D48_GENERIC+0x1cc>)
 8009038:	fb26 5a04 	smlad	sl, r6, r4, r5
 800903c:	4c39      	ldr	r4, [pc, #228]	; (8009124 <D48_GENERIC+0x1d0>)
 800903e:	fb29 aa04 	smlad	sl, r9, r4, sl
 8009042:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8009046:	fb27 aa04 	smlad	sl, r7, r4, sl
 800904a:	4c37      	ldr	r4, [pc, #220]	; (8009128 <D48_GENERIC+0x1d4>)
 800904c:	fb26 3304 	smlad	r3, r6, r4, r3
 8009050:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8009054:	fb29 3304 	smlad	r3, r9, r4, r3
 8009058:	4c34      	ldr	r4, [pc, #208]	; (800912c <D48_GENERIC+0x1d8>)
 800905a:	fb27 3304 	smlad	r3, r7, r4, r3
 800905e:	2501      	movs	r5, #1
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	fb26 f605 	smuad	r6, r6, r5
 8009066:	4b32      	ldr	r3, [pc, #200]	; (8009130 <D48_GENERIC+0x1dc>)
 8009068:	fb29 6903 	smlad	r9, r9, r3, r6
 800906c:	4b31      	ldr	r3, [pc, #196]	; (8009134 <D48_GENERIC+0x1e0>)
 800906e:	fb27 9303 	smlad	r3, r7, r3, r9
 8009072:	9c05      	ldr	r4, [sp, #20]
 8009074:	eb0e 0805 	add.w	r8, lr, r5
 8009078:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800907c:	b19c      	cbz	r4, 80090a6 <D48_GENERIC+0x152>
 800907e:	9c01      	ldr	r4, [sp, #4]
 8009080:	9d02      	ldr	r5, [sp, #8]
 8009082:	4454      	add	r4, sl
 8009084:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8009088:	f8cd a008 	str.w	sl, [sp, #8]
 800908c:	1b64      	subs	r4, r4, r5
 800908e:	fba4 ab09 	umull	sl, fp, r4, r9
 8009092:	17e7      	asrs	r7, r4, #31
 8009094:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8009098:	fb09 bb07 	mla	fp, r9, r7, fp
 800909c:	f14b 0500 	adc.w	r5, fp, #0
 80090a0:	006c      	lsls	r4, r5, #1
 80090a2:	46a2      	mov	sl, r4
 80090a4:	9401      	str	r4, [sp, #4]
 80090a6:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80090a8:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 80090ac:	9d03      	ldr	r5, [sp, #12]
 80090ae:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80090b2:	fb0e f606 	mul.w	r6, lr, r6
 80090b6:	fa1f fe88 	uxth.w	lr, r8
 80090ba:	f04f 0800 	mov.w	r8, #0
 80090be:	fbc5 780a 	smlal	r7, r8, r5, sl
 80090c2:	4645      	mov	r5, r8
 80090c4:	10ac      	asrs	r4, r5, #2
 80090c6:	9d04      	ldr	r5, [sp, #16]
 80090c8:	f304 040f 	ssat	r4, #16, r4
 80090cc:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 80090d0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80090d2:	4574      	cmp	r4, lr
 80090d4:	d912      	bls.n	80090fc <D48_GENERIC+0x1a8>
 80090d6:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80090d8:	b2e5      	uxtb	r5, r4
 80090da:	2c01      	cmp	r4, #1
 80090dc:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80090e0:	f1c5 0700 	rsb	r7, r5, #0
 80090e4:	f47f af56 	bne.w	8008f94 <D48_GENERIC+0x40>
 80090e8:	9d06      	ldr	r5, [sp, #24]
 80090ea:	e9d0 4600 	ldrd	r4, r6, [r0]
 80090ee:	3006      	adds	r0, #6
 80090f0:	2d00      	cmp	r5, #0
 80090f2:	f43f af6b 	beq.w	8008fcc <D48_GENERIC+0x78>
 80090f6:	ba64      	rev16	r4, r4
 80090f8:	ba76      	rev16	r6, r6
 80090fa:	e767      	b.n	8008fcc <D48_GENERIC+0x78>
 80090fc:	6093      	str	r3, [r2, #8]
 80090fe:	2000      	movs	r0, #0
 8009100:	9b00      	ldr	r3, [sp, #0]
 8009102:	f8c2 c01c 	str.w	ip, [r2, #28]
 8009106:	60d3      	str	r3, [r2, #12]
 8009108:	9b01      	ldr	r3, [sp, #4]
 800910a:	6113      	str	r3, [r2, #16]
 800910c:	9b02      	ldr	r3, [sp, #8]
 800910e:	6153      	str	r3, [r2, #20]
 8009110:	9b07      	ldr	r3, [sp, #28]
 8009112:	6193      	str	r3, [r2, #24]
 8009114:	b009      	add	sp, #36	; 0x24
 8009116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911a:	bf00      	nop
 800911c:	24000000 	.word	0x24000000
 8009120:	000f000a 	.word	0x000f000a
 8009124:	00060003 	.word	0x00060003
 8009128:	00150019 	.word	0x00150019
 800912c:	00190015 	.word	0x00190015
 8009130:	00030006 	.word	0x00030006
 8009134:	000a000f 	.word	0x000a000f

08009138 <D64_GENERIC>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	6913      	ldr	r3, [r2, #16]
 800913e:	b089      	sub	sp, #36	; 0x24
 8009140:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	6953      	ldr	r3, [r2, #20]
 8009146:	9105      	str	r1, [sp, #20]
 8009148:	9303      	str	r3, [sp, #12]
 800914a:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800914c:	6993      	ldr	r3, [r2, #24]
 800914e:	69d4      	ldr	r4, [r2, #28]
 8009150:	9307      	str	r3, [sp, #28]
 8009152:	9504      	str	r5, [sp, #16]
 8009154:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8009158:	2900      	cmp	r1, #0
 800915a:	f000 80e8 	beq.w	800932e <D64_GENERIC+0x1f6>
 800915e:	6a11      	ldr	r1, [r2, #32]
 8009160:	2500      	movs	r5, #0
 8009162:	46b3      	mov	fp, r6
 8009164:	9302      	str	r3, [sp, #8]
 8009166:	9106      	str	r1, [sp, #24]
 8009168:	4978      	ldr	r1, [pc, #480]	; (800934c <D64_GENERIC+0x214>)
 800916a:	e0cc      	b.n	8009306 <D64_GENERIC+0x1ce>
 800916c:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8009170:	f1ce 0c00 	rsb	ip, lr, #0
 8009174:	f890 9000 	ldrb.w	r9, [r0]
 8009178:	eb00 0708 	add.w	r7, r0, r8
 800917c:	f810 6008 	ldrb.w	r6, [r0, r8]
 8009180:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8009184:	f817 000c 	ldrb.w	r0, [r7, ip]
 8009188:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800918c:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8009190:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8009194:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8009198:	f817 000c 	ldrb.w	r0, [r7, ip]
 800919c:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 80091a0:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 80091a4:	0400      	lsls	r0, r0, #16
 80091a6:	4467      	add	r7, ip
 80091a8:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 80091ac:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80091b0:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 80091b4:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 80091b8:	444e      	add	r6, r9
 80091ba:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 80091be:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 80091c2:	44c2      	add	sl, r8
 80091c4:	b2f7      	uxtb	r7, r6
 80091c6:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80091ca:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80091ce:	0e36      	lsrs	r6, r6, #24
 80091d0:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80091d4:	fa5f fc8a 	uxtb.w	ip, sl
 80091d8:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 80091dc:	f3ca 2907 	ubfx	r9, sl, #8, #8
 80091e0:	443c      	add	r4, r7
 80091e2:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 80091e6:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80091ea:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 80091ee:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 80091f2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80091f6:	4b56      	ldr	r3, [pc, #344]	; (8009350 <D64_GENERIC+0x218>)
 80091f8:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 80091fc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009200:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8009204:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8009208:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800920c:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8009210:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8009214:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009218:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800921c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009220:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009224:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8009228:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800922c:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8009230:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8009234:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8009238:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800923c:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8009240:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009244:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8009248:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800924c:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8009250:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8009254:	fb28 b903 	smlad	r9, r8, r3, fp
 8009258:	4b3e      	ldr	r3, [pc, #248]	; (8009354 <D64_GENERIC+0x21c>)
 800925a:	fb26 9903 	smlad	r9, r6, r3, r9
 800925e:	4b3e      	ldr	r3, [pc, #248]	; (8009358 <D64_GENERIC+0x220>)
 8009260:	fb2c 9703 	smlad	r7, ip, r3, r9
 8009264:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8009268:	fb2a 7909 	smlad	r9, sl, r9, r7
 800926c:	4f3b      	ldr	r7, [pc, #236]	; (800935c <D64_GENERIC+0x224>)
 800926e:	9b02      	ldr	r3, [sp, #8]
 8009270:	fb28 3307 	smlad	r3, r8, r7, r3
 8009274:	fb2a 3317 	smladx	r3, sl, r7, r3
 8009278:	4f39      	ldr	r7, [pc, #228]	; (8009360 <D64_GENERIC+0x228>)
 800927a:	fb26 3307 	smlad	r3, r6, r7, r3
 800927e:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8009282:	f04f 0e01 	mov.w	lr, #1
 8009286:	fb28 f80e 	smuad	r8, r8, lr
 800928a:	4b36      	ldr	r3, [pc, #216]	; (8009364 <D64_GENERIC+0x22c>)
 800928c:	fb26 8603 	smlad	r6, r6, r3, r8
 8009290:	4b35      	ldr	r3, [pc, #212]	; (8009368 <D64_GENERIC+0x230>)
 8009292:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8009296:	4b35      	ldr	r3, [pc, #212]	; (800936c <D64_GENERIC+0x234>)
 8009298:	fb2a c303 	smlad	r3, sl, r3, ip
 800929c:	9f06      	ldr	r7, [sp, #24]
 800929e:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 80092a2:	9302      	str	r3, [sp, #8]
 80092a4:	b1cf      	cbz	r7, 80092da <D64_GENERIC+0x1a2>
 80092a6:	9b00      	ldr	r3, [sp, #0]
 80092a8:	444b      	add	r3, r9
 80092aa:	461e      	mov	r6, r3
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80092b2:	1af6      	subs	r6, r6, r3
 80092b4:	46b0      	mov	r8, r6
 80092b6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 80092ba:	e9cd 8900 	strd	r8, r9, [sp]
 80092be:	fba6 8907 	umull	r8, r9, r6, r7
 80092c2:	9e01      	ldr	r6, [sp, #4]
 80092c4:	fb07 9306 	mla	r3, r7, r6, r9
 80092c8:	4646      	mov	r6, r8
 80092ca:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 80092ce:	f143 0700 	adc.w	r7, r3, #0
 80092d2:	fa07 f30e 	lsl.w	r3, r7, lr
 80092d6:	4699      	mov	r9, r3
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 80092de:	ea4f 2989 	mov.w	r9, r9, lsl #10
 80092e2:	9b04      	ldr	r3, [sp, #16]
 80092e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80092e8:	2700      	movs	r7, #0
 80092ea:	fb05 fc0c 	mul.w	ip, r5, ip
 80092ee:	3501      	adds	r5, #1
 80092f0:	fbc3 6709 	smlal	r6, r7, r3, r9
 80092f4:	9b05      	ldr	r3, [sp, #20]
 80092f6:	10be      	asrs	r6, r7, #2
 80092f8:	f306 060f 	ssat	r6, #16, r6
 80092fc:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8009300:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009302:	42ae      	cmp	r6, r5
 8009304:	dd11      	ble.n	800932a <D64_GENERIC+0x1f2>
 8009306:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800930a:	f1be 0f01 	cmp.w	lr, #1
 800930e:	f47f af2d 	bne.w	800916c <D64_GENERIC+0x34>
 8009312:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8009314:	f100 0c08 	add.w	ip, r0, #8
 8009318:	06bb      	lsls	r3, r7, #26
 800931a:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800931e:	d513      	bpl.n	8009348 <D64_GENERIC+0x210>
 8009320:	ba76      	rev16	r6, r6
 8009322:	fa9a fa9a 	rev16.w	sl, sl
 8009326:	4660      	mov	r0, ip
 8009328:	e74c      	b.n	80091c4 <D64_GENERIC+0x8c>
 800932a:	465e      	mov	r6, fp
 800932c:	9b02      	ldr	r3, [sp, #8]
 800932e:	6093      	str	r3, [r2, #8]
 8009330:	2000      	movs	r0, #0
 8009332:	9b00      	ldr	r3, [sp, #0]
 8009334:	60d6      	str	r6, [r2, #12]
 8009336:	6113      	str	r3, [r2, #16]
 8009338:	9b03      	ldr	r3, [sp, #12]
 800933a:	61d4      	str	r4, [r2, #28]
 800933c:	6153      	str	r3, [r2, #20]
 800933e:	9b07      	ldr	r3, [sp, #28]
 8009340:	6193      	str	r3, [r2, #24]
 8009342:	b009      	add	sp, #36	; 0x24
 8009344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009348:	4660      	mov	r0, ip
 800934a:	e73b      	b.n	80091c4 <D64_GENERIC+0x8c>
 800934c:	24000000 	.word	0x24000000
 8009350:	001c0015 	.word	0x001c0015
 8009354:	000f000a 	.word	0x000f000a
 8009358:	00060003 	.word	0x00060003
 800935c:	0024002a 	.word	0x0024002a
 8009360:	002e0030 	.word	0x002e0030
 8009364:	00030006 	.word	0x00030006
 8009368:	000a000f 	.word	0x000a000f
 800936c:	0015001c 	.word	0x0015001c

08009370 <D80_GENERIC>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	b08b      	sub	sp, #44	; 0x2c
 8009376:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009378:	9107      	str	r1, [sp, #28]
 800937a:	6911      	ldr	r1, [r2, #16]
 800937c:	9104      	str	r1, [sp, #16]
 800937e:	6951      	ldr	r1, [r2, #20]
 8009380:	9105      	str	r1, [sp, #20]
 8009382:	6991      	ldr	r1, [r2, #24]
 8009384:	9109      	str	r1, [sp, #36]	; 0x24
 8009386:	69d1      	ldr	r1, [r2, #28]
 8009388:	9102      	str	r1, [sp, #8]
 800938a:	6891      	ldr	r1, [r2, #8]
 800938c:	9103      	str	r1, [sp, #12]
 800938e:	68d1      	ldr	r1, [r2, #12]
 8009390:	9101      	str	r1, [sp, #4]
 8009392:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009394:	9106      	str	r1, [sp, #24]
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 810b 	beq.w	80095b2 <D80_GENERIC+0x242>
 800939c:	6a13      	ldr	r3, [r2, #32]
 800939e:	f04f 0800 	mov.w	r8, #0
 80093a2:	f8df c260 	ldr.w	ip, [pc, #608]	; 8009604 <D80_GENERIC+0x294>
 80093a6:	9308      	str	r3, [sp, #32]
 80093a8:	9200      	str	r2, [sp, #0]
 80093aa:	e0ee      	b.n	800958a <D80_GENERIC+0x21a>
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f890 e000 	ldrb.w	lr, [r0]
 80093b2:	b219      	sxth	r1, r3
 80093b4:	425c      	negs	r4, r3
 80093b6:	f810 9003 	ldrb.w	r9, [r0, r3]
 80093ba:	004e      	lsls	r6, r1, #1
 80093bc:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80093c0:	4431      	add	r1, r6
 80093c2:	1843      	adds	r3, r0, r1
 80093c4:	f810 b001 	ldrb.w	fp, [r0, r1]
 80093c8:	1919      	adds	r1, r3, r4
 80093ca:	5d1b      	ldrb	r3, [r3, r4]
 80093cc:	1948      	adds	r0, r1, r5
 80093ce:	f811 a005 	ldrb.w	sl, [r1, r5]
 80093d2:	041b      	lsls	r3, r3, #16
 80093d4:	1907      	adds	r7, r0, r4
 80093d6:	5d01      	ldrb	r1, [r0, r4]
 80093d8:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80093dc:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 80093e0:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 80093e4:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 80093e8:	0409      	lsls	r1, r1, #16
 80093ea:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 80093ee:	eb0b 0905 	add.w	r9, fp, r5
 80093f2:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80093f6:	f81b 5005 	ldrb.w	r5, [fp, r5]
 80093fa:	eb09 0b04 	add.w	fp, r9, r4
 80093fe:	f819 4004 	ldrb.w	r4, [r9, r4]
 8009402:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8009406:	4473      	add	r3, lr
 8009408:	eb0b 0006 	add.w	r0, fp, r6
 800940c:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8009410:	4439      	add	r1, r7
 8009412:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8009416:	b2df      	uxtb	r7, r3
 8009418:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800941c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8009420:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8009424:	fa5f fa81 	uxtb.w	sl, r1
 8009428:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800942c:	9c02      	ldr	r4, [sp, #8]
 800942e:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8009432:	441c      	add	r4, r3
 8009434:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8009438:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800943c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8009440:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8009444:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8009448:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800944c:	b2ed      	uxtb	r5, r5
 800944e:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8009452:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009456:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800945a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800945e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8009462:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8009466:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800946a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800946e:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8009472:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8009476:	0e09      	lsrs	r1, r1, #24
 8009478:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800947c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009480:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8009484:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009488:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800948c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009490:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009494:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8009498:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800949c:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 80094a0:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80094a4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80094a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80094ac:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80094b0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80094b4:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80094b8:	ea4f 229a 	mov.w	r2, sl, lsr #10
 80094bc:	f3ca 0709 	ubfx	r7, sl, #0, #10
 80094c0:	9202      	str	r2, [sp, #8]
 80094c2:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80094c6:	4a43      	ldr	r2, [pc, #268]	; (80095d4 <D80_GENERIC+0x264>)
 80094c8:	9f01      	ldr	r7, [sp, #4]
 80094ca:	fb23 7a02 	smlad	sl, r3, r2, r7
 80094ce:	4a42      	ldr	r2, [pc, #264]	; (80095d8 <D80_GENERIC+0x268>)
 80094d0:	fb26 aa02 	smlad	sl, r6, r2, sl
 80094d4:	4a41      	ldr	r2, [pc, #260]	; (80095dc <D80_GENERIC+0x26c>)
 80094d6:	fb24 aa02 	smlad	sl, r4, r2, sl
 80094da:	4a41      	ldr	r2, [pc, #260]	; (80095e0 <D80_GENERIC+0x270>)
 80094dc:	fb21 a702 	smlad	r7, r1, r2, sl
 80094e0:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80094e4:	fb25 7a0a 	smlad	sl, r5, sl, r7
 80094e8:	4a3e      	ldr	r2, [pc, #248]	; (80095e4 <D80_GENERIC+0x274>)
 80094ea:	9f03      	ldr	r7, [sp, #12]
 80094ec:	fb23 7e02 	smlad	lr, r3, r2, r7
 80094f0:	4a3d      	ldr	r2, [pc, #244]	; (80095e8 <D80_GENERIC+0x278>)
 80094f2:	fb26 ee02 	smlad	lr, r6, r2, lr
 80094f6:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 80094fa:	fb24 e707 	smlad	r7, r4, r7, lr
 80094fe:	4a3b      	ldr	r2, [pc, #236]	; (80095ec <D80_GENERIC+0x27c>)
 8009500:	fb21 7702 	smlad	r7, r1, r2, r7
 8009504:	4a3a      	ldr	r2, [pc, #232]	; (80095f0 <D80_GENERIC+0x280>)
 8009506:	fb25 7202 	smlad	r2, r5, r2, r7
 800950a:	f04f 0901 	mov.w	r9, #1
 800950e:	9201      	str	r2, [sp, #4]
 8009510:	fb23 f909 	smuad	r9, r3, r9
 8009514:	4b37      	ldr	r3, [pc, #220]	; (80095f4 <D80_GENERIC+0x284>)
 8009516:	fb26 9603 	smlad	r6, r6, r3, r9
 800951a:	4f37      	ldr	r7, [pc, #220]	; (80095f8 <D80_GENERIC+0x288>)
 800951c:	fb24 6407 	smlad	r4, r4, r7, r6
 8009520:	4f36      	ldr	r7, [pc, #216]	; (80095fc <D80_GENERIC+0x28c>)
 8009522:	fb21 4707 	smlad	r7, r1, r7, r4
 8009526:	4936      	ldr	r1, [pc, #216]	; (8009600 <D80_GENERIC+0x290>)
 8009528:	fb25 7301 	smlad	r3, r5, r1, r7
 800952c:	9303      	str	r3, [sp, #12]
 800952e:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8009532:	9b08      	ldr	r3, [sp, #32]
 8009534:	b193      	cbz	r3, 800955c <D80_GENERIC+0x1ec>
 8009536:	9a04      	ldr	r2, [sp, #16]
 8009538:	4452      	add	r2, sl
 800953a:	4614      	mov	r4, r2
 800953c:	9a05      	ldr	r2, [sp, #20]
 800953e:	f8cd a014 	str.w	sl, [sp, #20]
 8009542:	1aa4      	subs	r4, r4, r2
 8009544:	fba4 1203 	umull	r1, r2, r4, r3
 8009548:	17e7      	asrs	r7, r4, #31
 800954a:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800954e:	fb03 2207 	mla	r2, r3, r7, r2
 8009552:	f142 0500 	adc.w	r5, r2, #0
 8009556:	006b      	lsls	r3, r5, #1
 8009558:	469a      	mov	sl, r3
 800955a:	9304      	str	r3, [sp, #16]
 800955c:	9e00      	ldr	r6, [sp, #0]
 800955e:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8009562:	9a06      	ldr	r2, [sp, #24]
 8009564:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009568:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800956a:	2500      	movs	r5, #0
 800956c:	fb08 f303 	mul.w	r3, r8, r3
 8009570:	fbc2 450a 	smlal	r4, r5, r2, sl
 8009574:	9a07      	ldr	r2, [sp, #28]
 8009576:	f108 0801 	add.w	r8, r8, #1
 800957a:	10a9      	asrs	r1, r5, #2
 800957c:	f301 010f 	ssat	r1, #16, r1
 8009580:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8009584:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8009586:	4543      	cmp	r3, r8
 8009588:	dd12      	ble.n	80095b0 <D80_GENERIC+0x240>
 800958a:	9b00      	ldr	r3, [sp, #0]
 800958c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800958e:	2b01      	cmp	r3, #1
 8009590:	f47f af0c 	bne.w	80093ac <D80_GENERIC+0x3c>
 8009594:	9b00      	ldr	r3, [sp, #0]
 8009596:	6885      	ldr	r5, [r0, #8]
 8009598:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800959a:	06b2      	lsls	r2, r6, #26
 800959c:	e9d0 3100 	ldrd	r3, r1, [r0]
 80095a0:	f100 000a 	add.w	r0, r0, #10
 80095a4:	f57f af35 	bpl.w	8009412 <D80_GENERIC+0xa2>
 80095a8:	ba5b      	rev16	r3, r3
 80095aa:	ba49      	rev16	r1, r1
 80095ac:	ba6d      	rev16	r5, r5
 80095ae:	e730      	b.n	8009412 <D80_GENERIC+0xa2>
 80095b0:	4632      	mov	r2, r6
 80095b2:	9b03      	ldr	r3, [sp, #12]
 80095b4:	2000      	movs	r0, #0
 80095b6:	6093      	str	r3, [r2, #8]
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	60d3      	str	r3, [r2, #12]
 80095bc:	9b02      	ldr	r3, [sp, #8]
 80095be:	61d3      	str	r3, [r2, #28]
 80095c0:	9b04      	ldr	r3, [sp, #16]
 80095c2:	6113      	str	r3, [r2, #16]
 80095c4:	9b05      	ldr	r3, [sp, #20]
 80095c6:	6153      	str	r3, [r2, #20]
 80095c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ca:	6193      	str	r3, [r2, #24]
 80095cc:	b00b      	add	sp, #44	; 0x2c
 80095ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d2:	bf00      	nop
 80095d4:	002d0024 	.word	0x002d0024
 80095d8:	001c0015 	.word	0x001c0015
 80095dc:	000f000a 	.word	0x000f000a
 80095e0:	00060003 	.word	0x00060003
 80095e4:	0037003f 	.word	0x0037003f
 80095e8:	00450049 	.word	0x00450049
 80095ec:	00490045 	.word	0x00490045
 80095f0:	003f0037 	.word	0x003f0037
 80095f4:	00030006 	.word	0x00030006
 80095f8:	000a000f 	.word	0x000a000f
 80095fc:	0015001c 	.word	0x0015001c
 8009600:	0024002d 	.word	0x0024002d
 8009604:	24000000 	.word	0x24000000

08009608 <D128_GENERIC>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	b08d      	sub	sp, #52	; 0x34
 800960e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009610:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8009614:	9109      	str	r1, [sp, #36]	; 0x24
 8009616:	6911      	ldr	r1, [r2, #16]
 8009618:	9201      	str	r2, [sp, #4]
 800961a:	9106      	str	r1, [sp, #24]
 800961c:	6951      	ldr	r1, [r2, #20]
 800961e:	9107      	str	r1, [sp, #28]
 8009620:	6991      	ldr	r1, [r2, #24]
 8009622:	910b      	str	r1, [sp, #44]	; 0x2c
 8009624:	6891      	ldr	r1, [r2, #8]
 8009626:	9103      	str	r1, [sp, #12]
 8009628:	68d1      	ldr	r1, [r2, #12]
 800962a:	9102      	str	r1, [sp, #8]
 800962c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800962e:	9108      	str	r1, [sp, #32]
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 8183 	beq.w	800993c <D128_GENERIC+0x334>
 8009636:	2300      	movs	r3, #0
 8009638:	6a12      	ldr	r2, [r2, #32]
 800963a:	4681      	mov	r9, r0
 800963c:	920a      	str	r2, [sp, #40]	; 0x28
 800963e:	e9cd a304 	strd	sl, r3, [sp, #16]
 8009642:	e165      	b.n	8009910 <D128_GENERIC+0x308>
 8009644:	b2d2      	uxtb	r2, r2
 8009646:	f899 b000 	ldrb.w	fp, [r9]
 800964a:	b213      	sxth	r3, r2
 800964c:	4255      	negs	r5, r2
 800964e:	f819 0002 	ldrb.w	r0, [r9, r2]
 8009652:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009656:	009f      	lsls	r7, r3, #2
 8009658:	eb09 0402 	add.w	r4, r9, r2
 800965c:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8009660:	f819 8002 	ldrb.w	r8, [r9, r2]
 8009664:	443b      	add	r3, r7
 8009666:	1962      	adds	r2, r4, r5
 8009668:	5d64      	ldrb	r4, [r4, r5]
 800966a:	eb02 0c03 	add.w	ip, r2, r3
 800966e:	0424      	lsls	r4, r4, #16
 8009670:	5cd3      	ldrb	r3, [r2, r3]
 8009672:	eb0c 0e05 	add.w	lr, ip, r5
 8009676:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800967a:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800967e:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8009682:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8009686:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800968a:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800968e:	eb0c 0e06 	add.w	lr, ip, r6
 8009692:	f81c a006 	ldrb.w	sl, [ip, r6]
 8009696:	0412      	lsls	r2, r2, #16
 8009698:	445c      	add	r4, fp
 800969a:	eb0e 0c05 	add.w	ip, lr, r5
 800969e:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 80096a2:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80096a6:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 80096aa:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80096ae:	041b      	lsls	r3, r3, #16
 80096b0:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80096b4:	eb00 0b06 	add.w	fp, r0, r6
 80096b8:	5d80      	ldrb	r0, [r0, r6]
 80096ba:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 80096be:	f81b 6005 	ldrb.w	r6, [fp, r5]
 80096c2:	eb0b 0a05 	add.w	sl, fp, r5
 80096c6:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 80096ca:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 80096ce:	0436      	lsls	r6, r6, #16
 80096d0:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 80096d4:	4442      	add	r2, r8
 80096d6:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 80096da:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 80096de:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80096e2:	44b9      	add	r9, r7
 80096e4:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 80096e8:	4463      	add	r3, ip
 80096ea:	eb06 0508 	add.w	r5, r6, r8
 80096ee:	b2e7      	uxtb	r7, r4
 80096f0:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80096f4:	499b      	ldr	r1, [pc, #620]	; (8009964 <D128_GENERIC+0x35c>)
 80096f6:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80096fa:	0e24      	lsrs	r4, r4, #24
 80096fc:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8009700:	b2d7      	uxtb	r7, r2
 8009702:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8009706:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800970a:	9904      	ldr	r1, [sp, #16]
 800970c:	4461      	add	r1, ip
 800970e:	468c      	mov	ip, r1
 8009710:	4994      	ldr	r1, [pc, #592]	; (8009964 <D128_GENERIC+0x35c>)
 8009712:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8009716:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800971a:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800971e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009722:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8009726:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800972a:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800972e:	0e12      	lsrs	r2, r2, #24
 8009730:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8009734:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009738:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800973c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009740:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8009744:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009748:	b2da      	uxtb	r2, r3
 800974a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800974e:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8009752:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009756:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800975a:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800975e:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8009762:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8009766:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800976a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800976e:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8009772:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8009776:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800977a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800977e:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8009782:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009786:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800978a:	0e1b      	lsrs	r3, r3, #24
 800978c:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8009790:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009794:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8009798:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800979c:	b2eb      	uxtb	r3, r5
 800979e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80097a2:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 80097a6:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80097aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097ae:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 80097b2:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 80097b6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80097ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80097be:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80097c2:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 80097c6:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 80097ca:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80097ce:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80097d2:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 80097d6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80097da:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 80097de:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80097e2:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 80097e6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80097ea:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 80097ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80097f2:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 80097f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80097fa:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 80097fe:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8009802:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8009806:	9104      	str	r1, [sp, #16]
 8009808:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800980c:	9902      	ldr	r1, [sp, #8]
 800980e:	4a56      	ldr	r2, [pc, #344]	; (8009968 <D128_GENERIC+0x360>)
 8009810:	fb2b 1202 	smlad	r2, fp, r2, r1
 8009814:	4955      	ldr	r1, [pc, #340]	; (800996c <D128_GENERIC+0x364>)
 8009816:	fb28 2201 	smlad	r2, r8, r1, r2
 800981a:	4955      	ldr	r1, [pc, #340]	; (8009970 <D128_GENERIC+0x368>)
 800981c:	fb27 2201 	smlad	r2, r7, r1, r2
 8009820:	4954      	ldr	r1, [pc, #336]	; (8009974 <D128_GENERIC+0x36c>)
 8009822:	fb26 2201 	smlad	r2, r6, r1, r2
 8009826:	4954      	ldr	r1, [pc, #336]	; (8009978 <D128_GENERIC+0x370>)
 8009828:	fb24 2201 	smlad	r2, r4, r1, r2
 800982c:	4953      	ldr	r1, [pc, #332]	; (800997c <D128_GENERIC+0x374>)
 800982e:	fb20 2201 	smlad	r2, r0, r1, r2
 8009832:	4953      	ldr	r1, [pc, #332]	; (8009980 <D128_GENERIC+0x378>)
 8009834:	fb23 2201 	smlad	r2, r3, r1, r2
 8009838:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800983c:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8009840:	4950      	ldr	r1, [pc, #320]	; (8009984 <D128_GENERIC+0x37c>)
 8009842:	9a03      	ldr	r2, [sp, #12]
 8009844:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8009848:	4a4f      	ldr	r2, [pc, #316]	; (8009988 <D128_GENERIC+0x380>)
 800984a:	fb28 ce02 	smlad	lr, r8, r2, ip
 800984e:	f8df c150 	ldr.w	ip, [pc, #336]	; 80099a0 <D128_GENERIC+0x398>
 8009852:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8009856:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80099a4 <D128_GENERIC+0x39c>
 800985a:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800985e:	f8df e148 	ldr.w	lr, [pc, #328]	; 80099a8 <D128_GENERIC+0x3a0>
 8009862:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8009866:	f8df c144 	ldr.w	ip, [pc, #324]	; 80099ac <D128_GENERIC+0x3a4>
 800986a:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800986e:	f8df c140 	ldr.w	ip, [pc, #320]	; 80099b0 <D128_GENERIC+0x3a8>
 8009872:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8009876:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80099b4 <D128_GENERIC+0x3ac>
 800987a:	fb25 c20e 	smlad	r2, r5, lr, ip
 800987e:	f04f 0c01 	mov.w	ip, #1
 8009882:	9202      	str	r2, [sp, #8]
 8009884:	fb2b fb0c 	smuad	fp, fp, ip
 8009888:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80099b8 <D128_GENERIC+0x3b0>
 800988c:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8009890:	f8df c128 	ldr.w	ip, [pc, #296]	; 80099bc <D128_GENERIC+0x3b4>
 8009894:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8009898:	4f3c      	ldr	r7, [pc, #240]	; (800998c <D128_GENERIC+0x384>)
 800989a:	fb26 bb07 	smlad	fp, r6, r7, fp
 800989e:	4f3c      	ldr	r7, [pc, #240]	; (8009990 <D128_GENERIC+0x388>)
 80098a0:	fb24 bb07 	smlad	fp, r4, r7, fp
 80098a4:	4f3b      	ldr	r7, [pc, #236]	; (8009994 <D128_GENERIC+0x38c>)
 80098a6:	fb20 bb07 	smlad	fp, r0, r7, fp
 80098aa:	4f3b      	ldr	r7, [pc, #236]	; (8009998 <D128_GENERIC+0x390>)
 80098ac:	fb23 bb07 	smlad	fp, r3, r7, fp
 80098b0:	4b3a      	ldr	r3, [pc, #232]	; (800999c <D128_GENERIC+0x394>)
 80098b2:	fb25 b303 	smlad	r3, r5, r3, fp
 80098b6:	9303      	str	r3, [sp, #12]
 80098b8:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 80098bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098be:	b183      	cbz	r3, 80098e2 <D128_GENERIC+0x2da>
 80098c0:	9a06      	ldr	r2, [sp, #24]
 80098c2:	9907      	ldr	r1, [sp, #28]
 80098c4:	4422      	add	r2, r4
 80098c6:	9407      	str	r4, [sp, #28]
 80098c8:	1a52      	subs	r2, r2, r1
 80098ca:	fba2 0103 	umull	r0, r1, r2, r3
 80098ce:	17d5      	asrs	r5, r2, #31
 80098d0:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 80098d4:	fb03 1105 	mla	r1, r3, r5, r1
 80098d8:	f141 0300 	adc.w	r3, r1, #0
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	461c      	mov	r4, r3
 80098e0:	9306      	str	r3, [sp, #24]
 80098e2:	9d01      	ldr	r5, [sp, #4]
 80098e4:	01e4      	lsls	r4, r4, #7
 80098e6:	9e05      	ldr	r6, [sp, #20]
 80098e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098ec:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 80098ee:	2300      	movs	r3, #0
 80098f0:	9908      	ldr	r1, [sp, #32]
 80098f2:	fb06 f000 	mul.w	r0, r6, r0
 80098f6:	3601      	adds	r6, #1
 80098f8:	fbc1 2304 	smlal	r2, r3, r1, r4
 80098fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098fe:	109b      	asrs	r3, r3, #2
 8009900:	9605      	str	r6, [sp, #20]
 8009902:	f303 030f 	ssat	r3, #16, r3
 8009906:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800990a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800990c:	42b3      	cmp	r3, r6
 800990e:	dd13      	ble.n	8009938 <D128_GENERIC+0x330>
 8009910:	9b01      	ldr	r3, [sp, #4]
 8009912:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009914:	2a01      	cmp	r2, #1
 8009916:	f47f ae95 	bne.w	8009644 <D128_GENERIC+0x3c>
 800991a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800991c:	f109 0610 	add.w	r6, r9, #16
 8009920:	0681      	lsls	r1, r0, #26
 8009922:	e9d9 4200 	ldrd	r4, r2, [r9]
 8009926:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800992a:	d518      	bpl.n	800995e <D128_GENERIC+0x356>
 800992c:	ba64      	rev16	r4, r4
 800992e:	ba52      	rev16	r2, r2
 8009930:	ba5b      	rev16	r3, r3
 8009932:	ba6d      	rev16	r5, r5
 8009934:	46b1      	mov	r9, r6
 8009936:	e6da      	b.n	80096ee <D128_GENERIC+0xe6>
 8009938:	f8dd a010 	ldr.w	sl, [sp, #16]
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	2000      	movs	r0, #0
 8009940:	9903      	ldr	r1, [sp, #12]
 8009942:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009944:	6099      	str	r1, [r3, #8]
 8009946:	9902      	ldr	r1, [sp, #8]
 8009948:	f8c3 a01c 	str.w	sl, [r3, #28]
 800994c:	60d9      	str	r1, [r3, #12]
 800994e:	9906      	ldr	r1, [sp, #24]
 8009950:	619a      	str	r2, [r3, #24]
 8009952:	6119      	str	r1, [r3, #16]
 8009954:	9907      	ldr	r1, [sp, #28]
 8009956:	6159      	str	r1, [r3, #20]
 8009958:	b00d      	add	sp, #52	; 0x34
 800995a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995e:	46b1      	mov	r9, r6
 8009960:	e6c5      	b.n	80096ee <D128_GENERIC+0xe6>
 8009962:	bf00      	nop
 8009964:	24000000 	.word	0x24000000
 8009968:	00780069 	.word	0x00780069
 800996c:	005b004e 	.word	0x005b004e
 8009970:	00420037 	.word	0x00420037
 8009974:	002d0024 	.word	0x002d0024
 8009978:	001c0015 	.word	0x001c0015
 800997c:	000f000a 	.word	0x000f000a
 8009980:	00060003 	.word	0x00060003
 8009984:	00880096 	.word	0x00880096
 8009988:	00a200ac 	.word	0x00a200ac
 800998c:	0015001c 	.word	0x0015001c
 8009990:	0024002d 	.word	0x0024002d
 8009994:	00370042 	.word	0x00370042
 8009998:	004e005b 	.word	0x004e005b
 800999c:	00690078 	.word	0x00690078
 80099a0:	00b400ba 	.word	0x00b400ba
 80099a4:	00be00c0 	.word	0x00be00c0
 80099a8:	00c000be 	.word	0x00c000be
 80099ac:	00ba00b4 	.word	0x00ba00b4
 80099b0:	00ac00a2 	.word	0x00ac00a2
 80099b4:	00960088 	.word	0x00960088
 80099b8:	00030006 	.word	0x00030006
 80099bc:	000a000f 	.word	0x000a000f

080099c0 <D16_1CH_HTONS_VOL_HP>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	6993      	ldr	r3, [r2, #24]
 80099c6:	b087      	sub	sp, #28
 80099c8:	4682      	mov	sl, r0
 80099ca:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 80099d2:	69d3      	ldr	r3, [r2, #28]
 80099d4:	f8d2 e020 	ldr.w	lr, [r2, #32]
 80099d8:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 80099dc:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 80099e0:	9403      	str	r4, [sp, #12]
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d054      	beq.n	8009a90 <D16_1CH_HTONS_VOL_HP+0xd0>
 80099e6:	f1a1 0902 	sub.w	r9, r1, #2
 80099ea:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 80099ee:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8009a9c <D16_1CH_HTONS_VOL_HP+0xdc>
 80099f2:	4650      	mov	r0, sl
 80099f4:	9101      	str	r1, [sp, #4]
 80099f6:	4619      	mov	r1, r3
 80099f8:	f8cd b008 	str.w	fp, [sp, #8]
 80099fc:	9205      	str	r2, [sp, #20]
 80099fe:	f850 3b02 	ldr.w	r3, [r0], #2
 8009a02:	ba5b      	rev16	r3, r3
 8009a04:	b2dc      	uxtb	r4, r3
 8009a06:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009a0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a0e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8009a12:	4419      	add	r1, r3
 8009a14:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8009a18:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009a1c:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8009a20:	0aa1      	lsrs	r1, r4, #10
 8009a22:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009a26:	4a1b      	ldr	r2, [pc, #108]	; (8009a94 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8009a28:	fb23 5402 	smlad	r4, r3, r2, r5
 8009a2c:	4a1a      	ldr	r2, [pc, #104]	; (8009a98 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8009a2e:	fb23 f502 	smuad	r5, r3, r2
 8009a32:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009a36:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8009a3a:	f04f 0b00 	mov.w	fp, #0
 8009a3e:	19a2      	adds	r2, r4, r6
 8009a40:	eba2 020c 	sub.w	r2, r2, ip
 8009a44:	46a4      	mov	ip, r4
 8009a46:	17d7      	asrs	r7, r2, #31
 8009a48:	fba2 230e 	umull	r2, r3, r2, lr
 8009a4c:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8009a50:	fb0e 3307 	mla	r3, lr, r7, r3
 8009a54:	f143 0700 	adc.w	r7, r3, #0
 8009a58:	9b02      	ldr	r3, [sp, #8]
 8009a5a:	047a      	lsls	r2, r7, #17
 8009a5c:	007e      	lsls	r6, r7, #1
 8009a5e:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8009a62:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8009a66:	f303 030f 	ssat	r3, #16, r3
 8009a6a:	f829 3f02 	strh.w	r3, [r9, #2]!
 8009a6e:	9b01      	ldr	r3, [sp, #4]
 8009a70:	4298      	cmp	r0, r3
 8009a72:	d1c4      	bne.n	80099fe <D16_1CH_HTONS_VOL_HP+0x3e>
 8009a74:	460b      	mov	r3, r1
 8009a76:	9a05      	ldr	r2, [sp, #20]
 8009a78:	2000      	movs	r0, #0
 8009a7a:	9903      	ldr	r1, [sp, #12]
 8009a7c:	61d3      	str	r3, [r2, #28]
 8009a7e:	9b04      	ldr	r3, [sp, #16]
 8009a80:	6095      	str	r5, [r2, #8]
 8009a82:	60d1      	str	r1, [r2, #12]
 8009a84:	6193      	str	r3, [r2, #24]
 8009a86:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8009a8a:	b007      	add	sp, #28
 8009a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a90:	4664      	mov	r4, ip
 8009a92:	e7f1      	b.n	8009a78 <D16_1CH_HTONS_VOL_HP+0xb8>
 8009a94:	00030001 	.word	0x00030001
 8009a98:	00010003 	.word	0x00010003
 8009a9c:	24000000 	.word	0x24000000

08009aa0 <D24_1CH_HTONS_VOL_HP>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009aa6:	b089      	sub	sp, #36	; 0x24
 8009aa8:	6993      	ldr	r3, [r2, #24]
 8009aaa:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009aac:	9604      	str	r6, [sp, #16]
 8009aae:	6a16      	ldr	r6, [r2, #32]
 8009ab0:	9306      	str	r3, [sp, #24]
 8009ab2:	9505      	str	r5, [sp, #20]
 8009ab4:	69d3      	ldr	r3, [r2, #28]
 8009ab6:	9600      	str	r6, [sp, #0]
 8009ab8:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009abc:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8009ac0:	2d00      	cmp	r5, #0
 8009ac2:	f000 8083 	beq.w	8009bcc <D24_1CH_HTONS_VOL_HP+0x12c>
 8009ac6:	9207      	str	r2, [sp, #28]
 8009ac8:	2600      	movs	r6, #0
 8009aca:	4622      	mov	r2, r4
 8009acc:	f1a1 0b02 	sub.w	fp, r1, #2
 8009ad0:	4f3f      	ldr	r7, [pc, #252]	; (8009bd0 <D24_1CH_HTONS_VOL_HP+0x130>)
 8009ad2:	461d      	mov	r5, r3
 8009ad4:	f8cd a00c 	str.w	sl, [sp, #12]
 8009ad8:	9c00      	ldr	r4, [sp, #0]
 8009ada:	e056      	b.n	8009b8a <D24_1CH_HTONS_VOL_HP+0xea>
 8009adc:	7841      	ldrb	r1, [r0, #1]
 8009ade:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8009ae2:	3002      	adds	r0, #2
 8009ae4:	4488      	add	r8, r1
 8009ae6:	fa5f f388 	uxtb.w	r3, r8
 8009aea:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8009aee:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8009af2:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8009af6:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8009afa:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8009afe:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8009b02:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8009b06:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009b0a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8009b0e:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8009b12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009b16:	492f      	ldr	r1, [pc, #188]	; (8009bd4 <D24_1CH_HTONS_VOL_HP+0x134>)
 8009b18:	fb23 e901 	smlad	r9, r3, r1, lr
 8009b1c:	492e      	ldr	r1, [pc, #184]	; (8009bd8 <D24_1CH_HTONS_VOL_HP+0x138>)
 8009b1e:	fb23 ce01 	smlad	lr, r3, r1, ip
 8009b22:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8009b26:	2101      	movs	r1, #1
 8009b28:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8009b2c:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8009b30:	fb23 f301 	smuad	r3, r3, r1
 8009b34:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8009b38:	eb08 0c03 	add.w	ip, r8, r3
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	f04f 0a00 	mov.w	sl, #0
 8009b42:	440a      	add	r2, r1
 8009b44:	3601      	adds	r6, #1
 8009b46:	9103      	str	r1, [sp, #12]
 8009b48:	1ad2      	subs	r2, r2, r3
 8009b4a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009b4e:	fba2 2304 	umull	r2, r3, r2, r4
 8009b52:	e9cd 2300 	strd	r2, r3, [sp]
 8009b56:	fb04 3309 	mla	r3, r4, r9, r3
 8009b5a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009b5e:	9301      	str	r3, [sp, #4]
 8009b60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b64:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009b68:	f143 0300 	adc.w	r3, r3, #0
 8009b6c:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8009b70:	005a      	lsls	r2, r3, #1
 8009b72:	9b04      	ldr	r3, [sp, #16]
 8009b74:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8009b78:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8009b7c:	f303 030f 	ssat	r3, #16, r3
 8009b80:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009b84:	9b05      	ldr	r3, [sp, #20]
 8009b86:	429e      	cmp	r6, r3
 8009b88:	d010      	beq.n	8009bac <D24_1CH_HTONS_VOL_HP+0x10c>
 8009b8a:	f890 9003 	ldrb.w	r9, [r0, #3]
 8009b8e:	f016 0f01 	tst.w	r6, #1
 8009b92:	7801      	ldrb	r1, [r0, #0]
 8009b94:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8009b98:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8009b9c:	d09e      	beq.n	8009adc <D24_1CH_HTONS_VOL_HP+0x3c>
 8009b9e:	f890 8002 	ldrb.w	r8, [r0, #2]
 8009ba2:	3004      	adds	r0, #4
 8009ba4:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8009ba8:	4488      	add	r8, r1
 8009baa:	e79c      	b.n	8009ae6 <D24_1CH_HTONS_VOL_HP+0x46>
 8009bac:	4614      	mov	r4, r2
 8009bae:	462b      	mov	r3, r5
 8009bb0:	9a07      	ldr	r2, [sp, #28]
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	61d3      	str	r3, [r2, #28]
 8009bb6:	9b06      	ldr	r3, [sp, #24]
 8009bb8:	f8c2 c008 	str.w	ip, [r2, #8]
 8009bbc:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009bc0:	6193      	str	r3, [r2, #24]
 8009bc2:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009bc6:	b009      	add	sp, #36	; 0x24
 8009bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bcc:	4651      	mov	r1, sl
 8009bce:	e7f0      	b.n	8009bb2 <D24_1CH_HTONS_VOL_HP+0x112>
 8009bd0:	24000000 	.word	0x24000000
 8009bd4:	00030001 	.word	0x00030001
 8009bd8:	00060007 	.word	0x00060007

08009bdc <D32_1CH_HTONS_VOL_HP>:
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	6993      	ldr	r3, [r2, #24]
 8009be2:	b087      	sub	sp, #28
 8009be4:	4683      	mov	fp, r0
 8009be6:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009be8:	9304      	str	r3, [sp, #16]
 8009bea:	69d5      	ldr	r5, [r2, #28]
 8009bec:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009bee:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009bf2:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8009bf6:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d077      	beq.n	8009cee <D32_1CH_HTONS_VOL_HP+0x112>
 8009bfe:	460f      	mov	r7, r1
 8009c00:	46f1      	mov	r9, lr
 8009c02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009c06:	f8cd 8000 	str.w	r8, [sp]
 8009c0a:	4e3a      	ldr	r6, [pc, #232]	; (8009cf4 <D32_1CH_HTONS_VOL_HP+0x118>)
 8009c0c:	469e      	mov	lr, r3
 8009c0e:	46a0      	mov	r8, r4
 8009c10:	9103      	str	r1, [sp, #12]
 8009c12:	9205      	str	r2, [sp, #20]
 8009c14:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009c18:	ba64      	rev16	r4, r4
 8009c1a:	b2e0      	uxtb	r0, r4
 8009c1c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009c20:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009c24:	0e24      	lsrs	r4, r4, #24
 8009c26:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8009c2a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009c2e:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8009c32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009c36:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8009c3a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8009c3e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009c42:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8009c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c4a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009c4e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009c52:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c56:	f3c5 0009 	ubfx	r0, r5, #0, #10
 8009c5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8009c5e:	4826      	ldr	r0, [pc, #152]	; (8009cf8 <D32_1CH_HTONS_VOL_HP+0x11c>)
 8009c60:	fb23 c400 	smlad	r4, r3, r0, ip
 8009c64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009c68:	fb21 4402 	smlad	r4, r1, r2, r4
 8009c6c:	4823      	ldr	r0, [pc, #140]	; (8009cfc <D32_1CH_HTONS_VOL_HP+0x120>)
 8009c6e:	fb23 ec00 	smlad	ip, r3, r0, lr
 8009c72:	4823      	ldr	r0, [pc, #140]	; (8009d00 <D32_1CH_HTONS_VOL_HP+0x124>)
 8009c74:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009c78:	2201      	movs	r2, #1
 8009c7a:	fb23 f302 	smuad	r3, r3, r2
 8009c7e:	4821      	ldr	r0, [pc, #132]	; (8009d04 <D32_1CH_HTONS_VOL_HP+0x128>)
 8009c80:	fb21 3e00 	smlad	lr, r1, r0, r3
 8009c84:	9b00      	ldr	r3, [sp, #0]
 8009c86:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 8009c8a:	4423      	add	r3, r4
 8009c8c:	eba3 0209 	sub.w	r2, r3, r9
 8009c90:	46a1      	mov	r9, r4
 8009c92:	17d1      	asrs	r1, r2, #31
 8009c94:	fba2 230a 	umull	r2, r3, r2, sl
 8009c98:	e9cd 2300 	strd	r2, r3, [sp]
 8009c9c:	fb0a 3301 	mla	r3, sl, r1, r3
 8009ca0:	9301      	str	r3, [sp, #4]
 8009ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ca6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009caa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009cae:	f143 0300 	adc.w	r3, r3, #0
 8009cb2:	0399      	lsls	r1, r3, #14
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	fbc8 2301 	smlal	r2, r3, r8, r1
 8009cbe:	109b      	asrs	r3, r3, #2
 8009cc0:	f303 030f 	ssat	r3, #16, r3
 8009cc4:	f827 3b02 	strh.w	r3, [r7], #2
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	429f      	cmp	r7, r3
 8009ccc:	d1a2      	bne.n	8009c14 <D32_1CH_HTONS_VOL_HP+0x38>
 8009cce:	4673      	mov	r3, lr
 8009cd0:	f8dd 8000 	ldr.w	r8, [sp]
 8009cd4:	9a05      	ldr	r2, [sp, #20]
 8009cd6:	6093      	str	r3, [r2, #8]
 8009cd8:	2000      	movs	r0, #0
 8009cda:	9b04      	ldr	r3, [sp, #16]
 8009cdc:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009ce0:	61d5      	str	r5, [r2, #28]
 8009ce2:	6193      	str	r3, [r2, #24]
 8009ce4:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8009ce8:	b007      	add	sp, #28
 8009cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cee:	4674      	mov	r4, lr
 8009cf0:	e7f1      	b.n	8009cd6 <D32_1CH_HTONS_VOL_HP+0xfa>
 8009cf2:	bf00      	nop
 8009cf4:	24000000 	.word	0x24000000
 8009cf8:	00060003 	.word	0x00060003
 8009cfc:	000a000c 	.word	0x000a000c
 8009d00:	000c000a 	.word	0x000c000a
 8009d04:	00030006 	.word	0x00030006

08009d08 <D48_1CH_HTONS_VOL_HP>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8009d0e:	b087      	sub	sp, #28
 8009d10:	6993      	ldr	r3, [r2, #24]
 8009d12:	9701      	str	r7, [sp, #4]
 8009d14:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009d16:	6a17      	ldr	r7, [r2, #32]
 8009d18:	9304      	str	r3, [sp, #16]
 8009d1a:	69d6      	ldr	r6, [r2, #28]
 8009d1c:	9702      	str	r7, [sp, #8]
 8009d1e:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 8009d22:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	f000 8093 	beq.w	8009e52 <D48_1CH_HTONS_VOL_HP+0x14a>
 8009d2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d30:	f1a1 0b02 	sub.w	fp, r1, #2
 8009d34:	46f2      	mov	sl, lr
 8009d36:	4f48      	ldr	r7, [pc, #288]	; (8009e58 <D48_1CH_HTONS_VOL_HP+0x150>)
 8009d38:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	9205      	str	r2, [sp, #20]
 8009d40:	9103      	str	r1, [sp, #12]
 8009d42:	e9d0 3200 	ldrd	r3, r2, [r0]
 8009d46:	3006      	adds	r0, #6
 8009d48:	ba5b      	rev16	r3, r3
 8009d4a:	fa92 f992 	rev16.w	r9, r2
 8009d4e:	b2dd      	uxtb	r5, r3
 8009d50:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009d54:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009d58:	0e1b      	lsrs	r3, r3, #24
 8009d5a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8009d5e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8009d62:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8009d66:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 8009d6a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8009d6e:	fa5f f289 	uxtb.w	r2, r9
 8009d72:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8009d76:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8009d7a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009d7e:	f3c6 0809 	ubfx	r8, r6, #0, #10
 8009d82:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009d86:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 8009d8a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009d8e:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8009d92:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009d96:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8009d9a:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 8009d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009da2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8009da6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009daa:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8009dae:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8009db2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8009db6:	4b29      	ldr	r3, [pc, #164]	; (8009e5c <D48_1CH_HTONS_VOL_HP+0x154>)
 8009db8:	fb28 c103 	smlad	r1, r8, r3, ip
 8009dbc:	4b28      	ldr	r3, [pc, #160]	; (8009e60 <D48_1CH_HTONS_VOL_HP+0x158>)
 8009dbe:	fb25 1103 	smlad	r1, r5, r3, r1
 8009dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dc6:	fb22 1903 	smlad	r9, r2, r3, r1
 8009dca:	4b26      	ldr	r3, [pc, #152]	; (8009e64 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8009dcc:	fb28 ec03 	smlad	ip, r8, r3, lr
 8009dd0:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8009dd4:	fb25 cc03 	smlad	ip, r5, r3, ip
 8009dd8:	4b23      	ldr	r3, [pc, #140]	; (8009e68 <D48_1CH_HTONS_VOL_HP+0x160>)
 8009dda:	fb22 cc03 	smlad	ip, r2, r3, ip
 8009dde:	2101      	movs	r1, #1
 8009de0:	fb28 f801 	smuad	r8, r8, r1
 8009de4:	4b21      	ldr	r3, [pc, #132]	; (8009e6c <D48_1CH_HTONS_VOL_HP+0x164>)
 8009de6:	fb25 8503 	smlad	r5, r5, r3, r8
 8009dea:	4b21      	ldr	r3, [pc, #132]	; (8009e70 <D48_1CH_HTONS_VOL_HP+0x168>)
 8009dec:	fb22 5e03 	smlad	lr, r2, r3, r5
 8009df0:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 8009df4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009df8:	190a      	adds	r2, r1, r4
 8009dfa:	9c02      	ldr	r4, [sp, #8]
 8009dfc:	eba2 020a 	sub.w	r2, r2, sl
 8009e00:	468a      	mov	sl, r1
 8009e02:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009e06:	fba2 2304 	umull	r2, r3, r2, r4
 8009e0a:	fb04 3309 	mla	r3, r4, r9, r3
 8009e0e:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8009e12:	f04f 0900 	mov.w	r9, #0
 8009e16:	f143 0500 	adc.w	r5, r3, #0
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	032a      	lsls	r2, r5, #12
 8009e1e:	006c      	lsls	r4, r5, #1
 8009e20:	fbc3 8902 	smlal	r8, r9, r3, r2
 8009e24:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8009e28:	f303 030f 	ssat	r3, #16, r3
 8009e2c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	4283      	cmp	r3, r0
 8009e34:	d185      	bne.n	8009d42 <D48_1CH_HTONS_VOL_HP+0x3a>
 8009e36:	4673      	mov	r3, lr
 8009e38:	9a05      	ldr	r2, [sp, #20]
 8009e3a:	6093      	str	r3, [r2, #8]
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	9b04      	ldr	r3, [sp, #16]
 8009e40:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009e44:	61d6      	str	r6, [r2, #28]
 8009e46:	6193      	str	r3, [r2, #24]
 8009e48:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009e4c:	b007      	add	sp, #28
 8009e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e52:	4671      	mov	r1, lr
 8009e54:	e7f1      	b.n	8009e3a <D48_1CH_HTONS_VOL_HP+0x132>
 8009e56:	bf00      	nop
 8009e58:	24000000 	.word	0x24000000
 8009e5c:	000f000a 	.word	0x000f000a
 8009e60:	00060003 	.word	0x00060003
 8009e64:	00150019 	.word	0x00150019
 8009e68:	00190015 	.word	0x00190015
 8009e6c:	00030006 	.word	0x00030006
 8009e70:	000a000f 	.word	0x000a000f

08009e74 <D64_1CH_HTONS_VOL_HP>:
 8009e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009e7a:	b089      	sub	sp, #36	; 0x24
 8009e7c:	6993      	ldr	r3, [r2, #24]
 8009e7e:	4686      	mov	lr, r0
 8009e80:	9503      	str	r5, [sp, #12]
 8009e82:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009e84:	6a15      	ldr	r5, [r2, #32]
 8009e86:	9306      	str	r3, [sp, #24]
 8009e88:	69d6      	ldr	r6, [r2, #28]
 8009e8a:	9504      	str	r5, [sp, #16]
 8009e8c:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 8009e90:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009e94:	2800      	cmp	r0, #0
 8009e96:	f000 80a4 	beq.w	8009fe2 <D64_1CH_HTONS_VOL_HP+0x16e>
 8009e9a:	460f      	mov	r7, r1
 8009e9c:	46f1      	mov	r9, lr
 8009e9e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009ea2:	4d56      	ldr	r5, [pc, #344]	; (8009ffc <D64_1CH_HTONS_VOL_HP+0x188>)
 8009ea4:	46a2      	mov	sl, r4
 8009ea6:	469e      	mov	lr, r3
 8009ea8:	9105      	str	r1, [sp, #20]
 8009eaa:	9207      	str	r2, [sp, #28]
 8009eac:	f859 1b08 	ldr.w	r1, [r9], #8
 8009eb0:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009eb4:	ba49      	rev16	r1, r1
 8009eb6:	fa93 fb93 	rev16.w	fp, r3
 8009eba:	b2cb      	uxtb	r3, r1
 8009ebc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8009ec0:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8009ec4:	0e09      	lsrs	r1, r1, #24
 8009ec6:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8009eca:	fa5f f38b 	uxtb.w	r3, fp
 8009ece:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009ed2:	4426      	add	r6, r4
 8009ed4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8009ed8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8009edc:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8009ee0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8009ee4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009ee8:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8009eec:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8009ef0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009ef4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8009ef8:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 8009efc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009f00:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8009f04:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8009f08:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 8009f0c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009f10:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8009f14:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8009f18:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8009f1c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009f20:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8009f24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009f28:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8009f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f30:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8009f34:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8009f38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009f3c:	f3cb 0009 	ubfx	r0, fp, #0, #10
 8009f40:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8009f44:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8009f48:	482d      	ldr	r0, [pc, #180]	; (800a000 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8009f4a:	fb22 cc00 	smlad	ip, r2, r0, ip
 8009f4e:	482d      	ldr	r0, [pc, #180]	; (800a004 <D64_1CH_HTONS_VOL_HP+0x190>)
 8009f50:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009f54:	482c      	ldr	r0, [pc, #176]	; (800a008 <D64_1CH_HTONS_VOL_HP+0x194>)
 8009f56:	fb23 cc00 	smlad	ip, r3, r0, ip
 8009f5a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8009f5e:	fb2b c404 	smlad	r4, fp, r4, ip
 8009f62:	482a      	ldr	r0, [pc, #168]	; (800a00c <D64_1CH_HTONS_VOL_HP+0x198>)
 8009f64:	fb22 ec00 	smlad	ip, r2, r0, lr
 8009f68:	fb2b cc10 	smladx	ip, fp, r0, ip
 8009f6c:	4828      	ldr	r0, [pc, #160]	; (800a010 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8009f6e:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009f72:	fb23 cc10 	smladx	ip, r3, r0, ip
 8009f76:	f04f 0e01 	mov.w	lr, #1
 8009f7a:	fb22 f20e 	smuad	r2, r2, lr
 8009f7e:	4825      	ldr	r0, [pc, #148]	; (800a014 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8009f80:	fb21 2100 	smlad	r1, r1, r0, r2
 8009f84:	4a24      	ldr	r2, [pc, #144]	; (800a018 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8009f86:	fb23 1302 	smlad	r3, r3, r2, r1
 8009f8a:	4a24      	ldr	r2, [pc, #144]	; (800a01c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8009f8c:	fb2b 3e02 	smlad	lr, fp, r2, r3
 8009f90:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 8009f94:	eb04 0208 	add.w	r2, r4, r8
 8009f98:	eba2 020a 	sub.w	r2, r2, sl
 8009f9c:	46a2      	mov	sl, r4
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	17d1      	asrs	r1, r2, #31
 8009fa2:	e9cd 0100 	strd	r0, r1, [sp]
 8009fa6:	9904      	ldr	r1, [sp, #16]
 8009fa8:	9801      	ldr	r0, [sp, #4]
 8009faa:	fba2 2301 	umull	r2, r3, r2, r1
 8009fae:	fb01 3300 	mla	r3, r1, r0, r3
 8009fb2:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 8009fb6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009fba:	f143 0100 	adc.w	r1, r3, #0
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	02ca      	lsls	r2, r1, #11
 8009fc2:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009fcc:	108b      	asrs	r3, r1, #2
 8009fce:	f303 030f 	ssat	r3, #16, r3
 8009fd2:	f827 3b02 	strh.w	r3, [r7], #2
 8009fd6:	9b05      	ldr	r3, [sp, #20]
 8009fd8:	429f      	cmp	r7, r3
 8009fda:	f47f af67 	bne.w	8009eac <D64_1CH_HTONS_VOL_HP+0x38>
 8009fde:	4673      	mov	r3, lr
 8009fe0:	9a07      	ldr	r2, [sp, #28]
 8009fe2:	6093      	str	r3, [r2, #8]
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	9b06      	ldr	r3, [sp, #24]
 8009fe8:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009fec:	61d6      	str	r6, [r2, #28]
 8009fee:	6193      	str	r3, [r2, #24]
 8009ff0:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8009ff4:	b009      	add	sp, #36	; 0x24
 8009ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffa:	bf00      	nop
 8009ffc:	24000000 	.word	0x24000000
 800a000:	001c0015 	.word	0x001c0015
 800a004:	000f000a 	.word	0x000f000a
 800a008:	00060003 	.word	0x00060003
 800a00c:	0024002a 	.word	0x0024002a
 800a010:	002e0030 	.word	0x002e0030
 800a014:	00030006 	.word	0x00030006
 800a018:	000a000f 	.word	0x000a000f
 800a01c:	0015001c 	.word	0x0015001c

0800a020 <D80_1CH_HTONS_VOL_HP>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	6913      	ldr	r3, [r2, #16]
 800a026:	b089      	sub	sp, #36	; 0x24
 800a028:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800a02a:	9301      	str	r3, [sp, #4]
 800a02c:	9603      	str	r6, [sp, #12]
 800a02e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a030:	6a16      	ldr	r6, [r2, #32]
 800a032:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800a036:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800a03a:	9306      	str	r3, [sp, #24]
 800a03c:	9604      	str	r6, [sp, #16]
 800a03e:	69d3      	ldr	r3, [r2, #28]
 800a040:	2c00      	cmp	r4, #0
 800a042:	f000 80ce 	beq.w	800a1e2 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800a046:	3902      	subs	r1, #2
 800a048:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a04c:	4e66      	ldr	r6, [pc, #408]	; (800a1e8 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800a04e:	469e      	mov	lr, r3
 800a050:	9102      	str	r1, [sp, #8]
 800a052:	46aa      	mov	sl, r5
 800a054:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800a058:	9207      	str	r2, [sp, #28]
 800a05a:	9105      	str	r1, [sp, #20]
 800a05c:	6883      	ldr	r3, [r0, #8]
 800a05e:	e9d0 4200 	ldrd	r4, r2, [r0]
 800a062:	300a      	adds	r0, #10
 800a064:	ba64      	rev16	r4, r4
 800a066:	ba52      	rev16	r2, r2
 800a068:	fa93 fb93 	rev16.w	fp, r3
 800a06c:	b2e5      	uxtb	r5, r4
 800a06e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a072:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800a076:	0e24      	lsrs	r4, r4, #24
 800a078:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800a07c:	b2d5      	uxtb	r5, r2
 800a07e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a082:	44c6      	add	lr, r8
 800a084:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a088:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800a08c:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800a090:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a094:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a098:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800a09c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a0a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0a4:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a0a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a0ac:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800a0b0:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800a0b4:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800a0b8:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800a0bc:	0e12      	lsrs	r2, r2, #24
 800a0be:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800a0c2:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800a0c6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a0ca:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a0ce:	fa5f fb8b 	uxtb.w	fp, fp
 800a0d2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a0d6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a0da:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800a0de:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a0e2:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800a0e6:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a0ea:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a0ee:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800a0f2:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800a0f6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a0fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a0fe:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800a102:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a106:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800a10a:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800a10e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800a112:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800a116:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800a11a:	4934      	ldr	r1, [pc, #208]	; (800a1ec <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800a11c:	fb23 cc01 	smlad	ip, r3, r1, ip
 800a120:	4933      	ldr	r1, [pc, #204]	; (800a1f0 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800a122:	fb24 cc01 	smlad	ip, r4, r1, ip
 800a126:	4933      	ldr	r1, [pc, #204]	; (800a1f4 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800a128:	fb28 cc01 	smlad	ip, r8, r1, ip
 800a12c:	4932      	ldr	r1, [pc, #200]	; (800a1f8 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800a12e:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a132:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a136:	fb2b c901 	smlad	r9, fp, r1, ip
 800a13a:	4930      	ldr	r1, [pc, #192]	; (800a1fc <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800a13c:	fb23 7701 	smlad	r7, r3, r1, r7
 800a140:	492f      	ldr	r1, [pc, #188]	; (800a200 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a142:	fb24 7701 	smlad	r7, r4, r1, r7
 800a146:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800a14a:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800a14e:	492d      	ldr	r1, [pc, #180]	; (800a204 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a150:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a154:	492c      	ldr	r1, [pc, #176]	; (800a208 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a156:	fb2b cc01 	smlad	ip, fp, r1, ip
 800a15a:	2101      	movs	r1, #1
 800a15c:	fb23 f301 	smuad	r3, r3, r1
 800a160:	492a      	ldr	r1, [pc, #168]	; (800a20c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a162:	fb24 3401 	smlad	r4, r4, r1, r3
 800a166:	492a      	ldr	r1, [pc, #168]	; (800a210 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a168:	fb28 4101 	smlad	r1, r8, r1, r4
 800a16c:	4f29      	ldr	r7, [pc, #164]	; (800a214 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a16e:	fb22 1207 	smlad	r2, r2, r7, r1
 800a172:	4f29      	ldr	r7, [pc, #164]	; (800a218 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a174:	fb2b 2707 	smlad	r7, fp, r7, r2
 800a178:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800a17c:	9b01      	ldr	r3, [sp, #4]
 800a17e:	9c04      	ldr	r4, [sp, #16]
 800a180:	440b      	add	r3, r1
 800a182:	eba3 020a 	sub.w	r2, r3, sl
 800a186:	468a      	mov	sl, r1
 800a188:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a18c:	fba2 2304 	umull	r2, r3, r2, r4
 800a190:	fb04 3309 	mla	r3, r4, r9, r3
 800a194:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a198:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a19c:	f143 0500 	adc.w	r5, r3, #0
 800a1a0:	006b      	lsls	r3, r5, #1
 800a1a2:	02aa      	lsls	r2, r5, #10
 800a1a4:	2500      	movs	r5, #0
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	fbc3 4502 	smlal	r4, r5, r3, r2
 800a1ae:	9a02      	ldr	r2, [sp, #8]
 800a1b0:	10ab      	asrs	r3, r5, #2
 800a1b2:	f303 030f 	ssat	r3, #16, r3
 800a1b6:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a1ba:	9b05      	ldr	r3, [sp, #20]
 800a1bc:	9202      	str	r2, [sp, #8]
 800a1be:	4298      	cmp	r0, r3
 800a1c0:	f47f af4c 	bne.w	800a05c <D80_1CH_HTONS_VOL_HP+0x3c>
 800a1c4:	4673      	mov	r3, lr
 800a1c6:	9a07      	ldr	r2, [sp, #28]
 800a1c8:	61d3      	str	r3, [r2, #28]
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	9b01      	ldr	r3, [sp, #4]
 800a1ce:	6097      	str	r7, [r2, #8]
 800a1d0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a1d4:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800a1d8:	9b06      	ldr	r3, [sp, #24]
 800a1da:	6193      	str	r3, [r2, #24]
 800a1dc:	b009      	add	sp, #36	; 0x24
 800a1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	e7f0      	b.n	800a1c8 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800a1e6:	bf00      	nop
 800a1e8:	24000000 	.word	0x24000000
 800a1ec:	002d0024 	.word	0x002d0024
 800a1f0:	001c0015 	.word	0x001c0015
 800a1f4:	000f000a 	.word	0x000f000a
 800a1f8:	00060003 	.word	0x00060003
 800a1fc:	0037003f 	.word	0x0037003f
 800a200:	00450049 	.word	0x00450049
 800a204:	00490045 	.word	0x00490045
 800a208:	003f0037 	.word	0x003f0037
 800a20c:	00030006 	.word	0x00030006
 800a210:	000a000f 	.word	0x000a000f
 800a214:	0015001c 	.word	0x0015001c
 800a218:	0024002d 	.word	0x0024002d

0800a21c <D128_1CH_HTONS_VOL_HP>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	6914      	ldr	r4, [r2, #16]
 800a222:	b08d      	sub	sp, #52	; 0x34
 800a224:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a226:	9404      	str	r4, [sp, #16]
 800a228:	6954      	ldr	r4, [r2, #20]
 800a22a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a22c:	9405      	str	r4, [sp, #20]
 800a22e:	6994      	ldr	r4, [r2, #24]
 800a230:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a234:	940a      	str	r4, [sp, #40]	; 0x28
 800a236:	6894      	ldr	r4, [r2, #8]
 800a238:	9403      	str	r4, [sp, #12]
 800a23a:	68d4      	ldr	r4, [r2, #12]
 800a23c:	9402      	str	r4, [sp, #8]
 800a23e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a240:	6a12      	ldr	r2, [r2, #32]
 800a242:	9407      	str	r4, [sp, #28]
 800a244:	9208      	str	r2, [sp, #32]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 812e 	beq.w	800a4a8 <D128_1CH_HTONS_VOL_HP+0x28c>
 800a24c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a250:	f100 0b10 	add.w	fp, r0, #16
 800a254:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800a4e8 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800a258:	9106      	str	r1, [sp, #24]
 800a25a:	9309      	str	r3, [sp, #36]	; 0x24
 800a25c:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800a260:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800a264:	ba40      	rev16	r0, r0
 800a266:	ba52      	rev16	r2, r2
 800a268:	ba5b      	rev16	r3, r3
 800a26a:	ba76      	rev16	r6, r6
 800a26c:	b2c5      	uxtb	r5, r0
 800a26e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a272:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a276:	0e00      	lsrs	r0, r0, #24
 800a278:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800a27c:	b2d5      	uxtb	r5, r2
 800a27e:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800a282:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a286:	44bc      	add	ip, r7
 800a288:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a28c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800a290:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800a294:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800a298:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800a29c:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800a2a0:	0e12      	lsrs	r2, r2, #24
 800a2a2:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800a2a6:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800a2aa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a2ae:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a2b2:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a2b6:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800a2ba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800a2c4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a2c8:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800a2cc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800a2d0:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800a2d4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a2d8:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800a2dc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a2e0:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800a2e4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a2e8:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800a2ec:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800a2f0:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800a2f4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a2f8:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800a2fc:	0e1b      	lsrs	r3, r3, #24
 800a2fe:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a302:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a306:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800a30a:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800a30e:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800a312:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a316:	b2f3      	uxtb	r3, r6
 800a318:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800a31c:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800a320:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a324:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800a328:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a32c:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800a330:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a334:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a338:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800a33c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800a340:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800a344:	0e36      	lsrs	r6, r6, #24
 800a346:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800a34a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a34e:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800a352:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a356:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800a35a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a35e:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800a362:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800a366:	9101      	str	r1, [sp, #4]
 800a368:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800a36c:	9b02      	ldr	r3, [sp, #8]
 800a36e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a372:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a376:	4611      	mov	r1, r2
 800a378:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800a37c:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800a380:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a384:	4a49      	ldr	r2, [pc, #292]	; (800a4ac <D128_1CH_HTONS_VOL_HP+0x290>)
 800a386:	fb2e 3202 	smlad	r2, lr, r2, r3
 800a38a:	4b49      	ldr	r3, [pc, #292]	; (800a4b0 <D128_1CH_HTONS_VOL_HP+0x294>)
 800a38c:	fb27 2203 	smlad	r2, r7, r3, r2
 800a390:	4b48      	ldr	r3, [pc, #288]	; (800a4b4 <D128_1CH_HTONS_VOL_HP+0x298>)
 800a392:	fb25 2203 	smlad	r2, r5, r3, r2
 800a396:	4b48      	ldr	r3, [pc, #288]	; (800a4b8 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800a398:	fb24 2203 	smlad	r2, r4, r3, r2
 800a39c:	4b47      	ldr	r3, [pc, #284]	; (800a4bc <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800a39e:	fb20 2803 	smlad	r8, r0, r3, r2
 800a3a2:	4b47      	ldr	r3, [pc, #284]	; (800a4c0 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800a3a4:	9a01      	ldr	r2, [sp, #4]
 800a3a6:	fb22 8203 	smlad	r2, r2, r3, r8
 800a3aa:	4b46      	ldr	r3, [pc, #280]	; (800a4c4 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800a3ac:	9102      	str	r1, [sp, #8]
 800a3ae:	fb21 2203 	smlad	r2, r1, r3, r2
 800a3b2:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800a3b6:	fb26 2308 	smlad	r3, r6, r8, r2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	9a03      	ldr	r2, [sp, #12]
 800a3be:	4b42      	ldr	r3, [pc, #264]	; (800a4c8 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800a3c0:	fb2e 2803 	smlad	r8, lr, r3, r2
 800a3c4:	4b41      	ldr	r3, [pc, #260]	; (800a4cc <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800a3c6:	fb27 8a03 	smlad	sl, r7, r3, r8
 800a3ca:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a4ec <D128_1CH_HTONS_VOL_HP+0x2d0>
 800a3ce:	fb25 a808 	smlad	r8, r5, r8, sl
 800a3d2:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800a4f0 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800a3d6:	fb24 880a 	smlad	r8, r4, sl, r8
 800a3da:	f8df a118 	ldr.w	sl, [pc, #280]	; 800a4f4 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800a3de:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800a3e2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800a4f8 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800a3e6:	9b01      	ldr	r3, [sp, #4]
 800a3e8:	fb23 aa08 	smlad	sl, r3, r8, sl
 800a3ec:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800a4fc <D128_1CH_HTONS_VOL_HP+0x2e0>
 800a3f0:	9a02      	ldr	r2, [sp, #8]
 800a3f2:	fb22 a808 	smlad	r8, r2, r8, sl
 800a3f6:	f8df a108 	ldr.w	sl, [pc, #264]	; 800a500 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800a3fa:	fb26 830a 	smlad	r3, r6, sl, r8
 800a3fe:	f04f 0801 	mov.w	r8, #1
 800a402:	9302      	str	r3, [sp, #8]
 800a404:	fb2e fe08 	smuad	lr, lr, r8
 800a408:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800a504 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800a40c:	fb27 ee08 	smlad	lr, r7, r8, lr
 800a410:	4f2f      	ldr	r7, [pc, #188]	; (800a4d0 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800a412:	fb25 ee07 	smlad	lr, r5, r7, lr
 800a416:	4f2f      	ldr	r7, [pc, #188]	; (800a4d4 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800a418:	fb24 ee07 	smlad	lr, r4, r7, lr
 800a41c:	4f2e      	ldr	r7, [pc, #184]	; (800a4d8 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800a41e:	fb20 ee07 	smlad	lr, r0, r7, lr
 800a422:	4f2e      	ldr	r7, [pc, #184]	; (800a4dc <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800a424:	9b01      	ldr	r3, [sp, #4]
 800a426:	fb23 ee07 	smlad	lr, r3, r7, lr
 800a42a:	4f2d      	ldr	r7, [pc, #180]	; (800a4e0 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800a42c:	fb22 e707 	smlad	r7, r2, r7, lr
 800a430:	4b2c      	ldr	r3, [pc, #176]	; (800a4e4 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800a432:	fb26 7303 	smlad	r3, r6, r3, r7
 800a436:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800a43a:	9303      	str	r3, [sp, #12]
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a442:	9f08      	ldr	r7, [sp, #32]
 800a444:	2100      	movs	r1, #0
 800a446:	4433      	add	r3, r6
 800a448:	f10b 0b10 	add.w	fp, fp, #16
 800a44c:	461a      	mov	r2, r3
 800a44e:	9b05      	ldr	r3, [sp, #20]
 800a450:	9605      	str	r6, [sp, #20]
 800a452:	1ad2      	subs	r2, r2, r3
 800a454:	17d5      	asrs	r5, r2, #31
 800a456:	fba2 2307 	umull	r2, r3, r2, r7
 800a45a:	1814      	adds	r4, r2, r0
 800a45c:	fb07 3305 	mla	r3, r7, r5, r3
 800a460:	eb43 0501 	adc.w	r5, r3, r1
 800a464:	006b      	lsls	r3, r5, #1
 800a466:	022a      	lsls	r2, r5, #8
 800a468:	9304      	str	r3, [sp, #16]
 800a46a:	9b07      	ldr	r3, [sp, #28]
 800a46c:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a470:	9a06      	ldr	r2, [sp, #24]
 800a472:	108b      	asrs	r3, r1, #2
 800a474:	f303 030f 	ssat	r3, #16, r3
 800a478:	f822 3b02 	strh.w	r3, [r2], #2
 800a47c:	4613      	mov	r3, r2
 800a47e:	9206      	str	r2, [sp, #24]
 800a480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a482:	4293      	cmp	r3, r2
 800a484:	f47f aeea 	bne.w	800a25c <D128_1CH_HTONS_VOL_HP+0x40>
 800a488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a48a:	2000      	movs	r0, #0
 800a48c:	9903      	ldr	r1, [sp, #12]
 800a48e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a490:	6099      	str	r1, [r3, #8]
 800a492:	9902      	ldr	r1, [sp, #8]
 800a494:	f8c3 c01c 	str.w	ip, [r3, #28]
 800a498:	60d9      	str	r1, [r3, #12]
 800a49a:	9904      	ldr	r1, [sp, #16]
 800a49c:	619a      	str	r2, [r3, #24]
 800a49e:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800a4a2:	b00d      	add	sp, #52	; 0x34
 800a4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a8:	9e05      	ldr	r6, [sp, #20]
 800a4aa:	e7ed      	b.n	800a488 <D128_1CH_HTONS_VOL_HP+0x26c>
 800a4ac:	00780069 	.word	0x00780069
 800a4b0:	005b004e 	.word	0x005b004e
 800a4b4:	00420037 	.word	0x00420037
 800a4b8:	002d0024 	.word	0x002d0024
 800a4bc:	001c0015 	.word	0x001c0015
 800a4c0:	000f000a 	.word	0x000f000a
 800a4c4:	00060003 	.word	0x00060003
 800a4c8:	00880096 	.word	0x00880096
 800a4cc:	00a200ac 	.word	0x00a200ac
 800a4d0:	000a000f 	.word	0x000a000f
 800a4d4:	0015001c 	.word	0x0015001c
 800a4d8:	0024002d 	.word	0x0024002d
 800a4dc:	00370042 	.word	0x00370042
 800a4e0:	004e005b 	.word	0x004e005b
 800a4e4:	00690078 	.word	0x00690078
 800a4e8:	24000000 	.word	0x24000000
 800a4ec:	00b400ba 	.word	0x00b400ba
 800a4f0:	00be00c0 	.word	0x00be00c0
 800a4f4:	00c000be 	.word	0x00c000be
 800a4f8:	00ba00b4 	.word	0x00ba00b4
 800a4fc:	00ac00a2 	.word	0x00ac00a2
 800a500:	00960088 	.word	0x00960088
 800a504:	00030006 	.word	0x00030006

0800a508 <PDM_Filter_Init>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	2240      	movs	r2, #64	; 0x40
 800a50c:	2100      	movs	r1, #0
 800a50e:	4604      	mov	r4, r0
 800a510:	300c      	adds	r0, #12
 800a512:	f000 fa07 	bl	800a924 <memset>
 800a516:	4a56      	ldr	r2, [pc, #344]	; (800a670 <PDM_Filter_Init+0x168>)
 800a518:	4856      	ldr	r0, [pc, #344]	; (800a674 <PDM_Filter_Init+0x16c>)
 800a51a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800a51e:	6813      	ldr	r3, [r2, #0]
 800a520:	f24c 2540 	movw	r5, #49728	; 0xc240
 800a524:	f023 0301 	bic.w	r3, r3, #1
 800a528:	6013      	str	r3, [r2, #0]
 800a52a:	6803      	ldr	r3, [r0, #0]
 800a52c:	400b      	ands	r3, r1
 800a52e:	42ab      	cmp	r3, r5
 800a530:	d040      	beq.n	800a5b4 <PDM_Filter_Init+0xac>
 800a532:	6803      	ldr	r3, [r0, #0]
 800a534:	f24c 2270 	movw	r2, #49776	; 0xc270
 800a538:	4019      	ands	r1, r3
 800a53a:	4291      	cmp	r1, r2
 800a53c:	d03a      	beq.n	800a5b4 <PDM_Filter_Init+0xac>
 800a53e:	4b4e      	ldr	r3, [pc, #312]	; (800a678 <PDM_Filter_Init+0x170>)
 800a540:	2101      	movs	r1, #1
 800a542:	461a      	mov	r2, r3
 800a544:	6019      	str	r1, [r3, #0]
 800a546:	6813      	ldr	r3, [r2, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1fc      	bne.n	800a546 <PDM_Filter_Init+0x3e>
 800a54c:	4b4b      	ldr	r3, [pc, #300]	; (800a67c <PDM_Filter_Init+0x174>)
 800a54e:	494c      	ldr	r1, [pc, #304]	; (800a680 <PDM_Filter_Init+0x178>)
 800a550:	4a4c      	ldr	r2, [pc, #304]	; (800a684 <PDM_Filter_Init+0x17c>)
 800a552:	6019      	str	r1, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	8820      	ldrh	r0, [r4, #0]
 800a558:	4293      	cmp	r3, r2
 800a55a:	8961      	ldrh	r1, [r4, #10]
 800a55c:	f04f 0300 	mov.w	r3, #0
 800a560:	8922      	ldrh	r2, [r4, #8]
 800a562:	bf14      	ite	ne
 800a564:	2500      	movne	r5, #0
 800a566:	4d47      	ldreq	r5, [pc, #284]	; (800a684 <PDM_Filter_Init+0x17c>)
 800a568:	2801      	cmp	r0, #1
 800a56a:	61a3      	str	r3, [r4, #24]
 800a56c:	6465      	str	r5, [r4, #68]	; 0x44
 800a56e:	60e3      	str	r3, [r4, #12]
 800a570:	6263      	str	r3, [r4, #36]	; 0x24
 800a572:	6423      	str	r3, [r4, #64]	; 0x40
 800a574:	86a1      	strh	r1, [r4, #52]	; 0x34
 800a576:	86e2      	strh	r2, [r4, #54]	; 0x36
 800a578:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800a57c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a580:	d936      	bls.n	800a5f0 <PDM_Filter_Init+0xe8>
 800a582:	2003      	movs	r0, #3
 800a584:	2302      	movs	r3, #2
 800a586:	8862      	ldrh	r2, [r4, #2]
 800a588:	2a01      	cmp	r2, #1
 800a58a:	d92e      	bls.n	800a5ea <PDM_Filter_Init+0xe2>
 800a58c:	2140      	movs	r1, #64	; 0x40
 800a58e:	2300      	movs	r3, #0
 800a590:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a592:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800a596:	d101      	bne.n	800a59c <PDM_Filter_Init+0x94>
 800a598:	460b      	mov	r3, r1
 800a59a:	6421      	str	r1, [r4, #64]	; 0x40
 800a59c:	6862      	ldr	r2, [r4, #4]
 800a59e:	b11a      	cbz	r2, 800a5a8 <PDM_Filter_Init+0xa0>
 800a5a0:	f043 0310 	orr.w	r3, r3, #16
 800a5a4:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a5a6:	6423      	str	r3, [r4, #64]	; 0x40
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	8722      	strh	r2, [r4, #56]	; 0x38
 800a5ac:	b908      	cbnz	r0, 800a5b2 <PDM_Filter_Init+0xaa>
 800a5ae:	3380      	adds	r3, #128	; 0x80
 800a5b0:	6423      	str	r3, [r4, #64]	; 0x40
 800a5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5b4:	4b34      	ldr	r3, [pc, #208]	; (800a688 <PDM_Filter_Init+0x180>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1c0      	bne.n	800a53e <PDM_Filter_Init+0x36>
 800a5bc:	4a33      	ldr	r2, [pc, #204]	; (800a68c <PDM_Filter_Init+0x184>)
 800a5be:	6813      	ldr	r3, [r2, #0]
 800a5c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5c4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a5c8:	d006      	beq.n	800a5d8 <PDM_Filter_Init+0xd0>
 800a5ca:	6813      	ldr	r3, [r2, #0]
 800a5cc:	f240 4283 	movw	r2, #1155	; 0x483
 800a5d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d1b2      	bne.n	800a53e <PDM_Filter_Init+0x36>
 800a5d8:	4b2d      	ldr	r3, [pc, #180]	; (800a690 <PDM_Filter_Init+0x188>)
 800a5da:	2101      	movs	r1, #1
 800a5dc:	461a      	mov	r2, r3
 800a5de:	6019      	str	r1, [r3, #0]
 800a5e0:	6813      	ldr	r3, [r2, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1fc      	bne.n	800a5e0 <PDM_Filter_Init+0xd8>
 800a5e6:	4b2b      	ldr	r3, [pc, #172]	; (800a694 <PDM_Filter_Init+0x18c>)
 800a5e8:	e7b1      	b.n	800a54e <PDM_Filter_Init+0x46>
 800a5ea:	d03a      	beq.n	800a662 <PDM_Filter_Init+0x15a>
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	e7cd      	b.n	800a58c <PDM_Filter_Init+0x84>
 800a5f0:	4d29      	ldr	r5, [pc, #164]	; (800a698 <PDM_Filter_Init+0x190>)
 800a5f2:	782a      	ldrb	r2, [r5, #0]
 800a5f4:	d01b      	beq.n	800a62e <PDM_Filter_Init+0x126>
 800a5f6:	2a01      	cmp	r2, #1
 800a5f8:	d001      	beq.n	800a5fe <PDM_Filter_Init+0xf6>
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	e7c3      	b.n	800a586 <PDM_Filter_Init+0x7e>
 800a5fe:	4927      	ldr	r1, [pc, #156]	; (800a69c <PDM_Filter_Init+0x194>)
 800a600:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800a6a4 <PDM_Filter_Init+0x19c>
 800a604:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a608:	4e25      	ldr	r6, [pc, #148]	; (800a6a0 <PDM_Filter_Init+0x198>)
 800a60a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a60e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a612:	ea02 0006 	and.w	r0, r2, r6
 800a616:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a61a:	428f      	cmp	r7, r1
 800a61c:	ea43 0300 	orr.w	r3, r3, r0
 800a620:	4413      	add	r3, r2
 800a622:	600b      	str	r3, [r1, #0]
 800a624:	d1f1      	bne.n	800a60a <PDM_Filter_Init+0x102>
 800a626:	2300      	movs	r3, #0
 800a628:	2001      	movs	r0, #1
 800a62a:	702b      	strb	r3, [r5, #0]
 800a62c:	e7ab      	b.n	800a586 <PDM_Filter_Init+0x7e>
 800a62e:	2a00      	cmp	r2, #0
 800a630:	d1a9      	bne.n	800a586 <PDM_Filter_Init+0x7e>
 800a632:	491a      	ldr	r1, [pc, #104]	; (800a69c <PDM_Filter_Init+0x194>)
 800a634:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800a6a4 <PDM_Filter_Init+0x19c>
 800a638:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a63c:	4e18      	ldr	r6, [pc, #96]	; (800a6a0 <PDM_Filter_Init+0x198>)
 800a63e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a642:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a646:	ea02 0006 	and.w	r0, r2, r6
 800a64a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a64e:	428f      	cmp	r7, r1
 800a650:	ea43 0300 	orr.w	r3, r3, r0
 800a654:	4413      	add	r3, r2
 800a656:	600b      	str	r3, [r1, #0]
 800a658:	d1f1      	bne.n	800a63e <PDM_Filter_Init+0x136>
 800a65a:	2001      	movs	r0, #1
 800a65c:	2300      	movs	r3, #0
 800a65e:	7028      	strb	r0, [r5, #0]
 800a660:	e791      	b.n	800a586 <PDM_Filter_Init+0x7e>
 800a662:	2220      	movs	r2, #32
 800a664:	4618      	mov	r0, r3
 800a666:	2160      	movs	r1, #96	; 0x60
 800a668:	6422      	str	r2, [r4, #64]	; 0x40
 800a66a:	4613      	mov	r3, r2
 800a66c:	e790      	b.n	800a590 <PDM_Filter_Init+0x88>
 800a66e:	bf00      	nop
 800a670:	e0002000 	.word	0xe0002000
 800a674:	e000ed00 	.word	0xe000ed00
 800a678:	40023008 	.word	0x40023008
 800a67c:	40023000 	.word	0x40023000
 800a680:	f407a5c2 	.word	0xf407a5c2
 800a684:	b5e8b5cd 	.word	0xb5e8b5cd
 800a688:	e0042000 	.word	0xe0042000
 800a68c:	5c001000 	.word	0x5c001000
 800a690:	58024c08 	.word	0x58024c08
 800a694:	58024c00 	.word	0x58024c00
 800a698:	24002498 	.word	0x24002498
 800a69c:	23fffffc 	.word	0x23fffffc
 800a6a0:	000ffc00 	.word	0x000ffc00
 800a6a4:	3ff00000 	.word	0x3ff00000

0800a6a8 <PDM_Filter_setConfig>:
 800a6a8:	4b67      	ldr	r3, [pc, #412]	; (800a848 <PDM_Filter_setConfig+0x1a0>)
 800a6aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d128      	bne.n	800a702 <PDM_Filter_setConfig+0x5a>
 800a6b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a6b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6b4:	880e      	ldrh	r6, [r1, #0]
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800a6be:	1e73      	subs	r3, r6, #1
 800a6c0:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800a6c4:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800a6c8:	2b06      	cmp	r3, #6
 800a6ca:	ed2d 8b02 	vpush	{d8}
 800a6ce:	6421      	str	r1, [r4, #64]	; 0x40
 800a6d0:	b083      	sub	sp, #12
 800a6d2:	d820      	bhi.n	800a716 <PDM_Filter_setConfig+0x6e>
 800a6d4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a6d6:	42b3      	cmp	r3, r6
 800a6d8:	d03d      	beq.n	800a756 <PDM_Filter_setConfig+0xae>
 800a6da:	4b5c      	ldr	r3, [pc, #368]	; (800a84c <PDM_Filter_setConfig+0x1a4>)
 800a6dc:	4013      	ands	r3, r2
 800a6de:	4333      	orrs	r3, r6
 800a6e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a6e4:	6423      	str	r3, [r4, #64]	; 0x40
 800a6e6:	f003 030f 	and.w	r3, r3, #15
 800a6ea:	2a70      	cmp	r2, #112	; 0x70
 800a6ec:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a6f0:	d009      	beq.n	800a706 <PDM_Filter_setConfig+0x5e>
 800a6f2:	2b06      	cmp	r3, #6
 800a6f4:	d824      	bhi.n	800a740 <PDM_Filter_setConfig+0x98>
 800a6f6:	e8df f003 	tbb	[pc, r3]
 800a6fa:	878a      	.short	0x878a
 800a6fc:	7b7e8184 	.word	0x7b7e8184
 800a700:	78          	.byte	0x78
 800a701:	00          	.byte	0x00
 800a702:	2004      	movs	r0, #4
 800a704:	4770      	bx	lr
 800a706:	2b06      	cmp	r3, #6
 800a708:	d81a      	bhi.n	800a740 <PDM_Filter_setConfig+0x98>
 800a70a:	e8df f003 	tbb	[pc, r3]
 800a70e:	8f92      	.short	0x8f92
 800a710:	8617898c 	.word	0x8617898c
 800a714:	83          	.byte	0x83
 800a715:	00          	.byte	0x00
 800a716:	4287      	cmp	r7, r0
 800a718:	f000 808e 	beq.w	800a838 <PDM_Filter_setConfig+0x190>
 800a71c:	f117 0f0c 	cmn.w	r7, #12
 800a720:	f04f 0008 	mov.w	r0, #8
 800a724:	da11      	bge.n	800a74a <PDM_Filter_setConfig+0xa2>
 800a726:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800a72a:	3040      	adds	r0, #64	; 0x40
 800a72c:	80ab      	strh	r3, [r5, #4]
 800a72e:	886b      	ldrh	r3, [r5, #2]
 800a730:	8626      	strh	r6, [r4, #48]	; 0x30
 800a732:	8663      	strh	r3, [r4, #50]	; 0x32
 800a734:	b003      	add	sp, #12
 800a736:	ecbd 8b02 	vpop	{d8}
 800a73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73c:	4b44      	ldr	r3, [pc, #272]	; (800a850 <PDM_Filter_setConfig+0x1a8>)
 800a73e:	64a3      	str	r3, [r4, #72]	; 0x48
 800a740:	f117 0f0c 	cmn.w	r7, #12
 800a744:	f04f 0000 	mov.w	r0, #0
 800a748:	dbed      	blt.n	800a726 <PDM_Filter_setConfig+0x7e>
 800a74a:	2f33      	cmp	r7, #51	; 0x33
 800a74c:	dd10      	ble.n	800a770 <PDM_Filter_setConfig+0xc8>
 800a74e:	2333      	movs	r3, #51	; 0x33
 800a750:	3040      	adds	r0, #64	; 0x40
 800a752:	80ab      	strh	r3, [r5, #4]
 800a754:	e7eb      	b.n	800a72e <PDM_Filter_setConfig+0x86>
 800a756:	4287      	cmp	r7, r0
 800a758:	d1f2      	bne.n	800a740 <PDM_Filter_setConfig+0x98>
 800a75a:	886b      	ldrh	r3, [r5, #2]
 800a75c:	8663      	strh	r3, [r4, #50]	; 0x32
 800a75e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a760:	2000      	movs	r0, #0
 800a762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a766:	6423      	str	r3, [r4, #64]	; 0x40
 800a768:	b003      	add	sp, #12
 800a76a:	ecbd 8b02 	vpop	{d8}
 800a76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a772:	f003 030f 	and.w	r3, r3, #15
 800a776:	3b01      	subs	r3, #1
 800a778:	2b06      	cmp	r3, #6
 800a77a:	d831      	bhi.n	800a7e0 <PDM_Filter_setConfig+0x138>
 800a77c:	4a35      	ldr	r2, [pc, #212]	; (800a854 <PDM_Filter_setConfig+0x1ac>)
 800a77e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a782:	eddf 0a35 	vldr	s1, [pc, #212]	; 800a858 <PDM_Filter_setConfig+0x1b0>
 800a786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a78a:	9001      	str	r0, [sp, #4]
 800a78c:	edd3 7a07 	vldr	s15, [r3, #28]
 800a790:	ed93 8a00 	vldr	s16, [r3]
 800a794:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a798:	f000 f8e6 	bl	800a968 <powf>
 800a79c:	eef0 8a40 	vmov.f32	s17, s0
 800a7a0:	9801      	ldr	r0, [sp, #4]
 800a7a2:	ee07 7a90 	vmov	s15, r7
 800a7a6:	ee28 8a28 	vmul.f32	s16, s16, s17
 800a7aa:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800a7ae:	9001      	str	r0, [sp, #4]
 800a7b0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800a7b4:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a85c <PDM_Filter_setConfig+0x1b4>
 800a7b8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a7bc:	f000 f8d4 	bl	800a968 <powf>
 800a7c0:	ee28 8a00 	vmul.f32	s16, s16, s0
 800a7c4:	886b      	ldrh	r3, [r5, #2]
 800a7c6:	9801      	ldr	r0, [sp, #4]
 800a7c8:	feb8 8a48 	vrinta.f32	s16, s16
 800a7cc:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800a7d0:	8727      	strh	r7, [r4, #56]	; 0x38
 800a7d2:	8663      	strh	r3, [r4, #50]	; 0x32
 800a7d4:	8626      	strh	r6, [r4, #48]	; 0x30
 800a7d6:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d0bf      	beq.n	800a75e <PDM_Filter_setConfig+0xb6>
 800a7de:	e7a9      	b.n	800a734 <PDM_Filter_setConfig+0x8c>
 800a7e0:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800a860 <PDM_Filter_setConfig+0x1b8>
 800a7e4:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800a864 <PDM_Filter_setConfig+0x1bc>
 800a7e8:	e7db      	b.n	800a7a2 <PDM_Filter_setConfig+0xfa>
 800a7ea:	4b1f      	ldr	r3, [pc, #124]	; (800a868 <PDM_Filter_setConfig+0x1c0>)
 800a7ec:	64a3      	str	r3, [r4, #72]	; 0x48
 800a7ee:	e7a7      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a7f0:	4b1e      	ldr	r3, [pc, #120]	; (800a86c <PDM_Filter_setConfig+0x1c4>)
 800a7f2:	64a3      	str	r3, [r4, #72]	; 0x48
 800a7f4:	e7a4      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a7f6:	4b1e      	ldr	r3, [pc, #120]	; (800a870 <PDM_Filter_setConfig+0x1c8>)
 800a7f8:	64a3      	str	r3, [r4, #72]	; 0x48
 800a7fa:	e7a1      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a7fc:	4b1d      	ldr	r3, [pc, #116]	; (800a874 <PDM_Filter_setConfig+0x1cc>)
 800a7fe:	64a3      	str	r3, [r4, #72]	; 0x48
 800a800:	e79e      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a802:	4b1d      	ldr	r3, [pc, #116]	; (800a878 <PDM_Filter_setConfig+0x1d0>)
 800a804:	64a3      	str	r3, [r4, #72]	; 0x48
 800a806:	e79b      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a808:	4b1c      	ldr	r3, [pc, #112]	; (800a87c <PDM_Filter_setConfig+0x1d4>)
 800a80a:	64a3      	str	r3, [r4, #72]	; 0x48
 800a80c:	e798      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a80e:	4b1c      	ldr	r3, [pc, #112]	; (800a880 <PDM_Filter_setConfig+0x1d8>)
 800a810:	64a3      	str	r3, [r4, #72]	; 0x48
 800a812:	e795      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a814:	4b1b      	ldr	r3, [pc, #108]	; (800a884 <PDM_Filter_setConfig+0x1dc>)
 800a816:	64a3      	str	r3, [r4, #72]	; 0x48
 800a818:	e792      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a81a:	4b1b      	ldr	r3, [pc, #108]	; (800a888 <PDM_Filter_setConfig+0x1e0>)
 800a81c:	64a3      	str	r3, [r4, #72]	; 0x48
 800a81e:	e78f      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a820:	4b1a      	ldr	r3, [pc, #104]	; (800a88c <PDM_Filter_setConfig+0x1e4>)
 800a822:	64a3      	str	r3, [r4, #72]	; 0x48
 800a824:	e78c      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a826:	4b1a      	ldr	r3, [pc, #104]	; (800a890 <PDM_Filter_setConfig+0x1e8>)
 800a828:	64a3      	str	r3, [r4, #72]	; 0x48
 800a82a:	e789      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a82c:	4b19      	ldr	r3, [pc, #100]	; (800a894 <PDM_Filter_setConfig+0x1ec>)
 800a82e:	64a3      	str	r3, [r4, #72]	; 0x48
 800a830:	e786      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a832:	4b19      	ldr	r3, [pc, #100]	; (800a898 <PDM_Filter_setConfig+0x1f0>)
 800a834:	64a3      	str	r3, [r4, #72]	; 0x48
 800a836:	e783      	b.n	800a740 <PDM_Filter_setConfig+0x98>
 800a838:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a83a:	42b3      	cmp	r3, r6
 800a83c:	f47f af6e 	bne.w	800a71c <PDM_Filter_setConfig+0x74>
 800a840:	886b      	ldrh	r3, [r5, #2]
 800a842:	2008      	movs	r0, #8
 800a844:	8663      	strh	r3, [r4, #50]	; 0x32
 800a846:	e775      	b.n	800a734 <PDM_Filter_setConfig+0x8c>
 800a848:	b5e8b5cd 	.word	0xb5e8b5cd
 800a84c:	fffffef0 	.word	0xfffffef0
 800a850:	080099c1 	.word	0x080099c1
 800a854:	0800acd8 	.word	0x0800acd8
 800a858:	42000000 	.word	0x42000000
 800a85c:	3d4ccccd 	.word	0x3d4ccccd
 800a860:	4f800000 	.word	0x4f800000
 800a864:	00000000 	.word	0x00000000
 800a868:	08008dcd 	.word	0x08008dcd
 800a86c:	08008c55 	.word	0x08008c55
 800a870:	08008b45 	.word	0x08008b45
 800a874:	08009609 	.word	0x08009609
 800a878:	08009371 	.word	0x08009371
 800a87c:	08009139 	.word	0x08009139
 800a880:	08008f55 	.word	0x08008f55
 800a884:	08009bdd 	.word	0x08009bdd
 800a888:	08009aa1 	.word	0x08009aa1
 800a88c:	0800a21d 	.word	0x0800a21d
 800a890:	0800a021 	.word	0x0800a021
 800a894:	08009e75 	.word	0x08009e75
 800a898:	08009d09 	.word	0x08009d09

0800a89c <PDM_Filter>:
 800a89c:	b410      	push	{r4}
 800a89e:	4b0b      	ldr	r3, [pc, #44]	; (800a8cc <PDM_Filter+0x30>)
 800a8a0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800a8a2:	429c      	cmp	r4, r3
 800a8a4:	d107      	bne.n	800a8b6 <PDM_Filter+0x1a>
 800a8a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a8a8:	05dc      	lsls	r4, r3, #23
 800a8aa:	d508      	bpl.n	800a8be <PDM_Filter+0x22>
 800a8ac:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800a8ae:	320c      	adds	r2, #12
 800a8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8b4:	4718      	bx	r3
 800a8b6:	2004      	movs	r0, #4
 800a8b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a8c2:	bf14      	ite	ne
 800a8c4:	2020      	movne	r0, #32
 800a8c6:	2030      	moveq	r0, #48	; 0x30
 800a8c8:	e7f6      	b.n	800a8b8 <PDM_Filter+0x1c>
 800a8ca:	bf00      	nop
 800a8cc:	b5e8b5cd 	.word	0xb5e8b5cd

0800a8d0 <__errno>:
 800a8d0:	4b01      	ldr	r3, [pc, #4]	; (800a8d8 <__errno+0x8>)
 800a8d2:	6818      	ldr	r0, [r3, #0]
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	24000418 	.word	0x24000418

0800a8dc <__libc_init_array>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	4d0d      	ldr	r5, [pc, #52]	; (800a914 <__libc_init_array+0x38>)
 800a8e0:	4c0d      	ldr	r4, [pc, #52]	; (800a918 <__libc_init_array+0x3c>)
 800a8e2:	1b64      	subs	r4, r4, r5
 800a8e4:	10a4      	asrs	r4, r4, #2
 800a8e6:	2600      	movs	r6, #0
 800a8e8:	42a6      	cmp	r6, r4
 800a8ea:	d109      	bne.n	800a900 <__libc_init_array+0x24>
 800a8ec:	4d0b      	ldr	r5, [pc, #44]	; (800a91c <__libc_init_array+0x40>)
 800a8ee:	4c0c      	ldr	r4, [pc, #48]	; (800a920 <__libc_init_array+0x44>)
 800a8f0:	f000 f9e6 	bl	800acc0 <_init>
 800a8f4:	1b64      	subs	r4, r4, r5
 800a8f6:	10a4      	asrs	r4, r4, #2
 800a8f8:	2600      	movs	r6, #0
 800a8fa:	42a6      	cmp	r6, r4
 800a8fc:	d105      	bne.n	800a90a <__libc_init_array+0x2e>
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}
 800a900:	f855 3b04 	ldr.w	r3, [r5], #4
 800a904:	4798      	blx	r3
 800a906:	3601      	adds	r6, #1
 800a908:	e7ee      	b.n	800a8e8 <__libc_init_array+0xc>
 800a90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a90e:	4798      	blx	r3
 800a910:	3601      	adds	r6, #1
 800a912:	e7f2      	b.n	800a8fa <__libc_init_array+0x1e>
 800a914:	0800afa0 	.word	0x0800afa0
 800a918:	0800afa0 	.word	0x0800afa0
 800a91c:	0800afa0 	.word	0x0800afa0
 800a920:	0800afa4 	.word	0x0800afa4

0800a924 <memset>:
 800a924:	4402      	add	r2, r0
 800a926:	4603      	mov	r3, r0
 800a928:	4293      	cmp	r3, r2
 800a92a:	d100      	bne.n	800a92e <memset+0xa>
 800a92c:	4770      	bx	lr
 800a92e:	f803 1b01 	strb.w	r1, [r3], #1
 800a932:	e7f9      	b.n	800a928 <memset+0x4>

0800a934 <checkint>:
 800a934:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a938:	2b7e      	cmp	r3, #126	; 0x7e
 800a93a:	dd10      	ble.n	800a95e <checkint+0x2a>
 800a93c:	2b96      	cmp	r3, #150	; 0x96
 800a93e:	dc0c      	bgt.n	800a95a <checkint+0x26>
 800a940:	2201      	movs	r2, #1
 800a942:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a946:	fa02 f303 	lsl.w	r3, r2, r3
 800a94a:	1e5a      	subs	r2, r3, #1
 800a94c:	4202      	tst	r2, r0
 800a94e:	d106      	bne.n	800a95e <checkint+0x2a>
 800a950:	4203      	tst	r3, r0
 800a952:	bf0c      	ite	eq
 800a954:	2002      	moveq	r0, #2
 800a956:	2001      	movne	r0, #1
 800a958:	4770      	bx	lr
 800a95a:	2002      	movs	r0, #2
 800a95c:	4770      	bx	lr
 800a95e:	2000      	movs	r0, #0
 800a960:	4770      	bx	lr
 800a962:	0000      	movs	r0, r0
 800a964:	0000      	movs	r0, r0
	...

0800a968 <powf>:
 800a968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a96a:	ee10 1a10 	vmov	r1, s0
 800a96e:	ee10 6a90 	vmov	r6, s1
 800a972:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800a976:	0072      	lsls	r2, r6, #1
 800a978:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a97c:	b085      	sub	sp, #20
 800a97e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800a982:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800a986:	d256      	bcs.n	800aa36 <powf+0xce>
 800a988:	4298      	cmp	r0, r3
 800a98a:	d256      	bcs.n	800aa3a <powf+0xd2>
 800a98c:	2000      	movs	r0, #0
 800a98e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800a992:	4ea3      	ldr	r6, [pc, #652]	; (800ac20 <powf+0x2b8>)
 800a994:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a998:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800a99c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800a9a0:	0dd2      	lsrs	r2, r2, #23
 800a9a2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800a9a6:	05d2      	lsls	r2, r2, #23
 800a9a8:	1a8b      	subs	r3, r1, r2
 800a9aa:	ed97 5b00 	vldr	d5, [r7]
 800a9ae:	ee07 3a90 	vmov	s15, r3
 800a9b2:	15d2      	asrs	r2, r2, #23
 800a9b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a9b8:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a9bc:	ed97 5b02 	vldr	d5, [r7, #8]
 800a9c0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800a9c4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800a9c8:	ee07 2a90 	vmov	s15, r2
 800a9cc:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800a9d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a9d4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a9d8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800a9dc:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800a9e0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a9e4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800a9e8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800a9ec:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800a9f0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800a9f4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a9f8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800a9fc:	eea5 7b01 	vfma.f64	d7, d5, d1
 800aa00:	ee20 0b07 	vmul.f64	d0, d0, d7
 800aa04:	ee10 1a90 	vmov	r1, s1
 800aa08:	2300      	movs	r3, #0
 800aa0a:	2700      	movs	r7, #0
 800aa0c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800aa10:	f248 06be 	movw	r6, #32958	; 0x80be
 800aa14:	429f      	cmp	r7, r3
 800aa16:	bf08      	it	eq
 800aa18:	4296      	cmpeq	r6, r2
 800aa1a:	f080 80b1 	bcs.w	800ab80 <powf+0x218>
 800aa1e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800ac00 <powf+0x298>
 800aa22:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800aa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2a:	dd79      	ble.n	800ab20 <powf+0x1b8>
 800aa2c:	b005      	add	sp, #20
 800aa2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aa32:	f000 b91f 	b.w	800ac74 <__math_oflowf>
 800aa36:	4298      	cmp	r0, r3
 800aa38:	d32d      	bcc.n	800aa96 <powf+0x12e>
 800aa3a:	b952      	cbnz	r2, 800aa52 <powf+0xea>
 800aa3c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800aa46:	f240 80cd 	bls.w	800abe4 <powf+0x27c>
 800aa4a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800aa4e:	b005      	add	sp, #20
 800aa50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa52:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800aa56:	d105      	bne.n	800aa64 <powf+0xfc>
 800aa58:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800aa5c:	0076      	lsls	r6, r6, #1
 800aa5e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800aa62:	e7f0      	b.n	800aa46 <powf+0xde>
 800aa64:	004b      	lsls	r3, r1, #1
 800aa66:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800aa6a:	d8ee      	bhi.n	800aa4a <powf+0xe2>
 800aa6c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800aa70:	d1eb      	bne.n	800aa4a <powf+0xe2>
 800aa72:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800aa76:	f000 80b5 	beq.w	800abe4 <powf+0x27c>
 800aa7a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800aa7e:	ea6f 0606 	mvn.w	r6, r6
 800aa82:	bf34      	ite	cc
 800aa84:	2300      	movcc	r3, #0
 800aa86:	2301      	movcs	r3, #1
 800aa88:	0ff6      	lsrs	r6, r6, #31
 800aa8a:	42b3      	cmp	r3, r6
 800aa8c:	f040 80ad 	bne.w	800abea <powf+0x282>
 800aa90:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800aa94:	e7db      	b.n	800aa4e <powf+0xe6>
 800aa96:	004f      	lsls	r7, r1, #1
 800aa98:	1e7a      	subs	r2, r7, #1
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d31c      	bcc.n	800aad8 <powf+0x170>
 800aa9e:	2900      	cmp	r1, #0
 800aaa0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aaa4:	da0f      	bge.n	800aac6 <powf+0x15e>
 800aaa6:	ee10 0a90 	vmov	r0, s1
 800aaaa:	f7ff ff43 	bl	800a934 <checkint>
 800aaae:	2801      	cmp	r0, #1
 800aab0:	d109      	bne.n	800aac6 <powf+0x15e>
 800aab2:	eeb1 0a40 	vneg.f32	s0, s0
 800aab6:	b947      	cbnz	r7, 800aaca <powf+0x162>
 800aab8:	2e00      	cmp	r6, #0
 800aaba:	dac8      	bge.n	800aa4e <powf+0xe6>
 800aabc:	b005      	add	sp, #20
 800aabe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aac2:	f000 b8dd 	b.w	800ac80 <__math_divzerof>
 800aac6:	2000      	movs	r0, #0
 800aac8:	e7f5      	b.n	800aab6 <powf+0x14e>
 800aaca:	2e00      	cmp	r6, #0
 800aacc:	dabf      	bge.n	800aa4e <powf+0xe6>
 800aace:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aad2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800aad6:	e7ba      	b.n	800aa4e <powf+0xe6>
 800aad8:	2900      	cmp	r1, #0
 800aada:	da1f      	bge.n	800ab1c <powf+0x1b4>
 800aadc:	ee10 0a90 	vmov	r0, s1
 800aae0:	f7ff ff28 	bl	800a934 <checkint>
 800aae4:	b920      	cbnz	r0, 800aaf0 <powf+0x188>
 800aae6:	b005      	add	sp, #20
 800aae8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aaec:	f000 b8d8 	b.w	800aca0 <__math_invalidf>
 800aaf0:	2801      	cmp	r0, #1
 800aaf2:	bf14      	ite	ne
 800aaf4:	2000      	movne	r0, #0
 800aaf6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800aafa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aafe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800ab02:	f4bf af44 	bcs.w	800a98e <powf+0x26>
 800ab06:	eddf 7a47 	vldr	s15, [pc, #284]	; 800ac24 <powf+0x2bc>
 800ab0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ab0e:	ee10 3a10 	vmov	r3, s0
 800ab12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab16:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800ab1a:	e738      	b.n	800a98e <powf+0x26>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e7ee      	b.n	800aafe <powf+0x196>
 800ab20:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800ac08 <powf+0x2a0>
 800ab24:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ab28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab2c:	dd10      	ble.n	800ab50 <powf+0x1e8>
 800ab2e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d15c      	bne.n	800abf0 <powf+0x288>
 800ab36:	9302      	str	r3, [sp, #8]
 800ab38:	eddd 7a02 	vldr	s15, [sp, #8]
 800ab3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab44:	eef4 7a47 	vcmp.f32	s15, s14
 800ab48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4c:	f47f af6e 	bne.w	800aa2c <powf+0xc4>
 800ab50:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ac10 <powf+0x2a8>
 800ab54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ab58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab5c:	d804      	bhi.n	800ab68 <powf+0x200>
 800ab5e:	b005      	add	sp, #20
 800ab60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ab64:	f000 b87a 	b.w	800ac5c <__math_uflowf>
 800ab68:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800ac18 <powf+0x2b0>
 800ab6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ab70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab74:	d504      	bpl.n	800ab80 <powf+0x218>
 800ab76:	b005      	add	sp, #20
 800ab78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ab7c:	f000 b874 	b.w	800ac68 <__math_may_uflowf>
 800ab80:	4b29      	ldr	r3, [pc, #164]	; (800ac28 <powf+0x2c0>)
 800ab82:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800ab86:	ee30 6b07 	vadd.f64	d6, d0, d7
 800ab8a:	ed8d 6b00 	vstr	d6, [sp]
 800ab8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ab92:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ab96:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ab9a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ab9e:	f006 011f 	and.w	r1, r6, #31
 800aba2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800aba6:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800abaa:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800abae:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800abb2:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800abb6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800abba:	ee27 5b07 	vmul.f64	d5, d7, d7
 800abbe:	1836      	adds	r6, r6, r0
 800abc0:	2300      	movs	r3, #0
 800abc2:	eb13 040c 	adds.w	r4, r3, ip
 800abc6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800abca:	eb41 050e 	adc.w	r5, r1, lr
 800abce:	eea7 0b04 	vfma.f64	d0, d7, d4
 800abd2:	ec45 4b17 	vmov	d7, r4, r5
 800abd6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800abda:	ee20 0b07 	vmul.f64	d0, d0, d7
 800abde:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800abe2:	e734      	b.n	800aa4e <powf+0xe6>
 800abe4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800abe8:	e731      	b.n	800aa4e <powf+0xe6>
 800abea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ac2c <powf+0x2c4>
 800abee:	e72e      	b.n	800aa4e <powf+0xe6>
 800abf0:	9303      	str	r3, [sp, #12]
 800abf2:	eddd 7a03 	vldr	s15, [sp, #12]
 800abf6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800abfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abfe:	e7a1      	b.n	800ab44 <powf+0x1dc>
 800ac00:	ffd1d571 	.word	0xffd1d571
 800ac04:	405fffff 	.word	0x405fffff
 800ac08:	ffa3aae2 	.word	0xffa3aae2
 800ac0c:	405fffff 	.word	0x405fffff
 800ac10:	00000000 	.word	0x00000000
 800ac14:	c062c000 	.word	0xc062c000
 800ac18:	00000000 	.word	0x00000000
 800ac1c:	c062a000 	.word	0xc062a000
 800ac20:	0800ad30 	.word	0x0800ad30
 800ac24:	4b000000 	.word	0x4b000000
 800ac28:	0800ae58 	.word	0x0800ae58
 800ac2c:	00000000 	.word	0x00000000

0800ac30 <with_errnof>:
 800ac30:	b513      	push	{r0, r1, r4, lr}
 800ac32:	4604      	mov	r4, r0
 800ac34:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ac38:	f7ff fe4a 	bl	800a8d0 <__errno>
 800ac3c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ac40:	6004      	str	r4, [r0, #0]
 800ac42:	b002      	add	sp, #8
 800ac44:	bd10      	pop	{r4, pc}

0800ac46 <xflowf>:
 800ac46:	b130      	cbz	r0, 800ac56 <xflowf+0x10>
 800ac48:	eef1 7a40 	vneg.f32	s15, s0
 800ac4c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ac50:	2022      	movs	r0, #34	; 0x22
 800ac52:	f7ff bfed 	b.w	800ac30 <with_errnof>
 800ac56:	eef0 7a40 	vmov.f32	s15, s0
 800ac5a:	e7f7      	b.n	800ac4c <xflowf+0x6>

0800ac5c <__math_uflowf>:
 800ac5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac64 <__math_uflowf+0x8>
 800ac60:	f7ff bff1 	b.w	800ac46 <xflowf>
 800ac64:	10000000 	.word	0x10000000

0800ac68 <__math_may_uflowf>:
 800ac68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac70 <__math_may_uflowf+0x8>
 800ac6c:	f7ff bfeb 	b.w	800ac46 <xflowf>
 800ac70:	1a200000 	.word	0x1a200000

0800ac74 <__math_oflowf>:
 800ac74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac7c <__math_oflowf+0x8>
 800ac78:	f7ff bfe5 	b.w	800ac46 <xflowf>
 800ac7c:	70000000 	.word	0x70000000

0800ac80 <__math_divzerof>:
 800ac80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ac84:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800ac8e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800ac9c <__math_divzerof+0x1c>
 800ac92:	2022      	movs	r0, #34	; 0x22
 800ac94:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ac98:	f7ff bfca 	b.w	800ac30 <with_errnof>
 800ac9c:	00000000 	.word	0x00000000

0800aca0 <__math_invalidf>:
 800aca0:	eef0 7a40 	vmov.f32	s15, s0
 800aca4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800aca8:	eef4 7a67 	vcmp.f32	s15, s15
 800acac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800acb4:	d602      	bvs.n	800acbc <__math_invalidf+0x1c>
 800acb6:	2021      	movs	r0, #33	; 0x21
 800acb8:	f7ff bfba 	b.w	800ac30 <with_errnof>
 800acbc:	4770      	bx	lr
	...

0800acc0 <_init>:
 800acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc2:	bf00      	nop
 800acc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc6:	bc08      	pop	{r3}
 800acc8:	469e      	mov	lr, r3
 800acca:	4770      	bx	lr

0800accc <_fini>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	bf00      	nop
 800acd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd2:	bc08      	pop	{r3}
 800acd4:	469e      	mov	lr, r3
 800acd6:	4770      	bx	lr
