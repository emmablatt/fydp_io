
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af08  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800b1d8  0800b1d8  0001b1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b4a0  0800b4a0  0001b4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b4a4  0800b4a4  0001b4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000480  24000000  0800b4a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000338  24000480  0800b928  00020480  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240007b8  0800b928  000207b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY
  9 .debug_info   000216a5  00000000  00000000  000204ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003301  00000000  00000000  00041b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001618  00000000  00000000  00044e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000014f8  00000000  00000000  00046470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034547  00000000  00000000  00047968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015b27  00000000  00000000  0007beaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014e1d1  00000000  00000000  000919d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001dfba7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005d64  00000000  00000000  001dfc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000480 	.word	0x24000480
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b1c0 	.word	0x0800b1c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000484 	.word	0x24000484
 800030c:	0800b1c0 	.word	0x0800b1c0

08000310 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 800031a:	2303      	movs	r3, #3
 800031c:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f103 0018 	add.w	r0, r3, #24
 8000324:	f107 020a 	add.w	r2, r7, #10
 8000328:	2302      	movs	r3, #2
 800032a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800032e:	f001 f929 	bl	8001584 <wm8994_write_reg>
 8000332:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8000334:	2300      	movs	r3, #0
 8000336:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f103 0018 	add.w	r0, r3, #24
 800033e:	f107 020a 	add.w	r2, r7, #10
 8000342:	2302      	movs	r3, #2
 8000344:	f640 0117 	movw	r1, #2071	; 0x817
 8000348:	f001 f91c 	bl	8001584 <wm8994_write_reg>
 800034c:	4602      	mov	r2, r0
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4413      	add	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f103 0018 	add.w	r0, r3, #24
 800035a:	f107 020a 	add.w	r2, r7, #10
 800035e:	2302      	movs	r3, #2
 8000360:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000364:	f001 f90e 	bl	8001584 <wm8994_write_reg>
 8000368:	4602      	mov	r2, r0
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	4413      	add	r3, r2
 800036e:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8000370:	236c      	movs	r3, #108	; 0x6c
 8000372:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f103 0018 	add.w	r0, r3, #24
 800037a:	f107 020a 	add.w	r2, r7, #10
 800037e:	2302      	movs	r3, #2
 8000380:	2139      	movs	r1, #57	; 0x39
 8000382:	f001 f8ff 	bl	8001584 <wm8994_write_reg>
 8000386:	4602      	mov	r2, r0
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4413      	add	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00f      	beq.n	80003b6 <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 8000396:	2313      	movs	r3, #19
 8000398:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f103 0018 	add.w	r0, r3, #24
 80003a0:	f107 020a 	add.w	r2, r7, #10
 80003a4:	2302      	movs	r3, #2
 80003a6:	2101      	movs	r1, #1
 80003a8:	f001 f8ec 	bl	8001584 <wm8994_write_reg>
 80003ac:	4602      	mov	r2, r0
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4413      	add	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e00e      	b.n	80003d4 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 80003b6:	2303      	movs	r3, #3
 80003b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f103 0018 	add.w	r0, r3, #24
 80003c0:	f107 020a 	add.w	r2, r7, #10
 80003c4:	2302      	movs	r3, #2
 80003c6:	2101      	movs	r1, #1
 80003c8:	f001 f8dc 	bl	8001584 <wm8994_write_reg>
 80003cc:	4602      	mov	r2, r0
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80003d4:	2132      	movs	r1, #50	; 0x32
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f001 f88e 	bl	80014f8 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	f200 8141 	bhi.w	8000668 <WM8994_Init+0x358>
 80003e6:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <WM8994_Init+0xdc>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	08000703 	.word	0x08000703
 80003f0:	080003fd 	.word	0x080003fd
 80003f4:	08000497 	.word	0x08000497
 80003f8:	08000531 	.word	0x08000531
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 80003fc:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000400:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f103 0018 	add.w	r0, r3, #24
 8000408:	f107 020a 	add.w	r2, r7, #10
 800040c:	2302      	movs	r3, #2
 800040e:	2105      	movs	r1, #5
 8000410:	f001 f8b8 	bl	8001584 <wm8994_write_reg>
 8000414:	4602      	mov	r2, r0
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	4413      	add	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 800041c:	2300      	movs	r3, #0
 800041e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f103 0018 	add.w	r0, r3, #24
 8000426:	f107 020a 	add.w	r2, r7, #10
 800042a:	2302      	movs	r3, #2
 800042c:	f240 6101 	movw	r1, #1537	; 0x601
 8000430:	f001 f8a8 	bl	8001584 <wm8994_write_reg>
 8000434:	4602      	mov	r2, r0
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	4413      	add	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f103 0018 	add.w	r0, r3, #24
 8000442:	f107 020a 	add.w	r2, r7, #10
 8000446:	2302      	movs	r3, #2
 8000448:	f240 6102 	movw	r1, #1538	; 0x602
 800044c:	f001 f89a 	bl	8001584 <wm8994_write_reg>
 8000450:	4602      	mov	r2, r0
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	4413      	add	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 8000458:	2302      	movs	r3, #2
 800045a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f103 0018 	add.w	r0, r3, #24
 8000462:	f107 020a 	add.w	r2, r7, #10
 8000466:	2302      	movs	r3, #2
 8000468:	f240 6104 	movw	r1, #1540	; 0x604
 800046c:	f001 f88a 	bl	8001584 <wm8994_write_reg>
 8000470:	4602      	mov	r2, r0
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f103 0018 	add.w	r0, r3, #24
 800047e:	f107 020a 	add.w	r2, r7, #10
 8000482:	2302      	movs	r3, #2
 8000484:	f240 6105 	movw	r1, #1541	; 0x605
 8000488:	f001 f87c 	bl	8001584 <wm8994_write_reg>
 800048c:	4602      	mov	r2, r0
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
    break;
 8000494:	e136      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000496:	f240 3303 	movw	r3, #771	; 0x303
 800049a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f103 0018 	add.w	r0, r3, #24
 80004a2:	f107 020a 	add.w	r2, r7, #10
 80004a6:	2302      	movs	r3, #2
 80004a8:	2105      	movs	r1, #5
 80004aa:	f001 f86b 	bl	8001584 <wm8994_write_reg>
 80004ae:	4602      	mov	r2, r0
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	4413      	add	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80004b6:	2301      	movs	r3, #1
 80004b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f103 0018 	add.w	r0, r3, #24
 80004c0:	f107 020a 	add.w	r2, r7, #10
 80004c4:	2302      	movs	r3, #2
 80004c6:	f240 6101 	movw	r1, #1537	; 0x601
 80004ca:	f001 f85b 	bl	8001584 <wm8994_write_reg>
 80004ce:	4602      	mov	r2, r0
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4413      	add	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f103 0018 	add.w	r0, r3, #24
 80004dc:	f107 020a 	add.w	r2, r7, #10
 80004e0:	2302      	movs	r3, #2
 80004e2:	f240 6102 	movw	r1, #1538	; 0x602
 80004e6:	f001 f84d 	bl	8001584 <wm8994_write_reg>
 80004ea:	4602      	mov	r2, r0
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4413      	add	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80004f2:	2300      	movs	r3, #0
 80004f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f103 0018 	add.w	r0, r3, #24
 80004fc:	f107 020a 	add.w	r2, r7, #10
 8000500:	2302      	movs	r3, #2
 8000502:	f240 6104 	movw	r1, #1540	; 0x604
 8000506:	f001 f83d 	bl	8001584 <wm8994_write_reg>
 800050a:	4602      	mov	r2, r0
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4413      	add	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f103 0018 	add.w	r0, r3, #24
 8000518:	f107 020a 	add.w	r2, r7, #10
 800051c:	2302      	movs	r3, #2
 800051e:	f240 6105 	movw	r1, #1541	; 0x605
 8000522:	f001 f82f 	bl	8001584 <wm8994_write_reg>
 8000526:	4602      	mov	r2, r0
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
    break;
 800052e:	e0e9      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b05      	cmp	r3, #5
 8000536:	d14a      	bne.n	80005ce <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8000538:	f640 730f 	movw	r3, #3855	; 0xf0f
 800053c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f103 0018 	add.w	r0, r3, #24
 8000544:	f107 020a 	add.w	r2, r7, #10
 8000548:	2302      	movs	r3, #2
 800054a:	2105      	movs	r1, #5
 800054c:	f001 f81a 	bl	8001584 <wm8994_write_reg>
 8000550:	4602      	mov	r2, r0
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 8000558:	2303      	movs	r3, #3
 800055a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f103 0018 	add.w	r0, r3, #24
 8000562:	f107 020a 	add.w	r2, r7, #10
 8000566:	2302      	movs	r3, #2
 8000568:	f240 6101 	movw	r1, #1537	; 0x601
 800056c:	f001 f80a 	bl	8001584 <wm8994_write_reg>
 8000570:	4602      	mov	r2, r0
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4413      	add	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f103 0018 	add.w	r0, r3, #24
 800057e:	f107 020a 	add.w	r2, r7, #10
 8000582:	2302      	movs	r3, #2
 8000584:	f240 6102 	movw	r1, #1538	; 0x602
 8000588:	f000 fffc 	bl	8001584 <wm8994_write_reg>
 800058c:	4602      	mov	r2, r0
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f103 0018 	add.w	r0, r3, #24
 800059a:	f107 020a 	add.w	r2, r7, #10
 800059e:	2302      	movs	r3, #2
 80005a0:	f240 6104 	movw	r1, #1540	; 0x604
 80005a4:	f000 ffee 	bl	8001584 <wm8994_write_reg>
 80005a8:	4602      	mov	r2, r0
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 0018 	add.w	r0, r3, #24
 80005b6:	f107 020a 	add.w	r2, r7, #10
 80005ba:	2302      	movs	r3, #2
 80005bc:	f240 6105 	movw	r1, #1541	; 0x605
 80005c0:	f000 ffe0 	bl	8001584 <wm8994_write_reg>
 80005c4:	4602      	mov	r2, r0
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80005cc:	e09a      	b.n	8000704 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80005ce:	f640 730f 	movw	r3, #3855	; 0xf0f
 80005d2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0018 	add.w	r0, r3, #24
 80005da:	f107 020a 	add.w	r2, r7, #10
 80005de:	2302      	movs	r3, #2
 80005e0:	2105      	movs	r1, #5
 80005e2:	f000 ffcf 	bl	8001584 <wm8994_write_reg>
 80005e6:	4602      	mov	r2, r0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80005ee:	2301      	movs	r3, #1
 80005f0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f103 0018 	add.w	r0, r3, #24
 80005f8:	f107 020a 	add.w	r2, r7, #10
 80005fc:	2302      	movs	r3, #2
 80005fe:	f240 6101 	movw	r1, #1537	; 0x601
 8000602:	f000 ffbf 	bl	8001584 <wm8994_write_reg>
 8000606:	4602      	mov	r2, r0
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0018 	add.w	r0, r3, #24
 8000614:	f107 020a 	add.w	r2, r7, #10
 8000618:	2302      	movs	r3, #2
 800061a:	f240 6102 	movw	r1, #1538	; 0x602
 800061e:	f000 ffb1 	bl	8001584 <wm8994_write_reg>
 8000622:	4602      	mov	r2, r0
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 800062a:	2302      	movs	r3, #2
 800062c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0018 	add.w	r0, r3, #24
 8000634:	f107 020a 	add.w	r2, r7, #10
 8000638:	2302      	movs	r3, #2
 800063a:	f240 6104 	movw	r1, #1540	; 0x604
 800063e:	f000 ffa1 	bl	8001584 <wm8994_write_reg>
 8000642:	4602      	mov	r2, r0
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 0018 	add.w	r0, r3, #24
 8000650:	f107 020a 	add.w	r2, r7, #10
 8000654:	2302      	movs	r3, #2
 8000656:	f240 6105 	movw	r1, #1541	; 0x605
 800065a:	f000 ff93 	bl	8001584 <wm8994_write_reg>
 800065e:	4602      	mov	r2, r0
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
    break;
 8000666:	e04d      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000668:	f240 3303 	movw	r3, #771	; 0x303
 800066c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f103 0018 	add.w	r0, r3, #24
 8000674:	f107 020a 	add.w	r2, r7, #10
 8000678:	2302      	movs	r3, #2
 800067a:	2105      	movs	r1, #5
 800067c:	f000 ff82 	bl	8001584 <wm8994_write_reg>
 8000680:	4602      	mov	r2, r0
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8000688:	2301      	movs	r3, #1
 800068a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f103 0018 	add.w	r0, r3, #24
 8000692:	f107 020a 	add.w	r2, r7, #10
 8000696:	2302      	movs	r3, #2
 8000698:	f240 6101 	movw	r1, #1537	; 0x601
 800069c:	f000 ff72 	bl	8001584 <wm8994_write_reg>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f103 0018 	add.w	r0, r3, #24
 80006ae:	f107 020a 	add.w	r2, r7, #10
 80006b2:	2302      	movs	r3, #2
 80006b4:	f240 6102 	movw	r1, #1538	; 0x602
 80006b8:	f000 ff64 	bl	8001584 <wm8994_write_reg>
 80006bc:	4602      	mov	r2, r0
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4413      	add	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80006c4:	2300      	movs	r3, #0
 80006c6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f103 0018 	add.w	r0, r3, #24
 80006ce:	f107 020a 	add.w	r2, r7, #10
 80006d2:	2302      	movs	r3, #2
 80006d4:	f240 6104 	movw	r1, #1540	; 0x604
 80006d8:	f000 ff54 	bl	8001584 <wm8994_write_reg>
 80006dc:	4602      	mov	r2, r0
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4413      	add	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 0018 	add.w	r0, r3, #24
 80006ea:	f107 020a 	add.w	r2, r7, #10
 80006ee:	2302      	movs	r3, #2
 80006f0:	f240 6105 	movw	r1, #1541	; 0x605
 80006f4:	f000 ff46 	bl	8001584 <wm8994_write_reg>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
    break;
 8000700:	e000      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
 8000702:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	2b04      	cmp	r3, #4
 800070c:	f200 81e0 	bhi.w	8000ad0 <WM8994_Init+0x7c0>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <WM8994_Init+0x408>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000901 	.word	0x08000901
 800071c:	0800072d 	.word	0x0800072d
 8000720:	080007eb 	.word	0x080007eb
 8000724:	08000ad1 	.word	0x08000ad1
 8000728:	080009bf 	.word	0x080009bf
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 800072c:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 8000730:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f103 0018 	add.w	r0, r3, #24
 8000738:	f107 020a 	add.w	r2, r7, #10
 800073c:	2302      	movs	r3, #2
 800073e:	2104      	movs	r1, #4
 8000740:	f000 ff20 	bl	8001584 <wm8994_write_reg>
 8000744:	4602      	mov	r2, r0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 800074c:	23db      	movs	r3, #219	; 0xdb
 800074e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f103 0018 	add.w	r0, r3, #24
 8000756:	f107 020a 	add.w	r2, r7, #10
 800075a:	2302      	movs	r3, #2
 800075c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000760:	f000 ff10 	bl	8001584 <wm8994_write_reg>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 800076c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000770:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f103 0018 	add.w	r0, r3, #24
 8000778:	f107 020a 	add.w	r2, r7, #10
 800077c:	2302      	movs	r3, #2
 800077e:	2102      	movs	r1, #2
 8000780:	f000 ff00 	bl	8001584 <wm8994_write_reg>
 8000784:	4602      	mov	r2, r0
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 800078c:	2302      	movs	r3, #2
 800078e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f103 0018 	add.w	r0, r3, #24
 8000796:	f107 020a 	add.w	r2, r7, #10
 800079a:	2302      	movs	r3, #2
 800079c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80007a0:	f000 fef0 	bl	8001584 <wm8994_write_reg>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4413      	add	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f103 0018 	add.w	r0, r3, #24
 80007b2:	f107 020a 	add.w	r2, r7, #10
 80007b6:	2302      	movs	r3, #2
 80007b8:	f240 6109 	movw	r1, #1545	; 0x609
 80007bc:	f000 fee2 	bl	8001584 <wm8994_write_reg>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4413      	add	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 80007c8:	230e      	movs	r3, #14
 80007ca:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f103 0018 	add.w	r0, r3, #24
 80007d2:	f107 020a 	add.w	r2, r7, #10
 80007d6:	2302      	movs	r3, #2
 80007d8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007dc:	f000 fed2 	bl	8001584 <wm8994_write_reg>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4413      	add	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
    break;
 80007e8:	e173      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 80007ea:	2311      	movs	r3, #17
 80007ec:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f103 0018 	add.w	r0, r3, #24
 80007f4:	f107 020a 	add.w	r2, r7, #10
 80007f8:	2302      	movs	r3, #2
 80007fa:	2128      	movs	r1, #40	; 0x28
 80007fc:	f000 fec2 	bl	8001584 <wm8994_write_reg>
 8000800:	4602      	mov	r2, r0
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8000808:	2335      	movs	r3, #53	; 0x35
 800080a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0018 	add.w	r0, r3, #24
 8000812:	f107 020a 	add.w	r2, r7, #10
 8000816:	2302      	movs	r3, #2
 8000818:	2129      	movs	r1, #41	; 0x29
 800081a:	f000 feb3 	bl	8001584 <wm8994_write_reg>
 800081e:	4602      	mov	r2, r0
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f103 0018 	add.w	r0, r3, #24
 800082c:	f107 020a 	add.w	r2, r7, #10
 8000830:	2302      	movs	r3, #2
 8000832:	212a      	movs	r1, #42	; 0x2a
 8000834:	f000 fea6 	bl	8001584 <wm8994_write_reg>
 8000838:	4602      	mov	r2, r0
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8000840:	f240 3303 	movw	r3, #771	; 0x303
 8000844:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f103 0018 	add.w	r0, r3, #24
 800084c:	f107 020a 	add.w	r2, r7, #10
 8000850:	2302      	movs	r3, #2
 8000852:	2104      	movs	r1, #4
 8000854:	f000 fe96 	bl	8001584 <wm8994_write_reg>
 8000858:	4602      	mov	r2, r0
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000860:	23db      	movs	r3, #219	; 0xdb
 8000862:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f103 0018 	add.w	r0, r3, #24
 800086a:	f107 020a 	add.w	r2, r7, #10
 800086e:	2302      	movs	r3, #2
 8000870:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000874:	f000 fe86 	bl	8001584 <wm8994_write_reg>
 8000878:	4602      	mov	r2, r0
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000880:	f246 3350 	movw	r3, #25424	; 0x6350
 8000884:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f103 0018 	add.w	r0, r3, #24
 800088c:	f107 020a 	add.w	r2, r7, #10
 8000890:	2302      	movs	r3, #2
 8000892:	2102      	movs	r1, #2
 8000894:	f000 fe76 	bl	8001584 <wm8994_write_reg>
 8000898:	4602      	mov	r2, r0
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 80008a0:	2302      	movs	r3, #2
 80008a2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f103 0018 	add.w	r0, r3, #24
 80008aa:	f107 020a 	add.w	r2, r7, #10
 80008ae:	2302      	movs	r3, #2
 80008b0:	f240 6106 	movw	r1, #1542	; 0x606
 80008b4:	f000 fe66 	bl	8001584 <wm8994_write_reg>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f103 0018 	add.w	r0, r3, #24
 80008c6:	f107 020a 	add.w	r2, r7, #10
 80008ca:	2302      	movs	r3, #2
 80008cc:	f240 6107 	movw	r1, #1543	; 0x607
 80008d0:	f000 fe58 	bl	8001584 <wm8994_write_reg>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4413      	add	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 80008dc:	f248 030d 	movw	r3, #32781	; 0x800d
 80008e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f103 0018 	add.w	r0, r3, #24
 80008e8:	f107 020a 	add.w	r2, r7, #10
 80008ec:	2302      	movs	r3, #2
 80008ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008f2:	f000 fe47 	bl	8001584 <wm8994_write_reg>
 80008f6:	4602      	mov	r2, r0
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
    break;
 80008fe:	e0e8      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8000900:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8000904:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0018 	add.w	r0, r3, #24
 800090c:	f107 020a 	add.w	r2, r7, #10
 8000910:	2302      	movs	r3, #2
 8000912:	2104      	movs	r1, #4
 8000914:	f000 fe36 	bl	8001584 <wm8994_write_reg>
 8000918:	4602      	mov	r2, r0
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000920:	23db      	movs	r3, #219	; 0xdb
 8000922:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f103 0018 	add.w	r0, r3, #24
 800092a:	f107 020a 	add.w	r2, r7, #10
 800092e:	2302      	movs	r3, #2
 8000930:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000934:	f000 fe26 	bl	8001584 <wm8994_write_reg>
 8000938:	4602      	mov	r2, r0
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000940:	f246 3350 	movw	r3, #25424	; 0x6350
 8000944:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f103 0018 	add.w	r0, r3, #24
 800094c:	f107 020a 	add.w	r2, r7, #10
 8000950:	2302      	movs	r3, #2
 8000952:	2102      	movs	r1, #2
 8000954:	f000 fe16 	bl	8001584 <wm8994_write_reg>
 8000958:	4602      	mov	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000960:	2302      	movs	r3, #2
 8000962:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0018 	add.w	r0, r3, #24
 800096a:	f107 020a 	add.w	r2, r7, #10
 800096e:	2302      	movs	r3, #2
 8000970:	f240 6106 	movw	r1, #1542	; 0x606
 8000974:	f000 fe06 	bl	8001584 <wm8994_write_reg>
 8000978:	4602      	mov	r2, r0
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0018 	add.w	r0, r3, #24
 8000986:	f107 020a 	add.w	r2, r7, #10
 800098a:	2302      	movs	r3, #2
 800098c:	f240 6107 	movw	r1, #1543	; 0x607
 8000990:	f000 fdf8 	bl	8001584 <wm8994_write_reg>
 8000994:	4602      	mov	r2, r0
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 800099c:	230d      	movs	r3, #13
 800099e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f103 0018 	add.w	r0, r3, #24
 80009a6:	f107 020a 	add.w	r2, r7, #10
 80009aa:	2302      	movs	r3, #2
 80009ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009b0:	f000 fde8 	bl	8001584 <wm8994_write_reg>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
    break;
 80009bc:	e089      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 80009be:	f640 733c 	movw	r3, #3900	; 0xf3c
 80009c2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0018 	add.w	r0, r3, #24
 80009ca:	f107 020a 	add.w	r2, r7, #10
 80009ce:	2302      	movs	r3, #2
 80009d0:	2104      	movs	r1, #4
 80009d2:	f000 fdd7 	bl	8001584 <wm8994_write_reg>
 80009d6:	4602      	mov	r2, r0
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 80009de:	23db      	movs	r3, #219	; 0xdb
 80009e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f103 0018 	add.w	r0, r3, #24
 80009e8:	f107 020a 	add.w	r2, r7, #10
 80009ec:	2302      	movs	r3, #2
 80009ee:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80009f2:	f000 fdc7 	bl	8001584 <wm8994_write_reg>
 80009f6:	4602      	mov	r2, r0
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f103 0018 	add.w	r0, r3, #24
 8000a04:	f107 020a 	add.w	r2, r7, #10
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000a0e:	f000 fdb9 	bl	8001584 <wm8994_write_reg>
 8000a12:	4602      	mov	r2, r0
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8000a1a:	f246 33a0 	movw	r3, #25504	; 0x63a0
 8000a1e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f103 0018 	add.w	r0, r3, #24
 8000a26:	f107 020a 	add.w	r2, r7, #10
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	f000 fda9 	bl	8001584 <wm8994_write_reg>
 8000a32:	4602      	mov	r2, r0
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f103 0018 	add.w	r0, r3, #24
 8000a44:	f107 020a 	add.w	r2, r7, #10
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f240 6106 	movw	r1, #1542	; 0x606
 8000a4e:	f000 fd99 	bl	8001584 <wm8994_write_reg>
 8000a52:	4602      	mov	r2, r0
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f103 0018 	add.w	r0, r3, #24
 8000a60:	f107 020a 	add.w	r2, r7, #10
 8000a64:	2302      	movs	r3, #2
 8000a66:	f240 6107 	movw	r1, #1543	; 0x607
 8000a6a:	f000 fd8b 	bl	8001584 <wm8994_write_reg>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0018 	add.w	r0, r3, #24
 8000a7c:	f107 020a 	add.w	r2, r7, #10
 8000a80:	2302      	movs	r3, #2
 8000a82:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000a86:	f000 fd7d 	bl	8001584 <wm8994_write_reg>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f103 0018 	add.w	r0, r3, #24
 8000a98:	f107 020a 	add.w	r2, r7, #10
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f240 6109 	movw	r1, #1545	; 0x609
 8000aa2:	f000 fd6f 	bl	8001584 <wm8994_write_reg>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000aae:	230d      	movs	r3, #13
 8000ab0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f103 0018 	add.w	r0, r3, #24
 8000ab8:	f107 020a 	add.w	r2, r7, #10
 8000abc:	2302      	movs	r3, #2
 8000abe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ac2:	f000 fd5f 	bl	8001584 <wm8994_write_reg>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
    
    break;    
 8000ace:	e000      	b.n	8000ad2 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8000ad0:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fc59 	bl	8001390 <WM8994_SetFrequency>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	d11a      	bne.n	8000b24 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8000aee:	2100      	movs	r1, #0
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 fc18 	bl	8001326 <WM8994_SetResolution>
 8000af6:	4602      	mov	r2, r0
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8000afe:	2103      	movs	r1, #3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 fc2a 	bl	800135a <WM8994_SetProtocol>
 8000b06:	4602      	mov	r2, r0
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3318      	adds	r3, #24
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fdbd 	bl	8001694 <wm8994_aif1_control1_adcr_src>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e01b      	b.n	8000b5c <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 fbfb 	bl	8001326 <WM8994_SetResolution>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 fc0d 	bl	800135a <WM8994_SetProtocol>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3318      	adds	r3, #24
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fda0 	bl	8001694 <wm8994_aif1_control1_adcr_src>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f103 0018 	add.w	r0, r3, #24
 8000b66:	f107 020a 	add.w	r2, r7, #10
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f240 3102 	movw	r1, #770	; 0x302
 8000b70:	f000 fd08 	bl	8001584 <wm8994_write_reg>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8000b7c:	230a      	movs	r3, #10
 8000b7e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0018 	add.w	r0, r3, #24
 8000b86:	f107 020a 	add.w	r2, r7, #10
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000b90:	f000 fcf8 	bl	8001584 <wm8994_write_reg>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f103 0018 	add.w	r0, r3, #24
 8000ba6:	f107 020a 	add.w	r2, r7, #10
 8000baa:	2302      	movs	r3, #2
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	f000 fce8 	bl	8001584 <wm8994_write_reg>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 81c6 	beq.w	8000f52 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d164      	bne.n	8000c98 <WM8994_Init+0x988>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d160      	bne.n	8000c98 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f103 0018 	add.w	r0, r3, #24
 8000be2:	f107 020a 	add.w	r2, r7, #10
 8000be6:	2302      	movs	r3, #2
 8000be8:	212d      	movs	r1, #45	; 0x2d
 8000bea:	f000 fccb 	bl	8001584 <wm8994_write_reg>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f103 0018 	add.w	r0, r3, #24
 8000bfc:	f107 020a 	add.w	r2, r7, #10
 8000c00:	2302      	movs	r3, #2
 8000c02:	212e      	movs	r1, #46	; 0x2e
 8000c04:	f000 fcbe 	bl	8001584 <wm8994_write_reg>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d119      	bne.n	8000c4c <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8000c18:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000c1c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f103 0018 	add.w	r0, r3, #24
 8000c24:	f107 020a 	add.w	r2, r7, #10
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c2e:	f000 fca9 	bl	8001584 <wm8994_write_reg>
 8000c32:	4602      	mov	r2, r0
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8000c3a:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8000c40:	f240 1145 	movw	r1, #325	; 0x145
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 fc57 	bl	80014f8 <WM8994_Delay>
 8000c4a:	e014      	b.n	8000c76 <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8000c4c:	f248 1308 	movw	r3, #33032	; 0x8108
 8000c50:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f103 0018 	add.w	r0, r3, #24
 8000c58:	f107 020a 	add.w	r2, r7, #10
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c62:	f000 fc8f 	bl	8001584 <wm8994_write_reg>
 8000c66:	4602      	mov	r2, r0
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8000c6e:	2132      	movs	r1, #50	; 0x32
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 fc41 	bl	80014f8 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8000c76:	2300      	movs	r3, #0
 8000c78:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f103 0018 	add.w	r0, r3, #24
 8000c80:	f107 020a 	add.w	r2, r7, #10
 8000c84:	2302      	movs	r3, #2
 8000c86:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000c8a:	f000 fc7b 	bl	8001584 <wm8994_write_reg>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e0f4      	b.n	8000e82 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8000c98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f103 0018 	add.w	r0, r3, #24
 8000ca4:	f107 020a 	add.w	r2, r7, #10
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2103      	movs	r1, #3
 8000cac:	f000 fc6a 	bl	8001584 <wm8994_write_reg>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f103 0018 	add.w	r0, r3, #24
 8000cc2:	f107 020a 	add.w	r2, r7, #10
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	2122      	movs	r1, #34	; 0x22
 8000cca:	f000 fc5b 	bl	8001584 <wm8994_write_reg>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f103 0018 	add.w	r0, r3, #24
 8000cdc:	f107 020a 	add.w	r2, r7, #10
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	2123      	movs	r1, #35	; 0x23
 8000ce4:	f000 fc4e 	bl	8001584 <wm8994_write_reg>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8000cf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f103 0018 	add.w	r0, r3, #24
 8000cfc:	f107 020a 	add.w	r2, r7, #10
 8000d00:	2302      	movs	r3, #2
 8000d02:	2136      	movs	r1, #54	; 0x36
 8000d04:	f000 fc3e 	bl	8001584 <wm8994_write_reg>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8000d10:	f243 0303 	movw	r3, #12291	; 0x3003
 8000d14:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f103 0018 	add.w	r0, r3, #24
 8000d1c:	f107 020a 	add.w	r2, r7, #10
 8000d20:	2302      	movs	r3, #2
 8000d22:	2101      	movs	r1, #1
 8000d24:	f000 fc2e 	bl	8001584 <wm8994_write_reg>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d113      	bne.n	8000d60 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8000d38:	f240 2305 	movw	r3, #517	; 0x205
 8000d3c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f103 0018 	add.w	r0, r3, #24
 8000d44:	f107 020a 	add.w	r2, r7, #10
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2151      	movs	r1, #81	; 0x51
 8000d4c:	f000 fc1a 	bl	8001584 <wm8994_write_reg>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e011      	b.n	8000d7e <WM8994_Init+0xa6e>
 8000d5a:	bf00      	nop
 8000d5c:	24000400 	.word	0x24000400
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8000d60:	2305      	movs	r3, #5
 8000d62:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f103 0018 	add.w	r0, r3, #24
 8000d6a:	f107 020a 	add.w	r2, r7, #10
 8000d6e:	2302      	movs	r3, #2
 8000d70:	2151      	movs	r1, #81	; 0x51
 8000d72:	f000 fc07 	bl	8001584 <wm8994_write_reg>
 8000d76:	4602      	mov	r2, r0
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8000d7e:	f243 3303 	movw	r3, #13059	; 0x3303
 8000d82:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f103 0018 	add.w	r0, r3, #24
 8000d8a:	f107 020a 	add.w	r2, r7, #10
 8000d8e:	2302      	movs	r3, #2
 8000d90:	2101      	movs	r1, #1
 8000d92:	f000 fbf7 	bl	8001584 <wm8994_write_reg>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8000d9e:	2322      	movs	r3, #34	; 0x22
 8000da0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 0018 	add.w	r0, r3, #24
 8000da8:	f107 020a 	add.w	r2, r7, #10
 8000dac:	2302      	movs	r3, #2
 8000dae:	2160      	movs	r1, #96	; 0x60
 8000db0:	f000 fbe8 	bl	8001584 <wm8994_write_reg>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8000dbc:	f649 7325 	movw	r3, #40741	; 0x9f25
 8000dc0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f103 0018 	add.w	r0, r3, #24
 8000dc8:	f107 020a 	add.w	r2, r7, #10
 8000dcc:	2302      	movs	r3, #2
 8000dce:	214c      	movs	r1, #76	; 0x4c
 8000dd0:	f000 fbd8 	bl	8001584 <wm8994_write_reg>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8000ddc:	210f      	movs	r1, #15
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 fb8a 	bl	80014f8 <WM8994_Delay>
      
      tmp = 0x0001;
 8000de4:	2301      	movs	r3, #1
 8000de6:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f103 0018 	add.w	r0, r3, #24
 8000dee:	f107 020a 	add.w	r2, r7, #10
 8000df2:	2302      	movs	r3, #2
 8000df4:	212d      	movs	r1, #45	; 0x2d
 8000df6:	f000 fbc5 	bl	8001584 <wm8994_write_reg>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f103 0018 	add.w	r0, r3, #24
 8000e08:	f107 020a 	add.w	r2, r7, #10
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	212e      	movs	r1, #46	; 0x2e
 8000e10:	f000 fbb8 	bl	8001584 <wm8994_write_reg>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4413      	add	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8000e1c:	f44f 734c 	mov.w	r3, #816	; 0x330
 8000e20:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f103 0018 	add.w	r0, r3, #24
 8000e28:	f107 020a 	add.w	r2, r7, #10
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2103      	movs	r1, #3
 8000e30:	f000 fba8 	bl	8001584 <wm8994_write_reg>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8000e3c:	2333      	movs	r3, #51	; 0x33
 8000e3e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 0018 	add.w	r0, r3, #24
 8000e46:	f107 020a 	add.w	r2, r7, #10
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	2154      	movs	r1, #84	; 0x54
 8000e4e:	f000 fb99 	bl	8001584 <wm8994_write_reg>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8000e5a:	f240 1101 	movw	r1, #257	; 0x101
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fb4a 	bl	80014f8 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8000e64:	23ee      	movs	r3, #238	; 0xee
 8000e66:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f103 0018 	add.w	r0, r3, #24
 8000e6e:	f107 020a 	add.w	r2, r7, #10
 8000e72:	2302      	movs	r3, #2
 8000e74:	2160      	movs	r1, #96	; 0x60
 8000e76:	f000 fb85 	bl	8001584 <wm8994_write_reg>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f103 0018 	add.w	r0, r3, #24
 8000e8c:	f107 020a 	add.w	r2, r7, #10
 8000e90:	2302      	movs	r3, #2
 8000e92:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000e96:	f000 fb75 	bl	8001584 <wm8994_write_reg>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f103 0018 	add.w	r0, r3, #24
 8000ea8:	f107 020a 	add.w	r2, r7, #10
 8000eac:	2302      	movs	r3, #2
 8000eae:	f240 6111 	movw	r1, #1553	; 0x611
 8000eb2:	f000 fb67 	bl	8001584 <wm8994_write_reg>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f103 0018 	add.w	r0, r3, #24
 8000ec8:	f107 020a 	add.w	r2, r7, #10
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ed2:	f000 fb57 	bl	8001584 <wm8994_write_reg>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f103 0018 	add.w	r0, r3, #24
 8000ee8:	f107 020a 	add.w	r2, r7, #10
 8000eec:	2302      	movs	r3, #2
 8000eee:	f240 6112 	movw	r1, #1554	; 0x612
 8000ef2:	f000 fb47 	bl	8001584 <wm8994_write_reg>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f103 0018 	add.w	r0, r3, #24
 8000f04:	f107 020a 	add.w	r2, r7, #10
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f240 6113 	movw	r1, #1555	; 0x613
 8000f0e:	f000 fb39 	bl	8001584 <wm8994_write_reg>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f103 0018 	add.w	r0, r3, #24
 8000f24:	f107 020a 	add.w	r2, r7, #10
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f240 4122 	movw	r1, #1058	; 0x422
 8000f2e:	f000 fb29 	bl	8001584 <wm8994_write_reg>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	2101      	movs	r1, #1
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f8c9 	bl	80010dc <WM8994_SetVolume>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80b5 	beq.w	80010c6 <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d003      	beq.n	8000f6c <WM8994_Init+0xc5c>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000f6c:	2313      	movs	r3, #19
 8000f6e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f103 0018 	add.w	r0, r3, #24
 8000f76:	f107 020a 	add.w	r2, r7, #10
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	f000 fb01 	bl	8001584 <wm8994_write_reg>
 8000f82:	4602      	mov	r2, r0
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f103 0018 	add.w	r0, r3, #24
 8000f94:	f107 020a 	add.w	r2, r7, #10
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000f9e:	f000 faf1 	bl	8001584 <wm8994_write_reg>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 8000faa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fae:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f103 0018 	add.w	r0, r3, #24
 8000fb6:	f107 020a 	add.w	r2, r7, #10
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f240 4111 	movw	r1, #1041	; 0x411
 8000fc0:	f000 fae0 	bl	8001584 <wm8994_write_reg>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e06f      	b.n	80010ae <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d13e      	bne.n	8001054 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000fd6:	2313      	movs	r3, #19
 8000fd8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f103 0018 	add.w	r0, r3, #24
 8000fe0:	f107 020a 	add.w	r2, r7, #10
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	f000 facc 	bl	8001584 <wm8994_write_reg>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f103 0018 	add.w	r0, r3, #24
 8000ffe:	f107 020a 	add.w	r2, r7, #10
 8001002:	2302      	movs	r3, #2
 8001004:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001008:	f000 fabc 	bl	8001584 <wm8994_write_reg>
 800100c:	4602      	mov	r2, r0
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8001014:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001018:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f103 0018 	add.w	r0, r3, #24
 8001020:	f107 020a 	add.w	r2, r7, #10
 8001024:	2302      	movs	r3, #2
 8001026:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800102a:	f000 faab 	bl	8001584 <wm8994_write_reg>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 0018 	add.w	r0, r3, #24
 800103c:	f107 020a 	add.w	r2, r7, #10
 8001040:	2302      	movs	r3, #2
 8001042:	f240 4111 	movw	r1, #1041	; 0x411
 8001046:	f000 fa9d 	bl	8001584 <wm8994_write_reg>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e02c      	b.n	80010ae <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 8001054:	230b      	movs	r3, #11
 8001056:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 0018 	add.w	r0, r3, #24
 800105e:	f107 020a 	add.w	r2, r7, #10
 8001062:	2302      	movs	r3, #2
 8001064:	2118      	movs	r1, #24
 8001066:	f000 fa8d 	bl	8001584 <wm8994_write_reg>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f103 0018 	add.w	r0, r3, #24
 8001078:	f107 020a 	add.w	r2, r7, #10
 800107c:	2302      	movs	r3, #2
 800107e:	211a      	movs	r1, #26
 8001080:	f000 fa80 	bl	8001584 <wm8994_write_reg>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 800108c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001090:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f103 0018 	add.w	r0, r3, #24
 8001098:	f107 020a 	add.w	r2, r7, #10
 800109c:	2302      	movs	r3, #2
 800109e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80010a2:	f000 fa6f 	bl	8001584 <wm8994_write_reg>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f80f 	bl	80010dc <WM8994_SetVolume>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 8089 	bne.w	8001204 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b3e      	cmp	r3, #62	; 0x3e
 80010f6:	d93c      	bls.n	8001172 <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80010f8:	2100      	movs	r1, #0
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 f8c8 	bl	8001290 <WM8994_SetMute>
 8001100:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 8001102:	f240 137f 	movw	r3, #383	; 0x17f
 8001106:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f103 0018 	add.w	r0, r3, #24
 800110e:	f107 0212 	add.w	r2, r7, #18
 8001112:	2302      	movs	r3, #2
 8001114:	211c      	movs	r1, #28
 8001116:	f000 fa35 	bl	8001584 <wm8994_write_reg>
 800111a:	4602      	mov	r2, r0
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4413      	add	r3, r2
 8001120:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f103 0018 	add.w	r0, r3, #24
 8001128:	f107 0212 	add.w	r2, r7, #18
 800112c:	2302      	movs	r3, #2
 800112e:	211d      	movs	r1, #29
 8001130:	f000 fa28 	bl	8001584 <wm8994_write_reg>
 8001134:	4602      	mov	r2, r0
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4413      	add	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f103 0018 	add.w	r0, r3, #24
 8001142:	f107 0212 	add.w	r2, r7, #18
 8001146:	2302      	movs	r3, #2
 8001148:	2126      	movs	r1, #38	; 0x26
 800114a:	f000 fa1b 	bl	8001584 <wm8994_write_reg>
 800114e:	4602      	mov	r2, r0
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	4413      	add	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f103 0018 	add.w	r0, r3, #24
 800115c:	f107 0212 	add.w	r2, r7, #18
 8001160:	2302      	movs	r3, #2
 8001162:	2127      	movs	r1, #39	; 0x27
 8001164:	f000 fa0e 	bl	8001584 <wm8994_write_reg>
 8001168:	4602      	mov	r2, r0
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e083      	b.n	800127a <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d105      	bne.n	8001184 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8001178:	2101      	movs	r1, #1
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 f888 	bl	8001290 <WM8994_SetMute>
 8001180:	6178      	str	r0, [r7, #20]
 8001182:	e07a      	b.n	800127a <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001184:	2100      	movs	r1, #0
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 f882 	bl	8001290 <WM8994_SetMute>
 800118c:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	b29b      	uxth	r3, r3
 8001192:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001196:	b29b      	uxth	r3, r3
 8001198:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f103 0018 	add.w	r0, r3, #24
 80011a0:	f107 0212 	add.w	r2, r7, #18
 80011a4:	2302      	movs	r3, #2
 80011a6:	211c      	movs	r1, #28
 80011a8:	f000 f9ec 	bl	8001584 <wm8994_write_reg>
 80011ac:	4602      	mov	r2, r0
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f103 0018 	add.w	r0, r3, #24
 80011ba:	f107 0212 	add.w	r2, r7, #18
 80011be:	2302      	movs	r3, #2
 80011c0:	211d      	movs	r1, #29
 80011c2:	f000 f9df 	bl	8001584 <wm8994_write_reg>
 80011c6:	4602      	mov	r2, r0
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	4413      	add	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f103 0018 	add.w	r0, r3, #24
 80011d4:	f107 0212 	add.w	r2, r7, #18
 80011d8:	2302      	movs	r3, #2
 80011da:	2126      	movs	r1, #38	; 0x26
 80011dc:	f000 f9d2 	bl	8001584 <wm8994_write_reg>
 80011e0:	4602      	mov	r2, r0
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	4413      	add	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f103 0018 	add.w	r0, r3, #24
 80011ee:	f107 0212 	add.w	r2, r7, #18
 80011f2:	2302      	movs	r3, #2
 80011f4:	2127      	movs	r1, #39	; 0x27
 80011f6:	f000 f9c5 	bl	8001584 <wm8994_write_reg>
 80011fa:	4602      	mov	r2, r0
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e03a      	b.n	800127a <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	b29b      	uxth	r3, r3
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	b29b      	uxth	r3, r3
 800120e:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f103 0018 	add.w	r0, r3, #24
 8001216:	f107 0212 	add.w	r2, r7, #18
 800121a:	2302      	movs	r3, #2
 800121c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001220:	f000 f9b0 	bl	8001584 <wm8994_write_reg>
 8001224:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f103 0018 	add.w	r0, r3, #24
 800122c:	f107 0212 	add.w	r2, r7, #18
 8001230:	2302      	movs	r3, #2
 8001232:	f240 4101 	movw	r1, #1025	; 0x401
 8001236:	f000 f9a5 	bl	8001584 <wm8994_write_reg>
 800123a:	4602      	mov	r2, r0
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	4413      	add	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f103 0018 	add.w	r0, r3, #24
 8001248:	f107 0212 	add.w	r2, r7, #18
 800124c:	2302      	movs	r3, #2
 800124e:	f240 4104 	movw	r1, #1028	; 0x404
 8001252:	f000 f997 	bl	8001584 <wm8994_write_reg>
 8001256:	4602      	mov	r2, r0
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	4413      	add	r3, r2
 800125c:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f103 0018 	add.w	r0, r3, #24
 8001264:	f107 0212 	add.w	r2, r7, #18
 8001268:	2302      	movs	r3, #2
 800126a:	f240 4105 	movw	r1, #1029	; 0x405
 800126e:	f000 f989 	bl	8001584 <wm8994_write_reg>
 8001272:	4602      	mov	r2, r0
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 8001280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001284:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001286:	697b      	ldr	r3, [r7, #20]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d11c      	bne.n	80012da <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f103 0018 	add.w	r0, r3, #24
 80012ac:	f107 020a 	add.w	r2, r7, #10
 80012b0:	2302      	movs	r3, #2
 80012b2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80012b6:	f000 f965 	bl	8001584 <wm8994_write_reg>
 80012ba:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f103 0018 	add.w	r0, r3, #24
 80012c2:	f107 020a 	add.w	r2, r7, #10
 80012c6:	2302      	movs	r3, #2
 80012c8:	f240 4122 	movw	r1, #1058	; 0x422
 80012cc:	f000 f95a 	bl	8001584 <wm8994_write_reg>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e01a      	b.n	8001310 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 80012da:	2310      	movs	r3, #16
 80012dc:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0018 	add.w	r0, r3, #24
 80012e4:	f107 020a 	add.w	r2, r7, #10
 80012e8:	2302      	movs	r3, #2
 80012ea:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80012ee:	f000 f949 	bl	8001584 <wm8994_write_reg>
 80012f2:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f103 0018 	add.w	r0, r3, #24
 80012fa:	f107 020a 	add.w	r2, r7, #10
 80012fe:	2302      	movs	r3, #2
 8001300:	f240 4122 	movw	r1, #1058	; 0x422
 8001304:	f000 f93e 	bl	8001584 <wm8994_write_reg>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800131a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800131c:	68fb      	ldr	r3, [r7, #12]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3318      	adds	r3, #24
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	b292      	uxth	r2, r2
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f978 	bl	8001634 <wm8994_aif1_control1_wl>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001350:	68fb      	ldr	r3, [r7, #12]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3318      	adds	r3, #24
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	b292      	uxth	r2, r2
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f92e 	bl	80015d4 <wm8994_aif1_control1_fmt>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001382:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4a55      	ldr	r2, [pc, #340]	; (80014f4 <WM8994_SetFrequency+0x164>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d05d      	beq.n	800145e <WM8994_SetFrequency+0xce>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	4a53      	ldr	r2, [pc, #332]	; (80014f4 <WM8994_SetFrequency+0x164>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	f200 8091 	bhi.w	80014ce <WM8994_SetFrequency+0x13e>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f64a 4244 	movw	r2, #44100	; 0xac44
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d07d      	beq.n	80014b2 <WM8994_SetFrequency+0x122>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80013bc:	4293      	cmp	r3, r2
 80013be:	f200 8086 	bhi.w	80014ce <WM8994_SetFrequency+0x13e>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80013c8:	d03b      	beq.n	8001442 <WM8994_SetFrequency+0xb2>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80013d0:	d87d      	bhi.n	80014ce <WM8994_SetFrequency+0x13e>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f245 6222 	movw	r2, #22050	; 0x5622
 80013d8:	4293      	cmp	r3, r2
 80013da:	d05c      	beq.n	8001496 <WM8994_SetFrequency+0x106>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f245 6222 	movw	r2, #22050	; 0x5622
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d873      	bhi.n	80014ce <WM8994_SetFrequency+0x13e>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80013ec:	d01b      	beq.n	8001426 <WM8994_SetFrequency+0x96>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80013f4:	d86b      	bhi.n	80014ce <WM8994_SetFrequency+0x13e>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80013fc:	d005      	beq.n	800140a <WM8994_SetFrequency+0x7a>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001404:	4293      	cmp	r3, r2
 8001406:	d038      	beq.n	800147a <WM8994_SetFrequency+0xea>
 8001408:	e061      	b.n	80014ce <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 800140a:	2303      	movs	r3, #3
 800140c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f103 0018 	add.w	r0, r3, #24
 8001414:	f107 020a 	add.w	r2, r7, #10
 8001418:	2302      	movs	r3, #2
 800141a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800141e:	f000 f8b1 	bl	8001584 <wm8994_write_reg>
 8001422:	60f8      	str	r0, [r7, #12]
    break;
 8001424:	e061      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8001426:	2333      	movs	r3, #51	; 0x33
 8001428:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f103 0018 	add.w	r0, r3, #24
 8001430:	f107 020a 	add.w	r2, r7, #10
 8001434:	2302      	movs	r3, #2
 8001436:	f44f 7104 	mov.w	r1, #528	; 0x210
 800143a:	f000 f8a3 	bl	8001584 <wm8994_write_reg>
 800143e:	60f8      	str	r0, [r7, #12]
    break;
 8001440:	e053      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8001442:	2363      	movs	r3, #99	; 0x63
 8001444:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f103 0018 	add.w	r0, r3, #24
 800144c:	f107 020a 	add.w	r2, r7, #10
 8001450:	2302      	movs	r3, #2
 8001452:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001456:	f000 f895 	bl	8001584 <wm8994_write_reg>
 800145a:	60f8      	str	r0, [r7, #12]
    break;
 800145c:	e045      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 800145e:	23a3      	movs	r3, #163	; 0xa3
 8001460:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f103 0018 	add.w	r0, r3, #24
 8001468:	f107 020a 	add.w	r2, r7, #10
 800146c:	2302      	movs	r3, #2
 800146e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001472:	f000 f887 	bl	8001584 <wm8994_write_reg>
 8001476:	60f8      	str	r0, [r7, #12]
    break;
 8001478:	e037      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 800147a:	2313      	movs	r3, #19
 800147c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f103 0018 	add.w	r0, r3, #24
 8001484:	f107 020a 	add.w	r2, r7, #10
 8001488:	2302      	movs	r3, #2
 800148a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800148e:	f000 f879 	bl	8001584 <wm8994_write_reg>
 8001492:	60f8      	str	r0, [r7, #12]
    break;
 8001494:	e029      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8001496:	2343      	movs	r3, #67	; 0x43
 8001498:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f103 0018 	add.w	r0, r3, #24
 80014a0:	f107 020a 	add.w	r2, r7, #10
 80014a4:	2302      	movs	r3, #2
 80014a6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014aa:	f000 f86b 	bl	8001584 <wm8994_write_reg>
 80014ae:	60f8      	str	r0, [r7, #12]
    break;
 80014b0:	e01b      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 80014b2:	2373      	movs	r3, #115	; 0x73
 80014b4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f103 0018 	add.w	r0, r3, #24
 80014bc:	f107 020a 	add.w	r2, r7, #10
 80014c0:	2302      	movs	r3, #2
 80014c2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014c6:	f000 f85d 	bl	8001584 <wm8994_write_reg>
 80014ca:	60f8      	str	r0, [r7, #12]
    break; 
 80014cc:	e00d      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 80014ce:	2383      	movs	r3, #131	; 0x83
 80014d0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f103 0018 	add.w	r0, r3, #24
 80014d8:	f107 020a 	add.w	r2, r7, #10
 80014dc:	2302      	movs	r3, #2
 80014de:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014e2:	f000 f84f 	bl	8001584 <wm8994_write_reg>
 80014e6:	60f8      	str	r0, [r7, #12]
    break; 
 80014e8:	bf00      	nop
  }
  
  return ret;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	00017700 	.word	0x00017700

080014f8 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	4798      	blx	r3
 8001508:	4603      	mov	r3, r0
 800150a:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800150c:	bf00      	nop
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4798      	blx	r3
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d8f5      	bhi.n	800150e <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	461a      	mov	r2, r3
 8001538:	460b      	mov	r3, r1
 800153a:	817b      	strh	r3, [r7, #10]
 800153c:	4613      	mov	r3, r2
 800153e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685c      	ldr	r4, [r3, #4]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6898      	ldr	r0, [r3, #8]
 8001548:	893b      	ldrh	r3, [r7, #8]
 800154a:	8979      	ldrh	r1, [r7, #10]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	47a0      	blx	r4
 8001550:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db10      	blt.n	800157a <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b29b      	uxth	r3, r3
 8001568:	b21a      	sxth	r2, r3
 800156a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800156e:	4313      	orrs	r3, r2
 8001570:	b21b      	sxth	r3, r3
 8001572:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	8a7a      	ldrh	r2, [r7, #18]
 8001578:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 800157a:	697b      	ldr	r3, [r7, #20]
}
 800157c:	4618      	mov	r0, r3
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	461a      	mov	r2, r3
 8001590:	460b      	mov	r3, r1
 8001592:	817b      	strh	r3, [r7, #10]
 8001594:	4613      	mov	r3, r2
 8001596:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	b29b      	uxth	r3, r3
 80015a0:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	8afb      	ldrh	r3, [r7, #22]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681c      	ldr	r4, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6898      	ldr	r0, [r3, #8]
 80015c0:	893b      	ldrh	r3, [r7, #8]
 80015c2:	f107 0216 	add.w	r2, r7, #22
 80015c6:	8979      	ldrh	r1, [r7, #10]
 80015c8:	47a0      	blx	r4
 80015ca:	4603      	mov	r3, r0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}

080015d4 <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80015e4:	f107 020a 	add.w	r2, r7, #10
 80015e8:	2302      	movs	r3, #2
 80015ea:	f44f 7140 	mov.w	r1, #768	; 0x300
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff9c 	bl	800152c <wm8994_read_reg>
 80015f4:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d116      	bne.n	800162a <wm8994_aif1_control1_fmt+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	f023 0318 	bic.w	r3, r3, #24
 8001602:	b29b      	uxth	r3, r3
 8001604:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	b21a      	sxth	r2, r3
 800160c:	897b      	ldrh	r3, [r7, #10]
 800160e:	b21b      	sxth	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b21b      	sxth	r3, r3
 8001614:	b29b      	uxth	r3, r3
 8001616:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001618:	f107 020a 	add.w	r2, r7, #10
 800161c:	2302      	movs	r3, #2
 800161e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffae 	bl	8001584 <wm8994_write_reg>
 8001628:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001644:	f107 020a 	add.w	r2, r7, #10
 8001648:	2302      	movs	r3, #2
 800164a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff6c 	bl	800152c <wm8994_read_reg>
 8001654:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d116      	bne.n	800168a <wm8994_aif1_control1_wl+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 800165c:	897b      	ldrh	r3, [r7, #10]
 800165e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001662:	b29b      	uxth	r3, r3
 8001664:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	b21a      	sxth	r2, r3
 800166c:	897b      	ldrh	r3, [r7, #10]
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21b      	sxth	r3, r3
 8001674:	b29b      	uxth	r3, r3
 8001676:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001678:	f107 020a 	add.w	r2, r7, #10
 800167c:	2302      	movs	r3, #2
 800167e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff7e 	bl	8001584 <wm8994_write_reg>
 8001688:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80016a4:	f107 020a 	add.w	r2, r7, #10
 80016a8:	2302      	movs	r3, #2
 80016aa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ff3c 	bl	800152c <wm8994_read_reg>
 80016b4:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d116      	bne.n	80016ea <wm8994_aif1_control1_adcr_src+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 80016bc:	897b      	ldrh	r3, [r7, #10]
 80016be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	039b      	lsls	r3, r3, #14
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	897b      	ldrh	r3, [r7, #10]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80016d8:	f107 020a 	add.w	r2, r7, #10
 80016dc:	2302      	movs	r3, #2
 80016de:	f44f 7140 	mov.w	r1, #768	; 0x300
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff4e 	bl	8001584 <wm8994_write_reg>
 80016e8:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10f      	bne.n	8001728 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8001708:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <BSP_LED_Init+0xb0>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <BSP_LED_Init+0xb0>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <BSP_LED_Init+0xb0>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	e015      	b.n	8001754 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10f      	bne.n	800174e <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <BSP_LED_Init+0xb0>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001734:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <BSP_LED_Init+0xb0>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <BSP_LED_Init+0xb0>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	e002      	b.n	8001754 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800174e:	f06f 0301 	mvn.w	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001758:	2301      	movs	r3, #1
 800175a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <BSP_LED_Init+0xb4>)
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <BSP_LED_Init+0xb8>)
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	f107 0210 	add.w	r2, r7, #16
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fe91 	bl	80044a0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <BSP_LED_Init+0xb8>)
 8001782:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <BSP_LED_Init+0xb4>)
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	b29b      	uxth	r3, r3
 8001790:	2201      	movs	r2, #1
 8001792:	4619      	mov	r1, r3
 8001794:	f003 f92e 	bl	80049f4 <HAL_GPIO_WritePin>

  return ret;
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800179a:	4618      	mov	r0, r3
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	58024400 	.word	0x58024400
 80017a8:	0800b210 	.word	0x0800b210
 80017ac:	24000404 	.word	0x24000404

080017b0 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <BSP_LED_On+0x34>)
 80017c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <BSP_LED_On+0x38>)
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	2200      	movs	r2, #0
 80017d2:	4619      	mov	r1, r3
 80017d4:	f003 f90e 	bl	80049f4 <HAL_GPIO_WritePin>
  return ret;
 80017d8:	68fb      	ldr	r3, [r7, #12]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24000404 	.word	0x24000404
 80017e8:	0800b210 	.word	0x0800b210

080017ec <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4a08      	ldr	r2, [pc, #32]	; (8001820 <BSP_LED_Off+0x34>)
 80017fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <BSP_LED_Off+0x38>)
 8001806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180a:	b29b      	uxth	r3, r3
 800180c:	2201      	movs	r2, #1
 800180e:	4619      	mov	r1, r3
 8001810:	f003 f8f0 	bl	80049f4 <HAL_GPIO_WritePin>
  return ret;
 8001814:	68fb      	ldr	r3, [r7, #12]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	24000404 	.word	0x24000404
 8001824:	0800b210 	.word	0x0800b210

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182e:	2003      	movs	r0, #3
 8001830:	f000 f95c 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001834:	f003 fed8 	bl	80055e8 <HAL_RCC_GetSysClockFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_Init+0x68>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	4913      	ldr	r1, [pc, #76]	; (8001894 <HAL_Init+0x6c>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_Init+0x68>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_Init+0x6c>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_Init+0x70>)
 800186a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_Init+0x74>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f814 	bl	80018a0 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e002      	b.n	8001888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001882:	f007 f92b 	bl	8008adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	58024400 	.word	0x58024400
 8001894:	0800b220 	.word	0x0800b220
 8001898:	24000418 	.word	0x24000418
 800189c:	24000414 	.word	0x24000414

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_InitTick+0x60>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e021      	b.n	80018f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_InitTick+0x64>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_InitTick+0x60>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f941 	bl	8001b52 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e8:	f000 f90b 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x68>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	24000410 	.word	0x24000410
 8001904:	24000414 	.word	0x24000414
 8001908:	2400040c 	.word	0x2400040c

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	24000410 	.word	0x24000410
 8001930:	240004a8 	.word	0x240004a8

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	240004a8 	.word	0x240004a8

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <__NVIC_SetPriorityGrouping+0x40>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	4313      	orrs	r3, r2
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x40>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	05fa0000 	.word	0x05fa0000

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff29 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff40 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff90 	bl	8001a40 <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5f 	bl	80019ec <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff33 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffa4 	bl	8001aa8 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e054      	b.n	8001c28 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7f5b      	ldrb	r3, [r3, #29]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d105      	bne.n	8001b94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f006 ffbe 	bl	8008b10 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	791b      	ldrb	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10c      	bne.n	8001bbc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a22      	ldr	r2, [pc, #136]	; (8001c30 <HAL_CRC_Init+0xc4>)
 8001ba8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0218 	bic.w	r2, r2, #24
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	e00c      	b.n	8001bd6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6899      	ldr	r1, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f834 	bl	8001c34 <HAL_CRCEx_Polynomial_Set>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e028      	b.n	8001c28 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	795b      	ldrb	r3, [r3, #5]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	e004      	b.n	8001bf4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6912      	ldr	r2, [r2, #16]
 8001bf2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699a      	ldr	r2, [r3, #24]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	04c11db7 	.word	0x04c11db7

08001c34 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001c44:	231f      	movs	r3, #31
 8001c46:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001c48:	bf00      	nop
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1e5a      	subs	r2, r3, #1
 8001c4e:	613a      	str	r2, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <HAL_CRCEx_Polynomial_Set+0x34>
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_CRCEx_Polynomial_Set+0x16>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b18      	cmp	r3, #24
 8001c6c:	d846      	bhi.n	8001cfc <HAL_CRCEx_Polynomial_Set+0xc8>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001d03 	.word	0x08001d03
 8001c78:	08001cfd 	.word	0x08001cfd
 8001c7c:	08001cfd 	.word	0x08001cfd
 8001c80:	08001cfd 	.word	0x08001cfd
 8001c84:	08001cfd 	.word	0x08001cfd
 8001c88:	08001cfd 	.word	0x08001cfd
 8001c8c:	08001cfd 	.word	0x08001cfd
 8001c90:	08001cfd 	.word	0x08001cfd
 8001c94:	08001cf1 	.word	0x08001cf1
 8001c98:	08001cfd 	.word	0x08001cfd
 8001c9c:	08001cfd 	.word	0x08001cfd
 8001ca0:	08001cfd 	.word	0x08001cfd
 8001ca4:	08001cfd 	.word	0x08001cfd
 8001ca8:	08001cfd 	.word	0x08001cfd
 8001cac:	08001cfd 	.word	0x08001cfd
 8001cb0:	08001cfd 	.word	0x08001cfd
 8001cb4:	08001ce5 	.word	0x08001ce5
 8001cb8:	08001cfd 	.word	0x08001cfd
 8001cbc:	08001cfd 	.word	0x08001cfd
 8001cc0:	08001cfd 	.word	0x08001cfd
 8001cc4:	08001cfd 	.word	0x08001cfd
 8001cc8:	08001cfd 	.word	0x08001cfd
 8001ccc:	08001cfd 	.word	0x08001cfd
 8001cd0:	08001cfd 	.word	0x08001cfd
 8001cd4:	08001cd9 	.word	0x08001cd9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d913      	bls.n	8001d06 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ce2:	e010      	b.n	8001d06 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b07      	cmp	r3, #7
 8001ce8:	d90f      	bls.n	8001d0a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001cee:	e00c      	b.n	8001d0a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	d90b      	bls.n	8001d0e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001cfa:	e008      	b.n	8001d0e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8001d00:	e006      	b.n	8001d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d02:	bf00      	nop
 8001d04:	e004      	b.n	8001d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d06:	bf00      	nop
 8001d08:	e002      	b.n	8001d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d0a:	bf00      	nop
 8001d0c:	e000      	b.n	8001d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d0e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10d      	bne.n	8001d32 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 0118 	bic.w	r1, r3, #24
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff fdf4 	bl	8001934 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e314      	b.n	8002382 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a66      	ldr	r2, [pc, #408]	; (8001ef8 <HAL_DMA_Init+0x1b8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d04a      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a65      	ldr	r2, [pc, #404]	; (8001efc <HAL_DMA_Init+0x1bc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d045      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a63      	ldr	r2, [pc, #396]	; (8001f00 <HAL_DMA_Init+0x1c0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d040      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a62      	ldr	r2, [pc, #392]	; (8001f04 <HAL_DMA_Init+0x1c4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d03b      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a60      	ldr	r2, [pc, #384]	; (8001f08 <HAL_DMA_Init+0x1c8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d036      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a5f      	ldr	r2, [pc, #380]	; (8001f0c <HAL_DMA_Init+0x1cc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d031      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a5d      	ldr	r2, [pc, #372]	; (8001f10 <HAL_DMA_Init+0x1d0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d02c      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a5c      	ldr	r2, [pc, #368]	; (8001f14 <HAL_DMA_Init+0x1d4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d027      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a5a      	ldr	r2, [pc, #360]	; (8001f18 <HAL_DMA_Init+0x1d8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d022      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a59      	ldr	r2, [pc, #356]	; (8001f1c <HAL_DMA_Init+0x1dc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d01d      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_DMA_Init+0x1e0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d018      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a56      	ldr	r2, [pc, #344]	; (8001f24 <HAL_DMA_Init+0x1e4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d013      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a54      	ldr	r2, [pc, #336]	; (8001f28 <HAL_DMA_Init+0x1e8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00e      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a53      	ldr	r2, [pc, #332]	; (8001f2c <HAL_DMA_Init+0x1ec>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d009      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_DMA_Init+0x1f0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d004      	beq.n	8001df8 <HAL_DMA_Init+0xb8>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a50      	ldr	r2, [pc, #320]	; (8001f34 <HAL_DMA_Init+0x1f4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_DMA_Init+0xbc>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_DMA_Init+0xbe>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 813c 	beq.w	800207c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a37      	ldr	r2, [pc, #220]	; (8001ef8 <HAL_DMA_Init+0x1b8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d04a      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a36      	ldr	r2, [pc, #216]	; (8001efc <HAL_DMA_Init+0x1bc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d045      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a34      	ldr	r2, [pc, #208]	; (8001f00 <HAL_DMA_Init+0x1c0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d040      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a33      	ldr	r2, [pc, #204]	; (8001f04 <HAL_DMA_Init+0x1c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d03b      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <HAL_DMA_Init+0x1c8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d036      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a30      	ldr	r2, [pc, #192]	; (8001f0c <HAL_DMA_Init+0x1cc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d031      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <HAL_DMA_Init+0x1d0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d02c      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <HAL_DMA_Init+0x1d4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d027      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2b      	ldr	r2, [pc, #172]	; (8001f18 <HAL_DMA_Init+0x1d8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d022      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2a      	ldr	r2, [pc, #168]	; (8001f1c <HAL_DMA_Init+0x1dc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d01d      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <HAL_DMA_Init+0x1e0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d018      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <HAL_DMA_Init+0x1e4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a25      	ldr	r2, [pc, #148]	; (8001f28 <HAL_DMA_Init+0x1e8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00e      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <HAL_DMA_Init+0x1ec>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_DMA_Init+0x1f0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_DMA_Init+0x174>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <HAL_DMA_Init+0x1f4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d108      	bne.n	8001ec6 <HAL_DMA_Init+0x186>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e007      	b.n	8001ed6 <HAL_DMA_Init+0x196>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ed6:	e02f      	b.n	8001f38 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed8:	f7ff fd2c 	bl	8001934 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d928      	bls.n	8001f38 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2203      	movs	r2, #3
 8001ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e244      	b.n	8002382 <HAL_DMA_Init+0x642>
 8001ef8:	40020010 	.word	0x40020010
 8001efc:	40020028 	.word	0x40020028
 8001f00:	40020040 	.word	0x40020040
 8001f04:	40020058 	.word	0x40020058
 8001f08:	40020070 	.word	0x40020070
 8001f0c:	40020088 	.word	0x40020088
 8001f10:	400200a0 	.word	0x400200a0
 8001f14:	400200b8 	.word	0x400200b8
 8001f18:	40020410 	.word	0x40020410
 8001f1c:	40020428 	.word	0x40020428
 8001f20:	40020440 	.word	0x40020440
 8001f24:	40020458 	.word	0x40020458
 8001f28:	40020470 	.word	0x40020470
 8001f2c:	40020488 	.word	0x40020488
 8001f30:	400204a0 	.word	0x400204a0
 8001f34:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1c8      	bne.n	8001ed8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4b84      	ldr	r3, [pc, #528]	; (8002164 <HAL_DMA_Init+0x424>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f76:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d107      	bne.n	8001f9c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	4313      	orrs	r3, r2
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b28      	cmp	r3, #40	; 0x28
 8001fa2:	d903      	bls.n	8001fac <HAL_DMA_Init+0x26c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8001faa:	d91f      	bls.n	8001fec <HAL_DMA_Init+0x2ac>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b3e      	cmp	r3, #62	; 0x3e
 8001fb2:	d903      	bls.n	8001fbc <HAL_DMA_Init+0x27c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b42      	cmp	r3, #66	; 0x42
 8001fba:	d917      	bls.n	8001fec <HAL_DMA_Init+0x2ac>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b46      	cmp	r3, #70	; 0x46
 8001fc2:	d903      	bls.n	8001fcc <HAL_DMA_Init+0x28c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b48      	cmp	r3, #72	; 0x48
 8001fca:	d90f      	bls.n	8001fec <HAL_DMA_Init+0x2ac>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b4e      	cmp	r3, #78	; 0x4e
 8001fd2:	d903      	bls.n	8001fdc <HAL_DMA_Init+0x29c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b52      	cmp	r3, #82	; 0x52
 8001fda:	d907      	bls.n	8001fec <HAL_DMA_Init+0x2ac>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b73      	cmp	r3, #115	; 0x73
 8001fe2:	d905      	bls.n	8001ff0 <HAL_DMA_Init+0x2b0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b77      	cmp	r3, #119	; 0x77
 8001fea:	d801      	bhi.n	8001ff0 <HAL_DMA_Init+0x2b0>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_DMA_Init+0x2b2>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ffc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f023 0307 	bic.w	r3, r3, #7
 8002014:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	2b04      	cmp	r3, #4
 8002026:	d117      	bne.n	8002058 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00e      	beq.n	8002058 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f001 ff8e 	bl	8003f5c <DMA_CheckFifoParam>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2240      	movs	r2, #64	; 0x40
 800204a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e194      	b.n	8002382 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f001 fec9 	bl	8003df8 <DMA_CalcBaseAndBitshift>
 8002066:	4603      	mov	r3, r0
 8002068:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	223f      	movs	r2, #63	; 0x3f
 8002074:	409a      	lsls	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	e0ca      	b.n	8002212 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a39      	ldr	r2, [pc, #228]	; (8002168 <HAL_DMA_Init+0x428>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d022      	beq.n	80020cc <HAL_DMA_Init+0x38c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_DMA_Init+0x42c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d01d      	beq.n	80020cc <HAL_DMA_Init+0x38c>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a36      	ldr	r2, [pc, #216]	; (8002170 <HAL_DMA_Init+0x430>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d018      	beq.n	80020cc <HAL_DMA_Init+0x38c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a35      	ldr	r2, [pc, #212]	; (8002174 <HAL_DMA_Init+0x434>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d013      	beq.n	80020cc <HAL_DMA_Init+0x38c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a33      	ldr	r2, [pc, #204]	; (8002178 <HAL_DMA_Init+0x438>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00e      	beq.n	80020cc <HAL_DMA_Init+0x38c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a32      	ldr	r2, [pc, #200]	; (800217c <HAL_DMA_Init+0x43c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d009      	beq.n	80020cc <HAL_DMA_Init+0x38c>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a30      	ldr	r2, [pc, #192]	; (8002180 <HAL_DMA_Init+0x440>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <HAL_DMA_Init+0x38c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2f      	ldr	r2, [pc, #188]	; (8002184 <HAL_DMA_Init+0x444>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_DMA_Init+0x390>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_DMA_Init+0x392>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8094 	beq.w	8002200 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a22      	ldr	r2, [pc, #136]	; (8002168 <HAL_DMA_Init+0x428>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d021      	beq.n	8002126 <HAL_DMA_Init+0x3e6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a21      	ldr	r2, [pc, #132]	; (800216c <HAL_DMA_Init+0x42c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d01c      	beq.n	8002126 <HAL_DMA_Init+0x3e6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_DMA_Init+0x430>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d017      	beq.n	8002126 <HAL_DMA_Init+0x3e6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_DMA_Init+0x434>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d012      	beq.n	8002126 <HAL_DMA_Init+0x3e6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <HAL_DMA_Init+0x438>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_DMA_Init+0x3e6>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_DMA_Init+0x43c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d008      	beq.n	8002126 <HAL_DMA_Init+0x3e6>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_DMA_Init+0x440>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d003      	beq.n	8002126 <HAL_DMA_Init+0x3e6>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a18      	ldr	r2, [pc, #96]	; (8002184 <HAL_DMA_Init+0x444>)
 8002124:	4293      	cmp	r3, r2
 8002126:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_DMA_Init+0x448>)
 8002144:	4013      	ands	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b40      	cmp	r3, #64	; 0x40
 800214e:	d01d      	beq.n	800218c <HAL_DMA_Init+0x44c>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b80      	cmp	r3, #128	; 0x80
 8002156:	d102      	bne.n	800215e <HAL_DMA_Init+0x41e>
 8002158:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800215c:	e017      	b.n	800218e <HAL_DMA_Init+0x44e>
 800215e:	2300      	movs	r3, #0
 8002160:	e015      	b.n	800218e <HAL_DMA_Init+0x44e>
 8002162:	bf00      	nop
 8002164:	fe10803f 	.word	0xfe10803f
 8002168:	58025408 	.word	0x58025408
 800216c:	5802541c 	.word	0x5802541c
 8002170:	58025430 	.word	0x58025430
 8002174:	58025444 	.word	0x58025444
 8002178:	58025458 	.word	0x58025458
 800217c:	5802546c 	.word	0x5802546c
 8002180:	58025480 	.word	0x58025480
 8002184:	58025494 	.word	0x58025494
 8002188:	fffe000f 	.word	0xfffe000f
 800218c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800219c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b6e      	ldr	r3, [pc, #440]	; (800238c <HAL_DMA_Init+0x64c>)
 80021d4:	4413      	add	r3, r2
 80021d6:	4a6e      	ldr	r2, [pc, #440]	; (8002390 <HAL_DMA_Init+0x650>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	009a      	lsls	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f001 fe07 	bl	8003df8 <DMA_CalcBaseAndBitshift>
 80021ea:	4603      	mov	r3, r0
 80021ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2201      	movs	r2, #1
 80021f8:	409a      	lsls	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	e008      	b.n	8002212 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0b7      	b.n	8002382 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5f      	ldr	r2, [pc, #380]	; (8002394 <HAL_DMA_Init+0x654>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d072      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a5d      	ldr	r2, [pc, #372]	; (8002398 <HAL_DMA_Init+0x658>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d06d      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5c      	ldr	r2, [pc, #368]	; (800239c <HAL_DMA_Init+0x65c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d068      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a5a      	ldr	r2, [pc, #360]	; (80023a0 <HAL_DMA_Init+0x660>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d063      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a59      	ldr	r2, [pc, #356]	; (80023a4 <HAL_DMA_Init+0x664>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d05e      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a57      	ldr	r2, [pc, #348]	; (80023a8 <HAL_DMA_Init+0x668>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d059      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a56      	ldr	r2, [pc, #344]	; (80023ac <HAL_DMA_Init+0x66c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d054      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a54      	ldr	r2, [pc, #336]	; (80023b0 <HAL_DMA_Init+0x670>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d04f      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a53      	ldr	r2, [pc, #332]	; (80023b4 <HAL_DMA_Init+0x674>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d04a      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_DMA_Init+0x678>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d045      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a50      	ldr	r2, [pc, #320]	; (80023bc <HAL_DMA_Init+0x67c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d040      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a4e      	ldr	r2, [pc, #312]	; (80023c0 <HAL_DMA_Init+0x680>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d03b      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a4d      	ldr	r2, [pc, #308]	; (80023c4 <HAL_DMA_Init+0x684>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d036      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a4b      	ldr	r2, [pc, #300]	; (80023c8 <HAL_DMA_Init+0x688>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d031      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <HAL_DMA_Init+0x68c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d02c      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a48      	ldr	r2, [pc, #288]	; (80023d0 <HAL_DMA_Init+0x690>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d027      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a47      	ldr	r2, [pc, #284]	; (80023d4 <HAL_DMA_Init+0x694>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a45      	ldr	r2, [pc, #276]	; (80023d8 <HAL_DMA_Init+0x698>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01d      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a44      	ldr	r2, [pc, #272]	; (80023dc <HAL_DMA_Init+0x69c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d018      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a42      	ldr	r2, [pc, #264]	; (80023e0 <HAL_DMA_Init+0x6a0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a41      	ldr	r2, [pc, #260]	; (80023e4 <HAL_DMA_Init+0x6a4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a3f      	ldr	r2, [pc, #252]	; (80023e8 <HAL_DMA_Init+0x6a8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a3e      	ldr	r2, [pc, #248]	; (80023ec <HAL_DMA_Init+0x6ac>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_DMA_Init+0x5c2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a3c      	ldr	r2, [pc, #240]	; (80023f0 <HAL_DMA_Init+0x6b0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_DMA_Init+0x5c6>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_DMA_Init+0x5c8>
 8002306:	2300      	movs	r3, #0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d032      	beq.n	8002372 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f001 fea1 	bl	8004054 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b80      	cmp	r3, #128	; 0x80
 8002318:	d102      	bne.n	8002320 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002334:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_DMA_Init+0x620>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b08      	cmp	r3, #8
 8002344:	d80c      	bhi.n	8002360 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f001 ff1e 	bl	8004188 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	e008      	b.n	8002372 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	a7fdabf8 	.word	0xa7fdabf8
 8002390:	cccccccd 	.word	0xcccccccd
 8002394:	40020010 	.word	0x40020010
 8002398:	40020028 	.word	0x40020028
 800239c:	40020040 	.word	0x40020040
 80023a0:	40020058 	.word	0x40020058
 80023a4:	40020070 	.word	0x40020070
 80023a8:	40020088 	.word	0x40020088
 80023ac:	400200a0 	.word	0x400200a0
 80023b0:	400200b8 	.word	0x400200b8
 80023b4:	40020410 	.word	0x40020410
 80023b8:	40020428 	.word	0x40020428
 80023bc:	40020440 	.word	0x40020440
 80023c0:	40020458 	.word	0x40020458
 80023c4:	40020470 	.word	0x40020470
 80023c8:	40020488 	.word	0x40020488
 80023cc:	400204a0 	.word	0x400204a0
 80023d0:	400204b8 	.word	0x400204b8
 80023d4:	58025408 	.word	0x58025408
 80023d8:	5802541c 	.word	0x5802541c
 80023dc:	58025430 	.word	0x58025430
 80023e0:	58025444 	.word	0x58025444
 80023e4:	58025458 	.word	0x58025458
 80023e8:	5802546c 	.word	0x5802546c
 80023ec:	58025480 	.word	0x58025480
 80023f0:	58025494 	.word	0x58025494

080023f4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e1a8      	b.n	8002758 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a82      	ldr	r2, [pc, #520]	; (8002614 <HAL_DMA_DeInit+0x220>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d04a      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a80      	ldr	r2, [pc, #512]	; (8002618 <HAL_DMA_DeInit+0x224>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d045      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7f      	ldr	r2, [pc, #508]	; (800261c <HAL_DMA_DeInit+0x228>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d040      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7d      	ldr	r2, [pc, #500]	; (8002620 <HAL_DMA_DeInit+0x22c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d03b      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7c      	ldr	r2, [pc, #496]	; (8002624 <HAL_DMA_DeInit+0x230>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d036      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <HAL_DMA_DeInit+0x234>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d031      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a79      	ldr	r2, [pc, #484]	; (800262c <HAL_DMA_DeInit+0x238>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d02c      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a77      	ldr	r2, [pc, #476]	; (8002630 <HAL_DMA_DeInit+0x23c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d027      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a76      	ldr	r2, [pc, #472]	; (8002634 <HAL_DMA_DeInit+0x240>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a74      	ldr	r2, [pc, #464]	; (8002638 <HAL_DMA_DeInit+0x244>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01d      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a73      	ldr	r2, [pc, #460]	; (800263c <HAL_DMA_DeInit+0x248>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d018      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a71      	ldr	r2, [pc, #452]	; (8002640 <HAL_DMA_DeInit+0x24c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a70      	ldr	r2, [pc, #448]	; (8002644 <HAL_DMA_DeInit+0x250>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_DMA_DeInit+0x254>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6d      	ldr	r2, [pc, #436]	; (800264c <HAL_DMA_DeInit+0x258>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_DMA_DeInit+0xb2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6b      	ldr	r2, [pc, #428]	; (8002650 <HAL_DMA_DeInit+0x25c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d108      	bne.n	80024b8 <HAL_DMA_DeInit+0xc4>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0201 	bic.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e007      	b.n	80024c8 <HAL_DMA_DeInit+0xd4>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a51      	ldr	r2, [pc, #324]	; (8002614 <HAL_DMA_DeInit+0x220>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d04a      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a50      	ldr	r2, [pc, #320]	; (8002618 <HAL_DMA_DeInit+0x224>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d045      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a4e      	ldr	r2, [pc, #312]	; (800261c <HAL_DMA_DeInit+0x228>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d040      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a4d      	ldr	r2, [pc, #308]	; (8002620 <HAL_DMA_DeInit+0x22c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d03b      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <HAL_DMA_DeInit+0x230>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d036      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_DMA_DeInit+0x234>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d031      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a48      	ldr	r2, [pc, #288]	; (800262c <HAL_DMA_DeInit+0x238>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02c      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a47      	ldr	r2, [pc, #284]	; (8002630 <HAL_DMA_DeInit+0x23c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d027      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a45      	ldr	r2, [pc, #276]	; (8002634 <HAL_DMA_DeInit+0x240>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d022      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a44      	ldr	r2, [pc, #272]	; (8002638 <HAL_DMA_DeInit+0x244>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d01d      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a42      	ldr	r2, [pc, #264]	; (800263c <HAL_DMA_DeInit+0x248>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d018      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a41      	ldr	r2, [pc, #260]	; (8002640 <HAL_DMA_DeInit+0x24c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a3f      	ldr	r2, [pc, #252]	; (8002644 <HAL_DMA_DeInit+0x250>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00e      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a3e      	ldr	r2, [pc, #248]	; (8002648 <HAL_DMA_DeInit+0x254>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3c      	ldr	r2, [pc, #240]	; (800264c <HAL_DMA_DeInit+0x258>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_DMA_DeInit+0x174>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <HAL_DMA_DeInit+0x25c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d101      	bne.n	800256c <HAL_DMA_DeInit+0x178>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_DMA_DeInit+0x17a>
 800256c:	2300      	movs	r3, #0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d025      	beq.n	80025be <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2221      	movs	r2, #33	; 0x21
 80025a0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f001 fc28 	bl	8003df8 <DMA_CalcBaseAndBitshift>
 80025a8:	4603      	mov	r3, r0
 80025aa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	223f      	movs	r2, #63	; 0x3f
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	e081      	b.n	80026c2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a24      	ldr	r2, [pc, #144]	; (8002654 <HAL_DMA_DeInit+0x260>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d022      	beq.n	800260e <HAL_DMA_DeInit+0x21a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a22      	ldr	r2, [pc, #136]	; (8002658 <HAL_DMA_DeInit+0x264>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01d      	beq.n	800260e <HAL_DMA_DeInit+0x21a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a21      	ldr	r2, [pc, #132]	; (800265c <HAL_DMA_DeInit+0x268>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d018      	beq.n	800260e <HAL_DMA_DeInit+0x21a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1f      	ldr	r2, [pc, #124]	; (8002660 <HAL_DMA_DeInit+0x26c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_DMA_DeInit+0x21a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <HAL_DMA_DeInit+0x270>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00e      	beq.n	800260e <HAL_DMA_DeInit+0x21a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_DMA_DeInit+0x274>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d009      	beq.n	800260e <HAL_DMA_DeInit+0x21a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1b      	ldr	r2, [pc, #108]	; (800266c <HAL_DMA_DeInit+0x278>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <HAL_DMA_DeInit+0x21a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a19      	ldr	r2, [pc, #100]	; (8002670 <HAL_DMA_DeInit+0x27c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d132      	bne.n	8002674 <HAL_DMA_DeInit+0x280>
 800260e:	2301      	movs	r3, #1
 8002610:	e031      	b.n	8002676 <HAL_DMA_DeInit+0x282>
 8002612:	bf00      	nop
 8002614:	40020010 	.word	0x40020010
 8002618:	40020028 	.word	0x40020028
 800261c:	40020040 	.word	0x40020040
 8002620:	40020058 	.word	0x40020058
 8002624:	40020070 	.word	0x40020070
 8002628:	40020088 	.word	0x40020088
 800262c:	400200a0 	.word	0x400200a0
 8002630:	400200b8 	.word	0x400200b8
 8002634:	40020410 	.word	0x40020410
 8002638:	40020428 	.word	0x40020428
 800263c:	40020440 	.word	0x40020440
 8002640:	40020458 	.word	0x40020458
 8002644:	40020470 	.word	0x40020470
 8002648:	40020488 	.word	0x40020488
 800264c:	400204a0 	.word	0x400204a0
 8002650:	400204b8 	.word	0x400204b8
 8002654:	58025408 	.word	0x58025408
 8002658:	5802541c 	.word	0x5802541c
 800265c:	58025430 	.word	0x58025430
 8002660:	58025444 	.word	0x58025444
 8002664:	58025458 	.word	0x58025458
 8002668:	5802546c 	.word	0x5802546c
 800266c:	58025480 	.word	0x58025480
 8002670:	58025494 	.word	0x58025494
 8002674:	2300      	movs	r3, #0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d021      	beq.n	80026be <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f001 fba8 	bl	8003df8 <DMA_CalcBaseAndBitshift>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2201      	movs	r2, #1
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	e001      	b.n	80026c2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e04a      	b.n	8002758 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f001 fcc6 	bl	8004054 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026e0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00f      	beq.n	800270a <HAL_DMA_DeInit+0x316>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d80b      	bhi.n	800270a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f001 fd48 	bl	8004188 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002708:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e226      	b.n	8002bca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_DMA_Start_IT+0x2a>
 8002786:	2302      	movs	r3, #2
 8002788:	e21f      	b.n	8002bca <HAL_DMA_Start_IT+0x46a>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	f040 820a 	bne.w	8002bb4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a68      	ldr	r2, [pc, #416]	; (8002954 <HAL_DMA_Start_IT+0x1f4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d04a      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a66      	ldr	r2, [pc, #408]	; (8002958 <HAL_DMA_Start_IT+0x1f8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d045      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a65      	ldr	r2, [pc, #404]	; (800295c <HAL_DMA_Start_IT+0x1fc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d040      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a63      	ldr	r2, [pc, #396]	; (8002960 <HAL_DMA_Start_IT+0x200>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d03b      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a62      	ldr	r2, [pc, #392]	; (8002964 <HAL_DMA_Start_IT+0x204>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d036      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a60      	ldr	r2, [pc, #384]	; (8002968 <HAL_DMA_Start_IT+0x208>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d031      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5f      	ldr	r2, [pc, #380]	; (800296c <HAL_DMA_Start_IT+0x20c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d02c      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a5d      	ldr	r2, [pc, #372]	; (8002970 <HAL_DMA_Start_IT+0x210>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d027      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5c      	ldr	r2, [pc, #368]	; (8002974 <HAL_DMA_Start_IT+0x214>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d022      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a5a      	ldr	r2, [pc, #360]	; (8002978 <HAL_DMA_Start_IT+0x218>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01d      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a59      	ldr	r2, [pc, #356]	; (800297c <HAL_DMA_Start_IT+0x21c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d018      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a57      	ldr	r2, [pc, #348]	; (8002980 <HAL_DMA_Start_IT+0x220>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a56      	ldr	r2, [pc, #344]	; (8002984 <HAL_DMA_Start_IT+0x224>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a54      	ldr	r2, [pc, #336]	; (8002988 <HAL_DMA_Start_IT+0x228>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a53      	ldr	r2, [pc, #332]	; (800298c <HAL_DMA_Start_IT+0x22c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_DMA_Start_IT+0xee>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a51      	ldr	r2, [pc, #324]	; (8002990 <HAL_DMA_Start_IT+0x230>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d108      	bne.n	8002860 <HAL_DMA_Start_IT+0x100>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e007      	b.n	8002870 <HAL_DMA_Start_IT+0x110>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f001 f912 	bl	8003aa0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a34      	ldr	r2, [pc, #208]	; (8002954 <HAL_DMA_Start_IT+0x1f4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d04a      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a33      	ldr	r2, [pc, #204]	; (8002958 <HAL_DMA_Start_IT+0x1f8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d045      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a31      	ldr	r2, [pc, #196]	; (800295c <HAL_DMA_Start_IT+0x1fc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d040      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a30      	ldr	r2, [pc, #192]	; (8002960 <HAL_DMA_Start_IT+0x200>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d03b      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <HAL_DMA_Start_IT+0x204>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d036      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <HAL_DMA_Start_IT+0x208>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d031      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_DMA_Start_IT+0x20c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d02c      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <HAL_DMA_Start_IT+0x210>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d027      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <HAL_DMA_Start_IT+0x214>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d022      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_DMA_Start_IT+0x218>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d01d      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a25      	ldr	r2, [pc, #148]	; (800297c <HAL_DMA_Start_IT+0x21c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d018      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a24      	ldr	r2, [pc, #144]	; (8002980 <HAL_DMA_Start_IT+0x220>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a22      	ldr	r2, [pc, #136]	; (8002984 <HAL_DMA_Start_IT+0x224>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00e      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a21      	ldr	r2, [pc, #132]	; (8002988 <HAL_DMA_Start_IT+0x228>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d009      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_DMA_Start_IT+0x22c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_DMA_Start_IT+0x1bc>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_DMA_Start_IT+0x230>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d101      	bne.n	8002920 <HAL_DMA_Start_IT+0x1c0>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <HAL_DMA_Start_IT+0x1c2>
 8002920:	2300      	movs	r3, #0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d036      	beq.n	8002994 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 021e 	bic.w	r2, r3, #30
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0216 	orr.w	r2, r2, #22
 8002938:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d03e      	beq.n	80029c0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0208 	orr.w	r2, r2, #8
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	e035      	b.n	80029c0 <HAL_DMA_Start_IT+0x260>
 8002954:	40020010 	.word	0x40020010
 8002958:	40020028 	.word	0x40020028
 800295c:	40020040 	.word	0x40020040
 8002960:	40020058 	.word	0x40020058
 8002964:	40020070 	.word	0x40020070
 8002968:	40020088 	.word	0x40020088
 800296c:	400200a0 	.word	0x400200a0
 8002970:	400200b8 	.word	0x400200b8
 8002974:	40020410 	.word	0x40020410
 8002978:	40020428 	.word	0x40020428
 800297c:	40020440 	.word	0x40020440
 8002980:	40020458 	.word	0x40020458
 8002984:	40020470 	.word	0x40020470
 8002988:	40020488 	.word	0x40020488
 800298c:	400204a0 	.word	0x400204a0
 8002990:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 020e 	bic.w	r2, r3, #14
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 020a 	orr.w	r2, r2, #10
 80029a6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0204 	orr.w	r2, r2, #4
 80029be:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a83      	ldr	r2, [pc, #524]	; (8002bd4 <HAL_DMA_Start_IT+0x474>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d072      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a82      	ldr	r2, [pc, #520]	; (8002bd8 <HAL_DMA_Start_IT+0x478>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d06d      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a80      	ldr	r2, [pc, #512]	; (8002bdc <HAL_DMA_Start_IT+0x47c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d068      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7f      	ldr	r2, [pc, #508]	; (8002be0 <HAL_DMA_Start_IT+0x480>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d063      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a7d      	ldr	r2, [pc, #500]	; (8002be4 <HAL_DMA_Start_IT+0x484>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d05e      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a7c      	ldr	r2, [pc, #496]	; (8002be8 <HAL_DMA_Start_IT+0x488>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d059      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a7a      	ldr	r2, [pc, #488]	; (8002bec <HAL_DMA_Start_IT+0x48c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d054      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a79      	ldr	r2, [pc, #484]	; (8002bf0 <HAL_DMA_Start_IT+0x490>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d04f      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a77      	ldr	r2, [pc, #476]	; (8002bf4 <HAL_DMA_Start_IT+0x494>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d04a      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a76      	ldr	r2, [pc, #472]	; (8002bf8 <HAL_DMA_Start_IT+0x498>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d045      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a74      	ldr	r2, [pc, #464]	; (8002bfc <HAL_DMA_Start_IT+0x49c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d040      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a73      	ldr	r2, [pc, #460]	; (8002c00 <HAL_DMA_Start_IT+0x4a0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d03b      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a71      	ldr	r2, [pc, #452]	; (8002c04 <HAL_DMA_Start_IT+0x4a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d036      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a70      	ldr	r2, [pc, #448]	; (8002c08 <HAL_DMA_Start_IT+0x4a8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d031      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a6e      	ldr	r2, [pc, #440]	; (8002c0c <HAL_DMA_Start_IT+0x4ac>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d02c      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a6d      	ldr	r2, [pc, #436]	; (8002c10 <HAL_DMA_Start_IT+0x4b0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d027      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a6b      	ldr	r2, [pc, #428]	; (8002c14 <HAL_DMA_Start_IT+0x4b4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d022      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a6a      	ldr	r2, [pc, #424]	; (8002c18 <HAL_DMA_Start_IT+0x4b8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d01d      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a68      	ldr	r2, [pc, #416]	; (8002c1c <HAL_DMA_Start_IT+0x4bc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d018      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a67      	ldr	r2, [pc, #412]	; (8002c20 <HAL_DMA_Start_IT+0x4c0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a65      	ldr	r2, [pc, #404]	; (8002c24 <HAL_DMA_Start_IT+0x4c4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00e      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a64      	ldr	r2, [pc, #400]	; (8002c28 <HAL_DMA_Start_IT+0x4c8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d009      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a62      	ldr	r2, [pc, #392]	; (8002c2c <HAL_DMA_Start_IT+0x4cc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x350>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a61      	ldr	r2, [pc, #388]	; (8002c30 <HAL_DMA_Start_IT+0x4d0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_DMA_Start_IT+0x354>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_DMA_Start_IT+0x356>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01a      	beq.n	8002af0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <HAL_DMA_Start_IT+0x474>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d04a      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a36      	ldr	r2, [pc, #216]	; (8002bd8 <HAL_DMA_Start_IT+0x478>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d045      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <HAL_DMA_Start_IT+0x47c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d040      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a33      	ldr	r2, [pc, #204]	; (8002be0 <HAL_DMA_Start_IT+0x480>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d03b      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a31      	ldr	r2, [pc, #196]	; (8002be4 <HAL_DMA_Start_IT+0x484>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d036      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a30      	ldr	r2, [pc, #192]	; (8002be8 <HAL_DMA_Start_IT+0x488>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d031      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a2e      	ldr	r2, [pc, #184]	; (8002bec <HAL_DMA_Start_IT+0x48c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d02c      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a2d      	ldr	r2, [pc, #180]	; (8002bf0 <HAL_DMA_Start_IT+0x490>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d027      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <HAL_DMA_Start_IT+0x494>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d022      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <HAL_DMA_Start_IT+0x498>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d01d      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <HAL_DMA_Start_IT+0x49c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d018      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a27      	ldr	r2, [pc, #156]	; (8002c00 <HAL_DMA_Start_IT+0x4a0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d013      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <HAL_DMA_Start_IT+0x4a4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00e      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <HAL_DMA_Start_IT+0x4a8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d009      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_DMA_Start_IT+0x4ac>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d004      	beq.n	8002b90 <HAL_DMA_Start_IT+0x430>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <HAL_DMA_Start_IT+0x4b0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d108      	bne.n	8002ba2 <HAL_DMA_Start_IT+0x442>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e012      	b.n	8002bc8 <HAL_DMA_Start_IT+0x468>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e009      	b.n	8002bc8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40020010 	.word	0x40020010
 8002bd8:	40020028 	.word	0x40020028
 8002bdc:	40020040 	.word	0x40020040
 8002be0:	40020058 	.word	0x40020058
 8002be4:	40020070 	.word	0x40020070
 8002be8:	40020088 	.word	0x40020088
 8002bec:	400200a0 	.word	0x400200a0
 8002bf0:	400200b8 	.word	0x400200b8
 8002bf4:	40020410 	.word	0x40020410
 8002bf8:	40020428 	.word	0x40020428
 8002bfc:	40020440 	.word	0x40020440
 8002c00:	40020458 	.word	0x40020458
 8002c04:	40020470 	.word	0x40020470
 8002c08:	40020488 	.word	0x40020488
 8002c0c:	400204a0 	.word	0x400204a0
 8002c10:	400204b8 	.word	0x400204b8
 8002c14:	58025408 	.word	0x58025408
 8002c18:	5802541c 	.word	0x5802541c
 8002c1c:	58025430 	.word	0x58025430
 8002c20:	58025444 	.word	0x58025444
 8002c24:	58025458 	.word	0x58025458
 8002c28:	5802546c 	.word	0x5802546c
 8002c2c:	58025480 	.word	0x58025480
 8002c30:	58025494 	.word	0x58025494

08002c34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c40:	4b67      	ldr	r3, [pc, #412]	; (8002de0 <HAL_DMA_IRQHandler+0x1ac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a67      	ldr	r2, [pc, #412]	; (8002de4 <HAL_DMA_IRQHandler+0x1b0>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0a9b      	lsrs	r3, r3, #10
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a5f      	ldr	r2, [pc, #380]	; (8002de8 <HAL_DMA_IRQHandler+0x1b4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d04a      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a5d      	ldr	r2, [pc, #372]	; (8002dec <HAL_DMA_IRQHandler+0x1b8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d045      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a5c      	ldr	r2, [pc, #368]	; (8002df0 <HAL_DMA_IRQHandler+0x1bc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d040      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5a      	ldr	r2, [pc, #360]	; (8002df4 <HAL_DMA_IRQHandler+0x1c0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d03b      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a59      	ldr	r2, [pc, #356]	; (8002df8 <HAL_DMA_IRQHandler+0x1c4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d036      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a57      	ldr	r2, [pc, #348]	; (8002dfc <HAL_DMA_IRQHandler+0x1c8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d031      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a56      	ldr	r2, [pc, #344]	; (8002e00 <HAL_DMA_IRQHandler+0x1cc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d02c      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a54      	ldr	r2, [pc, #336]	; (8002e04 <HAL_DMA_IRQHandler+0x1d0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d027      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a53      	ldr	r2, [pc, #332]	; (8002e08 <HAL_DMA_IRQHandler+0x1d4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d022      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a51      	ldr	r2, [pc, #324]	; (8002e0c <HAL_DMA_IRQHandler+0x1d8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01d      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a50      	ldr	r2, [pc, #320]	; (8002e10 <HAL_DMA_IRQHandler+0x1dc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d018      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a4e      	ldr	r2, [pc, #312]	; (8002e14 <HAL_DMA_IRQHandler+0x1e0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a4d      	ldr	r2, [pc, #308]	; (8002e18 <HAL_DMA_IRQHandler+0x1e4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00e      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a4b      	ldr	r2, [pc, #300]	; (8002e1c <HAL_DMA_IRQHandler+0x1e8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a4a      	ldr	r2, [pc, #296]	; (8002e20 <HAL_DMA_IRQHandler+0x1ec>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xd2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <HAL_DMA_IRQHandler+0x1f0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <HAL_DMA_IRQHandler+0xd6>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_DMA_IRQHandler+0xd8>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 842b 	beq.w	8003568 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80a2 	beq.w	8002e6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2e      	ldr	r2, [pc, #184]	; (8002de8 <HAL_DMA_IRQHandler+0x1b4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d04a      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2d      	ldr	r2, [pc, #180]	; (8002dec <HAL_DMA_IRQHandler+0x1b8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d045      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <HAL_DMA_IRQHandler+0x1bc>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d040      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <HAL_DMA_IRQHandler+0x1c0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d03b      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <HAL_DMA_IRQHandler+0x1c4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d036      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <HAL_DMA_IRQHandler+0x1c8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d031      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <HAL_DMA_IRQHandler+0x1cc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02c      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <HAL_DMA_IRQHandler+0x1d0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d027      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_DMA_IRQHandler+0x1d4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d022      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a21      	ldr	r2, [pc, #132]	; (8002e0c <HAL_DMA_IRQHandler+0x1d8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d01d      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <HAL_DMA_IRQHandler+0x1dc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d018      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <HAL_DMA_IRQHandler+0x1e0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <HAL_DMA_IRQHandler+0x1e4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00e      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1b      	ldr	r2, [pc, #108]	; (8002e1c <HAL_DMA_IRQHandler+0x1e8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <HAL_DMA_IRQHandler+0x1ec>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x194>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a18      	ldr	r2, [pc, #96]	; (8002e24 <HAL_DMA_IRQHandler+0x1f0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d12f      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x1f4>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	e02e      	b.n	8002e3c <HAL_DMA_IRQHandler+0x208>
 8002dde:	bf00      	nop
 8002de0:	24000414 	.word	0x24000414
 8002de4:	1b4e81b5 	.word	0x1b4e81b5
 8002de8:	40020010 	.word	0x40020010
 8002dec:	40020028 	.word	0x40020028
 8002df0:	40020040 	.word	0x40020040
 8002df4:	40020058 	.word	0x40020058
 8002df8:	40020070 	.word	0x40020070
 8002dfc:	40020088 	.word	0x40020088
 8002e00:	400200a0 	.word	0x400200a0
 8002e04:	400200b8 	.word	0x400200b8
 8002e08:	40020410 	.word	0x40020410
 8002e0c:	40020428 	.word	0x40020428
 8002e10:	40020440 	.word	0x40020440
 8002e14:	40020458 	.word	0x40020458
 8002e18:	40020470 	.word	0x40020470
 8002e1c:	40020488 	.word	0x40020488
 8002e20:	400204a0 	.word	0x400204a0
 8002e24:	400204b8 	.word	0x400204b8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d015      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0204 	bic.w	r2, r2, #4
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2208      	movs	r2, #8
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d06e      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a69      	ldr	r2, [pc, #420]	; (800302c <HAL_DMA_IRQHandler+0x3f8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d04a      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a67      	ldr	r2, [pc, #412]	; (8003030 <HAL_DMA_IRQHandler+0x3fc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d045      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a66      	ldr	r2, [pc, #408]	; (8003034 <HAL_DMA_IRQHandler+0x400>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d040      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a64      	ldr	r2, [pc, #400]	; (8003038 <HAL_DMA_IRQHandler+0x404>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d03b      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a63      	ldr	r2, [pc, #396]	; (800303c <HAL_DMA_IRQHandler+0x408>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d036      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a61      	ldr	r2, [pc, #388]	; (8003040 <HAL_DMA_IRQHandler+0x40c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d031      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a60      	ldr	r2, [pc, #384]	; (8003044 <HAL_DMA_IRQHandler+0x410>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d02c      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a5e      	ldr	r2, [pc, #376]	; (8003048 <HAL_DMA_IRQHandler+0x414>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d027      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a5d      	ldr	r2, [pc, #372]	; (800304c <HAL_DMA_IRQHandler+0x418>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d022      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5b      	ldr	r2, [pc, #364]	; (8003050 <HAL_DMA_IRQHandler+0x41c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01d      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a5a      	ldr	r2, [pc, #360]	; (8003054 <HAL_DMA_IRQHandler+0x420>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d018      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a58      	ldr	r2, [pc, #352]	; (8003058 <HAL_DMA_IRQHandler+0x424>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a57      	ldr	r2, [pc, #348]	; (800305c <HAL_DMA_IRQHandler+0x428>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00e      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a55      	ldr	r2, [pc, #340]	; (8003060 <HAL_DMA_IRQHandler+0x42c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d009      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a54      	ldr	r2, [pc, #336]	; (8003064 <HAL_DMA_IRQHandler+0x430>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d004      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x2ee>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	; (8003068 <HAL_DMA_IRQHandler+0x434>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10a      	bne.n	8002f38 <HAL_DMA_IRQHandler+0x304>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e003      	b.n	8002f40 <HAL_DMA_IRQHandler+0x30c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	f043 0202 	orr.w	r2, r3, #2
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	2204      	movs	r2, #4
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 808f 	beq.w	8003094 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2c      	ldr	r2, [pc, #176]	; (800302c <HAL_DMA_IRQHandler+0x3f8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d04a      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2a      	ldr	r2, [pc, #168]	; (8003030 <HAL_DMA_IRQHandler+0x3fc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d045      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a29      	ldr	r2, [pc, #164]	; (8003034 <HAL_DMA_IRQHandler+0x400>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d040      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a27      	ldr	r2, [pc, #156]	; (8003038 <HAL_DMA_IRQHandler+0x404>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d03b      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a26      	ldr	r2, [pc, #152]	; (800303c <HAL_DMA_IRQHandler+0x408>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d036      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a24      	ldr	r2, [pc, #144]	; (8003040 <HAL_DMA_IRQHandler+0x40c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d031      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a23      	ldr	r2, [pc, #140]	; (8003044 <HAL_DMA_IRQHandler+0x410>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d02c      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a21      	ldr	r2, [pc, #132]	; (8003048 <HAL_DMA_IRQHandler+0x414>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d027      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a20      	ldr	r2, [pc, #128]	; (800304c <HAL_DMA_IRQHandler+0x418>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d022      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <HAL_DMA_IRQHandler+0x41c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01d      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_DMA_IRQHandler+0x420>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d018      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <HAL_DMA_IRQHandler+0x424>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1a      	ldr	r2, [pc, #104]	; (800305c <HAL_DMA_IRQHandler+0x428>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00e      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a18      	ldr	r2, [pc, #96]	; (8003060 <HAL_DMA_IRQHandler+0x42c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a17      	ldr	r2, [pc, #92]	; (8003064 <HAL_DMA_IRQHandler+0x430>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3e2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <HAL_DMA_IRQHandler+0x434>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d12a      	bne.n	800306c <HAL_DMA_IRQHandler+0x438>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e023      	b.n	8003074 <HAL_DMA_IRQHandler+0x440>
 800302c:	40020010 	.word	0x40020010
 8003030:	40020028 	.word	0x40020028
 8003034:	40020040 	.word	0x40020040
 8003038:	40020058 	.word	0x40020058
 800303c:	40020070 	.word	0x40020070
 8003040:	40020088 	.word	0x40020088
 8003044:	400200a0 	.word	0x400200a0
 8003048:	400200b8 	.word	0x400200b8
 800304c:	40020410 	.word	0x40020410
 8003050:	40020428 	.word	0x40020428
 8003054:	40020440 	.word	0x40020440
 8003058:	40020458 	.word	0x40020458
 800305c:	40020470 	.word	0x40020470
 8003060:	40020488 	.word	0x40020488
 8003064:	400204a0 	.word	0x400204a0
 8003068:	400204b8 	.word	0x400204b8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2204      	movs	r2, #4
 8003082:	409a      	lsls	r2, r3
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	f043 0204 	orr.w	r2, r3, #4
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	2210      	movs	r2, #16
 800309e:	409a      	lsls	r2, r3
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a6 	beq.w	80031f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a85      	ldr	r2, [pc, #532]	; (80032c4 <HAL_DMA_IRQHandler+0x690>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d04a      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a83      	ldr	r2, [pc, #524]	; (80032c8 <HAL_DMA_IRQHandler+0x694>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d045      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a82      	ldr	r2, [pc, #520]	; (80032cc <HAL_DMA_IRQHandler+0x698>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d040      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a80      	ldr	r2, [pc, #512]	; (80032d0 <HAL_DMA_IRQHandler+0x69c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d03b      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7f      	ldr	r2, [pc, #508]	; (80032d4 <HAL_DMA_IRQHandler+0x6a0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d036      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a7d      	ldr	r2, [pc, #500]	; (80032d8 <HAL_DMA_IRQHandler+0x6a4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d031      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7c      	ldr	r2, [pc, #496]	; (80032dc <HAL_DMA_IRQHandler+0x6a8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d02c      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a7a      	ldr	r2, [pc, #488]	; (80032e0 <HAL_DMA_IRQHandler+0x6ac>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d027      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a79      	ldr	r2, [pc, #484]	; (80032e4 <HAL_DMA_IRQHandler+0x6b0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a77      	ldr	r2, [pc, #476]	; (80032e8 <HAL_DMA_IRQHandler+0x6b4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01d      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a76      	ldr	r2, [pc, #472]	; (80032ec <HAL_DMA_IRQHandler+0x6b8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a74      	ldr	r2, [pc, #464]	; (80032f0 <HAL_DMA_IRQHandler+0x6bc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a73      	ldr	r2, [pc, #460]	; (80032f4 <HAL_DMA_IRQHandler+0x6c0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a71      	ldr	r2, [pc, #452]	; (80032f8 <HAL_DMA_IRQHandler+0x6c4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a70      	ldr	r2, [pc, #448]	; (80032fc <HAL_DMA_IRQHandler+0x6c8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_DMA_IRQHandler+0x516>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <HAL_DMA_IRQHandler+0x6cc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10a      	bne.n	8003160 <HAL_DMA_IRQHandler+0x52c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e009      	b.n	8003174 <HAL_DMA_IRQHandler+0x540>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d03e      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2210      	movs	r2, #16
 8003182:	409a      	lsls	r2, r3
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d018      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d108      	bne.n	80031b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d024      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
 80031b4:	e01f      	b.n	80031f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01b      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
 80031c6:	e016      	b.n	80031f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d107      	bne.n	80031e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0208 	bic.w	r2, r2, #8
 80031e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2220      	movs	r2, #32
 8003200:	409a      	lsls	r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8110 	beq.w	800342c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2c      	ldr	r2, [pc, #176]	; (80032c4 <HAL_DMA_IRQHandler+0x690>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d04a      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <HAL_DMA_IRQHandler+0x694>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d045      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a29      	ldr	r2, [pc, #164]	; (80032cc <HAL_DMA_IRQHandler+0x698>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d040      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <HAL_DMA_IRQHandler+0x69c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d03b      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <HAL_DMA_IRQHandler+0x6a0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d036      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <HAL_DMA_IRQHandler+0x6a4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d031      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a23      	ldr	r2, [pc, #140]	; (80032dc <HAL_DMA_IRQHandler+0x6a8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02c      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <HAL_DMA_IRQHandler+0x6ac>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d027      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <HAL_DMA_IRQHandler+0x6b0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d022      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <HAL_DMA_IRQHandler+0x6b4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d01d      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_DMA_IRQHandler+0x6b8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d018      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_DMA_IRQHandler+0x6bc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <HAL_DMA_IRQHandler+0x6c0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00e      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <HAL_DMA_IRQHandler+0x6c4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d009      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a17      	ldr	r2, [pc, #92]	; (80032fc <HAL_DMA_IRQHandler+0x6c8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d004      	beq.n	80032ac <HAL_DMA_IRQHandler+0x678>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <HAL_DMA_IRQHandler+0x6cc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d12b      	bne.n	8003304 <HAL_DMA_IRQHandler+0x6d0>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e02a      	b.n	8003318 <HAL_DMA_IRQHandler+0x6e4>
 80032c2:	bf00      	nop
 80032c4:	40020010 	.word	0x40020010
 80032c8:	40020028 	.word	0x40020028
 80032cc:	40020040 	.word	0x40020040
 80032d0:	40020058 	.word	0x40020058
 80032d4:	40020070 	.word	0x40020070
 80032d8:	40020088 	.word	0x40020088
 80032dc:	400200a0 	.word	0x400200a0
 80032e0:	400200b8 	.word	0x400200b8
 80032e4:	40020410 	.word	0x40020410
 80032e8:	40020428 	.word	0x40020428
 80032ec:	40020440 	.word	0x40020440
 80032f0:	40020458 	.word	0x40020458
 80032f4:	40020470 	.word	0x40020470
 80032f8:	40020488 	.word	0x40020488
 80032fc:	400204a0 	.word	0x400204a0
 8003300:	400204b8 	.word	0x400204b8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8087 	beq.w	800342c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2220      	movs	r2, #32
 8003328:	409a      	lsls	r2, r3
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b04      	cmp	r3, #4
 8003338:	d139      	bne.n	80033ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0216 	bic.w	r2, r2, #22
 8003348:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003358:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <HAL_DMA_IRQHandler+0x736>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0208 	bic.w	r2, r2, #8
 8003378:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	223f      	movs	r2, #63	; 0x3f
 8003384:	409a      	lsls	r2, r3
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 834a 	beq.w	8003a38 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
          }
          return;
 80033ac:	e344      	b.n	8003a38 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d018      	beq.n	80033ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d108      	bne.n	80033dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d02c      	beq.n	800342c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	4798      	blx	r3
 80033da:	e027      	b.n	800342c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d023      	beq.n	800342c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
 80033ec:	e01e      	b.n	800342c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10f      	bne.n	800341c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0210 	bic.w	r2, r2, #16
 800340a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8306 	beq.w	8003a42 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8088 	beq.w	8003554 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2204      	movs	r2, #4
 8003448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a7a      	ldr	r2, [pc, #488]	; (800363c <HAL_DMA_IRQHandler+0xa08>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d04a      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a79      	ldr	r2, [pc, #484]	; (8003640 <HAL_DMA_IRQHandler+0xa0c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d045      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a77      	ldr	r2, [pc, #476]	; (8003644 <HAL_DMA_IRQHandler+0xa10>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d040      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a76      	ldr	r2, [pc, #472]	; (8003648 <HAL_DMA_IRQHandler+0xa14>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d03b      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a74      	ldr	r2, [pc, #464]	; (800364c <HAL_DMA_IRQHandler+0xa18>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d036      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a73      	ldr	r2, [pc, #460]	; (8003650 <HAL_DMA_IRQHandler+0xa1c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d031      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a71      	ldr	r2, [pc, #452]	; (8003654 <HAL_DMA_IRQHandler+0xa20>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d02c      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a70      	ldr	r2, [pc, #448]	; (8003658 <HAL_DMA_IRQHandler+0xa24>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d027      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6e      	ldr	r2, [pc, #440]	; (800365c <HAL_DMA_IRQHandler+0xa28>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d022      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6d      	ldr	r2, [pc, #436]	; (8003660 <HAL_DMA_IRQHandler+0xa2c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d01d      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a6b      	ldr	r2, [pc, #428]	; (8003664 <HAL_DMA_IRQHandler+0xa30>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d018      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6a      	ldr	r2, [pc, #424]	; (8003668 <HAL_DMA_IRQHandler+0xa34>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d013      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a68      	ldr	r2, [pc, #416]	; (800366c <HAL_DMA_IRQHandler+0xa38>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00e      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a67      	ldr	r2, [pc, #412]	; (8003670 <HAL_DMA_IRQHandler+0xa3c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d009      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a65      	ldr	r2, [pc, #404]	; (8003674 <HAL_DMA_IRQHandler+0xa40>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_DMA_IRQHandler+0x8b8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a64      	ldr	r2, [pc, #400]	; (8003678 <HAL_DMA_IRQHandler+0xa44>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d108      	bne.n	80034fe <HAL_DMA_IRQHandler+0x8ca>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e007      	b.n	800350e <HAL_DMA_IRQHandler+0x8da>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3301      	adds	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	429a      	cmp	r2, r3
 8003518:	d307      	bcc.n	800352a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f2      	bne.n	800350e <HAL_DMA_IRQHandler+0x8da>
 8003528:	e000      	b.n	800352c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800352a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d004      	beq.n	8003544 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2203      	movs	r2, #3
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003542:	e003      	b.n	800354c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8272 	beq.w	8003a42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
 8003566:	e26c      	b.n	8003a42 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a43      	ldr	r2, [pc, #268]	; (800367c <HAL_DMA_IRQHandler+0xa48>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d022      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x984>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a42      	ldr	r2, [pc, #264]	; (8003680 <HAL_DMA_IRQHandler+0xa4c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d01d      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x984>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a40      	ldr	r2, [pc, #256]	; (8003684 <HAL_DMA_IRQHandler+0xa50>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d018      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x984>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a3f      	ldr	r2, [pc, #252]	; (8003688 <HAL_DMA_IRQHandler+0xa54>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d013      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x984>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a3d      	ldr	r2, [pc, #244]	; (800368c <HAL_DMA_IRQHandler+0xa58>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00e      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x984>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a3c      	ldr	r2, [pc, #240]	; (8003690 <HAL_DMA_IRQHandler+0xa5c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x984>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a3a      	ldr	r2, [pc, #232]	; (8003694 <HAL_DMA_IRQHandler+0xa60>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x984>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a39      	ldr	r2, [pc, #228]	; (8003698 <HAL_DMA_IRQHandler+0xa64>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_DMA_IRQHandler+0x988>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_DMA_IRQHandler+0x98a>
 80035bc:	2300      	movs	r3, #0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 823f 	beq.w	8003a42 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2204      	movs	r2, #4
 80035d6:	409a      	lsls	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80cd 	beq.w	800377c <HAL_DMA_IRQHandler+0xb48>
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80c7 	beq.w	800377c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2204      	movs	r2, #4
 80035f8:	409a      	lsls	r2, r3
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d049      	beq.n	800369c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8210 	beq.w	8003a3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003624:	e20a      	b.n	8003a3c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8206 	beq.w	8003a3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003638:	e200      	b.n	8003a3c <HAL_DMA_IRQHandler+0xe08>
 800363a:	bf00      	nop
 800363c:	40020010 	.word	0x40020010
 8003640:	40020028 	.word	0x40020028
 8003644:	40020040 	.word	0x40020040
 8003648:	40020058 	.word	0x40020058
 800364c:	40020070 	.word	0x40020070
 8003650:	40020088 	.word	0x40020088
 8003654:	400200a0 	.word	0x400200a0
 8003658:	400200b8 	.word	0x400200b8
 800365c:	40020410 	.word	0x40020410
 8003660:	40020428 	.word	0x40020428
 8003664:	40020440 	.word	0x40020440
 8003668:	40020458 	.word	0x40020458
 800366c:	40020470 	.word	0x40020470
 8003670:	40020488 	.word	0x40020488
 8003674:	400204a0 	.word	0x400204a0
 8003678:	400204b8 	.word	0x400204b8
 800367c:	58025408 	.word	0x58025408
 8003680:	5802541c 	.word	0x5802541c
 8003684:	58025430 	.word	0x58025430
 8003688:	58025444 	.word	0x58025444
 800368c:	58025458 	.word	0x58025458
 8003690:	5802546c 	.word	0x5802546c
 8003694:	58025480 	.word	0x58025480
 8003698:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d160      	bne.n	8003768 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a8c      	ldr	r2, [pc, #560]	; (80038dc <HAL_DMA_IRQHandler+0xca8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d04a      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a8a      	ldr	r2, [pc, #552]	; (80038e0 <HAL_DMA_IRQHandler+0xcac>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d045      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a89      	ldr	r2, [pc, #548]	; (80038e4 <HAL_DMA_IRQHandler+0xcb0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d040      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a87      	ldr	r2, [pc, #540]	; (80038e8 <HAL_DMA_IRQHandler+0xcb4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d03b      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a86      	ldr	r2, [pc, #536]	; (80038ec <HAL_DMA_IRQHandler+0xcb8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d036      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a84      	ldr	r2, [pc, #528]	; (80038f0 <HAL_DMA_IRQHandler+0xcbc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d031      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a83      	ldr	r2, [pc, #524]	; (80038f4 <HAL_DMA_IRQHandler+0xcc0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d02c      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a81      	ldr	r2, [pc, #516]	; (80038f8 <HAL_DMA_IRQHandler+0xcc4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d027      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a80      	ldr	r2, [pc, #512]	; (80038fc <HAL_DMA_IRQHandler+0xcc8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a7e      	ldr	r2, [pc, #504]	; (8003900 <HAL_DMA_IRQHandler+0xccc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a7d      	ldr	r2, [pc, #500]	; (8003904 <HAL_DMA_IRQHandler+0xcd0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a7b      	ldr	r2, [pc, #492]	; (8003908 <HAL_DMA_IRQHandler+0xcd4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a7a      	ldr	r2, [pc, #488]	; (800390c <HAL_DMA_IRQHandler+0xcd8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a78      	ldr	r2, [pc, #480]	; (8003910 <HAL_DMA_IRQHandler+0xcdc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a77      	ldr	r2, [pc, #476]	; (8003914 <HAL_DMA_IRQHandler+0xce0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_DMA_IRQHandler+0xb12>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a75      	ldr	r2, [pc, #468]	; (8003918 <HAL_DMA_IRQHandler+0xce4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d108      	bne.n	8003758 <HAL_DMA_IRQHandler+0xb24>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0208 	bic.w	r2, r2, #8
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e007      	b.n	8003768 <HAL_DMA_IRQHandler+0xb34>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0204 	bic.w	r2, r2, #4
 8003766:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8165 	beq.w	8003a3c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800377a:	e15f      	b.n	8003a3c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	2202      	movs	r2, #2
 8003786:	409a      	lsls	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80c5 	beq.w	800391c <HAL_DMA_IRQHandler+0xce8>
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80bf 	beq.w	800391c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2202      	movs	r2, #2
 80037a8:	409a      	lsls	r2, r3
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d018      	beq.n	80037ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 813a 	beq.w	8003a40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037d4:	e134      	b.n	8003a40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8130 	beq.w	8003a40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037e8:	e12a      	b.n	8003a40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d168      	bne.n	80038c6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a38      	ldr	r2, [pc, #224]	; (80038dc <HAL_DMA_IRQHandler+0xca8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d04a      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a37      	ldr	r2, [pc, #220]	; (80038e0 <HAL_DMA_IRQHandler+0xcac>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d045      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a35      	ldr	r2, [pc, #212]	; (80038e4 <HAL_DMA_IRQHandler+0xcb0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d040      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <HAL_DMA_IRQHandler+0xcb4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d03b      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a32      	ldr	r2, [pc, #200]	; (80038ec <HAL_DMA_IRQHandler+0xcb8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d036      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a31      	ldr	r2, [pc, #196]	; (80038f0 <HAL_DMA_IRQHandler+0xcbc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d031      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <HAL_DMA_IRQHandler+0xcc0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02c      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <HAL_DMA_IRQHandler+0xcc4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d027      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <HAL_DMA_IRQHandler+0xcc8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d022      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <HAL_DMA_IRQHandler+0xccc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d01d      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a29      	ldr	r2, [pc, #164]	; (8003904 <HAL_DMA_IRQHandler+0xcd0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d018      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a28      	ldr	r2, [pc, #160]	; (8003908 <HAL_DMA_IRQHandler+0xcd4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a26      	ldr	r2, [pc, #152]	; (800390c <HAL_DMA_IRQHandler+0xcd8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00e      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a25      	ldr	r2, [pc, #148]	; (8003910 <HAL_DMA_IRQHandler+0xcdc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a23      	ldr	r2, [pc, #140]	; (8003914 <HAL_DMA_IRQHandler+0xce0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc60>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a22      	ldr	r2, [pc, #136]	; (8003918 <HAL_DMA_IRQHandler+0xce4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d108      	bne.n	80038a6 <HAL_DMA_IRQHandler+0xc72>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0214 	bic.w	r2, r2, #20
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	e007      	b.n	80038b6 <HAL_DMA_IRQHandler+0xc82>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 020a 	bic.w	r2, r2, #10
 80038b4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80b8 	beq.w	8003a40 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d8:	e0b2      	b.n	8003a40 <HAL_DMA_IRQHandler+0xe0c>
 80038da:	bf00      	nop
 80038dc:	40020010 	.word	0x40020010
 80038e0:	40020028 	.word	0x40020028
 80038e4:	40020040 	.word	0x40020040
 80038e8:	40020058 	.word	0x40020058
 80038ec:	40020070 	.word	0x40020070
 80038f0:	40020088 	.word	0x40020088
 80038f4:	400200a0 	.word	0x400200a0
 80038f8:	400200b8 	.word	0x400200b8
 80038fc:	40020410 	.word	0x40020410
 8003900:	40020428 	.word	0x40020428
 8003904:	40020440 	.word	0x40020440
 8003908:	40020458 	.word	0x40020458
 800390c:	40020470 	.word	0x40020470
 8003910:	40020488 	.word	0x40020488
 8003914:	400204a0 	.word	0x400204a0
 8003918:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	2208      	movs	r2, #8
 8003926:	409a      	lsls	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8088 	beq.w	8003a42 <HAL_DMA_IRQHandler+0xe0e>
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8082 	beq.w	8003a42 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a41      	ldr	r2, [pc, #260]	; (8003a48 <HAL_DMA_IRQHandler+0xe14>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d04a      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a3f      	ldr	r2, [pc, #252]	; (8003a4c <HAL_DMA_IRQHandler+0xe18>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d045      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3e      	ldr	r2, [pc, #248]	; (8003a50 <HAL_DMA_IRQHandler+0xe1c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d040      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <HAL_DMA_IRQHandler+0xe20>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d03b      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a3b      	ldr	r2, [pc, #236]	; (8003a58 <HAL_DMA_IRQHandler+0xe24>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d036      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a39      	ldr	r2, [pc, #228]	; (8003a5c <HAL_DMA_IRQHandler+0xe28>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d031      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <HAL_DMA_IRQHandler+0xe2c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d02c      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a36      	ldr	r2, [pc, #216]	; (8003a64 <HAL_DMA_IRQHandler+0xe30>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d027      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a35      	ldr	r2, [pc, #212]	; (8003a68 <HAL_DMA_IRQHandler+0xe34>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <HAL_DMA_IRQHandler+0xe38>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a32      	ldr	r2, [pc, #200]	; (8003a70 <HAL_DMA_IRQHandler+0xe3c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a30      	ldr	r2, [pc, #192]	; (8003a74 <HAL_DMA_IRQHandler+0xe40>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a2f      	ldr	r2, [pc, #188]	; (8003a78 <HAL_DMA_IRQHandler+0xe44>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <HAL_DMA_IRQHandler+0xe48>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2c      	ldr	r2, [pc, #176]	; (8003a80 <HAL_DMA_IRQHandler+0xe4c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_DMA_IRQHandler+0xdaa>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <HAL_DMA_IRQHandler+0xe50>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d108      	bne.n	80039f0 <HAL_DMA_IRQHandler+0xdbc>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 021c 	bic.w	r2, r2, #28
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e007      	b.n	8003a00 <HAL_DMA_IRQHandler+0xdcc>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 020e 	bic.w	r2, r2, #14
 80039fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2201      	movs	r2, #1
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
 8003a36:	e004      	b.n	8003a42 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003a38:	bf00      	nop
 8003a3a:	e002      	b.n	8003a42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a42:	3728      	adds	r7, #40	; 0x28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40020010 	.word	0x40020010
 8003a4c:	40020028 	.word	0x40020028
 8003a50:	40020040 	.word	0x40020040
 8003a54:	40020058 	.word	0x40020058
 8003a58:	40020070 	.word	0x40020070
 8003a5c:	40020088 	.word	0x40020088
 8003a60:	400200a0 	.word	0x400200a0
 8003a64:	400200b8 	.word	0x400200b8
 8003a68:	40020410 	.word	0x40020410
 8003a6c:	40020428 	.word	0x40020428
 8003a70:	40020440 	.word	0x40020440
 8003a74:	40020458 	.word	0x40020458
 8003a78:	40020470 	.word	0x40020470
 8003a7c:	40020488 	.word	0x40020488
 8003a80:	400204a0 	.word	0x400204a0
 8003a84:	400204b8 	.word	0x400204b8

08003a88 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a84      	ldr	r2, [pc, #528]	; (8003cd0 <DMA_SetConfig+0x230>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d072      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a82      	ldr	r2, [pc, #520]	; (8003cd4 <DMA_SetConfig+0x234>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d06d      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a81      	ldr	r2, [pc, #516]	; (8003cd8 <DMA_SetConfig+0x238>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d068      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a7f      	ldr	r2, [pc, #508]	; (8003cdc <DMA_SetConfig+0x23c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d063      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a7e      	ldr	r2, [pc, #504]	; (8003ce0 <DMA_SetConfig+0x240>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d05e      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a7c      	ldr	r2, [pc, #496]	; (8003ce4 <DMA_SetConfig+0x244>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d059      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7b      	ldr	r2, [pc, #492]	; (8003ce8 <DMA_SetConfig+0x248>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d054      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a79      	ldr	r2, [pc, #484]	; (8003cec <DMA_SetConfig+0x24c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d04f      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a78      	ldr	r2, [pc, #480]	; (8003cf0 <DMA_SetConfig+0x250>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d04a      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a76      	ldr	r2, [pc, #472]	; (8003cf4 <DMA_SetConfig+0x254>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d045      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a75      	ldr	r2, [pc, #468]	; (8003cf8 <DMA_SetConfig+0x258>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d040      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a73      	ldr	r2, [pc, #460]	; (8003cfc <DMA_SetConfig+0x25c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d03b      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a72      	ldr	r2, [pc, #456]	; (8003d00 <DMA_SetConfig+0x260>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d036      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a70      	ldr	r2, [pc, #448]	; (8003d04 <DMA_SetConfig+0x264>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d031      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6f      	ldr	r2, [pc, #444]	; (8003d08 <DMA_SetConfig+0x268>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d02c      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a6d      	ldr	r2, [pc, #436]	; (8003d0c <DMA_SetConfig+0x26c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d027      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6c      	ldr	r2, [pc, #432]	; (8003d10 <DMA_SetConfig+0x270>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d022      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6a      	ldr	r2, [pc, #424]	; (8003d14 <DMA_SetConfig+0x274>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01d      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a69      	ldr	r2, [pc, #420]	; (8003d18 <DMA_SetConfig+0x278>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d018      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a67      	ldr	r2, [pc, #412]	; (8003d1c <DMA_SetConfig+0x27c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a66      	ldr	r2, [pc, #408]	; (8003d20 <DMA_SetConfig+0x280>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a64      	ldr	r2, [pc, #400]	; (8003d24 <DMA_SetConfig+0x284>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a63      	ldr	r2, [pc, #396]	; (8003d28 <DMA_SetConfig+0x288>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <DMA_SetConfig+0x10a>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a61      	ldr	r2, [pc, #388]	; (8003d2c <DMA_SetConfig+0x28c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <DMA_SetConfig+0x10e>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <DMA_SetConfig+0x110>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003bbc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003bce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3e      	ldr	r2, [pc, #248]	; (8003cd0 <DMA_SetConfig+0x230>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d04a      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3d      	ldr	r2, [pc, #244]	; (8003cd4 <DMA_SetConfig+0x234>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d045      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3b      	ldr	r2, [pc, #236]	; (8003cd8 <DMA_SetConfig+0x238>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d040      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <DMA_SetConfig+0x23c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d03b      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a38      	ldr	r2, [pc, #224]	; (8003ce0 <DMA_SetConfig+0x240>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d036      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a37      	ldr	r2, [pc, #220]	; (8003ce4 <DMA_SetConfig+0x244>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d031      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a35      	ldr	r2, [pc, #212]	; (8003ce8 <DMA_SetConfig+0x248>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d02c      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a34      	ldr	r2, [pc, #208]	; (8003cec <DMA_SetConfig+0x24c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d027      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a32      	ldr	r2, [pc, #200]	; (8003cf0 <DMA_SetConfig+0x250>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d022      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a31      	ldr	r2, [pc, #196]	; (8003cf4 <DMA_SetConfig+0x254>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d01d      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <DMA_SetConfig+0x258>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d018      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2e      	ldr	r2, [pc, #184]	; (8003cfc <DMA_SetConfig+0x25c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d013      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <DMA_SetConfig+0x260>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00e      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2b      	ldr	r2, [pc, #172]	; (8003d04 <DMA_SetConfig+0x264>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d009      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a29      	ldr	r2, [pc, #164]	; (8003d08 <DMA_SetConfig+0x268>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <DMA_SetConfig+0x1d0>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a28      	ldr	r2, [pc, #160]	; (8003d0c <DMA_SetConfig+0x26c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <DMA_SetConfig+0x1d4>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <DMA_SetConfig+0x1d6>
 8003c74:	2300      	movs	r3, #0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d05a      	beq.n	8003d30 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	223f      	movs	r2, #63	; 0x3f
 8003c84:	409a      	lsls	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c98:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	d108      	bne.n	8003cbc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003cba:	e087      	b.n	8003dcc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
}
 8003ccc:	e07e      	b.n	8003dcc <DMA_SetConfig+0x32c>
 8003cce:	bf00      	nop
 8003cd0:	40020010 	.word	0x40020010
 8003cd4:	40020028 	.word	0x40020028
 8003cd8:	40020040 	.word	0x40020040
 8003cdc:	40020058 	.word	0x40020058
 8003ce0:	40020070 	.word	0x40020070
 8003ce4:	40020088 	.word	0x40020088
 8003ce8:	400200a0 	.word	0x400200a0
 8003cec:	400200b8 	.word	0x400200b8
 8003cf0:	40020410 	.word	0x40020410
 8003cf4:	40020428 	.word	0x40020428
 8003cf8:	40020440 	.word	0x40020440
 8003cfc:	40020458 	.word	0x40020458
 8003d00:	40020470 	.word	0x40020470
 8003d04:	40020488 	.word	0x40020488
 8003d08:	400204a0 	.word	0x400204a0
 8003d0c:	400204b8 	.word	0x400204b8
 8003d10:	58025408 	.word	0x58025408
 8003d14:	5802541c 	.word	0x5802541c
 8003d18:	58025430 	.word	0x58025430
 8003d1c:	58025444 	.word	0x58025444
 8003d20:	58025458 	.word	0x58025458
 8003d24:	5802546c 	.word	0x5802546c
 8003d28:	58025480 	.word	0x58025480
 8003d2c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <DMA_SetConfig+0x338>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d022      	beq.n	8003d80 <DMA_SetConfig+0x2e0>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a27      	ldr	r2, [pc, #156]	; (8003ddc <DMA_SetConfig+0x33c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d01d      	beq.n	8003d80 <DMA_SetConfig+0x2e0>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <DMA_SetConfig+0x340>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d018      	beq.n	8003d80 <DMA_SetConfig+0x2e0>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a24      	ldr	r2, [pc, #144]	; (8003de4 <DMA_SetConfig+0x344>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <DMA_SetConfig+0x2e0>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <DMA_SetConfig+0x348>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00e      	beq.n	8003d80 <DMA_SetConfig+0x2e0>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a21      	ldr	r2, [pc, #132]	; (8003dec <DMA_SetConfig+0x34c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d009      	beq.n	8003d80 <DMA_SetConfig+0x2e0>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <DMA_SetConfig+0x350>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <DMA_SetConfig+0x2e0>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <DMA_SetConfig+0x354>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <DMA_SetConfig+0x2e4>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <DMA_SetConfig+0x2e6>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d020      	beq.n	8003dcc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	2201      	movs	r2, #1
 8003d94:	409a      	lsls	r2, r3
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d108      	bne.n	8003dbc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	60da      	str	r2, [r3, #12]
}
 8003dba:	e007      	b.n	8003dcc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	58025408 	.word	0x58025408
 8003ddc:	5802541c 	.word	0x5802541c
 8003de0:	58025430 	.word	0x58025430
 8003de4:	58025444 	.word	0x58025444
 8003de8:	58025458 	.word	0x58025458
 8003dec:	5802546c 	.word	0x5802546c
 8003df0:	58025480 	.word	0x58025480
 8003df4:	58025494 	.word	0x58025494

08003df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a42      	ldr	r2, [pc, #264]	; (8003f10 <DMA_CalcBaseAndBitshift+0x118>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d04a      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a41      	ldr	r2, [pc, #260]	; (8003f14 <DMA_CalcBaseAndBitshift+0x11c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d045      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a3f      	ldr	r2, [pc, #252]	; (8003f18 <DMA_CalcBaseAndBitshift+0x120>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d040      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a3e      	ldr	r2, [pc, #248]	; (8003f1c <DMA_CalcBaseAndBitshift+0x124>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d03b      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a3c      	ldr	r2, [pc, #240]	; (8003f20 <DMA_CalcBaseAndBitshift+0x128>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d036      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a3b      	ldr	r2, [pc, #236]	; (8003f24 <DMA_CalcBaseAndBitshift+0x12c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d031      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a39      	ldr	r2, [pc, #228]	; (8003f28 <DMA_CalcBaseAndBitshift+0x130>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d02c      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a38      	ldr	r2, [pc, #224]	; (8003f2c <DMA_CalcBaseAndBitshift+0x134>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d027      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a36      	ldr	r2, [pc, #216]	; (8003f30 <DMA_CalcBaseAndBitshift+0x138>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d022      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a35      	ldr	r2, [pc, #212]	; (8003f34 <DMA_CalcBaseAndBitshift+0x13c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d01d      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a33      	ldr	r2, [pc, #204]	; (8003f38 <DMA_CalcBaseAndBitshift+0x140>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d018      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a32      	ldr	r2, [pc, #200]	; (8003f3c <DMA_CalcBaseAndBitshift+0x144>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a30      	ldr	r2, [pc, #192]	; (8003f40 <DMA_CalcBaseAndBitshift+0x148>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2f      	ldr	r2, [pc, #188]	; (8003f44 <DMA_CalcBaseAndBitshift+0x14c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d009      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <DMA_CalcBaseAndBitshift+0x150>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2c      	ldr	r2, [pc, #176]	; (8003f4c <DMA_CalcBaseAndBitshift+0x154>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d101      	bne.n	8003ea4 <DMA_CalcBaseAndBitshift+0xac>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <DMA_CalcBaseAndBitshift+0xae>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d024      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	3b10      	subs	r3, #16
 8003eb2:	4a27      	ldr	r2, [pc, #156]	; (8003f50 <DMA_CalcBaseAndBitshift+0x158>)
 8003eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <DMA_CalcBaseAndBitshift+0x15c>)
 8003ec4:	5cd3      	ldrb	r3, [r2, r3]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d908      	bls.n	8003ee4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <DMA_CalcBaseAndBitshift+0x160>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	1d1a      	adds	r2, r3, #4
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ee2:	e00d      	b.n	8003f00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <DMA_CalcBaseAndBitshift+0x160>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef2:	e005      	b.n	8003f00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40020010 	.word	0x40020010
 8003f14:	40020028 	.word	0x40020028
 8003f18:	40020040 	.word	0x40020040
 8003f1c:	40020058 	.word	0x40020058
 8003f20:	40020070 	.word	0x40020070
 8003f24:	40020088 	.word	0x40020088
 8003f28:	400200a0 	.word	0x400200a0
 8003f2c:	400200b8 	.word	0x400200b8
 8003f30:	40020410 	.word	0x40020410
 8003f34:	40020428 	.word	0x40020428
 8003f38:	40020440 	.word	0x40020440
 8003f3c:	40020458 	.word	0x40020458
 8003f40:	40020470 	.word	0x40020470
 8003f44:	40020488 	.word	0x40020488
 8003f48:	400204a0 	.word	0x400204a0
 8003f4c:	400204b8 	.word	0x400204b8
 8003f50:	aaaaaaab 	.word	0xaaaaaaab
 8003f54:	0800b218 	.word	0x0800b218
 8003f58:	fffffc00 	.word	0xfffffc00

08003f5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d120      	bne.n	8003fb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d858      	bhi.n	800402a <DMA_CheckFifoParam+0xce>
 8003f78:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <DMA_CheckFifoParam+0x24>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08003f91 	.word	0x08003f91
 8003f84:	08003fa3 	.word	0x08003fa3
 8003f88:	08003f91 	.word	0x08003f91
 8003f8c:	0800402b 	.word	0x0800402b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d048      	beq.n	800402e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fa0:	e045      	b.n	800402e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003faa:	d142      	bne.n	8004032 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fb0:	e03f      	b.n	8004032 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fba:	d123      	bne.n	8004004 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d838      	bhi.n	8004036 <DMA_CheckFifoParam+0xda>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <DMA_CheckFifoParam+0x70>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fe3 	.word	0x08003fe3
 8003fd4:	08003fdd 	.word	0x08003fdd
 8003fd8:	08003ff5 	.word	0x08003ff5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
        break;
 8003fe0:	e030      	b.n	8004044 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d025      	beq.n	800403a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ff2:	e022      	b.n	800403a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ffc:	d11f      	bne.n	800403e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004002:	e01c      	b.n	800403e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	2b02      	cmp	r3, #2
 800400a:	d902      	bls.n	8004012 <DMA_CheckFifoParam+0xb6>
 800400c:	2b03      	cmp	r3, #3
 800400e:	d003      	beq.n	8004018 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004010:	e018      	b.n	8004044 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
        break;
 8004016:	e015      	b.n	8004044 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00e      	beq.n	8004042 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
    break;
 8004028:	e00b      	b.n	8004042 <DMA_CheckFifoParam+0xe6>
        break;
 800402a:	bf00      	nop
 800402c:	e00a      	b.n	8004044 <DMA_CheckFifoParam+0xe8>
        break;
 800402e:	bf00      	nop
 8004030:	e008      	b.n	8004044 <DMA_CheckFifoParam+0xe8>
        break;
 8004032:	bf00      	nop
 8004034:	e006      	b.n	8004044 <DMA_CheckFifoParam+0xe8>
        break;
 8004036:	bf00      	nop
 8004038:	e004      	b.n	8004044 <DMA_CheckFifoParam+0xe8>
        break;
 800403a:	bf00      	nop
 800403c:	e002      	b.n	8004044 <DMA_CheckFifoParam+0xe8>
        break;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <DMA_CheckFifoParam+0xe8>
    break;
 8004042:	bf00      	nop
    }
  }

  return status;
 8004044:	7bfb      	ldrb	r3, [r7, #15]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop

08004054 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a38      	ldr	r2, [pc, #224]	; (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a36      	ldr	r2, [pc, #216]	; (800414c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a35      	ldr	r2, [pc, #212]	; (8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a33      	ldr	r2, [pc, #204]	; (8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a32      	ldr	r2, [pc, #200]	; (8004158 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a30      	ldr	r2, [pc, #192]	; (800415c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01a      	beq.n	80040f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	3b08      	subs	r3, #8
 80040c4:	4a28      	ldr	r2, [pc, #160]	; (8004168 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4b26      	ldr	r3, [pc, #152]	; (800416c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a24      	ldr	r2, [pc, #144]	; (8004170 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80040e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2201      	movs	r2, #1
 80040ea:	409a      	lsls	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80040f0:	e024      	b.n	800413c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3b10      	subs	r3, #16
 80040fa:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d806      	bhi.n	800411a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a1b      	ldr	r2, [pc, #108]	; (800417c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d902      	bls.n	800411a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3308      	adds	r3, #8
 8004118:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4b18      	ldr	r3, [pc, #96]	; (8004180 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a16      	ldr	r2, [pc, #88]	; (8004184 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800412c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	2201      	movs	r2, #1
 8004136:	409a      	lsls	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	58025408 	.word	0x58025408
 800414c:	5802541c 	.word	0x5802541c
 8004150:	58025430 	.word	0x58025430
 8004154:	58025444 	.word	0x58025444
 8004158:	58025458 	.word	0x58025458
 800415c:	5802546c 	.word	0x5802546c
 8004160:	58025480 	.word	0x58025480
 8004164:	58025494 	.word	0x58025494
 8004168:	cccccccd 	.word	0xcccccccd
 800416c:	16009600 	.word	0x16009600
 8004170:	58025880 	.word	0x58025880
 8004174:	aaaaaaab 	.word	0xaaaaaaab
 8004178:	400204b8 	.word	0x400204b8
 800417c:	4002040f 	.word	0x4002040f
 8004180:	10008200 	.word	0x10008200
 8004184:	40020880 	.word	0x40020880

08004188 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d04a      	beq.n	8004234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d847      	bhi.n	8004234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a25      	ldr	r2, [pc, #148]	; (8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d022      	beq.n	80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a24      	ldr	r2, [pc, #144]	; (8004244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d01d      	beq.n	80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a22      	ldr	r2, [pc, #136]	; (8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d018      	beq.n	80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a21      	ldr	r2, [pc, #132]	; (800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1f      	ldr	r2, [pc, #124]	; (8004250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00e      	beq.n	80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d009      	beq.n	80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1b      	ldr	r2, [pc, #108]	; (800425c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d101      	bne.n	80041f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80041f8:	2300      	movs	r3, #0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4b17      	ldr	r3, [pc, #92]	; (8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	461a      	mov	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a15      	ldr	r2, [pc, #84]	; (8004264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004210:	671a      	str	r2, [r3, #112]	; 0x70
 8004212:	e009      	b.n	8004228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4b14      	ldr	r3, [pc, #80]	; (8004268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	461a      	mov	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a11      	ldr	r2, [pc, #68]	; (800426c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004226:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3b01      	subs	r3, #1
 800422c:	2201      	movs	r2, #1
 800422e:	409a      	lsls	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	58025408 	.word	0x58025408
 8004244:	5802541c 	.word	0x5802541c
 8004248:	58025430 	.word	0x58025430
 800424c:	58025444 	.word	0x58025444
 8004250:	58025458 	.word	0x58025458
 8004254:	5802546c 	.word	0x5802546c
 8004258:	58025480 	.word	0x58025480
 800425c:	58025494 	.word	0x58025494
 8004260:	1600963f 	.word	0x1600963f
 8004264:	58025940 	.word	0x58025940
 8004268:	1000823f 	.word	0x1000823f
 800426c:	40020940 	.word	0x40020940

08004270 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	7a1b      	ldrb	r3, [r3, #8]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d155      	bne.n	8004336 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a4b      	ldr	r2, [pc, #300]	; (80043bc <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d049      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a49      	ldr	r2, [pc, #292]	; (80043c0 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d044      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a48      	ldr	r2, [pc, #288]	; (80043c4 <HAL_DMAEx_ConfigMuxSync+0x154>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d03f      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a46      	ldr	r2, [pc, #280]	; (80043c8 <HAL_DMAEx_ConfigMuxSync+0x158>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d03a      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a45      	ldr	r2, [pc, #276]	; (80043cc <HAL_DMAEx_ConfigMuxSync+0x15c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d035      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a43      	ldr	r2, [pc, #268]	; (80043d0 <HAL_DMAEx_ConfigMuxSync+0x160>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d030      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a42      	ldr	r2, [pc, #264]	; (80043d4 <HAL_DMAEx_ConfigMuxSync+0x164>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d02b      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <HAL_DMAEx_ConfigMuxSync+0x168>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d026      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3f      	ldr	r2, [pc, #252]	; (80043dc <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d021      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a3d      	ldr	r2, [pc, #244]	; (80043e0 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01c      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a3c      	ldr	r2, [pc, #240]	; (80043e4 <HAL_DMAEx_ConfigMuxSync+0x174>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d017      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a3a      	ldr	r2, [pc, #232]	; (80043e8 <HAL_DMAEx_ConfigMuxSync+0x178>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d012      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a39      	ldr	r2, [pc, #228]	; (80043ec <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00d      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a37      	ldr	r2, [pc, #220]	; (80043f0 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d008      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a36      	ldr	r2, [pc, #216]	; (80043f4 <HAL_DMAEx_ConfigMuxSync+0x184>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a34      	ldr	r2, [pc, #208]	; (80043f8 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8004326:	4293      	cmp	r3, r2
 8004328:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b01      	cmp	r3, #1
 8004340:	d131      	bne.n	80043a6 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_DMAEx_ConfigMuxSync+0xe0>
 800434c:	2302      	movs	r3, #2
 800434e:	e02f      	b.n	80043b0 <HAL_DMAEx_ConfigMuxSync+0x140>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004362:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8004366:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	b2d9      	uxtb	r1, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	061a      	lsls	r2, r3, #24
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	3b01      	subs	r3, #1
 800437a:	04db      	lsls	r3, r3, #19
 800437c:	431a      	orrs	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	431a      	orrs	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	7a1b      	ldrb	r3, [r3, #8]
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	431a      	orrs	r2, r3
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	7a5b      	ldrb	r3, [r3, #9]
 800438e:	025b      	lsls	r3, r3, #9
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004396:	430a      	orrs	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e004      	b.n	80043b0 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
  }
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40020010 	.word	0x40020010
 80043c0:	40020028 	.word	0x40020028
 80043c4:	40020040 	.word	0x40020040
 80043c8:	40020058 	.word	0x40020058
 80043cc:	40020070 	.word	0x40020070
 80043d0:	40020088 	.word	0x40020088
 80043d4:	400200a0 	.word	0x400200a0
 80043d8:	400200b8 	.word	0x400200b8
 80043dc:	40020410 	.word	0x40020410
 80043e0:	40020428 	.word	0x40020428
 80043e4:	40020440 	.word	0x40020440
 80043e8:	40020458 	.word	0x40020458
 80043ec:	40020470 	.word	0x40020470
 80043f0:	40020488 	.word	0x40020488
 80043f4:	400204a0 	.word	0x400204a0
 80043f8:	400204b8 	.word	0x400204b8

080043fc <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01a      	beq.n	800444a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004422:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800442c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d022      	beq.n	8004498 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d01a      	beq.n	8004498 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800446c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004470:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800447a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
      }
    }
  }
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044ae:	4b86      	ldr	r3, [pc, #536]	; (80046c8 <HAL_GPIO_Init+0x228>)
 80044b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044b2:	e18c      	b.n	80047ce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	2101      	movs	r1, #1
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	fa01 f303 	lsl.w	r3, r1, r3
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 817e 	beq.w	80047c8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d005      	beq.n	80044e4 <HAL_GPIO_Init+0x44>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d130      	bne.n	8004546 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	2203      	movs	r2, #3
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43db      	mvns	r3, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800451a:	2201      	movs	r2, #1
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 0201 	and.w	r2, r3, #1
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b03      	cmp	r3, #3
 8004550:	d017      	beq.n	8004582 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	2203      	movs	r2, #3
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4013      	ands	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d123      	bne.n	80045d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	08da      	lsrs	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3208      	adds	r2, #8
 8004596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800459a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	220f      	movs	r2, #15
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	08da      	lsrs	r2, r3, #3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3208      	adds	r2, #8
 80045d0:	69b9      	ldr	r1, [r7, #24]
 80045d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	2203      	movs	r2, #3
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 0203 	and.w	r2, r3, #3
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80d8 	beq.w	80047c8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004618:	4b2c      	ldr	r3, [pc, #176]	; (80046cc <HAL_GPIO_Init+0x22c>)
 800461a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800461e:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <HAL_GPIO_Init+0x22c>)
 8004620:	f043 0302 	orr.w	r3, r3, #2
 8004624:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004628:	4b28      	ldr	r3, [pc, #160]	; (80046cc <HAL_GPIO_Init+0x22c>)
 800462a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004636:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <HAL_GPIO_Init+0x230>)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	089b      	lsrs	r3, r3, #2
 800463c:	3302      	adds	r3, #2
 800463e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	220f      	movs	r2, #15
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4013      	ands	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <HAL_GPIO_Init+0x234>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d04a      	beq.n	80046f8 <HAL_GPIO_Init+0x258>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <HAL_GPIO_Init+0x238>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d02b      	beq.n	80046c2 <HAL_GPIO_Init+0x222>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1b      	ldr	r2, [pc, #108]	; (80046dc <HAL_GPIO_Init+0x23c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d025      	beq.n	80046be <HAL_GPIO_Init+0x21e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1a      	ldr	r2, [pc, #104]	; (80046e0 <HAL_GPIO_Init+0x240>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01f      	beq.n	80046ba <HAL_GPIO_Init+0x21a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <HAL_GPIO_Init+0x244>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d019      	beq.n	80046b6 <HAL_GPIO_Init+0x216>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <HAL_GPIO_Init+0x248>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_GPIO_Init+0x212>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a17      	ldr	r2, [pc, #92]	; (80046ec <HAL_GPIO_Init+0x24c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00d      	beq.n	80046ae <HAL_GPIO_Init+0x20e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <HAL_GPIO_Init+0x250>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d007      	beq.n	80046aa <HAL_GPIO_Init+0x20a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <HAL_GPIO_Init+0x254>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <HAL_GPIO_Init+0x206>
 80046a2:	2309      	movs	r3, #9
 80046a4:	e029      	b.n	80046fa <HAL_GPIO_Init+0x25a>
 80046a6:	230a      	movs	r3, #10
 80046a8:	e027      	b.n	80046fa <HAL_GPIO_Init+0x25a>
 80046aa:	2307      	movs	r3, #7
 80046ac:	e025      	b.n	80046fa <HAL_GPIO_Init+0x25a>
 80046ae:	2306      	movs	r3, #6
 80046b0:	e023      	b.n	80046fa <HAL_GPIO_Init+0x25a>
 80046b2:	2305      	movs	r3, #5
 80046b4:	e021      	b.n	80046fa <HAL_GPIO_Init+0x25a>
 80046b6:	2304      	movs	r3, #4
 80046b8:	e01f      	b.n	80046fa <HAL_GPIO_Init+0x25a>
 80046ba:	2303      	movs	r3, #3
 80046bc:	e01d      	b.n	80046fa <HAL_GPIO_Init+0x25a>
 80046be:	2302      	movs	r3, #2
 80046c0:	e01b      	b.n	80046fa <HAL_GPIO_Init+0x25a>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e019      	b.n	80046fa <HAL_GPIO_Init+0x25a>
 80046c6:	bf00      	nop
 80046c8:	58000080 	.word	0x58000080
 80046cc:	58024400 	.word	0x58024400
 80046d0:	58000400 	.word	0x58000400
 80046d4:	58020000 	.word	0x58020000
 80046d8:	58020400 	.word	0x58020400
 80046dc:	58020800 	.word	0x58020800
 80046e0:	58020c00 	.word	0x58020c00
 80046e4:	58021000 	.word	0x58021000
 80046e8:	58021400 	.word	0x58021400
 80046ec:	58021800 	.word	0x58021800
 80046f0:	58021c00 	.word	0x58021c00
 80046f4:	58022400 	.word	0x58022400
 80046f8:	2300      	movs	r3, #0
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	f002 0203 	and.w	r2, r2, #3
 8004700:	0092      	lsls	r2, r2, #2
 8004702:	4093      	lsls	r3, r2
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800470a:	4938      	ldr	r1, [pc, #224]	; (80047ec <HAL_GPIO_Init+0x34c>)
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	3302      	adds	r3, #2
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800473e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800476c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	3301      	adds	r3, #1
 80047cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f47f ae6b 	bne.w	80044b4 <HAL_GPIO_Init+0x14>
  }
}
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
 80047e2:	3724      	adds	r7, #36	; 0x24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	58000400 	.word	0x58000400

080047f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047fe:	4b72      	ldr	r3, [pc, #456]	; (80049c8 <HAL_GPIO_DeInit+0x1d8>)
 8004800:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004802:	e0d3      	b.n	80049ac <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004804:	2201      	movs	r2, #1
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	4013      	ands	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80c6 	beq.w	80049a6 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800481a:	4a6c      	ldr	r2, [pc, #432]	; (80049cc <HAL_GPIO_DeInit+0x1dc>)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	3302      	adds	r3, #2
 8004822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004826:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	220f      	movs	r2, #15
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a64      	ldr	r2, [pc, #400]	; (80049d0 <HAL_GPIO_DeInit+0x1e0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d031      	beq.n	80048a8 <HAL_GPIO_DeInit+0xb8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a63      	ldr	r2, [pc, #396]	; (80049d4 <HAL_GPIO_DeInit+0x1e4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d02b      	beq.n	80048a4 <HAL_GPIO_DeInit+0xb4>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a62      	ldr	r2, [pc, #392]	; (80049d8 <HAL_GPIO_DeInit+0x1e8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d025      	beq.n	80048a0 <HAL_GPIO_DeInit+0xb0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a61      	ldr	r2, [pc, #388]	; (80049dc <HAL_GPIO_DeInit+0x1ec>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d01f      	beq.n	800489c <HAL_GPIO_DeInit+0xac>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a60      	ldr	r2, [pc, #384]	; (80049e0 <HAL_GPIO_DeInit+0x1f0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d019      	beq.n	8004898 <HAL_GPIO_DeInit+0xa8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a5f      	ldr	r2, [pc, #380]	; (80049e4 <HAL_GPIO_DeInit+0x1f4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <HAL_GPIO_DeInit+0xa4>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a5e      	ldr	r2, [pc, #376]	; (80049e8 <HAL_GPIO_DeInit+0x1f8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00d      	beq.n	8004890 <HAL_GPIO_DeInit+0xa0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a5d      	ldr	r2, [pc, #372]	; (80049ec <HAL_GPIO_DeInit+0x1fc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <HAL_GPIO_DeInit+0x9c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a5c      	ldr	r2, [pc, #368]	; (80049f0 <HAL_GPIO_DeInit+0x200>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_GPIO_DeInit+0x98>
 8004884:	2309      	movs	r3, #9
 8004886:	e010      	b.n	80048aa <HAL_GPIO_DeInit+0xba>
 8004888:	230a      	movs	r3, #10
 800488a:	e00e      	b.n	80048aa <HAL_GPIO_DeInit+0xba>
 800488c:	2307      	movs	r3, #7
 800488e:	e00c      	b.n	80048aa <HAL_GPIO_DeInit+0xba>
 8004890:	2306      	movs	r3, #6
 8004892:	e00a      	b.n	80048aa <HAL_GPIO_DeInit+0xba>
 8004894:	2305      	movs	r3, #5
 8004896:	e008      	b.n	80048aa <HAL_GPIO_DeInit+0xba>
 8004898:	2304      	movs	r3, #4
 800489a:	e006      	b.n	80048aa <HAL_GPIO_DeInit+0xba>
 800489c:	2303      	movs	r3, #3
 800489e:	e004      	b.n	80048aa <HAL_GPIO_DeInit+0xba>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e002      	b.n	80048aa <HAL_GPIO_DeInit+0xba>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <HAL_GPIO_DeInit+0xba>
 80048a8:	2300      	movs	r3, #0
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	f002 0203 	and.w	r2, r2, #3
 80048b0:	0092      	lsls	r2, r2, #2
 80048b2:	4093      	lsls	r3, r2
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d136      	bne.n	8004928 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	401a      	ands	r2, r3
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	401a      	ands	r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	43db      	mvns	r3, r3
 80048e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048e4:	4013      	ands	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f6:	4013      	ands	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	220f      	movs	r2, #15
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800490a:	4a30      	ldr	r2, [pc, #192]	; (80049cc <HAL_GPIO_DeInit+0x1dc>)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	089b      	lsrs	r3, r3, #2
 8004910:	3302      	adds	r3, #2
 8004912:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	43da      	mvns	r2, r3
 800491a:	482c      	ldr	r0, [pc, #176]	; (80049cc <HAL_GPIO_DeInit+0x1dc>)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	400a      	ands	r2, r1
 8004922:	3302      	adds	r3, #2
 8004924:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	2103      	movs	r1, #3
 8004932:	fa01 f303 	lsl.w	r3, r1, r3
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	08da      	lsrs	r2, r3, #3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3208      	adds	r2, #8
 8004944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	220f      	movs	r2, #15
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	08d2      	lsrs	r2, r2, #3
 800495c:	4019      	ands	r1, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3208      	adds	r2, #8
 8004962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	2103      	movs	r1, #3
 8004970:	fa01 f303 	lsl.w	r3, r1, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	401a      	ands	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	2101      	movs	r1, #1
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	401a      	ands	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	2103      	movs	r1, #3
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	401a      	ands	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f47f af25 	bne.w	8004804 <HAL_GPIO_DeInit+0x14>
  }
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	58000080 	.word	0x58000080
 80049cc:	58000400 	.word	0x58000400
 80049d0:	58020000 	.word	0x58020000
 80049d4:	58020400 	.word	0x58020400
 80049d8:	58020800 	.word	0x58020800
 80049dc:	58020c00 	.word	0x58020c00
 80049e0:	58021000 	.word	0x58021000
 80049e4:	58021400 	.word	0x58021400
 80049e8:	58021800 	.word	0x58021800
 80049ec:	58021c00 	.word	0x58021c00
 80049f0:	58022400 	.word	0x58022400

080049f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	807b      	strh	r3, [r7, #2]
 8004a00:	4613      	mov	r3, r2
 8004a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a04:	787b      	ldrb	r3, [r7, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a10:	e003      	b.n	8004a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	041a      	lsls	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	619a      	str	r2, [r3, #24]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 f804 	bl	8004a5a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	4603      	mov	r3, r0
 8004a62:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004a78:	4b29      	ldr	r3, [pc, #164]	; (8004b20 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	2b06      	cmp	r3, #6
 8004a82:	d00a      	beq.n	8004a9a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a84:	4b26      	ldr	r3, [pc, #152]	; (8004b20 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d001      	beq.n	8004a96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e03f      	b.n	8004b16 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e03d      	b.n	8004b16 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a9a:	4b21      	ldr	r3, [pc, #132]	; (8004b20 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004aa2:	491f      	ldr	r1, [pc, #124]	; (8004b20 <HAL_PWREx_ConfigSupply+0xb0>)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004aaa:	f7fc ff43 	bl	8001934 <HAL_GetTick>
 8004aae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ab0:	e009      	b.n	8004ac6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ab2:	f7fc ff3f 	bl	8001934 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ac0:	d901      	bls.n	8004ac6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e027      	b.n	8004b16 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ac6:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad2:	d1ee      	bne.n	8004ab2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b1e      	cmp	r3, #30
 8004ad8:	d008      	beq.n	8004aec <HAL_PWREx_ConfigSupply+0x7c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b2e      	cmp	r3, #46	; 0x2e
 8004ade:	d005      	beq.n	8004aec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b1d      	cmp	r3, #29
 8004ae4:	d002      	beq.n	8004aec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b2d      	cmp	r3, #45	; 0x2d
 8004aea:	d113      	bne.n	8004b14 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004aec:	f7fc ff22 	bl	8001934 <HAL_GetTick>
 8004af0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004af2:	e009      	b.n	8004b08 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004af4:	f7fc ff1e 	bl	8001934 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b02:	d901      	bls.n	8004b08 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e006      	b.n	8004b16 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0311 	and.w	r3, r3, #17
 8004b10:	2b11      	cmp	r3, #17
 8004b12:	d1ef      	bne.n	8004af4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	58024800 	.word	0x58024800

08004b24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08c      	sub	sp, #48	; 0x30
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e397      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8087 	beq.w	8004c52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b44:	4b9e      	ldr	r3, [pc, #632]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b4e:	4b9c      	ldr	r3, [pc, #624]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d007      	beq.n	8004b6a <HAL_RCC_OscConfig+0x46>
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	2b18      	cmp	r3, #24
 8004b5e:	d110      	bne.n	8004b82 <HAL_RCC_OscConfig+0x5e>
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d10b      	bne.n	8004b82 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6a:	4b95      	ldr	r3, [pc, #596]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d06c      	beq.n	8004c50 <HAL_RCC_OscConfig+0x12c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d168      	bne.n	8004c50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e371      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x76>
 8004b8c:	4b8c      	ldr	r3, [pc, #560]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a8b      	ldr	r2, [pc, #556]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	e02e      	b.n	8004bf8 <HAL_RCC_OscConfig+0xd4>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x98>
 8004ba2:	4b87      	ldr	r3, [pc, #540]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a86      	ldr	r2, [pc, #536]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b84      	ldr	r3, [pc, #528]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a83      	ldr	r2, [pc, #524]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e01d      	b.n	8004bf8 <HAL_RCC_OscConfig+0xd4>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0xbc>
 8004bc6:	4b7e      	ldr	r3, [pc, #504]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a7d      	ldr	r2, [pc, #500]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4b7b      	ldr	r3, [pc, #492]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7a      	ldr	r2, [pc, #488]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0xd4>
 8004be0:	4b77      	ldr	r3, [pc, #476]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a76      	ldr	r2, [pc, #472]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	4b74      	ldr	r3, [pc, #464]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a73      	ldr	r2, [pc, #460]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fc fe98 	bl	8001934 <HAL_GetTick>
 8004c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c08:	f7fc fe94 	bl	8001934 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b64      	cmp	r3, #100	; 0x64
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e325      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c1a:	4b69      	ldr	r3, [pc, #420]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0xe4>
 8004c26:	e014      	b.n	8004c52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fc fe84 	bl	8001934 <HAL_GetTick>
 8004c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fc fe80 	bl	8001934 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e311      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c42:	4b5f      	ldr	r3, [pc, #380]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x10c>
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 808a 	beq.w	8004d74 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c60:	4b57      	ldr	r3, [pc, #348]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c6a:	4b55      	ldr	r3, [pc, #340]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <HAL_RCC_OscConfig+0x162>
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	2b18      	cmp	r3, #24
 8004c7a:	d137      	bne.n	8004cec <HAL_RCC_OscConfig+0x1c8>
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d132      	bne.n	8004cec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c86:	4b4e      	ldr	r3, [pc, #312]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_RCC_OscConfig+0x17a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e2e3      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c9e:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 0219 	bic.w	r2, r3, #25
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	4945      	ldr	r1, [pc, #276]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cb0:	f7fc fe40 	bl	8001934 <HAL_GetTick>
 8004cb4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cb8:	f7fc fe3c 	bl	8001934 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e2cd      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cca:	4b3d      	ldr	r3, [pc, #244]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd6:	4b3a      	ldr	r3, [pc, #232]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	061b      	lsls	r3, r3, #24
 8004ce4:	4936      	ldr	r1, [pc, #216]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cea:	e043      	b.n	8004d74 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d026      	beq.n	8004d42 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cf4:	4b32      	ldr	r3, [pc, #200]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 0219 	bic.w	r2, r3, #25
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	492f      	ldr	r1, [pc, #188]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7fc fe15 	bl	8001934 <HAL_GetTick>
 8004d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d0e:	f7fc fe11 	bl	8001934 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e2a2      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d20:	4b27      	ldr	r3, [pc, #156]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2c:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	061b      	lsls	r3, r3, #24
 8004d3a:	4921      	ldr	r1, [pc, #132]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
 8004d40:	e018      	b.n	8004d74 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d42:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4e:	f7fc fdf1 	bl	8001934 <HAL_GetTick>
 8004d52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d56:	f7fc fded 	bl	8001934 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e27e      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d68:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f0      	bne.n	8004d56 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d06d      	beq.n	8004e5c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d007      	beq.n	8004da6 <HAL_RCC_OscConfig+0x282>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b18      	cmp	r3, #24
 8004d9a:	d11e      	bne.n	8004dda <HAL_RCC_OscConfig+0x2b6>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d119      	bne.n	8004dda <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCC_OscConfig+0x29c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x2a0>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d004      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e253      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dc4:	4ba3      	ldr	r3, [pc, #652]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	49a0      	ldr	r1, [pc, #640]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dd8:	e040      	b.n	8004e5c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d023      	beq.n	8004e2a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004de2:	4b9c      	ldr	r3, [pc, #624]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a9b      	ldr	r2, [pc, #620]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7fc fda1 	bl	8001934 <HAL_GetTick>
 8004df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004df6:	f7fc fd9d 	bl	8001934 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e22e      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e08:	4b92      	ldr	r3, [pc, #584]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e14:	4b8f      	ldr	r3, [pc, #572]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	498c      	ldr	r1, [pc, #560]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60cb      	str	r3, [r1, #12]
 8004e28:	e018      	b.n	8004e5c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e2a:	4b8a      	ldr	r3, [pc, #552]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a89      	ldr	r2, [pc, #548]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fc fd7d 	bl	8001934 <HAL_GetTick>
 8004e3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e3e:	f7fc fd79 	bl	8001934 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e20a      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e50:	4b80      	ldr	r3, [pc, #512]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f0      	bne.n	8004e3e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d036      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d019      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e70:	4b78      	ldr	r3, [pc, #480]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e74:	4a77      	ldr	r2, [pc, #476]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fc fd5a 	bl	8001934 <HAL_GetTick>
 8004e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e84:	f7fc fd56 	bl	8001934 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e1e7      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e96:	4b6f      	ldr	r3, [pc, #444]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0x360>
 8004ea2:	e018      	b.n	8004ed6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea4:	4b6b      	ldr	r3, [pc, #428]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea8:	4a6a      	ldr	r2, [pc, #424]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb0:	f7fc fd40 	bl	8001934 <HAL_GetTick>
 8004eb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb8:	f7fc fd3c 	bl	8001934 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e1cd      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eca:	4b62      	ldr	r3, [pc, #392]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d036      	beq.n	8004f50 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d019      	beq.n	8004f1e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004eea:	4b5a      	ldr	r3, [pc, #360]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a59      	ldr	r2, [pc, #356]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ef4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ef6:	f7fc fd1d 	bl	8001934 <HAL_GetTick>
 8004efa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004efe:	f7fc fd19 	bl	8001934 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e1aa      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f10:	4b50      	ldr	r3, [pc, #320]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x3da>
 8004f1c:	e018      	b.n	8004f50 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f1e:	4b4d      	ldr	r3, [pc, #308]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a4c      	ldr	r2, [pc, #304]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f2a:	f7fc fd03 	bl	8001934 <HAL_GetTick>
 8004f2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f32:	f7fc fcff 	bl	8001934 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e190      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f44:	4b43      	ldr	r3, [pc, #268]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f0      	bne.n	8004f32 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8085 	beq.w	8005068 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f5e:	4b3e      	ldr	r3, [pc, #248]	; (8005058 <HAL_RCC_OscConfig+0x534>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a3d      	ldr	r2, [pc, #244]	; (8005058 <HAL_RCC_OscConfig+0x534>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f6a:	f7fc fce3 	bl	8001934 <HAL_GetTick>
 8004f6e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f72:	f7fc fcdf 	bl	8001934 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b64      	cmp	r3, #100	; 0x64
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e170      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f84:	4b34      	ldr	r3, [pc, #208]	; (8005058 <HAL_RCC_OscConfig+0x534>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d106      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x482>
 8004f98:	4b2e      	ldr	r3, [pc, #184]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa4:	e02d      	b.n	8005002 <HAL_RCC_OscConfig+0x4de>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x4a4>
 8004fae:	4b29      	ldr	r3, [pc, #164]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	4a28      	ldr	r2, [pc, #160]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fba:	4b26      	ldr	r3, [pc, #152]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbe:	4a25      	ldr	r2, [pc, #148]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc6:	e01c      	b.n	8005002 <HAL_RCC_OscConfig+0x4de>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b05      	cmp	r3, #5
 8004fce:	d10c      	bne.n	8004fea <HAL_RCC_OscConfig+0x4c6>
 8004fd0:	4b20      	ldr	r3, [pc, #128]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004fd6:	f043 0304 	orr.w	r3, r3, #4
 8004fda:	6713      	str	r3, [r2, #112]	; 0x70
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe8:	e00b      	b.n	8005002 <HAL_RCC_OscConfig+0x4de>
 8004fea:	4b1a      	ldr	r3, [pc, #104]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	4a19      	ldr	r2, [pc, #100]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff6:	4b17      	ldr	r3, [pc, #92]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffa:	4a16      	ldr	r2, [pc, #88]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 8004ffc:	f023 0304 	bic.w	r3, r3, #4
 8005000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d015      	beq.n	8005036 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500a:	f7fc fc93 	bl	8001934 <HAL_GetTick>
 800500e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005010:	e00a      	b.n	8005028 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fc fc8f 	bl	8001934 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e11e      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <HAL_RCC_OscConfig+0x530>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ee      	beq.n	8005012 <HAL_RCC_OscConfig+0x4ee>
 8005034:	e018      	b.n	8005068 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005036:	f7fc fc7d 	bl	8001934 <HAL_GetTick>
 800503a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800503c:	e00e      	b.n	800505c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800503e:	f7fc fc79 	bl	8001934 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	f241 3288 	movw	r2, #5000	; 0x1388
 800504c:	4293      	cmp	r3, r2
 800504e:	d905      	bls.n	800505c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e108      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
 8005054:	58024400 	.word	0x58024400
 8005058:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800505c:	4b84      	ldr	r3, [pc, #528]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ea      	bne.n	800503e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 80f9 	beq.w	8005264 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005072:	4b7f      	ldr	r3, [pc, #508]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800507a:	2b18      	cmp	r3, #24
 800507c:	f000 80b4 	beq.w	80051e8 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	2b02      	cmp	r3, #2
 8005086:	f040 8095 	bne.w	80051b4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508a:	4b79      	ldr	r3, [pc, #484]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a78      	ldr	r2, [pc, #480]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005090:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005096:	f7fc fc4d 	bl	8001934 <HAL_GetTick>
 800509a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800509e:	f7fc fc49 	bl	8001934 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e0da      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050b0:	4b6f      	ldr	r3, [pc, #444]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f0      	bne.n	800509e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050bc:	4b6c      	ldr	r3, [pc, #432]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 80050be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c0:	4b6c      	ldr	r3, [pc, #432]	; (8005274 <HAL_RCC_OscConfig+0x750>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050cc:	0112      	lsls	r2, r2, #4
 80050ce:	430a      	orrs	r2, r1
 80050d0:	4967      	ldr	r1, [pc, #412]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	628b      	str	r3, [r1, #40]	; 0x28
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	3b01      	subs	r3, #1
 80050dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e4:	3b01      	subs	r3, #1
 80050e6:	025b      	lsls	r3, r3, #9
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	3b01      	subs	r3, #1
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	3b01      	subs	r3, #1
 8005100:	061b      	lsls	r3, r3, #24
 8005102:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005106:	495a      	ldr	r1, [pc, #360]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005108:	4313      	orrs	r3, r2
 800510a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800510c:	4b58      	ldr	r3, [pc, #352]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	4a57      	ldr	r2, [pc, #348]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005118:	4b55      	ldr	r3, [pc, #340]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800511a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511c:	4b56      	ldr	r3, [pc, #344]	; (8005278 <HAL_RCC_OscConfig+0x754>)
 800511e:	4013      	ands	r3, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005124:	00d2      	lsls	r2, r2, #3
 8005126:	4952      	ldr	r1, [pc, #328]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005128:	4313      	orrs	r3, r2
 800512a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800512c:	4b50      	ldr	r3, [pc, #320]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	f023 020c 	bic.w	r2, r3, #12
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	494d      	ldr	r1, [pc, #308]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800513e:	4b4c      	ldr	r3, [pc, #304]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	f023 0202 	bic.w	r2, r3, #2
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	4949      	ldr	r1, [pc, #292]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800514c:	4313      	orrs	r3, r2
 800514e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005150:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	4a46      	ldr	r2, [pc, #280]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515c:	4b44      	ldr	r3, [pc, #272]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a43      	ldr	r2, [pc, #268]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005168:	4b41      	ldr	r3, [pc, #260]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	4a40      	ldr	r2, [pc, #256]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800516e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005174:	4b3e      	ldr	r3, [pc, #248]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	4a3d      	ldr	r2, [pc, #244]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005180:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a3a      	ldr	r2, [pc, #232]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 8005186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800518a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518c:	f7fc fbd2 	bl	8001934 <HAL_GetTick>
 8005190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005194:	f7fc fbce 	bl	8001934 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e05f      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051a6:	4b32      	ldr	r3, [pc, #200]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x670>
 80051b2:	e057      	b.n	8005264 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b4:	4b2e      	ldr	r3, [pc, #184]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2d      	ldr	r2, [pc, #180]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 80051ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fc fbb8 	bl	8001934 <HAL_GetTick>
 80051c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c8:	f7fc fbb4 	bl	8001934 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e045      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051da:	4b25      	ldr	r3, [pc, #148]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x6a4>
 80051e6:	e03d      	b.n	8005264 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051e8:	4b21      	ldr	r3, [pc, #132]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051ee:	4b20      	ldr	r3, [pc, #128]	; (8005270 <HAL_RCC_OscConfig+0x74c>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d031      	beq.n	8005260 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f003 0203 	and.w	r2, r3, #3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005206:	429a      	cmp	r2, r3
 8005208:	d12a      	bne.n	8005260 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005216:	429a      	cmp	r2, r3
 8005218:	d122      	bne.n	8005260 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005226:	429a      	cmp	r2, r3
 8005228:	d11a      	bne.n	8005260 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	0a5b      	lsrs	r3, r3, #9
 800522e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005236:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005238:	429a      	cmp	r2, r3
 800523a:	d111      	bne.n	8005260 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800524a:	429a      	cmp	r2, r3
 800524c:	d108      	bne.n	8005260 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	0e1b      	lsrs	r3, r3, #24
 8005252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800525c:	429a      	cmp	r2, r3
 800525e:	d001      	beq.n	8005264 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3730      	adds	r7, #48	; 0x30
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	58024400 	.word	0x58024400
 8005274:	fffffc0c 	.word	0xfffffc0c
 8005278:	ffff0007 	.word	0xffff0007

0800527c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e19c      	b.n	80055ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005290:	4b8a      	ldr	r3, [pc, #552]	; (80054bc <HAL_RCC_ClockConfig+0x240>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d910      	bls.n	80052c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b87      	ldr	r3, [pc, #540]	; (80054bc <HAL_RCC_ClockConfig+0x240>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f023 020f 	bic.w	r2, r3, #15
 80052a6:	4985      	ldr	r1, [pc, #532]	; (80054bc <HAL_RCC_ClockConfig+0x240>)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b83      	ldr	r3, [pc, #524]	; (80054bc <HAL_RCC_ClockConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e184      	b.n	80055ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d010      	beq.n	80052ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	4b7b      	ldr	r3, [pc, #492]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052d8:	429a      	cmp	r2, r3
 80052da:	d908      	bls.n	80052ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052dc:	4b78      	ldr	r3, [pc, #480]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	4975      	ldr	r1, [pc, #468]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d010      	beq.n	800531c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	4b70      	ldr	r3, [pc, #448]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005306:	429a      	cmp	r2, r3
 8005308:	d908      	bls.n	800531c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800530a:	4b6d      	ldr	r3, [pc, #436]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	496a      	ldr	r1, [pc, #424]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 8005318:	4313      	orrs	r3, r2
 800531a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	d010      	beq.n	800534a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	4b64      	ldr	r3, [pc, #400]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005334:	429a      	cmp	r2, r3
 8005336:	d908      	bls.n	800534a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005338:	4b61      	ldr	r3, [pc, #388]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	495e      	ldr	r1, [pc, #376]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 8005346:	4313      	orrs	r3, r2
 8005348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d010      	beq.n	8005378 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	4b59      	ldr	r3, [pc, #356]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005362:	429a      	cmp	r2, r3
 8005364:	d908      	bls.n	8005378 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005366:	4b56      	ldr	r3, [pc, #344]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	4953      	ldr	r1, [pc, #332]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 8005374:	4313      	orrs	r3, r2
 8005376:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d010      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	4b4d      	ldr	r3, [pc, #308]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	429a      	cmp	r2, r3
 8005392:	d908      	bls.n	80053a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005394:	4b4a      	ldr	r3, [pc, #296]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	f023 020f 	bic.w	r2, r3, #15
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	4947      	ldr	r1, [pc, #284]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d055      	beq.n	800545e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053b2:	4b43      	ldr	r3, [pc, #268]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	4940      	ldr	r1, [pc, #256]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d107      	bne.n	80053dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053cc:	4b3c      	ldr	r3, [pc, #240]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d121      	bne.n	800541c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e0f6      	b.n	80055ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d107      	bne.n	80053f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053e4:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d115      	bne.n	800541c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0ea      	b.n	80055ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d107      	bne.n	800540c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053fc:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0de      	b.n	80055ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800540c:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0d6      	b.n	80055ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800541c:	4b28      	ldr	r3, [pc, #160]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f023 0207 	bic.w	r2, r3, #7
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4925      	ldr	r1, [pc, #148]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 800542a:	4313      	orrs	r3, r2
 800542c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542e:	f7fc fa81 	bl	8001934 <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005434:	e00a      	b.n	800544c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005436:	f7fc fa7d 	bl	8001934 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f241 3288 	movw	r2, #5000	; 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e0be      	b.n	80055ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544c:	4b1c      	ldr	r3, [pc, #112]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	429a      	cmp	r2, r3
 800545c:	d1eb      	bne.n	8005436 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d010      	beq.n	800548c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	429a      	cmp	r2, r3
 8005478:	d208      	bcs.n	800548c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800547a:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f023 020f 	bic.w	r2, r3, #15
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	490e      	ldr	r1, [pc, #56]	; (80054c0 <HAL_RCC_ClockConfig+0x244>)
 8005488:	4313      	orrs	r3, r2
 800548a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <HAL_RCC_ClockConfig+0x240>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d214      	bcs.n	80054c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	4b08      	ldr	r3, [pc, #32]	; (80054bc <HAL_RCC_ClockConfig+0x240>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f023 020f 	bic.w	r2, r3, #15
 80054a2:	4906      	ldr	r1, [pc, #24]	; (80054bc <HAL_RCC_ClockConfig+0x240>)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054aa:	4b04      	ldr	r3, [pc, #16]	; (80054bc <HAL_RCC_ClockConfig+0x240>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e086      	b.n	80055ca <HAL_RCC_ClockConfig+0x34e>
 80054bc:	52002000 	.word	0x52002000
 80054c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d010      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	4b3f      	ldr	r3, [pc, #252]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054dc:	429a      	cmp	r2, r3
 80054de:	d208      	bcs.n	80054f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054e0:	4b3c      	ldr	r3, [pc, #240]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	4939      	ldr	r1, [pc, #228]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d010      	beq.n	8005520 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800550a:	429a      	cmp	r2, r3
 800550c:	d208      	bcs.n	8005520 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800550e:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	492e      	ldr	r1, [pc, #184]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 800551c:	4313      	orrs	r3, r2
 800551e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	d010      	beq.n	800554e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005538:	429a      	cmp	r2, r3
 800553a:	d208      	bcs.n	800554e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800553c:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	4922      	ldr	r1, [pc, #136]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 800554a:	4313      	orrs	r3, r2
 800554c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d010      	beq.n	800557c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69da      	ldr	r2, [r3, #28]
 800555e:	4b1d      	ldr	r3, [pc, #116]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005566:	429a      	cmp	r2, r3
 8005568:	d208      	bcs.n	800557c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800556a:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	4917      	ldr	r1, [pc, #92]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 8005578:	4313      	orrs	r3, r2
 800557a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800557c:	f000 f834 	bl	80055e8 <HAL_RCC_GetSysClockFreq>
 8005580:	4602      	mov	r2, r0
 8005582:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	0a1b      	lsrs	r3, r3, #8
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	4912      	ldr	r1, [pc, #72]	; (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 800558e:	5ccb      	ldrb	r3, [r1, r3]
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
 8005598:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <HAL_RCC_ClockConfig+0x358>)
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	4a0d      	ldr	r2, [pc, #52]	; (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 80055a4:	5cd3      	ldrb	r3, [r2, r3]
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
 80055b0:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <HAL_RCC_ClockConfig+0x360>)
 80055b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055b4:	4a0a      	ldr	r2, [pc, #40]	; (80055e0 <HAL_RCC_ClockConfig+0x364>)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80055ba:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <HAL_RCC_ClockConfig+0x368>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fc f96e 	bl	80018a0 <HAL_InitTick>
 80055c4:	4603      	mov	r3, r0
 80055c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	58024400 	.word	0x58024400
 80055d8:	0800b220 	.word	0x0800b220
 80055dc:	24000418 	.word	0x24000418
 80055e0:	24000414 	.word	0x24000414
 80055e4:	2400040c 	.word	0x2400040c

080055e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b089      	sub	sp, #36	; 0x24
 80055ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ee:	4bb3      	ldr	r3, [pc, #716]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055f6:	2b18      	cmp	r3, #24
 80055f8:	f200 8155 	bhi.w	80058a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005669 	.word	0x08005669
 8005608:	080058a7 	.word	0x080058a7
 800560c:	080058a7 	.word	0x080058a7
 8005610:	080058a7 	.word	0x080058a7
 8005614:	080058a7 	.word	0x080058a7
 8005618:	080058a7 	.word	0x080058a7
 800561c:	080058a7 	.word	0x080058a7
 8005620:	080058a7 	.word	0x080058a7
 8005624:	0800568f 	.word	0x0800568f
 8005628:	080058a7 	.word	0x080058a7
 800562c:	080058a7 	.word	0x080058a7
 8005630:	080058a7 	.word	0x080058a7
 8005634:	080058a7 	.word	0x080058a7
 8005638:	080058a7 	.word	0x080058a7
 800563c:	080058a7 	.word	0x080058a7
 8005640:	080058a7 	.word	0x080058a7
 8005644:	08005695 	.word	0x08005695
 8005648:	080058a7 	.word	0x080058a7
 800564c:	080058a7 	.word	0x080058a7
 8005650:	080058a7 	.word	0x080058a7
 8005654:	080058a7 	.word	0x080058a7
 8005658:	080058a7 	.word	0x080058a7
 800565c:	080058a7 	.word	0x080058a7
 8005660:	080058a7 	.word	0x080058a7
 8005664:	0800569b 	.word	0x0800569b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005668:	4b94      	ldr	r3, [pc, #592]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d009      	beq.n	8005688 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005674:	4b91      	ldr	r3, [pc, #580]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	08db      	lsrs	r3, r3, #3
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	4a90      	ldr	r2, [pc, #576]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005680:	fa22 f303 	lsr.w	r3, r2, r3
 8005684:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005686:	e111      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005688:	4b8d      	ldr	r3, [pc, #564]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800568a:	61bb      	str	r3, [r7, #24]
    break;
 800568c:	e10e      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800568e:	4b8d      	ldr	r3, [pc, #564]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005690:	61bb      	str	r3, [r7, #24]
    break;
 8005692:	e10b      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005694:	4b8c      	ldr	r3, [pc, #560]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005696:	61bb      	str	r3, [r7, #24]
    break;
 8005698:	e108      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800569a:	4b88      	ldr	r3, [pc, #544]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80056a4:	4b85      	ldr	r3, [pc, #532]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	091b      	lsrs	r3, r3, #4
 80056aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056b0:	4b82      	ldr	r3, [pc, #520]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80056ba:	4b80      	ldr	r3, [pc, #512]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056be:	08db      	lsrs	r3, r3, #3
 80056c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	fb02 f303 	mul.w	r3, r2, r3
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80e1 	beq.w	80058a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	f000 8083 	beq.w	80057ec <HAL_RCC_GetSysClockFreq+0x204>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	f200 80a1 	bhi.w	8005830 <HAL_RCC_GetSysClockFreq+0x248>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x114>
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d056      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056fa:	e099      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056fc:	4b6f      	ldr	r3, [pc, #444]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d02d      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005708:	4b6c      	ldr	r3, [pc, #432]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	08db      	lsrs	r3, r3, #3
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	4a6b      	ldr	r2, [pc, #428]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
 8005718:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	ee07 3a90 	vmov	s15, r3
 8005720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005732:	4b62      	ldr	r3, [pc, #392]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005742:	ed97 6a02 	vldr	s12, [r7, #8]
 8005746:	eddf 5a61 	vldr	s11, [pc, #388]	; 80058cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800574a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005762:	e087      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80058d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005776:	4b51      	ldr	r3, [pc, #324]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005786:	ed97 6a02 	vldr	s12, [r7, #8]
 800578a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80058cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800578e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057a6:	e065      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80058d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ba:	4b40      	ldr	r3, [pc, #256]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80058cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80057d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ea:	e043      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80058d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fe:	4b2f      	ldr	r3, [pc, #188]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005812:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80058cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800582e:	e021      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80058d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800583e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005842:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005852:	ed97 6a02 	vldr	s12, [r7, #8]
 8005856:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80058cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800585a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005872:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005874:	4b11      	ldr	r3, [pc, #68]	; (80058bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	0a5b      	lsrs	r3, r3, #9
 800587a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800587e:	3301      	adds	r3, #1
 8005880:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800588c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005898:	ee17 3a90 	vmov	r3, s15
 800589c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800589e:	e005      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61bb      	str	r3, [r7, #24]
    break;
 80058a4:	e002      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058a8:	61bb      	str	r3, [r7, #24]
    break;
 80058aa:	bf00      	nop
  }

  return sysclockfreq;
 80058ac:	69bb      	ldr	r3, [r7, #24]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3724      	adds	r7, #36	; 0x24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	58024400 	.word	0x58024400
 80058c0:	03d09000 	.word	0x03d09000
 80058c4:	003d0900 	.word	0x003d0900
 80058c8:	017d7840 	.word	0x017d7840
 80058cc:	46000000 	.word	0x46000000
 80058d0:	4c742400 	.word	0x4c742400
 80058d4:	4a742400 	.word	0x4a742400
 80058d8:	4bbebc20 	.word	0x4bbebc20

080058dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058e2:	f7ff fe81 	bl	80055e8 <HAL_RCC_GetSysClockFreq>
 80058e6:	4602      	mov	r2, r0
 80058e8:	4b10      	ldr	r3, [pc, #64]	; (800592c <HAL_RCC_GetHCLKFreq+0x50>)
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	0a1b      	lsrs	r3, r3, #8
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	490f      	ldr	r1, [pc, #60]	; (8005930 <HAL_RCC_GetHCLKFreq+0x54>)
 80058f4:	5ccb      	ldrb	r3, [r1, r3]
 80058f6:	f003 031f 	and.w	r3, r3, #31
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <HAL_RCC_GetHCLKFreq+0x50>)
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	4a09      	ldr	r2, [pc, #36]	; (8005930 <HAL_RCC_GetHCLKFreq+0x54>)
 800590a:	5cd3      	ldrb	r3, [r2, r3]
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	fa22 f303 	lsr.w	r3, r2, r3
 8005916:	4a07      	ldr	r2, [pc, #28]	; (8005934 <HAL_RCC_GetHCLKFreq+0x58>)
 8005918:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800591a:	4a07      	ldr	r2, [pc, #28]	; (8005938 <HAL_RCC_GetHCLKFreq+0x5c>)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005920:	4b04      	ldr	r3, [pc, #16]	; (8005934 <HAL_RCC_GetHCLKFreq+0x58>)
 8005922:	681b      	ldr	r3, [r3, #0]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	58024400 	.word	0x58024400
 8005930:	0800b220 	.word	0x0800b220
 8005934:	24000418 	.word	0x24000418
 8005938:	24000414 	.word	0x24000414

0800593c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005944:	2300      	movs	r3, #0
 8005946:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005948:	2300      	movs	r3, #0
 800594a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d03f      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005960:	d02a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005962:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005966:	d824      	bhi.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800596c:	d018      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800596e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005972:	d81e      	bhi.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800597c:	d007      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800597e:	e018      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005980:	4bab      	ldr	r3, [pc, #684]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	4aaa      	ldr	r2, [pc, #680]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800598a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800598c:	e015      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3304      	adds	r3, #4
 8005992:	2102      	movs	r1, #2
 8005994:	4618      	mov	r0, r3
 8005996:	f001 feff 	bl	8007798 <RCCEx_PLL2_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800599e:	e00c      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3324      	adds	r3, #36	; 0x24
 80059a4:	2102      	movs	r1, #2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 ffa8 	bl	80078fc <RCCEx_PLL3_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
      break;
 80059b6:	e000      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059c0:	4b9b      	ldr	r3, [pc, #620]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059cc:	4998      	ldr	r1, [pc, #608]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	650b      	str	r3, [r1, #80]	; 0x50
 80059d2:	e001      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d03d      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d826      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a09 	.word	0x08005a09
 80059f8:	08005a17 	.word	0x08005a17
 80059fc:	08005a29 	.word	0x08005a29
 8005a00:	08005a41 	.word	0x08005a41
 8005a04:	08005a41 	.word	0x08005a41
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a08:	4b89      	ldr	r3, [pc, #548]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	4a88      	ldr	r2, [pc, #544]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a14:	e015      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f001 febb 	bl	8007798 <RCCEx_PLL2_Config>
 8005a22:	4603      	mov	r3, r0
 8005a24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a26:	e00c      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3324      	adds	r3, #36	; 0x24
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 ff64 	bl	80078fc <RCCEx_PLL3_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a38:	e003      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3e:	e000      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a48:	4b79      	ldr	r3, [pc, #484]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4c:	f023 0207 	bic.w	r2, r3, #7
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a54:	4976      	ldr	r1, [pc, #472]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	650b      	str	r3, [r1, #80]	; 0x50
 8005a5a:	e001      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d051      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a72:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005a76:	d036      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a78:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005a7c:	d830      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a82:	d032      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005a84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a88:	d82a      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a8e:	d02e      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005a90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a94:	d824      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a9a:	d018      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa0:	d81e      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aaa:	d007      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005aac:	e018      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aae:	4b60      	ldr	r3, [pc, #384]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	4a5f      	ldr	r2, [pc, #380]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005aba:	e019      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 fe68 	bl	8007798 <RCCEx_PLL2_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005acc:	e010      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3324      	adds	r3, #36	; 0x24
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 ff11 	bl	80078fc <RCCEx_PLL3_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ade:	e007      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae4:	e004      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005ae6:	bf00      	nop
 8005ae8:	e002      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005aea:	bf00      	nop
 8005aec:	e000      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005af6:	4b4e      	ldr	r3, [pc, #312]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b04:	494a      	ldr	r1, [pc, #296]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	658b      	str	r3, [r1, #88]	; 0x58
 8005b0a:	e001      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
 8005b0e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d051      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b22:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005b26:	d036      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005b28:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005b2c:	d830      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b32:	d032      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005b34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b38:	d82a      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b3e:	d02e      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005b40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b44:	d824      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b4a:	d018      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005b4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b50:	d81e      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005b56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b5a:	d007      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005b5c:	e018      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b5e:	4b34      	ldr	r3, [pc, #208]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	4a33      	ldr	r2, [pc, #204]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b6a:	e019      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f001 fe10 	bl	8007798 <RCCEx_PLL2_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b7c:	e010      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3324      	adds	r3, #36	; 0x24
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 feb9 	bl	80078fc <RCCEx_PLL3_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b8e:	e007      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	75fb      	strb	r3, [r7, #23]
      break;
 8005b94:	e004      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b96:	bf00      	nop
 8005b98:	e002      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b9a:	bf00      	nop
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ba6:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bb4:	491e      	ldr	r1, [pc, #120]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	658b      	str	r3, [r1, #88]	; 0x58
 8005bba:	e001      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d035      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd0:	2b30      	cmp	r3, #48	; 0x30
 8005bd2:	d01c      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005bd4:	2b30      	cmp	r3, #48	; 0x30
 8005bd6:	d817      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d00c      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d813      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d016      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005be4:	2b10      	cmp	r3, #16
 8005be6:	d10f      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be8:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	4a10      	ldr	r2, [pc, #64]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005bf4:	e00e      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fdcb 	bl	8007798 <RCCEx_PLL2_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005c06:	e005      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0c:	e002      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c26:	4902      	ldr	r1, [pc, #8]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c2c:	e004      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005c2e:	bf00      	nop
 8005c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d047      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c4c:	d030      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c52:	d82a      	bhi.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c58:	d02c      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005c5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c5e:	d824      	bhi.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c64:	d018      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6a:	d81e      	bhi.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c74:	d007      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c76:	e018      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c78:	4bac      	ldr	r3, [pc, #688]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	4aab      	ldr	r2, [pc, #684]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c84:	e017      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 fd83 	bl	8007798 <RCCEx_PLL2_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c96:	e00e      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3324      	adds	r3, #36	; 0x24
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fe2c 	bl	80078fc <RCCEx_PLL3_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ca8:	e005      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	75fb      	strb	r3, [r7, #23]
      break;
 8005cae:	e002      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005cb0:	bf00      	nop
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005cbc:	4b9b      	ldr	r3, [pc, #620]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc8:	4998      	ldr	r1, [pc, #608]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	650b      	str	r3, [r1, #80]	; 0x50
 8005cce:	e001      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d049      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ce8:	d02e      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005cea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cee:	d828      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005cf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cf4:	d02a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005cf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cfa:	d822      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005cfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d00:	d026      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005d02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d06:	d81c      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d0c:	d010      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005d0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d12:	d816      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01d      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1c:	d111      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	2101      	movs	r1, #1
 8005d24:	4618      	mov	r0, r3
 8005d26:	f001 fd37 	bl	8007798 <RCCEx_PLL2_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d2e:	e012      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3324      	adds	r3, #36	; 0x24
 8005d34:	2101      	movs	r1, #1
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 fde0 	bl	80078fc <RCCEx_PLL3_Config>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d40:	e009      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]
      break;
 8005d46:	e006      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d48:	bf00      	nop
 8005d4a:	e004      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d4c:	bf00      	nop
 8005d4e:	e002      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d50:	bf00      	nop
 8005d52:	e000      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d109      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d5c:	4b73      	ldr	r3, [pc, #460]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d60:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d68:	4970      	ldr	r1, [pc, #448]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	650b      	str	r3, [r1, #80]	; 0x50
 8005d6e:	e001      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d04b      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d8a:	d02e      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d90:	d828      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d96:	d02a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d822      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005da2:	d026      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005da4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005da8:	d81c      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dae:	d010      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db4:	d816      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01d      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dbe:	d111      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fce6 	bl	8007798 <RCCEx_PLL2_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005dd0:	e012      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3324      	adds	r3, #36	; 0x24
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 fd8f 	bl	80078fc <RCCEx_PLL3_Config>
 8005dde:	4603      	mov	r3, r0
 8005de0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005de2:	e009      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
      break;
 8005de8:	e006      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005dea:	bf00      	nop
 8005dec:	e004      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005dfe:	4b4b      	ldr	r3, [pc, #300]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e0c:	4947      	ldr	r1, [pc, #284]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	658b      	str	r3, [r1, #88]	; 0x58
 8005e12:	e001      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d02f      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2c:	d00e      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e32:	d814      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d015      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e3c:	d10f      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3e:	4b3b      	ldr	r3, [pc, #236]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	4a3a      	ldr	r2, [pc, #232]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e4a:	e00c      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	2101      	movs	r1, #1
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 fca0 	bl	8007798 <RCCEx_PLL2_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e5c:	e003      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	75fb      	strb	r3, [r7, #23]
      break;
 8005e62:	e000      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e6c:	4b2f      	ldr	r3, [pc, #188]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e78:	492c      	ldr	r1, [pc, #176]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e7e:	e001      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d032      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d81b      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005e98:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9e:	bf00      	nop
 8005ea0:	08005ed7 	.word	0x08005ed7
 8005ea4:	08005eb1 	.word	0x08005eb1
 8005ea8:	08005ebf 	.word	0x08005ebf
 8005eac:	08005ed7 	.word	0x08005ed7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb0:	4b1e      	ldr	r3, [pc, #120]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ebc:	e00c      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	2102      	movs	r1, #2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fc67 	bl	8007798 <RCCEx_PLL2_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ece:	e003      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed4:	e000      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ede:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee2:	f023 0203 	bic.w	r2, r3, #3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	4910      	ldr	r1, [pc, #64]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ef0:	e001      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 808a 	beq.w	8006018 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f10:	f7fb fd10 	bl	8001934 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f16:	e00d      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f18:	f7fb fd0c 	bl	8001934 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	; 0x64
 8005f24:	d906      	bls.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	75fb      	strb	r3, [r7, #23]
        break;
 8005f2a:	e009      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005f2c:	58024400 	.word	0x58024400
 8005f30:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f34:	4bb9      	ldr	r3, [pc, #740]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0eb      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d166      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f46:	4bb6      	ldr	r3, [pc, #728]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f50:	4053      	eors	r3, r2
 8005f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d013      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f5a:	4bb1      	ldr	r3, [pc, #708]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f62:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f64:	4bae      	ldr	r3, [pc, #696]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	4aad      	ldr	r2, [pc, #692]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f6e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f70:	4bab      	ldr	r3, [pc, #684]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	4aaa      	ldr	r2, [pc, #680]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f7a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f7c:	4aa8      	ldr	r2, [pc, #672]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8c:	d115      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8e:	f7fb fcd1 	bl	8001934 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f94:	e00b      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f96:	f7fb fccd 	bl	8001934 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d902      	bls.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	75fb      	strb	r3, [r7, #23]
            break;
 8005fac:	e005      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fae:	4b9c      	ldr	r3, [pc, #624]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0ed      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d126      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fce:	d10d      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005fd0:	4b93      	ldr	r3, [pc, #588]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fde:	0919      	lsrs	r1, r3, #4
 8005fe0:	4b90      	ldr	r3, [pc, #576]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005fe2:	400b      	ands	r3, r1
 8005fe4:	498e      	ldr	r1, [pc, #568]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	610b      	str	r3, [r1, #16]
 8005fea:	e005      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005fec:	4b8c      	ldr	r3, [pc, #560]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	4a8b      	ldr	r2, [pc, #556]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ff2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ff6:	6113      	str	r3, [r2, #16]
 8005ff8:	4b89      	ldr	r3, [pc, #548]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ffa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006006:	4986      	ldr	r1, [pc, #536]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006008:	4313      	orrs	r3, r2
 800600a:	670b      	str	r3, [r1, #112]	; 0x70
 800600c:	e004      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	75bb      	strb	r3, [r7, #22]
 8006012:	e001      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d07e      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006028:	2b28      	cmp	r3, #40	; 0x28
 800602a:	d867      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800602c:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	08006103 	.word	0x08006103
 8006038:	080060fd 	.word	0x080060fd
 800603c:	080060fd 	.word	0x080060fd
 8006040:	080060fd 	.word	0x080060fd
 8006044:	080060fd 	.word	0x080060fd
 8006048:	080060fd 	.word	0x080060fd
 800604c:	080060fd 	.word	0x080060fd
 8006050:	080060fd 	.word	0x080060fd
 8006054:	080060d9 	.word	0x080060d9
 8006058:	080060fd 	.word	0x080060fd
 800605c:	080060fd 	.word	0x080060fd
 8006060:	080060fd 	.word	0x080060fd
 8006064:	080060fd 	.word	0x080060fd
 8006068:	080060fd 	.word	0x080060fd
 800606c:	080060fd 	.word	0x080060fd
 8006070:	080060fd 	.word	0x080060fd
 8006074:	080060eb 	.word	0x080060eb
 8006078:	080060fd 	.word	0x080060fd
 800607c:	080060fd 	.word	0x080060fd
 8006080:	080060fd 	.word	0x080060fd
 8006084:	080060fd 	.word	0x080060fd
 8006088:	080060fd 	.word	0x080060fd
 800608c:	080060fd 	.word	0x080060fd
 8006090:	080060fd 	.word	0x080060fd
 8006094:	08006103 	.word	0x08006103
 8006098:	080060fd 	.word	0x080060fd
 800609c:	080060fd 	.word	0x080060fd
 80060a0:	080060fd 	.word	0x080060fd
 80060a4:	080060fd 	.word	0x080060fd
 80060a8:	080060fd 	.word	0x080060fd
 80060ac:	080060fd 	.word	0x080060fd
 80060b0:	080060fd 	.word	0x080060fd
 80060b4:	08006103 	.word	0x08006103
 80060b8:	080060fd 	.word	0x080060fd
 80060bc:	080060fd 	.word	0x080060fd
 80060c0:	080060fd 	.word	0x080060fd
 80060c4:	080060fd 	.word	0x080060fd
 80060c8:	080060fd 	.word	0x080060fd
 80060cc:	080060fd 	.word	0x080060fd
 80060d0:	080060fd 	.word	0x080060fd
 80060d4:	08006103 	.word	0x08006103
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	2101      	movs	r1, #1
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fb5a 	bl	8007798 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060e8:	e00c      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3324      	adds	r3, #36	; 0x24
 80060ee:	2101      	movs	r1, #1
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 fc03 	bl	80078fc <RCCEx_PLL3_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060fa:	e003      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006100:	e000      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8006102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006104:	7dfb      	ldrb	r3, [r7, #23]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800610a:	4b45      	ldr	r3, [pc, #276]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800610c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006116:	4942      	ldr	r1, [pc, #264]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006118:	4313      	orrs	r3, r2
 800611a:	654b      	str	r3, [r1, #84]	; 0x54
 800611c:	e001      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611e:	7dfb      	ldrb	r3, [r7, #23]
 8006120:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d037      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006132:	2b05      	cmp	r3, #5
 8006134:	d820      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006136:	a201      	add	r2, pc, #4	; (adr r2, 800613c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	0800617f 	.word	0x0800617f
 8006140:	08006155 	.word	0x08006155
 8006144:	08006167 	.word	0x08006167
 8006148:	0800617f 	.word	0x0800617f
 800614c:	0800617f 	.word	0x0800617f
 8006150:	0800617f 	.word	0x0800617f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	2101      	movs	r1, #1
 800615a:	4618      	mov	r0, r3
 800615c:	f001 fb1c 	bl	8007798 <RCCEx_PLL2_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006164:	e00c      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3324      	adds	r3, #36	; 0x24
 800616a:	2101      	movs	r1, #1
 800616c:	4618      	mov	r0, r3
 800616e:	f001 fbc5 	bl	80078fc <RCCEx_PLL3_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006176:	e003      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
      break;
 800617c:	e000      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800617e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006186:	4b26      	ldr	r3, [pc, #152]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618a:	f023 0207 	bic.w	r2, r3, #7
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	4923      	ldr	r1, [pc, #140]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006194:	4313      	orrs	r3, r2
 8006196:	654b      	str	r3, [r1, #84]	; 0x54
 8006198:	e001      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d040      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	d821      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061ff 	.word	0x080061ff
 80061c0:	080061d5 	.word	0x080061d5
 80061c4:	080061e7 	.word	0x080061e7
 80061c8:	080061ff 	.word	0x080061ff
 80061cc:	080061ff 	.word	0x080061ff
 80061d0:	080061ff 	.word	0x080061ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	2101      	movs	r1, #1
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 fadc 	bl	8007798 <RCCEx_PLL2_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061e4:	e00c      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3324      	adds	r3, #36	; 0x24
 80061ea:	2101      	movs	r1, #1
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 fb85 	bl	80078fc <RCCEx_PLL3_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061f6:	e003      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	75fb      	strb	r3, [r7, #23]
      break;
 80061fc:	e000      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80061fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d110      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006206:	4b06      	ldr	r3, [pc, #24]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	f023 0207 	bic.w	r2, r3, #7
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006214:	4902      	ldr	r1, [pc, #8]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006216:	4313      	orrs	r3, r2
 8006218:	658b      	str	r3, [r1, #88]	; 0x58
 800621a:	e007      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800621c:	58024800 	.word	0x58024800
 8006220:	58024400 	.word	0x58024400
 8006224:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b00      	cmp	r3, #0
 8006236:	d04b      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006242:	d02e      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006248:	d828      	bhi.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800624a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624e:	d02a      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006254:	d822      	bhi.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006256:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800625a:	d026      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800625c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006260:	d81c      	bhi.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006266:	d010      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800626c:	d816      	bhi.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01d      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006276:	d111      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3304      	adds	r3, #4
 800627c:	2100      	movs	r1, #0
 800627e:	4618      	mov	r0, r3
 8006280:	f001 fa8a 	bl	8007798 <RCCEx_PLL2_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006288:	e012      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3324      	adds	r3, #36	; 0x24
 800628e:	2102      	movs	r1, #2
 8006290:	4618      	mov	r0, r3
 8006292:	f001 fb33 	bl	80078fc <RCCEx_PLL3_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800629a:	e009      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	75fb      	strb	r3, [r7, #23]
      break;
 80062a0:	e006      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80062a2:	bf00      	nop
 80062a4:	e004      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80062ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10a      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062b6:	4bb2      	ldr	r3, [pc, #712]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c4:	49ae      	ldr	r1, [pc, #696]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	654b      	str	r3, [r1, #84]	; 0x54
 80062ca:	e001      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d04b      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062e6:	d02e      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80062e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062ec:	d828      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	d02a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80062f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f8:	d822      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80062fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062fe:	d026      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006300:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006304:	d81c      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630a:	d010      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800630c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006310:	d816      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01d      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800631a:	d111      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f001 fa38 	bl	8007798 <RCCEx_PLL2_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800632c:	e012      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3324      	adds	r3, #36	; 0x24
 8006332:	2102      	movs	r1, #2
 8006334:	4618      	mov	r0, r3
 8006336:	f001 fae1 	bl	80078fc <RCCEx_PLL3_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800633e:	e009      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	75fb      	strb	r3, [r7, #23]
      break;
 8006344:	e006      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006346:	bf00      	nop
 8006348:	e004      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800634a:	bf00      	nop
 800634c:	e002      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800634e:	bf00      	nop
 8006350:	e000      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800635a:	4b89      	ldr	r3, [pc, #548]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006368:	4985      	ldr	r1, [pc, #532]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800636a:	4313      	orrs	r3, r2
 800636c:	658b      	str	r3, [r1, #88]	; 0x58
 800636e:	e001      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637c:	2b00      	cmp	r3, #0
 800637e:	d04b      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006386:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800638a:	d02e      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800638c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006390:	d828      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006396:	d02a      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639c:	d822      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800639e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063a2:	d026      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80063a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063a8:	d81c      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80063aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ae:	d010      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80063b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063b4:	d816      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01d      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80063ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063be:	d111      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3304      	adds	r3, #4
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 f9e6 	bl	8007798 <RCCEx_PLL2_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80063d0:	e012      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3324      	adds	r3, #36	; 0x24
 80063d6:	2102      	movs	r1, #2
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 fa8f 	bl	80078fc <RCCEx_PLL3_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80063e2:	e009      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
      break;
 80063e8:	e006      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80063ea:	bf00      	nop
 80063ec:	e004      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80063ee:	bf00      	nop
 80063f0:	e002      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80063f2:	bf00      	nop
 80063f4:	e000      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80063f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063fe:	4b60      	ldr	r3, [pc, #384]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800640c:	495c      	ldr	r1, [pc, #368]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800640e:	4313      	orrs	r3, r2
 8006410:	658b      	str	r3, [r1, #88]	; 0x58
 8006412:	e001      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d018      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642c:	d10a      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3324      	adds	r3, #36	; 0x24
 8006432:	2102      	movs	r1, #2
 8006434:	4618      	mov	r0, r3
 8006436:	f001 fa61 	bl	80078fc <RCCEx_PLL3_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006444:	4b4e      	ldr	r3, [pc, #312]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006448:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006450:	494b      	ldr	r1, [pc, #300]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006452:	4313      	orrs	r3, r2
 8006454:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01a      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646c:	d10a      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3324      	adds	r3, #36	; 0x24
 8006472:	2102      	movs	r1, #2
 8006474:	4618      	mov	r0, r3
 8006476:	f001 fa41 	bl	80078fc <RCCEx_PLL3_Config>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006484:	4b3e      	ldr	r3, [pc, #248]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006492:	493b      	ldr	r1, [pc, #236]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006494:	4313      	orrs	r3, r2
 8006496:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d034      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ae:	d01d      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80064b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064b4:	d817      	bhi.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80064ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064be:	d009      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80064c0:	e011      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3304      	adds	r3, #4
 80064c6:	2100      	movs	r1, #0
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 f965 	bl	8007798 <RCCEx_PLL2_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064d2:	e00c      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3324      	adds	r3, #36	; 0x24
 80064d8:	2102      	movs	r1, #2
 80064da:	4618      	mov	r0, r3
 80064dc:	f001 fa0e 	bl	80078fc <RCCEx_PLL3_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064e4:	e003      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
      break;
 80064ea:	e000      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80064ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064f4:	4b22      	ldr	r3, [pc, #136]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80064f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006502:	491f      	ldr	r1, [pc, #124]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006504:	4313      	orrs	r3, r2
 8006506:	658b      	str	r3, [r1, #88]	; 0x58
 8006508:	e001      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d036      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006520:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006524:	d01c      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006526:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800652a:	d816      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800652c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006530:	d003      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006536:	d007      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006538:	e00f      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800653c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653e:	4a10      	ldr	r2, [pc, #64]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006544:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006546:	e00c      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3324      	adds	r3, #36	; 0x24
 800654c:	2101      	movs	r1, #1
 800654e:	4618      	mov	r0, r3
 8006550:	f001 f9d4 	bl	80078fc <RCCEx_PLL3_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006558:	e003      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	75fb      	strb	r3, [r7, #23]
      break;
 800655e:	e000      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10d      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800656a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006576:	4902      	ldr	r1, [pc, #8]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006578:	4313      	orrs	r3, r2
 800657a:	654b      	str	r3, [r1, #84]	; 0x54
 800657c:	e004      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d029      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a0:	d007      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80065a2:	e00f      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a4:	4b61      	ldr	r3, [pc, #388]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	4a60      	ldr	r2, [pc, #384]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80065b0:	e00b      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3304      	adds	r3, #4
 80065b6:	2102      	movs	r1, #2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 f8ed 	bl	8007798 <RCCEx_PLL2_Config>
 80065be:	4603      	mov	r3, r0
 80065c0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80065c2:	e002      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
      break;
 80065c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d109      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80065d0:	4b56      	ldr	r3, [pc, #344]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065dc:	4953      	ldr	r1, [pc, #332]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065e2:	e001      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3324      	adds	r3, #36	; 0x24
 80065f8:	2102      	movs	r1, #2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 f97e 	bl	80078fc <RCCEx_PLL3_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d030      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800661a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800661e:	d017      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006624:	d811      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662a:	d013      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800662c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006630:	d80b      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d010      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663a:	d106      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800663c:	4b3b      	ldr	r3, [pc, #236]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4a3a      	ldr	r2, [pc, #232]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006648:	e007      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
      break;
 800664e:	e004      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006650:	bf00      	nop
 8006652:	e002      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006654:	bf00      	nop
 8006656:	e000      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006660:	4b32      	ldr	r3, [pc, #200]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800666c:	492f      	ldr	r1, [pc, #188]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800666e:	4313      	orrs	r3, r2
 8006670:	654b      	str	r3, [r1, #84]	; 0x54
 8006672:	e001      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006674:	7dfb      	ldrb	r3, [r7, #23]
 8006676:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006684:	4b29      	ldr	r3, [pc, #164]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006690:	4926      	ldr	r1, [pc, #152]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006692:	4313      	orrs	r3, r2
 8006694:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d008      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066a2:	4b22      	ldr	r3, [pc, #136]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ae:	491f      	ldr	r1, [pc, #124]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00d      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066c0:	4b1a      	ldr	r3, [pc, #104]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	4a19      	ldr	r2, [pc, #100]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ca:	6113      	str	r3, [r2, #16]
 80066cc:	4b17      	ldr	r3, [pc, #92]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066d6:	4915      	ldr	r1, [pc, #84]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	da08      	bge.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066e4:	4b11      	ldr	r3, [pc, #68]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f0:	490e      	ldr	r1, [pc, #56]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d009      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006702:	4b0a      	ldr	r3, [pc, #40]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006710:	4906      	ldr	r1, [pc, #24]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006712:	4313      	orrs	r3, r2
 8006714:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006716:	7dbb      	ldrb	r3, [r7, #22]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	e000      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	58024400 	.word	0x58024400

08006730 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b090      	sub	sp, #64	; 0x40
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673e:	f040 8089 	bne.w	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006742:	4b95      	ldr	r3, [pc, #596]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	633b      	str	r3, [r7, #48]	; 0x30
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	2b04      	cmp	r3, #4
 8006750:	d87d      	bhi.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006752:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	0800676d 	.word	0x0800676d
 800675c:	08006791 	.word	0x08006791
 8006760:	080067b5 	.word	0x080067b5
 8006764:	08006849 	.word	0x08006849
 8006768:	080067d9 	.word	0x080067d9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800676c:	4b8a      	ldr	r3, [pc, #552]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006778:	d107      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800677a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800677e:	4618      	mov	r0, r3
 8006780:	f000 feb8 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006788:	e3ed      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800678e:	e3ea      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006790:	4b81      	ldr	r3, [pc, #516]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800679c:	d107      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800679e:	f107 0318 	add.w	r3, r7, #24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fbfe 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067ac:	e3db      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067b2:	e3d8      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067b4:	4b78      	ldr	r3, [pc, #480]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c0:	d107      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067c2:	f107 030c 	add.w	r3, r7, #12
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fd40 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067d0:	e3c9      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067d6:	e3c6      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067d8:	4b6f      	ldr	r3, [pc, #444]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067e2:	4b6d      	ldr	r3, [pc, #436]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d10c      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80067ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067f4:	4b68      	ldr	r3, [pc, #416]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	08db      	lsrs	r3, r3, #3
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	4a67      	ldr	r2, [pc, #412]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006800:	fa22 f303 	lsr.w	r3, r2, r3
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006806:	e01e      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006808:	4b63      	ldr	r3, [pc, #396]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006814:	d106      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800681c:	d102      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800681e:	4b60      	ldr	r3, [pc, #384]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006822:	e010      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006824:	4b5c      	ldr	r3, [pc, #368]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006830:	d106      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006838:	d102      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800683a:	4b5a      	ldr	r3, [pc, #360]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800683c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683e:	e002      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006844:	e38f      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006846:	e38e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006848:	4b57      	ldr	r3, [pc, #348]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800684c:	e38b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006852:	e388      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685a:	f040 80a7 	bne.w	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800685e:	4b4e      	ldr	r3, [pc, #312]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006862:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006866:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800686e:	d054      	beq.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006876:	f200 808b 	bhi.w	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006880:	f000 8083 	beq.w	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800688a:	f200 8081 	bhi.w	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006894:	d02f      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800689c:	d878      	bhi.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068aa:	d012      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80068ac:	e070      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068ae:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ba:	d107      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fe17 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068ca:	e34c      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d0:	e349      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068d2:	4b31      	ldr	r3, [pc, #196]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068de:	d107      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e0:	f107 0318 	add.w	r3, r7, #24
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fb5d 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068ee:	e33a      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068f4:	e337      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068f6:	4b28      	ldr	r3, [pc, #160]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006902:	d107      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006904:	f107 030c 	add.w	r3, r7, #12
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fc9f 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006912:	e328      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006918:	e325      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800691a:	4b1f      	ldr	r3, [pc, #124]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800691c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006922:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006924:	4b1c      	ldr	r3, [pc, #112]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b04      	cmp	r3, #4
 800692e:	d10c      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8006930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006936:	4b18      	ldr	r3, [pc, #96]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	08db      	lsrs	r3, r3, #3
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	4a16      	ldr	r2, [pc, #88]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006942:	fa22 f303 	lsr.w	r3, r2, r3
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006948:	e01e      	b.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800694a:	4b13      	ldr	r3, [pc, #76]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006956:	d106      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800695e:	d102      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006960:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006964:	e010      	b.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006972:	d106      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800697a:	d102      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800697c:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006980:	e002      	b.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006986:	e2ee      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006988:	e2ed      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800698a:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800698c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800698e:	e2ea      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006994:	e2e7      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006996:	bf00      	nop
 8006998:	58024400 	.word	0x58024400
 800699c:	03d09000 	.word	0x03d09000
 80069a0:	003d0900 	.word	0x003d0900
 80069a4:	017d7840 	.word	0x017d7840
 80069a8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b2:	f040 809c 	bne.w	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80069b6:	4b9e      	ldr	r3, [pc, #632]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80069b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80069be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069c6:	d054      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069ce:	f200 808b 	bhi.w	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069d8:	f000 8083 	beq.w	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069e2:	f200 8081 	bhi.w	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ec:	d02f      	beq.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f4:	d878      	bhi.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a02:	d012      	beq.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006a04:	e070      	b.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a06:	4b8a      	ldr	r3, [pc, #552]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a12:	d107      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fd6b 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a22:	e2a0      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a28:	e29d      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a2a:	4b81      	ldr	r3, [pc, #516]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a36:	d107      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a38:	f107 0318 	add.w	r3, r7, #24
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fab1 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006a46:	e28e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a4c:	e28b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a4e:	4b78      	ldr	r3, [pc, #480]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a5a:	d107      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a5c:	f107 030c 	add.w	r3, r7, #12
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fbf3 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a6a:	e27c      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a70:	e279      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a72:	4b6f      	ldr	r3, [pc, #444]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a7c:	4b6c      	ldr	r3, [pc, #432]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d10c      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a8e:	4b68      	ldr	r3, [pc, #416]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	08db      	lsrs	r3, r3, #3
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	4a66      	ldr	r2, [pc, #408]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aa0:	e01e      	b.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006aa2:	4b63      	ldr	r3, [pc, #396]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aae:	d106      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab6:	d102      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ab8:	4b5f      	ldr	r3, [pc, #380]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006abc:	e010      	b.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006abe:	4b5c      	ldr	r3, [pc, #368]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aca:	d106      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad2:	d102      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ad4:	4b59      	ldr	r3, [pc, #356]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad8:	e002      	b.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ade:	e242      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006ae0:	e241      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ae2:	4b57      	ldr	r3, [pc, #348]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae6:	e23e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aec:	e23b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af4:	f040 80a6 	bne.w	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006af8:	4b4d      	ldr	r3, [pc, #308]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b00:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b08:	d054      	beq.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b10:	f200 808b 	bhi.w	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b1a:	f000 8083 	beq.w	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b24:	f200 8081 	bhi.w	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b2e:	d02f      	beq.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b36:	d878      	bhi.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b44:	d012      	beq.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8006b46:	e070      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b48:	4b39      	ldr	r3, [pc, #228]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b54:	d107      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fcca 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b64:	e1ff      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b6a:	e1fc      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b6c:	4b30      	ldr	r3, [pc, #192]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b78:	d107      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b7a:	f107 0318 	add.w	r3, r7, #24
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fa10 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b88:	e1ed      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b8e:	e1ea      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b90:	4b27      	ldr	r3, [pc, #156]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9c:	d107      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9e:	f107 030c 	add.w	r3, r7, #12
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fb52 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bac:	e1db      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb2:	e1d8      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006bb4:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bbe:	4b1c      	ldr	r3, [pc, #112]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d10c      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8006bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bd0:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	08db      	lsrs	r3, r3, #3
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be2:	e01e      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006be4:	4b12      	ldr	r3, [pc, #72]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf0:	d106      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bf8:	d102      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bfe:	e010      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0c:	d106      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c14:	d102      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1a:	e002      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c20:	e1a1      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006c22:	e1a0      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c24:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c28:	e19d      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c2e:	e19a      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006c30:	58024400 	.word	0x58024400
 8006c34:	03d09000 	.word	0x03d09000
 8006c38:	003d0900 	.word	0x003d0900
 8006c3c:	017d7840 	.word	0x017d7840
 8006c40:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c4a:	d173      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006c4c:	4b9a      	ldr	r3, [pc, #616]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c5c:	d02f      	beq.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c64:	d863      	bhi.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d004      	beq.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c72:	d012      	beq.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006c74:	e05b      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c76:	4b90      	ldr	r3, [pc, #576]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c82:	d107      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c84:	f107 0318 	add.w	r3, r7, #24
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 f98b 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c92:	e168      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c98:	e165      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c9a:	4b87      	ldr	r3, [pc, #540]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca6:	d107      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca8:	f107 030c 	add.w	r3, r7, #12
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 facd 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cb6:	e156      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cbc:	e153      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006cbe:	4b7e      	ldr	r3, [pc, #504]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cc8:	4b7b      	ldr	r3, [pc, #492]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d10c      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cda:	4b77      	ldr	r3, [pc, #476]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	08db      	lsrs	r3, r3, #3
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	4a75      	ldr	r2, [pc, #468]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cec:	e01e      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cee:	4b72      	ldr	r3, [pc, #456]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfa:	d106      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d02:	d102      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d04:	4b6e      	ldr	r3, [pc, #440]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d08:	e010      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d0a:	4b6b      	ldr	r3, [pc, #428]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d16:	d106      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1e:	d102      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d20:	4b68      	ldr	r3, [pc, #416]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d24:	e002      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d2a:	e11c      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006d2c:	e11b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d32:	e118      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3a:	d133      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006d3c:	4b5e      	ldr	r3, [pc, #376]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d52:	d012      	beq.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006d54:	e023      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d56:	4b58      	ldr	r3, [pc, #352]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d62:	d107      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fbc3 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d72:	e0f8      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d78:	e0f5      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d86:	d107      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d88:	f107 0318 	add.w	r3, r7, #24
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 f909 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d96:	e0e6      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d9c:	e0e3      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006da2:	e0e0      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006daa:	f040 808d 	bne.w	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006dae:	4b42      	ldr	r3, [pc, #264]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006db6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dbe:	d06b      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dc6:	d874      	bhi.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dce:	d056      	beq.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd6:	d86c      	bhi.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dde:	d03b      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006de6:	d864      	bhi.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dee:	d021      	beq.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df6:	d85c      	bhi.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e04:	d004      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006e06:	e054      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e08:	f000 f8b6 	bl	8006f78 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e0c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006e0e:	e0aa      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e10:	4b29      	ldr	r3, [pc, #164]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e1c:	d107      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e1e:	f107 0318 	add.w	r3, r7, #24
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 f8be 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e2c:	e09b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e32:	e098      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e34:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e40:	d107      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e42:	f107 030c 	add.w	r3, r7, #12
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fa00 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e50:	e089      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e56:	e086      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e58:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d109      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	08db      	lsrs	r3, r3, #3
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e76:	e076      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e7c:	e073      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8a:	d102      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8006e8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e90:	e069      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e96:	e066      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ea4:	d102      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8006ea6:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006eaa:	e05c      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb0:	e059      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb6:	e056      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006eb8:	58024400 	.word	0x58024400
 8006ebc:	03d09000 	.word	0x03d09000
 8006ec0:	003d0900 	.word	0x003d0900
 8006ec4:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ece:	d148      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006ed0:	4b27      	ldr	r3, [pc, #156]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ed8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee0:	d02a      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee8:	d838      	bhi.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef6:	d00d      	beq.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8006ef8:	e030      	b.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006efa:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f06:	d102      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8006f08:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f0c:	e02b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f12:	e028      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f14:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f20:	d107      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fae4 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f30:	e019      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f36:	e016      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f44:	d107      	bne.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f46:	f107 0318 	add.w	r3, r7, #24
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 f82a 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f54:	e007      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f5a:	e004      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f60:	e001      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3740      	adds	r7, #64	; 0x40
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	58024400 	.word	0x58024400
 8006f74:	017d7840 	.word	0x017d7840

08006f78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f7c:	f7fe fcae 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 8006f80:	4602      	mov	r2, r0
 8006f82:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	091b      	lsrs	r3, r3, #4
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	4904      	ldr	r1, [pc, #16]	; (8006fa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f8e:	5ccb      	ldrb	r3, [r1, r3]
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	58024400 	.word	0x58024400
 8006fa0:	0800b220 	.word	0x0800b220

08006fa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b089      	sub	sp, #36	; 0x24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fac:	4ba1      	ldr	r3, [pc, #644]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006fb6:	4b9f      	ldr	r3, [pc, #636]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	0b1b      	lsrs	r3, r3, #12
 8006fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006fc2:	4b9c      	ldr	r3, [pc, #624]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc6:	091b      	lsrs	r3, r3, #4
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006fce:	4b99      	ldr	r3, [pc, #612]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd2:	08db      	lsrs	r3, r3, #3
 8006fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	fb02 f303 	mul.w	r3, r2, r3
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 8111 	beq.w	8007214 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	f000 8083 	beq.w	8007100 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	f200 80a1 	bhi.w	8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d056      	beq.n	80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800700e:	e099      	b.n	8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007010:	4b88      	ldr	r3, [pc, #544]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0320 	and.w	r3, r3, #32
 8007018:	2b00      	cmp	r3, #0
 800701a:	d02d      	beq.n	8007078 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800701c:	4b85      	ldr	r3, [pc, #532]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	08db      	lsrs	r3, r3, #3
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	4a84      	ldr	r2, [pc, #528]	; (8007238 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007028:	fa22 f303 	lsr.w	r3, r2, r3
 800702c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007046:	4b7b      	ldr	r3, [pc, #492]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007056:	ed97 6a03 	vldr	s12, [r7, #12]
 800705a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800705e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800706a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007072:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007076:	e087      	b.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007082:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708a:	4b6a      	ldr	r3, [pc, #424]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709a:	ed97 6a03 	vldr	s12, [r7, #12]
 800709e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070ba:	e065      	b.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ce:	4b59      	ldr	r3, [pc, #356]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070de:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070fe:	e043      	b.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800710e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007112:	4b48      	ldr	r3, [pc, #288]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007122:	ed97 6a03 	vldr	s12, [r7, #12]
 8007126:	eddf 5a45 	vldr	s11, [pc, #276]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800712a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007142:	e021      	b.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007156:	4b37      	ldr	r3, [pc, #220]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007166:	ed97 6a03 	vldr	s12, [r7, #12]
 800716a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800716e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007186:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007188:	4b2a      	ldr	r3, [pc, #168]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	0a5b      	lsrs	r3, r3, #9
 800718e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800719e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ae:	ee17 2a90 	vmov	r2, s15
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80071b6:	4b1f      	ldr	r3, [pc, #124]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	0c1b      	lsrs	r3, r3, #16
 80071bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071dc:	ee17 2a90 	vmov	r2, s15
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80071e4:	4b13      	ldr	r3, [pc, #76]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	0e1b      	lsrs	r3, r3, #24
 80071ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800720a:	ee17 2a90 	vmov	r2, s15
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007212:	e008      	b.n	8007226 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
}
 8007226:	bf00      	nop
 8007228:	3724      	adds	r7, #36	; 0x24
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	58024400 	.word	0x58024400
 8007238:	03d09000 	.word	0x03d09000
 800723c:	46000000 	.word	0x46000000
 8007240:	4c742400 	.word	0x4c742400
 8007244:	4a742400 	.word	0x4a742400
 8007248:	4bbebc20 	.word	0x4bbebc20

0800724c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800724c:	b480      	push	{r7}
 800724e:	b089      	sub	sp, #36	; 0x24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007254:	4ba1      	ldr	r3, [pc, #644]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800725e:	4b9f      	ldr	r3, [pc, #636]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	0d1b      	lsrs	r3, r3, #20
 8007264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007268:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800726a:	4b9c      	ldr	r3, [pc, #624]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007276:	4b99      	ldr	r3, [pc, #612]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	08db      	lsrs	r3, r3, #3
 800727c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	fb02 f303 	mul.w	r3, r2, r3
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8111 	beq.w	80074bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	2b02      	cmp	r3, #2
 800729e:	f000 8083 	beq.w	80073a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	f200 80a1 	bhi.w	80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d056      	beq.n	8007364 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072b6:	e099      	b.n	80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072b8:	4b88      	ldr	r3, [pc, #544]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d02d      	beq.n	8007320 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072c4:	4b85      	ldr	r3, [pc, #532]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	08db      	lsrs	r3, r3, #3
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	4a84      	ldr	r2, [pc, #528]	; (80074e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072d0:	fa22 f303 	lsr.w	r3, r2, r3
 80072d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ee:	4b7b      	ldr	r3, [pc, #492]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007302:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800731e:	e087      	b.n	8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800732e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007332:	4b6a      	ldr	r3, [pc, #424]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007342:	ed97 6a03 	vldr	s12, [r7, #12]
 8007346:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800734a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007362:	e065      	b.n	8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007376:	4b59      	ldr	r3, [pc, #356]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007386:	ed97 6a03 	vldr	s12, [r7, #12]
 800738a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800738e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800739a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073a6:	e043      	b.n	8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ba:	4b48      	ldr	r3, [pc, #288]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ea:	e021      	b.n	8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fe:	4b37      	ldr	r3, [pc, #220]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007412:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800742e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007430:	4b2a      	ldr	r3, [pc, #168]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	0a5b      	lsrs	r3, r3, #9
 8007436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800744a:	edd7 6a07 	vldr	s13, [r7, #28]
 800744e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007456:	ee17 2a90 	vmov	r2, s15
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800745e:	4b1f      	ldr	r3, [pc, #124]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	0c1b      	lsrs	r3, r3, #16
 8007464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007468:	ee07 3a90 	vmov	s15, r3
 800746c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007474:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007478:	edd7 6a07 	vldr	s13, [r7, #28]
 800747c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007484:	ee17 2a90 	vmov	r2, s15
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800748c:	4b13      	ldr	r3, [pc, #76]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	0e1b      	lsrs	r3, r3, #24
 8007492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b2:	ee17 2a90 	vmov	r2, s15
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074ba:	e008      	b.n	80074ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	609a      	str	r2, [r3, #8]
}
 80074ce:	bf00      	nop
 80074d0:	3724      	adds	r7, #36	; 0x24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
 80074e0:	03d09000 	.word	0x03d09000
 80074e4:	46000000 	.word	0x46000000
 80074e8:	4c742400 	.word	0x4c742400
 80074ec:	4a742400 	.word	0x4a742400
 80074f0:	4bbebc20 	.word	0x4bbebc20

080074f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b089      	sub	sp, #36	; 0x24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074fc:	4ba0      	ldr	r3, [pc, #640]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	f003 0303 	and.w	r3, r3, #3
 8007504:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007506:	4b9e      	ldr	r3, [pc, #632]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	091b      	lsrs	r3, r3, #4
 800750c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007510:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007512:	4b9b      	ldr	r3, [pc, #620]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800751c:	4b98      	ldr	r3, [pc, #608]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800751e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007520:	08db      	lsrs	r3, r3, #3
 8007522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007534:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8111 	beq.w	8007762 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	2b02      	cmp	r3, #2
 8007544:	f000 8083 	beq.w	800764e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b02      	cmp	r3, #2
 800754c:	f200 80a1 	bhi.w	8007692 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d056      	beq.n	800760a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800755c:	e099      	b.n	8007692 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800755e:	4b88      	ldr	r3, [pc, #544]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d02d      	beq.n	80075c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800756a:	4b85      	ldr	r3, [pc, #532]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	08db      	lsrs	r3, r3, #3
 8007570:	f003 0303 	and.w	r3, r3, #3
 8007574:	4a83      	ldr	r2, [pc, #524]	; (8007784 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007576:	fa22 f303 	lsr.w	r3, r2, r3
 800757a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007594:	4b7a      	ldr	r3, [pc, #488]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075c4:	e087      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800778c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80075d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d8:	4b69      	ldr	r3, [pc, #420]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e0:	ee07 3a90 	vmov	s15, r3
 80075e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007604:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007608:	e065      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007614:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761c:	4b58      	ldr	r3, [pc, #352]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007630:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007648:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800764c:	e043      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	ee07 3a90 	vmov	s15, r3
 8007654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007658:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800765c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007660:	4b47      	ldr	r3, [pc, #284]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007668:	ee07 3a90 	vmov	s15, r3
 800766c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007670:	ed97 6a03 	vldr	s12, [r7, #12]
 8007674:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007690:	e021      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	ee07 3a90 	vmov	s15, r3
 8007698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800778c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a4:	4b36      	ldr	r3, [pc, #216]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ac:	ee07 3a90 	vmov	s15, r3
 80076b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80076d6:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	0a5b      	lsrs	r3, r3, #9
 80076dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e0:	ee07 3a90 	vmov	s15, r3
 80076e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076fc:	ee17 2a90 	vmov	r2, s15
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007704:	4b1e      	ldr	r3, [pc, #120]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800771a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800771e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800772a:	ee17 2a90 	vmov	r2, s15
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007732:	4b13      	ldr	r3, [pc, #76]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	0e1b      	lsrs	r3, r3, #24
 8007738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773c:	ee07 3a90 	vmov	s15, r3
 8007740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800774c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007758:	ee17 2a90 	vmov	r2, s15
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007760:	e008      	b.n	8007774 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	609a      	str	r2, [r3, #8]
}
 8007774:	bf00      	nop
 8007776:	3724      	adds	r7, #36	; 0x24
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	58024400 	.word	0x58024400
 8007784:	03d09000 	.word	0x03d09000
 8007788:	46000000 	.word	0x46000000
 800778c:	4c742400 	.word	0x4c742400
 8007790:	4a742400 	.word	0x4a742400
 8007794:	4bbebc20 	.word	0x4bbebc20

08007798 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077a6:	4b53      	ldr	r3, [pc, #332]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d101      	bne.n	80077b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e099      	b.n	80078ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077b6:	4b4f      	ldr	r3, [pc, #316]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a4e      	ldr	r2, [pc, #312]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077c2:	f7fa f8b7 	bl	8001934 <HAL_GetTick>
 80077c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077c8:	e008      	b.n	80077dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80077ca:	f7fa f8b3 	bl	8001934 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e086      	b.n	80078ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077dc:	4b45      	ldr	r3, [pc, #276]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1f0      	bne.n	80077ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077e8:	4b42      	ldr	r3, [pc, #264]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	031b      	lsls	r3, r3, #12
 80077f6:	493f      	ldr	r1, [pc, #252]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	628b      	str	r3, [r1, #40]	; 0x28
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	3b01      	subs	r3, #1
 8007802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	3b01      	subs	r3, #1
 800780c:	025b      	lsls	r3, r3, #9
 800780e:	b29b      	uxth	r3, r3
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	3b01      	subs	r3, #1
 8007818:	041b      	lsls	r3, r3, #16
 800781a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	3b01      	subs	r3, #1
 8007826:	061b      	lsls	r3, r3, #24
 8007828:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800782c:	4931      	ldr	r1, [pc, #196]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800782e:	4313      	orrs	r3, r2
 8007830:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007832:	4b30      	ldr	r3, [pc, #192]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007836:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	492d      	ldr	r1, [pc, #180]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007840:	4313      	orrs	r3, r2
 8007842:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007844:	4b2b      	ldr	r3, [pc, #172]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	f023 0220 	bic.w	r2, r3, #32
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	4928      	ldr	r1, [pc, #160]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007852:	4313      	orrs	r3, r2
 8007854:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007856:	4b27      	ldr	r3, [pc, #156]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	4a26      	ldr	r2, [pc, #152]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800785c:	f023 0310 	bic.w	r3, r3, #16
 8007860:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007866:	4b24      	ldr	r3, [pc, #144]	; (80078f8 <RCCEx_PLL2_Config+0x160>)
 8007868:	4013      	ands	r3, r2
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	69d2      	ldr	r2, [r2, #28]
 800786e:	00d2      	lsls	r2, r2, #3
 8007870:	4920      	ldr	r1, [pc, #128]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007872:	4313      	orrs	r3, r2
 8007874:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007876:	4b1f      	ldr	r3, [pc, #124]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	4a1e      	ldr	r2, [pc, #120]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800787c:	f043 0310 	orr.w	r3, r3, #16
 8007880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d106      	bne.n	8007896 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007888:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	4a19      	ldr	r2, [pc, #100]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800788e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007892:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007894:	e00f      	b.n	80078b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d106      	bne.n	80078aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800789c:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a14      	ldr	r2, [pc, #80]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078a8:	e005      	b.n	80078b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078aa:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	4a11      	ldr	r2, [pc, #68]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078b6:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a0e      	ldr	r2, [pc, #56]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c2:	f7fa f837 	bl	8001934 <HAL_GetTick>
 80078c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078c8:	e008      	b.n	80078dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80078ca:	f7fa f833 	bl	8001934 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d901      	bls.n	80078dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e006      	b.n	80078ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078dc:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d0f0      	beq.n	80078ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	58024400 	.word	0x58024400
 80078f8:	ffff0007 	.word	0xffff0007

080078fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800790a:	4b53      	ldr	r3, [pc, #332]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	f003 0303 	and.w	r3, r3, #3
 8007912:	2b03      	cmp	r3, #3
 8007914:	d101      	bne.n	800791a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e099      	b.n	8007a4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800791a:	4b4f      	ldr	r3, [pc, #316]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a4e      	ldr	r2, [pc, #312]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007926:	f7fa f805 	bl	8001934 <HAL_GetTick>
 800792a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800792c:	e008      	b.n	8007940 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800792e:	f7fa f801 	bl	8001934 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e086      	b.n	8007a4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007940:	4b45      	ldr	r3, [pc, #276]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f0      	bne.n	800792e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800794c:	4b42      	ldr	r3, [pc, #264]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	051b      	lsls	r3, r3, #20
 800795a:	493f      	ldr	r1, [pc, #252]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 800795c:	4313      	orrs	r3, r2
 800795e:	628b      	str	r3, [r1, #40]	; 0x28
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	3b01      	subs	r3, #1
 8007966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	3b01      	subs	r3, #1
 8007970:	025b      	lsls	r3, r3, #9
 8007972:	b29b      	uxth	r3, r3
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	3b01      	subs	r3, #1
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	3b01      	subs	r3, #1
 800798a:	061b      	lsls	r3, r3, #24
 800798c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007990:	4931      	ldr	r1, [pc, #196]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007992:	4313      	orrs	r3, r2
 8007994:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007996:	4b30      	ldr	r3, [pc, #192]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	492d      	ldr	r1, [pc, #180]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079a8:	4b2b      	ldr	r3, [pc, #172]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	4928      	ldr	r1, [pc, #160]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079ba:	4b27      	ldr	r3, [pc, #156]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ca:	4b24      	ldr	r3, [pc, #144]	; (8007a5c <RCCEx_PLL3_Config+0x160>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	69d2      	ldr	r2, [r2, #28]
 80079d2:	00d2      	lsls	r2, r2, #3
 80079d4:	4920      	ldr	r1, [pc, #128]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079da:	4b1f      	ldr	r3, [pc, #124]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	4a1e      	ldr	r2, [pc, #120]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d106      	bne.n	80079fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80079ec:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	4a19      	ldr	r2, [pc, #100]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079f8:	e00f      	b.n	8007a1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d106      	bne.n	8007a0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a00:	4b15      	ldr	r3, [pc, #84]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	4a14      	ldr	r2, [pc, #80]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a0c:	e005      	b.n	8007a1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a0e:	4b12      	ldr	r3, [pc, #72]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	4a11      	ldr	r2, [pc, #68]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a1a:	4b0f      	ldr	r3, [pc, #60]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a0e      	ldr	r2, [pc, #56]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a26:	f7f9 ff85 	bl	8001934 <HAL_GetTick>
 8007a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a2c:	e008      	b.n	8007a40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a2e:	f7f9 ff81 	bl	8001934 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d901      	bls.n	8007a40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e006      	b.n	8007a4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0f0      	beq.n	8007a2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	ffff0007 	.word	0xffff0007

08007a60 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d904      	bls.n	8007a7e <HAL_SAI_InitProtocol+0x1e>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	3b03      	subs	r3, #3
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d812      	bhi.n	8007aa2 <HAL_SAI_InitProtocol+0x42>
 8007a7c:	e008      	b.n	8007a90 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 fb49 	bl	800811c <SAI_InitI2S>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a8e:	e00b      	b.n	8007aa8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	68b9      	ldr	r1, [r7, #8]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fbf2 	bl	8008280 <SAI_InitPCM>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa0:	e002      	b.n	8007aa8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa6:	bf00      	nop
  }

  if (status == HAL_OK)
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d104      	bne.n	8007ab8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f808 	bl	8007ac4 <HAL_SAI_Init>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08a      	sub	sp, #40	; 0x28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e1fb      	b.n	8007ece <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d113      	bne.n	8007b08 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a96      	ldr	r2, [pc, #600]	; (8007d40 <HAL_SAI_Init+0x27c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <HAL_SAI_Init+0x30>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a95      	ldr	r2, [pc, #596]	; (8007d44 <HAL_SAI_Init+0x280>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d107      	bne.n	8007b04 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d103      	bne.n	8007b04 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e1e2      	b.n	8007ece <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a8c      	ldr	r2, [pc, #560]	; (8007d40 <HAL_SAI_Init+0x27c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d004      	beq.n	8007b1c <HAL_SAI_Init+0x58>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a8c      	ldr	r2, [pc, #560]	; (8007d48 <HAL_SAI_Init+0x284>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d102      	bne.n	8007b22 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8007b1c:	4b8b      	ldr	r3, [pc, #556]	; (8007d4c <HAL_SAI_Init+0x288>)
 8007b1e:	61bb      	str	r3, [r7, #24]
 8007b20:	e00e      	b.n	8007b40 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a87      	ldr	r2, [pc, #540]	; (8007d44 <HAL_SAI_Init+0x280>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d004      	beq.n	8007b36 <HAL_SAI_Init+0x72>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a87      	ldr	r2, [pc, #540]	; (8007d50 <HAL_SAI_Init+0x28c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d102      	bne.n	8007b3c <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8007b36:	4b87      	ldr	r3, [pc, #540]	; (8007d54 <HAL_SAI_Init+0x290>)
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	e001      	b.n	8007b40 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e1c6      	b.n	8007ece <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fffd 	bl	8008b54 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fc4a 	bl	80083f4 <SAI_Disable>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e1b1      	b.n	8007ece <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d00c      	beq.n	8007b94 <HAL_SAI_Init+0xd0>
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d80d      	bhi.n	8007b9a <HAL_SAI_Init+0xd6>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <HAL_SAI_Init+0xc4>
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d003      	beq.n	8007b8e <HAL_SAI_Init+0xca>
 8007b86:	e008      	b.n	8007b9a <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b8c:	e008      	b.n	8007ba0 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007b8e:	2310      	movs	r3, #16
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b92:	e005      	b.n	8007ba0 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007b94:	2320      	movs	r3, #32
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b98:	e002      	b.n	8007ba0 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b9e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b05      	cmp	r3, #5
 8007ba6:	d822      	bhi.n	8007bee <HAL_SAI_Init+0x12a>
 8007ba8:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <HAL_SAI_Init+0xec>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bc9 	.word	0x08007bc9
 8007bb4:	08007bcf 	.word	0x08007bcf
 8007bb8:	08007bd7 	.word	0x08007bd7
 8007bbc:	08007bef 	.word	0x08007bef
 8007bc0:	08007bef 	.word	0x08007bef
 8007bc4:	08007bdf 	.word	0x08007bdf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61fb      	str	r3, [r7, #28]
      break;
 8007bcc:	e012      	b.n	8007bf4 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bd2:	61fb      	str	r3, [r7, #28]
      break;
 8007bd4:	e00e      	b.n	8007bf4 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007bd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bda:	61fb      	str	r3, [r7, #28]
      break;
 8007bdc:	e00a      	b.n	8007bf4 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007be2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	f043 0303 	orr.w	r3, r3, #3
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007bec:	e002      	b.n	8007bf4 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61fb      	str	r3, [r7, #28]
      break;
 8007bf2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 8084 	beq.w	8007d0c <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a4c      	ldr	r2, [pc, #304]	; (8007d40 <HAL_SAI_Init+0x27c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d004      	beq.n	8007c1c <HAL_SAI_Init+0x158>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a4c      	ldr	r2, [pc, #304]	; (8007d48 <HAL_SAI_Init+0x284>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d104      	bne.n	8007c26 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007c1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007c20:	f7fe fd86 	bl	8006730 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c24:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a46      	ldr	r2, [pc, #280]	; (8007d44 <HAL_SAI_Init+0x280>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d104      	bne.n	8007c3a <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007c30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007c34:	f7fe fd7c 	bl	8006730 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c38:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a44      	ldr	r2, [pc, #272]	; (8007d50 <HAL_SAI_Init+0x28c>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d104      	bne.n	8007c4e <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007c44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c48:	f7fe fd72 	bl	8006730 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c4c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c56:	d120      	bne.n	8007c9a <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d102      	bne.n	8007c66 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007c60:	2340      	movs	r3, #64	; 0x40
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e00a      	b.n	8007c7c <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6a:	2b08      	cmp	r3, #8
 8007c6c:	d103      	bne.n	8007c76 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	e002      	b.n	8007c7c <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	4619      	mov	r1, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
 8007c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c96:	613b      	str	r3, [r7, #16]
 8007c98:	e017      	b.n	8007cca <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ca2:	d101      	bne.n	8007ca8 <HAL_SAI_Init+0x1e4>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e000      	b.n	8007caa <HAL_SAI_Init+0x1e6>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	fb02 f303 	mul.w	r3, r2, r3
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cc8:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <HAL_SAI_Init+0x294>)
 8007cce:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd2:	08da      	lsrs	r2, r3, #3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007cd8:	6939      	ldr	r1, [r7, #16]
 8007cda:	4b1f      	ldr	r3, [pc, #124]	; (8007d58 <HAL_SAI_Init+0x294>)
 8007cdc:	fba3 2301 	umull	r2, r3, r3, r1
 8007ce0:	08da      	lsrs	r2, r3, #3
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	1aca      	subs	r2, r1, r3
 8007cec:	2a08      	cmp	r2, #8
 8007cee:	d904      	bls.n	8007cfa <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d104      	bne.n	8007d0c <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	085a      	lsrs	r2, r3, #1
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <HAL_SAI_Init+0x258>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d109      	bne.n	8007d30 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_SAI_Init+0x264>
 8007d24:	2300      	movs	r3, #0
 8007d26:	e001      	b.n	8007d2c <HAL_SAI_Init+0x268>
 8007d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d2c:	623b      	str	r3, [r7, #32]
 8007d2e:	e017      	b.n	8007d60 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d111      	bne.n	8007d5c <HAL_SAI_Init+0x298>
 8007d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d3c:	e00f      	b.n	8007d5e <HAL_SAI_Init+0x29a>
 8007d3e:	bf00      	nop
 8007d40:	40015804 	.word	0x40015804
 8007d44:	58005404 	.word	0x58005404
 8007d48:	40015824 	.word	0x40015824
 8007d4c:	40015800 	.word	0x40015800
 8007d50:	58005424 	.word	0x58005424
 8007d54:	58005400 	.word	0x58005400
 8007d58:	cccccccd 	.word	0xcccccccd
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6819      	ldr	r1, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4b5b      	ldr	r3, [pc, #364]	; (8007ed8 <HAL_SAI_Init+0x414>)
 8007d6c:	400b      	ands	r3, r1
 8007d6e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d84:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8007d98:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007da4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	051b      	lsls	r3, r3, #20
 8007dac:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007db2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6859      	ldr	r1, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	4b43      	ldr	r3, [pc, #268]	; (8007edc <HAL_SAI_Init+0x418>)
 8007dce:	400b      	ands	r3, r1
 8007dd0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6859      	ldr	r1, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69da      	ldr	r2, [r3, #28]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6899      	ldr	r1, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	4b39      	ldr	r3, [pc, #228]	; (8007ee0 <HAL_SAI_Init+0x41c>)
 8007dfc:	400b      	ands	r3, r1
 8007dfe:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6899      	ldr	r1, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e10:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007e16:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007e1c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	3b01      	subs	r3, #1
 8007e24:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007e26:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68d9      	ldr	r1, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007e3e:	400b      	ands	r3, r1
 8007e40:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68d9      	ldr	r1, [r3, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e50:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e56:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e58:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	021b      	lsls	r3, r3, #8
 8007e62:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <HAL_SAI_Init+0x420>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <HAL_SAI_Init+0x3bc>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a1b      	ldr	r2, [pc, #108]	; (8007ee8 <HAL_SAI_Init+0x424>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d119      	bne.n	8007eb4 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e84:	f023 0201 	bic.w	r2, r3, #1
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d10e      	bne.n	8007eb4 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eac:	f043 0201 	orr.w	r2, r3, #1
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3728      	adds	r7, #40	; 0x28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	f005c010 	.word	0xf005c010
 8007edc:	ffff1ff0 	.word	0xffff1ff0
 8007ee0:	fff88000 	.word	0xfff88000
 8007ee4:	40015804 	.word	0x40015804
 8007ee8:	58005404 	.word	0x58005404

08007eec <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e050      	b.n	8007fa0 <HAL_SAI_DeInit+0xb4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2202      	movs	r2, #2
 8007f02:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f16:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  if (SAI_Disable(hsai) != HAL_OK)
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fa6b 	bl	80083f4 <SAI_Disable>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d009      	beq.n	8007f38 <HAL_SAI_DeInit+0x4c>
  {
    /* Reset SAI state to ready */
    hsai->State = HAL_SAI_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Release Lock */
    __HAL_UNLOCK(hsai);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e033      	b.n	8007fa0 <HAL_SAI_DeInit+0xb4>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0208 	orr.w	r2, r2, #8
 8007f46:	605a      	str	r2, [r3, #4]

  /* Disable SAI PDM interface */
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a16      	ldr	r2, [pc, #88]	; (8007fa8 <HAL_SAI_DeInit+0xbc>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d004      	beq.n	8007f5c <HAL_SAI_DeInit+0x70>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a15      	ldr	r2, [pc, #84]	; (8007fac <HAL_SAI_DeInit+0xc0>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d111      	bne.n	8007f80 <HAL_SAI_DeInit+0x94>
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Get the SAI base address according to the SAI handle */
#if defined(SAI4)
    SaiBaseAddress = (hsai->Instance == SAI1_Block_A) ? SAI1 : SAI4;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a11      	ldr	r2, [pc, #68]	; (8007fa8 <HAL_SAI_DeInit+0xbc>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d101      	bne.n	8007f6a <HAL_SAI_DeInit+0x7e>
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <HAL_SAI_DeInit+0xc4>)
 8007f68:	e000      	b.n	8007f6c <HAL_SAI_DeInit+0x80>
 8007f6a:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <HAL_SAI_DeInit+0xc8>)
 8007f6c:	60fb      	str	r3, [r7, #12]
#else
    SaiBaseAddress = SAI1;
#endif /* SAI4 */

    /* Reset PDM delays */
    SaiBaseAddress->PDMDLY = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f78:	f023 0201 	bic.w	r2, r3, #1
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	645a      	str	r2, [r3, #68]	; 0x44
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 ff07 	bl	8008d94 <HAL_SAI_MspDeInit>
#endif

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	40015804 	.word	0x40015804
 8007fac:	58005404 	.word	0x58005404
 8007fb0:	40015800 	.word	0x40015800
 8007fb4:	58005400 	.word	0x58005400

08007fb8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <HAL_SAI_Receive_DMA+0x1a>
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e079      	b.n	80080ca <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d172      	bne.n	80080c8 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_SAI_Receive_DMA+0x38>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e06c      	b.n	80080ca <HAL_SAI_Receive_DMA+0x112>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	88fa      	ldrh	r2, [r7, #6]
 8008002:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	88fa      	ldrh	r2, [r7, #6]
 800800a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2222      	movs	r2, #34	; 0x22
 800801a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008024:	4a2b      	ldr	r2, [pc, #172]	; (80080d4 <HAL_SAI_Receive_DMA+0x11c>)
 8008026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800802e:	4a2a      	ldr	r2, [pc, #168]	; (80080d8 <HAL_SAI_Receive_DMA+0x120>)
 8008030:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008038:	4a28      	ldr	r2, [pc, #160]	; (80080dc <HAL_SAI_Receive_DMA+0x124>)
 800803a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008042:	2200      	movs	r2, #0
 8008044:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	331c      	adds	r3, #28
 8008052:	4619      	mov	r1, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008058:	461a      	mov	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008060:	f7fa fb7e 	bl	8002760 <HAL_DMA_Start_IT>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e029      	b.n	80080ca <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008076:	2100      	movs	r1, #0
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f983 	bl	8008384 <SAI_InterruptFlag>
 800807e:	4601      	mov	r1, r0
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	691a      	ldr	r2, [r3, #16]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800809c:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d107      	bne.n	80080bc <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80080ba:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e000      	b.n	80080ca <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80080c8:	2302      	movs	r3, #2
  }
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	080084c9 	.word	0x080084c9
 80080d8:	08008469 	.word	0x08008469
 80080dc:	080084e5 	.word	0x080084e5

080080e0 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <SAI_InitI2S+0x2e>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d103      	bne.n	8008152 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	651a      	str	r2, [r3, #80]	; 0x50
 8008150:	e002      	b.n	8008158 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800815e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008166:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e077      	b.n	8008272 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d107      	bne.n	8008198 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008194:	665a      	str	r2, [r3, #100]	; 0x64
 8008196:	e006      	b.n	80081a6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800819e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	665a      	str	r2, [r3, #100]	; 0x64
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d84f      	bhi.n	800824c <SAI_InitI2S+0x130>
 80081ac:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <SAI_InitI2S+0x98>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	080081c5 	.word	0x080081c5
 80081b8:	080081e7 	.word	0x080081e7
 80081bc:	08008209 	.word	0x08008209
 80081c0:	0800822b 	.word	0x0800822b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2280      	movs	r2, #128	; 0x80
 80081c8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	085b      	lsrs	r3, r3, #1
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	085b      	lsrs	r3, r3, #1
 80081d8:	011a      	lsls	r2, r3, #4
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2240      	movs	r2, #64	; 0x40
 80081e2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80081e4:	e035      	b.n	8008252 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2280      	movs	r2, #128	; 0x80
 80081ea:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	085b      	lsrs	r3, r3, #1
 80081f0:	019a      	lsls	r2, r3, #6
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	085b      	lsrs	r3, r3, #1
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2280      	movs	r2, #128	; 0x80
 8008204:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008206:	e024      	b.n	8008252 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	22c0      	movs	r2, #192	; 0xc0
 800820c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	085b      	lsrs	r3, r3, #1
 8008212:	019a      	lsls	r2, r3, #6
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	085b      	lsrs	r3, r3, #1
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2280      	movs	r2, #128	; 0x80
 8008226:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008228:	e013      	b.n	8008252 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	22e0      	movs	r2, #224	; 0xe0
 800822e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	019a      	lsls	r2, r3, #6
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	085b      	lsrs	r3, r3, #1
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2280      	movs	r2, #128	; 0x80
 8008248:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800824a:	e002      	b.n	8008252 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	75fb      	strb	r3, [r7, #23]
      break;
 8008250:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d10b      	bne.n	8008270 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d102      	bne.n	8008264 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2210      	movs	r2, #16
 8008262:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d102      	bne.n	8008270 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2208      	movs	r2, #8
 800826e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
}
 8008272:	4618      	mov	r0, r3
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <SAI_InitPCM+0x2e>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d103      	bne.n	80082b6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	651a      	str	r2, [r3, #80]	; 0x50
 80082b4:	e002      	b.n	80082bc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80082c8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80082d0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082e4:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d103      	bne.n	80082f4 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	659a      	str	r2, [r3, #88]	; 0x58
 80082f2:	e002      	b.n	80082fa <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	220d      	movs	r2, #13
 80082f8:	659a      	str	r2, [r3, #88]	; 0x58
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d837      	bhi.n	8008370 <SAI_InitPCM+0xf0>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <SAI_InitPCM+0x88>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008319 	.word	0x08008319
 800830c:	0800832f 	.word	0x0800832f
 8008310:	08008345 	.word	0x08008345
 8008314:	0800835b 	.word	0x0800835b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2280      	movs	r2, #128	; 0x80
 800831c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	011a      	lsls	r2, r3, #4
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2240      	movs	r2, #64	; 0x40
 800832a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800832c:	e023      	b.n	8008376 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2280      	movs	r2, #128	; 0x80
 8008332:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2280      	movs	r2, #128	; 0x80
 8008340:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008342:	e018      	b.n	8008376 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	22c0      	movs	r2, #192	; 0xc0
 8008348:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2280      	movs	r2, #128	; 0x80
 8008356:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008358:	e00d      	b.n	8008376 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	22e0      	movs	r2, #224	; 0xe0
 800835e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2280      	movs	r2, #128	; 0x80
 800836c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800836e:	e002      	b.n	8008376 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]
      break;
 8008374:	bf00      	nop
  }

  return status;
 8008376:	7dfb      	ldrb	r3, [r7, #23]
}
 8008378:	4618      	mov	r0, r3
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008390:	2301      	movs	r3, #1
 8008392:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d103      	bne.n	80083a2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f043 0308 	orr.w	r3, r3, #8
 80083a0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	d10b      	bne.n	80083c2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d003      	beq.n	80083ba <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d103      	bne.n	80083c2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f043 0310 	orr.w	r3, r3, #16
 80083c0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d003      	beq.n	80083d2 <SAI_InterruptFlag+0x4e>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d104      	bne.n	80083dc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e003      	b.n	80083e4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f043 0304 	orr.w	r3, r3, #4
 80083e2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80083e4:	68fb      	ldr	r3, [r7, #12]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80083fc:	4b18      	ldr	r3, [pc, #96]	; (8008460 <SAI_Disable+0x6c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a18      	ldr	r2, [pc, #96]	; (8008464 <SAI_Disable+0x70>)
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	0b1b      	lsrs	r3, r3, #12
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800841e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10a      	bne.n	800843c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800842c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	72fb      	strb	r3, [r7, #11]
      break;
 800843a:	e009      	b.n	8008450 <SAI_Disable+0x5c>
    }
    count--;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3b01      	subs	r3, #1
 8008440:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e7      	bne.n	8008420 <SAI_Disable+0x2c>

  return status;
 8008450:	7afb      	ldrb	r3, [r7, #11]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	24000414 	.word	0x24000414
 8008464:	95cbec1b 	.word	0x95cbec1b

08008468 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847e:	d01c      	beq.n	80084ba <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800848e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008498:	2100      	movs	r1, #0
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7ff ff72 	bl	8008384 <SAI_InterruptFlag>
 80084a0:	4603      	mov	r3, r0
 80084a2:	43d9      	mvns	r1, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	691a      	ldr	r2, [r3, #16]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	400a      	ands	r2, r1
 80084b0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
  // TODO how to implement RxCpltCallback on SAI
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f7ff fe10 	bl	80080e0 <HAL_SAI_RxCpltCallback>
#endif
}
 80084c0:	bf00      	nop
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f7ff fe0c 	bl	80080f4 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f0:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7fb fac8 	bl	8003a88 <HAL_DMA_GetError>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d01d      	beq.n	800853a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008504:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800851c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f7ff ff68 	bl	80083f4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff fde7 	bl	8008108 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b0a2      	sub	sp, #136	; 0x88
 8008548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800854a:	f7f9 f96d 	bl	8001828 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 800854e:	2000      	movs	r0, #0
 8008550:	f7f9 f8d0 	bl	80016f4 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8008554:	2001      	movs	r0, #1
 8008556:	f7f9 f8cd 	bl	80016f4 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 800855a:	2000      	movs	r0, #0
 800855c:	f7f9 f946 	bl	80017ec <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8008560:	2001      	movs	r0, #1
 8008562:	f7f9 f943 	bl	80017ec <BSP_LED_Off>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008566:	f000 f851 	bl	800860c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800856a:	f000 fa1f 	bl	80089ac <MX_GPIO_Init>
  MX_BDMA_Init();
 800856e:	f000 f9b3 	bl	80088d8 <MX_BDMA_Init>
  MX_SAI4_Init();
 8008572:	f000 f953 	bl	800881c <MX_SAI4_Init>
  MX_CRC_Init();
 8008576:	f000 f8db 	bl	8008730 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 800857a:	f000 fa85 	bl	8008a88 <MX_PDM2PCM_Init>
  MX_DMA_Init();
 800857e:	f000 f9c5 	bl	800890c <MX_DMA_Init>
  MX_SAI1_Init();
 8008582:	f000 f917 	bl	80087b4 <MX_SAI1_Init>
  //MX_RAMECC_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 8008586:	f000 f8af 	bl	80086e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  MX_CODEC_Init();
 800858a:	f000 fa5f 	bl	8008a4c <MX_CODEC_Init>

  uint32_t *input_buffer = (uint32_t*)SRAM4_BASE;
 800858e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8008592:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HAL_SAI_MspInit(&hsai_BlockA4);
 8008596:	4818      	ldr	r0, [pc, #96]	; (80085f8 <main+0xb4>)
 8008598:	f000 fadc 	bl	8008b54 <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockA4);
 800859c:	4816      	ldr	r0, [pc, #88]	; (80085f8 <main+0xb4>)
 800859e:	f7ff fa91 	bl	8007ac4 <HAL_SAI_Init>
  uint32_t *pdm_buffer = (uint32_t*)SRAM2_BASE;
 80085a2:	4b16      	ldr	r3, [pc, #88]	; (80085fc <main+0xb8>)
 80085a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t pcm_buffer[NUM_BYTES] = {0};
 80085a8:	463b      	mov	r3, r7
 80085aa:	2280      	movs	r2, #128	; 0x80
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f002 fc3a 	bl	800ae28 <memset>
  // need to move data from D3 into D2 (where SAI1 is)

  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, input_buffer, pdm_buffer, NUM_BYTES);
 80085b4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80085b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085bc:	2320      	movs	r3, #32
 80085be:	4810      	ldr	r0, [pc, #64]	; (8008600 <main+0xbc>)
 80085c0:	f7fa f8ce 	bl	8002760 <HAL_DMA_Start_IT>
  if(HAL_SAI_Receive_DMA(&hsai_BlockA4, input_buffer, NUM_BYTES) == HAL_OK)
 80085c4:	2220      	movs	r2, #32
 80085c6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80085ca:	480b      	ldr	r0, [pc, #44]	; (80085f8 <main+0xb4>)
 80085cc:	f7ff fcf4 	bl	8007fb8 <HAL_SAI_Receive_DMA>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10f      	bne.n	80085f6 <main+0xb2>
  {
	  HAL_SAI_DeInit(&hsai_BlockA4);
 80085d6:	4808      	ldr	r0, [pc, #32]	; (80085f8 <main+0xb4>)
 80085d8:	f7ff fc88 	bl	8007eec <HAL_SAI_DeInit>
	  HAL_SAI_MspInit(&hsai_BlockB1);
 80085dc:	4809      	ldr	r0, [pc, #36]	; (8008604 <main+0xc0>)
 80085de:	f000 fab9 	bl	8008b54 <HAL_SAI_MspInit>
	  PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 80085e2:	463b      	mov	r3, r7
 80085e4:	4a08      	ldr	r2, [pc, #32]	; (8008608 <main+0xc4>)
 80085e6:	4619      	mov	r1, r3
 80085e8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80085ec:	f002 fbd8 	bl	800ada0 <PDM_Filter>
	  BSP_LED_On(LED2);
 80085f0:	2001      	movs	r0, #1
 80085f2:	f7f9 f8dd 	bl	80017b0 <BSP_LED_On>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80085f6:	e7fe      	b.n	80085f6 <main+0xb2>
 80085f8:	240005f8 	.word	0x240005f8
 80085fc:	30004100 	.word	0x30004100
 8008600:	240004c4 	.word	0x240004c4
 8008604:	24000560 	.word	0x24000560
 8008608:	2400076c 	.word	0x2400076c

0800860c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b09c      	sub	sp, #112	; 0x70
 8008610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008616:	224c      	movs	r2, #76	; 0x4c
 8008618:	2100      	movs	r1, #0
 800861a:	4618      	mov	r0, r3
 800861c:	f002 fc04 	bl	800ae28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008620:	1d3b      	adds	r3, r7, #4
 8008622:	2220      	movs	r2, #32
 8008624:	2100      	movs	r1, #0
 8008626:	4618      	mov	r0, r3
 8008628:	f002 fbfe 	bl	800ae28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800862c:	2004      	movs	r0, #4
 800862e:	f7fc fa1f 	bl	8004a70 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008632:	2300      	movs	r3, #0
 8008634:	603b      	str	r3, [r7, #0]
 8008636:	4b2b      	ldr	r3, [pc, #172]	; (80086e4 <SystemClock_Config+0xd8>)
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	4a2a      	ldr	r2, [pc, #168]	; (80086e4 <SystemClock_Config+0xd8>)
 800863c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008640:	6193      	str	r3, [r2, #24]
 8008642:	4b28      	ldr	r3, [pc, #160]	; (80086e4 <SystemClock_Config+0xd8>)
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800864e:	bf00      	nop
 8008650:	4b24      	ldr	r3, [pc, #144]	; (80086e4 <SystemClock_Config+0xd8>)
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800865c:	d1f8      	bne.n	8008650 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800865e:	2302      	movs	r3, #2
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008662:	2301      	movs	r3, #1
 8008664:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008666:	2340      	movs	r3, #64	; 0x40
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800866a:	2302      	movs	r3, #2
 800866c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800866e:	2300      	movs	r3, #0
 8008670:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008672:	2304      	movs	r3, #4
 8008674:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8008676:	2318      	movs	r3, #24
 8008678:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800867a:	2301      	movs	r3, #1
 800867c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 800867e:	237d      	movs	r3, #125	; 0x7d
 8008680:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008682:	2302      	movs	r3, #2
 8008684:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8008686:	230c      	movs	r3, #12
 8008688:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800868a:	2300      	movs	r3, #0
 800868c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008696:	4618      	mov	r0, r3
 8008698:	f7fc fa44 	bl	8004b24 <HAL_RCC_OscConfig>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80086a2:	f000 f9eb 	bl	8008a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80086a6:	233f      	movs	r3, #63	; 0x3f
 80086a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80086aa:	2303      	movs	r3, #3
 80086ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80086b2:	2308      	movs	r3, #8
 80086b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80086b6:	2340      	movs	r3, #64	; 0x40
 80086b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80086ba:	2340      	movs	r3, #64	; 0x40
 80086bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80086be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80086c4:	2340      	movs	r3, #64	; 0x40
 80086c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80086c8:	1d3b      	adds	r3, r7, #4
 80086ca:	2102      	movs	r1, #2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fc fdd5 	bl	800527c <HAL_RCC_ClockConfig>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80086d8:	f000 f9d0 	bl	8008a7c <Error_Handler>
  }
}
 80086dc:	bf00      	nop
 80086de:	3770      	adds	r7, #112	; 0x70
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	58024800 	.word	0x58024800

080086e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 80086ec:	2200      	movs	r2, #0
 80086ee:	2100      	movs	r1, #0
 80086f0:	2082      	movs	r0, #130	; 0x82
 80086f2:	f7f9 fa06 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 80086f6:	2082      	movs	r0, #130	; 0x82
 80086f8:	f7f9 fa1d 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80086fc:	2200      	movs	r2, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	2038      	movs	r0, #56	; 0x38
 8008702:	f7f9 f9fe 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008706:	2038      	movs	r0, #56	; 0x38
 8008708:	f7f9 fa15 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800870c:	2200      	movs	r2, #0
 800870e:	2100      	movs	r1, #0
 8008710:	2006      	movs	r0, #6
 8008712:	f7f9 f9f6 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008716:	2006      	movs	r0, #6
 8008718:	f7f9 fa0d 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 800871c:	2200      	movs	r2, #0
 800871e:	2100      	movs	r1, #0
 8008720:	2080      	movs	r0, #128	; 0x80
 8008722:	f7f9 f9ee 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8008726:	2080      	movs	r0, #128	; 0x80
 8008728:	f7f9 fa05 	bl	8001b36 <HAL_NVIC_EnableIRQ>
}
 800872c:	bf00      	nop
 800872e:	bd80      	pop	{r7, pc}

08008730 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008736:	4b1c      	ldr	r3, [pc, #112]	; (80087a8 <MX_CRC_Init+0x78>)
 8008738:	4a1c      	ldr	r2, [pc, #112]	; (80087ac <MX_CRC_Init+0x7c>)
 800873a:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800873c:	4b1a      	ldr	r3, [pc, #104]	; (80087a8 <MX_CRC_Init+0x78>)
 800873e:	2200      	movs	r2, #0
 8008740:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008742:	4b19      	ldr	r3, [pc, #100]	; (80087a8 <MX_CRC_Init+0x78>)
 8008744:	2200      	movs	r2, #0
 8008746:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008748:	4b17      	ldr	r3, [pc, #92]	; (80087a8 <MX_CRC_Init+0x78>)
 800874a:	2200      	movs	r2, #0
 800874c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800874e:	4b16      	ldr	r3, [pc, #88]	; (80087a8 <MX_CRC_Init+0x78>)
 8008750:	2200      	movs	r2, #0
 8008752:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008754:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <MX_CRC_Init+0x78>)
 8008756:	2201      	movs	r2, #1
 8008758:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800875a:	4813      	ldr	r0, [pc, #76]	; (80087a8 <MX_CRC_Init+0x78>)
 800875c:	f7f9 fa06 	bl	8001b6c <HAL_CRC_Init>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8008766:	f000 f989 	bl	8008a7c <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800876a:	4b0f      	ldr	r3, [pc, #60]	; (80087a8 <MX_CRC_Init+0x78>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	4b0d      	ldr	r3, [pc, #52]	; (80087a8 <MX_CRC_Init+0x78>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f042 0201 	orr.w	r2, r2, #1
 8008778:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <MX_CRC_Init+0x80>)
 800877c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008780:	4a0b      	ldr	r2, [pc, #44]	; (80087b0 <MX_CRC_Init+0x80>)
 8008782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800878a:	4b09      	ldr	r3, [pc, #36]	; (80087b0 <MX_CRC_Init+0x80>)
 800878c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008794:	607b      	str	r3, [r7, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8008798:	4803      	ldr	r0, [pc, #12]	; (80087a8 <MX_CRC_Init+0x78>)
 800879a:	f000 f9b9 	bl	8008b10 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	2400053c 	.word	0x2400053c
 80087ac:	58024c00 	.word	0x58024c00
 80087b0:	58024400 	.word	0x58024400

080087b4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 80087b8:	4b16      	ldr	r3, [pc, #88]	; (8008814 <MX_SAI1_Init+0x60>)
 80087ba:	4a17      	ldr	r2, [pc, #92]	; (8008818 <MX_SAI1_Init+0x64>)
 80087bc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 80087be:	4b15      	ldr	r3, [pc, #84]	; (8008814 <MX_SAI1_Init+0x60>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 80087c4:	4b13      	ldr	r3, [pc, #76]	; (8008814 <MX_SAI1_Init+0x60>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80087ca:	4b12      	ldr	r3, [pc, #72]	; (8008814 <MX_SAI1_Init+0x60>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 80087d0:	4b10      	ldr	r3, [pc, #64]	; (8008814 <MX_SAI1_Init+0x60>)
 80087d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80087d6:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80087d8:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <MX_SAI1_Init+0x60>)
 80087da:	2200      	movs	r2, #0
 80087dc:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80087de:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <MX_SAI1_Init+0x60>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_MONOMODE;
 80087e4:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <MX_SAI1_Init+0x60>)
 80087e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80087ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80087ec:	4b09      	ldr	r3, [pc, #36]	; (8008814 <MX_SAI1_Init+0x60>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80087f2:	4b08      	ldr	r3, [pc, #32]	; (8008814 <MX_SAI1_Init+0x60>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80087f8:	2302      	movs	r3, #2
 80087fa:	2200      	movs	r2, #0
 80087fc:	2100      	movs	r1, #0
 80087fe:	4805      	ldr	r0, [pc, #20]	; (8008814 <MX_SAI1_Init+0x60>)
 8008800:	f7ff f92e 	bl	8007a60 <HAL_SAI_InitProtocol>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <MX_SAI1_Init+0x5a>
  {
    Error_Handler();
 800880a:	f000 f937 	bl	8008a7c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800880e:	bf00      	nop
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	24000560 	.word	0x24000560
 8008818:	40015824 	.word	0x40015824

0800881c <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
	hsai_BlockA4.Instance = SAI4_Block_A;
 8008820:	4b2b      	ldr	r3, [pc, #172]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008822:	4a2c      	ldr	r2, [pc, #176]	; (80088d4 <MX_SAI4_Init+0xb8>)
 8008824:	601a      	str	r2, [r3, #0]
	hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8008826:	4b2a      	ldr	r3, [pc, #168]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008828:	2200      	movs	r2, #0
 800882a:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 800882c:	4b28      	ldr	r3, [pc, #160]	; (80088d0 <MX_SAI4_Init+0xb4>)
 800882e:	2201      	movs	r2, #1
 8008830:	605a      	str	r2, [r3, #4]
	hsai_BlockA4.Init.DataSize = SAI_DATASIZE_8;
 8008832:	4b27      	ldr	r3, [pc, #156]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008834:	2240      	movs	r2, #64	; 0x40
 8008836:	649a      	str	r2, [r3, #72]	; 0x48
    hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8008838:	4b25      	ldr	r3, [pc, #148]	; (80088d0 <MX_SAI4_Init+0xb4>)
 800883a:	2200      	movs	r2, #0
 800883c:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800883e:	4b24      	ldr	r3, [pc, #144]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008840:	2200      	movs	r2, #0
 8008842:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8008844:	4b22      	ldr	r3, [pc, #136]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008846:	2200      	movs	r2, #0
 8008848:	609a      	str	r2, [r3, #8]
	  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800884a:	4b21      	ldr	r3, [pc, #132]	; (80088d0 <MX_SAI4_Init+0xb4>)
 800884c:	2200      	movs	r2, #0
 800884e:	615a      	str	r2, [r3, #20]
	  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8008850:	4b1f      	ldr	r3, [pc, #124]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008852:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008856:	619a      	str	r2, [r3, #24]
	  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8008858:	4b1d      	ldr	r3, [pc, #116]	; (80088d0 <MX_SAI4_Init+0xb4>)
 800885a:	2200      	movs	r2, #0
 800885c:	61da      	str	r2, [r3, #28]
	  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 800885e:	4b1c      	ldr	r3, [pc, #112]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008860:	2200      	movs	r2, #0
 8008862:	62da      	str	r2, [r3, #44]	; 0x2c
	  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8008864:	4b1a      	ldr	r3, [pc, #104]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008866:	2200      	movs	r2, #0
 8008868:	631a      	str	r2, [r3, #48]	; 0x30
	  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 800886a:	4b19      	ldr	r3, [pc, #100]	; (80088d0 <MX_SAI4_Init+0xb4>)
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 8008872:	4b17      	ldr	r3, [pc, #92]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008874:	2201      	movs	r2, #1
 8008876:	63da      	str	r2, [r3, #60]	; 0x3c
	  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8008878:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <MX_SAI4_Init+0xb4>)
 800887a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800887e:	641a      	str	r2, [r3, #64]	; 0x40
	  hsai_BlockA4.FrameInit.FrameLength = 32;
 8008880:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008882:	2220      	movs	r2, #32
 8008884:	655a      	str	r2, [r3, #84]	; 0x54
	  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8008886:	4b12      	ldr	r3, [pc, #72]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008888:	2201      	movs	r2, #1
 800888a:	659a      	str	r2, [r3, #88]	; 0x58
	  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <MX_SAI4_Init+0xb4>)
 800888e:	2200      	movs	r2, #0
 8008890:	65da      	str	r2, [r3, #92]	; 0x5c
	  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008892:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <MX_SAI4_Init+0xb4>)
 8008894:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008898:	661a      	str	r2, [r3, #96]	; 0x60
	  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800889a:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <MX_SAI4_Init+0xb4>)
 800889c:	2200      	movs	r2, #0
 800889e:	665a      	str	r2, [r3, #100]	; 0x64
	  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <MX_SAI4_Init+0xb4>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	669a      	str	r2, [r3, #104]	; 0x68
	  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80088a6:	4b0a      	ldr	r3, [pc, #40]	; (80088d0 <MX_SAI4_Init+0xb4>)
 80088a8:	2280      	movs	r2, #128	; 0x80
 80088aa:	66da      	str	r2, [r3, #108]	; 0x6c
	  hsai_BlockA4.SlotInit.SlotNumber = 1;
 80088ac:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <MX_SAI4_Init+0xb4>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	671a      	str	r2, [r3, #112]	; 0x70
	  hsai_BlockA4.SlotInit.SlotActive = SAI_SLOTACTIVE_ALL;
 80088b2:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <MX_SAI4_Init+0xb4>)
 80088b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088b8:	675a      	str	r2, [r3, #116]	; 0x74
	  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 80088ba:	4805      	ldr	r0, [pc, #20]	; (80088d0 <MX_SAI4_Init+0xb4>)
 80088bc:	f7ff f902 	bl	8007ac4 <HAL_SAI_Init>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <MX_SAI4_Init+0xae>
	  {
		Error_Handler();
 80088c6:	f000 f8d9 	bl	8008a7c <Error_Handler>
	  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 80088ca:	bf00      	nop
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	240005f8 	.word	0x240005f8
 80088d4:	58005404 	.word	0x58005404

080088d8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80088de:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <MX_BDMA_Init+0x30>)
 80088e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088e4:	4a08      	ldr	r2, [pc, #32]	; (8008908 <MX_BDMA_Init+0x30>)
 80088e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <MX_BDMA_Init+0x30>)
 80088f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088f8:	607b      	str	r3, [r7, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	58024400 	.word	0x58024400

0800890c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008912:	4b23      	ldr	r3, [pc, #140]	; (80089a0 <MX_DMA_Init+0x94>)
 8008914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008918:	4a21      	ldr	r2, [pc, #132]	; (80089a0 <MX_DMA_Init+0x94>)
 800891a:	f043 0302 	orr.w	r3, r3, #2
 800891e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008922:	4b1f      	ldr	r3, [pc, #124]	; (80089a0 <MX_DMA_Init+0x94>)
 8008924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	607b      	str	r3, [r7, #4]
 800892e:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8008930:	4b1c      	ldr	r3, [pc, #112]	; (80089a4 <MX_DMA_Init+0x98>)
 8008932:	4a1d      	ldr	r2, [pc, #116]	; (80089a8 <MX_DMA_Init+0x9c>)
 8008934:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8008936:	4b1b      	ldr	r3, [pc, #108]	; (80089a4 <MX_DMA_Init+0x98>)
 8008938:	2200      	movs	r2, #0
 800893a:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800893c:	4b19      	ldr	r3, [pc, #100]	; (80089a4 <MX_DMA_Init+0x98>)
 800893e:	2280      	movs	r2, #128	; 0x80
 8008940:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8008942:	4b18      	ldr	r3, [pc, #96]	; (80089a4 <MX_DMA_Init+0x98>)
 8008944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008948:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800894a:	4b16      	ldr	r3, [pc, #88]	; (80089a4 <MX_DMA_Init+0x98>)
 800894c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008950:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008952:	4b14      	ldr	r3, [pc, #80]	; (80089a4 <MX_DMA_Init+0x98>)
 8008954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008958:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800895a:	4b12      	ldr	r3, [pc, #72]	; (80089a4 <MX_DMA_Init+0x98>)
 800895c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008960:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8008962:	4b10      	ldr	r3, [pc, #64]	; (80089a4 <MX_DMA_Init+0x98>)
 8008964:	2200      	movs	r2, #0
 8008966:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8008968:	4b0e      	ldr	r3, [pc, #56]	; (80089a4 <MX_DMA_Init+0x98>)
 800896a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800896e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008970:	4b0c      	ldr	r3, [pc, #48]	; (80089a4 <MX_DMA_Init+0x98>)
 8008972:	2204      	movs	r2, #4
 8008974:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008976:	4b0b      	ldr	r3, [pc, #44]	; (80089a4 <MX_DMA_Init+0x98>)
 8008978:	2203      	movs	r2, #3
 800897a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800897c:	4b09      	ldr	r3, [pc, #36]	; (80089a4 <MX_DMA_Init+0x98>)
 800897e:	2200      	movs	r2, #0
 8008980:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008982:	4b08      	ldr	r3, [pc, #32]	; (80089a4 <MX_DMA_Init+0x98>)
 8008984:	2200      	movs	r2, #0
 8008986:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8008988:	4806      	ldr	r0, [pc, #24]	; (80089a4 <MX_DMA_Init+0x98>)
 800898a:	f7f9 f9d9 	bl	8001d40 <HAL_DMA_Init>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <MX_DMA_Init+0x8c>
  {
    Error_Handler( );
 8008994:	f000 f872 	bl	8008a7c <Error_Handler>
  }

}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	58024400 	.word	0x58024400
 80089a4:	240004c4 	.word	0x240004c4
 80089a8:	40020410 	.word	0x40020410

080089ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b08b      	sub	sp, #44	; 0x2c
 80089b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089b2:	f107 0314 	add.w	r3, r7, #20
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	605a      	str	r2, [r3, #4]
 80089bc:	609a      	str	r2, [r3, #8]
 80089be:	60da      	str	r2, [r3, #12]
 80089c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80089c2:	4b21      	ldr	r3, [pc, #132]	; (8008a48 <MX_GPIO_Init+0x9c>)
 80089c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089c8:	4a1f      	ldr	r2, [pc, #124]	; (8008a48 <MX_GPIO_Init+0x9c>)
 80089ca:	f043 0301 	orr.w	r3, r3, #1
 80089ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80089d2:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <MX_GPIO_Init+0x9c>)
 80089d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	613b      	str	r3, [r7, #16]
 80089de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80089e0:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <MX_GPIO_Init+0x9c>)
 80089e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089e6:	4a18      	ldr	r2, [pc, #96]	; (8008a48 <MX_GPIO_Init+0x9c>)
 80089e8:	f043 0310 	orr.w	r3, r3, #16
 80089ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80089f0:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <MX_GPIO_Init+0x9c>)
 80089f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <MX_GPIO_Init+0x9c>)
 8008a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a04:	4a10      	ldr	r2, [pc, #64]	; (8008a48 <MX_GPIO_Init+0x9c>)
 8008a06:	f043 0308 	orr.w	r3, r3, #8
 8008a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008a0e:	4b0e      	ldr	r3, [pc, #56]	; (8008a48 <MX_GPIO_Init+0x9c>)
 8008a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	60bb      	str	r3, [r7, #8]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <MX_GPIO_Init+0x9c>)
 8008a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a22:	4a09      	ldr	r2, [pc, #36]	; (8008a48 <MX_GPIO_Init+0x9c>)
 8008a24:	f043 0320 	orr.w	r3, r3, #32
 8008a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008a2c:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <MX_GPIO_Init+0x9c>)
 8008a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a32:	f003 0320 	and.w	r3, r3, #32
 8008a36:	607b      	str	r3, [r7, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]

}
 8008a3a:	bf00      	nop
 8008a3c:	372c      	adds	r7, #44	; 0x2c
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	58024400 	.word	0x58024400

08008a4c <MX_CODEC_Init>:

/* USER CODE BEGIN 4 */

static void MX_CODEC_Init(void) {
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0

	/* CONFIG WM8994_Object_t */
	// cancel up to 1khz
	WM8994_Init_t hcodec_init;
	hcodec_init.InputDevice = WM8994_IN_NONE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]
	hcodec_init.OutputDevice = WM8994_OUT_SPEAKER;
 8008a56:	2301      	movs	r3, #1
 8008a58:	60bb      	str	r3, [r7, #8]
	hcodec_init.Frequency = WM8994_FREQUENCY_48K;
 8008a5a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008a5e:	60fb      	str	r3, [r7, #12]
	hcodec_init.Resolution = WM8994_RESOLUTION_32b;
 8008a60:	2303      	movs	r3, #3
 8008a62:	613b      	str	r3, [r7, #16]

	WM8994_Init(&hcodec, &hcodec_init);
 8008a64:	1d3b      	adds	r3, r7, #4
 8008a66:	4619      	mov	r1, r3
 8008a68:	4803      	ldr	r0, [pc, #12]	; (8008a78 <MX_CODEC_Init+0x2c>)
 8008a6a:	f7f7 fc51 	bl	8000310 <WM8994_Init>
//	WM8994_RegisterBusIO(&hcodec, &WM8994_Init, );
//	WM8994_SetProtocol(&hcodec, WM8994_PROTOCOL_L_JUSTIFIED);



}
 8008a6e:	bf00      	nop
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	2400073c 	.word	0x2400073c

08008a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008a80:	b672      	cpsid	i
}
 8008a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008a84:	e7fe      	b.n	8008a84 <Error_Handler+0x8>
	...

08008a88 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8008a8c:	4b10      	ldr	r3, [pc, #64]	; (8008ad0 <MX_PDM2PCM_Init+0x48>)
 8008a8e:	2201      	movs	r2, #1
 8008a90:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8008a92:	4b0f      	ldr	r3, [pc, #60]	; (8008ad0 <MX_PDM2PCM_Init+0x48>)
 8008a94:	2201      	movs	r2, #1
 8008a96:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8008a98:	4b0d      	ldr	r3, [pc, #52]	; (8008ad0 <MX_PDM2PCM_Init+0x48>)
 8008a9a:	4a0e      	ldr	r2, [pc, #56]	; (8008ad4 <MX_PDM2PCM_Init+0x4c>)
 8008a9c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8008a9e:	4b0c      	ldr	r3, [pc, #48]	; (8008ad0 <MX_PDM2PCM_Init+0x48>)
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <MX_PDM2PCM_Init+0x48>)
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8008aaa:	4809      	ldr	r0, [pc, #36]	; (8008ad0 <MX_PDM2PCM_Init+0x48>)
 8008aac:	f001 ffae 	bl	800aa0c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8008ab0:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <MX_PDM2PCM_Init+0x50>)
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8008ab6:	4b08      	ldr	r3, [pc, #32]	; (8008ad8 <MX_PDM2PCM_Init+0x50>)
 8008ab8:	2210      	movs	r2, #16
 8008aba:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8008abc:	4b06      	ldr	r3, [pc, #24]	; (8008ad8 <MX_PDM2PCM_Init+0x50>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8008ac2:	4905      	ldr	r1, [pc, #20]	; (8008ad8 <MX_PDM2PCM_Init+0x50>)
 8008ac4:	4802      	ldr	r0, [pc, #8]	; (8008ad0 <MX_PDM2PCM_Init+0x48>)
 8008ac6:	f002 f871 	bl	800abac <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008aca:	bf00      	nop
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	2400076c 	.word	0x2400076c
 8008ad4:	7d70a3d6 	.word	0x7d70a3d6
 8008ad8:	24000764 	.word	0x24000764

08008adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ae2:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <HAL_MspInit+0x30>)
 8008ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ae8:	4a08      	ldr	r2, [pc, #32]	; (8008b0c <HAL_MspInit+0x30>)
 8008aea:	f043 0302 	orr.w	r3, r3, #2
 8008aee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008af2:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <HAL_MspInit+0x30>)
 8008af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	58024400 	.word	0x58024400

08008b10 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a0b      	ldr	r2, [pc, #44]	; (8008b4c <HAL_CRC_MspInit+0x3c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d10e      	bne.n	8008b40 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008b22:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <HAL_CRC_MspInit+0x40>)
 8008b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b28:	4a09      	ldr	r2, [pc, #36]	; (8008b50 <HAL_CRC_MspInit+0x40>)
 8008b2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <HAL_CRC_MspInit+0x40>)
 8008b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008b40:	bf00      	nop
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	58024c00 	.word	0x58024c00
 8008b50:	58024400 	.word	0x58024400

08008b54 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b0ba      	sub	sp, #232	; 0xe8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008b5c:	f107 0310 	add.w	r3, r7, #16
 8008b60:	22b4      	movs	r2, #180	; 0xb4
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f002 f95f 	bl	800ae28 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a7f      	ldr	r2, [pc, #508]	; (8008d6c <HAL_SAI_MspInit+0x218>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d151      	bne.n	8008c18 <HAL_SAI_MspInit+0xc4>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8008b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008b7e:	f107 0310 	add.w	r3, r7, #16
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fc feda 	bl	800593c <HAL_RCCEx_PeriphCLKConfig>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 8008b8e:	f7ff ff75 	bl	8008a7c <Error_Handler>
    }

      if (SAI1_client == 0)
 8008b92:	4b77      	ldr	r3, [pc, #476]	; (8008d70 <HAL_SAI_MspInit+0x21c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10e      	bne.n	8008bb8 <HAL_SAI_MspInit+0x64>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008b9a:	4b76      	ldr	r3, [pc, #472]	; (8008d74 <HAL_SAI_MspInit+0x220>)
 8008b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ba0:	4a74      	ldr	r2, [pc, #464]	; (8008d74 <HAL_SAI_MspInit+0x220>)
 8008ba2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ba6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008baa:	4b72      	ldr	r3, [pc, #456]	; (8008d74 <HAL_SAI_MspInit+0x220>)
 8008bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8008bb8:	4b6d      	ldr	r3, [pc, #436]	; (8008d70 <HAL_SAI_MspInit+0x21c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	4a6c      	ldr	r2, [pc, #432]	; (8008d70 <HAL_SAI_MspInit+0x21c>)
 8008bc0:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008bc2:	2308      	movs	r3, #8
 8008bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bc8:	2302      	movs	r3, #2
 8008bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008bda:	2306      	movs	r3, #6
 8008bdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008be0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008be4:	4619      	mov	r1, r3
 8008be6:	4864      	ldr	r0, [pc, #400]	; (8008d78 <HAL_SAI_MspInit+0x224>)
 8008be8:	f7fb fc5a 	bl	80044a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8008bec:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c00:	2300      	movs	r3, #0
 8008c02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008c06:	2306      	movs	r3, #6
 8008c08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008c0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008c10:	4619      	mov	r1, r3
 8008c12:	485a      	ldr	r0, [pc, #360]	; (8008d7c <HAL_SAI_MspInit+0x228>)
 8008c14:	f7fb fc44 	bl	80044a0 <HAL_GPIO_Init>

    }
    /* SAI4 */
        if(hsai->Instance==SAI4_Block_A)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a58      	ldr	r2, [pc, #352]	; (8008d80 <HAL_SAI_MspInit+0x22c>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	f040 80a0 	bne.w	8008d64 <HAL_SAI_MspInit+0x210>
        {
        /* Peripheral clock enable */
      /** Initializes the peripherals clock
      */
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8008c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c28:	613b      	str	r3, [r7, #16]
        PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008c30:	f107 0310 	add.w	r3, r7, #16
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fc fe81 	bl	800593c <HAL_RCCEx_PeriphCLKConfig>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <HAL_SAI_MspInit+0xf0>
        {
          Error_Handler();
 8008c40:	f7ff ff1c 	bl	8008a7c <Error_Handler>
        }

        if (SAI4_client == 0)
 8008c44:	4b4f      	ldr	r3, [pc, #316]	; (8008d84 <HAL_SAI_MspInit+0x230>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10e      	bne.n	8008c6a <HAL_SAI_MspInit+0x116>
        {
           __HAL_RCC_SAI4_CLK_ENABLE();
 8008c4c:	4b49      	ldr	r3, [pc, #292]	; (8008d74 <HAL_SAI_MspInit+0x220>)
 8008c4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c52:	4a48      	ldr	r2, [pc, #288]	; (8008d74 <HAL_SAI_MspInit+0x220>)
 8008c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008c5c:	4b45      	ldr	r3, [pc, #276]	; (8008d74 <HAL_SAI_MspInit+0x220>)
 8008c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c66:	60bb      	str	r3, [r7, #8]
 8008c68:	68bb      	ldr	r3, [r7, #8]
        }
        SAI4_client ++;
 8008c6a:	4b46      	ldr	r3, [pc, #280]	; (8008d84 <HAL_SAI_MspInit+0x230>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	4a44      	ldr	r2, [pc, #272]	; (8008d84 <HAL_SAI_MspInit+0x230>)
 8008c72:	6013      	str	r3, [r2, #0]
        /**SAI4_A_Block_A GPIO Configuration
        PE4     ------> SAI4_D2
        PE5     ------> SAI4_CK2
        PD6     ------> SAI4_D1
        */
        GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008c74:	2330      	movs	r3, #48	; 0x30
 8008c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    //    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008c7a:	2312      	movs	r3, #18
 8008c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c86:	2300      	movs	r3, #0
 8008c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8008c8c:	230a      	movs	r3, #10
 8008c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008c92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008c96:	4619      	mov	r1, r3
 8008c98:	4837      	ldr	r0, [pc, #220]	; (8008d78 <HAL_SAI_MspInit+0x224>)
 8008c9a:	f7fb fc01 	bl	80044a0 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008c9e:	2340      	movs	r3, #64	; 0x40
 8008ca0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    //    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ca4:	2312      	movs	r3, #18
 8008ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008cbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4831      	ldr	r0, [pc, #196]	; (8008d88 <HAL_SAI_MspInit+0x234>)
 8008cc4:	f7fb fbec 	bl	80044a0 <HAL_GPIO_Init>

          /* Peripheral DMA init*/

        hdma_sai4_a.Instance = BDMA_Channel1;
 8008cc8:	4b30      	ldr	r3, [pc, #192]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008cca:	4a31      	ldr	r2, [pc, #196]	; (8008d90 <HAL_SAI_MspInit+0x23c>)
 8008ccc:	601a      	str	r2, [r3, #0]
        hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8008cce:	4b2f      	ldr	r3, [pc, #188]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008cd0:	220f      	movs	r2, #15
 8008cd2:	605a      	str	r2, [r3, #4]
        hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008cd4:	4b2d      	ldr	r3, [pc, #180]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	609a      	str	r2, [r3, #8]
        hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cda:	4b2c      	ldr	r3, [pc, #176]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	60da      	str	r2, [r3, #12]
        hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8008ce0:	4b2a      	ldr	r3, [pc, #168]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ce6:	611a      	str	r2, [r3, #16]
        hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ce8:	4b28      	ldr	r3, [pc, #160]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	615a      	str	r2, [r3, #20]

        // changed from word to byte so each word in memory
        // so that each spot in memofry fills
        hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008cee:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	619a      	str	r2, [r3, #24]
        hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8008cf4:	4b25      	ldr	r3, [pc, #148]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cfa:	61da      	str	r2, [r3, #28]
        hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008cfc:	4b23      	ldr	r3, [pc, #140]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008cfe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008d02:	621a      	str	r2, [r3, #32]
        if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8008d04:	4821      	ldr	r0, [pc, #132]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008d06:	f7f9 f81b 	bl	8001d40 <HAL_DMA_Init>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <HAL_SAI_MspInit+0x1c0>
        {
          Error_Handler();
 8008d10:	f7ff feb4 	bl	8008a7c <Error_Handler>
        }

        pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8008d14:	230e      	movs	r3, #14
 8008d16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        pSyncConfig.SyncEnable = DISABLE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
        pSyncConfig.EventEnable = ENABLE;
 8008d26:	2301      	movs	r3, #1
 8008d28:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
        pSyncConfig.RequestNumber = 1;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8008d32:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008d36:	4619      	mov	r1, r3
 8008d38:	4814      	ldr	r0, [pc, #80]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008d3a:	f7fb fa99 	bl	8004270 <HAL_DMAEx_ConfigMuxSync>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <HAL_SAI_MspInit+0x1f4>
        {
          Error_Handler();
 8008d44:	f7ff fe9a 	bl	8008a7c <Error_Handler>
        }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a10      	ldr	r2, [pc, #64]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008d50:	4a0e      	ldr	r2, [pc, #56]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a0c      	ldr	r2, [pc, #48]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008d5e:	4a0b      	ldr	r2, [pc, #44]	; (8008d8c <HAL_SAI_MspInit+0x238>)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8008d64:	bf00      	nop
 8008d66:	37e8      	adds	r7, #232	; 0xe8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	40015824 	.word	0x40015824
 8008d70:	240004a0 	.word	0x240004a0
 8008d74:	58024400 	.word	0x58024400
 8008d78:	58021000 	.word	0x58021000
 8008d7c:	58021400 	.word	0x58021400
 8008d80:	58005404 	.word	0x58005404
 8008d84:	240004a4 	.word	0x240004a4
 8008d88:	58020c00 	.word	0x58020c00
 8008d8c:	240006b4 	.word	0x240006b4
 8008d90:	5802541c 	.word	0x5802541c

08008d94 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a25      	ldr	r2, [pc, #148]	; (8008e38 <HAL_SAI_MspDeInit+0xa4>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d119      	bne.n	8008dda <HAL_SAI_MspDeInit+0x46>
    {
    SAI1_client --;
 8008da6:	4b25      	ldr	r3, [pc, #148]	; (8008e3c <HAL_SAI_MspDeInit+0xa8>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	4a23      	ldr	r2, [pc, #140]	; (8008e3c <HAL_SAI_MspDeInit+0xa8>)
 8008dae:	6013      	str	r3, [r2, #0]
      if (SAI1_client == 0)
 8008db0:	4b22      	ldr	r3, [pc, #136]	; (8008e3c <HAL_SAI_MspDeInit+0xa8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d107      	bne.n	8008dc8 <HAL_SAI_MspDeInit+0x34>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI1_CLK_DISABLE();
 8008db8:	4b21      	ldr	r3, [pc, #132]	; (8008e40 <HAL_SAI_MspDeInit+0xac>)
 8008dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008dbe:	4a20      	ldr	r2, [pc, #128]	; (8008e40 <HAL_SAI_MspDeInit+0xac>)
 8008dc0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008dc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3);
 8008dc8:	2108      	movs	r1, #8
 8008dca:	481e      	ldr	r0, [pc, #120]	; (8008e44 <HAL_SAI_MspDeInit+0xb0>)
 8008dcc:	f7fb fd10 	bl	80047f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9);
 8008dd0:	f44f 7160 	mov.w	r1, #896	; 0x380
 8008dd4:	481c      	ldr	r0, [pc, #112]	; (8008e48 <HAL_SAI_MspDeInit+0xb4>)
 8008dd6:	f7fb fd0b 	bl	80047f0 <HAL_GPIO_DeInit>

    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a1b      	ldr	r2, [pc, #108]	; (8008e4c <HAL_SAI_MspDeInit+0xb8>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d124      	bne.n	8008e2e <HAL_SAI_MspDeInit+0x9a>
    {
    SAI4_client --;
 8008de4:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <HAL_SAI_MspDeInit+0xbc>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	4a19      	ldr	r2, [pc, #100]	; (8008e50 <HAL_SAI_MspDeInit+0xbc>)
 8008dec:	6013      	str	r3, [r2, #0]
    if (SAI4_client == 0)
 8008dee:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <HAL_SAI_MspDeInit+0xbc>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d107      	bne.n	8008e06 <HAL_SAI_MspDeInit+0x72>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI4_CLK_DISABLE();
 8008df6:	4b12      	ldr	r3, [pc, #72]	; (8008e40 <HAL_SAI_MspDeInit+0xac>)
 8008df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008dfc:	4a10      	ldr	r2, [pc, #64]	; (8008e40 <HAL_SAI_MspDeInit+0xac>)
 8008dfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5);
 8008e06:	2130      	movs	r1, #48	; 0x30
 8008e08:	480e      	ldr	r0, [pc, #56]	; (8008e44 <HAL_SAI_MspDeInit+0xb0>)
 8008e0a:	f7fb fcf1 	bl	80047f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_6);
 8008e0e:	2140      	movs	r1, #64	; 0x40
 8008e10:	4810      	ldr	r0, [pc, #64]	; (8008e54 <HAL_SAI_MspDeInit+0xc0>)
 8008e12:	f7fb fced 	bl	80047f0 <HAL_GPIO_DeInit>

    /* SAI4 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7f9 fae9 	bl	80023f4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7f9 fae3 	bl	80023f4 <HAL_DMA_DeInit>
    }
}
 8008e2e:	bf00      	nop
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	40015824 	.word	0x40015824
 8008e3c:	240004a0 	.word	0x240004a0
 8008e40:	58024400 	.word	0x58024400
 8008e44:	58021000 	.word	0x58021000
 8008e48:	58021400 	.word	0x58021400
 8008e4c:	58005404 	.word	0x58005404
 8008e50:	240004a4 	.word	0x240004a4
 8008e54:	58020c00 	.word	0x58020c00

08008e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008e5c:	e7fe      	b.n	8008e5c <NMI_Handler+0x4>

08008e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e62:	e7fe      	b.n	8008e62 <HardFault_Handler+0x4>

08008e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008e64:	b480      	push	{r7}
 8008e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008e68:	e7fe      	b.n	8008e68 <MemManage_Handler+0x4>

08008e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008e6e:	e7fe      	b.n	8008e6e <BusFault_Handler+0x4>

08008e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008e74:	e7fe      	b.n	8008e74 <UsageFault_Handler+0x4>

08008e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008e76:	b480      	push	{r7}
 8008e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008e7a:	bf00      	nop
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008e88:	bf00      	nop
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008e92:	b480      	push	{r7}
 8008e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008e96:	bf00      	nop
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ea4:	f7f8 fd32 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ea8:	bf00      	nop
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BSP_LED_On(LED1);
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f7f8 fc7d 	bl	80017b0 <BSP_LED_On>
  /* USER CODE END EXTI0_IRQn 0 */
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	f7fb fdb5 	bl	8004a26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8008ebc:	bf00      	nop
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8008ec4:	4803      	ldr	r0, [pc, #12]	; (8008ed4 <DMA2_Stream0_IRQHandler+0x14>)
 8008ec6:	f7f9 feb5 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  BSP_LED_On(LED1);
 8008eca:	2000      	movs	r0, #0
 8008ecc:	f7f8 fc70 	bl	80017b0 <BSP_LED_On>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008ed0:	bf00      	nop
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	240004c4 	.word	0x240004c4

08008ed8 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8008edc:	4802      	ldr	r0, [pc, #8]	; (8008ee8 <DMAMUX2_OVR_IRQHandler+0x10>)
 8008ede:	f7fb fa8d 	bl	80043fc <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */
  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8008ee2:	bf00      	nop
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	240006b4 	.word	0x240006b4

08008eec <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8008ef0:	4803      	ldr	r0, [pc, #12]	; (8008f00 <BDMA_Channel1_IRQHandler+0x14>)
 8008ef2:	f7f9 fe9f 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */
  BSP_LED_On(LED2);
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	f7f8 fc5a 	bl	80017b0 <BSP_LED_On>
  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8008efc:	bf00      	nop
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	240006b4 	.word	0x240006b4

08008f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008f08:	4b32      	ldr	r3, [pc, #200]	; (8008fd4 <SystemInit+0xd0>)
 8008f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0e:	4a31      	ldr	r2, [pc, #196]	; (8008fd4 <SystemInit+0xd0>)
 8008f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008f18:	4b2f      	ldr	r3, [pc, #188]	; (8008fd8 <SystemInit+0xd4>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	2b06      	cmp	r3, #6
 8008f22:	d807      	bhi.n	8008f34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008f24:	4b2c      	ldr	r3, [pc, #176]	; (8008fd8 <SystemInit+0xd4>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f023 030f 	bic.w	r3, r3, #15
 8008f2c:	4a2a      	ldr	r2, [pc, #168]	; (8008fd8 <SystemInit+0xd4>)
 8008f2e:	f043 0307 	orr.w	r3, r3, #7
 8008f32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008f34:	4b29      	ldr	r3, [pc, #164]	; (8008fdc <SystemInit+0xd8>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a28      	ldr	r2, [pc, #160]	; (8008fdc <SystemInit+0xd8>)
 8008f3a:	f043 0301 	orr.w	r3, r3, #1
 8008f3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008f40:	4b26      	ldr	r3, [pc, #152]	; (8008fdc <SystemInit+0xd8>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008f46:	4b25      	ldr	r3, [pc, #148]	; (8008fdc <SystemInit+0xd8>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4924      	ldr	r1, [pc, #144]	; (8008fdc <SystemInit+0xd8>)
 8008f4c:	4b24      	ldr	r3, [pc, #144]	; (8008fe0 <SystemInit+0xdc>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008f52:	4b21      	ldr	r3, [pc, #132]	; (8008fd8 <SystemInit+0xd4>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0308 	and.w	r3, r3, #8
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d007      	beq.n	8008f6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008f5e:	4b1e      	ldr	r3, [pc, #120]	; (8008fd8 <SystemInit+0xd4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f023 030f 	bic.w	r3, r3, #15
 8008f66:	4a1c      	ldr	r2, [pc, #112]	; (8008fd8 <SystemInit+0xd4>)
 8008f68:	f043 0307 	orr.w	r3, r3, #7
 8008f6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008f6e:	4b1b      	ldr	r3, [pc, #108]	; (8008fdc <SystemInit+0xd8>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008f74:	4b19      	ldr	r3, [pc, #100]	; (8008fdc <SystemInit+0xd8>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008f7a:	4b18      	ldr	r3, [pc, #96]	; (8008fdc <SystemInit+0xd8>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008f80:	4b16      	ldr	r3, [pc, #88]	; (8008fdc <SystemInit+0xd8>)
 8008f82:	4a18      	ldr	r2, [pc, #96]	; (8008fe4 <SystemInit+0xe0>)
 8008f84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008f86:	4b15      	ldr	r3, [pc, #84]	; (8008fdc <SystemInit+0xd8>)
 8008f88:	4a17      	ldr	r2, [pc, #92]	; (8008fe8 <SystemInit+0xe4>)
 8008f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008f8c:	4b13      	ldr	r3, [pc, #76]	; (8008fdc <SystemInit+0xd8>)
 8008f8e:	4a17      	ldr	r2, [pc, #92]	; (8008fec <SystemInit+0xe8>)
 8008f90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008f92:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <SystemInit+0xd8>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008f98:	4b10      	ldr	r3, [pc, #64]	; (8008fdc <SystemInit+0xd8>)
 8008f9a:	4a14      	ldr	r2, [pc, #80]	; (8008fec <SystemInit+0xe8>)
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008f9e:	4b0f      	ldr	r3, [pc, #60]	; (8008fdc <SystemInit+0xd8>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <SystemInit+0xd8>)
 8008fa6:	4a11      	ldr	r2, [pc, #68]	; (8008fec <SystemInit+0xe8>)
 8008fa8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008faa:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <SystemInit+0xd8>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008fb0:	4b0a      	ldr	r3, [pc, #40]	; (8008fdc <SystemInit+0xd8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a09      	ldr	r2, [pc, #36]	; (8008fdc <SystemInit+0xd8>)
 8008fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008fbc:	4b07      	ldr	r3, [pc, #28]	; (8008fdc <SystemInit+0xd8>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008fc2:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <SystemInit+0xec>)
 8008fc4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008fc8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008fca:	bf00      	nop
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	e000ed00 	.word	0xe000ed00
 8008fd8:	52002000 	.word	0x52002000
 8008fdc:	58024400 	.word	0x58024400
 8008fe0:	eaf6ed7f 	.word	0xeaf6ed7f
 8008fe4:	02020200 	.word	0x02020200
 8008fe8:	01ff0000 	.word	0x01ff0000
 8008fec:	01010280 	.word	0x01010280
 8008ff0:	52004000 	.word	0x52004000

08008ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800902c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008ff8:	f7ff ff84 	bl	8008f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ffc:	480c      	ldr	r0, [pc, #48]	; (8009030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008ffe:	490d      	ldr	r1, [pc, #52]	; (8009034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009000:	4a0d      	ldr	r2, [pc, #52]	; (8009038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009004:	e002      	b.n	800900c <LoopCopyDataInit>

08009006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800900a:	3304      	adds	r3, #4

0800900c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800900c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800900e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009010:	d3f9      	bcc.n	8009006 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009012:	4a0a      	ldr	r2, [pc, #40]	; (800903c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009014:	4c0a      	ldr	r4, [pc, #40]	; (8009040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009018:	e001      	b.n	800901e <LoopFillZerobss>

0800901a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800901a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800901c:	3204      	adds	r2, #4

0800901e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800901e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009020:	d3fb      	bcc.n	800901a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009022:	f001 fedd 	bl	800ade0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009026:	f7ff fa8d 	bl	8008544 <main>
  bx  lr
 800902a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800902c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009030:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009034:	24000480 	.word	0x24000480
  ldr r2, =_sidata
 8009038:	0800b4a8 	.word	0x0800b4a8
  ldr r2, =_sbss
 800903c:	24000480 	.word	0x24000480
  ldr r4, =_ebss
 8009040:	240007b8 	.word	0x240007b8

08009044 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009044:	e7fe      	b.n	8009044 <ADC3_IRQHandler>
	...

08009048 <D16_GENERIC>:
 8009048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	b089      	sub	sp, #36	; 0x24
 800904e:	6993      	ldr	r3, [r2, #24]
 8009050:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009052:	9103      	str	r1, [sp, #12]
 8009054:	9307      	str	r3, [sp, #28]
 8009056:	69d3      	ldr	r3, [r2, #28]
 8009058:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800905c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009060:	9106      	str	r1, [sp, #24]
 8009062:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8009066:	2d00      	cmp	r5, #0
 8009068:	d063      	beq.n	8009132 <D16_GENERIC+0xea>
 800906a:	f001 0520 	and.w	r5, r1, #32
 800906e:	f001 0110 	and.w	r1, r1, #16
 8009072:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8009154 <D16_GENERIC+0x10c>
 8009076:	46c1      	mov	r9, r8
 8009078:	9104      	str	r1, [sp, #16]
 800907a:	2100      	movs	r1, #0
 800907c:	9505      	str	r5, [sp, #20]
 800907e:	e04d      	b.n	800911c <D16_GENERIC+0xd4>
 8009080:	5d87      	ldrb	r7, [r0, r6]
 8009082:	7805      	ldrb	r5, [r0, #0]
 8009084:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009088:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800908c:	b2fe      	uxtb	r6, r7
 800908e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8009092:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8009096:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800909a:	441d      	add	r5, r3
 800909c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 80090a0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80090a4:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80090a8:	0a9b      	lsrs	r3, r3, #10
 80090aa:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80090ae:	4d27      	ldr	r5, [pc, #156]	; (800914c <D16_GENERIC+0x104>)
 80090b0:	fb26 c505 	smlad	r5, r6, r5, ip
 80090b4:	4f26      	ldr	r7, [pc, #152]	; (8009150 <D16_GENERIC+0x108>)
 80090b6:	fb26 fc07 	smuad	ip, r6, r7
 80090ba:	9e04      	ldr	r6, [sp, #16]
 80090bc:	f101 0801 	add.w	r8, r1, #1
 80090c0:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 80090c4:	b1ae      	cbz	r6, 80090f2 <D16_GENERIC+0xaa>
 80090c6:	442c      	add	r4, r5
 80090c8:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80090cc:	eba4 040a 	sub.w	r4, r4, sl
 80090d0:	46aa      	mov	sl, r5
 80090d2:	17e7      	asrs	r7, r4, #31
 80090d4:	fba4 450b 	umull	r4, r5, r4, fp
 80090d8:	e9cd 4500 	strd	r4, r5, [sp]
 80090dc:	fb0b 5407 	mla	r4, fp, r7, r5
 80090e0:	9401      	str	r4, [sp, #4]
 80090e2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80090e6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80090ea:	f145 0500 	adc.w	r5, r5, #0
 80090ee:	006c      	lsls	r4, r5, #1
 80090f0:	4625      	mov	r5, r4
 80090f2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 80090f6:	042d      	lsls	r5, r5, #16
 80090f8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80090fc:	2700      	movs	r7, #0
 80090fe:	fb01 fb0b 	mul.w	fp, r1, fp
 8009102:	fa1f f188 	uxth.w	r1, r8
 8009106:	fbc9 6705 	smlal	r6, r7, r9, r5
 800910a:	9e03      	ldr	r6, [sp, #12]
 800910c:	10bd      	asrs	r5, r7, #2
 800910e:	f305 050f 	ssat	r5, #16, r5
 8009112:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009116:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009118:	428d      	cmp	r5, r1
 800911a:	d90a      	bls.n	8009132 <D16_GENERIC+0xea>
 800911c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800911e:	2d01      	cmp	r5, #1
 8009120:	b2ee      	uxtb	r6, r5
 8009122:	d1ad      	bne.n	8009080 <D16_GENERIC+0x38>
 8009124:	9d05      	ldr	r5, [sp, #20]
 8009126:	f850 7b02 	ldr.w	r7, [r0], #2
 800912a:	2d00      	cmp	r5, #0
 800912c:	d0ae      	beq.n	800908c <D16_GENERIC+0x44>
 800912e:	ba7f      	rev16	r7, r7
 8009130:	e7ac      	b.n	800908c <D16_GENERIC+0x44>
 8009132:	2000      	movs	r0, #0
 8009134:	9906      	ldr	r1, [sp, #24]
 8009136:	61d3      	str	r3, [r2, #28]
 8009138:	9b07      	ldr	r3, [sp, #28]
 800913a:	f8c2 c008 	str.w	ip, [r2, #8]
 800913e:	60d1      	str	r1, [r2, #12]
 8009140:	6193      	str	r3, [r2, #24]
 8009142:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8009146:	b009      	add	sp, #36	; 0x24
 8009148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914c:	00030001 	.word	0x00030001
 8009150:	00010003 	.word	0x00010003
 8009154:	24000000 	.word	0x24000000

08009158 <D24_GENERIC>:
 8009158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009160:	b089      	sub	sp, #36	; 0x24
 8009162:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009164:	9303      	str	r3, [sp, #12]
 8009166:	6993      	ldr	r3, [r2, #24]
 8009168:	9104      	str	r1, [sp, #16]
 800916a:	9307      	str	r3, [sp, #28]
 800916c:	69d1      	ldr	r1, [r2, #28]
 800916e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009172:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8009176:	2e00      	cmp	r6, #0
 8009178:	f000 8088 	beq.w	800928c <D24_GENERIC+0x134>
 800917c:	f005 0620 	and.w	r6, r5, #32
 8009180:	f005 0510 	and.w	r5, r5, #16
 8009184:	f04f 0c00 	mov.w	ip, #0
 8009188:	f8df e140 	ldr.w	lr, [pc, #320]	; 80092cc <D24_GENERIC+0x174>
 800918c:	9606      	str	r6, [sp, #24]
 800918e:	9505      	str	r5, [sp, #20]
 8009190:	e064      	b.n	800925c <D24_GENERIC+0x104>
 8009192:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8009196:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800919a:	f810 b007 	ldrb.w	fp, [r0, r7]
 800919e:	042d      	lsls	r5, r5, #16
 80091a0:	19f0      	adds	r0, r6, r7
 80091a2:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 80091a6:	44a9      	add	r9, r5
 80091a8:	fa5f f689 	uxtb.w	r6, r9
 80091ac:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80091b0:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80091b4:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 80091b8:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80091bc:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80091c0:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 80091c4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80091c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80091cc:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80091d0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80091d4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80091d8:	4d3a      	ldr	r5, [pc, #232]	; (80092c4 <D24_GENERIC+0x16c>)
 80091da:	fb26 8705 	smlad	r7, r6, r5, r8
 80091de:	4d3a      	ldr	r5, [pc, #232]	; (80092c8 <D24_GENERIC+0x170>)
 80091e0:	fb26 3805 	smlad	r8, r6, r5, r3
 80091e4:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80091e8:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 80091ec:	2301      	movs	r3, #1
 80091ee:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 80091f2:	fb26 f603 	smuad	r6, r6, r3
 80091f6:	eb0c 0903 	add.w	r9, ip, r3
 80091fa:	eb0b 0306 	add.w	r3, fp, r6
 80091fe:	9e05      	ldr	r6, [sp, #20]
 8009200:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8009204:	b1ae      	cbz	r6, 8009232 <D24_GENERIC+0xda>
 8009206:	442c      	add	r4, r5
 8009208:	9e03      	ldr	r6, [sp, #12]
 800920a:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800920e:	1ba4      	subs	r4, r4, r6
 8009210:	9503      	str	r5, [sp, #12]
 8009212:	17e7      	asrs	r7, r4, #31
 8009214:	fba4 450b 	umull	r4, r5, r4, fp
 8009218:	e9cd 4500 	strd	r4, r5, [sp]
 800921c:	fb0b 5407 	mla	r4, fp, r7, r5
 8009220:	9401      	str	r4, [sp, #4]
 8009222:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009226:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800922a:	f145 0500 	adc.w	r5, r5, #0
 800922e:	006c      	lsls	r4, r5, #1
 8009230:	4625      	mov	r5, r4
 8009232:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009236:	03ad      	lsls	r5, r5, #14
 8009238:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800923c:	2700      	movs	r7, #0
 800923e:	fb0c fb0b 	mul.w	fp, ip, fp
 8009242:	fa1f fc89 	uxth.w	ip, r9
 8009246:	fbca 6705 	smlal	r6, r7, sl, r5
 800924a:	9e04      	ldr	r6, [sp, #16]
 800924c:	10bd      	asrs	r5, r7, #2
 800924e:	f305 050f 	ssat	r5, #16, r5
 8009252:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009256:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009258:	4565      	cmp	r5, ip
 800925a:	d917      	bls.n	800928c <D24_GENERIC+0x134>
 800925c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800925e:	f890 9000 	ldrb.w	r9, [r0]
 8009262:	b2ef      	uxtb	r7, r5
 8009264:	2d01      	cmp	r5, #1
 8009266:	b23e      	sxth	r6, r7
 8009268:	d193      	bne.n	8009192 <D24_GENERIC+0x3a>
 800926a:	9d06      	ldr	r5, [sp, #24]
 800926c:	b1dd      	cbz	r5, 80092a6 <D24_GENERIC+0x14e>
 800926e:	78c7      	ldrb	r7, [r0, #3]
 8009270:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8009274:	f01c 0f01 	tst.w	ip, #1
 8009278:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800927c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8009280:	d11a      	bne.n	80092b8 <D24_GENERIC+0x160>
 8009282:	f890 9001 	ldrb.w	r9, [r0, #1]
 8009286:	3002      	adds	r0, #2
 8009288:	44b1      	add	r9, r6
 800928a:	e78d      	b.n	80091a8 <D24_GENERIC+0x50>
 800928c:	6093      	str	r3, [r2, #8]
 800928e:	2000      	movs	r0, #0
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	f8c2 800c 	str.w	r8, [r2, #12]
 8009296:	6153      	str	r3, [r2, #20]
 8009298:	9b07      	ldr	r3, [sp, #28]
 800929a:	61d1      	str	r1, [r2, #28]
 800929c:	6114      	str	r4, [r2, #16]
 800929e:	6193      	str	r3, [r2, #24]
 80092a0:	b009      	add	sp, #36	; 0x24
 80092a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a6:	7845      	ldrb	r5, [r0, #1]
 80092a8:	3003      	adds	r0, #3
 80092aa:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80092ae:	022d      	lsls	r5, r5, #8
 80092b0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80092b4:	44a9      	add	r9, r5
 80092b6:	e777      	b.n	80091a8 <D24_GENERIC+0x50>
 80092b8:	7886      	ldrb	r6, [r0, #2]
 80092ba:	3004      	adds	r0, #4
 80092bc:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80092c0:	44a9      	add	r9, r5
 80092c2:	e771      	b.n	80091a8 <D24_GENERIC+0x50>
 80092c4:	00030001 	.word	0x00030001
 80092c8:	00060007 	.word	0x00060007
 80092cc:	24000000 	.word	0x24000000

080092d0 <D32_GENERIC>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80092d8:	b089      	sub	sp, #36	; 0x24
 80092da:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80092dc:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80092de:	9302      	str	r3, [sp, #8]
 80092e0:	6993      	ldr	r3, [r2, #24]
 80092e2:	9104      	str	r1, [sp, #16]
 80092e4:	9307      	str	r3, [sp, #28]
 80092e6:	9503      	str	r5, [sp, #12]
 80092e8:	69d1      	ldr	r1, [r2, #28]
 80092ea:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80092ec:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80092f0:	2e00      	cmp	r6, #0
 80092f2:	f000 8097 	beq.w	8009424 <D32_GENERIC+0x154>
 80092f6:	f005 0620 	and.w	r6, r5, #32
 80092fa:	f005 0510 	and.w	r5, r5, #16
 80092fe:	f04f 0e00 	mov.w	lr, #0
 8009302:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009454 <D32_GENERIC+0x184>
 8009306:	9606      	str	r6, [sp, #24]
 8009308:	9505      	str	r5, [sp, #20]
 800930a:	e079      	b.n	8009400 <D32_GENERIC+0x130>
 800930c:	783d      	ldrb	r5, [r7, #0]
 800930e:	f810 b009 	ldrb.w	fp, [r0, r9]
 8009312:	042d      	lsls	r5, r5, #16
 8009314:	f810 a006 	ldrb.w	sl, [r0, r6]
 8009318:	f890 9000 	ldrb.w	r9, [r0]
 800931c:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8009320:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8009324:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8009328:	44a9      	add	r9, r5
 800932a:	fa5f f789 	uxtb.w	r7, r9
 800932e:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8009332:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8009336:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800933a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800933e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8009342:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8009346:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800934a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800934e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009352:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8009356:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800935a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800935e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8009362:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009366:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800936a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800936e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009372:	4d34      	ldr	r5, [pc, #208]	; (8009444 <D32_GENERIC+0x174>)
 8009374:	fb29 8805 	smlad	r8, r9, r5, r8
 8009378:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800937c:	fb26 8705 	smlad	r7, r6, r5, r8
 8009380:	4d31      	ldr	r5, [pc, #196]	; (8009448 <D32_GENERIC+0x178>)
 8009382:	fb29 3305 	smlad	r3, r9, r5, r3
 8009386:	4d31      	ldr	r5, [pc, #196]	; (800944c <D32_GENERIC+0x17c>)
 8009388:	fb26 3805 	smlad	r8, r6, r5, r3
 800938c:	2301      	movs	r3, #1
 800938e:	fb29 f903 	smuad	r9, r9, r3
 8009392:	4b2f      	ldr	r3, [pc, #188]	; (8009450 <D32_GENERIC+0x180>)
 8009394:	fb26 9303 	smlad	r3, r6, r3, r9
 8009398:	9e05      	ldr	r6, [sp, #20]
 800939a:	f10e 0901 	add.w	r9, lr, #1
 800939e:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80093a2:	b1ae      	cbz	r6, 80093d0 <D32_GENERIC+0x100>
 80093a4:	442c      	add	r4, r5
 80093a6:	9e02      	ldr	r6, [sp, #8]
 80093a8:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80093ac:	1ba4      	subs	r4, r4, r6
 80093ae:	9502      	str	r5, [sp, #8]
 80093b0:	17e7      	asrs	r7, r4, #31
 80093b2:	fba4 450a 	umull	r4, r5, r4, sl
 80093b6:	e9cd 4500 	strd	r4, r5, [sp]
 80093ba:	fb0a 5407 	mla	r4, sl, r7, r5
 80093be:	9401      	str	r4, [sp, #4]
 80093c0:	e9dd 4500 	ldrd	r4, r5, [sp]
 80093c4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80093c8:	f145 0500 	adc.w	r5, r5, #0
 80093cc:	006c      	lsls	r4, r5, #1
 80093ce:	4625      	mov	r5, r4
 80093d0:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 80093d4:	036d      	lsls	r5, r5, #13
 80093d6:	9f03      	ldr	r7, [sp, #12]
 80093d8:	fb0e fb0a 	mul.w	fp, lr, sl
 80093dc:	fa1f fe89 	uxth.w	lr, r9
 80093e0:	f04f 0a00 	mov.w	sl, #0
 80093e4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80093e8:	9e04      	ldr	r6, [sp, #16]
 80093ea:	fbc7 9a05 	smlal	r9, sl, r7, r5
 80093ee:	4657      	mov	r7, sl
 80093f0:	10bd      	asrs	r5, r7, #2
 80093f2:	f305 050f 	ssat	r5, #16, r5
 80093f6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80093fa:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80093fc:	4575      	cmp	r5, lr
 80093fe:	d911      	bls.n	8009424 <D32_GENERIC+0x154>
 8009400:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009402:	b2ee      	uxtb	r6, r5
 8009404:	2d01      	cmp	r5, #1
 8009406:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800940a:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800940e:	f47f af7d 	bne.w	800930c <D32_GENERIC+0x3c>
 8009412:	1d05      	adds	r5, r0, #4
 8009414:	f8d0 9000 	ldr.w	r9, [r0]
 8009418:	9806      	ldr	r0, [sp, #24]
 800941a:	b180      	cbz	r0, 800943e <D32_GENERIC+0x16e>
 800941c:	fa99 f999 	rev16.w	r9, r9
 8009420:	4628      	mov	r0, r5
 8009422:	e782      	b.n	800932a <D32_GENERIC+0x5a>
 8009424:	6093      	str	r3, [r2, #8]
 8009426:	2000      	movs	r0, #0
 8009428:	9b02      	ldr	r3, [sp, #8]
 800942a:	f8c2 800c 	str.w	r8, [r2, #12]
 800942e:	6153      	str	r3, [r2, #20]
 8009430:	9b07      	ldr	r3, [sp, #28]
 8009432:	61d1      	str	r1, [r2, #28]
 8009434:	6114      	str	r4, [r2, #16]
 8009436:	6193      	str	r3, [r2, #24]
 8009438:	b009      	add	sp, #36	; 0x24
 800943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943e:	4628      	mov	r0, r5
 8009440:	e773      	b.n	800932a <D32_GENERIC+0x5a>
 8009442:	bf00      	nop
 8009444:	00060003 	.word	0x00060003
 8009448:	000a000c 	.word	0x000a000c
 800944c:	000c000a 	.word	0x000c000a
 8009450:	00030006 	.word	0x00030006
 8009454:	24000000 	.word	0x24000000

08009458 <D48_GENERIC>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	6913      	ldr	r3, [r2, #16]
 800945e:	b089      	sub	sp, #36	; 0x24
 8009460:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	6953      	ldr	r3, [r2, #20]
 8009466:	9104      	str	r1, [sp, #16]
 8009468:	9302      	str	r3, [sp, #8]
 800946a:	6993      	ldr	r3, [r2, #24]
 800946c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8009470:	9307      	str	r3, [sp, #28]
 8009472:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8009476:	9100      	str	r1, [sp, #0]
 8009478:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800947a:	9103      	str	r1, [sp, #12]
 800947c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800947e:	2c00      	cmp	r4, #0
 8009480:	f000 80be 	beq.w	8009600 <D48_GENERIC+0x1a8>
 8009484:	f001 0420 	and.w	r4, r1, #32
 8009488:	f001 0110 	and.w	r1, r1, #16
 800948c:	f04f 0e00 	mov.w	lr, #0
 8009490:	9105      	str	r1, [sp, #20]
 8009492:	9406      	str	r4, [sp, #24]
 8009494:	4962      	ldr	r1, [pc, #392]	; (8009620 <D48_GENERIC+0x1c8>)
 8009496:	e0a0      	b.n	80095da <D48_GENERIC+0x182>
 8009498:	eb00 0608 	add.w	r6, r0, r8
 800949c:	f810 a008 	ldrb.w	sl, [r0, r8]
 80094a0:	f810 9005 	ldrb.w	r9, [r0, r5]
 80094a4:	5df4      	ldrb	r4, [r6, r7]
 80094a6:	443e      	add	r6, r7
 80094a8:	f890 b000 	ldrb.w	fp, [r0]
 80094ac:	0420      	lsls	r0, r4, #16
 80094ae:	eb06 0408 	add.w	r4, r6, r8
 80094b2:	f816 6008 	ldrb.w	r6, [r6, r8]
 80094b6:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 80094ba:	f814 8007 	ldrb.w	r8, [r4, r7]
 80094be:	4427      	add	r7, r4
 80094c0:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 80094c4:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 80094c8:	eb0a 040b 	add.w	r4, sl, fp
 80094cc:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 80094d0:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80094d4:	b2f7      	uxtb	r7, r6
 80094d6:	b2e6      	uxtb	r6, r4
 80094d8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80094dc:	f3c4 4907 	ubfx	r9, r4, #16, #8
 80094e0:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 80094e4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80094e8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 80094ec:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 80094f0:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 80094f4:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 80094f8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80094fc:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8009500:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8009504:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009508:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800950c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009510:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8009514:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009518:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800951c:	9d00      	ldr	r5, [sp, #0]
 800951e:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8009522:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009526:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800952a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800952e:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8009532:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8009536:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800953a:	4c3a      	ldr	r4, [pc, #232]	; (8009624 <D48_GENERIC+0x1cc>)
 800953c:	fb26 5a04 	smlad	sl, r6, r4, r5
 8009540:	4c39      	ldr	r4, [pc, #228]	; (8009628 <D48_GENERIC+0x1d0>)
 8009542:	fb29 aa04 	smlad	sl, r9, r4, sl
 8009546:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800954a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800954e:	4c37      	ldr	r4, [pc, #220]	; (800962c <D48_GENERIC+0x1d4>)
 8009550:	fb26 3304 	smlad	r3, r6, r4, r3
 8009554:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8009558:	fb29 3304 	smlad	r3, r9, r4, r3
 800955c:	4c34      	ldr	r4, [pc, #208]	; (8009630 <D48_GENERIC+0x1d8>)
 800955e:	fb27 3304 	smlad	r3, r7, r4, r3
 8009562:	2501      	movs	r5, #1
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	fb26 f605 	smuad	r6, r6, r5
 800956a:	4b32      	ldr	r3, [pc, #200]	; (8009634 <D48_GENERIC+0x1dc>)
 800956c:	fb29 6903 	smlad	r9, r9, r3, r6
 8009570:	4b31      	ldr	r3, [pc, #196]	; (8009638 <D48_GENERIC+0x1e0>)
 8009572:	fb27 9303 	smlad	r3, r7, r3, r9
 8009576:	9c05      	ldr	r4, [sp, #20]
 8009578:	eb0e 0805 	add.w	r8, lr, r5
 800957c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8009580:	b19c      	cbz	r4, 80095aa <D48_GENERIC+0x152>
 8009582:	9c01      	ldr	r4, [sp, #4]
 8009584:	9d02      	ldr	r5, [sp, #8]
 8009586:	4454      	add	r4, sl
 8009588:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800958c:	f8cd a008 	str.w	sl, [sp, #8]
 8009590:	1b64      	subs	r4, r4, r5
 8009592:	fba4 ab09 	umull	sl, fp, r4, r9
 8009596:	17e7      	asrs	r7, r4, #31
 8009598:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800959c:	fb09 bb07 	mla	fp, r9, r7, fp
 80095a0:	f14b 0500 	adc.w	r5, fp, #0
 80095a4:	006c      	lsls	r4, r5, #1
 80095a6:	46a2      	mov	sl, r4
 80095a8:	9401      	str	r4, [sp, #4]
 80095aa:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80095ac:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 80095b0:	9d03      	ldr	r5, [sp, #12]
 80095b2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80095b6:	fb0e f606 	mul.w	r6, lr, r6
 80095ba:	fa1f fe88 	uxth.w	lr, r8
 80095be:	f04f 0800 	mov.w	r8, #0
 80095c2:	fbc5 780a 	smlal	r7, r8, r5, sl
 80095c6:	4645      	mov	r5, r8
 80095c8:	10ac      	asrs	r4, r5, #2
 80095ca:	9d04      	ldr	r5, [sp, #16]
 80095cc:	f304 040f 	ssat	r4, #16, r4
 80095d0:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 80095d4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80095d6:	4574      	cmp	r4, lr
 80095d8:	d912      	bls.n	8009600 <D48_GENERIC+0x1a8>
 80095da:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80095dc:	b2e5      	uxtb	r5, r4
 80095de:	2c01      	cmp	r4, #1
 80095e0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80095e4:	f1c5 0700 	rsb	r7, r5, #0
 80095e8:	f47f af56 	bne.w	8009498 <D48_GENERIC+0x40>
 80095ec:	9d06      	ldr	r5, [sp, #24]
 80095ee:	e9d0 4600 	ldrd	r4, r6, [r0]
 80095f2:	3006      	adds	r0, #6
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	f43f af6b 	beq.w	80094d0 <D48_GENERIC+0x78>
 80095fa:	ba64      	rev16	r4, r4
 80095fc:	ba76      	rev16	r6, r6
 80095fe:	e767      	b.n	80094d0 <D48_GENERIC+0x78>
 8009600:	6093      	str	r3, [r2, #8]
 8009602:	2000      	movs	r0, #0
 8009604:	9b00      	ldr	r3, [sp, #0]
 8009606:	f8c2 c01c 	str.w	ip, [r2, #28]
 800960a:	60d3      	str	r3, [r2, #12]
 800960c:	9b01      	ldr	r3, [sp, #4]
 800960e:	6113      	str	r3, [r2, #16]
 8009610:	9b02      	ldr	r3, [sp, #8]
 8009612:	6153      	str	r3, [r2, #20]
 8009614:	9b07      	ldr	r3, [sp, #28]
 8009616:	6193      	str	r3, [r2, #24]
 8009618:	b009      	add	sp, #36	; 0x24
 800961a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961e:	bf00      	nop
 8009620:	24000000 	.word	0x24000000
 8009624:	000f000a 	.word	0x000f000a
 8009628:	00060003 	.word	0x00060003
 800962c:	00150019 	.word	0x00150019
 8009630:	00190015 	.word	0x00190015
 8009634:	00030006 	.word	0x00030006
 8009638:	000a000f 	.word	0x000a000f

0800963c <D64_GENERIC>:
 800963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	6913      	ldr	r3, [r2, #16]
 8009642:	b089      	sub	sp, #36	; 0x24
 8009644:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	6953      	ldr	r3, [r2, #20]
 800964a:	9105      	str	r1, [sp, #20]
 800964c:	9303      	str	r3, [sp, #12]
 800964e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8009650:	6993      	ldr	r3, [r2, #24]
 8009652:	69d4      	ldr	r4, [r2, #28]
 8009654:	9307      	str	r3, [sp, #28]
 8009656:	9504      	str	r5, [sp, #16]
 8009658:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800965c:	2900      	cmp	r1, #0
 800965e:	f000 80e8 	beq.w	8009832 <D64_GENERIC+0x1f6>
 8009662:	6a11      	ldr	r1, [r2, #32]
 8009664:	2500      	movs	r5, #0
 8009666:	46b3      	mov	fp, r6
 8009668:	9302      	str	r3, [sp, #8]
 800966a:	9106      	str	r1, [sp, #24]
 800966c:	4978      	ldr	r1, [pc, #480]	; (8009850 <D64_GENERIC+0x214>)
 800966e:	e0cc      	b.n	800980a <D64_GENERIC+0x1ce>
 8009670:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8009674:	f1ce 0c00 	rsb	ip, lr, #0
 8009678:	f890 9000 	ldrb.w	r9, [r0]
 800967c:	eb00 0708 	add.w	r7, r0, r8
 8009680:	f810 6008 	ldrb.w	r6, [r0, r8]
 8009684:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8009688:	f817 000c 	ldrb.w	r0, [r7, ip]
 800968c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8009690:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8009694:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8009698:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800969c:	f817 000c 	ldrb.w	r0, [r7, ip]
 80096a0:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 80096a4:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 80096a8:	0400      	lsls	r0, r0, #16
 80096aa:	4467      	add	r7, ip
 80096ac:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 80096b0:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80096b4:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 80096b8:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 80096bc:	444e      	add	r6, r9
 80096be:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 80096c2:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 80096c6:	44c2      	add	sl, r8
 80096c8:	b2f7      	uxtb	r7, r6
 80096ca:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80096ce:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80096d2:	0e36      	lsrs	r6, r6, #24
 80096d4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80096d8:	fa5f fc8a 	uxtb.w	ip, sl
 80096dc:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 80096e0:	f3ca 2907 	ubfx	r9, sl, #8, #8
 80096e4:	443c      	add	r4, r7
 80096e6:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 80096ea:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80096ee:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 80096f2:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 80096f6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80096fa:	4b56      	ldr	r3, [pc, #344]	; (8009854 <D64_GENERIC+0x218>)
 80096fc:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8009700:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009704:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8009708:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800970c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009710:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8009714:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8009718:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800971c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009720:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009724:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009728:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800972c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009730:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8009734:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8009738:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800973c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009740:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8009744:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009748:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800974c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8009750:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8009754:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8009758:	fb28 b903 	smlad	r9, r8, r3, fp
 800975c:	4b3e      	ldr	r3, [pc, #248]	; (8009858 <D64_GENERIC+0x21c>)
 800975e:	fb26 9903 	smlad	r9, r6, r3, r9
 8009762:	4b3e      	ldr	r3, [pc, #248]	; (800985c <D64_GENERIC+0x220>)
 8009764:	fb2c 9703 	smlad	r7, ip, r3, r9
 8009768:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800976c:	fb2a 7909 	smlad	r9, sl, r9, r7
 8009770:	4f3b      	ldr	r7, [pc, #236]	; (8009860 <D64_GENERIC+0x224>)
 8009772:	9b02      	ldr	r3, [sp, #8]
 8009774:	fb28 3307 	smlad	r3, r8, r7, r3
 8009778:	fb2a 3317 	smladx	r3, sl, r7, r3
 800977c:	4f39      	ldr	r7, [pc, #228]	; (8009864 <D64_GENERIC+0x228>)
 800977e:	fb26 3307 	smlad	r3, r6, r7, r3
 8009782:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8009786:	f04f 0e01 	mov.w	lr, #1
 800978a:	fb28 f80e 	smuad	r8, r8, lr
 800978e:	4b36      	ldr	r3, [pc, #216]	; (8009868 <D64_GENERIC+0x22c>)
 8009790:	fb26 8603 	smlad	r6, r6, r3, r8
 8009794:	4b35      	ldr	r3, [pc, #212]	; (800986c <D64_GENERIC+0x230>)
 8009796:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800979a:	4b35      	ldr	r3, [pc, #212]	; (8009870 <D64_GENERIC+0x234>)
 800979c:	fb2a c303 	smlad	r3, sl, r3, ip
 80097a0:	9f06      	ldr	r7, [sp, #24]
 80097a2:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 80097a6:	9302      	str	r3, [sp, #8]
 80097a8:	b1cf      	cbz	r7, 80097de <D64_GENERIC+0x1a2>
 80097aa:	9b00      	ldr	r3, [sp, #0]
 80097ac:	444b      	add	r3, r9
 80097ae:	461e      	mov	r6, r3
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80097b6:	1af6      	subs	r6, r6, r3
 80097b8:	46b0      	mov	r8, r6
 80097ba:	ea4f 79e6 	mov.w	r9, r6, asr #31
 80097be:	e9cd 8900 	strd	r8, r9, [sp]
 80097c2:	fba6 8907 	umull	r8, r9, r6, r7
 80097c6:	9e01      	ldr	r6, [sp, #4]
 80097c8:	fb07 9306 	mla	r3, r7, r6, r9
 80097cc:	4646      	mov	r6, r8
 80097ce:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 80097d2:	f143 0700 	adc.w	r7, r3, #0
 80097d6:	fa07 f30e 	lsl.w	r3, r7, lr
 80097da:	4699      	mov	r9, r3
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 80097e2:	ea4f 2989 	mov.w	r9, r9, lsl #10
 80097e6:	9b04      	ldr	r3, [sp, #16]
 80097e8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80097ec:	2700      	movs	r7, #0
 80097ee:	fb05 fc0c 	mul.w	ip, r5, ip
 80097f2:	3501      	adds	r5, #1
 80097f4:	fbc3 6709 	smlal	r6, r7, r3, r9
 80097f8:	9b05      	ldr	r3, [sp, #20]
 80097fa:	10be      	asrs	r6, r7, #2
 80097fc:	f306 060f 	ssat	r6, #16, r6
 8009800:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8009804:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009806:	42ae      	cmp	r6, r5
 8009808:	dd11      	ble.n	800982e <D64_GENERIC+0x1f2>
 800980a:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800980e:	f1be 0f01 	cmp.w	lr, #1
 8009812:	f47f af2d 	bne.w	8009670 <D64_GENERIC+0x34>
 8009816:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8009818:	f100 0c08 	add.w	ip, r0, #8
 800981c:	06bb      	lsls	r3, r7, #26
 800981e:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8009822:	d513      	bpl.n	800984c <D64_GENERIC+0x210>
 8009824:	ba76      	rev16	r6, r6
 8009826:	fa9a fa9a 	rev16.w	sl, sl
 800982a:	4660      	mov	r0, ip
 800982c:	e74c      	b.n	80096c8 <D64_GENERIC+0x8c>
 800982e:	465e      	mov	r6, fp
 8009830:	9b02      	ldr	r3, [sp, #8]
 8009832:	6093      	str	r3, [r2, #8]
 8009834:	2000      	movs	r0, #0
 8009836:	9b00      	ldr	r3, [sp, #0]
 8009838:	60d6      	str	r6, [r2, #12]
 800983a:	6113      	str	r3, [r2, #16]
 800983c:	9b03      	ldr	r3, [sp, #12]
 800983e:	61d4      	str	r4, [r2, #28]
 8009840:	6153      	str	r3, [r2, #20]
 8009842:	9b07      	ldr	r3, [sp, #28]
 8009844:	6193      	str	r3, [r2, #24]
 8009846:	b009      	add	sp, #36	; 0x24
 8009848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984c:	4660      	mov	r0, ip
 800984e:	e73b      	b.n	80096c8 <D64_GENERIC+0x8c>
 8009850:	24000000 	.word	0x24000000
 8009854:	001c0015 	.word	0x001c0015
 8009858:	000f000a 	.word	0x000f000a
 800985c:	00060003 	.word	0x00060003
 8009860:	0024002a 	.word	0x0024002a
 8009864:	002e0030 	.word	0x002e0030
 8009868:	00030006 	.word	0x00030006
 800986c:	000a000f 	.word	0x000a000f
 8009870:	0015001c 	.word	0x0015001c

08009874 <D80_GENERIC>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	b08b      	sub	sp, #44	; 0x2c
 800987a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800987c:	9107      	str	r1, [sp, #28]
 800987e:	6911      	ldr	r1, [r2, #16]
 8009880:	9104      	str	r1, [sp, #16]
 8009882:	6951      	ldr	r1, [r2, #20]
 8009884:	9105      	str	r1, [sp, #20]
 8009886:	6991      	ldr	r1, [r2, #24]
 8009888:	9109      	str	r1, [sp, #36]	; 0x24
 800988a:	69d1      	ldr	r1, [r2, #28]
 800988c:	9102      	str	r1, [sp, #8]
 800988e:	6891      	ldr	r1, [r2, #8]
 8009890:	9103      	str	r1, [sp, #12]
 8009892:	68d1      	ldr	r1, [r2, #12]
 8009894:	9101      	str	r1, [sp, #4]
 8009896:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009898:	9106      	str	r1, [sp, #24]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 810b 	beq.w	8009ab6 <D80_GENERIC+0x242>
 80098a0:	6a13      	ldr	r3, [r2, #32]
 80098a2:	f04f 0800 	mov.w	r8, #0
 80098a6:	f8df c260 	ldr.w	ip, [pc, #608]	; 8009b08 <D80_GENERIC+0x294>
 80098aa:	9308      	str	r3, [sp, #32]
 80098ac:	9200      	str	r2, [sp, #0]
 80098ae:	e0ee      	b.n	8009a8e <D80_GENERIC+0x21a>
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	f890 e000 	ldrb.w	lr, [r0]
 80098b6:	b219      	sxth	r1, r3
 80098b8:	425c      	negs	r4, r3
 80098ba:	f810 9003 	ldrb.w	r9, [r0, r3]
 80098be:	004e      	lsls	r6, r1, #1
 80098c0:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80098c4:	4431      	add	r1, r6
 80098c6:	1843      	adds	r3, r0, r1
 80098c8:	f810 b001 	ldrb.w	fp, [r0, r1]
 80098cc:	1919      	adds	r1, r3, r4
 80098ce:	5d1b      	ldrb	r3, [r3, r4]
 80098d0:	1948      	adds	r0, r1, r5
 80098d2:	f811 a005 	ldrb.w	sl, [r1, r5]
 80098d6:	041b      	lsls	r3, r3, #16
 80098d8:	1907      	adds	r7, r0, r4
 80098da:	5d01      	ldrb	r1, [r0, r4]
 80098dc:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80098e0:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 80098e4:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 80098e8:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 80098ec:	0409      	lsls	r1, r1, #16
 80098ee:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 80098f2:	eb0b 0905 	add.w	r9, fp, r5
 80098f6:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80098fa:	f81b 5005 	ldrb.w	r5, [fp, r5]
 80098fe:	eb09 0b04 	add.w	fp, r9, r4
 8009902:	f819 4004 	ldrb.w	r4, [r9, r4]
 8009906:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800990a:	4473      	add	r3, lr
 800990c:	eb0b 0006 	add.w	r0, fp, r6
 8009910:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8009914:	4439      	add	r1, r7
 8009916:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800991a:	b2df      	uxtb	r7, r3
 800991c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8009920:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8009924:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8009928:	fa5f fa81 	uxtb.w	sl, r1
 800992c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8009930:	9c02      	ldr	r4, [sp, #8]
 8009932:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8009936:	441c      	add	r4, r3
 8009938:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800993c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8009940:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8009944:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8009948:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800994c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8009950:	b2ed      	uxtb	r5, r5
 8009952:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8009956:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800995a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800995e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8009962:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8009966:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800996a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800996e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8009972:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8009976:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800997a:	0e09      	lsrs	r1, r1, #24
 800997c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8009980:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009984:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8009988:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800998c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8009990:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009994:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009998:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800999c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80099a0:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 80099a4:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80099a8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80099ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80099b0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80099b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80099b8:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80099bc:	ea4f 229a 	mov.w	r2, sl, lsr #10
 80099c0:	f3ca 0709 	ubfx	r7, sl, #0, #10
 80099c4:	9202      	str	r2, [sp, #8]
 80099c6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80099ca:	4a43      	ldr	r2, [pc, #268]	; (8009ad8 <D80_GENERIC+0x264>)
 80099cc:	9f01      	ldr	r7, [sp, #4]
 80099ce:	fb23 7a02 	smlad	sl, r3, r2, r7
 80099d2:	4a42      	ldr	r2, [pc, #264]	; (8009adc <D80_GENERIC+0x268>)
 80099d4:	fb26 aa02 	smlad	sl, r6, r2, sl
 80099d8:	4a41      	ldr	r2, [pc, #260]	; (8009ae0 <D80_GENERIC+0x26c>)
 80099da:	fb24 aa02 	smlad	sl, r4, r2, sl
 80099de:	4a41      	ldr	r2, [pc, #260]	; (8009ae4 <D80_GENERIC+0x270>)
 80099e0:	fb21 a702 	smlad	r7, r1, r2, sl
 80099e4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80099e8:	fb25 7a0a 	smlad	sl, r5, sl, r7
 80099ec:	4a3e      	ldr	r2, [pc, #248]	; (8009ae8 <D80_GENERIC+0x274>)
 80099ee:	9f03      	ldr	r7, [sp, #12]
 80099f0:	fb23 7e02 	smlad	lr, r3, r2, r7
 80099f4:	4a3d      	ldr	r2, [pc, #244]	; (8009aec <D80_GENERIC+0x278>)
 80099f6:	fb26 ee02 	smlad	lr, r6, r2, lr
 80099fa:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 80099fe:	fb24 e707 	smlad	r7, r4, r7, lr
 8009a02:	4a3b      	ldr	r2, [pc, #236]	; (8009af0 <D80_GENERIC+0x27c>)
 8009a04:	fb21 7702 	smlad	r7, r1, r2, r7
 8009a08:	4a3a      	ldr	r2, [pc, #232]	; (8009af4 <D80_GENERIC+0x280>)
 8009a0a:	fb25 7202 	smlad	r2, r5, r2, r7
 8009a0e:	f04f 0901 	mov.w	r9, #1
 8009a12:	9201      	str	r2, [sp, #4]
 8009a14:	fb23 f909 	smuad	r9, r3, r9
 8009a18:	4b37      	ldr	r3, [pc, #220]	; (8009af8 <D80_GENERIC+0x284>)
 8009a1a:	fb26 9603 	smlad	r6, r6, r3, r9
 8009a1e:	4f37      	ldr	r7, [pc, #220]	; (8009afc <D80_GENERIC+0x288>)
 8009a20:	fb24 6407 	smlad	r4, r4, r7, r6
 8009a24:	4f36      	ldr	r7, [pc, #216]	; (8009b00 <D80_GENERIC+0x28c>)
 8009a26:	fb21 4707 	smlad	r7, r1, r7, r4
 8009a2a:	4936      	ldr	r1, [pc, #216]	; (8009b04 <D80_GENERIC+0x290>)
 8009a2c:	fb25 7301 	smlad	r3, r5, r1, r7
 8009a30:	9303      	str	r3, [sp, #12]
 8009a32:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8009a36:	9b08      	ldr	r3, [sp, #32]
 8009a38:	b193      	cbz	r3, 8009a60 <D80_GENERIC+0x1ec>
 8009a3a:	9a04      	ldr	r2, [sp, #16]
 8009a3c:	4452      	add	r2, sl
 8009a3e:	4614      	mov	r4, r2
 8009a40:	9a05      	ldr	r2, [sp, #20]
 8009a42:	f8cd a014 	str.w	sl, [sp, #20]
 8009a46:	1aa4      	subs	r4, r4, r2
 8009a48:	fba4 1203 	umull	r1, r2, r4, r3
 8009a4c:	17e7      	asrs	r7, r4, #31
 8009a4e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8009a52:	fb03 2207 	mla	r2, r3, r7, r2
 8009a56:	f142 0500 	adc.w	r5, r2, #0
 8009a5a:	006b      	lsls	r3, r5, #1
 8009a5c:	469a      	mov	sl, r3
 8009a5e:	9304      	str	r3, [sp, #16]
 8009a60:	9e00      	ldr	r6, [sp, #0]
 8009a62:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8009a66:	9a06      	ldr	r2, [sp, #24]
 8009a68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009a6c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8009a6e:	2500      	movs	r5, #0
 8009a70:	fb08 f303 	mul.w	r3, r8, r3
 8009a74:	fbc2 450a 	smlal	r4, r5, r2, sl
 8009a78:	9a07      	ldr	r2, [sp, #28]
 8009a7a:	f108 0801 	add.w	r8, r8, #1
 8009a7e:	10a9      	asrs	r1, r5, #2
 8009a80:	f301 010f 	ssat	r1, #16, r1
 8009a84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8009a88:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8009a8a:	4543      	cmp	r3, r8
 8009a8c:	dd12      	ble.n	8009ab4 <D80_GENERIC+0x240>
 8009a8e:	9b00      	ldr	r3, [sp, #0]
 8009a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	f47f af0c 	bne.w	80098b0 <D80_GENERIC+0x3c>
 8009a98:	9b00      	ldr	r3, [sp, #0]
 8009a9a:	6885      	ldr	r5, [r0, #8]
 8009a9c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009a9e:	06b2      	lsls	r2, r6, #26
 8009aa0:	e9d0 3100 	ldrd	r3, r1, [r0]
 8009aa4:	f100 000a 	add.w	r0, r0, #10
 8009aa8:	f57f af35 	bpl.w	8009916 <D80_GENERIC+0xa2>
 8009aac:	ba5b      	rev16	r3, r3
 8009aae:	ba49      	rev16	r1, r1
 8009ab0:	ba6d      	rev16	r5, r5
 8009ab2:	e730      	b.n	8009916 <D80_GENERIC+0xa2>
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	2000      	movs	r0, #0
 8009aba:	6093      	str	r3, [r2, #8]
 8009abc:	9b01      	ldr	r3, [sp, #4]
 8009abe:	60d3      	str	r3, [r2, #12]
 8009ac0:	9b02      	ldr	r3, [sp, #8]
 8009ac2:	61d3      	str	r3, [r2, #28]
 8009ac4:	9b04      	ldr	r3, [sp, #16]
 8009ac6:	6113      	str	r3, [r2, #16]
 8009ac8:	9b05      	ldr	r3, [sp, #20]
 8009aca:	6153      	str	r3, [r2, #20]
 8009acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ace:	6193      	str	r3, [r2, #24]
 8009ad0:	b00b      	add	sp, #44	; 0x2c
 8009ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad6:	bf00      	nop
 8009ad8:	002d0024 	.word	0x002d0024
 8009adc:	001c0015 	.word	0x001c0015
 8009ae0:	000f000a 	.word	0x000f000a
 8009ae4:	00060003 	.word	0x00060003
 8009ae8:	0037003f 	.word	0x0037003f
 8009aec:	00450049 	.word	0x00450049
 8009af0:	00490045 	.word	0x00490045
 8009af4:	003f0037 	.word	0x003f0037
 8009af8:	00030006 	.word	0x00030006
 8009afc:	000a000f 	.word	0x000a000f
 8009b00:	0015001c 	.word	0x0015001c
 8009b04:	0024002d 	.word	0x0024002d
 8009b08:	24000000 	.word	0x24000000

08009b0c <D128_GENERIC>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	b08d      	sub	sp, #52	; 0x34
 8009b12:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009b14:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8009b18:	9109      	str	r1, [sp, #36]	; 0x24
 8009b1a:	6911      	ldr	r1, [r2, #16]
 8009b1c:	9201      	str	r2, [sp, #4]
 8009b1e:	9106      	str	r1, [sp, #24]
 8009b20:	6951      	ldr	r1, [r2, #20]
 8009b22:	9107      	str	r1, [sp, #28]
 8009b24:	6991      	ldr	r1, [r2, #24]
 8009b26:	910b      	str	r1, [sp, #44]	; 0x2c
 8009b28:	6891      	ldr	r1, [r2, #8]
 8009b2a:	9103      	str	r1, [sp, #12]
 8009b2c:	68d1      	ldr	r1, [r2, #12]
 8009b2e:	9102      	str	r1, [sp, #8]
 8009b30:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009b32:	9108      	str	r1, [sp, #32]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 8183 	beq.w	8009e40 <D128_GENERIC+0x334>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	6a12      	ldr	r2, [r2, #32]
 8009b3e:	4681      	mov	r9, r0
 8009b40:	920a      	str	r2, [sp, #40]	; 0x28
 8009b42:	e9cd a304 	strd	sl, r3, [sp, #16]
 8009b46:	e165      	b.n	8009e14 <D128_GENERIC+0x308>
 8009b48:	b2d2      	uxtb	r2, r2
 8009b4a:	f899 b000 	ldrb.w	fp, [r9]
 8009b4e:	b213      	sxth	r3, r2
 8009b50:	4255      	negs	r5, r2
 8009b52:	f819 0002 	ldrb.w	r0, [r9, r2]
 8009b56:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009b5a:	009f      	lsls	r7, r3, #2
 8009b5c:	eb09 0402 	add.w	r4, r9, r2
 8009b60:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8009b64:	f819 8002 	ldrb.w	r8, [r9, r2]
 8009b68:	443b      	add	r3, r7
 8009b6a:	1962      	adds	r2, r4, r5
 8009b6c:	5d64      	ldrb	r4, [r4, r5]
 8009b6e:	eb02 0c03 	add.w	ip, r2, r3
 8009b72:	0424      	lsls	r4, r4, #16
 8009b74:	5cd3      	ldrb	r3, [r2, r3]
 8009b76:	eb0c 0e05 	add.w	lr, ip, r5
 8009b7a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8009b7e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8009b82:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8009b86:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8009b8a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8009b8e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8009b92:	eb0c 0e06 	add.w	lr, ip, r6
 8009b96:	f81c a006 	ldrb.w	sl, [ip, r6]
 8009b9a:	0412      	lsls	r2, r2, #16
 8009b9c:	445c      	add	r4, fp
 8009b9e:	eb0e 0c05 	add.w	ip, lr, r5
 8009ba2:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8009ba6:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8009baa:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8009bae:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8009bb2:	041b      	lsls	r3, r3, #16
 8009bb4:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8009bb8:	eb00 0b06 	add.w	fp, r0, r6
 8009bbc:	5d80      	ldrb	r0, [r0, r6]
 8009bbe:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8009bc2:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8009bc6:	eb0b 0a05 	add.w	sl, fp, r5
 8009bca:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8009bce:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8009bd2:	0436      	lsls	r6, r6, #16
 8009bd4:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8009bd8:	4442      	add	r2, r8
 8009bda:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8009bde:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8009be2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009be6:	44b9      	add	r9, r7
 8009be8:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8009bec:	4463      	add	r3, ip
 8009bee:	eb06 0508 	add.w	r5, r6, r8
 8009bf2:	b2e7      	uxtb	r7, r4
 8009bf4:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8009bf8:	499b      	ldr	r1, [pc, #620]	; (8009e68 <D128_GENERIC+0x35c>)
 8009bfa:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8009bfe:	0e24      	lsrs	r4, r4, #24
 8009c00:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8009c04:	b2d7      	uxtb	r7, r2
 8009c06:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8009c0a:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8009c0e:	9904      	ldr	r1, [sp, #16]
 8009c10:	4461      	add	r1, ip
 8009c12:	468c      	mov	ip, r1
 8009c14:	4994      	ldr	r1, [pc, #592]	; (8009e68 <D128_GENERIC+0x35c>)
 8009c16:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8009c1a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009c1e:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8009c22:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009c26:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8009c2a:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8009c2e:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8009c32:	0e12      	lsrs	r2, r2, #24
 8009c34:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8009c38:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009c3c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8009c40:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009c44:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8009c48:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009c52:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8009c56:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009c5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009c5e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8009c62:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8009c66:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8009c6a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8009c6e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009c72:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8009c76:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8009c7a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009c7e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009c82:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8009c86:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009c8a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8009c8e:	0e1b      	lsrs	r3, r3, #24
 8009c90:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8009c94:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009c98:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8009c9c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8009ca0:	b2eb      	uxtb	r3, r5
 8009ca2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009ca6:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8009caa:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8009cae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cb2:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8009cb6:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8009cba:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8009cbe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009cc2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009cc6:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8009cca:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8009cce:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8009cd2:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8009cd6:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8009cda:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009cde:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8009ce2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009ce6:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8009cea:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8009cee:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8009cf2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009cf6:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8009cfa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009cfe:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8009d02:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8009d06:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8009d0a:	9104      	str	r1, [sp, #16]
 8009d0c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8009d10:	9902      	ldr	r1, [sp, #8]
 8009d12:	4a56      	ldr	r2, [pc, #344]	; (8009e6c <D128_GENERIC+0x360>)
 8009d14:	fb2b 1202 	smlad	r2, fp, r2, r1
 8009d18:	4955      	ldr	r1, [pc, #340]	; (8009e70 <D128_GENERIC+0x364>)
 8009d1a:	fb28 2201 	smlad	r2, r8, r1, r2
 8009d1e:	4955      	ldr	r1, [pc, #340]	; (8009e74 <D128_GENERIC+0x368>)
 8009d20:	fb27 2201 	smlad	r2, r7, r1, r2
 8009d24:	4954      	ldr	r1, [pc, #336]	; (8009e78 <D128_GENERIC+0x36c>)
 8009d26:	fb26 2201 	smlad	r2, r6, r1, r2
 8009d2a:	4954      	ldr	r1, [pc, #336]	; (8009e7c <D128_GENERIC+0x370>)
 8009d2c:	fb24 2201 	smlad	r2, r4, r1, r2
 8009d30:	4953      	ldr	r1, [pc, #332]	; (8009e80 <D128_GENERIC+0x374>)
 8009d32:	fb20 2201 	smlad	r2, r0, r1, r2
 8009d36:	4953      	ldr	r1, [pc, #332]	; (8009e84 <D128_GENERIC+0x378>)
 8009d38:	fb23 2201 	smlad	r2, r3, r1, r2
 8009d3c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8009d40:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8009d44:	4950      	ldr	r1, [pc, #320]	; (8009e88 <D128_GENERIC+0x37c>)
 8009d46:	9a03      	ldr	r2, [sp, #12]
 8009d48:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8009d4c:	4a4f      	ldr	r2, [pc, #316]	; (8009e8c <D128_GENERIC+0x380>)
 8009d4e:	fb28 ce02 	smlad	lr, r8, r2, ip
 8009d52:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009ea4 <D128_GENERIC+0x398>
 8009d56:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8009d5a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8009ea8 <D128_GENERIC+0x39c>
 8009d5e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8009d62:	f8df e148 	ldr.w	lr, [pc, #328]	; 8009eac <D128_GENERIC+0x3a0>
 8009d66:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8009d6a:	f8df c144 	ldr.w	ip, [pc, #324]	; 8009eb0 <D128_GENERIC+0x3a4>
 8009d6e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8009d72:	f8df c140 	ldr.w	ip, [pc, #320]	; 8009eb4 <D128_GENERIC+0x3a8>
 8009d76:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8009d7a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8009eb8 <D128_GENERIC+0x3ac>
 8009d7e:	fb25 c20e 	smlad	r2, r5, lr, ip
 8009d82:	f04f 0c01 	mov.w	ip, #1
 8009d86:	9202      	str	r2, [sp, #8]
 8009d88:	fb2b fb0c 	smuad	fp, fp, ip
 8009d8c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8009ebc <D128_GENERIC+0x3b0>
 8009d90:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8009d94:	f8df c128 	ldr.w	ip, [pc, #296]	; 8009ec0 <D128_GENERIC+0x3b4>
 8009d98:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8009d9c:	4f3c      	ldr	r7, [pc, #240]	; (8009e90 <D128_GENERIC+0x384>)
 8009d9e:	fb26 bb07 	smlad	fp, r6, r7, fp
 8009da2:	4f3c      	ldr	r7, [pc, #240]	; (8009e94 <D128_GENERIC+0x388>)
 8009da4:	fb24 bb07 	smlad	fp, r4, r7, fp
 8009da8:	4f3b      	ldr	r7, [pc, #236]	; (8009e98 <D128_GENERIC+0x38c>)
 8009daa:	fb20 bb07 	smlad	fp, r0, r7, fp
 8009dae:	4f3b      	ldr	r7, [pc, #236]	; (8009e9c <D128_GENERIC+0x390>)
 8009db0:	fb23 bb07 	smlad	fp, r3, r7, fp
 8009db4:	4b3a      	ldr	r3, [pc, #232]	; (8009ea0 <D128_GENERIC+0x394>)
 8009db6:	fb25 b303 	smlad	r3, r5, r3, fp
 8009dba:	9303      	str	r3, [sp, #12]
 8009dbc:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8009dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dc2:	b183      	cbz	r3, 8009de6 <D128_GENERIC+0x2da>
 8009dc4:	9a06      	ldr	r2, [sp, #24]
 8009dc6:	9907      	ldr	r1, [sp, #28]
 8009dc8:	4422      	add	r2, r4
 8009dca:	9407      	str	r4, [sp, #28]
 8009dcc:	1a52      	subs	r2, r2, r1
 8009dce:	fba2 0103 	umull	r0, r1, r2, r3
 8009dd2:	17d5      	asrs	r5, r2, #31
 8009dd4:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8009dd8:	fb03 1105 	mla	r1, r3, r5, r1
 8009ddc:	f141 0300 	adc.w	r3, r1, #0
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	461c      	mov	r4, r3
 8009de4:	9306      	str	r3, [sp, #24]
 8009de6:	9d01      	ldr	r5, [sp, #4]
 8009de8:	01e4      	lsls	r4, r4, #7
 8009dea:	9e05      	ldr	r6, [sp, #20]
 8009dec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009df0:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8009df2:	2300      	movs	r3, #0
 8009df4:	9908      	ldr	r1, [sp, #32]
 8009df6:	fb06 f000 	mul.w	r0, r6, r0
 8009dfa:	3601      	adds	r6, #1
 8009dfc:	fbc1 2304 	smlal	r2, r3, r1, r4
 8009e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e02:	109b      	asrs	r3, r3, #2
 8009e04:	9605      	str	r6, [sp, #20]
 8009e06:	f303 030f 	ssat	r3, #16, r3
 8009e0a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8009e0e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8009e10:	42b3      	cmp	r3, r6
 8009e12:	dd13      	ble.n	8009e3c <D128_GENERIC+0x330>
 8009e14:	9b01      	ldr	r3, [sp, #4]
 8009e16:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009e18:	2a01      	cmp	r2, #1
 8009e1a:	f47f ae95 	bne.w	8009b48 <D128_GENERIC+0x3c>
 8009e1e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009e20:	f109 0610 	add.w	r6, r9, #16
 8009e24:	0681      	lsls	r1, r0, #26
 8009e26:	e9d9 4200 	ldrd	r4, r2, [r9]
 8009e2a:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8009e2e:	d518      	bpl.n	8009e62 <D128_GENERIC+0x356>
 8009e30:	ba64      	rev16	r4, r4
 8009e32:	ba52      	rev16	r2, r2
 8009e34:	ba5b      	rev16	r3, r3
 8009e36:	ba6d      	rev16	r5, r5
 8009e38:	46b1      	mov	r9, r6
 8009e3a:	e6da      	b.n	8009bf2 <D128_GENERIC+0xe6>
 8009e3c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009e40:	9b01      	ldr	r3, [sp, #4]
 8009e42:	2000      	movs	r0, #0
 8009e44:	9903      	ldr	r1, [sp, #12]
 8009e46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e48:	6099      	str	r1, [r3, #8]
 8009e4a:	9902      	ldr	r1, [sp, #8]
 8009e4c:	f8c3 a01c 	str.w	sl, [r3, #28]
 8009e50:	60d9      	str	r1, [r3, #12]
 8009e52:	9906      	ldr	r1, [sp, #24]
 8009e54:	619a      	str	r2, [r3, #24]
 8009e56:	6119      	str	r1, [r3, #16]
 8009e58:	9907      	ldr	r1, [sp, #28]
 8009e5a:	6159      	str	r1, [r3, #20]
 8009e5c:	b00d      	add	sp, #52	; 0x34
 8009e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e62:	46b1      	mov	r9, r6
 8009e64:	e6c5      	b.n	8009bf2 <D128_GENERIC+0xe6>
 8009e66:	bf00      	nop
 8009e68:	24000000 	.word	0x24000000
 8009e6c:	00780069 	.word	0x00780069
 8009e70:	005b004e 	.word	0x005b004e
 8009e74:	00420037 	.word	0x00420037
 8009e78:	002d0024 	.word	0x002d0024
 8009e7c:	001c0015 	.word	0x001c0015
 8009e80:	000f000a 	.word	0x000f000a
 8009e84:	00060003 	.word	0x00060003
 8009e88:	00880096 	.word	0x00880096
 8009e8c:	00a200ac 	.word	0x00a200ac
 8009e90:	0015001c 	.word	0x0015001c
 8009e94:	0024002d 	.word	0x0024002d
 8009e98:	00370042 	.word	0x00370042
 8009e9c:	004e005b 	.word	0x004e005b
 8009ea0:	00690078 	.word	0x00690078
 8009ea4:	00b400ba 	.word	0x00b400ba
 8009ea8:	00be00c0 	.word	0x00be00c0
 8009eac:	00c000be 	.word	0x00c000be
 8009eb0:	00ba00b4 	.word	0x00ba00b4
 8009eb4:	00ac00a2 	.word	0x00ac00a2
 8009eb8:	00960088 	.word	0x00960088
 8009ebc:	00030006 	.word	0x00030006
 8009ec0:	000a000f 	.word	0x000a000f

08009ec4 <D16_1CH_HTONS_VOL_HP>:
 8009ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec8:	6993      	ldr	r3, [r2, #24]
 8009eca:	b087      	sub	sp, #28
 8009ecc:	4682      	mov	sl, r0
 8009ece:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009ed0:	9304      	str	r3, [sp, #16]
 8009ed2:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8009ed6:	69d3      	ldr	r3, [r2, #28]
 8009ed8:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8009edc:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8009ee0:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8009ee4:	9403      	str	r4, [sp, #12]
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d054      	beq.n	8009f94 <D16_1CH_HTONS_VOL_HP+0xd0>
 8009eea:	f1a1 0902 	sub.w	r9, r1, #2
 8009eee:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8009ef2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8009fa0 <D16_1CH_HTONS_VOL_HP+0xdc>
 8009ef6:	4650      	mov	r0, sl
 8009ef8:	9101      	str	r1, [sp, #4]
 8009efa:	4619      	mov	r1, r3
 8009efc:	f8cd b008 	str.w	fp, [sp, #8]
 8009f00:	9205      	str	r2, [sp, #20]
 8009f02:	f850 3b02 	ldr.w	r3, [r0], #2
 8009f06:	ba5b      	rev16	r3, r3
 8009f08:	b2dc      	uxtb	r4, r3
 8009f0a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009f0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f12:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8009f16:	4419      	add	r1, r3
 8009f18:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8009f1c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009f20:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8009f24:	0aa1      	lsrs	r1, r4, #10
 8009f26:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009f2a:	4a1b      	ldr	r2, [pc, #108]	; (8009f98 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8009f2c:	fb23 5402 	smlad	r4, r3, r2, r5
 8009f30:	4a1a      	ldr	r2, [pc, #104]	; (8009f9c <D16_1CH_HTONS_VOL_HP+0xd8>)
 8009f32:	fb23 f502 	smuad	r5, r3, r2
 8009f36:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009f3a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8009f3e:	f04f 0b00 	mov.w	fp, #0
 8009f42:	19a2      	adds	r2, r4, r6
 8009f44:	eba2 020c 	sub.w	r2, r2, ip
 8009f48:	46a4      	mov	ip, r4
 8009f4a:	17d7      	asrs	r7, r2, #31
 8009f4c:	fba2 230e 	umull	r2, r3, r2, lr
 8009f50:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8009f54:	fb0e 3307 	mla	r3, lr, r7, r3
 8009f58:	f143 0700 	adc.w	r7, r3, #0
 8009f5c:	9b02      	ldr	r3, [sp, #8]
 8009f5e:	047a      	lsls	r2, r7, #17
 8009f60:	007e      	lsls	r6, r7, #1
 8009f62:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8009f66:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8009f6a:	f303 030f 	ssat	r3, #16, r3
 8009f6e:	f829 3f02 	strh.w	r3, [r9, #2]!
 8009f72:	9b01      	ldr	r3, [sp, #4]
 8009f74:	4298      	cmp	r0, r3
 8009f76:	d1c4      	bne.n	8009f02 <D16_1CH_HTONS_VOL_HP+0x3e>
 8009f78:	460b      	mov	r3, r1
 8009f7a:	9a05      	ldr	r2, [sp, #20]
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	9903      	ldr	r1, [sp, #12]
 8009f80:	61d3      	str	r3, [r2, #28]
 8009f82:	9b04      	ldr	r3, [sp, #16]
 8009f84:	6095      	str	r5, [r2, #8]
 8009f86:	60d1      	str	r1, [r2, #12]
 8009f88:	6193      	str	r3, [r2, #24]
 8009f8a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8009f8e:	b007      	add	sp, #28
 8009f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f94:	4664      	mov	r4, ip
 8009f96:	e7f1      	b.n	8009f7c <D16_1CH_HTONS_VOL_HP+0xb8>
 8009f98:	00030001 	.word	0x00030001
 8009f9c:	00010003 	.word	0x00010003
 8009fa0:	24000000 	.word	0x24000000

08009fa4 <D24_1CH_HTONS_VOL_HP>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009faa:	b089      	sub	sp, #36	; 0x24
 8009fac:	6993      	ldr	r3, [r2, #24]
 8009fae:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009fb0:	9604      	str	r6, [sp, #16]
 8009fb2:	6a16      	ldr	r6, [r2, #32]
 8009fb4:	9306      	str	r3, [sp, #24]
 8009fb6:	9505      	str	r5, [sp, #20]
 8009fb8:	69d3      	ldr	r3, [r2, #28]
 8009fba:	9600      	str	r6, [sp, #0]
 8009fbc:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009fc0:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8009fc4:	2d00      	cmp	r5, #0
 8009fc6:	f000 8083 	beq.w	800a0d0 <D24_1CH_HTONS_VOL_HP+0x12c>
 8009fca:	9207      	str	r2, [sp, #28]
 8009fcc:	2600      	movs	r6, #0
 8009fce:	4622      	mov	r2, r4
 8009fd0:	f1a1 0b02 	sub.w	fp, r1, #2
 8009fd4:	4f3f      	ldr	r7, [pc, #252]	; (800a0d4 <D24_1CH_HTONS_VOL_HP+0x130>)
 8009fd6:	461d      	mov	r5, r3
 8009fd8:	f8cd a00c 	str.w	sl, [sp, #12]
 8009fdc:	9c00      	ldr	r4, [sp, #0]
 8009fde:	e056      	b.n	800a08e <D24_1CH_HTONS_VOL_HP+0xea>
 8009fe0:	7841      	ldrb	r1, [r0, #1]
 8009fe2:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8009fe6:	3002      	adds	r0, #2
 8009fe8:	4488      	add	r8, r1
 8009fea:	fa5f f388 	uxtb.w	r3, r8
 8009fee:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8009ff2:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8009ff6:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8009ffa:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8009ffe:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800a002:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800a006:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800a00a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a00e:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800a012:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800a016:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a01a:	492f      	ldr	r1, [pc, #188]	; (800a0d8 <D24_1CH_HTONS_VOL_HP+0x134>)
 800a01c:	fb23 e901 	smlad	r9, r3, r1, lr
 800a020:	492e      	ldr	r1, [pc, #184]	; (800a0dc <D24_1CH_HTONS_VOL_HP+0x138>)
 800a022:	fb23 ce01 	smlad	lr, r3, r1, ip
 800a026:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800a02a:	2101      	movs	r1, #1
 800a02c:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800a030:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800a034:	fb23 f301 	smuad	r3, r3, r1
 800a038:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800a03c:	eb08 0c03 	add.w	ip, r8, r3
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	f04f 0a00 	mov.w	sl, #0
 800a046:	440a      	add	r2, r1
 800a048:	3601      	adds	r6, #1
 800a04a:	9103      	str	r1, [sp, #12]
 800a04c:	1ad2      	subs	r2, r2, r3
 800a04e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a052:	fba2 2304 	umull	r2, r3, r2, r4
 800a056:	e9cd 2300 	strd	r2, r3, [sp]
 800a05a:	fb04 3309 	mla	r3, r4, r9, r3
 800a05e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a062:	9301      	str	r3, [sp, #4]
 800a064:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a068:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a06c:	f143 0300 	adc.w	r3, r3, #0
 800a070:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800a074:	005a      	lsls	r2, r3, #1
 800a076:	9b04      	ldr	r3, [sp, #16]
 800a078:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800a07c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800a080:	f303 030f 	ssat	r3, #16, r3
 800a084:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800a088:	9b05      	ldr	r3, [sp, #20]
 800a08a:	429e      	cmp	r6, r3
 800a08c:	d010      	beq.n	800a0b0 <D24_1CH_HTONS_VOL_HP+0x10c>
 800a08e:	f890 9003 	ldrb.w	r9, [r0, #3]
 800a092:	f016 0f01 	tst.w	r6, #1
 800a096:	7801      	ldrb	r1, [r0, #0]
 800a098:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800a09c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800a0a0:	d09e      	beq.n	8009fe0 <D24_1CH_HTONS_VOL_HP+0x3c>
 800a0a2:	f890 8002 	ldrb.w	r8, [r0, #2]
 800a0a6:	3004      	adds	r0, #4
 800a0a8:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800a0ac:	4488      	add	r8, r1
 800a0ae:	e79c      	b.n	8009fea <D24_1CH_HTONS_VOL_HP+0x46>
 800a0b0:	4614      	mov	r4, r2
 800a0b2:	462b      	mov	r3, r5
 800a0b4:	9a07      	ldr	r2, [sp, #28]
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	61d3      	str	r3, [r2, #28]
 800a0ba:	9b06      	ldr	r3, [sp, #24]
 800a0bc:	f8c2 c008 	str.w	ip, [r2, #8]
 800a0c0:	f8c2 e00c 	str.w	lr, [r2, #12]
 800a0c4:	6193      	str	r3, [r2, #24]
 800a0c6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800a0ca:	b009      	add	sp, #36	; 0x24
 800a0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d0:	4651      	mov	r1, sl
 800a0d2:	e7f0      	b.n	800a0b6 <D24_1CH_HTONS_VOL_HP+0x112>
 800a0d4:	24000000 	.word	0x24000000
 800a0d8:	00030001 	.word	0x00030001
 800a0dc:	00060007 	.word	0x00060007

0800a0e0 <D32_1CH_HTONS_VOL_HP>:
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	6993      	ldr	r3, [r2, #24]
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	4683      	mov	fp, r0
 800a0ea:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800a0ec:	9304      	str	r3, [sp, #16]
 800a0ee:	69d5      	ldr	r5, [r2, #28]
 800a0f0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a0f2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800a0f6:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800a0fa:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d077      	beq.n	800a1f2 <D32_1CH_HTONS_VOL_HP+0x112>
 800a102:	460f      	mov	r7, r1
 800a104:	46f1      	mov	r9, lr
 800a106:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800a10a:	f8cd 8000 	str.w	r8, [sp]
 800a10e:	4e3a      	ldr	r6, [pc, #232]	; (800a1f8 <D32_1CH_HTONS_VOL_HP+0x118>)
 800a110:	469e      	mov	lr, r3
 800a112:	46a0      	mov	r8, r4
 800a114:	9103      	str	r1, [sp, #12]
 800a116:	9205      	str	r2, [sp, #20]
 800a118:	f85b 4b04 	ldr.w	r4, [fp], #4
 800a11c:	ba64      	rev16	r4, r4
 800a11e:	b2e0      	uxtb	r0, r4
 800a120:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a124:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800a128:	0e24      	lsrs	r4, r4, #24
 800a12a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800a12e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a132:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800a136:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a13a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800a13e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800a142:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a146:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800a14a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a14e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a152:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a156:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a15a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800a15e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800a162:	4826      	ldr	r0, [pc, #152]	; (800a1fc <D32_1CH_HTONS_VOL_HP+0x11c>)
 800a164:	fb23 c400 	smlad	r4, r3, r0, ip
 800a168:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a16c:	fb21 4402 	smlad	r4, r1, r2, r4
 800a170:	4823      	ldr	r0, [pc, #140]	; (800a200 <D32_1CH_HTONS_VOL_HP+0x120>)
 800a172:	fb23 ec00 	smlad	ip, r3, r0, lr
 800a176:	4823      	ldr	r0, [pc, #140]	; (800a204 <D32_1CH_HTONS_VOL_HP+0x124>)
 800a178:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a17c:	2201      	movs	r2, #1
 800a17e:	fb23 f302 	smuad	r3, r3, r2
 800a182:	4821      	ldr	r0, [pc, #132]	; (800a208 <D32_1CH_HTONS_VOL_HP+0x128>)
 800a184:	fb21 3e00 	smlad	lr, r1, r0, r3
 800a188:	9b00      	ldr	r3, [sp, #0]
 800a18a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800a18e:	4423      	add	r3, r4
 800a190:	eba3 0209 	sub.w	r2, r3, r9
 800a194:	46a1      	mov	r9, r4
 800a196:	17d1      	asrs	r1, r2, #31
 800a198:	fba2 230a 	umull	r2, r3, r2, sl
 800a19c:	e9cd 2300 	strd	r2, r3, [sp]
 800a1a0:	fb0a 3301 	mla	r3, sl, r1, r3
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1aa:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1b2:	f143 0300 	adc.w	r3, r3, #0
 800a1b6:	0399      	lsls	r1, r3, #14
 800a1b8:	005b      	lsls	r3, r3, #1
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	fbc8 2301 	smlal	r2, r3, r8, r1
 800a1c2:	109b      	asrs	r3, r3, #2
 800a1c4:	f303 030f 	ssat	r3, #16, r3
 800a1c8:	f827 3b02 	strh.w	r3, [r7], #2
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	429f      	cmp	r7, r3
 800a1d0:	d1a2      	bne.n	800a118 <D32_1CH_HTONS_VOL_HP+0x38>
 800a1d2:	4673      	mov	r3, lr
 800a1d4:	f8dd 8000 	ldr.w	r8, [sp]
 800a1d8:	9a05      	ldr	r2, [sp, #20]
 800a1da:	6093      	str	r3, [r2, #8]
 800a1dc:	2000      	movs	r0, #0
 800a1de:	9b04      	ldr	r3, [sp, #16]
 800a1e0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a1e4:	61d5      	str	r5, [r2, #28]
 800a1e6:	6193      	str	r3, [r2, #24]
 800a1e8:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800a1ec:	b007      	add	sp, #28
 800a1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f2:	4674      	mov	r4, lr
 800a1f4:	e7f1      	b.n	800a1da <D32_1CH_HTONS_VOL_HP+0xfa>
 800a1f6:	bf00      	nop
 800a1f8:	24000000 	.word	0x24000000
 800a1fc:	00060003 	.word	0x00060003
 800a200:	000a000c 	.word	0x000a000c
 800a204:	000c000a 	.word	0x000c000a
 800a208:	00030006 	.word	0x00030006

0800a20c <D48_1CH_HTONS_VOL_HP>:
 800a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800a212:	b087      	sub	sp, #28
 800a214:	6993      	ldr	r3, [r2, #24]
 800a216:	9701      	str	r7, [sp, #4]
 800a218:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a21a:	6a17      	ldr	r7, [r2, #32]
 800a21c:	9304      	str	r3, [sp, #16]
 800a21e:	69d6      	ldr	r6, [r2, #28]
 800a220:	9702      	str	r7, [sp, #8]
 800a222:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800a226:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a22a:	2d00      	cmp	r5, #0
 800a22c:	f000 8093 	beq.w	800a356 <D48_1CH_HTONS_VOL_HP+0x14a>
 800a230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a234:	f1a1 0b02 	sub.w	fp, r1, #2
 800a238:	46f2      	mov	sl, lr
 800a23a:	4f48      	ldr	r7, [pc, #288]	; (800a35c <D48_1CH_HTONS_VOL_HP+0x150>)
 800a23c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800a240:	469e      	mov	lr, r3
 800a242:	9205      	str	r2, [sp, #20]
 800a244:	9103      	str	r1, [sp, #12]
 800a246:	e9d0 3200 	ldrd	r3, r2, [r0]
 800a24a:	3006      	adds	r0, #6
 800a24c:	ba5b      	rev16	r3, r3
 800a24e:	fa92 f992 	rev16.w	r9, r2
 800a252:	b2dd      	uxtb	r5, r3
 800a254:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a258:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a25c:	0e1b      	lsrs	r3, r3, #24
 800a25e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a262:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a266:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800a26a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800a26e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a272:	fa5f f289 	uxtb.w	r2, r9
 800a276:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800a27a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800a27e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a282:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800a286:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a28a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800a28e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a292:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800a296:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a29a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800a29e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800a2a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2a6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a2aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a2ae:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800a2b2:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800a2b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800a2ba:	4b29      	ldr	r3, [pc, #164]	; (800a360 <D48_1CH_HTONS_VOL_HP+0x154>)
 800a2bc:	fb28 c103 	smlad	r1, r8, r3, ip
 800a2c0:	4b28      	ldr	r3, [pc, #160]	; (800a364 <D48_1CH_HTONS_VOL_HP+0x158>)
 800a2c2:	fb25 1103 	smlad	r1, r5, r3, r1
 800a2c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2ca:	fb22 1903 	smlad	r9, r2, r3, r1
 800a2ce:	4b26      	ldr	r3, [pc, #152]	; (800a368 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a2d0:	fb28 ec03 	smlad	ip, r8, r3, lr
 800a2d4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800a2d8:	fb25 cc03 	smlad	ip, r5, r3, ip
 800a2dc:	4b23      	ldr	r3, [pc, #140]	; (800a36c <D48_1CH_HTONS_VOL_HP+0x160>)
 800a2de:	fb22 cc03 	smlad	ip, r2, r3, ip
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	fb28 f801 	smuad	r8, r8, r1
 800a2e8:	4b21      	ldr	r3, [pc, #132]	; (800a370 <D48_1CH_HTONS_VOL_HP+0x164>)
 800a2ea:	fb25 8503 	smlad	r5, r5, r3, r8
 800a2ee:	4b21      	ldr	r3, [pc, #132]	; (800a374 <D48_1CH_HTONS_VOL_HP+0x168>)
 800a2f0:	fb22 5e03 	smlad	lr, r2, r3, r5
 800a2f4:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800a2f8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a2fc:	190a      	adds	r2, r1, r4
 800a2fe:	9c02      	ldr	r4, [sp, #8]
 800a300:	eba2 020a 	sub.w	r2, r2, sl
 800a304:	468a      	mov	sl, r1
 800a306:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a30a:	fba2 2304 	umull	r2, r3, r2, r4
 800a30e:	fb04 3309 	mla	r3, r4, r9, r3
 800a312:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a316:	f04f 0900 	mov.w	r9, #0
 800a31a:	f143 0500 	adc.w	r5, r3, #0
 800a31e:	9b01      	ldr	r3, [sp, #4]
 800a320:	032a      	lsls	r2, r5, #12
 800a322:	006c      	lsls	r4, r5, #1
 800a324:	fbc3 8902 	smlal	r8, r9, r3, r2
 800a328:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800a32c:	f303 030f 	ssat	r3, #16, r3
 800a330:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800a334:	9b03      	ldr	r3, [sp, #12]
 800a336:	4283      	cmp	r3, r0
 800a338:	d185      	bne.n	800a246 <D48_1CH_HTONS_VOL_HP+0x3a>
 800a33a:	4673      	mov	r3, lr
 800a33c:	9a05      	ldr	r2, [sp, #20]
 800a33e:	6093      	str	r3, [r2, #8]
 800a340:	2000      	movs	r0, #0
 800a342:	9b04      	ldr	r3, [sp, #16]
 800a344:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a348:	61d6      	str	r6, [r2, #28]
 800a34a:	6193      	str	r3, [r2, #24]
 800a34c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800a350:	b007      	add	sp, #28
 800a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a356:	4671      	mov	r1, lr
 800a358:	e7f1      	b.n	800a33e <D48_1CH_HTONS_VOL_HP+0x132>
 800a35a:	bf00      	nop
 800a35c:	24000000 	.word	0x24000000
 800a360:	000f000a 	.word	0x000f000a
 800a364:	00060003 	.word	0x00060003
 800a368:	00150019 	.word	0x00150019
 800a36c:	00190015 	.word	0x00190015
 800a370:	00030006 	.word	0x00030006
 800a374:	000a000f 	.word	0x000a000f

0800a378 <D64_1CH_HTONS_VOL_HP>:
 800a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a37e:	b089      	sub	sp, #36	; 0x24
 800a380:	6993      	ldr	r3, [r2, #24]
 800a382:	4686      	mov	lr, r0
 800a384:	9503      	str	r5, [sp, #12]
 800a386:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800a388:	6a15      	ldr	r5, [r2, #32]
 800a38a:	9306      	str	r3, [sp, #24]
 800a38c:	69d6      	ldr	r6, [r2, #28]
 800a38e:	9504      	str	r5, [sp, #16]
 800a390:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800a394:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a398:	2800      	cmp	r0, #0
 800a39a:	f000 80a4 	beq.w	800a4e6 <D64_1CH_HTONS_VOL_HP+0x16e>
 800a39e:	460f      	mov	r7, r1
 800a3a0:	46f1      	mov	r9, lr
 800a3a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800a3a6:	4d56      	ldr	r5, [pc, #344]	; (800a500 <D64_1CH_HTONS_VOL_HP+0x188>)
 800a3a8:	46a2      	mov	sl, r4
 800a3aa:	469e      	mov	lr, r3
 800a3ac:	9105      	str	r1, [sp, #20]
 800a3ae:	9207      	str	r2, [sp, #28]
 800a3b0:	f859 1b08 	ldr.w	r1, [r9], #8
 800a3b4:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800a3b8:	ba49      	rev16	r1, r1
 800a3ba:	fa93 fb93 	rev16.w	fp, r3
 800a3be:	b2cb      	uxtb	r3, r1
 800a3c0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a3c4:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800a3c8:	0e09      	lsrs	r1, r1, #24
 800a3ca:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800a3ce:	fa5f f38b 	uxtb.w	r3, fp
 800a3d2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a3d6:	4426      	add	r6, r4
 800a3d8:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800a3dc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a3e0:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800a3e4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a3e8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a3ec:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a3f0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800a3f4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a3f8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a3fc:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800a400:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a404:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800a408:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800a40c:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800a410:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a414:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a418:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800a41c:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800a420:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a424:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800a428:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a42c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800a430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a434:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800a438:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800a43c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a440:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800a444:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800a448:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800a44c:	482d      	ldr	r0, [pc, #180]	; (800a504 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800a44e:	fb22 cc00 	smlad	ip, r2, r0, ip
 800a452:	482d      	ldr	r0, [pc, #180]	; (800a508 <D64_1CH_HTONS_VOL_HP+0x190>)
 800a454:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a458:	482c      	ldr	r0, [pc, #176]	; (800a50c <D64_1CH_HTONS_VOL_HP+0x194>)
 800a45a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800a45e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a462:	fb2b c404 	smlad	r4, fp, r4, ip
 800a466:	482a      	ldr	r0, [pc, #168]	; (800a510 <D64_1CH_HTONS_VOL_HP+0x198>)
 800a468:	fb22 ec00 	smlad	ip, r2, r0, lr
 800a46c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800a470:	4828      	ldr	r0, [pc, #160]	; (800a514 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800a472:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a476:	fb23 cc10 	smladx	ip, r3, r0, ip
 800a47a:	f04f 0e01 	mov.w	lr, #1
 800a47e:	fb22 f20e 	smuad	r2, r2, lr
 800a482:	4825      	ldr	r0, [pc, #148]	; (800a518 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800a484:	fb21 2100 	smlad	r1, r1, r0, r2
 800a488:	4a24      	ldr	r2, [pc, #144]	; (800a51c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800a48a:	fb23 1302 	smlad	r3, r3, r2, r1
 800a48e:	4a24      	ldr	r2, [pc, #144]	; (800a520 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800a490:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800a494:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800a498:	eb04 0208 	add.w	r2, r4, r8
 800a49c:	eba2 020a 	sub.w	r2, r2, sl
 800a4a0:	46a2      	mov	sl, r4
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	17d1      	asrs	r1, r2, #31
 800a4a6:	e9cd 0100 	strd	r0, r1, [sp]
 800a4aa:	9904      	ldr	r1, [sp, #16]
 800a4ac:	9801      	ldr	r0, [sp, #4]
 800a4ae:	fba2 2301 	umull	r2, r3, r2, r1
 800a4b2:	fb01 3300 	mla	r3, r1, r0, r3
 800a4b6:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800a4ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a4be:	f143 0100 	adc.w	r1, r3, #0
 800a4c2:	9b03      	ldr	r3, [sp, #12]
 800a4c4:	02ca      	lsls	r2, r1, #11
 800a4c6:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a4d0:	108b      	asrs	r3, r1, #2
 800a4d2:	f303 030f 	ssat	r3, #16, r3
 800a4d6:	f827 3b02 	strh.w	r3, [r7], #2
 800a4da:	9b05      	ldr	r3, [sp, #20]
 800a4dc:	429f      	cmp	r7, r3
 800a4de:	f47f af67 	bne.w	800a3b0 <D64_1CH_HTONS_VOL_HP+0x38>
 800a4e2:	4673      	mov	r3, lr
 800a4e4:	9a07      	ldr	r2, [sp, #28]
 800a4e6:	6093      	str	r3, [r2, #8]
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	9b06      	ldr	r3, [sp, #24]
 800a4ec:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a4f0:	61d6      	str	r6, [r2, #28]
 800a4f2:	6193      	str	r3, [r2, #24]
 800a4f4:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800a4f8:	b009      	add	sp, #36	; 0x24
 800a4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fe:	bf00      	nop
 800a500:	24000000 	.word	0x24000000
 800a504:	001c0015 	.word	0x001c0015
 800a508:	000f000a 	.word	0x000f000a
 800a50c:	00060003 	.word	0x00060003
 800a510:	0024002a 	.word	0x0024002a
 800a514:	002e0030 	.word	0x002e0030
 800a518:	00030006 	.word	0x00030006
 800a51c:	000a000f 	.word	0x000a000f
 800a520:	0015001c 	.word	0x0015001c

0800a524 <D80_1CH_HTONS_VOL_HP>:
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	6913      	ldr	r3, [r2, #16]
 800a52a:	b089      	sub	sp, #36	; 0x24
 800a52c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	9603      	str	r6, [sp, #12]
 800a532:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a534:	6a16      	ldr	r6, [r2, #32]
 800a536:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800a53a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800a53e:	9306      	str	r3, [sp, #24]
 800a540:	9604      	str	r6, [sp, #16]
 800a542:	69d3      	ldr	r3, [r2, #28]
 800a544:	2c00      	cmp	r4, #0
 800a546:	f000 80ce 	beq.w	800a6e6 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800a54a:	3902      	subs	r1, #2
 800a54c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a550:	4e66      	ldr	r6, [pc, #408]	; (800a6ec <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800a552:	469e      	mov	lr, r3
 800a554:	9102      	str	r1, [sp, #8]
 800a556:	46aa      	mov	sl, r5
 800a558:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800a55c:	9207      	str	r2, [sp, #28]
 800a55e:	9105      	str	r1, [sp, #20]
 800a560:	6883      	ldr	r3, [r0, #8]
 800a562:	e9d0 4200 	ldrd	r4, r2, [r0]
 800a566:	300a      	adds	r0, #10
 800a568:	ba64      	rev16	r4, r4
 800a56a:	ba52      	rev16	r2, r2
 800a56c:	fa93 fb93 	rev16.w	fp, r3
 800a570:	b2e5      	uxtb	r5, r4
 800a572:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a576:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800a57a:	0e24      	lsrs	r4, r4, #24
 800a57c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800a580:	b2d5      	uxtb	r5, r2
 800a582:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a586:	44c6      	add	lr, r8
 800a588:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a58c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800a590:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800a594:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a598:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a59c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800a5a0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a5a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5a8:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a5ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a5b0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800a5b4:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800a5b8:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800a5bc:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800a5c0:	0e12      	lsrs	r2, r2, #24
 800a5c2:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800a5c6:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800a5ca:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a5ce:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a5d2:	fa5f fb8b 	uxtb.w	fp, fp
 800a5d6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a5da:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a5de:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800a5e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a5e6:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800a5ea:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a5ee:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a5f2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800a5f6:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800a5fa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a5fe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a602:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800a606:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a60a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800a60e:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800a612:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800a616:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800a61a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800a61e:	4934      	ldr	r1, [pc, #208]	; (800a6f0 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800a620:	fb23 cc01 	smlad	ip, r3, r1, ip
 800a624:	4933      	ldr	r1, [pc, #204]	; (800a6f4 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800a626:	fb24 cc01 	smlad	ip, r4, r1, ip
 800a62a:	4933      	ldr	r1, [pc, #204]	; (800a6f8 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800a62c:	fb28 cc01 	smlad	ip, r8, r1, ip
 800a630:	4932      	ldr	r1, [pc, #200]	; (800a6fc <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800a632:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a636:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a63a:	fb2b c901 	smlad	r9, fp, r1, ip
 800a63e:	4930      	ldr	r1, [pc, #192]	; (800a700 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800a640:	fb23 7701 	smlad	r7, r3, r1, r7
 800a644:	492f      	ldr	r1, [pc, #188]	; (800a704 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a646:	fb24 7701 	smlad	r7, r4, r1, r7
 800a64a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800a64e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800a652:	492d      	ldr	r1, [pc, #180]	; (800a708 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a654:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a658:	492c      	ldr	r1, [pc, #176]	; (800a70c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a65a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800a65e:	2101      	movs	r1, #1
 800a660:	fb23 f301 	smuad	r3, r3, r1
 800a664:	492a      	ldr	r1, [pc, #168]	; (800a710 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a666:	fb24 3401 	smlad	r4, r4, r1, r3
 800a66a:	492a      	ldr	r1, [pc, #168]	; (800a714 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a66c:	fb28 4101 	smlad	r1, r8, r1, r4
 800a670:	4f29      	ldr	r7, [pc, #164]	; (800a718 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a672:	fb22 1207 	smlad	r2, r2, r7, r1
 800a676:	4f29      	ldr	r7, [pc, #164]	; (800a71c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a678:	fb2b 2707 	smlad	r7, fp, r7, r2
 800a67c:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800a680:	9b01      	ldr	r3, [sp, #4]
 800a682:	9c04      	ldr	r4, [sp, #16]
 800a684:	440b      	add	r3, r1
 800a686:	eba3 020a 	sub.w	r2, r3, sl
 800a68a:	468a      	mov	sl, r1
 800a68c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a690:	fba2 2304 	umull	r2, r3, r2, r4
 800a694:	fb04 3309 	mla	r3, r4, r9, r3
 800a698:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a69c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a6a0:	f143 0500 	adc.w	r5, r3, #0
 800a6a4:	006b      	lsls	r3, r5, #1
 800a6a6:	02aa      	lsls	r2, r5, #10
 800a6a8:	2500      	movs	r5, #0
 800a6aa:	9301      	str	r3, [sp, #4]
 800a6ac:	9b03      	ldr	r3, [sp, #12]
 800a6ae:	fbc3 4502 	smlal	r4, r5, r3, r2
 800a6b2:	9a02      	ldr	r2, [sp, #8]
 800a6b4:	10ab      	asrs	r3, r5, #2
 800a6b6:	f303 030f 	ssat	r3, #16, r3
 800a6ba:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a6be:	9b05      	ldr	r3, [sp, #20]
 800a6c0:	9202      	str	r2, [sp, #8]
 800a6c2:	4298      	cmp	r0, r3
 800a6c4:	f47f af4c 	bne.w	800a560 <D80_1CH_HTONS_VOL_HP+0x3c>
 800a6c8:	4673      	mov	r3, lr
 800a6ca:	9a07      	ldr	r2, [sp, #28]
 800a6cc:	61d3      	str	r3, [r2, #28]
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	9b01      	ldr	r3, [sp, #4]
 800a6d2:	6097      	str	r7, [r2, #8]
 800a6d4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a6d8:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800a6dc:	9b06      	ldr	r3, [sp, #24]
 800a6de:	6193      	str	r3, [r2, #24]
 800a6e0:	b009      	add	sp, #36	; 0x24
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	e7f0      	b.n	800a6cc <D80_1CH_HTONS_VOL_HP+0x1a8>
 800a6ea:	bf00      	nop
 800a6ec:	24000000 	.word	0x24000000
 800a6f0:	002d0024 	.word	0x002d0024
 800a6f4:	001c0015 	.word	0x001c0015
 800a6f8:	000f000a 	.word	0x000f000a
 800a6fc:	00060003 	.word	0x00060003
 800a700:	0037003f 	.word	0x0037003f
 800a704:	00450049 	.word	0x00450049
 800a708:	00490045 	.word	0x00490045
 800a70c:	003f0037 	.word	0x003f0037
 800a710:	00030006 	.word	0x00030006
 800a714:	000a000f 	.word	0x000a000f
 800a718:	0015001c 	.word	0x0015001c
 800a71c:	0024002d 	.word	0x0024002d

0800a720 <D128_1CH_HTONS_VOL_HP>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	6914      	ldr	r4, [r2, #16]
 800a726:	b08d      	sub	sp, #52	; 0x34
 800a728:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a72a:	9404      	str	r4, [sp, #16]
 800a72c:	6954      	ldr	r4, [r2, #20]
 800a72e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a730:	9405      	str	r4, [sp, #20]
 800a732:	6994      	ldr	r4, [r2, #24]
 800a734:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a738:	940a      	str	r4, [sp, #40]	; 0x28
 800a73a:	6894      	ldr	r4, [r2, #8]
 800a73c:	9403      	str	r4, [sp, #12]
 800a73e:	68d4      	ldr	r4, [r2, #12]
 800a740:	9402      	str	r4, [sp, #8]
 800a742:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a744:	6a12      	ldr	r2, [r2, #32]
 800a746:	9407      	str	r4, [sp, #28]
 800a748:	9208      	str	r2, [sp, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 812e 	beq.w	800a9ac <D128_1CH_HTONS_VOL_HP+0x28c>
 800a750:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a754:	f100 0b10 	add.w	fp, r0, #16
 800a758:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800a9ec <D128_1CH_HTONS_VOL_HP+0x2cc>
 800a75c:	9106      	str	r1, [sp, #24]
 800a75e:	9309      	str	r3, [sp, #36]	; 0x24
 800a760:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800a764:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800a768:	ba40      	rev16	r0, r0
 800a76a:	ba52      	rev16	r2, r2
 800a76c:	ba5b      	rev16	r3, r3
 800a76e:	ba76      	rev16	r6, r6
 800a770:	b2c5      	uxtb	r5, r0
 800a772:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a776:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a77a:	0e00      	lsrs	r0, r0, #24
 800a77c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800a780:	b2d5      	uxtb	r5, r2
 800a782:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800a786:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a78a:	44bc      	add	ip, r7
 800a78c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a790:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800a794:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800a798:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800a79c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800a7a0:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800a7a4:	0e12      	lsrs	r2, r2, #24
 800a7a6:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800a7aa:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800a7ae:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a7b2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a7b6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a7ba:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800a7be:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800a7c8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a7cc:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800a7d0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800a7d4:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800a7d8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a7dc:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800a7e0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a7e4:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800a7e8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a7ec:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800a7f0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800a7f4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800a7f8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a7fc:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800a800:	0e1b      	lsrs	r3, r3, #24
 800a802:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a806:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a80a:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800a80e:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800a812:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800a816:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a81a:	b2f3      	uxtb	r3, r6
 800a81c:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800a820:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800a824:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a828:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800a82c:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a830:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800a834:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a838:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a83c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800a840:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800a844:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800a848:	0e36      	lsrs	r6, r6, #24
 800a84a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800a84e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a852:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800a856:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a85a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800a85e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a862:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800a866:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800a86a:	9101      	str	r1, [sp, #4]
 800a86c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800a870:	9b02      	ldr	r3, [sp, #8]
 800a872:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a876:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a87a:	4611      	mov	r1, r2
 800a87c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800a880:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800a884:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a888:	4a49      	ldr	r2, [pc, #292]	; (800a9b0 <D128_1CH_HTONS_VOL_HP+0x290>)
 800a88a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800a88e:	4b49      	ldr	r3, [pc, #292]	; (800a9b4 <D128_1CH_HTONS_VOL_HP+0x294>)
 800a890:	fb27 2203 	smlad	r2, r7, r3, r2
 800a894:	4b48      	ldr	r3, [pc, #288]	; (800a9b8 <D128_1CH_HTONS_VOL_HP+0x298>)
 800a896:	fb25 2203 	smlad	r2, r5, r3, r2
 800a89a:	4b48      	ldr	r3, [pc, #288]	; (800a9bc <D128_1CH_HTONS_VOL_HP+0x29c>)
 800a89c:	fb24 2203 	smlad	r2, r4, r3, r2
 800a8a0:	4b47      	ldr	r3, [pc, #284]	; (800a9c0 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800a8a2:	fb20 2803 	smlad	r8, r0, r3, r2
 800a8a6:	4b47      	ldr	r3, [pc, #284]	; (800a9c4 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800a8a8:	9a01      	ldr	r2, [sp, #4]
 800a8aa:	fb22 8203 	smlad	r2, r2, r3, r8
 800a8ae:	4b46      	ldr	r3, [pc, #280]	; (800a9c8 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800a8b0:	9102      	str	r1, [sp, #8]
 800a8b2:	fb21 2203 	smlad	r2, r1, r3, r2
 800a8b6:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800a8ba:	fb26 2308 	smlad	r3, r6, r8, r2
 800a8be:	4619      	mov	r1, r3
 800a8c0:	9a03      	ldr	r2, [sp, #12]
 800a8c2:	4b42      	ldr	r3, [pc, #264]	; (800a9cc <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800a8c4:	fb2e 2803 	smlad	r8, lr, r3, r2
 800a8c8:	4b41      	ldr	r3, [pc, #260]	; (800a9d0 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800a8ca:	fb27 8a03 	smlad	sl, r7, r3, r8
 800a8ce:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a9f0 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800a8d2:	fb25 a808 	smlad	r8, r5, r8, sl
 800a8d6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800a9f4 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800a8da:	fb24 880a 	smlad	r8, r4, sl, r8
 800a8de:	f8df a118 	ldr.w	sl, [pc, #280]	; 800a9f8 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800a8e2:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800a8e6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800a9fc <D128_1CH_HTONS_VOL_HP+0x2dc>
 800a8ea:	9b01      	ldr	r3, [sp, #4]
 800a8ec:	fb23 aa08 	smlad	sl, r3, r8, sl
 800a8f0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800aa00 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800a8f4:	9a02      	ldr	r2, [sp, #8]
 800a8f6:	fb22 a808 	smlad	r8, r2, r8, sl
 800a8fa:	f8df a108 	ldr.w	sl, [pc, #264]	; 800aa04 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800a8fe:	fb26 830a 	smlad	r3, r6, sl, r8
 800a902:	f04f 0801 	mov.w	r8, #1
 800a906:	9302      	str	r3, [sp, #8]
 800a908:	fb2e fe08 	smuad	lr, lr, r8
 800a90c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800aa08 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800a910:	fb27 ee08 	smlad	lr, r7, r8, lr
 800a914:	4f2f      	ldr	r7, [pc, #188]	; (800a9d4 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800a916:	fb25 ee07 	smlad	lr, r5, r7, lr
 800a91a:	4f2f      	ldr	r7, [pc, #188]	; (800a9d8 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800a91c:	fb24 ee07 	smlad	lr, r4, r7, lr
 800a920:	4f2e      	ldr	r7, [pc, #184]	; (800a9dc <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800a922:	fb20 ee07 	smlad	lr, r0, r7, lr
 800a926:	4f2e      	ldr	r7, [pc, #184]	; (800a9e0 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800a928:	9b01      	ldr	r3, [sp, #4]
 800a92a:	fb23 ee07 	smlad	lr, r3, r7, lr
 800a92e:	4f2d      	ldr	r7, [pc, #180]	; (800a9e4 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800a930:	fb22 e707 	smlad	r7, r2, r7, lr
 800a934:	4b2c      	ldr	r3, [pc, #176]	; (800a9e8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800a936:	fb26 7303 	smlad	r3, r6, r3, r7
 800a93a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800a93e:	9303      	str	r3, [sp, #12]
 800a940:	9b04      	ldr	r3, [sp, #16]
 800a942:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a946:	9f08      	ldr	r7, [sp, #32]
 800a948:	2100      	movs	r1, #0
 800a94a:	4433      	add	r3, r6
 800a94c:	f10b 0b10 	add.w	fp, fp, #16
 800a950:	461a      	mov	r2, r3
 800a952:	9b05      	ldr	r3, [sp, #20]
 800a954:	9605      	str	r6, [sp, #20]
 800a956:	1ad2      	subs	r2, r2, r3
 800a958:	17d5      	asrs	r5, r2, #31
 800a95a:	fba2 2307 	umull	r2, r3, r2, r7
 800a95e:	1814      	adds	r4, r2, r0
 800a960:	fb07 3305 	mla	r3, r7, r5, r3
 800a964:	eb43 0501 	adc.w	r5, r3, r1
 800a968:	006b      	lsls	r3, r5, #1
 800a96a:	022a      	lsls	r2, r5, #8
 800a96c:	9304      	str	r3, [sp, #16]
 800a96e:	9b07      	ldr	r3, [sp, #28]
 800a970:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a974:	9a06      	ldr	r2, [sp, #24]
 800a976:	108b      	asrs	r3, r1, #2
 800a978:	f303 030f 	ssat	r3, #16, r3
 800a97c:	f822 3b02 	strh.w	r3, [r2], #2
 800a980:	4613      	mov	r3, r2
 800a982:	9206      	str	r2, [sp, #24]
 800a984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a986:	4293      	cmp	r3, r2
 800a988:	f47f aeea 	bne.w	800a760 <D128_1CH_HTONS_VOL_HP+0x40>
 800a98c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a98e:	2000      	movs	r0, #0
 800a990:	9903      	ldr	r1, [sp, #12]
 800a992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a994:	6099      	str	r1, [r3, #8]
 800a996:	9902      	ldr	r1, [sp, #8]
 800a998:	f8c3 c01c 	str.w	ip, [r3, #28]
 800a99c:	60d9      	str	r1, [r3, #12]
 800a99e:	9904      	ldr	r1, [sp, #16]
 800a9a0:	619a      	str	r2, [r3, #24]
 800a9a2:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800a9a6:	b00d      	add	sp, #52	; 0x34
 800a9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ac:	9e05      	ldr	r6, [sp, #20]
 800a9ae:	e7ed      	b.n	800a98c <D128_1CH_HTONS_VOL_HP+0x26c>
 800a9b0:	00780069 	.word	0x00780069
 800a9b4:	005b004e 	.word	0x005b004e
 800a9b8:	00420037 	.word	0x00420037
 800a9bc:	002d0024 	.word	0x002d0024
 800a9c0:	001c0015 	.word	0x001c0015
 800a9c4:	000f000a 	.word	0x000f000a
 800a9c8:	00060003 	.word	0x00060003
 800a9cc:	00880096 	.word	0x00880096
 800a9d0:	00a200ac 	.word	0x00a200ac
 800a9d4:	000a000f 	.word	0x000a000f
 800a9d8:	0015001c 	.word	0x0015001c
 800a9dc:	0024002d 	.word	0x0024002d
 800a9e0:	00370042 	.word	0x00370042
 800a9e4:	004e005b 	.word	0x004e005b
 800a9e8:	00690078 	.word	0x00690078
 800a9ec:	24000000 	.word	0x24000000
 800a9f0:	00b400ba 	.word	0x00b400ba
 800a9f4:	00be00c0 	.word	0x00be00c0
 800a9f8:	00c000be 	.word	0x00c000be
 800a9fc:	00ba00b4 	.word	0x00ba00b4
 800aa00:	00ac00a2 	.word	0x00ac00a2
 800aa04:	00960088 	.word	0x00960088
 800aa08:	00030006 	.word	0x00030006

0800aa0c <PDM_Filter_Init>:
 800aa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0e:	2240      	movs	r2, #64	; 0x40
 800aa10:	2100      	movs	r1, #0
 800aa12:	4604      	mov	r4, r0
 800aa14:	300c      	adds	r0, #12
 800aa16:	f000 fa07 	bl	800ae28 <memset>
 800aa1a:	4a56      	ldr	r2, [pc, #344]	; (800ab74 <PDM_Filter_Init+0x168>)
 800aa1c:	4856      	ldr	r0, [pc, #344]	; (800ab78 <PDM_Filter_Init+0x16c>)
 800aa1e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800aa22:	6813      	ldr	r3, [r2, #0]
 800aa24:	f24c 2540 	movw	r5, #49728	; 0xc240
 800aa28:	f023 0301 	bic.w	r3, r3, #1
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	6803      	ldr	r3, [r0, #0]
 800aa30:	400b      	ands	r3, r1
 800aa32:	42ab      	cmp	r3, r5
 800aa34:	d040      	beq.n	800aab8 <PDM_Filter_Init+0xac>
 800aa36:	6803      	ldr	r3, [r0, #0]
 800aa38:	f24c 2270 	movw	r2, #49776	; 0xc270
 800aa3c:	4019      	ands	r1, r3
 800aa3e:	4291      	cmp	r1, r2
 800aa40:	d03a      	beq.n	800aab8 <PDM_Filter_Init+0xac>
 800aa42:	4b4e      	ldr	r3, [pc, #312]	; (800ab7c <PDM_Filter_Init+0x170>)
 800aa44:	2101      	movs	r1, #1
 800aa46:	461a      	mov	r2, r3
 800aa48:	6019      	str	r1, [r3, #0]
 800aa4a:	6813      	ldr	r3, [r2, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1fc      	bne.n	800aa4a <PDM_Filter_Init+0x3e>
 800aa50:	4b4b      	ldr	r3, [pc, #300]	; (800ab80 <PDM_Filter_Init+0x174>)
 800aa52:	494c      	ldr	r1, [pc, #304]	; (800ab84 <PDM_Filter_Init+0x178>)
 800aa54:	4a4c      	ldr	r2, [pc, #304]	; (800ab88 <PDM_Filter_Init+0x17c>)
 800aa56:	6019      	str	r1, [r3, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	8820      	ldrh	r0, [r4, #0]
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	8961      	ldrh	r1, [r4, #10]
 800aa60:	f04f 0300 	mov.w	r3, #0
 800aa64:	8922      	ldrh	r2, [r4, #8]
 800aa66:	bf14      	ite	ne
 800aa68:	2500      	movne	r5, #0
 800aa6a:	4d47      	ldreq	r5, [pc, #284]	; (800ab88 <PDM_Filter_Init+0x17c>)
 800aa6c:	2801      	cmp	r0, #1
 800aa6e:	61a3      	str	r3, [r4, #24]
 800aa70:	6465      	str	r5, [r4, #68]	; 0x44
 800aa72:	60e3      	str	r3, [r4, #12]
 800aa74:	6263      	str	r3, [r4, #36]	; 0x24
 800aa76:	6423      	str	r3, [r4, #64]	; 0x40
 800aa78:	86a1      	strh	r1, [r4, #52]	; 0x34
 800aa7a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800aa7c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800aa80:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800aa84:	d936      	bls.n	800aaf4 <PDM_Filter_Init+0xe8>
 800aa86:	2003      	movs	r0, #3
 800aa88:	2302      	movs	r3, #2
 800aa8a:	8862      	ldrh	r2, [r4, #2]
 800aa8c:	2a01      	cmp	r2, #1
 800aa8e:	d92e      	bls.n	800aaee <PDM_Filter_Init+0xe2>
 800aa90:	2140      	movs	r1, #64	; 0x40
 800aa92:	2300      	movs	r3, #0
 800aa94:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800aa96:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800aa9a:	d101      	bne.n	800aaa0 <PDM_Filter_Init+0x94>
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	6421      	str	r1, [r4, #64]	; 0x40
 800aaa0:	6862      	ldr	r2, [r4, #4]
 800aaa2:	b11a      	cbz	r2, 800aaac <PDM_Filter_Init+0xa0>
 800aaa4:	f043 0310 	orr.w	r3, r3, #16
 800aaa8:	62e2      	str	r2, [r4, #44]	; 0x2c
 800aaaa:	6423      	str	r3, [r4, #64]	; 0x40
 800aaac:	2200      	movs	r2, #0
 800aaae:	8722      	strh	r2, [r4, #56]	; 0x38
 800aab0:	b908      	cbnz	r0, 800aab6 <PDM_Filter_Init+0xaa>
 800aab2:	3380      	adds	r3, #128	; 0x80
 800aab4:	6423      	str	r3, [r4, #64]	; 0x40
 800aab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab8:	4b34      	ldr	r3, [pc, #208]	; (800ab8c <PDM_Filter_Init+0x180>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1c0      	bne.n	800aa42 <PDM_Filter_Init+0x36>
 800aac0:	4a33      	ldr	r2, [pc, #204]	; (800ab90 <PDM_Filter_Init+0x184>)
 800aac2:	6813      	ldr	r3, [r2, #0]
 800aac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aac8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800aacc:	d006      	beq.n	800aadc <PDM_Filter_Init+0xd0>
 800aace:	6813      	ldr	r3, [r2, #0]
 800aad0:	f240 4283 	movw	r2, #1155	; 0x483
 800aad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aad8:	4293      	cmp	r3, r2
 800aada:	d1b2      	bne.n	800aa42 <PDM_Filter_Init+0x36>
 800aadc:	4b2d      	ldr	r3, [pc, #180]	; (800ab94 <PDM_Filter_Init+0x188>)
 800aade:	2101      	movs	r1, #1
 800aae0:	461a      	mov	r2, r3
 800aae2:	6019      	str	r1, [r3, #0]
 800aae4:	6813      	ldr	r3, [r2, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1fc      	bne.n	800aae4 <PDM_Filter_Init+0xd8>
 800aaea:	4b2b      	ldr	r3, [pc, #172]	; (800ab98 <PDM_Filter_Init+0x18c>)
 800aaec:	e7b1      	b.n	800aa52 <PDM_Filter_Init+0x46>
 800aaee:	d03a      	beq.n	800ab66 <PDM_Filter_Init+0x15a>
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	e7cd      	b.n	800aa90 <PDM_Filter_Init+0x84>
 800aaf4:	4d29      	ldr	r5, [pc, #164]	; (800ab9c <PDM_Filter_Init+0x190>)
 800aaf6:	782a      	ldrb	r2, [r5, #0]
 800aaf8:	d01b      	beq.n	800ab32 <PDM_Filter_Init+0x126>
 800aafa:	2a01      	cmp	r2, #1
 800aafc:	d001      	beq.n	800ab02 <PDM_Filter_Init+0xf6>
 800aafe:	2001      	movs	r0, #1
 800ab00:	e7c3      	b.n	800aa8a <PDM_Filter_Init+0x7e>
 800ab02:	4927      	ldr	r1, [pc, #156]	; (800aba0 <PDM_Filter_Init+0x194>)
 800ab04:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800aba8 <PDM_Filter_Init+0x19c>
 800ab08:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800ab0c:	4e25      	ldr	r6, [pc, #148]	; (800aba4 <PDM_Filter_Init+0x198>)
 800ab0e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ab12:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800ab16:	ea02 0006 	and.w	r0, r2, r6
 800ab1a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800ab1e:	428f      	cmp	r7, r1
 800ab20:	ea43 0300 	orr.w	r3, r3, r0
 800ab24:	4413      	add	r3, r2
 800ab26:	600b      	str	r3, [r1, #0]
 800ab28:	d1f1      	bne.n	800ab0e <PDM_Filter_Init+0x102>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	702b      	strb	r3, [r5, #0]
 800ab30:	e7ab      	b.n	800aa8a <PDM_Filter_Init+0x7e>
 800ab32:	2a00      	cmp	r2, #0
 800ab34:	d1a9      	bne.n	800aa8a <PDM_Filter_Init+0x7e>
 800ab36:	491a      	ldr	r1, [pc, #104]	; (800aba0 <PDM_Filter_Init+0x194>)
 800ab38:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800aba8 <PDM_Filter_Init+0x19c>
 800ab3c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800ab40:	4e18      	ldr	r6, [pc, #96]	; (800aba4 <PDM_Filter_Init+0x198>)
 800ab42:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ab46:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800ab4a:	ea02 0006 	and.w	r0, r2, r6
 800ab4e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800ab52:	428f      	cmp	r7, r1
 800ab54:	ea43 0300 	orr.w	r3, r3, r0
 800ab58:	4413      	add	r3, r2
 800ab5a:	600b      	str	r3, [r1, #0]
 800ab5c:	d1f1      	bne.n	800ab42 <PDM_Filter_Init+0x136>
 800ab5e:	2001      	movs	r0, #1
 800ab60:	2300      	movs	r3, #0
 800ab62:	7028      	strb	r0, [r5, #0]
 800ab64:	e791      	b.n	800aa8a <PDM_Filter_Init+0x7e>
 800ab66:	2220      	movs	r2, #32
 800ab68:	4618      	mov	r0, r3
 800ab6a:	2160      	movs	r1, #96	; 0x60
 800ab6c:	6422      	str	r2, [r4, #64]	; 0x40
 800ab6e:	4613      	mov	r3, r2
 800ab70:	e790      	b.n	800aa94 <PDM_Filter_Init+0x88>
 800ab72:	bf00      	nop
 800ab74:	e0002000 	.word	0xe0002000
 800ab78:	e000ed00 	.word	0xe000ed00
 800ab7c:	40023008 	.word	0x40023008
 800ab80:	40023000 	.word	0x40023000
 800ab84:	f407a5c2 	.word	0xf407a5c2
 800ab88:	b5e8b5cd 	.word	0xb5e8b5cd
 800ab8c:	e0042000 	.word	0xe0042000
 800ab90:	5c001000 	.word	0x5c001000
 800ab94:	58024c08 	.word	0x58024c08
 800ab98:	58024c00 	.word	0x58024c00
 800ab9c:	2400049c 	.word	0x2400049c
 800aba0:	23fffffc 	.word	0x23fffffc
 800aba4:	000ffc00 	.word	0x000ffc00
 800aba8:	3ff00000 	.word	0x3ff00000

0800abac <PDM_Filter_setConfig>:
 800abac:	4b67      	ldr	r3, [pc, #412]	; (800ad4c <PDM_Filter_setConfig+0x1a0>)
 800abae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d128      	bne.n	800ac06 <PDM_Filter_setConfig+0x5a>
 800abb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800abb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb8:	880e      	ldrh	r6, [r1, #0]
 800abba:	460d      	mov	r5, r1
 800abbc:	4604      	mov	r4, r0
 800abbe:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800abc2:	1e73      	subs	r3, r6, #1
 800abc4:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800abc8:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800abcc:	2b06      	cmp	r3, #6
 800abce:	ed2d 8b02 	vpush	{d8}
 800abd2:	6421      	str	r1, [r4, #64]	; 0x40
 800abd4:	b083      	sub	sp, #12
 800abd6:	d820      	bhi.n	800ac1a <PDM_Filter_setConfig+0x6e>
 800abd8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800abda:	42b3      	cmp	r3, r6
 800abdc:	d03d      	beq.n	800ac5a <PDM_Filter_setConfig+0xae>
 800abde:	4b5c      	ldr	r3, [pc, #368]	; (800ad50 <PDM_Filter_setConfig+0x1a4>)
 800abe0:	4013      	ands	r3, r2
 800abe2:	4333      	orrs	r3, r6
 800abe4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800abe8:	6423      	str	r3, [r4, #64]	; 0x40
 800abea:	f003 030f 	and.w	r3, r3, #15
 800abee:	2a70      	cmp	r2, #112	; 0x70
 800abf0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800abf4:	d009      	beq.n	800ac0a <PDM_Filter_setConfig+0x5e>
 800abf6:	2b06      	cmp	r3, #6
 800abf8:	d824      	bhi.n	800ac44 <PDM_Filter_setConfig+0x98>
 800abfa:	e8df f003 	tbb	[pc, r3]
 800abfe:	878a      	.short	0x878a
 800ac00:	7b7e8184 	.word	0x7b7e8184
 800ac04:	78          	.byte	0x78
 800ac05:	00          	.byte	0x00
 800ac06:	2004      	movs	r0, #4
 800ac08:	4770      	bx	lr
 800ac0a:	2b06      	cmp	r3, #6
 800ac0c:	d81a      	bhi.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ac0e:	e8df f003 	tbb	[pc, r3]
 800ac12:	8f92      	.short	0x8f92
 800ac14:	8617898c 	.word	0x8617898c
 800ac18:	83          	.byte	0x83
 800ac19:	00          	.byte	0x00
 800ac1a:	4287      	cmp	r7, r0
 800ac1c:	f000 808e 	beq.w	800ad3c <PDM_Filter_setConfig+0x190>
 800ac20:	f117 0f0c 	cmn.w	r7, #12
 800ac24:	f04f 0008 	mov.w	r0, #8
 800ac28:	da11      	bge.n	800ac4e <PDM_Filter_setConfig+0xa2>
 800ac2a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800ac2e:	3040      	adds	r0, #64	; 0x40
 800ac30:	80ab      	strh	r3, [r5, #4]
 800ac32:	886b      	ldrh	r3, [r5, #2]
 800ac34:	8626      	strh	r6, [r4, #48]	; 0x30
 800ac36:	8663      	strh	r3, [r4, #50]	; 0x32
 800ac38:	b003      	add	sp, #12
 800ac3a:	ecbd 8b02 	vpop	{d8}
 800ac3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac40:	4b44      	ldr	r3, [pc, #272]	; (800ad54 <PDM_Filter_setConfig+0x1a8>)
 800ac42:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac44:	f117 0f0c 	cmn.w	r7, #12
 800ac48:	f04f 0000 	mov.w	r0, #0
 800ac4c:	dbed      	blt.n	800ac2a <PDM_Filter_setConfig+0x7e>
 800ac4e:	2f33      	cmp	r7, #51	; 0x33
 800ac50:	dd10      	ble.n	800ac74 <PDM_Filter_setConfig+0xc8>
 800ac52:	2333      	movs	r3, #51	; 0x33
 800ac54:	3040      	adds	r0, #64	; 0x40
 800ac56:	80ab      	strh	r3, [r5, #4]
 800ac58:	e7eb      	b.n	800ac32 <PDM_Filter_setConfig+0x86>
 800ac5a:	4287      	cmp	r7, r0
 800ac5c:	d1f2      	bne.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ac5e:	886b      	ldrh	r3, [r5, #2]
 800ac60:	8663      	strh	r3, [r4, #50]	; 0x32
 800ac62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac64:	2000      	movs	r0, #0
 800ac66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac6a:	6423      	str	r3, [r4, #64]	; 0x40
 800ac6c:	b003      	add	sp, #12
 800ac6e:	ecbd 8b02 	vpop	{d8}
 800ac72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac76:	f003 030f 	and.w	r3, r3, #15
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	2b06      	cmp	r3, #6
 800ac7e:	d831      	bhi.n	800ace4 <PDM_Filter_setConfig+0x138>
 800ac80:	4a35      	ldr	r2, [pc, #212]	; (800ad58 <PDM_Filter_setConfig+0x1ac>)
 800ac82:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ac86:	eddf 0a35 	vldr	s1, [pc, #212]	; 800ad5c <PDM_Filter_setConfig+0x1b0>
 800ac8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac8e:	9001      	str	r0, [sp, #4]
 800ac90:	edd3 7a07 	vldr	s15, [r3, #28]
 800ac94:	ed93 8a00 	vldr	s16, [r3]
 800ac98:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ac9c:	f000 f8e4 	bl	800ae68 <powf>
 800aca0:	eef0 8a40 	vmov.f32	s17, s0
 800aca4:	9801      	ldr	r0, [sp, #4]
 800aca6:	ee07 7a90 	vmov	s15, r7
 800acaa:	ee28 8a28 	vmul.f32	s16, s16, s17
 800acae:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800acb2:	9001      	str	r0, [sp, #4]
 800acb4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800acb8:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ad60 <PDM_Filter_setConfig+0x1b4>
 800acbc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800acc0:	f000 f8d2 	bl	800ae68 <powf>
 800acc4:	ee28 8a00 	vmul.f32	s16, s16, s0
 800acc8:	886b      	ldrh	r3, [r5, #2]
 800acca:	9801      	ldr	r0, [sp, #4]
 800accc:	feb8 8a48 	vrinta.f32	s16, s16
 800acd0:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800acd4:	8727      	strh	r7, [r4, #56]	; 0x38
 800acd6:	8663      	strh	r3, [r4, #50]	; 0x32
 800acd8:	8626      	strh	r6, [r4, #48]	; 0x30
 800acda:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800acde:	2800      	cmp	r0, #0
 800ace0:	d0bf      	beq.n	800ac62 <PDM_Filter_setConfig+0xb6>
 800ace2:	e7a9      	b.n	800ac38 <PDM_Filter_setConfig+0x8c>
 800ace4:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800ad64 <PDM_Filter_setConfig+0x1b8>
 800ace8:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800ad68 <PDM_Filter_setConfig+0x1bc>
 800acec:	e7db      	b.n	800aca6 <PDM_Filter_setConfig+0xfa>
 800acee:	4b1f      	ldr	r3, [pc, #124]	; (800ad6c <PDM_Filter_setConfig+0x1c0>)
 800acf0:	64a3      	str	r3, [r4, #72]	; 0x48
 800acf2:	e7a7      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800acf4:	4b1e      	ldr	r3, [pc, #120]	; (800ad70 <PDM_Filter_setConfig+0x1c4>)
 800acf6:	64a3      	str	r3, [r4, #72]	; 0x48
 800acf8:	e7a4      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800acfa:	4b1e      	ldr	r3, [pc, #120]	; (800ad74 <PDM_Filter_setConfig+0x1c8>)
 800acfc:	64a3      	str	r3, [r4, #72]	; 0x48
 800acfe:	e7a1      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad00:	4b1d      	ldr	r3, [pc, #116]	; (800ad78 <PDM_Filter_setConfig+0x1cc>)
 800ad02:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad04:	e79e      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad06:	4b1d      	ldr	r3, [pc, #116]	; (800ad7c <PDM_Filter_setConfig+0x1d0>)
 800ad08:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad0a:	e79b      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad0c:	4b1c      	ldr	r3, [pc, #112]	; (800ad80 <PDM_Filter_setConfig+0x1d4>)
 800ad0e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad10:	e798      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad12:	4b1c      	ldr	r3, [pc, #112]	; (800ad84 <PDM_Filter_setConfig+0x1d8>)
 800ad14:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad16:	e795      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad18:	4b1b      	ldr	r3, [pc, #108]	; (800ad88 <PDM_Filter_setConfig+0x1dc>)
 800ad1a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad1c:	e792      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad1e:	4b1b      	ldr	r3, [pc, #108]	; (800ad8c <PDM_Filter_setConfig+0x1e0>)
 800ad20:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad22:	e78f      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad24:	4b1a      	ldr	r3, [pc, #104]	; (800ad90 <PDM_Filter_setConfig+0x1e4>)
 800ad26:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad28:	e78c      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad2a:	4b1a      	ldr	r3, [pc, #104]	; (800ad94 <PDM_Filter_setConfig+0x1e8>)
 800ad2c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad2e:	e789      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad30:	4b19      	ldr	r3, [pc, #100]	; (800ad98 <PDM_Filter_setConfig+0x1ec>)
 800ad32:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad34:	e786      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad36:	4b19      	ldr	r3, [pc, #100]	; (800ad9c <PDM_Filter_setConfig+0x1f0>)
 800ad38:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad3a:	e783      	b.n	800ac44 <PDM_Filter_setConfig+0x98>
 800ad3c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ad3e:	42b3      	cmp	r3, r6
 800ad40:	f47f af6e 	bne.w	800ac20 <PDM_Filter_setConfig+0x74>
 800ad44:	886b      	ldrh	r3, [r5, #2]
 800ad46:	2008      	movs	r0, #8
 800ad48:	8663      	strh	r3, [r4, #50]	; 0x32
 800ad4a:	e775      	b.n	800ac38 <PDM_Filter_setConfig+0x8c>
 800ad4c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ad50:	fffffef0 	.word	0xfffffef0
 800ad54:	08009ec5 	.word	0x08009ec5
 800ad58:	0800b1d8 	.word	0x0800b1d8
 800ad5c:	42000000 	.word	0x42000000
 800ad60:	3d4ccccd 	.word	0x3d4ccccd
 800ad64:	4f800000 	.word	0x4f800000
 800ad68:	00000000 	.word	0x00000000
 800ad6c:	080092d1 	.word	0x080092d1
 800ad70:	08009159 	.word	0x08009159
 800ad74:	08009049 	.word	0x08009049
 800ad78:	08009b0d 	.word	0x08009b0d
 800ad7c:	08009875 	.word	0x08009875
 800ad80:	0800963d 	.word	0x0800963d
 800ad84:	08009459 	.word	0x08009459
 800ad88:	0800a0e1 	.word	0x0800a0e1
 800ad8c:	08009fa5 	.word	0x08009fa5
 800ad90:	0800a721 	.word	0x0800a721
 800ad94:	0800a525 	.word	0x0800a525
 800ad98:	0800a379 	.word	0x0800a379
 800ad9c:	0800a20d 	.word	0x0800a20d

0800ada0 <PDM_Filter>:
 800ada0:	b410      	push	{r4}
 800ada2:	4b0b      	ldr	r3, [pc, #44]	; (800add0 <PDM_Filter+0x30>)
 800ada4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800ada6:	429c      	cmp	r4, r3
 800ada8:	d107      	bne.n	800adba <PDM_Filter+0x1a>
 800adaa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800adac:	05dc      	lsls	r4, r3, #23
 800adae:	d508      	bpl.n	800adc2 <PDM_Filter+0x22>
 800adb0:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800adb2:	320c      	adds	r2, #12
 800adb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adb8:	4718      	bx	r3
 800adba:	2004      	movs	r0, #4
 800adbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800adc6:	bf14      	ite	ne
 800adc8:	2020      	movne	r0, #32
 800adca:	2030      	moveq	r0, #48	; 0x30
 800adcc:	e7f6      	b.n	800adbc <PDM_Filter+0x1c>
 800adce:	bf00      	nop
 800add0:	b5e8b5cd 	.word	0xb5e8b5cd

0800add4 <__errno>:
 800add4:	4b01      	ldr	r3, [pc, #4]	; (800addc <__errno+0x8>)
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	2400041c 	.word	0x2400041c

0800ade0 <__libc_init_array>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	4d0d      	ldr	r5, [pc, #52]	; (800ae18 <__libc_init_array+0x38>)
 800ade4:	4c0d      	ldr	r4, [pc, #52]	; (800ae1c <__libc_init_array+0x3c>)
 800ade6:	1b64      	subs	r4, r4, r5
 800ade8:	10a4      	asrs	r4, r4, #2
 800adea:	2600      	movs	r6, #0
 800adec:	42a6      	cmp	r6, r4
 800adee:	d109      	bne.n	800ae04 <__libc_init_array+0x24>
 800adf0:	4d0b      	ldr	r5, [pc, #44]	; (800ae20 <__libc_init_array+0x40>)
 800adf2:	4c0c      	ldr	r4, [pc, #48]	; (800ae24 <__libc_init_array+0x44>)
 800adf4:	f000 f9e4 	bl	800b1c0 <_init>
 800adf8:	1b64      	subs	r4, r4, r5
 800adfa:	10a4      	asrs	r4, r4, #2
 800adfc:	2600      	movs	r6, #0
 800adfe:	42a6      	cmp	r6, r4
 800ae00:	d105      	bne.n	800ae0e <__libc_init_array+0x2e>
 800ae02:	bd70      	pop	{r4, r5, r6, pc}
 800ae04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae08:	4798      	blx	r3
 800ae0a:	3601      	adds	r6, #1
 800ae0c:	e7ee      	b.n	800adec <__libc_init_array+0xc>
 800ae0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae12:	4798      	blx	r3
 800ae14:	3601      	adds	r6, #1
 800ae16:	e7f2      	b.n	800adfe <__libc_init_array+0x1e>
 800ae18:	0800b4a0 	.word	0x0800b4a0
 800ae1c:	0800b4a0 	.word	0x0800b4a0
 800ae20:	0800b4a0 	.word	0x0800b4a0
 800ae24:	0800b4a4 	.word	0x0800b4a4

0800ae28 <memset>:
 800ae28:	4402      	add	r2, r0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d100      	bne.n	800ae32 <memset+0xa>
 800ae30:	4770      	bx	lr
 800ae32:	f803 1b01 	strb.w	r1, [r3], #1
 800ae36:	e7f9      	b.n	800ae2c <memset+0x4>

0800ae38 <checkint>:
 800ae38:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ae3c:	2b7e      	cmp	r3, #126	; 0x7e
 800ae3e:	dd10      	ble.n	800ae62 <checkint+0x2a>
 800ae40:	2b96      	cmp	r3, #150	; 0x96
 800ae42:	dc0c      	bgt.n	800ae5e <checkint+0x26>
 800ae44:	2201      	movs	r2, #1
 800ae46:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ae4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae4e:	1e5a      	subs	r2, r3, #1
 800ae50:	4202      	tst	r2, r0
 800ae52:	d106      	bne.n	800ae62 <checkint+0x2a>
 800ae54:	4203      	tst	r3, r0
 800ae56:	bf0c      	ite	eq
 800ae58:	2002      	moveq	r0, #2
 800ae5a:	2001      	movne	r0, #1
 800ae5c:	4770      	bx	lr
 800ae5e:	2002      	movs	r0, #2
 800ae60:	4770      	bx	lr
 800ae62:	2000      	movs	r0, #0
 800ae64:	4770      	bx	lr
	...

0800ae68 <powf>:
 800ae68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae6a:	ee10 1a10 	vmov	r1, s0
 800ae6e:	ee10 6a90 	vmov	r6, s1
 800ae72:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800ae76:	0072      	lsls	r2, r6, #1
 800ae78:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ae7c:	b085      	sub	sp, #20
 800ae7e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800ae82:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800ae86:	d256      	bcs.n	800af36 <powf+0xce>
 800ae88:	4298      	cmp	r0, r3
 800ae8a:	d256      	bcs.n	800af3a <powf+0xd2>
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800ae92:	4ea3      	ldr	r6, [pc, #652]	; (800b120 <powf+0x2b8>)
 800ae94:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ae98:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800ae9c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800aea0:	0dd2      	lsrs	r2, r2, #23
 800aea2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800aea6:	05d2      	lsls	r2, r2, #23
 800aea8:	1a8b      	subs	r3, r1, r2
 800aeaa:	ed97 5b00 	vldr	d5, [r7]
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	15d2      	asrs	r2, r2, #23
 800aeb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800aeb8:	eea5 6b07 	vfma.f64	d6, d5, d7
 800aebc:	ed97 5b02 	vldr	d5, [r7, #8]
 800aec0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800aec4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800aec8:	ee07 2a90 	vmov	s15, r2
 800aecc:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800aed0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aed4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800aed8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800aedc:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800aee0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800aee4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800aee8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800aeec:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800aef0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800aef4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800aef8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800aefc:	eea5 7b01 	vfma.f64	d7, d5, d1
 800af00:	ee20 0b07 	vmul.f64	d0, d0, d7
 800af04:	ee10 1a90 	vmov	r1, s1
 800af08:	2300      	movs	r3, #0
 800af0a:	2700      	movs	r7, #0
 800af0c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800af10:	f248 06be 	movw	r6, #32958	; 0x80be
 800af14:	429f      	cmp	r7, r3
 800af16:	bf08      	it	eq
 800af18:	4296      	cmpeq	r6, r2
 800af1a:	f080 80b1 	bcs.w	800b080 <powf+0x218>
 800af1e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800b100 <powf+0x298>
 800af22:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800af26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af2a:	dd79      	ble.n	800b020 <powf+0x1b8>
 800af2c:	b005      	add	sp, #20
 800af2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800af32:	f000 b91f 	b.w	800b174 <__math_oflowf>
 800af36:	4298      	cmp	r0, r3
 800af38:	d32d      	bcc.n	800af96 <powf+0x12e>
 800af3a:	b952      	cbnz	r2, 800af52 <powf+0xea>
 800af3c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800af46:	f240 80cd 	bls.w	800b0e4 <powf+0x27c>
 800af4a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800af4e:	b005      	add	sp, #20
 800af50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af52:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800af56:	d105      	bne.n	800af64 <powf+0xfc>
 800af58:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800af5c:	0076      	lsls	r6, r6, #1
 800af5e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800af62:	e7f0      	b.n	800af46 <powf+0xde>
 800af64:	004b      	lsls	r3, r1, #1
 800af66:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800af6a:	d8ee      	bhi.n	800af4a <powf+0xe2>
 800af6c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800af70:	d1eb      	bne.n	800af4a <powf+0xe2>
 800af72:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800af76:	f000 80b5 	beq.w	800b0e4 <powf+0x27c>
 800af7a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800af7e:	ea6f 0606 	mvn.w	r6, r6
 800af82:	bf34      	ite	cc
 800af84:	2300      	movcc	r3, #0
 800af86:	2301      	movcs	r3, #1
 800af88:	0ff6      	lsrs	r6, r6, #31
 800af8a:	42b3      	cmp	r3, r6
 800af8c:	f040 80ad 	bne.w	800b0ea <powf+0x282>
 800af90:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800af94:	e7db      	b.n	800af4e <powf+0xe6>
 800af96:	004f      	lsls	r7, r1, #1
 800af98:	1e7a      	subs	r2, r7, #1
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d31c      	bcc.n	800afd8 <powf+0x170>
 800af9e:	2900      	cmp	r1, #0
 800afa0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800afa4:	da0f      	bge.n	800afc6 <powf+0x15e>
 800afa6:	ee10 0a90 	vmov	r0, s1
 800afaa:	f7ff ff45 	bl	800ae38 <checkint>
 800afae:	2801      	cmp	r0, #1
 800afb0:	d109      	bne.n	800afc6 <powf+0x15e>
 800afb2:	eeb1 0a40 	vneg.f32	s0, s0
 800afb6:	b947      	cbnz	r7, 800afca <powf+0x162>
 800afb8:	2e00      	cmp	r6, #0
 800afba:	dac8      	bge.n	800af4e <powf+0xe6>
 800afbc:	b005      	add	sp, #20
 800afbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800afc2:	f000 b8dd 	b.w	800b180 <__math_divzerof>
 800afc6:	2000      	movs	r0, #0
 800afc8:	e7f5      	b.n	800afb6 <powf+0x14e>
 800afca:	2e00      	cmp	r6, #0
 800afcc:	dabf      	bge.n	800af4e <powf+0xe6>
 800afce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800afd2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800afd6:	e7ba      	b.n	800af4e <powf+0xe6>
 800afd8:	2900      	cmp	r1, #0
 800afda:	da1f      	bge.n	800b01c <powf+0x1b4>
 800afdc:	ee10 0a90 	vmov	r0, s1
 800afe0:	f7ff ff2a 	bl	800ae38 <checkint>
 800afe4:	b920      	cbnz	r0, 800aff0 <powf+0x188>
 800afe6:	b005      	add	sp, #20
 800afe8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800afec:	f000 b8d8 	b.w	800b1a0 <__math_invalidf>
 800aff0:	2801      	cmp	r0, #1
 800aff2:	bf14      	ite	ne
 800aff4:	2000      	movne	r0, #0
 800aff6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800affa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800affe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b002:	f4bf af44 	bcs.w	800ae8e <powf+0x26>
 800b006:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b124 <powf+0x2bc>
 800b00a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b00e:	ee10 3a10 	vmov	r3, s0
 800b012:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b016:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800b01a:	e738      	b.n	800ae8e <powf+0x26>
 800b01c:	2000      	movs	r0, #0
 800b01e:	e7ee      	b.n	800affe <powf+0x196>
 800b020:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800b108 <powf+0x2a0>
 800b024:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02c:	dd10      	ble.n	800b050 <powf+0x1e8>
 800b02e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800b032:	2800      	cmp	r0, #0
 800b034:	d15c      	bne.n	800b0f0 <powf+0x288>
 800b036:	9302      	str	r3, [sp, #8]
 800b038:	eddd 7a02 	vldr	s15, [sp, #8]
 800b03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b040:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b044:	eef4 7a47 	vcmp.f32	s15, s14
 800b048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b04c:	f47f af6e 	bne.w	800af2c <powf+0xc4>
 800b050:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b110 <powf+0x2a8>
 800b054:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b05c:	d804      	bhi.n	800b068 <powf+0x200>
 800b05e:	b005      	add	sp, #20
 800b060:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b064:	f000 b87a 	b.w	800b15c <__math_uflowf>
 800b068:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800b118 <powf+0x2b0>
 800b06c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b074:	d504      	bpl.n	800b080 <powf+0x218>
 800b076:	b005      	add	sp, #20
 800b078:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b07c:	f000 b874 	b.w	800b168 <__math_may_uflowf>
 800b080:	4b29      	ldr	r3, [pc, #164]	; (800b128 <powf+0x2c0>)
 800b082:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800b086:	ee30 6b07 	vadd.f64	d6, d0, d7
 800b08a:	ed8d 6b00 	vstr	d6, [sp]
 800b08e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b092:	ee30 7b47 	vsub.f64	d7, d0, d7
 800b096:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b09a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b09e:	f006 011f 	and.w	r1, r6, #31
 800b0a2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b0a6:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800b0aa:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800b0ae:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800b0b2:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800b0b6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b0ba:	ee27 5b07 	vmul.f64	d5, d7, d7
 800b0be:	1836      	adds	r6, r6, r0
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	eb13 040c 	adds.w	r4, r3, ip
 800b0c6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800b0ca:	eb41 050e 	adc.w	r5, r1, lr
 800b0ce:	eea7 0b04 	vfma.f64	d0, d7, d4
 800b0d2:	ec45 4b17 	vmov	d7, r4, r5
 800b0d6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b0da:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b0de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b0e2:	e734      	b.n	800af4e <powf+0xe6>
 800b0e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b0e8:	e731      	b.n	800af4e <powf+0xe6>
 800b0ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b12c <powf+0x2c4>
 800b0ee:	e72e      	b.n	800af4e <powf+0xe6>
 800b0f0:	9303      	str	r3, [sp, #12]
 800b0f2:	eddd 7a03 	vldr	s15, [sp, #12]
 800b0f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0fe:	e7a1      	b.n	800b044 <powf+0x1dc>
 800b100:	ffd1d571 	.word	0xffd1d571
 800b104:	405fffff 	.word	0x405fffff
 800b108:	ffa3aae2 	.word	0xffa3aae2
 800b10c:	405fffff 	.word	0x405fffff
 800b110:	00000000 	.word	0x00000000
 800b114:	c062c000 	.word	0xc062c000
 800b118:	00000000 	.word	0x00000000
 800b11c:	c062a000 	.word	0xc062a000
 800b120:	0800b230 	.word	0x0800b230
 800b124:	4b000000 	.word	0x4b000000
 800b128:	0800b358 	.word	0x0800b358
 800b12c:	00000000 	.word	0x00000000

0800b130 <with_errnof>:
 800b130:	b513      	push	{r0, r1, r4, lr}
 800b132:	4604      	mov	r4, r0
 800b134:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b138:	f7ff fe4c 	bl	800add4 <__errno>
 800b13c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b140:	6004      	str	r4, [r0, #0]
 800b142:	b002      	add	sp, #8
 800b144:	bd10      	pop	{r4, pc}

0800b146 <xflowf>:
 800b146:	b130      	cbz	r0, 800b156 <xflowf+0x10>
 800b148:	eef1 7a40 	vneg.f32	s15, s0
 800b14c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b150:	2022      	movs	r0, #34	; 0x22
 800b152:	f7ff bfed 	b.w	800b130 <with_errnof>
 800b156:	eef0 7a40 	vmov.f32	s15, s0
 800b15a:	e7f7      	b.n	800b14c <xflowf+0x6>

0800b15c <__math_uflowf>:
 800b15c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b164 <__math_uflowf+0x8>
 800b160:	f7ff bff1 	b.w	800b146 <xflowf>
 800b164:	10000000 	.word	0x10000000

0800b168 <__math_may_uflowf>:
 800b168:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b170 <__math_may_uflowf+0x8>
 800b16c:	f7ff bfeb 	b.w	800b146 <xflowf>
 800b170:	1a200000 	.word	0x1a200000

0800b174 <__math_oflowf>:
 800b174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b17c <__math_oflowf+0x8>
 800b178:	f7ff bfe5 	b.w	800b146 <xflowf>
 800b17c:	70000000 	.word	0x70000000

0800b180 <__math_divzerof>:
 800b180:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b184:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800b188:	2800      	cmp	r0, #0
 800b18a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800b18e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800b19c <__math_divzerof+0x1c>
 800b192:	2022      	movs	r0, #34	; 0x22
 800b194:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b198:	f7ff bfca 	b.w	800b130 <with_errnof>
 800b19c:	00000000 	.word	0x00000000

0800b1a0 <__math_invalidf>:
 800b1a0:	eef0 7a40 	vmov.f32	s15, s0
 800b1a4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b1a8:	eef4 7a67 	vcmp.f32	s15, s15
 800b1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800b1b4:	d602      	bvs.n	800b1bc <__math_invalidf+0x1c>
 800b1b6:	2021      	movs	r0, #33	; 0x21
 800b1b8:	f7ff bfba 	b.w	800b130 <with_errnof>
 800b1bc:	4770      	bx	lr
	...

0800b1c0 <_init>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	bf00      	nop
 800b1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c6:	bc08      	pop	{r3}
 800b1c8:	469e      	mov	lr, r3
 800b1ca:	4770      	bx	lr

0800b1cc <_fini>:
 800b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ce:	bf00      	nop
 800b1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1d2:	bc08      	pop	{r3}
 800b1d4:	469e      	mov	lr, r3
 800b1d6:	4770      	bx	lr
