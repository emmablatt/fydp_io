
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a400  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800a6d0  0800a6d0  0001a6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a998  0800a998  0001a998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a99c  0800a99c  0001a99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  24000000  0800a9a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001418  2400047c  0800ae1c  0002047c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24001894  0800ae1c  00021894  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020bea  00000000  00000000  000204aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000038bc  00000000  00000000  00041094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f00  00000000  00000000  00044950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000dd0  00000000  00000000  00045850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032696  00000000  00000000  00046620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001674d  00000000  00000000  00078cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015107a  00000000  00000000  0008f403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001e047d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003e04  00000000  00000000  001e0550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400047c 	.word	0x2400047c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a6b8 	.word	0x0800a6b8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000480 	.word	0x24000480
 800030c:	0800a6b8 	.word	0x0800a6b8

08000310 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10f      	bne.n	8000344 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <BSP_LED_Init+0xb0>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	e015      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <BSP_LED_Init+0xb0>)
 800034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <BSP_LED_Init+0xb0>)
 800035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	e002      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800036a:	f06f 0301 	mvn.w	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <BSP_LED_Init+0xb4>)
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <BSP_LED_Init+0xb8>)
 800038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038e:	f107 0210 	add.w	r2, r7, #16
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f002 fb87 	bl	8002aa8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <BSP_LED_Init+0xb8>)
 800039e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <BSP_LED_Init+0xb4>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	f002 fd22 	bl	8002df8 <HAL_GPIO_WritePin>

  return ret;
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58024400 	.word	0x58024400
 80003c4:	0800a708 	.word	0x0800a708
 80003c8:	24000400 	.word	0x24000400

080003cc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <BSP_LED_On+0x34>)
 80003de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <BSP_LED_On+0x38>)
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	f002 fd02 	bl	8002df8 <HAL_GPIO_WritePin>
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	24000400 	.word	0x24000400
 8000404:	0800a708 	.word	0x0800a708

08000408 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <BSP_LED_Off+0x34>)
 800041a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <BSP_LED_Off+0x38>)
 8000422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000426:	b29b      	uxth	r3, r3
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	f002 fce4 	bl	8002df8 <HAL_GPIO_WritePin>
  return ret;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	24000400 	.word	0x24000400
 8000440:	0800a708 	.word	0x0800a708

08000444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800044a:	2003      	movs	r0, #3
 800044c:	f000 f95c 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000450:	f004 fa9c 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8000454:	4602      	mov	r2, r0
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <HAL_Init+0x68>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	f003 030f 	and.w	r3, r3, #15
 8000460:	4913      	ldr	r1, [pc, #76]	; (80004b0 <HAL_Init+0x6c>)
 8000462:	5ccb      	ldrb	r3, [r1, r3]
 8000464:	f003 031f 	and.w	r3, r3, #31
 8000468:	fa22 f303 	lsr.w	r3, r2, r3
 800046c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_Init+0x68>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 030f 	and.w	r3, r3, #15
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_Init+0x6c>)
 8000478:	5cd3      	ldrb	r3, [r2, r3]
 800047a:	f003 031f 	and.w	r3, r3, #31
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	fa22 f303 	lsr.w	r3, r2, r3
 8000484:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <HAL_Init+0x70>)
 8000486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000488:	4a0b      	ldr	r2, [pc, #44]	; (80004b8 <HAL_Init+0x74>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800048e:	2000      	movs	r0, #0
 8000490:	f000 f814 	bl	80004bc <HAL_InitTick>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800049a:	2301      	movs	r3, #1
 800049c:	e002      	b.n	80004a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800049e:	f007 fd2f 	bl	8007f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	58024400 	.word	0x58024400
 80004b0:	0800a718 	.word	0x0800a718
 80004b4:	24000414 	.word	0x24000414
 80004b8:	24000410 	.word	0x24000410

080004bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80004c4:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_InitTick+0x60>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d101      	bne.n	80004d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e021      	b.n	8000514 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <HAL_InitTick+0x64>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <HAL_InitTick+0x60>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004de:	fbb3 f3f1 	udiv	r3, r3, r1
 80004e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f941 	bl	800076e <HAL_SYSTICK_Config>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
 80004f4:	e00e      	b.n	8000514 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d80a      	bhi.n	8000512 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	2200      	movs	r2, #0
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000504:	f000 f90b 	bl	800071e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <HAL_InitTick+0x68>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800050e:	2300      	movs	r3, #0
 8000510:	e000      	b.n	8000514 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2400040c 	.word	0x2400040c
 8000520:	24000410 	.word	0x24000410
 8000524:	24000408 	.word	0x24000408

08000528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x20>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	461a      	mov	r2, r3
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x24>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4413      	add	r3, r2
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_IncTick+0x24>)
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2400040c 	.word	0x2400040c
 800054c:	240014a4 	.word	0x240014a4

08000550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return uwTick;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <HAL_GetTick+0x14>)
 8000556:	681b      	ldr	r3, [r3, #0]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	240014a4 	.word	0x240014a4

08000568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <__NVIC_SetPriorityGrouping+0x40>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000584:	4013      	ands	r3, r2
 8000586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	4313      	orrs	r3, r2
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <__NVIC_SetPriorityGrouping+0x40>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00
 80005ac:	05fa0000 	.word	0x05fa0000

080005b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <__NVIC_GetPriorityGrouping+0x18>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	f003 0307 	and.w	r3, r3, #7
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db0b      	blt.n	80005f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	f003 021f 	and.w	r2, r3, #31
 80005e4:	4907      	ldr	r1, [pc, #28]	; (8000604 <__NVIC_EnableIRQ+0x38>)
 80005e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ea:	095b      	lsrs	r3, r3, #5
 80005ec:	2001      	movs	r0, #1
 80005ee:	fa00 f202 	lsl.w	r2, r0, r2
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e100 	.word	0xe000e100

08000608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db0a      	blt.n	8000632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	b2da      	uxtb	r2, r3
 8000620:	490c      	ldr	r1, [pc, #48]	; (8000654 <__NVIC_SetPriority+0x4c>)
 8000622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	440b      	add	r3, r1
 800062c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000630:	e00a      	b.n	8000648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4908      	ldr	r1, [pc, #32]	; (8000658 <__NVIC_SetPriority+0x50>)
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	3b04      	subs	r3, #4
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	440b      	add	r3, r1
 8000646:	761a      	strb	r2, [r3, #24]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	f1c3 0307 	rsb	r3, r3, #7
 8000676:	2b04      	cmp	r3, #4
 8000678:	bf28      	it	cs
 800067a:	2304      	movcs	r3, #4
 800067c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3304      	adds	r3, #4
 8000682:	2b06      	cmp	r3, #6
 8000684:	d902      	bls.n	800068c <NVIC_EncodePriority+0x30>
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3b03      	subs	r3, #3
 800068a:	e000      	b.n	800068e <NVIC_EncodePriority+0x32>
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43da      	mvns	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	401a      	ands	r2, r3
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	43d9      	mvns	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	4313      	orrs	r3, r2
         );
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3724      	adds	r7, #36	; 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d4:	d301      	bcc.n	80006da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00f      	b.n	80006fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <SysTick_Config+0x40>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3b01      	subs	r3, #1
 80006e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006e2:	210f      	movs	r1, #15
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e8:	f7ff ff8e 	bl	8000608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <SysTick_Config+0x40>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <SysTick_Config+0x40>)
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	e000e010 	.word	0xe000e010

08000708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff29 	bl	8000568 <__NVIC_SetPriorityGrouping>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b086      	sub	sp, #24
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800072c:	f7ff ff40 	bl	80005b0 <__NVIC_GetPriorityGrouping>
 8000730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f7ff ff90 	bl	800065c <NVIC_EncodePriority>
 800073c:	4602      	mov	r2, r0
 800073e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5f 	bl	8000608 <__NVIC_SetPriority>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff33 	bl	80005cc <__NVIC_EnableIRQ>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ffa4 	bl	80006c4 <SysTick_Config>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800078c:	f3bf 8f5f 	dmb	sy
}
 8000790:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_MPU_Disable+0x28>)
 8000794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000796:	4a06      	ldr	r2, [pc, #24]	; (80007b0 <HAL_MPU_Disable+0x28>)
 8000798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800079c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_MPU_Disable+0x2c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00
 80007b4:	e000ed90 	.word	0xe000ed90

080007b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80007c0:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <HAL_MPU_Enable+0x38>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_MPU_Enable+0x3c>)
 80007cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <HAL_MPU_Enable+0x3c>)
 80007d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80007d6:	f3bf 8f4f 	dsb	sy
}
 80007da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007dc:	f3bf 8f6f 	isb	sy
}
 80007e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed90 	.word	0xe000ed90
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	785a      	ldrb	r2, [r3, #1]
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <HAL_MPU_ConfigRegion+0x84>)
 8000806:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d029      	beq.n	8000864 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000810:	4a1a      	ldr	r2, [pc, #104]	; (800087c <HAL_MPU_ConfigRegion+0x84>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7b1b      	ldrb	r3, [r3, #12]
 800081c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7adb      	ldrb	r3, [r3, #11]
 8000822:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000824:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7a9b      	ldrb	r3, [r3, #10]
 800082a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800082c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7b5b      	ldrb	r3, [r3, #13]
 8000832:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000834:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7b9b      	ldrb	r3, [r3, #14]
 800083a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800083c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7bdb      	ldrb	r3, [r3, #15]
 8000842:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000844:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7a5b      	ldrb	r3, [r3, #9]
 800084a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800084c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7a1b      	ldrb	r3, [r3, #8]
 8000852:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000854:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	7812      	ldrb	r2, [r2, #0]
 800085a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800085e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000860:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000862:	e005      	b.n	8000870 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_MPU_ConfigRegion+0x84>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <HAL_MPU_ConfigRegion+0x84>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed90 	.word	0xe000ed90

08000880 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e054      	b.n	800093c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7f5b      	ldrb	r3, [r3, #29]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d105      	bne.n	80008a8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f007 fb46 	bl	8007f34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2202      	movs	r2, #2
 80008ac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	791b      	ldrb	r3, [r3, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d10c      	bne.n	80008d0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a22      	ldr	r2, [pc, #136]	; (8000944 <HAL_CRC_Init+0xc4>)
 80008bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f022 0218 	bic.w	r2, r2, #24
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	e00c      	b.n	80008ea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6899      	ldr	r1, [r3, #8]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	461a      	mov	r2, r3
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f834 	bl	8000948 <HAL_CRCEx_Polynomial_Set>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e028      	b.n	800093c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	795b      	ldrb	r3, [r3, #5]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d105      	bne.n	80008fe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	e004      	b.n	8000908 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	6912      	ldr	r2, [r2, #16]
 8000906:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	430a      	orrs	r2, r1
 800091c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	699a      	ldr	r2, [r3, #24]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	430a      	orrs	r2, r1
 8000932:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2201      	movs	r2, #1
 8000938:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	04c11db7 	.word	0x04c11db7

08000948 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000958:	231f      	movs	r3, #31
 800095a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800095c:	bf00      	nop
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	1e5a      	subs	r2, r3, #1
 8000962:	613a      	str	r2, [r7, #16]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d009      	beq.n	800097c <HAL_CRCEx_Polynomial_Set+0x34>
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	f003 031f 	and.w	r3, r3, #31
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	fa22 f303 	lsr.w	r3, r2, r3
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0f0      	beq.n	800095e <HAL_CRCEx_Polynomial_Set+0x16>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b18      	cmp	r3, #24
 8000980:	d846      	bhi.n	8000a10 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000a17 	.word	0x08000a17
 800098c:	08000a11 	.word	0x08000a11
 8000990:	08000a11 	.word	0x08000a11
 8000994:	08000a11 	.word	0x08000a11
 8000998:	08000a11 	.word	0x08000a11
 800099c:	08000a11 	.word	0x08000a11
 80009a0:	08000a11 	.word	0x08000a11
 80009a4:	08000a11 	.word	0x08000a11
 80009a8:	08000a05 	.word	0x08000a05
 80009ac:	08000a11 	.word	0x08000a11
 80009b0:	08000a11 	.word	0x08000a11
 80009b4:	08000a11 	.word	0x08000a11
 80009b8:	08000a11 	.word	0x08000a11
 80009bc:	08000a11 	.word	0x08000a11
 80009c0:	08000a11 	.word	0x08000a11
 80009c4:	08000a11 	.word	0x08000a11
 80009c8:	080009f9 	.word	0x080009f9
 80009cc:	08000a11 	.word	0x08000a11
 80009d0:	08000a11 	.word	0x08000a11
 80009d4:	08000a11 	.word	0x08000a11
 80009d8:	08000a11 	.word	0x08000a11
 80009dc:	08000a11 	.word	0x08000a11
 80009e0:	08000a11 	.word	0x08000a11
 80009e4:	08000a11 	.word	0x08000a11
 80009e8:	080009ed 	.word	0x080009ed
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d913      	bls.n	8000a1a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80009f6:	e010      	b.n	8000a1a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	d90f      	bls.n	8000a1e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a02:	e00c      	b.n	8000a1e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	d90b      	bls.n	8000a22 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a0e:	e008      	b.n	8000a22 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	75fb      	strb	r3, [r7, #23]
      break;
 8000a14:	e006      	b.n	8000a24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a16:	bf00      	nop
 8000a18:	e004      	b.n	8000a24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a1a:	bf00      	nop
 8000a1c:	e002      	b.n	8000a24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a1e:	bf00      	nop
 8000a20:	e000      	b.n	8000a24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a22:	bf00      	nop
  }
  if (status == HAL_OK)
 8000a24:	7dfb      	ldrb	r3, [r7, #23]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10d      	bne.n	8000a46 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f023 0118 	bic.w	r1, r3, #24
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	371c      	adds	r7, #28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff fd78 	bl	8000550 <HAL_GetTick>
 8000a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e314      	b.n	8001096 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a66      	ldr	r2, [pc, #408]	; (8000c0c <HAL_DMA_Init+0x1b8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d04a      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a65      	ldr	r2, [pc, #404]	; (8000c10 <HAL_DMA_Init+0x1bc>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d045      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a63      	ldr	r2, [pc, #396]	; (8000c14 <HAL_DMA_Init+0x1c0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d040      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a62      	ldr	r2, [pc, #392]	; (8000c18 <HAL_DMA_Init+0x1c4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d03b      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a60      	ldr	r2, [pc, #384]	; (8000c1c <HAL_DMA_Init+0x1c8>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d036      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a5f      	ldr	r2, [pc, #380]	; (8000c20 <HAL_DMA_Init+0x1cc>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d031      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a5d      	ldr	r2, [pc, #372]	; (8000c24 <HAL_DMA_Init+0x1d0>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d02c      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a5c      	ldr	r2, [pc, #368]	; (8000c28 <HAL_DMA_Init+0x1d4>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d027      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a5a      	ldr	r2, [pc, #360]	; (8000c2c <HAL_DMA_Init+0x1d8>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d022      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a59      	ldr	r2, [pc, #356]	; (8000c30 <HAL_DMA_Init+0x1dc>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d01d      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a57      	ldr	r2, [pc, #348]	; (8000c34 <HAL_DMA_Init+0x1e0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d018      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a56      	ldr	r2, [pc, #344]	; (8000c38 <HAL_DMA_Init+0x1e4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d013      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a54      	ldr	r2, [pc, #336]	; (8000c3c <HAL_DMA_Init+0x1e8>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d00e      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a53      	ldr	r2, [pc, #332]	; (8000c40 <HAL_DMA_Init+0x1ec>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d009      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <HAL_DMA_Init+0x1f0>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d004      	beq.n	8000b0c <HAL_DMA_Init+0xb8>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a50      	ldr	r2, [pc, #320]	; (8000c48 <HAL_DMA_Init+0x1f4>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d101      	bne.n	8000b10 <HAL_DMA_Init+0xbc>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <HAL_DMA_Init+0xbe>
 8000b10:	2300      	movs	r3, #0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 813c 	beq.w	8000d90 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <HAL_DMA_Init+0x1b8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d04a      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a36      	ldr	r2, [pc, #216]	; (8000c10 <HAL_DMA_Init+0x1bc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d045      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a34      	ldr	r2, [pc, #208]	; (8000c14 <HAL_DMA_Init+0x1c0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d040      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a33      	ldr	r2, [pc, #204]	; (8000c18 <HAL_DMA_Init+0x1c4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d03b      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <HAL_DMA_Init+0x1c8>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d036      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a30      	ldr	r2, [pc, #192]	; (8000c20 <HAL_DMA_Init+0x1cc>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d031      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a2e      	ldr	r2, [pc, #184]	; (8000c24 <HAL_DMA_Init+0x1d0>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d02c      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a2d      	ldr	r2, [pc, #180]	; (8000c28 <HAL_DMA_Init+0x1d4>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d027      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a2b      	ldr	r2, [pc, #172]	; (8000c2c <HAL_DMA_Init+0x1d8>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d022      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <HAL_DMA_Init+0x1dc>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d01d      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <HAL_DMA_Init+0x1e0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d018      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a27      	ldr	r2, [pc, #156]	; (8000c38 <HAL_DMA_Init+0x1e4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d013      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a25      	ldr	r2, [pc, #148]	; (8000c3c <HAL_DMA_Init+0x1e8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d00e      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a24      	ldr	r2, [pc, #144]	; (8000c40 <HAL_DMA_Init+0x1ec>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d009      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <HAL_DMA_Init+0x1f0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d004      	beq.n	8000bc8 <HAL_DMA_Init+0x174>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <HAL_DMA_Init+0x1f4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d108      	bne.n	8000bda <HAL_DMA_Init+0x186>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 0201 	bic.w	r2, r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	e007      	b.n	8000bea <HAL_DMA_Init+0x196>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0201 	bic.w	r2, r2, #1
 8000be8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000bea:	e02f      	b.n	8000c4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000bec:	f7ff fcb0 	bl	8000550 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b05      	cmp	r3, #5
 8000bf8:	d928      	bls.n	8000c4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2203      	movs	r2, #3
 8000c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e244      	b.n	8001096 <HAL_DMA_Init+0x642>
 8000c0c:	40020010 	.word	0x40020010
 8000c10:	40020028 	.word	0x40020028
 8000c14:	40020040 	.word	0x40020040
 8000c18:	40020058 	.word	0x40020058
 8000c1c:	40020070 	.word	0x40020070
 8000c20:	40020088 	.word	0x40020088
 8000c24:	400200a0 	.word	0x400200a0
 8000c28:	400200b8 	.word	0x400200b8
 8000c2c:	40020410 	.word	0x40020410
 8000c30:	40020428 	.word	0x40020428
 8000c34:	40020440 	.word	0x40020440
 8000c38:	40020458 	.word	0x40020458
 8000c3c:	40020470 	.word	0x40020470
 8000c40:	40020488 	.word	0x40020488
 8000c44:	400204a0 	.word	0x400204a0
 8000c48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1c8      	bne.n	8000bec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	4b84      	ldr	r3, [pc, #528]	; (8000e78 <HAL_DMA_Init+0x424>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000c72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d107      	bne.n	8000cb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b28      	cmp	r3, #40	; 0x28
 8000cb6:	d903      	bls.n	8000cc0 <HAL_DMA_Init+0x26c>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8000cbe:	d91f      	bls.n	8000d00 <HAL_DMA_Init+0x2ac>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b3e      	cmp	r3, #62	; 0x3e
 8000cc6:	d903      	bls.n	8000cd0 <HAL_DMA_Init+0x27c>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b42      	cmp	r3, #66	; 0x42
 8000cce:	d917      	bls.n	8000d00 <HAL_DMA_Init+0x2ac>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b46      	cmp	r3, #70	; 0x46
 8000cd6:	d903      	bls.n	8000ce0 <HAL_DMA_Init+0x28c>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b48      	cmp	r3, #72	; 0x48
 8000cde:	d90f      	bls.n	8000d00 <HAL_DMA_Init+0x2ac>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b4e      	cmp	r3, #78	; 0x4e
 8000ce6:	d903      	bls.n	8000cf0 <HAL_DMA_Init+0x29c>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b52      	cmp	r3, #82	; 0x52
 8000cee:	d907      	bls.n	8000d00 <HAL_DMA_Init+0x2ac>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b73      	cmp	r3, #115	; 0x73
 8000cf6:	d905      	bls.n	8000d04 <HAL_DMA_Init+0x2b0>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b77      	cmp	r3, #119	; 0x77
 8000cfe:	d801      	bhi.n	8000d04 <HAL_DMA_Init+0x2b0>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <HAL_DMA_Init+0x2b2>
 8000d04:	2300      	movs	r3, #0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d10:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d117      	bne.n	8000d6c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00e      	beq.n	8000d6c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f001 fc08 	bl	8002564 <DMA_CheckFifoParam>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d008      	beq.n	8000d6c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e194      	b.n	8001096 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f001 fb43 	bl	8002400 <DMA_CalcBaseAndBitshift>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	223f      	movs	r2, #63	; 0x3f
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	e0ca      	b.n	8000f26 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a39      	ldr	r2, [pc, #228]	; (8000e7c <HAL_DMA_Init+0x428>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d022      	beq.n	8000de0 <HAL_DMA_Init+0x38c>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a38      	ldr	r2, [pc, #224]	; (8000e80 <HAL_DMA_Init+0x42c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d01d      	beq.n	8000de0 <HAL_DMA_Init+0x38c>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a36      	ldr	r2, [pc, #216]	; (8000e84 <HAL_DMA_Init+0x430>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d018      	beq.n	8000de0 <HAL_DMA_Init+0x38c>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a35      	ldr	r2, [pc, #212]	; (8000e88 <HAL_DMA_Init+0x434>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d013      	beq.n	8000de0 <HAL_DMA_Init+0x38c>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a33      	ldr	r2, [pc, #204]	; (8000e8c <HAL_DMA_Init+0x438>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d00e      	beq.n	8000de0 <HAL_DMA_Init+0x38c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a32      	ldr	r2, [pc, #200]	; (8000e90 <HAL_DMA_Init+0x43c>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d009      	beq.n	8000de0 <HAL_DMA_Init+0x38c>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a30      	ldr	r2, [pc, #192]	; (8000e94 <HAL_DMA_Init+0x440>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d004      	beq.n	8000de0 <HAL_DMA_Init+0x38c>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a2f      	ldr	r2, [pc, #188]	; (8000e98 <HAL_DMA_Init+0x444>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_DMA_Init+0x390>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <HAL_DMA_Init+0x392>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8094 	beq.w	8000f14 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <HAL_DMA_Init+0x428>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d021      	beq.n	8000e3a <HAL_DMA_Init+0x3e6>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <HAL_DMA_Init+0x42c>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d01c      	beq.n	8000e3a <HAL_DMA_Init+0x3e6>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <HAL_DMA_Init+0x430>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d017      	beq.n	8000e3a <HAL_DMA_Init+0x3e6>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <HAL_DMA_Init+0x434>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d012      	beq.n	8000e3a <HAL_DMA_Init+0x3e6>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_DMA_Init+0x438>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_DMA_Init+0x3e6>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <HAL_DMA_Init+0x43c>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d008      	beq.n	8000e3a <HAL_DMA_Init+0x3e6>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <HAL_DMA_Init+0x440>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d003      	beq.n	8000e3a <HAL_DMA_Init+0x3e6>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <HAL_DMA_Init+0x444>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_DMA_Init+0x448>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b40      	cmp	r3, #64	; 0x40
 8000e62:	d01d      	beq.n	8000ea0 <HAL_DMA_Init+0x44c>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2b80      	cmp	r3, #128	; 0x80
 8000e6a:	d102      	bne.n	8000e72 <HAL_DMA_Init+0x41e>
 8000e6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e70:	e017      	b.n	8000ea2 <HAL_DMA_Init+0x44e>
 8000e72:	2300      	movs	r3, #0
 8000e74:	e015      	b.n	8000ea2 <HAL_DMA_Init+0x44e>
 8000e76:	bf00      	nop
 8000e78:	fe10803f 	.word	0xfe10803f
 8000e7c:	58025408 	.word	0x58025408
 8000e80:	5802541c 	.word	0x5802541c
 8000e84:	58025430 	.word	0x58025430
 8000e88:	58025444 	.word	0x58025444
 8000e8c:	58025458 	.word	0x58025458
 8000e90:	5802546c 	.word	0x5802546c
 8000e94:	58025480 	.word	0x58025480
 8000e98:	58025494 	.word	0x58025494
 8000e9c:	fffe000f 	.word	0xfffe000f
 8000ea0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68d2      	ldr	r2, [r2, #12]
 8000ea6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000eb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000eb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000ec0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ed0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b6e      	ldr	r3, [pc, #440]	; (80010a0 <HAL_DMA_Init+0x64c>)
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a6e      	ldr	r2, [pc, #440]	; (80010a4 <HAL_DMA_Init+0x650>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	009a      	lsls	r2, r3, #2
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f001 fa81 	bl	8002400 <DMA_CalcBaseAndBitshift>
 8000efe:	4603      	mov	r3, r0
 8000f00:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	e008      	b.n	8000f26 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2240      	movs	r2, #64	; 0x40
 8000f18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e0b7      	b.n	8001096 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a5f      	ldr	r2, [pc, #380]	; (80010a8 <HAL_DMA_Init+0x654>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d072      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a5d      	ldr	r2, [pc, #372]	; (80010ac <HAL_DMA_Init+0x658>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d06d      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a5c      	ldr	r2, [pc, #368]	; (80010b0 <HAL_DMA_Init+0x65c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d068      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a5a      	ldr	r2, [pc, #360]	; (80010b4 <HAL_DMA_Init+0x660>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d063      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a59      	ldr	r2, [pc, #356]	; (80010b8 <HAL_DMA_Init+0x664>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d05e      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a57      	ldr	r2, [pc, #348]	; (80010bc <HAL_DMA_Init+0x668>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d059      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a56      	ldr	r2, [pc, #344]	; (80010c0 <HAL_DMA_Init+0x66c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d054      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a54      	ldr	r2, [pc, #336]	; (80010c4 <HAL_DMA_Init+0x670>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d04f      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a53      	ldr	r2, [pc, #332]	; (80010c8 <HAL_DMA_Init+0x674>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d04a      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a51      	ldr	r2, [pc, #324]	; (80010cc <HAL_DMA_Init+0x678>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d045      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a50      	ldr	r2, [pc, #320]	; (80010d0 <HAL_DMA_Init+0x67c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d040      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <HAL_DMA_Init+0x680>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d03b      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a4d      	ldr	r2, [pc, #308]	; (80010d8 <HAL_DMA_Init+0x684>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d036      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a4b      	ldr	r2, [pc, #300]	; (80010dc <HAL_DMA_Init+0x688>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d031      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a4a      	ldr	r2, [pc, #296]	; (80010e0 <HAL_DMA_Init+0x68c>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d02c      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_DMA_Init+0x690>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d027      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a47      	ldr	r2, [pc, #284]	; (80010e8 <HAL_DMA_Init+0x694>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d022      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a45      	ldr	r2, [pc, #276]	; (80010ec <HAL_DMA_Init+0x698>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01d      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a44      	ldr	r2, [pc, #272]	; (80010f0 <HAL_DMA_Init+0x69c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d018      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a42      	ldr	r2, [pc, #264]	; (80010f4 <HAL_DMA_Init+0x6a0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a41      	ldr	r2, [pc, #260]	; (80010f8 <HAL_DMA_Init+0x6a4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d00e      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a3f      	ldr	r2, [pc, #252]	; (80010fc <HAL_DMA_Init+0x6a8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d009      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a3e      	ldr	r2, [pc, #248]	; (8001100 <HAL_DMA_Init+0x6ac>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d004      	beq.n	8001016 <HAL_DMA_Init+0x5c2>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a3c      	ldr	r2, [pc, #240]	; (8001104 <HAL_DMA_Init+0x6b0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_DMA_Init+0x5c6>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_DMA_Init+0x5c8>
 800101a:	2300      	movs	r3, #0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d032      	beq.n	8001086 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f001 fb1b 	bl	800265c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b80      	cmp	r3, #128	; 0x80
 800102c:	d102      	bne.n	8001034 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001048:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d010      	beq.n	8001074 <HAL_DMA_Init+0x620>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b08      	cmp	r3, #8
 8001058:	d80c      	bhi.n	8001074 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f001 fb98 	bl	8002790 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	e008      	b.n	8001086 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	a7fdabf8 	.word	0xa7fdabf8
 80010a4:	cccccccd 	.word	0xcccccccd
 80010a8:	40020010 	.word	0x40020010
 80010ac:	40020028 	.word	0x40020028
 80010b0:	40020040 	.word	0x40020040
 80010b4:	40020058 	.word	0x40020058
 80010b8:	40020070 	.word	0x40020070
 80010bc:	40020088 	.word	0x40020088
 80010c0:	400200a0 	.word	0x400200a0
 80010c4:	400200b8 	.word	0x400200b8
 80010c8:	40020410 	.word	0x40020410
 80010cc:	40020428 	.word	0x40020428
 80010d0:	40020440 	.word	0x40020440
 80010d4:	40020458 	.word	0x40020458
 80010d8:	40020470 	.word	0x40020470
 80010dc:	40020488 	.word	0x40020488
 80010e0:	400204a0 	.word	0x400204a0
 80010e4:	400204b8 	.word	0x400204b8
 80010e8:	58025408 	.word	0x58025408
 80010ec:	5802541c 	.word	0x5802541c
 80010f0:	58025430 	.word	0x58025430
 80010f4:	58025444 	.word	0x58025444
 80010f8:	58025458 	.word	0x58025458
 80010fc:	5802546c 	.word	0x5802546c
 8001100:	58025480 	.word	0x58025480
 8001104:	58025494 	.word	0x58025494

08001108 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e205      	b.n	8001526 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d004      	beq.n	8001130 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e1fa      	b.n	8001526 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a8c      	ldr	r2, [pc, #560]	; (8001368 <HAL_DMA_Abort_IT+0x260>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d04a      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a8b      	ldr	r2, [pc, #556]	; (800136c <HAL_DMA_Abort_IT+0x264>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d045      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a89      	ldr	r2, [pc, #548]	; (8001370 <HAL_DMA_Abort_IT+0x268>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d040      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a88      	ldr	r2, [pc, #544]	; (8001374 <HAL_DMA_Abort_IT+0x26c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d03b      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a86      	ldr	r2, [pc, #536]	; (8001378 <HAL_DMA_Abort_IT+0x270>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d036      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a85      	ldr	r2, [pc, #532]	; (800137c <HAL_DMA_Abort_IT+0x274>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d031      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a83      	ldr	r2, [pc, #524]	; (8001380 <HAL_DMA_Abort_IT+0x278>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d02c      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a82      	ldr	r2, [pc, #520]	; (8001384 <HAL_DMA_Abort_IT+0x27c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d027      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a80      	ldr	r2, [pc, #512]	; (8001388 <HAL_DMA_Abort_IT+0x280>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d022      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a7f      	ldr	r2, [pc, #508]	; (800138c <HAL_DMA_Abort_IT+0x284>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d01d      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a7d      	ldr	r2, [pc, #500]	; (8001390 <HAL_DMA_Abort_IT+0x288>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d018      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a7c      	ldr	r2, [pc, #496]	; (8001394 <HAL_DMA_Abort_IT+0x28c>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d013      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <HAL_DMA_Abort_IT+0x290>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00e      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a79      	ldr	r2, [pc, #484]	; (800139c <HAL_DMA_Abort_IT+0x294>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d009      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a77      	ldr	r2, [pc, #476]	; (80013a0 <HAL_DMA_Abort_IT+0x298>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d004      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a76      	ldr	r2, [pc, #472]	; (80013a4 <HAL_DMA_Abort_IT+0x29c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_DMA_Abort_IT+0xcc>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HAL_DMA_Abort_IT+0xce>
 80011d4:	2300      	movs	r3, #0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d065      	beq.n	80012a6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2204      	movs	r2, #4
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a60      	ldr	r2, [pc, #384]	; (8001368 <HAL_DMA_Abort_IT+0x260>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d04a      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a5e      	ldr	r2, [pc, #376]	; (800136c <HAL_DMA_Abort_IT+0x264>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d045      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a5d      	ldr	r2, [pc, #372]	; (8001370 <HAL_DMA_Abort_IT+0x268>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d040      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a5b      	ldr	r2, [pc, #364]	; (8001374 <HAL_DMA_Abort_IT+0x26c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d03b      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <HAL_DMA_Abort_IT+0x270>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d036      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <HAL_DMA_Abort_IT+0x274>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d031      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a57      	ldr	r2, [pc, #348]	; (8001380 <HAL_DMA_Abort_IT+0x278>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d02c      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a55      	ldr	r2, [pc, #340]	; (8001384 <HAL_DMA_Abort_IT+0x27c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d027      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a54      	ldr	r2, [pc, #336]	; (8001388 <HAL_DMA_Abort_IT+0x280>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d022      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_DMA_Abort_IT+0x284>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d01d      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_DMA_Abort_IT+0x288>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d018      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <HAL_DMA_Abort_IT+0x28c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_DMA_Abort_IT+0x290>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d00e      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a4c      	ldr	r2, [pc, #304]	; (800139c <HAL_DMA_Abort_IT+0x294>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d009      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a4b      	ldr	r2, [pc, #300]	; (80013a0 <HAL_DMA_Abort_IT+0x298>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d004      	beq.n	8001282 <HAL_DMA_Abort_IT+0x17a>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <HAL_DMA_Abort_IT+0x29c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d108      	bne.n	8001294 <HAL_DMA_Abort_IT+0x18c>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e147      	b.n	8001524 <HAL_DMA_Abort_IT+0x41c>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e13e      	b.n	8001524 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 020e 	bic.w	r2, r2, #14
 80012b4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <HAL_DMA_Abort_IT+0x260>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d04a      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a29      	ldr	r2, [pc, #164]	; (800136c <HAL_DMA_Abort_IT+0x264>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d045      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a28      	ldr	r2, [pc, #160]	; (8001370 <HAL_DMA_Abort_IT+0x268>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d040      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_DMA_Abort_IT+0x26c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d03b      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <HAL_DMA_Abort_IT+0x270>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d036      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a23      	ldr	r2, [pc, #140]	; (800137c <HAL_DMA_Abort_IT+0x274>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d031      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a22      	ldr	r2, [pc, #136]	; (8001380 <HAL_DMA_Abort_IT+0x278>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d02c      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a20      	ldr	r2, [pc, #128]	; (8001384 <HAL_DMA_Abort_IT+0x27c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d027      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <HAL_DMA_Abort_IT+0x280>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d022      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_DMA_Abort_IT+0x284>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01d      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <HAL_DMA_Abort_IT+0x288>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d018      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <HAL_DMA_Abort_IT+0x28c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_DMA_Abort_IT+0x290>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00e      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_DMA_Abort_IT+0x294>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d009      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <HAL_DMA_Abort_IT+0x298>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d004      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <HAL_DMA_Abort_IT+0x29c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d128      	bne.n	80013a8 <HAL_DMA_Abort_IT+0x2a0>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0201 	bic.w	r2, r2, #1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e027      	b.n	80013b8 <HAL_DMA_Abort_IT+0x2b0>
 8001368:	40020010 	.word	0x40020010
 800136c:	40020028 	.word	0x40020028
 8001370:	40020040 	.word	0x40020040
 8001374:	40020058 	.word	0x40020058
 8001378:	40020070 	.word	0x40020070
 800137c:	40020088 	.word	0x40020088
 8001380:	400200a0 	.word	0x400200a0
 8001384:	400200b8 	.word	0x400200b8
 8001388:	40020410 	.word	0x40020410
 800138c:	40020428 	.word	0x40020428
 8001390:	40020440 	.word	0x40020440
 8001394:	40020458 	.word	0x40020458
 8001398:	40020470 	.word	0x40020470
 800139c:	40020488 	.word	0x40020488
 80013a0:	400204a0 	.word	0x400204a0
 80013a4:	400204b8 	.word	0x400204b8
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a5c      	ldr	r2, [pc, #368]	; (8001530 <HAL_DMA_Abort_IT+0x428>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d072      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a5b      	ldr	r2, [pc, #364]	; (8001534 <HAL_DMA_Abort_IT+0x42c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d06d      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a59      	ldr	r2, [pc, #356]	; (8001538 <HAL_DMA_Abort_IT+0x430>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d068      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_DMA_Abort_IT+0x434>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d063      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a56      	ldr	r2, [pc, #344]	; (8001540 <HAL_DMA_Abort_IT+0x438>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d05e      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a55      	ldr	r2, [pc, #340]	; (8001544 <HAL_DMA_Abort_IT+0x43c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d059      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a53      	ldr	r2, [pc, #332]	; (8001548 <HAL_DMA_Abort_IT+0x440>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d054      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_DMA_Abort_IT+0x444>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d04f      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a50      	ldr	r2, [pc, #320]	; (8001550 <HAL_DMA_Abort_IT+0x448>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d04a      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <HAL_DMA_Abort_IT+0x44c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d045      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a4d      	ldr	r2, [pc, #308]	; (8001558 <HAL_DMA_Abort_IT+0x450>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d040      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a4c      	ldr	r2, [pc, #304]	; (800155c <HAL_DMA_Abort_IT+0x454>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d03b      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_DMA_Abort_IT+0x458>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d036      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a49      	ldr	r2, [pc, #292]	; (8001564 <HAL_DMA_Abort_IT+0x45c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d031      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a47      	ldr	r2, [pc, #284]	; (8001568 <HAL_DMA_Abort_IT+0x460>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d02c      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a46      	ldr	r2, [pc, #280]	; (800156c <HAL_DMA_Abort_IT+0x464>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d027      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a44      	ldr	r2, [pc, #272]	; (8001570 <HAL_DMA_Abort_IT+0x468>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d022      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a43      	ldr	r2, [pc, #268]	; (8001574 <HAL_DMA_Abort_IT+0x46c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d01d      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a41      	ldr	r2, [pc, #260]	; (8001578 <HAL_DMA_Abort_IT+0x470>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d018      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a40      	ldr	r2, [pc, #256]	; (800157c <HAL_DMA_Abort_IT+0x474>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d013      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a3e      	ldr	r2, [pc, #248]	; (8001580 <HAL_DMA_Abort_IT+0x478>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00e      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a3d      	ldr	r2, [pc, #244]	; (8001584 <HAL_DMA_Abort_IT+0x47c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d009      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_DMA_Abort_IT+0x480>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d004      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x3a0>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a3a      	ldr	r2, [pc, #232]	; (800158c <HAL_DMA_Abort_IT+0x484>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_DMA_Abort_IT+0x3a4>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <HAL_DMA_Abort_IT+0x3a6>
 80014ac:	2300      	movs	r3, #0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d028      	beq.n	8001504 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	2201      	movs	r2, #1
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80014e0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00c      	beq.n	8001504 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014f8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001502:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40020010 	.word	0x40020010
 8001534:	40020028 	.word	0x40020028
 8001538:	40020040 	.word	0x40020040
 800153c:	40020058 	.word	0x40020058
 8001540:	40020070 	.word	0x40020070
 8001544:	40020088 	.word	0x40020088
 8001548:	400200a0 	.word	0x400200a0
 800154c:	400200b8 	.word	0x400200b8
 8001550:	40020410 	.word	0x40020410
 8001554:	40020428 	.word	0x40020428
 8001558:	40020440 	.word	0x40020440
 800155c:	40020458 	.word	0x40020458
 8001560:	40020470 	.word	0x40020470
 8001564:	40020488 	.word	0x40020488
 8001568:	400204a0 	.word	0x400204a0
 800156c:	400204b8 	.word	0x400204b8
 8001570:	58025408 	.word	0x58025408
 8001574:	5802541c 	.word	0x5802541c
 8001578:	58025430 	.word	0x58025430
 800157c:	58025444 	.word	0x58025444
 8001580:	58025458 	.word	0x58025458
 8001584:	5802546c 	.word	0x5802546c
 8001588:	58025480 	.word	0x58025480
 800158c:	58025494 	.word	0x58025494

08001590 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800159c:	4b67      	ldr	r3, [pc, #412]	; (800173c <HAL_DMA_IRQHandler+0x1ac>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a67      	ldr	r2, [pc, #412]	; (8001740 <HAL_DMA_IRQHandler+0x1b0>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	0a9b      	lsrs	r3, r3, #10
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a5f      	ldr	r2, [pc, #380]	; (8001744 <HAL_DMA_IRQHandler+0x1b4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d04a      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a5d      	ldr	r2, [pc, #372]	; (8001748 <HAL_DMA_IRQHandler+0x1b8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d045      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a5c      	ldr	r2, [pc, #368]	; (800174c <HAL_DMA_IRQHandler+0x1bc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d040      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a5a      	ldr	r2, [pc, #360]	; (8001750 <HAL_DMA_IRQHandler+0x1c0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d03b      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a59      	ldr	r2, [pc, #356]	; (8001754 <HAL_DMA_IRQHandler+0x1c4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d036      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a57      	ldr	r2, [pc, #348]	; (8001758 <HAL_DMA_IRQHandler+0x1c8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d031      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a56      	ldr	r2, [pc, #344]	; (800175c <HAL_DMA_IRQHandler+0x1cc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d02c      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a54      	ldr	r2, [pc, #336]	; (8001760 <HAL_DMA_IRQHandler+0x1d0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d027      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a53      	ldr	r2, [pc, #332]	; (8001764 <HAL_DMA_IRQHandler+0x1d4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d022      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a51      	ldr	r2, [pc, #324]	; (8001768 <HAL_DMA_IRQHandler+0x1d8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d01d      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a50      	ldr	r2, [pc, #320]	; (800176c <HAL_DMA_IRQHandler+0x1dc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d018      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <HAL_DMA_IRQHandler+0x1e0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_DMA_IRQHandler+0x1e4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d00e      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a4b      	ldr	r2, [pc, #300]	; (8001778 <HAL_DMA_IRQHandler+0x1e8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d009      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a4a      	ldr	r2, [pc, #296]	; (800177c <HAL_DMA_IRQHandler+0x1ec>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d004      	beq.n	8001662 <HAL_DMA_IRQHandler+0xd2>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a48      	ldr	r2, [pc, #288]	; (8001780 <HAL_DMA_IRQHandler+0x1f0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_DMA_IRQHandler+0xd6>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_DMA_IRQHandler+0xd8>
 8001666:	2300      	movs	r3, #0
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 842b 	beq.w	8001ec4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	2208      	movs	r2, #8
 8001678:	409a      	lsls	r2, r3
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80a2 	beq.w	80017c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <HAL_DMA_IRQHandler+0x1b4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d04a      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a2d      	ldr	r2, [pc, #180]	; (8001748 <HAL_DMA_IRQHandler+0x1b8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d045      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a2b      	ldr	r2, [pc, #172]	; (800174c <HAL_DMA_IRQHandler+0x1bc>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d040      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <HAL_DMA_IRQHandler+0x1c0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d03b      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a28      	ldr	r2, [pc, #160]	; (8001754 <HAL_DMA_IRQHandler+0x1c4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d036      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a27      	ldr	r2, [pc, #156]	; (8001758 <HAL_DMA_IRQHandler+0x1c8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d031      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a25      	ldr	r2, [pc, #148]	; (800175c <HAL_DMA_IRQHandler+0x1cc>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d02c      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a24      	ldr	r2, [pc, #144]	; (8001760 <HAL_DMA_IRQHandler+0x1d0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d027      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a22      	ldr	r2, [pc, #136]	; (8001764 <HAL_DMA_IRQHandler+0x1d4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d022      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a21      	ldr	r2, [pc, #132]	; (8001768 <HAL_DMA_IRQHandler+0x1d8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d01d      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_DMA_IRQHandler+0x1dc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d018      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <HAL_DMA_IRQHandler+0x1e0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d013      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <HAL_DMA_IRQHandler+0x1e4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00e      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <HAL_DMA_IRQHandler+0x1e8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d009      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a19      	ldr	r2, [pc, #100]	; (800177c <HAL_DMA_IRQHandler+0x1ec>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d004      	beq.n	8001724 <HAL_DMA_IRQHandler+0x194>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a18      	ldr	r2, [pc, #96]	; (8001780 <HAL_DMA_IRQHandler+0x1f0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d12f      	bne.n	8001784 <HAL_DMA_IRQHandler+0x1f4>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	e02e      	b.n	8001798 <HAL_DMA_IRQHandler+0x208>
 800173a:	bf00      	nop
 800173c:	24000410 	.word	0x24000410
 8001740:	1b4e81b5 	.word	0x1b4e81b5
 8001744:	40020010 	.word	0x40020010
 8001748:	40020028 	.word	0x40020028
 800174c:	40020040 	.word	0x40020040
 8001750:	40020058 	.word	0x40020058
 8001754:	40020070 	.word	0x40020070
 8001758:	40020088 	.word	0x40020088
 800175c:	400200a0 	.word	0x400200a0
 8001760:	400200b8 	.word	0x400200b8
 8001764:	40020410 	.word	0x40020410
 8001768:	40020428 	.word	0x40020428
 800176c:	40020440 	.word	0x40020440
 8001770:	40020458 	.word	0x40020458
 8001774:	40020470 	.word	0x40020470
 8001778:	40020488 	.word	0x40020488
 800177c:	400204a0 	.word	0x400204a0
 8001780:	400204b8 	.word	0x400204b8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf14      	ite	ne
 8001792:	2301      	movne	r3, #1
 8001794:	2300      	moveq	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d015      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0204 	bic.w	r2, r2, #4
 80017aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	2208      	movs	r2, #8
 80017b6:	409a      	lsls	r2, r3
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d06e      	beq.n	80018bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a69      	ldr	r2, [pc, #420]	; (8001988 <HAL_DMA_IRQHandler+0x3f8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d04a      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a67      	ldr	r2, [pc, #412]	; (800198c <HAL_DMA_IRQHandler+0x3fc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d045      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a66      	ldr	r2, [pc, #408]	; (8001990 <HAL_DMA_IRQHandler+0x400>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d040      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a64      	ldr	r2, [pc, #400]	; (8001994 <HAL_DMA_IRQHandler+0x404>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d03b      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a63      	ldr	r2, [pc, #396]	; (8001998 <HAL_DMA_IRQHandler+0x408>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d036      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a61      	ldr	r2, [pc, #388]	; (800199c <HAL_DMA_IRQHandler+0x40c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d031      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a60      	ldr	r2, [pc, #384]	; (80019a0 <HAL_DMA_IRQHandler+0x410>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d02c      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a5e      	ldr	r2, [pc, #376]	; (80019a4 <HAL_DMA_IRQHandler+0x414>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d027      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a5d      	ldr	r2, [pc, #372]	; (80019a8 <HAL_DMA_IRQHandler+0x418>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d022      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a5b      	ldr	r2, [pc, #364]	; (80019ac <HAL_DMA_IRQHandler+0x41c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01d      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a5a      	ldr	r2, [pc, #360]	; (80019b0 <HAL_DMA_IRQHandler+0x420>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d018      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_DMA_IRQHandler+0x424>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a57      	ldr	r2, [pc, #348]	; (80019b8 <HAL_DMA_IRQHandler+0x428>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d00e      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a55      	ldr	r2, [pc, #340]	; (80019bc <HAL_DMA_IRQHandler+0x42c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d009      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a54      	ldr	r2, [pc, #336]	; (80019c0 <HAL_DMA_IRQHandler+0x430>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d004      	beq.n	800187e <HAL_DMA_IRQHandler+0x2ee>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_DMA_IRQHandler+0x434>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10a      	bne.n	8001894 <HAL_DMA_IRQHandler+0x304>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf14      	ite	ne
 800188c:	2301      	movne	r3, #1
 800188e:	2300      	moveq	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	e003      	b.n	800189c <HAL_DMA_IRQHandler+0x30c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2300      	movs	r3, #0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	2201      	movs	r2, #1
 80018aa:	409a      	lsls	r2, r3
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b4:	f043 0202 	orr.w	r2, r3, #2
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	2204      	movs	r2, #4
 80018c6:	409a      	lsls	r2, r3
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 808f 	beq.w	80019f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a2c      	ldr	r2, [pc, #176]	; (8001988 <HAL_DMA_IRQHandler+0x3f8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d04a      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2a      	ldr	r2, [pc, #168]	; (800198c <HAL_DMA_IRQHandler+0x3fc>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d045      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a29      	ldr	r2, [pc, #164]	; (8001990 <HAL_DMA_IRQHandler+0x400>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d040      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a27      	ldr	r2, [pc, #156]	; (8001994 <HAL_DMA_IRQHandler+0x404>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d03b      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a26      	ldr	r2, [pc, #152]	; (8001998 <HAL_DMA_IRQHandler+0x408>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d036      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a24      	ldr	r2, [pc, #144]	; (800199c <HAL_DMA_IRQHandler+0x40c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d031      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_DMA_IRQHandler+0x410>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d02c      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <HAL_DMA_IRQHandler+0x414>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d027      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <HAL_DMA_IRQHandler+0x418>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d022      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <HAL_DMA_IRQHandler+0x41c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01d      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_DMA_IRQHandler+0x420>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d018      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <HAL_DMA_IRQHandler+0x424>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <HAL_DMA_IRQHandler+0x428>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00e      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_DMA_IRQHandler+0x42c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d009      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <HAL_DMA_IRQHandler+0x430>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d004      	beq.n	8001972 <HAL_DMA_IRQHandler+0x3e2>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <HAL_DMA_IRQHandler+0x434>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d12a      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x438>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	e023      	b.n	80019d0 <HAL_DMA_IRQHandler+0x440>
 8001988:	40020010 	.word	0x40020010
 800198c:	40020028 	.word	0x40020028
 8001990:	40020040 	.word	0x40020040
 8001994:	40020058 	.word	0x40020058
 8001998:	40020070 	.word	0x40020070
 800199c:	40020088 	.word	0x40020088
 80019a0:	400200a0 	.word	0x400200a0
 80019a4:	400200b8 	.word	0x400200b8
 80019a8:	40020410 	.word	0x40020410
 80019ac:	40020428 	.word	0x40020428
 80019b0:	40020440 	.word	0x40020440
 80019b4:	40020458 	.word	0x40020458
 80019b8:	40020470 	.word	0x40020470
 80019bc:	40020488 	.word	0x40020488
 80019c0:	400204a0 	.word	0x400204a0
 80019c4:	400204b8 	.word	0x400204b8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2300      	movs	r3, #0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00d      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	2204      	movs	r2, #4
 80019de:	409a      	lsls	r2, r3
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	f043 0204 	orr.w	r2, r3, #4
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	2210      	movs	r2, #16
 80019fa:	409a      	lsls	r2, r3
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a6 	beq.w	8001b52 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a85      	ldr	r2, [pc, #532]	; (8001c20 <HAL_DMA_IRQHandler+0x690>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d04a      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a83      	ldr	r2, [pc, #524]	; (8001c24 <HAL_DMA_IRQHandler+0x694>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d045      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a82      	ldr	r2, [pc, #520]	; (8001c28 <HAL_DMA_IRQHandler+0x698>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d040      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a80      	ldr	r2, [pc, #512]	; (8001c2c <HAL_DMA_IRQHandler+0x69c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d03b      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7f      	ldr	r2, [pc, #508]	; (8001c30 <HAL_DMA_IRQHandler+0x6a0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d036      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a7d      	ldr	r2, [pc, #500]	; (8001c34 <HAL_DMA_IRQHandler+0x6a4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d031      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7c      	ldr	r2, [pc, #496]	; (8001c38 <HAL_DMA_IRQHandler+0x6a8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d02c      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a7a      	ldr	r2, [pc, #488]	; (8001c3c <HAL_DMA_IRQHandler+0x6ac>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d027      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a79      	ldr	r2, [pc, #484]	; (8001c40 <HAL_DMA_IRQHandler+0x6b0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d022      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a77      	ldr	r2, [pc, #476]	; (8001c44 <HAL_DMA_IRQHandler+0x6b4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01d      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a76      	ldr	r2, [pc, #472]	; (8001c48 <HAL_DMA_IRQHandler+0x6b8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d018      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a74      	ldr	r2, [pc, #464]	; (8001c4c <HAL_DMA_IRQHandler+0x6bc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a73      	ldr	r2, [pc, #460]	; (8001c50 <HAL_DMA_IRQHandler+0x6c0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00e      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a71      	ldr	r2, [pc, #452]	; (8001c54 <HAL_DMA_IRQHandler+0x6c4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d009      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a70      	ldr	r2, [pc, #448]	; (8001c58 <HAL_DMA_IRQHandler+0x6c8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d004      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x516>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <HAL_DMA_IRQHandler+0x6cc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10a      	bne.n	8001abc <HAL_DMA_IRQHandler+0x52c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	e009      	b.n	8001ad0 <HAL_DMA_IRQHandler+0x540>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03e      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	2210      	movs	r2, #16
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d018      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d108      	bne.n	8001b12 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d024      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
 8001b10:	e01f      	b.n	8001b52 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01b      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
 8001b22:	e016      	b.n	8001b52 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d107      	bne.n	8001b42 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0208 	bic.w	r2, r2, #8
 8001b40:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8110 	beq.w	8001d88 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2c      	ldr	r2, [pc, #176]	; (8001c20 <HAL_DMA_IRQHandler+0x690>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d04a      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a2b      	ldr	r2, [pc, #172]	; (8001c24 <HAL_DMA_IRQHandler+0x694>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d045      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a29      	ldr	r2, [pc, #164]	; (8001c28 <HAL_DMA_IRQHandler+0x698>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d040      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a28      	ldr	r2, [pc, #160]	; (8001c2c <HAL_DMA_IRQHandler+0x69c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d03b      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a26      	ldr	r2, [pc, #152]	; (8001c30 <HAL_DMA_IRQHandler+0x6a0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d036      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <HAL_DMA_IRQHandler+0x6a4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d031      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a23      	ldr	r2, [pc, #140]	; (8001c38 <HAL_DMA_IRQHandler+0x6a8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d02c      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_DMA_IRQHandler+0x6ac>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d027      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <HAL_DMA_IRQHandler+0x6b0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d022      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_DMA_IRQHandler+0x6b4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d01d      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_DMA_IRQHandler+0x6b8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d018      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_DMA_IRQHandler+0x6bc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d013      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <HAL_DMA_IRQHandler+0x6c0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00e      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <HAL_DMA_IRQHandler+0x6c4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_DMA_IRQHandler+0x6c8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x678>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <HAL_DMA_IRQHandler+0x6cc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d12b      	bne.n	8001c60 <HAL_DMA_IRQHandler+0x6d0>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf14      	ite	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	e02a      	b.n	8001c74 <HAL_DMA_IRQHandler+0x6e4>
 8001c1e:	bf00      	nop
 8001c20:	40020010 	.word	0x40020010
 8001c24:	40020028 	.word	0x40020028
 8001c28:	40020040 	.word	0x40020040
 8001c2c:	40020058 	.word	0x40020058
 8001c30:	40020070 	.word	0x40020070
 8001c34:	40020088 	.word	0x40020088
 8001c38:	400200a0 	.word	0x400200a0
 8001c3c:	400200b8 	.word	0x400200b8
 8001c40:	40020410 	.word	0x40020410
 8001c44:	40020428 	.word	0x40020428
 8001c48:	40020440 	.word	0x40020440
 8001c4c:	40020458 	.word	0x40020458
 8001c50:	40020470 	.word	0x40020470
 8001c54:	40020488 	.word	0x40020488
 8001c58:	400204a0 	.word	0x400204a0
 8001c5c:	400204b8 	.word	0x400204b8
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bf14      	ite	ne
 8001c6e:	2301      	movne	r3, #1
 8001c70:	2300      	moveq	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8087 	beq.w	8001d88 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	2220      	movs	r2, #32
 8001c84:	409a      	lsls	r2, r3
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d139      	bne.n	8001d0a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0216 	bic.w	r2, r2, #22
 8001ca4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <HAL_DMA_IRQHandler+0x736>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0208 	bic.w	r2, r2, #8
 8001cd4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	223f      	movs	r2, #63	; 0x3f
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 834a 	beq.w	8002394 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
          }
          return;
 8001d08:	e344      	b.n	8002394 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d018      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d108      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d02c      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
 8001d36:	e027      	b.n	8001d88 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d023      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
 8001d48:	e01e      	b.n	8001d88 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10f      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0210 	bic.w	r2, r2, #16
 8001d66:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8306 	beq.w	800239e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8088 	beq.w	8001eb0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2204      	movs	r2, #4
 8001da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a7a      	ldr	r2, [pc, #488]	; (8001f98 <HAL_DMA_IRQHandler+0xa08>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d04a      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <HAL_DMA_IRQHandler+0xa0c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d045      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a77      	ldr	r2, [pc, #476]	; (8001fa0 <HAL_DMA_IRQHandler+0xa10>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d040      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a76      	ldr	r2, [pc, #472]	; (8001fa4 <HAL_DMA_IRQHandler+0xa14>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d03b      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a74      	ldr	r2, [pc, #464]	; (8001fa8 <HAL_DMA_IRQHandler+0xa18>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d036      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a73      	ldr	r2, [pc, #460]	; (8001fac <HAL_DMA_IRQHandler+0xa1c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d031      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a71      	ldr	r2, [pc, #452]	; (8001fb0 <HAL_DMA_IRQHandler+0xa20>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d02c      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a70      	ldr	r2, [pc, #448]	; (8001fb4 <HAL_DMA_IRQHandler+0xa24>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d027      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6e      	ldr	r2, [pc, #440]	; (8001fb8 <HAL_DMA_IRQHandler+0xa28>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d022      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6d      	ldr	r2, [pc, #436]	; (8001fbc <HAL_DMA_IRQHandler+0xa2c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d01d      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6b      	ldr	r2, [pc, #428]	; (8001fc0 <HAL_DMA_IRQHandler+0xa30>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d018      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6a      	ldr	r2, [pc, #424]	; (8001fc4 <HAL_DMA_IRQHandler+0xa34>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a68      	ldr	r2, [pc, #416]	; (8001fc8 <HAL_DMA_IRQHandler+0xa38>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00e      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a67      	ldr	r2, [pc, #412]	; (8001fcc <HAL_DMA_IRQHandler+0xa3c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_DMA_IRQHandler+0xa40>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x8b8>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a64      	ldr	r2, [pc, #400]	; (8001fd4 <HAL_DMA_IRQHandler+0xa44>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d108      	bne.n	8001e5a <HAL_DMA_IRQHandler+0x8ca>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e007      	b.n	8001e6a <HAL_DMA_IRQHandler+0x8da>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d307      	bcc.n	8001e86 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f2      	bne.n	8001e6a <HAL_DMA_IRQHandler+0x8da>
 8001e84:	e000      	b.n	8001e88 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001e86:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2203      	movs	r2, #3
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001e9e:	e003      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8272 	beq.w	800239e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
 8001ec2:	e26c      	b.n	800239e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a43      	ldr	r2, [pc, #268]	; (8001fd8 <HAL_DMA_IRQHandler+0xa48>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d022      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x984>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a42      	ldr	r2, [pc, #264]	; (8001fdc <HAL_DMA_IRQHandler+0xa4c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d01d      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x984>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a40      	ldr	r2, [pc, #256]	; (8001fe0 <HAL_DMA_IRQHandler+0xa50>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d018      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x984>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a3f      	ldr	r2, [pc, #252]	; (8001fe4 <HAL_DMA_IRQHandler+0xa54>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x984>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a3d      	ldr	r2, [pc, #244]	; (8001fe8 <HAL_DMA_IRQHandler+0xa58>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00e      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x984>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a3c      	ldr	r2, [pc, #240]	; (8001fec <HAL_DMA_IRQHandler+0xa5c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x984>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a3a      	ldr	r2, [pc, #232]	; (8001ff0 <HAL_DMA_IRQHandler+0xa60>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x984>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <HAL_DMA_IRQHandler+0xa64>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x988>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_DMA_IRQHandler+0x98a>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 823f 	beq.w	800239e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	2204      	movs	r2, #4
 8001f32:	409a      	lsls	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80cd 	beq.w	80020d8 <HAL_DMA_IRQHandler+0xb48>
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80c7 	beq.w	80020d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2204      	movs	r2, #4
 8001f54:	409a      	lsls	r2, r3
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d049      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8210 	beq.w	8002398 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f80:	e20a      	b.n	8002398 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8206 	beq.w	8002398 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f94:	e200      	b.n	8002398 <HAL_DMA_IRQHandler+0xe08>
 8001f96:	bf00      	nop
 8001f98:	40020010 	.word	0x40020010
 8001f9c:	40020028 	.word	0x40020028
 8001fa0:	40020040 	.word	0x40020040
 8001fa4:	40020058 	.word	0x40020058
 8001fa8:	40020070 	.word	0x40020070
 8001fac:	40020088 	.word	0x40020088
 8001fb0:	400200a0 	.word	0x400200a0
 8001fb4:	400200b8 	.word	0x400200b8
 8001fb8:	40020410 	.word	0x40020410
 8001fbc:	40020428 	.word	0x40020428
 8001fc0:	40020440 	.word	0x40020440
 8001fc4:	40020458 	.word	0x40020458
 8001fc8:	40020470 	.word	0x40020470
 8001fcc:	40020488 	.word	0x40020488
 8001fd0:	400204a0 	.word	0x400204a0
 8001fd4:	400204b8 	.word	0x400204b8
 8001fd8:	58025408 	.word	0x58025408
 8001fdc:	5802541c 	.word	0x5802541c
 8001fe0:	58025430 	.word	0x58025430
 8001fe4:	58025444 	.word	0x58025444
 8001fe8:	58025458 	.word	0x58025458
 8001fec:	5802546c 	.word	0x5802546c
 8001ff0:	58025480 	.word	0x58025480
 8001ff4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d160      	bne.n	80020c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a8c      	ldr	r2, [pc, #560]	; (8002238 <HAL_DMA_IRQHandler+0xca8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d04a      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a8a      	ldr	r2, [pc, #552]	; (800223c <HAL_DMA_IRQHandler+0xcac>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d045      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a89      	ldr	r2, [pc, #548]	; (8002240 <HAL_DMA_IRQHandler+0xcb0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d040      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a87      	ldr	r2, [pc, #540]	; (8002244 <HAL_DMA_IRQHandler+0xcb4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d03b      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a86      	ldr	r2, [pc, #536]	; (8002248 <HAL_DMA_IRQHandler+0xcb8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d036      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a84      	ldr	r2, [pc, #528]	; (800224c <HAL_DMA_IRQHandler+0xcbc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d031      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a83      	ldr	r2, [pc, #524]	; (8002250 <HAL_DMA_IRQHandler+0xcc0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d02c      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a81      	ldr	r2, [pc, #516]	; (8002254 <HAL_DMA_IRQHandler+0xcc4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d027      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a80      	ldr	r2, [pc, #512]	; (8002258 <HAL_DMA_IRQHandler+0xcc8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d022      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a7e      	ldr	r2, [pc, #504]	; (800225c <HAL_DMA_IRQHandler+0xccc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01d      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7d      	ldr	r2, [pc, #500]	; (8002260 <HAL_DMA_IRQHandler+0xcd0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d018      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a7b      	ldr	r2, [pc, #492]	; (8002264 <HAL_DMA_IRQHandler+0xcd4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a7a      	ldr	r2, [pc, #488]	; (8002268 <HAL_DMA_IRQHandler+0xcd8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00e      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a78      	ldr	r2, [pc, #480]	; (800226c <HAL_DMA_IRQHandler+0xcdc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a77      	ldr	r2, [pc, #476]	; (8002270 <HAL_DMA_IRQHandler+0xce0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xb12>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a75      	ldr	r2, [pc, #468]	; (8002274 <HAL_DMA_IRQHandler+0xce4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d108      	bne.n	80020b4 <HAL_DMA_IRQHandler+0xb24>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0208 	bic.w	r2, r2, #8
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e007      	b.n	80020c4 <HAL_DMA_IRQHandler+0xb34>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8165 	beq.w	8002398 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80020d6:	e15f      	b.n	8002398 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	2202      	movs	r2, #2
 80020e2:	409a      	lsls	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80c5 	beq.w	8002278 <HAL_DMA_IRQHandler+0xce8>
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80bf 	beq.w	8002278 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2202      	movs	r2, #2
 8002104:	409a      	lsls	r2, r3
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d018      	beq.n	8002146 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 813a 	beq.w	800239c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002130:	e134      	b.n	800239c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8130 	beq.w	800239c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002144:	e12a      	b.n	800239c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b00      	cmp	r3, #0
 800214e:	d168      	bne.n	8002222 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a38      	ldr	r2, [pc, #224]	; (8002238 <HAL_DMA_IRQHandler+0xca8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d04a      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a37      	ldr	r2, [pc, #220]	; (800223c <HAL_DMA_IRQHandler+0xcac>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d045      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a35      	ldr	r2, [pc, #212]	; (8002240 <HAL_DMA_IRQHandler+0xcb0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d040      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a34      	ldr	r2, [pc, #208]	; (8002244 <HAL_DMA_IRQHandler+0xcb4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d03b      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a32      	ldr	r2, [pc, #200]	; (8002248 <HAL_DMA_IRQHandler+0xcb8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d036      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a31      	ldr	r2, [pc, #196]	; (800224c <HAL_DMA_IRQHandler+0xcbc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d031      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <HAL_DMA_IRQHandler+0xcc0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02c      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2e      	ldr	r2, [pc, #184]	; (8002254 <HAL_DMA_IRQHandler+0xcc4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d027      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2c      	ldr	r2, [pc, #176]	; (8002258 <HAL_DMA_IRQHandler+0xcc8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d022      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2b      	ldr	r2, [pc, #172]	; (800225c <HAL_DMA_IRQHandler+0xccc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01d      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <HAL_DMA_IRQHandler+0xcd0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d018      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a28      	ldr	r2, [pc, #160]	; (8002264 <HAL_DMA_IRQHandler+0xcd4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a26      	ldr	r2, [pc, #152]	; (8002268 <HAL_DMA_IRQHandler+0xcd8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00e      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <HAL_DMA_IRQHandler+0xcdc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a23      	ldr	r2, [pc, #140]	; (8002270 <HAL_DMA_IRQHandler+0xce0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc60>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a22      	ldr	r2, [pc, #136]	; (8002274 <HAL_DMA_IRQHandler+0xce4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d108      	bne.n	8002202 <HAL_DMA_IRQHandler+0xc72>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0214 	bic.w	r2, r2, #20
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e007      	b.n	8002212 <HAL_DMA_IRQHandler+0xc82>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 020a 	bic.w	r2, r2, #10
 8002210:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80b8 	beq.w	800239c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002234:	e0b2      	b.n	800239c <HAL_DMA_IRQHandler+0xe0c>
 8002236:	bf00      	nop
 8002238:	40020010 	.word	0x40020010
 800223c:	40020028 	.word	0x40020028
 8002240:	40020040 	.word	0x40020040
 8002244:	40020058 	.word	0x40020058
 8002248:	40020070 	.word	0x40020070
 800224c:	40020088 	.word	0x40020088
 8002250:	400200a0 	.word	0x400200a0
 8002254:	400200b8 	.word	0x400200b8
 8002258:	40020410 	.word	0x40020410
 800225c:	40020428 	.word	0x40020428
 8002260:	40020440 	.word	0x40020440
 8002264:	40020458 	.word	0x40020458
 8002268:	40020470 	.word	0x40020470
 800226c:	40020488 	.word	0x40020488
 8002270:	400204a0 	.word	0x400204a0
 8002274:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	2208      	movs	r2, #8
 8002282:	409a      	lsls	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8088 	beq.w	800239e <HAL_DMA_IRQHandler+0xe0e>
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8082 	beq.w	800239e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a41      	ldr	r2, [pc, #260]	; (80023a4 <HAL_DMA_IRQHandler+0xe14>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d04a      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3f      	ldr	r2, [pc, #252]	; (80023a8 <HAL_DMA_IRQHandler+0xe18>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d045      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a3e      	ldr	r2, [pc, #248]	; (80023ac <HAL_DMA_IRQHandler+0xe1c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d040      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3c      	ldr	r2, [pc, #240]	; (80023b0 <HAL_DMA_IRQHandler+0xe20>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d03b      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a3b      	ldr	r2, [pc, #236]	; (80023b4 <HAL_DMA_IRQHandler+0xe24>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d036      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_DMA_IRQHandler+0xe28>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d031      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a38      	ldr	r2, [pc, #224]	; (80023bc <HAL_DMA_IRQHandler+0xe2c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d02c      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a36      	ldr	r2, [pc, #216]	; (80023c0 <HAL_DMA_IRQHandler+0xe30>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d027      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a35      	ldr	r2, [pc, #212]	; (80023c4 <HAL_DMA_IRQHandler+0xe34>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d022      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <HAL_DMA_IRQHandler+0xe38>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01d      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a32      	ldr	r2, [pc, #200]	; (80023cc <HAL_DMA_IRQHandler+0xe3c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d018      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a30      	ldr	r2, [pc, #192]	; (80023d0 <HAL_DMA_IRQHandler+0xe40>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2f      	ldr	r2, [pc, #188]	; (80023d4 <HAL_DMA_IRQHandler+0xe44>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00e      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_DMA_IRQHandler+0xe48>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d009      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a2c      	ldr	r2, [pc, #176]	; (80023dc <HAL_DMA_IRQHandler+0xe4c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d004      	beq.n	800233a <HAL_DMA_IRQHandler+0xdaa>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2a      	ldr	r2, [pc, #168]	; (80023e0 <HAL_DMA_IRQHandler+0xe50>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d108      	bne.n	800234c <HAL_DMA_IRQHandler+0xdbc>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 021c 	bic.w	r2, r2, #28
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e007      	b.n	800235c <HAL_DMA_IRQHandler+0xdcc>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 020e 	bic.w	r2, r2, #14
 800235a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2201      	movs	r2, #1
 8002366:	409a      	lsls	r2, r3
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
 8002392:	e004      	b.n	800239e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002394:	bf00      	nop
 8002396:	e002      	b.n	800239e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002398:	bf00      	nop
 800239a:	e000      	b.n	800239e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800239c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800239e:	3728      	adds	r7, #40	; 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40020010 	.word	0x40020010
 80023a8:	40020028 	.word	0x40020028
 80023ac:	40020040 	.word	0x40020040
 80023b0:	40020058 	.word	0x40020058
 80023b4:	40020070 	.word	0x40020070
 80023b8:	40020088 	.word	0x40020088
 80023bc:	400200a0 	.word	0x400200a0
 80023c0:	400200b8 	.word	0x400200b8
 80023c4:	40020410 	.word	0x40020410
 80023c8:	40020428 	.word	0x40020428
 80023cc:	40020440 	.word	0x40020440
 80023d0:	40020458 	.word	0x40020458
 80023d4:	40020470 	.word	0x40020470
 80023d8:	40020488 	.word	0x40020488
 80023dc:	400204a0 	.word	0x400204a0
 80023e0:	400204b8 	.word	0x400204b8

080023e4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f2:	b2db      	uxtb	r3, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a42      	ldr	r2, [pc, #264]	; (8002518 <DMA_CalcBaseAndBitshift+0x118>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d04a      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a41      	ldr	r2, [pc, #260]	; (800251c <DMA_CalcBaseAndBitshift+0x11c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d045      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3f      	ldr	r2, [pc, #252]	; (8002520 <DMA_CalcBaseAndBitshift+0x120>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d040      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a3e      	ldr	r2, [pc, #248]	; (8002524 <DMA_CalcBaseAndBitshift+0x124>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d03b      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a3c      	ldr	r2, [pc, #240]	; (8002528 <DMA_CalcBaseAndBitshift+0x128>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d036      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a3b      	ldr	r2, [pc, #236]	; (800252c <DMA_CalcBaseAndBitshift+0x12c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d031      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a39      	ldr	r2, [pc, #228]	; (8002530 <DMA_CalcBaseAndBitshift+0x130>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02c      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a38      	ldr	r2, [pc, #224]	; (8002534 <DMA_CalcBaseAndBitshift+0x134>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d027      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a36      	ldr	r2, [pc, #216]	; (8002538 <DMA_CalcBaseAndBitshift+0x138>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d022      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a35      	ldr	r2, [pc, #212]	; (800253c <DMA_CalcBaseAndBitshift+0x13c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d01d      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a33      	ldr	r2, [pc, #204]	; (8002540 <DMA_CalcBaseAndBitshift+0x140>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d018      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a32      	ldr	r2, [pc, #200]	; (8002544 <DMA_CalcBaseAndBitshift+0x144>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d013      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a30      	ldr	r2, [pc, #192]	; (8002548 <DMA_CalcBaseAndBitshift+0x148>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00e      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a2f      	ldr	r2, [pc, #188]	; (800254c <DMA_CalcBaseAndBitshift+0x14c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d009      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a2d      	ldr	r2, [pc, #180]	; (8002550 <DMA_CalcBaseAndBitshift+0x150>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <DMA_CalcBaseAndBitshift+0xa8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <DMA_CalcBaseAndBitshift+0x154>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d101      	bne.n	80024ac <DMA_CalcBaseAndBitshift+0xac>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <DMA_CalcBaseAndBitshift+0xae>
 80024ac:	2300      	movs	r3, #0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d024      	beq.n	80024fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3b10      	subs	r3, #16
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <DMA_CalcBaseAndBitshift+0x158>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	4a24      	ldr	r2, [pc, #144]	; (800255c <DMA_CalcBaseAndBitshift+0x15c>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	461a      	mov	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d908      	bls.n	80024ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <DMA_CalcBaseAndBitshift+0x160>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	1d1a      	adds	r2, r3, #4
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	659a      	str	r2, [r3, #88]	; 0x58
 80024ea:	e00d      	b.n	8002508 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <DMA_CalcBaseAndBitshift+0x160>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6593      	str	r3, [r2, #88]	; 0x58
 80024fa:	e005      	b.n	8002508 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40020010 	.word	0x40020010
 800251c:	40020028 	.word	0x40020028
 8002520:	40020040 	.word	0x40020040
 8002524:	40020058 	.word	0x40020058
 8002528:	40020070 	.word	0x40020070
 800252c:	40020088 	.word	0x40020088
 8002530:	400200a0 	.word	0x400200a0
 8002534:	400200b8 	.word	0x400200b8
 8002538:	40020410 	.word	0x40020410
 800253c:	40020428 	.word	0x40020428
 8002540:	40020440 	.word	0x40020440
 8002544:	40020458 	.word	0x40020458
 8002548:	40020470 	.word	0x40020470
 800254c:	40020488 	.word	0x40020488
 8002550:	400204a0 	.word	0x400204a0
 8002554:	400204b8 	.word	0x400204b8
 8002558:	aaaaaaab 	.word	0xaaaaaaab
 800255c:	0800a710 	.word	0x0800a710
 8002560:	fffffc00 	.word	0xfffffc00

08002564 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d120      	bne.n	80025ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	2b03      	cmp	r3, #3
 800257e:	d858      	bhi.n	8002632 <DMA_CheckFifoParam+0xce>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <DMA_CheckFifoParam+0x24>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	08002599 	.word	0x08002599
 800258c:	080025ab 	.word	0x080025ab
 8002590:	08002599 	.word	0x08002599
 8002594:	08002633 	.word	0x08002633
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d048      	beq.n	8002636 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80025a8:	e045      	b.n	8002636 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025b2:	d142      	bne.n	800263a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80025b8:	e03f      	b.n	800263a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c2:	d123      	bne.n	800260c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d838      	bhi.n	800263e <DMA_CheckFifoParam+0xda>
 80025cc:	a201      	add	r2, pc, #4	; (adr r2, 80025d4 <DMA_CheckFifoParam+0x70>)
 80025ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d2:	bf00      	nop
 80025d4:	080025e5 	.word	0x080025e5
 80025d8:	080025eb 	.word	0x080025eb
 80025dc:	080025e5 	.word	0x080025e5
 80025e0:	080025fd 	.word	0x080025fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
        break;
 80025e8:	e030      	b.n	800264c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d025      	beq.n	8002642 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80025fa:	e022      	b.n	8002642 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002604:	d11f      	bne.n	8002646 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800260a:	e01c      	b.n	8002646 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	2b02      	cmp	r3, #2
 8002612:	d902      	bls.n	800261a <DMA_CheckFifoParam+0xb6>
 8002614:	2b03      	cmp	r3, #3
 8002616:	d003      	beq.n	8002620 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002618:	e018      	b.n	800264c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
        break;
 800261e:	e015      	b.n	800264c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00e      	beq.n	800264a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
    break;
 8002630:	e00b      	b.n	800264a <DMA_CheckFifoParam+0xe6>
        break;
 8002632:	bf00      	nop
 8002634:	e00a      	b.n	800264c <DMA_CheckFifoParam+0xe8>
        break;
 8002636:	bf00      	nop
 8002638:	e008      	b.n	800264c <DMA_CheckFifoParam+0xe8>
        break;
 800263a:	bf00      	nop
 800263c:	e006      	b.n	800264c <DMA_CheckFifoParam+0xe8>
        break;
 800263e:	bf00      	nop
 8002640:	e004      	b.n	800264c <DMA_CheckFifoParam+0xe8>
        break;
 8002642:	bf00      	nop
 8002644:	e002      	b.n	800264c <DMA_CheckFifoParam+0xe8>
        break;
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <DMA_CheckFifoParam+0xe8>
    break;
 800264a:	bf00      	nop
    }
  }

  return status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop

0800265c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a38      	ldr	r2, [pc, #224]	; (8002750 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d022      	beq.n	80026ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a36      	ldr	r2, [pc, #216]	; (8002754 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01d      	beq.n	80026ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a35      	ldr	r2, [pc, #212]	; (8002758 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d018      	beq.n	80026ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a33      	ldr	r2, [pc, #204]	; (800275c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a32      	ldr	r2, [pc, #200]	; (8002760 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00e      	beq.n	80026ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a30      	ldr	r2, [pc, #192]	; (8002764 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d009      	beq.n	80026ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d004      	beq.n	80026ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a2d      	ldr	r2, [pc, #180]	; (800276c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01a      	beq.n	80026fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	3b08      	subs	r3, #8
 80026cc:	4a28      	ldr	r2, [pc, #160]	; (8002770 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a24      	ldr	r2, [pc, #144]	; (8002778 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80026e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	2201      	movs	r2, #1
 80026f2:	409a      	lsls	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80026f8:	e024      	b.n	8002744 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3b10      	subs	r3, #16
 8002702:	4a1e      	ldr	r2, [pc, #120]	; (800277c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d806      	bhi.n	8002722 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d902      	bls.n	8002722 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3308      	adds	r3, #8
 8002720:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4b18      	ldr	r3, [pc, #96]	; (8002788 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	461a      	mov	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a16      	ldr	r2, [pc, #88]	; (800278c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002734:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2201      	movs	r2, #1
 800273e:	409a      	lsls	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	58025408 	.word	0x58025408
 8002754:	5802541c 	.word	0x5802541c
 8002758:	58025430 	.word	0x58025430
 800275c:	58025444 	.word	0x58025444
 8002760:	58025458 	.word	0x58025458
 8002764:	5802546c 	.word	0x5802546c
 8002768:	58025480 	.word	0x58025480
 800276c:	58025494 	.word	0x58025494
 8002770:	cccccccd 	.word	0xcccccccd
 8002774:	16009600 	.word	0x16009600
 8002778:	58025880 	.word	0x58025880
 800277c:	aaaaaaab 	.word	0xaaaaaaab
 8002780:	400204b8 	.word	0x400204b8
 8002784:	4002040f 	.word	0x4002040f
 8002788:	10008200 	.word	0x10008200
 800278c:	40020880 	.word	0x40020880

08002790 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d04a      	beq.n	800283c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d847      	bhi.n	800283c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a25      	ldr	r2, [pc, #148]	; (8002848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d022      	beq.n	80027fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a24      	ldr	r2, [pc, #144]	; (800284c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d01d      	beq.n	80027fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a22      	ldr	r2, [pc, #136]	; (8002850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d018      	beq.n	80027fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a21      	ldr	r2, [pc, #132]	; (8002854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d013      	beq.n	80027fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00e      	beq.n	80027fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1e      	ldr	r2, [pc, #120]	; (800285c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d009      	beq.n	80027fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4b17      	ldr	r3, [pc, #92]	; (8002868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	461a      	mov	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a15      	ldr	r2, [pc, #84]	; (800286c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002818:	671a      	str	r2, [r3, #112]	; 0x70
 800281a:	e009      	b.n	8002830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	461a      	mov	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800282e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3b01      	subs	r3, #1
 8002834:	2201      	movs	r2, #1
 8002836:	409a      	lsls	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	58025408 	.word	0x58025408
 800284c:	5802541c 	.word	0x5802541c
 8002850:	58025430 	.word	0x58025430
 8002854:	58025444 	.word	0x58025444
 8002858:	58025458 	.word	0x58025458
 800285c:	5802546c 	.word	0x5802546c
 8002860:	58025480 	.word	0x58025480
 8002864:	58025494 	.word	0x58025494
 8002868:	1600963f 	.word	0x1600963f
 800286c:	58025940 	.word	0x58025940
 8002870:	1000823f 	.word	0x1000823f
 8002874:	40020940 	.word	0x40020940

08002878 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	7a1b      	ldrb	r3, [r3, #8]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d155      	bne.n	800293e <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d049      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a49      	ldr	r2, [pc, #292]	; (80029c8 <HAL_DMAEx_ConfigMuxSync+0x150>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d044      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a48      	ldr	r2, [pc, #288]	; (80029cc <HAL_DMAEx_ConfigMuxSync+0x154>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d03f      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a46      	ldr	r2, [pc, #280]	; (80029d0 <HAL_DMAEx_ConfigMuxSync+0x158>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d03a      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a45      	ldr	r2, [pc, #276]	; (80029d4 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d035      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a43      	ldr	r2, [pc, #268]	; (80029d8 <HAL_DMAEx_ConfigMuxSync+0x160>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d030      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a42      	ldr	r2, [pc, #264]	; (80029dc <HAL_DMAEx_ConfigMuxSync+0x164>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d02b      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a40      	ldr	r2, [pc, #256]	; (80029e0 <HAL_DMAEx_ConfigMuxSync+0x168>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d026      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a3f      	ldr	r2, [pc, #252]	; (80029e4 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d021      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a3d      	ldr	r2, [pc, #244]	; (80029e8 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01c      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a3c      	ldr	r2, [pc, #240]	; (80029ec <HAL_DMAEx_ConfigMuxSync+0x174>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d017      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a3a      	ldr	r2, [pc, #232]	; (80029f0 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d012      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a39      	ldr	r2, [pc, #228]	; (80029f4 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00d      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a37      	ldr	r2, [pc, #220]	; (80029f8 <HAL_DMAEx_ConfigMuxSync+0x180>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d008      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a36      	ldr	r2, [pc, #216]	; (80029fc <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a34      	ldr	r2, [pc, #208]	; (8002a00 <HAL_DMAEx_ConfigMuxSync+0x188>)
 800292e:	4293      	cmp	r3, r2
 8002930:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d131      	bne.n	80029ae <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002954:	2302      	movs	r3, #2
 8002956:	e02f      	b.n	80029b8 <HAL_DMAEx_ConfigMuxSync+0x140>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296a:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 800296e:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b2d9      	uxtb	r1, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	061a      	lsls	r2, r3, #24
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	3b01      	subs	r3, #1
 8002982:	04db      	lsls	r3, r3, #19
 8002984:	431a      	orrs	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	431a      	orrs	r2, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	7a1b      	ldrb	r3, [r3, #8]
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	431a      	orrs	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	7a5b      	ldrb	r3, [r3, #9]
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e004      	b.n	80029b8 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40020010 	.word	0x40020010
 80029c8:	40020028 	.word	0x40020028
 80029cc:	40020040 	.word	0x40020040
 80029d0:	40020058 	.word	0x40020058
 80029d4:	40020070 	.word	0x40020070
 80029d8:	40020088 	.word	0x40020088
 80029dc:	400200a0 	.word	0x400200a0
 80029e0:	400200b8 	.word	0x400200b8
 80029e4:	40020410 	.word	0x40020410
 80029e8:	40020428 	.word	0x40020428
 80029ec:	40020440 	.word	0x40020440
 80029f0:	40020458 	.word	0x40020458
 80029f4:	40020470 	.word	0x40020470
 80029f8:	40020488 	.word	0x40020488
 80029fc:	400204a0 	.word	0x400204a0
 8002a00:	400204b8 	.word	0x400204b8

08002a04 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01a      	beq.n	8002a52 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d022      	beq.n	8002aa0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01a      	beq.n	8002aa0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
      }
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ab6:	4b86      	ldr	r3, [pc, #536]	; (8002cd0 <HAL_GPIO_Init+0x228>)
 8002ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002aba:	e18c      	b.n	8002dd6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 817e 	beq.w	8002dd0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d005      	beq.n	8002aec <HAL_GPIO_Init+0x44>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d130      	bne.n	8002b4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2203      	movs	r2, #3
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b22:	2201      	movs	r2, #1
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	f003 0201 	and.w	r2, r3, #1
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d017      	beq.n	8002b8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	2203      	movs	r2, #3
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d123      	bne.n	8002bde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	08da      	lsrs	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3208      	adds	r2, #8
 8002b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	08da      	lsrs	r2, r3, #3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3208      	adds	r2, #8
 8002bd8:	69b9      	ldr	r1, [r7, #24]
 8002bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0203 	and.w	r2, r3, #3
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80d8 	beq.w	8002dd0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c20:	4b2c      	ldr	r3, [pc, #176]	; (8002cd4 <HAL_GPIO_Init+0x22c>)
 8002c22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c26:	4a2b      	ldr	r2, [pc, #172]	; (8002cd4 <HAL_GPIO_Init+0x22c>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c30:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <HAL_GPIO_Init+0x22c>)
 8002c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3e:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <HAL_GPIO_Init+0x230>)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	089b      	lsrs	r3, r3, #2
 8002c44:	3302      	adds	r3, #2
 8002c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	220f      	movs	r2, #15
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <HAL_GPIO_Init+0x234>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d04a      	beq.n	8002d00 <HAL_GPIO_Init+0x258>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_GPIO_Init+0x238>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d02b      	beq.n	8002cca <HAL_GPIO_Init+0x222>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_GPIO_Init+0x23c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d025      	beq.n	8002cc6 <HAL_GPIO_Init+0x21e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <HAL_GPIO_Init+0x240>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01f      	beq.n	8002cc2 <HAL_GPIO_Init+0x21a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a19      	ldr	r2, [pc, #100]	; (8002cec <HAL_GPIO_Init+0x244>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d019      	beq.n	8002cbe <HAL_GPIO_Init+0x216>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_GPIO_Init+0x248>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_GPIO_Init+0x212>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <HAL_GPIO_Init+0x24c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00d      	beq.n	8002cb6 <HAL_GPIO_Init+0x20e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <HAL_GPIO_Init+0x250>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <HAL_GPIO_Init+0x20a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <HAL_GPIO_Init+0x254>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_GPIO_Init+0x206>
 8002caa:	2309      	movs	r3, #9
 8002cac:	e029      	b.n	8002d02 <HAL_GPIO_Init+0x25a>
 8002cae:	230a      	movs	r3, #10
 8002cb0:	e027      	b.n	8002d02 <HAL_GPIO_Init+0x25a>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e025      	b.n	8002d02 <HAL_GPIO_Init+0x25a>
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	e023      	b.n	8002d02 <HAL_GPIO_Init+0x25a>
 8002cba:	2305      	movs	r3, #5
 8002cbc:	e021      	b.n	8002d02 <HAL_GPIO_Init+0x25a>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	e01f      	b.n	8002d02 <HAL_GPIO_Init+0x25a>
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e01d      	b.n	8002d02 <HAL_GPIO_Init+0x25a>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e01b      	b.n	8002d02 <HAL_GPIO_Init+0x25a>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e019      	b.n	8002d02 <HAL_GPIO_Init+0x25a>
 8002cce:	bf00      	nop
 8002cd0:	58000080 	.word	0x58000080
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	58000400 	.word	0x58000400
 8002cdc:	58020000 	.word	0x58020000
 8002ce0:	58020400 	.word	0x58020400
 8002ce4:	58020800 	.word	0x58020800
 8002ce8:	58020c00 	.word	0x58020c00
 8002cec:	58021000 	.word	0x58021000
 8002cf0:	58021400 	.word	0x58021400
 8002cf4:	58021800 	.word	0x58021800
 8002cf8:	58021c00 	.word	0x58021c00
 8002cfc:	58022400 	.word	0x58022400
 8002d00:	2300      	movs	r3, #0
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	f002 0203 	and.w	r2, r2, #3
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d12:	4938      	ldr	r1, [pc, #224]	; (8002df4 <HAL_GPIO_Init+0x34c>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f ae6b 	bne.w	8002abc <HAL_GPIO_Init+0x14>
  }
}
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
 8002dea:	3724      	adds	r7, #36	; 0x24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	58000400 	.word	0x58000400

08002df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
 8002e04:	4613      	mov	r3, r2
 8002e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e08:	787b      	ldrb	r3, [r7, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e14:	e003      	b.n	8002e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	041a      	lsls	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	619a      	str	r2, [r3, #24]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	4603      	mov	r3, r0
 8002e32:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f804 	bl	8002e5e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e07f      	b.n	8002f86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f005 f86c 	bl	8007f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d107      	bne.n	8002eee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e006      	b.n	8002efc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002efa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d104      	bne.n	8002f0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_I2C_Init+0x11c>)
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69d9      	ldr	r1, [r3, #28]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	02008000 	.word	0x02008000

08002f94 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d010      	beq.n	8002fda <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	09db      	lsrs	r3, r3, #7
 8002fbc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	f043 0201 	orr.w	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	0a9b      	lsrs	r3, r3, #10
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	09db      	lsrs	r3, r3, #7
 8002fea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f043 0208 	orr.w	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003006:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	0a5b      	lsrs	r3, r3, #9
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	09db      	lsrs	r3, r3, #7
 8003018:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	f043 0202 	orr.w	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003034:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 030b 	and.w	r3, r3, #11
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fc77 	bl	800393c <I2C_ITError>
  }
}
 800304e:	bf00      	nop
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	70fb      	strb	r3, [r7, #3]
 800308a:	4613      	mov	r3, r2
 800308c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <I2C_Slave_ISR_IT+0x24>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0ec      	b.n	80032d4 <I2C_Slave_ISR_IT+0x1fe>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800311a:	6939      	ldr	r1, [r7, #16]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f9bf 	bl	80034a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d04d      	beq.n	80031ca <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003136:	2b00      	cmp	r3, #0
 8003138:	d047      	beq.n	80031ca <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d128      	bne.n	8003196 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b28      	cmp	r3, #40	; 0x28
 800314e:	d108      	bne.n	8003162 <I2C_Slave_ISR_IT+0x8c>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003156:	d104      	bne.n	8003162 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003158:	6939      	ldr	r1, [r7, #16]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fb98 	bl	8003890 <I2C_ITListenCplt>
 8003160:	e032      	b.n	80031c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b29      	cmp	r3, #41	; 0x29
 800316c:	d10e      	bne.n	800318c <I2C_Slave_ISR_IT+0xb6>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003174:	d00a      	beq.n	800318c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2210      	movs	r2, #16
 800317c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fcd3 	bl	8003b2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f92d 	bl	80033e4 <I2C_ITSlaveSeqCplt>
 800318a:	e01d      	b.n	80031c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2210      	movs	r2, #16
 8003192:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003194:	e096      	b.n	80032c4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2210      	movs	r2, #16
 800319c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0204 	orr.w	r2, r3, #4
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d004      	beq.n	80031ba <I2C_Slave_ISR_IT+0xe4>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b6:	f040 8085 	bne.w	80032c4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	4619      	mov	r1, r3
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fbbb 	bl	800393c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80031c6:	e07d      	b.n	80032c4 <I2C_Slave_ISR_IT+0x1ee>
 80031c8:	e07c      	b.n	80032c4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d030      	beq.n	8003238 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	089b      	lsrs	r3, r3, #2
 80031da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02a      	beq.n	8003238 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d018      	beq.n	800321e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d14f      	bne.n	80032c8 <I2C_Slave_ISR_IT+0x1f2>
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800322e:	d04b      	beq.n	80032c8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f8d7 	bl	80033e4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003236:	e047      	b.n	80032c8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	08db      	lsrs	r3, r3, #3
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	08db      	lsrs	r3, r3, #3
 8003248:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f842 	bl	80032dc <I2C_ITAddrCplt>
 8003258:	e037      	b.n	80032ca <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d031      	beq.n	80032ca <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02b      	beq.n	80032ca <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d018      	beq.n	80032ae <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	781a      	ldrb	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80032ac:	e00d      	b.n	80032ca <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b4:	d002      	beq.n	80032bc <I2C_Slave_ISR_IT+0x1e6>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f891 	bl	80033e4 <I2C_ITSlaveSeqCplt>
 80032c2:	e002      	b.n	80032ca <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80032c4:	bf00      	nop
 80032c6:	e000      	b.n	80032ca <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80032c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032f2:	2b28      	cmp	r3, #40	; 0x28
 80032f4:	d16a      	bne.n	80033cc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	b29b      	uxth	r3, r3
 8003310:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003314:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	b29b      	uxth	r3, r3
 800331e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003322:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003330:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d138      	bne.n	80033ac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800333a:	897b      	ldrh	r3, [r7, #10]
 800333c:	09db      	lsrs	r3, r3, #7
 800333e:	b29a      	uxth	r2, r3
 8003340:	89bb      	ldrh	r3, [r7, #12]
 8003342:	4053      	eors	r3, r2
 8003344:	b29b      	uxth	r3, r3
 8003346:	f003 0306 	and.w	r3, r3, #6
 800334a:	2b00      	cmp	r3, #0
 800334c:	d11c      	bne.n	8003388 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003360:	2b02      	cmp	r3, #2
 8003362:	d13b      	bne.n	80033dc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2208      	movs	r2, #8
 8003370:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800337a:	89ba      	ldrh	r2, [r7, #12]
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	4619      	mov	r1, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fe7c 	bl	800307e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003386:	e029      	b.n	80033dc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003388:	893b      	ldrh	r3, [r7, #8]
 800338a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800338c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fc0c 	bl	8003bae <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800339e:	89ba      	ldrh	r2, [r7, #12]
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	4619      	mov	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff fe6a 	bl	800307e <HAL_I2C_AddrCallback>
}
 80033aa:	e017      	b.n	80033dc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80033ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fbfc 	bl	8003bae <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033be:	89ba      	ldrh	r2, [r7, #12]
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fe5a 	bl	800307e <HAL_I2C_AddrCallback>
}
 80033ca:	e007      	b.n	80033dc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2208      	movs	r2, #8
 80033d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	0b9b      	lsrs	r3, r3, #14
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e00d      	b.n	8003436 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	0bdb      	lsrs	r3, r3, #15
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003434:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b29      	cmp	r3, #41	; 0x29
 8003440:	d112      	bne.n	8003468 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2228      	movs	r2, #40	; 0x28
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2221      	movs	r2, #33	; 0x21
 800344e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003450:	2101      	movs	r1, #1
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fbab 	bl	8003bae <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fdf8 	bl	8003056 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003466:	e017      	b.n	8003498 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b2a      	cmp	r3, #42	; 0x2a
 8003472:	d111      	bne.n	8003498 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2228      	movs	r2, #40	; 0x28
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2222      	movs	r2, #34	; 0x22
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003482:	2102      	movs	r1, #2
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fb92 	bl	8003bae <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff fde9 	bl	800306a <HAL_I2C_SlaveRxCpltCallback>
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034bc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2220      	movs	r2, #32
 80034c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b21      	cmp	r3, #33	; 0x21
 80034ca:	d002      	beq.n	80034d2 <I2C_ITSlaveCplt+0x32>
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b29      	cmp	r3, #41	; 0x29
 80034d0:	d108      	bne.n	80034e4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80034d2:	f248 0101 	movw	r1, #32769	; 0x8001
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fb69 	bl	8003bae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2221      	movs	r2, #33	; 0x21
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
 80034e2:	e00d      	b.n	8003500 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b22      	cmp	r3, #34	; 0x22
 80034e8:	d002      	beq.n	80034f0 <I2C_ITSlaveCplt+0x50>
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b2a      	cmp	r3, #42	; 0x2a
 80034ee:	d107      	bne.n	8003500 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80034f0:	f248 0102 	movw	r1, #32770	; 0x8002
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fb5a 	bl	8003bae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2222      	movs	r2, #34	; 0x22
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800350e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b80      	ldr	r3, [pc, #512]	; (800371c <I2C_ITSlaveCplt+0x27c>)
 800351c:	400b      	ands	r3, r1
 800351e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fb02 	bl	8003b2a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	0b9b      	lsrs	r3, r3, #14
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d07a      	beq.n	8003628 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003540:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8111 	beq.w	800376e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a73      	ldr	r2, [pc, #460]	; (8003720 <I2C_ITSlaveCplt+0x280>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d059      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a71      	ldr	r2, [pc, #452]	; (8003724 <I2C_ITSlaveCplt+0x284>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d053      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6f      	ldr	r2, [pc, #444]	; (8003728 <I2C_ITSlaveCplt+0x288>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d04d      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6d      	ldr	r2, [pc, #436]	; (800372c <I2C_ITSlaveCplt+0x28c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d047      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6b      	ldr	r2, [pc, #428]	; (8003730 <I2C_ITSlaveCplt+0x290>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d041      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a69      	ldr	r2, [pc, #420]	; (8003734 <I2C_ITSlaveCplt+0x294>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d03b      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a67      	ldr	r2, [pc, #412]	; (8003738 <I2C_ITSlaveCplt+0x298>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d035      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a65      	ldr	r2, [pc, #404]	; (800373c <I2C_ITSlaveCplt+0x29c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d02f      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a63      	ldr	r2, [pc, #396]	; (8003740 <I2C_ITSlaveCplt+0x2a0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d029      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a61      	ldr	r2, [pc, #388]	; (8003744 <I2C_ITSlaveCplt+0x2a4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d023      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5f      	ldr	r2, [pc, #380]	; (8003748 <I2C_ITSlaveCplt+0x2a8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d01d      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a5d      	ldr	r2, [pc, #372]	; (800374c <I2C_ITSlaveCplt+0x2ac>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d017      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5b      	ldr	r2, [pc, #364]	; (8003750 <I2C_ITSlaveCplt+0x2b0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d011      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a59      	ldr	r2, [pc, #356]	; (8003754 <I2C_ITSlaveCplt+0x2b4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00b      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a57      	ldr	r2, [pc, #348]	; (8003758 <I2C_ITSlaveCplt+0x2b8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d005      	beq.n	800360c <I2C_ITSlaveCplt+0x16c>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a55      	ldr	r2, [pc, #340]	; (800375c <I2C_ITSlaveCplt+0x2bc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d105      	bne.n	8003618 <I2C_ITSlaveCplt+0x178>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	b29b      	uxth	r3, r3
 8003616:	e004      	b.n	8003622 <I2C_ITSlaveCplt+0x182>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	b29b      	uxth	r3, r3
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	8553      	strh	r3, [r2, #42]	; 0x2a
 8003626:	e0a2      	b.n	800376e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	0bdb      	lsrs	r3, r3, #15
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 809c 	beq.w	800376e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003644:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 808f 	beq.w	800376e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a32      	ldr	r2, [pc, #200]	; (8003720 <I2C_ITSlaveCplt+0x280>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d059      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a30      	ldr	r2, [pc, #192]	; (8003724 <I2C_ITSlaveCplt+0x284>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d053      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2e      	ldr	r2, [pc, #184]	; (8003728 <I2C_ITSlaveCplt+0x288>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04d      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2c      	ldr	r2, [pc, #176]	; (800372c <I2C_ITSlaveCplt+0x28c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d047      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <I2C_ITSlaveCplt+0x290>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d041      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a28      	ldr	r2, [pc, #160]	; (8003734 <I2C_ITSlaveCplt+0x294>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d03b      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a26      	ldr	r2, [pc, #152]	; (8003738 <I2C_ITSlaveCplt+0x298>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d035      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a24      	ldr	r2, [pc, #144]	; (800373c <I2C_ITSlaveCplt+0x29c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02f      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a22      	ldr	r2, [pc, #136]	; (8003740 <I2C_ITSlaveCplt+0x2a0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d029      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a20      	ldr	r2, [pc, #128]	; (8003744 <I2C_ITSlaveCplt+0x2a4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d023      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <I2C_ITSlaveCplt+0x2a8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d01d      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1c      	ldr	r2, [pc, #112]	; (800374c <I2C_ITSlaveCplt+0x2ac>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d017      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <I2C_ITSlaveCplt+0x2b0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d011      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a18      	ldr	r2, [pc, #96]	; (8003754 <I2C_ITSlaveCplt+0x2b4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00b      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a16      	ldr	r2, [pc, #88]	; (8003758 <I2C_ITSlaveCplt+0x2b8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d005      	beq.n	8003710 <I2C_ITSlaveCplt+0x270>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a14      	ldr	r2, [pc, #80]	; (800375c <I2C_ITSlaveCplt+0x2bc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d127      	bne.n	8003760 <I2C_ITSlaveCplt+0x2c0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	b29b      	uxth	r3, r3
 800371a:	e026      	b.n	800376a <I2C_ITSlaveCplt+0x2ca>
 800371c:	fe00e800 	.word	0xfe00e800
 8003720:	40020010 	.word	0x40020010
 8003724:	40020028 	.word	0x40020028
 8003728:	40020040 	.word	0x40020040
 800372c:	40020058 	.word	0x40020058
 8003730:	40020070 	.word	0x40020070
 8003734:	40020088 	.word	0x40020088
 8003738:	400200a0 	.word	0x400200a0
 800373c:	400200b8 	.word	0x400200b8
 8003740:	40020410 	.word	0x40020410
 8003744:	40020428 	.word	0x40020428
 8003748:	40020440 	.word	0x40020440
 800374c:	40020458 	.word	0x40020458
 8003750:	40020470 	.word	0x40020470
 8003754:	40020488 	.word	0x40020488
 8003758:	400204a0 	.word	0x400204a0
 800375c:	400204b8 	.word	0x400204b8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	b29b      	uxth	r3, r3
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d020      	beq.n	80037bc <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00c      	beq.n	80037bc <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d010      	beq.n	800380a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f8a4 	bl	800393c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b28      	cmp	r3, #40	; 0x28
 80037fe:	d141      	bne.n	8003884 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003800:	6979      	ldr	r1, [r7, #20]
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f844 	bl	8003890 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003808:	e03c      	b.n	8003884 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003812:	d014      	beq.n	800383e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fde5 	bl	80033e4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <I2C_ITSlaveCplt+0x3ec>)
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff fc2f 	bl	800309a <HAL_I2C_ListenCpltCallback>
}
 800383c:	e022      	b.n	8003884 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b22      	cmp	r3, #34	; 0x22
 8003848:	d10e      	bne.n	8003868 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fc02 	bl	800306a <HAL_I2C_SlaveRxCpltCallback>
}
 8003866:	e00d      	b.n	8003884 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fbe9 	bl	8003056 <HAL_I2C_SlaveTxCpltCallback>
}
 8003884:	bf00      	nop
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	ffff0000 	.word	0xffff0000

08003890 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a26      	ldr	r2, [pc, #152]	; (8003938 <I2C_ITListenCplt+0xa8>)
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d022      	beq.n	800390e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f043 0204 	orr.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800390e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f94b 	bl	8003bae <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2210      	movs	r2, #16
 800391e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fbb6 	bl	800309a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	ffff0000 	.word	0xffff0000

0800393c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a5d      	ldr	r2, [pc, #372]	; (8003ad0 <I2C_ITError+0x194>)
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b28      	cmp	r3, #40	; 0x28
 8003972:	d005      	beq.n	8003980 <I2C_ITError+0x44>
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b29      	cmp	r3, #41	; 0x29
 8003978:	d002      	beq.n	8003980 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b2a      	cmp	r3, #42	; 0x2a
 800397e:	d10b      	bne.n	8003998 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003980:	2103      	movs	r1, #3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f913 	bl	8003bae <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2228      	movs	r2, #40	; 0x28
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a50      	ldr	r2, [pc, #320]	; (8003ad4 <I2C_ITError+0x198>)
 8003994:	635a      	str	r2, [r3, #52]	; 0x34
 8003996:	e011      	b.n	80039bc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003998:	f248 0103 	movw	r1, #32771	; 0x8003
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f906 	bl	8003bae <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b60      	cmp	r3, #96	; 0x60
 80039ac:	d003      	beq.n	80039b6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d039      	beq.n	8003a3e <I2C_ITError+0x102>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b11      	cmp	r3, #17
 80039ce:	d002      	beq.n	80039d6 <I2C_ITError+0x9a>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b21      	cmp	r3, #33	; 0x21
 80039d4:	d133      	bne.n	8003a3e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e4:	d107      	bne.n	80039f6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fcf2 	bl	80023e4 <HAL_DMA_GetState>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d017      	beq.n	8003a36 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	4a33      	ldr	r2, [pc, #204]	; (8003ad8 <I2C_ITError+0x19c>)
 8003a0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd fb74 	bl	8001108 <HAL_DMA_Abort_IT>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04d      	beq.n	8003ac2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a30:	4610      	mov	r0, r2
 8003a32:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a34:	e045      	b.n	8003ac2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f850 	bl	8003adc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a3c:	e041      	b.n	8003ac2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d039      	beq.n	8003aba <I2C_ITError+0x17e>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b12      	cmp	r3, #18
 8003a4a:	d002      	beq.n	8003a52 <I2C_ITError+0x116>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b22      	cmp	r3, #34	; 0x22
 8003a50:	d133      	bne.n	8003aba <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a60:	d107      	bne.n	8003a72 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a70:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fcb4 	bl	80023e4 <HAL_DMA_GetState>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d017      	beq.n	8003ab2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a86:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <I2C_ITError+0x19c>)
 8003a88:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd fb36 	bl	8001108 <HAL_DMA_Abort_IT>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d011      	beq.n	8003ac6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aac:	4610      	mov	r0, r2
 8003aae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ab0:	e009      	b.n	8003ac6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f812 	bl	8003adc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ab8:	e005      	b.n	8003ac6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f80e 	bl	8003adc <I2C_TreatErrorCallback>
  }
}
 8003ac0:	e002      	b.n	8003ac8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ac6:	bf00      	nop
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	ffff0000 	.word	0xffff0000
 8003ad4:	080030d7 	.word	0x080030d7
 8003ad8:	08003b73 	.word	0x08003b73

08003adc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b60      	cmp	r3, #96	; 0x60
 8003aee:	d10e      	bne.n	8003b0e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff fadb 	bl	80030c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b0c:	e009      	b.n	8003b22 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fac6 	bl	80030ae <HAL_I2C_ErrorCallback>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d103      	bne.n	8003b48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2200      	movs	r2, #0
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d007      	beq.n	8003b66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	619a      	str	r2, [r3, #24]
  }
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f7ff ff9b 	bl	8003adc <I2C_TreatErrorCallback>
}
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00f      	beq.n	8003be8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003bce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bdc:	2b28      	cmp	r3, #40	; 0x28
 8003bde:	d003      	beq.n	8003be8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003be6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00f      	beq.n	8003c12 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003bf8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c06:	2b28      	cmp	r3, #40	; 0x28
 8003c08:	d003      	beq.n	8003c12 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003c10:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da03      	bge.n	8003c22 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c22:	887b      	ldrh	r3, [r7, #2]
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d103      	bne.n	8003c30 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d103      	bne.n	8003c3e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f043 0320 	orr.w	r3, r3, #32
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d103      	bne.n	8003c4c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6819      	ldr	r1, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	43da      	mvns	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d138      	bne.n	8003cf2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e032      	b.n	8003cf4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2224      	movs	r2, #36	; 0x24
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e000      	b.n	8003cf4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
  }
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d139      	bne.n	8003d8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e033      	b.n	8003d8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2224      	movs	r2, #36	; 0x24
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003da0:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <HAL_PWREx_ConfigSupply+0xb0>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d00a      	beq.n	8003dc2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003dac:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d001      	beq.n	8003dbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e03f      	b.n	8003e3e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e03d      	b.n	8003e3e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003dc2:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003dca:	491f      	ldr	r1, [pc, #124]	; (8003e48 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003dd2:	f7fc fbbd 	bl	8000550 <HAL_GetTick>
 8003dd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dd8:	e009      	b.n	8003dee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003dda:	f7fc fbb9 	bl	8000550 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de8:	d901      	bls.n	8003dee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e027      	b.n	8003e3e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <HAL_PWREx_ConfigSupply+0xb0>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfa:	d1ee      	bne.n	8003dda <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b1e      	cmp	r3, #30
 8003e00:	d008      	beq.n	8003e14 <HAL_PWREx_ConfigSupply+0x7c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b2e      	cmp	r3, #46	; 0x2e
 8003e06:	d005      	beq.n	8003e14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b1d      	cmp	r3, #29
 8003e0c:	d002      	beq.n	8003e14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b2d      	cmp	r3, #45	; 0x2d
 8003e12:	d113      	bne.n	8003e3c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003e14:	f7fc fb9c 	bl	8000550 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e1a:	e009      	b.n	8003e30 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e1c:	f7fc fb98 	bl	8000550 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e2a:	d901      	bls.n	8003e30 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e006      	b.n	8003e3e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0311 	and.w	r3, r3, #17
 8003e38:	2b11      	cmp	r3, #17
 8003e3a:	d1ef      	bne.n	8003e1c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	58024800 	.word	0x58024800

08003e4c <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e02d      	b.n	8003eba <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0220 	bic.w	r2, r2, #32
 8003e72:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e86:	f023 030f 	bic.w	r3, r3, #15
 8003e8a:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 021c 	bic.w	r2, r2, #28
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0207 	bic.w	r2, r2, #7
 8003eaa:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08c      	sub	sp, #48	; 0x30
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e397      	b.n	800460a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8087 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee8:	4b9e      	ldr	r3, [pc, #632]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ef2:	4b9c      	ldr	r3, [pc, #624]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d007      	beq.n	8003f0e <HAL_RCC_OscConfig+0x46>
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	2b18      	cmp	r3, #24
 8003f02:	d110      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5e>
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0e:	4b95      	ldr	r3, [pc, #596]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d06c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x12c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d168      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e371      	b.n	800460a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCC_OscConfig+0x76>
 8003f30:	4b8c      	ldr	r3, [pc, #560]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a8b      	ldr	r2, [pc, #556]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e02e      	b.n	8003f9c <HAL_RCC_OscConfig+0xd4>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x98>
 8003f46:	4b87      	ldr	r3, [pc, #540]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a86      	ldr	r2, [pc, #536]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b84      	ldr	r3, [pc, #528]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a83      	ldr	r2, [pc, #524]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e01d      	b.n	8003f9c <HAL_RCC_OscConfig+0xd4>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0xbc>
 8003f6a:	4b7e      	ldr	r3, [pc, #504]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a7d      	ldr	r2, [pc, #500]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b7b      	ldr	r3, [pc, #492]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a7a      	ldr	r2, [pc, #488]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e00b      	b.n	8003f9c <HAL_RCC_OscConfig+0xd4>
 8003f84:	4b77      	ldr	r3, [pc, #476]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a76      	ldr	r2, [pc, #472]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4b74      	ldr	r3, [pc, #464]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a73      	ldr	r2, [pc, #460]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d013      	beq.n	8003fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fc fad4 	bl	8000550 <HAL_GetTick>
 8003fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fc fad0 	bl	8000550 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e325      	b.n	800460a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fbe:	4b69      	ldr	r3, [pc, #420]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0xe4>
 8003fca:	e014      	b.n	8003ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fc fac0 	bl	8000550 <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fc fabc 	bl	8000550 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e311      	b.n	800460a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x10c>
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 808a 	beq.w	8004118 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004004:	4b57      	ldr	r3, [pc, #348]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800400c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800400e:	4b55      	ldr	r3, [pc, #340]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_RCC_OscConfig+0x162>
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	2b18      	cmp	r3, #24
 800401e:	d137      	bne.n	8004090 <HAL_RCC_OscConfig+0x1c8>
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d132      	bne.n	8004090 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800402a:	4b4e      	ldr	r3, [pc, #312]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_RCC_OscConfig+0x17a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e2e3      	b.n	800460a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004042:	4b48      	ldr	r3, [pc, #288]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 0219 	bic.w	r2, r3, #25
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4945      	ldr	r1, [pc, #276]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004054:	f7fc fa7c 	bl	8000550 <HAL_GetTick>
 8004058:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800405c:	f7fc fa78 	bl	8000550 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e2cd      	b.n	800460a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800406e:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407a:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	061b      	lsls	r3, r3, #24
 8004088:	4936      	ldr	r1, [pc, #216]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800408e:	e043      	b.n	8004118 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d026      	beq.n	80040e6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004098:	4b32      	ldr	r3, [pc, #200]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 0219 	bic.w	r2, r3, #25
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	492f      	ldr	r1, [pc, #188]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fc fa51 	bl	8000550 <HAL_GetTick>
 80040ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b2:	f7fc fa4d 	bl	8000550 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e2a2      	b.n	800460a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040c4:	4b27      	ldr	r3, [pc, #156]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d0:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	4921      	ldr	r1, [pc, #132]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
 80040e4:	e018      	b.n	8004118 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e6:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fc fa2d 	bl	8000550 <HAL_GetTick>
 80040f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fc fa29 	bl	8000550 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e27e      	b.n	800460a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800410c:	4b15      	ldr	r3, [pc, #84]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d06d      	beq.n	8004200 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800412c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b08      	cmp	r3, #8
 8004138:	d007      	beq.n	800414a <HAL_RCC_OscConfig+0x282>
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b18      	cmp	r3, #24
 800413e:	d11e      	bne.n	800417e <HAL_RCC_OscConfig+0x2b6>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d119      	bne.n	800417e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_RCC_OscConfig+0x2a0>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	2b80      	cmp	r3, #128	; 0x80
 800415c:	d004      	beq.n	8004168 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e253      	b.n	800460a <HAL_RCC_OscConfig+0x742>
 8004162:	bf00      	nop
 8004164:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004168:	4ba3      	ldr	r3, [pc, #652]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	49a0      	ldr	r1, [pc, #640]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004178:	4313      	orrs	r3, r2
 800417a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800417c:	e040      	b.n	8004200 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d023      	beq.n	80041ce <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004186:	4b9c      	ldr	r3, [pc, #624]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a9b      	ldr	r2, [pc, #620]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 800418c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004192:	f7fc f9dd 	bl	8000550 <HAL_GetTick>
 8004196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800419a:	f7fc f9d9 	bl	8000550 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e22e      	b.n	800460a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ac:	4b92      	ldr	r3, [pc, #584]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041b8:	4b8f      	ldr	r3, [pc, #572]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	498c      	ldr	r1, [pc, #560]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60cb      	str	r3, [r1, #12]
 80041cc:	e018      	b.n	8004200 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041ce:	4b8a      	ldr	r3, [pc, #552]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a89      	ldr	r2, [pc, #548]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80041d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041da:	f7fc f9b9 	bl	8000550 <HAL_GetTick>
 80041de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041e2:	f7fc f9b5 	bl	8000550 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e20a      	b.n	800460a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041f4:	4b80      	ldr	r3, [pc, #512]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d036      	beq.n	800427a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d019      	beq.n	8004248 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004214:	4b78      	ldr	r3, [pc, #480]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004218:	4a77      	ldr	r2, [pc, #476]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fc f996 	bl	8000550 <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004228:	f7fc f992 	bl	8000550 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e1e7      	b.n	800460a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800423a:	4b6f      	ldr	r3, [pc, #444]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 800423c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x360>
 8004246:	e018      	b.n	800427a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004248:	4b6b      	ldr	r3, [pc, #428]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 800424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424c:	4a6a      	ldr	r2, [pc, #424]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fc f97c 	bl	8000550 <HAL_GetTick>
 8004258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425c:	f7fc f978 	bl	8000550 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e1cd      	b.n	800460a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800426e:	4b62      	ldr	r3, [pc, #392]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d036      	beq.n	80042f4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800428e:	4b5a      	ldr	r3, [pc, #360]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a59      	ldr	r2, [pc, #356]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004298:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800429a:	f7fc f959 	bl	8000550 <HAL_GetTick>
 800429e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042a2:	f7fc f955 	bl	8000550 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e1aa      	b.n	800460a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042b4:	4b50      	ldr	r3, [pc, #320]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x3da>
 80042c0:	e018      	b.n	80042f4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042c2:	4b4d      	ldr	r3, [pc, #308]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a4c      	ldr	r2, [pc, #304]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80042c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042ce:	f7fc f93f 	bl	8000550 <HAL_GetTick>
 80042d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042d6:	f7fc f93b 	bl	8000550 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e190      	b.n	800460a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042e8:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f0      	bne.n	80042d6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8085 	beq.w	800440c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004302:	4b3e      	ldr	r3, [pc, #248]	; (80043fc <HAL_RCC_OscConfig+0x534>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a3d      	ldr	r2, [pc, #244]	; (80043fc <HAL_RCC_OscConfig+0x534>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800430e:	f7fc f91f 	bl	8000550 <HAL_GetTick>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004316:	f7fc f91b 	bl	8000550 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b64      	cmp	r3, #100	; 0x64
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e170      	b.n	800460a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004328:	4b34      	ldr	r3, [pc, #208]	; (80043fc <HAL_RCC_OscConfig+0x534>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d106      	bne.n	800434a <HAL_RCC_OscConfig+0x482>
 800433c:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	6713      	str	r3, [r2, #112]	; 0x70
 8004348:	e02d      	b.n	80043a6 <HAL_RCC_OscConfig+0x4de>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0x4a4>
 8004352:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	4a28      	ldr	r2, [pc, #160]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	6713      	str	r3, [r2, #112]	; 0x70
 800435e:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	e01c      	b.n	80043a6 <HAL_RCC_OscConfig+0x4de>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b05      	cmp	r3, #5
 8004372:	d10c      	bne.n	800438e <HAL_RCC_OscConfig+0x4c6>
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 800437a:	f043 0304 	orr.w	r3, r3, #4
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e00b      	b.n	80043a6 <HAL_RCC_OscConfig+0x4de>
 800438e:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a19      	ldr	r2, [pc, #100]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6713      	str	r3, [r2, #112]	; 0x70
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a16      	ldr	r2, [pc, #88]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fc f8cf 	bl	8000550 <HAL_GetTick>
 80043b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fc f8cb 	bl	8000550 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e11e      	b.n	800460a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <HAL_RCC_OscConfig+0x530>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ee      	beq.n	80043b6 <HAL_RCC_OscConfig+0x4ee>
 80043d8:	e018      	b.n	800440c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fc f8b9 	bl	8000550 <HAL_GetTick>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043e0:	e00e      	b.n	8004400 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fc f8b5 	bl	8000550 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d905      	bls.n	8004400 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e108      	b.n	800460a <HAL_RCC_OscConfig+0x742>
 80043f8:	58024400 	.word	0x58024400
 80043fc:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004400:	4b84      	ldr	r3, [pc, #528]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ea      	bne.n	80043e2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80f9 	beq.w	8004608 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004416:	4b7f      	ldr	r3, [pc, #508]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800441e:	2b18      	cmp	r3, #24
 8004420:	f000 80b4 	beq.w	800458c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	2b02      	cmp	r3, #2
 800442a:	f040 8095 	bne.w	8004558 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b79      	ldr	r3, [pc, #484]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a78      	ldr	r2, [pc, #480]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fc f889 	bl	8000550 <HAL_GetTick>
 800443e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fc f885 	bl	8000550 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0da      	b.n	800460a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004454:	4b6f      	ldr	r3, [pc, #444]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004460:	4b6c      	ldr	r3, [pc, #432]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004464:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <HAL_RCC_OscConfig+0x750>)
 8004466:	4013      	ands	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004470:	0112      	lsls	r2, r2, #4
 8004472:	430a      	orrs	r2, r1
 8004474:	4967      	ldr	r1, [pc, #412]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	628b      	str	r3, [r1, #40]	; 0x28
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	3b01      	subs	r3, #1
 8004480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004488:	3b01      	subs	r3, #1
 800448a:	025b      	lsls	r3, r3, #9
 800448c:	b29b      	uxth	r3, r3
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	3b01      	subs	r3, #1
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	3b01      	subs	r3, #1
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044aa:	495a      	ldr	r1, [pc, #360]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044b0:	4b58      	ldr	r3, [pc, #352]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	4a57      	ldr	r2, [pc, #348]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044bc:	4b55      	ldr	r3, [pc, #340]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c0:	4b56      	ldr	r3, [pc, #344]	; (800461c <HAL_RCC_OscConfig+0x754>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044c8:	00d2      	lsls	r2, r2, #3
 80044ca:	4952      	ldr	r1, [pc, #328]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044d0:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	f023 020c 	bic.w	r2, r3, #12
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	494d      	ldr	r1, [pc, #308]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044e2:	4b4c      	ldr	r3, [pc, #304]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	f023 0202 	bic.w	r2, r3, #2
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	4949      	ldr	r1, [pc, #292]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044f4:	4b47      	ldr	r3, [pc, #284]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4a46      	ldr	r2, [pc, #280]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004500:	4b44      	ldr	r3, [pc, #272]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	4a43      	ldr	r2, [pc, #268]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800450c:	4b41      	ldr	r3, [pc, #260]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4a40      	ldr	r2, [pc, #256]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004518:	4b3e      	ldr	r3, [pc, #248]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a3d      	ldr	r2, [pc, #244]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004524:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a3a      	ldr	r2, [pc, #232]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 800452a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fc f80e 	bl	8000550 <HAL_GetTick>
 8004534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004538:	f7fc f80a 	bl	8000550 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e05f      	b.n	800460a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800454a:	4b32      	ldr	r3, [pc, #200]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x670>
 8004556:	e057      	b.n	8004608 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004558:	4b2e      	ldr	r3, [pc, #184]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 800455e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fb fff4 	bl	8000550 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456c:	f7fb fff0 	bl	8000550 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e045      	b.n	800460a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800457e:	4b25      	ldr	r3, [pc, #148]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x6a4>
 800458a:	e03d      	b.n	8004608 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_RCC_OscConfig+0x74c>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	2b01      	cmp	r3, #1
 800459e:	d031      	beq.n	8004604 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f003 0203 	and.w	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d12a      	bne.n	8004604 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d122      	bne.n	8004604 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d11a      	bne.n	8004604 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	0a5b      	lsrs	r3, r3, #9
 80045d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d111      	bne.n	8004604 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	0c1b      	lsrs	r3, r3, #16
 80045e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d108      	bne.n	8004604 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	0e1b      	lsrs	r3, r3, #24
 80045f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3730      	adds	r7, #48	; 0x30
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	58024400 	.word	0x58024400
 8004618:	fffffc0c 	.word	0xfffffc0c
 800461c:	ffff0007 	.word	0xffff0007

08004620 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e19c      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004634:	4b8a      	ldr	r3, [pc, #552]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d910      	bls.n	8004664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b87      	ldr	r3, [pc, #540]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 020f 	bic.w	r2, r3, #15
 800464a:	4985      	ldr	r1, [pc, #532]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b83      	ldr	r3, [pc, #524]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e184      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d010      	beq.n	8004692 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	4b7b      	ldr	r3, [pc, #492]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800467c:	429a      	cmp	r2, r3
 800467e:	d908      	bls.n	8004692 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004680:	4b78      	ldr	r3, [pc, #480]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	4975      	ldr	r1, [pc, #468]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800468e:	4313      	orrs	r3, r2
 8004690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d010      	beq.n	80046c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	4b70      	ldr	r3, [pc, #448]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d908      	bls.n	80046c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046ae:	4b6d      	ldr	r3, [pc, #436]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	496a      	ldr	r1, [pc, #424]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d010      	beq.n	80046ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	4b64      	ldr	r3, [pc, #400]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046d8:	429a      	cmp	r2, r3
 80046da:	d908      	bls.n	80046ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046dc:	4b61      	ldr	r3, [pc, #388]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	495e      	ldr	r1, [pc, #376]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d010      	beq.n	800471c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004706:	429a      	cmp	r2, r3
 8004708:	d908      	bls.n	800471c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800470a:	4b56      	ldr	r3, [pc, #344]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4953      	ldr	r1, [pc, #332]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004718:	4313      	orrs	r3, r2
 800471a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d010      	beq.n	800474a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	4b4d      	ldr	r3, [pc, #308]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	429a      	cmp	r2, r3
 8004736:	d908      	bls.n	800474a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004738:	4b4a      	ldr	r3, [pc, #296]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f023 020f 	bic.w	r2, r3, #15
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4947      	ldr	r1, [pc, #284]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004746:	4313      	orrs	r3, r2
 8004748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d055      	beq.n	8004802 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004756:	4b43      	ldr	r3, [pc, #268]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4940      	ldr	r1, [pc, #256]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004764:	4313      	orrs	r3, r2
 8004766:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d107      	bne.n	8004780 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004770:	4b3c      	ldr	r3, [pc, #240]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d121      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0f6      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004788:	4b36      	ldr	r3, [pc, #216]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d115      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0ea      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d107      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047a0:	4b30      	ldr	r3, [pc, #192]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0de      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b0:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0d6      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047c0:	4b28      	ldr	r3, [pc, #160]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f023 0207 	bic.w	r2, r3, #7
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4925      	ldr	r1, [pc, #148]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d2:	f7fb febd 	bl	8000550 <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047da:	f7fb feb9 	bl	8000550 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0be      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	429a      	cmp	r2, r3
 8004800:	d1eb      	bne.n	80047da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d010      	beq.n	8004830 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	429a      	cmp	r2, r3
 800481c:	d208      	bcs.n	8004830 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f023 020f 	bic.w	r2, r3, #15
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	490e      	ldr	r1, [pc, #56]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800482c:	4313      	orrs	r3, r2
 800482e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d214      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 020f 	bic.w	r2, r3, #15
 8004846:	4906      	ldr	r1, [pc, #24]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b04      	ldr	r3, [pc, #16]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e086      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
 8004860:	52002000 	.word	0x52002000
 8004864:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d010      	beq.n	8004896 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	4b3f      	ldr	r3, [pc, #252]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004880:	429a      	cmp	r2, r3
 8004882:	d208      	bcs.n	8004896 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004884:	4b3c      	ldr	r3, [pc, #240]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	4939      	ldr	r1, [pc, #228]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004892:	4313      	orrs	r3, r2
 8004894:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d010      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	4b34      	ldr	r3, [pc, #208]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d208      	bcs.n	80048c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048b2:	4b31      	ldr	r3, [pc, #196]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	492e      	ldr	r1, [pc, #184]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d010      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	4b28      	ldr	r3, [pc, #160]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048dc:	429a      	cmp	r2, r3
 80048de:	d208      	bcs.n	80048f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	4922      	ldr	r1, [pc, #136]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d010      	beq.n	8004920 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69da      	ldr	r2, [r3, #28]
 8004902:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800490a:	429a      	cmp	r2, r3
 800490c:	d208      	bcs.n	8004920 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	4917      	ldr	r1, [pc, #92]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 800491c:	4313      	orrs	r3, r2
 800491e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004920:	f000 f834 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	4912      	ldr	r1, [pc, #72]	; (800497c <HAL_RCC_ClockConfig+0x35c>)
 8004932:	5ccb      	ldrb	r3, [r1, r3]
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
 800493c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800493e:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	4a0d      	ldr	r2, [pc, #52]	; (800497c <HAL_RCC_ClockConfig+0x35c>)
 8004948:	5cd3      	ldrb	r3, [r2, r3]
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
 8004954:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <HAL_RCC_ClockConfig+0x360>)
 8004956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004958:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <HAL_RCC_ClockConfig+0x364>)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x368>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fb fdaa 	bl	80004bc <HAL_InitTick>
 8004968:	4603      	mov	r3, r0
 800496a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	58024400 	.word	0x58024400
 800497c:	0800a718 	.word	0x0800a718
 8004980:	24000414 	.word	0x24000414
 8004984:	24000410 	.word	0x24000410
 8004988:	24000408 	.word	0x24000408

0800498c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800498c:	b480      	push	{r7}
 800498e:	b089      	sub	sp, #36	; 0x24
 8004990:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004992:	4bb3      	ldr	r3, [pc, #716]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800499a:	2b18      	cmp	r3, #24
 800499c:	f200 8155 	bhi.w	8004c4a <HAL_RCC_GetSysClockFreq+0x2be>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	08004a0d 	.word	0x08004a0d
 80049ac:	08004c4b 	.word	0x08004c4b
 80049b0:	08004c4b 	.word	0x08004c4b
 80049b4:	08004c4b 	.word	0x08004c4b
 80049b8:	08004c4b 	.word	0x08004c4b
 80049bc:	08004c4b 	.word	0x08004c4b
 80049c0:	08004c4b 	.word	0x08004c4b
 80049c4:	08004c4b 	.word	0x08004c4b
 80049c8:	08004a33 	.word	0x08004a33
 80049cc:	08004c4b 	.word	0x08004c4b
 80049d0:	08004c4b 	.word	0x08004c4b
 80049d4:	08004c4b 	.word	0x08004c4b
 80049d8:	08004c4b 	.word	0x08004c4b
 80049dc:	08004c4b 	.word	0x08004c4b
 80049e0:	08004c4b 	.word	0x08004c4b
 80049e4:	08004c4b 	.word	0x08004c4b
 80049e8:	08004a39 	.word	0x08004a39
 80049ec:	08004c4b 	.word	0x08004c4b
 80049f0:	08004c4b 	.word	0x08004c4b
 80049f4:	08004c4b 	.word	0x08004c4b
 80049f8:	08004c4b 	.word	0x08004c4b
 80049fc:	08004c4b 	.word	0x08004c4b
 8004a00:	08004c4b 	.word	0x08004c4b
 8004a04:	08004c4b 	.word	0x08004c4b
 8004a08:	08004a3f 	.word	0x08004a3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a0c:	4b94      	ldr	r3, [pc, #592]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d009      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a18:	4b91      	ldr	r3, [pc, #580]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	08db      	lsrs	r3, r3, #3
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	4a90      	ldr	r2, [pc, #576]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
 8004a28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a2a:	e111      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a2c:	4b8d      	ldr	r3, [pc, #564]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a2e:	61bb      	str	r3, [r7, #24]
    break;
 8004a30:	e10e      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a32:	4b8d      	ldr	r3, [pc, #564]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a34:	61bb      	str	r3, [r7, #24]
    break;
 8004a36:	e10b      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a38:	4b8c      	ldr	r3, [pc, #560]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a3a:	61bb      	str	r3, [r7, #24]
    break;
 8004a3c:	e108      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a3e:	4b88      	ldr	r3, [pc, #544]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a48:	4b85      	ldr	r3, [pc, #532]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a54:	4b82      	ldr	r3, [pc, #520]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a5e:	4b80      	ldr	r3, [pc, #512]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	fb02 f303 	mul.w	r3, r2, r3
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80e1 	beq.w	8004c44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	f000 8083 	beq.w	8004b90 <HAL_RCC_GetSysClockFreq+0x204>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	f200 80a1 	bhi.w	8004bd4 <HAL_RCC_GetSysClockFreq+0x248>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x114>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d056      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a9e:	e099      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa0:	4b6f      	ldr	r3, [pc, #444]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02d      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aac:	4b6c      	ldr	r3, [pc, #432]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	08db      	lsrs	r3, r3, #3
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	4a6b      	ldr	r2, [pc, #428]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	ee07 3a90 	vmov	s15, r3
 8004ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b62      	ldr	r3, [pc, #392]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b06:	e087      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b51      	ldr	r3, [pc, #324]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4a:	e065      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8e:	e043      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004c7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba2:	4b2f      	ldr	r3, [pc, #188]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd2:	e021      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bde:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be6:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bfa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c16:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	0a5b      	lsrs	r3, r3, #9
 8004c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c22:	3301      	adds	r3, #1
 8004c24:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3c:	ee17 3a90 	vmov	r3, s15
 8004c40:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c42:	e005      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61bb      	str	r3, [r7, #24]
    break;
 8004c48:	e002      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004c4a:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c4c:	61bb      	str	r3, [r7, #24]
    break;
 8004c4e:	bf00      	nop
  }

  return sysclockfreq;
 8004c50:	69bb      	ldr	r3, [r7, #24]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	; 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	58024400 	.word	0x58024400
 8004c64:	03d09000 	.word	0x03d09000
 8004c68:	003d0900 	.word	0x003d0900
 8004c6c:	017d7840 	.word	0x017d7840
 8004c70:	46000000 	.word	0x46000000
 8004c74:	4c742400 	.word	0x4c742400
 8004c78:	4a742400 	.word	0x4a742400
 8004c7c:	4bbebc20 	.word	0x4bbebc20

08004c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c86:	f7ff fe81 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	490f      	ldr	r1, [pc, #60]	; (8004cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c98:	5ccb      	ldrb	r3, [r1, r3]
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cae:	5cd3      	ldrb	r3, [r2, r3]
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	4a07      	ldr	r2, [pc, #28]	; (8004cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cbe:	4a07      	ldr	r2, [pc, #28]	; (8004cdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	58024400 	.word	0x58024400
 8004cd4:	0800a718 	.word	0x0800a718
 8004cd8:	24000414 	.word	0x24000414
 8004cdc:	24000410 	.word	0x24000410

08004ce0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ce8:	2300      	movs	r3, #0
 8004cea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cec:	2300      	movs	r3, #0
 8004cee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d03f      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d04:	d02a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d0a:	d824      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d10:	d018      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d16:	d81e      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d20:	d007      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d22:	e018      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d24:	4bab      	ldr	r3, [pc, #684]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	4aaa      	ldr	r2, [pc, #680]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d30:	e015      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	2102      	movs	r1, #2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 feff 	bl	8006b3c <RCCEx_PLL2_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d42:	e00c      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3324      	adds	r3, #36	; 0x24
 8004d48:	2102      	movs	r1, #2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 ffa8 	bl	8006ca0 <RCCEx_PLL3_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d54:	e003      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5a:	e000      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d64:	4b9b      	ldr	r3, [pc, #620]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d70:	4998      	ldr	r1, [pc, #608]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	650b      	str	r3, [r1, #80]	; 0x50
 8004d76:	e001      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d78:	7dfb      	ldrb	r3, [r7, #23]
 8004d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d03d      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d826      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d90:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d96:	bf00      	nop
 8004d98:	08004dad 	.word	0x08004dad
 8004d9c:	08004dbb 	.word	0x08004dbb
 8004da0:	08004dcd 	.word	0x08004dcd
 8004da4:	08004de5 	.word	0x08004de5
 8004da8:	08004de5 	.word	0x08004de5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dac:	4b89      	ldr	r3, [pc, #548]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	4a88      	ldr	r2, [pc, #544]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004db8:	e015      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f001 febb 	bl	8006b3c <RCCEx_PLL2_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dca:	e00c      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3324      	adds	r3, #36	; 0x24
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 ff64 	bl	8006ca0 <RCCEx_PLL3_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ddc:	e003      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	75fb      	strb	r3, [r7, #23]
      break;
 8004de2:	e000      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d109      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dec:	4b79      	ldr	r3, [pc, #484]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df0:	f023 0207 	bic.w	r2, r3, #7
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	4976      	ldr	r1, [pc, #472]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	650b      	str	r3, [r1, #80]	; 0x50
 8004dfe:	e001      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d051      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e16:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004e1a:	d036      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e1c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004e20:	d830      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004e22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e26:	d032      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004e28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e2c:	d82a      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004e2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e32:	d02e      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004e34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e38:	d824      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3e:	d018      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e44:	d81e      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004e4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e4e:	d007      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004e50:	e018      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e52:	4b60      	ldr	r3, [pc, #384]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	4a5f      	ldr	r2, [pc, #380]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e5e:	e019      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f001 fe68 	bl	8006b3c <RCCEx_PLL2_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e70:	e010      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3324      	adds	r3, #36	; 0x24
 8004e76:	2100      	movs	r1, #0
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f001 ff11 	bl	8006ca0 <RCCEx_PLL3_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e82:	e007      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	75fb      	strb	r3, [r7, #23]
      break;
 8004e88:	e004      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e002      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e000      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e9a:	4b4e      	ldr	r3, [pc, #312]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ea8:	494a      	ldr	r1, [pc, #296]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	658b      	str	r3, [r1, #88]	; 0x58
 8004eae:	e001      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d051      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ec6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004eca:	d036      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004ecc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004ed0:	d830      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed6:	d032      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004ed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004edc:	d82a      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004ede:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ee2:	d02e      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004ee4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ee8:	d824      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004eea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eee:	d018      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ef4:	d81e      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004efa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004efe:	d007      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004f00:	e018      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f02:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	4a33      	ldr	r2, [pc, #204]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f0e:	e019      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 fe10 	bl	8006b3c <RCCEx_PLL2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004f20:	e010      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3324      	adds	r3, #36	; 0x24
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 feb9 	bl	8006ca0 <RCCEx_PLL3_Config>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f32:	e007      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
      break;
 8004f38:	e004      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004f3a:	bf00      	nop
 8004f3c:	e002      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004f3e:	bf00      	nop
 8004f40:	e000      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f4a:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f58:	491e      	ldr	r1, [pc, #120]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d035      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f74:	2b30      	cmp	r3, #48	; 0x30
 8004f76:	d01c      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004f78:	2b30      	cmp	r3, #48	; 0x30
 8004f7a:	d817      	bhi.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d00c      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d813      	bhi.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d016      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d10f      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004f98:	e00e      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f001 fdcb 	bl	8006b3c <RCCEx_PLL2_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004faa:	e005      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb0:	e002      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e000      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fca:	4902      	ldr	r1, [pc, #8]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004fd0:	e004      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004fd2:	bf00      	nop
 8004fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
 8004fda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d047      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ff0:	d030      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ff6:	d82a      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004ff8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ffc:	d02c      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004ffe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005002:	d824      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005008:	d018      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800500a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500e:	d81e      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005018:	d007      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800501a:	e018      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501c:	4bac      	ldr	r3, [pc, #688]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4aab      	ldr	r2, [pc, #684]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005028:	e017      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3304      	adds	r3, #4
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f001 fd83 	bl	8006b3c <RCCEx_PLL2_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800503a:	e00e      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3324      	adds	r3, #36	; 0x24
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f001 fe2c 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800504c:	e005      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
      break;
 8005052:	e002      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005054:	bf00      	nop
 8005056:	e000      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005060:	4b9b      	ldr	r3, [pc, #620]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005064:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	4998      	ldr	r1, [pc, #608]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800506e:	4313      	orrs	r3, r2
 8005070:	650b      	str	r3, [r1, #80]	; 0x50
 8005072:	e001      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005074:	7dfb      	ldrb	r3, [r7, #23]
 8005076:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d049      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800508c:	d02e      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800508e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005092:	d828      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005094:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005098:	d02a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800509a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800509e:	d822      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80050a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050a4:	d026      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80050a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050aa:	d81c      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80050ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b0:	d010      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80050b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b6:	d816      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01d      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d111      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	2101      	movs	r1, #1
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 fd37 	bl	8006b3c <RCCEx_PLL2_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050d2:	e012      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3324      	adds	r3, #36	; 0x24
 80050d8:	2101      	movs	r1, #1
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fde0 	bl	8006ca0 <RCCEx_PLL3_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050e4:	e009      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	75fb      	strb	r3, [r7, #23]
      break;
 80050ea:	e006      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80050ec:	bf00      	nop
 80050ee:	e004      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80050f0:	bf00      	nop
 80050f2:	e002      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80050f4:	bf00      	nop
 80050f6:	e000      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80050f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d109      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005100:	4b73      	ldr	r3, [pc, #460]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005104:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510c:	4970      	ldr	r1, [pc, #448]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800510e:	4313      	orrs	r3, r2
 8005110:	650b      	str	r3, [r1, #80]	; 0x50
 8005112:	e001      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d04b      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800512a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800512e:	d02e      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005134:	d828      	bhi.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513a:	d02a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800513c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005140:	d822      	bhi.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005142:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005146:	d026      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005148:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800514c:	d81c      	bhi.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800514e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005152:	d010      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005158:	d816      	bhi.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01d      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800515e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005162:	d111      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3304      	adds	r3, #4
 8005168:	2101      	movs	r1, #1
 800516a:	4618      	mov	r0, r3
 800516c:	f001 fce6 	bl	8006b3c <RCCEx_PLL2_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005174:	e012      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3324      	adds	r3, #36	; 0x24
 800517a:	2101      	movs	r1, #1
 800517c:	4618      	mov	r0, r3
 800517e:	f001 fd8f 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005182:	4603      	mov	r3, r0
 8005184:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005186:	e009      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	75fb      	strb	r3, [r7, #23]
      break;
 800518c:	e006      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800518e:	bf00      	nop
 8005190:	e004      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005192:	bf00      	nop
 8005194:	e002      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005196:	bf00      	nop
 8005198:	e000      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800519a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051a2:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051b0:	4947      	ldr	r1, [pc, #284]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	658b      	str	r3, [r1, #88]	; 0x58
 80051b6:	e001      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d02f      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d0:	d00e      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80051d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d6:	d814      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d015      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80051dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051e0:	d10f      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e2:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	4a3a      	ldr	r2, [pc, #232]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80051e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051ee:	e00c      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	2101      	movs	r1, #1
 80051f6:	4618      	mov	r0, r3
 80051f8:	f001 fca0 	bl	8006b3c <RCCEx_PLL2_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005200:	e003      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	75fb      	strb	r3, [r7, #23]
      break;
 8005206:	e000      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005210:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005214:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800521c:	492c      	ldr	r1, [pc, #176]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800521e:	4313      	orrs	r3, r2
 8005220:	650b      	str	r3, [r1, #80]	; 0x50
 8005222:	e001      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005224:	7dfb      	ldrb	r3, [r7, #23]
 8005226:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d032      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	2b03      	cmp	r3, #3
 800523a:	d81b      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800523c:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	0800527b 	.word	0x0800527b
 8005248:	08005255 	.word	0x08005255
 800524c:	08005263 	.word	0x08005263
 8005250:	0800527b 	.word	0x0800527b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005254:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800525a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800525e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005260:	e00c      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	2102      	movs	r1, #2
 8005268:	4618      	mov	r0, r3
 800526a:	f001 fc67 	bl	8006b3c <RCCEx_PLL2_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005272:	e003      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
      break;
 8005278:	e000      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800527a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005282:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005286:	f023 0203 	bic.w	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	4910      	ldr	r1, [pc, #64]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005290:	4313      	orrs	r3, r2
 8005292:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005294:	e001      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 808a 	beq.w	80053bc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a09      	ldr	r2, [pc, #36]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80052ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052b4:	f7fb f94c 	bl	8000550 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ba:	e00d      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052bc:	f7fb f948 	bl	8000550 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	; 0x64
 80052c8:	d906      	bls.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	75fb      	strb	r3, [r7, #23]
        break;
 80052ce:	e009      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80052d0:	58024400 	.word	0x58024400
 80052d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052d8:	4bb9      	ldr	r3, [pc, #740]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0eb      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d166      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052ea:	4bb6      	ldr	r3, [pc, #728]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80052ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052f4:	4053      	eors	r3, r2
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d013      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052fe:	4bb1      	ldr	r3, [pc, #708]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005306:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005308:	4bae      	ldr	r3, [pc, #696]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	4aad      	ldr	r2, [pc, #692]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800530e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005312:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005314:	4bab      	ldr	r3, [pc, #684]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	4aaa      	ldr	r2, [pc, #680]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800531a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005320:	4aa8      	ldr	r2, [pc, #672]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800532c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005330:	d115      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fb f90d 	bl	8000550 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005338:	e00b      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fb f909 	bl	8000550 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	; 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d902      	bls.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	75fb      	strb	r3, [r7, #23]
            break;
 8005350:	e005      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005352:	4b9c      	ldr	r3, [pc, #624]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0ed      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800535e:	7dfb      	ldrb	r3, [r7, #23]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d126      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005372:	d10d      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005374:	4b93      	ldr	r3, [pc, #588]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005382:	0919      	lsrs	r1, r3, #4
 8005384:	4b90      	ldr	r3, [pc, #576]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005386:	400b      	ands	r3, r1
 8005388:	498e      	ldr	r1, [pc, #568]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800538a:	4313      	orrs	r3, r2
 800538c:	610b      	str	r3, [r1, #16]
 800538e:	e005      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005390:	4b8c      	ldr	r3, [pc, #560]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	4a8b      	ldr	r2, [pc, #556]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005396:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800539a:	6113      	str	r3, [r2, #16]
 800539c:	4b89      	ldr	r3, [pc, #548]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800539e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053aa:	4986      	ldr	r1, [pc, #536]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	670b      	str	r3, [r1, #112]	; 0x70
 80053b0:	e004      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
 80053b4:	75bb      	strb	r3, [r7, #22]
 80053b6:	e001      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d07e      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053cc:	2b28      	cmp	r3, #40	; 0x28
 80053ce:	d867      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080054a7 	.word	0x080054a7
 80053dc:	080054a1 	.word	0x080054a1
 80053e0:	080054a1 	.word	0x080054a1
 80053e4:	080054a1 	.word	0x080054a1
 80053e8:	080054a1 	.word	0x080054a1
 80053ec:	080054a1 	.word	0x080054a1
 80053f0:	080054a1 	.word	0x080054a1
 80053f4:	080054a1 	.word	0x080054a1
 80053f8:	0800547d 	.word	0x0800547d
 80053fc:	080054a1 	.word	0x080054a1
 8005400:	080054a1 	.word	0x080054a1
 8005404:	080054a1 	.word	0x080054a1
 8005408:	080054a1 	.word	0x080054a1
 800540c:	080054a1 	.word	0x080054a1
 8005410:	080054a1 	.word	0x080054a1
 8005414:	080054a1 	.word	0x080054a1
 8005418:	0800548f 	.word	0x0800548f
 800541c:	080054a1 	.word	0x080054a1
 8005420:	080054a1 	.word	0x080054a1
 8005424:	080054a1 	.word	0x080054a1
 8005428:	080054a1 	.word	0x080054a1
 800542c:	080054a1 	.word	0x080054a1
 8005430:	080054a1 	.word	0x080054a1
 8005434:	080054a1 	.word	0x080054a1
 8005438:	080054a7 	.word	0x080054a7
 800543c:	080054a1 	.word	0x080054a1
 8005440:	080054a1 	.word	0x080054a1
 8005444:	080054a1 	.word	0x080054a1
 8005448:	080054a1 	.word	0x080054a1
 800544c:	080054a1 	.word	0x080054a1
 8005450:	080054a1 	.word	0x080054a1
 8005454:	080054a1 	.word	0x080054a1
 8005458:	080054a7 	.word	0x080054a7
 800545c:	080054a1 	.word	0x080054a1
 8005460:	080054a1 	.word	0x080054a1
 8005464:	080054a1 	.word	0x080054a1
 8005468:	080054a1 	.word	0x080054a1
 800546c:	080054a1 	.word	0x080054a1
 8005470:	080054a1 	.word	0x080054a1
 8005474:	080054a1 	.word	0x080054a1
 8005478:	080054a7 	.word	0x080054a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	2101      	movs	r1, #1
 8005482:	4618      	mov	r0, r3
 8005484:	f001 fb5a 	bl	8006b3c <RCCEx_PLL2_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800548c:	e00c      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3324      	adds	r3, #36	; 0x24
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f001 fc03 	bl	8006ca0 <RCCEx_PLL3_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800549e:	e003      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	75fb      	strb	r3, [r7, #23]
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80054a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80054ae:	4b45      	ldr	r3, [pc, #276]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ba:	4942      	ldr	r1, [pc, #264]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	654b      	str	r3, [r1, #84]	; 0x54
 80054c0:	e001      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d037      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d820      	bhi.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	08005523 	.word	0x08005523
 80054e4:	080054f9 	.word	0x080054f9
 80054e8:	0800550b 	.word	0x0800550b
 80054ec:	08005523 	.word	0x08005523
 80054f0:	08005523 	.word	0x08005523
 80054f4:	08005523 	.word	0x08005523
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	2101      	movs	r1, #1
 80054fe:	4618      	mov	r0, r3
 8005500:	f001 fb1c 	bl	8006b3c <RCCEx_PLL2_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005508:	e00c      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3324      	adds	r3, #36	; 0x24
 800550e:	2101      	movs	r1, #1
 8005510:	4618      	mov	r0, r3
 8005512:	f001 fbc5 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800551a:	e003      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	75fb      	strb	r3, [r7, #23]
      break;
 8005520:	e000      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8005522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005524:	7dfb      	ldrb	r3, [r7, #23]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800552a:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	f023 0207 	bic.w	r2, r3, #7
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	4923      	ldr	r1, [pc, #140]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005538:	4313      	orrs	r3, r2
 800553a:	654b      	str	r3, [r1, #84]	; 0x54
 800553c:	e001      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d040      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005554:	2b05      	cmp	r3, #5
 8005556:	d821      	bhi.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	080055a3 	.word	0x080055a3
 8005564:	08005579 	.word	0x08005579
 8005568:	0800558b 	.word	0x0800558b
 800556c:	080055a3 	.word	0x080055a3
 8005570:	080055a3 	.word	0x080055a3
 8005574:	080055a3 	.word	0x080055a3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	2101      	movs	r1, #1
 800557e:	4618      	mov	r0, r3
 8005580:	f001 fadc 	bl	8006b3c <RCCEx_PLL2_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005588:	e00c      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3324      	adds	r3, #36	; 0x24
 800558e:	2101      	movs	r1, #1
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fb85 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800559a:	e003      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	75fb      	strb	r3, [r7, #23]
      break;
 80055a0:	e000      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80055a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d110      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80055ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ae:	f023 0207 	bic.w	r2, r3, #7
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b8:	4902      	ldr	r1, [pc, #8]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	658b      	str	r3, [r1, #88]	; 0x58
 80055be:	e007      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80055c0:	58024800 	.word	0x58024800
 80055c4:	58024400 	.word	0x58024400
 80055c8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
 80055ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d04b      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055e6:	d02e      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80055e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ec:	d828      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f2:	d02a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f8:	d822      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80055fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055fe:	d026      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005600:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005604:	d81c      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800560a:	d010      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800560c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005610:	d816      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01d      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800561a:	d111      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3304      	adds	r3, #4
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fa8a 	bl	8006b3c <RCCEx_PLL2_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800562c:	e012      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3324      	adds	r3, #36	; 0x24
 8005632:	2102      	movs	r1, #2
 8005634:	4618      	mov	r0, r3
 8005636:	f001 fb33 	bl	8006ca0 <RCCEx_PLL3_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800563e:	e009      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	75fb      	strb	r3, [r7, #23]
      break;
 8005644:	e006      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005646:	bf00      	nop
 8005648:	e004      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005654:	7dfb      	ldrb	r3, [r7, #23]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800565a:	4bb2      	ldr	r3, [pc, #712]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005668:	49ae      	ldr	r1, [pc, #696]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800566a:	4313      	orrs	r3, r2
 800566c:	654b      	str	r3, [r1, #84]	; 0x54
 800566e:	e001      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d04b      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005686:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800568a:	d02e      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800568c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005690:	d828      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005696:	d02a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569c:	d822      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800569e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a2:	d026      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80056a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a8:	d81c      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d010      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d816      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01d      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80056ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056be:	d111      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3304      	adds	r3, #4
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 fa38 	bl	8006b3c <RCCEx_PLL2_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056d0:	e012      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3324      	adds	r3, #36	; 0x24
 80056d6:	2102      	movs	r1, #2
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 fae1 	bl	8006ca0 <RCCEx_PLL3_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056e2:	e009      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	75fb      	strb	r3, [r7, #23]
      break;
 80056e8:	e006      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80056ea:	bf00      	nop
 80056ec:	e004      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80056ee:	bf00      	nop
 80056f0:	e002      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80056f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056fe:	4b89      	ldr	r3, [pc, #548]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005702:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800570c:	4985      	ldr	r1, [pc, #532]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800570e:	4313      	orrs	r3, r2
 8005710:	658b      	str	r3, [r1, #88]	; 0x58
 8005712:	e001      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b00      	cmp	r3, #0
 8005722:	d04b      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800572a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800572e:	d02e      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005730:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005734:	d828      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573a:	d02a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800573c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005740:	d822      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005742:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005746:	d026      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005748:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800574c:	d81c      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800574e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005752:	d010      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8005754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005758:	d816      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01d      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800575e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005762:	d111      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	2100      	movs	r1, #0
 800576a:	4618      	mov	r0, r3
 800576c:	f001 f9e6 	bl	8006b3c <RCCEx_PLL2_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005774:	e012      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3324      	adds	r3, #36	; 0x24
 800577a:	2102      	movs	r1, #2
 800577c:	4618      	mov	r0, r3
 800577e:	f001 fa8f 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005786:	e009      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
      break;
 800578c:	e006      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800578e:	bf00      	nop
 8005790:	e004      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005792:	bf00      	nop
 8005794:	e002      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005796:	bf00      	nop
 8005798:	e000      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800579a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800579c:	7dfb      	ldrb	r3, [r7, #23]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80057a2:	4b60      	ldr	r3, [pc, #384]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057b0:	495c      	ldr	r1, [pc, #368]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	658b      	str	r3, [r1, #88]	; 0x58
 80057b6:	e001      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d018      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d0:	d10a      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3324      	adds	r3, #36	; 0x24
 80057d6:	2102      	movs	r1, #2
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 fa61 	bl	8006ca0 <RCCEx_PLL3_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80057e8:	4b4e      	ldr	r3, [pc, #312]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057f4:	494b      	ldr	r1, [pc, #300]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01a      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005810:	d10a      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3324      	adds	r3, #36	; 0x24
 8005816:	2102      	movs	r1, #2
 8005818:	4618      	mov	r0, r3
 800581a:	f001 fa41 	bl	8006ca0 <RCCEx_PLL3_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005828:	4b3e      	ldr	r3, [pc, #248]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005836:	493b      	ldr	r1, [pc, #236]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005838:	4313      	orrs	r3, r2
 800583a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d034      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800584e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005852:	d01d      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005858:	d817      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800585e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005862:	d009      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005864:	e011      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3304      	adds	r3, #4
 800586a:	2100      	movs	r1, #0
 800586c:	4618      	mov	r0, r3
 800586e:	f001 f965 	bl	8006b3c <RCCEx_PLL2_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005876:	e00c      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3324      	adds	r3, #36	; 0x24
 800587c:	2102      	movs	r1, #2
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fa0e 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005888:	e003      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	75fb      	strb	r3, [r7, #23]
      break;
 800588e:	e000      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005892:	7dfb      	ldrb	r3, [r7, #23]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005898:	4b22      	ldr	r3, [pc, #136]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800589a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058a6:	491f      	ldr	r1, [pc, #124]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	658b      	str	r3, [r1, #88]	; 0x58
 80058ac:	e001      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d036      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058c8:	d01c      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80058ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058ce:	d816      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80058d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d4:	d003      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80058d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058da:	d007      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80058dc:	e00f      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058de:	4b11      	ldr	r3, [pc, #68]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	4a10      	ldr	r2, [pc, #64]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80058e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80058ea:	e00c      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3324      	adds	r3, #36	; 0x24
 80058f0:	2101      	movs	r1, #1
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 f9d4 	bl	8006ca0 <RCCEx_PLL3_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80058fc:	e003      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	75fb      	strb	r3, [r7, #23]
      break;
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8005904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10d      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800590e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800591a:	4902      	ldr	r1, [pc, #8]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800591c:	4313      	orrs	r3, r2
 800591e:	654b      	str	r3, [r1, #84]	; 0x54
 8005920:	e004      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8005922:	bf00      	nop
 8005924:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d029      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005944:	d007      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005946:	e00f      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005948:	4b61      	ldr	r3, [pc, #388]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a60      	ldr	r2, [pc, #384]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800594e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005954:	e00b      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3304      	adds	r3, #4
 800595a:	2102      	movs	r1, #2
 800595c:	4618      	mov	r0, r3
 800595e:	f001 f8ed 	bl	8006b3c <RCCEx_PLL2_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005966:	e002      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005974:	4b56      	ldr	r3, [pc, #344]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005980:	4953      	ldr	r1, [pc, #332]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005982:	4313      	orrs	r3, r2
 8005984:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005986:	e001      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3324      	adds	r3, #36	; 0x24
 800599c:	2102      	movs	r1, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 f97e 	bl	8006ca0 <RCCEx_PLL3_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d030      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c2:	d017      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80059c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c8:	d811      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80059ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ce:	d013      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80059d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d4:	d80b      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d010      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80059da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059de:	d106      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e0:	4b3b      	ldr	r3, [pc, #236]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4a3a      	ldr	r2, [pc, #232]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80059ec:	e007      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	75fb      	strb	r3, [r7, #23]
      break;
 80059f2:	e004      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80059f4:	bf00      	nop
 80059f6:	e002      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80059fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d109      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a04:	4b32      	ldr	r3, [pc, #200]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a10:	492f      	ldr	r1, [pc, #188]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	654b      	str	r3, [r1, #84]	; 0x54
 8005a16:	e001      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a28:	4b29      	ldr	r3, [pc, #164]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a34:	4926      	ldr	r1, [pc, #152]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a46:	4b22      	ldr	r3, [pc, #136]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a52:	491f      	ldr	r1, [pc, #124]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a64:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	4a19      	ldr	r2, [pc, #100]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a6e:	6113      	str	r3, [r2, #16]
 8005a70:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a7a:	4915      	ldr	r1, [pc, #84]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	da08      	bge.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a88:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a94:	490e      	ldr	r1, [pc, #56]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab4:	4906      	ldr	r1, [pc, #24]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005aba:	7dbb      	ldrb	r3, [r7, #22]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400

08005ad4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b090      	sub	sp, #64	; 0x40
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae2:	f040 8089 	bne.w	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005ae6:	4b95      	ldr	r3, [pc, #596]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	633b      	str	r3, [r7, #48]	; 0x30
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d87d      	bhi.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b11 	.word	0x08005b11
 8005b00:	08005b35 	.word	0x08005b35
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005bed 	.word	0x08005bed
 8005b0c:	08005b7d 	.word	0x08005b7d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b10:	4b8a      	ldr	r3, [pc, #552]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1c:	d107      	bne.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 feb8 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b2c:	e3ed      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b32:	e3ea      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b34:	4b81      	ldr	r3, [pc, #516]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b40:	d107      	bne.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b42:	f107 0318 	add.w	r3, r7, #24
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fbfe 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b50:	e3db      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b56:	e3d8      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b58:	4b78      	ldr	r3, [pc, #480]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b64:	d107      	bne.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b66:	f107 030c 	add.w	r3, r7, #12
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fd40 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b74:	e3c9      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b7a:	e3c6      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b7c:	4b6f      	ldr	r3, [pc, #444]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b86:	4b6d      	ldr	r3, [pc, #436]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d10c      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b98:	4b68      	ldr	r3, [pc, #416]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	08db      	lsrs	r3, r3, #3
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	4a67      	ldr	r2, [pc, #412]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005baa:	e01e      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bac:	4b63      	ldr	r3, [pc, #396]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb8:	d106      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bc0:	d102      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005bc2:	4b60      	ldr	r3, [pc, #384]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc6:	e010      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bc8:	4b5c      	ldr	r3, [pc, #368]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd4:	d106      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bdc:	d102      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005bde:	4b5a      	ldr	r3, [pc, #360]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be2:	e002      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005be8:	e38f      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005bea:	e38e      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bec:	4b57      	ldr	r3, [pc, #348]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bf0:	e38b      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bf6:	e388      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfe:	f040 80a7 	bne.w	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005c02:	4b4e      	ldr	r3, [pc, #312]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c12:	d054      	beq.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c1a:	f200 808b 	bhi.w	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c24:	f000 8083 	beq.w	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c2e:	f200 8081 	bhi.w	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c38:	d02f      	beq.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c40:	d878      	bhi.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c4e:	d012      	beq.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8005c50:	e070      	b.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c52:	4b3a      	ldr	r3, [pc, #232]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c5e:	d107      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fe17 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c6e:	e34c      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c74:	e349      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c76:	4b31      	ldr	r3, [pc, #196]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c82:	d107      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c84:	f107 0318 	add.w	r3, r7, #24
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fb5d 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c92:	e33a      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c98:	e337      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c9a:	4b28      	ldr	r3, [pc, #160]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ca8:	f107 030c 	add.w	r3, r7, #12
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fc9f 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cb6:	e328      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cbc:	e325      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005cbe:	4b1f      	ldr	r3, [pc, #124]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d10c      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cda:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	08db      	lsrs	r3, r3, #3
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	4a16      	ldr	r2, [pc, #88]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cec:	e01e      	b.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cee:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d02:	d102      	bne.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d04:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d08:	e010      	b.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d16:	d106      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d1e:	d102      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d20:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d24:	e002      	b.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d2a:	e2ee      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005d2c:	e2ed      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d2e:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d32:	e2ea      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d38:	e2e7      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	03d09000 	.word	0x03d09000
 8005d44:	003d0900 	.word	0x003d0900
 8005d48:	017d7840 	.word	0x017d7840
 8005d4c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d56:	f040 809c 	bne.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005d5a:	4b9e      	ldr	r3, [pc, #632]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005d62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d6a:	d054      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d72:	f200 808b 	bhi.w	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d7c:	f000 8083 	beq.w	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d86:	f200 8081 	bhi.w	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d90:	d02f      	beq.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d98:	d878      	bhi.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005da6:	d012      	beq.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005da8:	e070      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005daa:	4b8a      	ldr	r3, [pc, #552]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005db6:	d107      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fd6b 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005dc6:	e2a0      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dcc:	e29d      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dce:	4b81      	ldr	r3, [pc, #516]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dda:	d107      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ddc:	f107 0318 	add.w	r3, r7, #24
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fab1 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005dea:	e28e      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005df0:	e28b      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005df2:	4b78      	ldr	r3, [pc, #480]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dfe:	d107      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e00:	f107 030c 	add.w	r3, r7, #12
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fbf3 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e0e:	e27c      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e14:	e279      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e16:	4b6f      	ldr	r3, [pc, #444]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e20:	4b6c      	ldr	r3, [pc, #432]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d10c      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e32:	4b68      	ldr	r3, [pc, #416]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	08db      	lsrs	r3, r3, #3
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	4a66      	ldr	r2, [pc, #408]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e44:	e01e      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e46:	4b63      	ldr	r3, [pc, #396]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e52:	d106      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8005e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e5a:	d102      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005e5c:	4b5f      	ldr	r3, [pc, #380]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e60:	e010      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e62:	4b5c      	ldr	r3, [pc, #368]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e6e:	d106      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e76:	d102      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005e78:	4b59      	ldr	r3, [pc, #356]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e7c:	e002      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005e82:	e242      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005e84:	e241      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e86:	4b57      	ldr	r3, [pc, #348]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e8a:	e23e      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e90:	e23b      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e98:	f040 80a6 	bne.w	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005e9c:	4b4d      	ldr	r3, [pc, #308]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eac:	d054      	beq.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eb4:	f200 808b 	bhi.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ebe:	f000 8083 	beq.w	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ec8:	f200 8081 	bhi.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed2:	d02f      	beq.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eda:	d878      	bhi.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d004      	beq.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee8:	d012      	beq.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8005eea:	e070      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eec:	4b39      	ldr	r3, [pc, #228]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fcca 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f08:	e1ff      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f0e:	e1fc      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f10:	4b30      	ldr	r3, [pc, #192]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f1e:	f107 0318 	add.w	r3, r7, #24
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fa10 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f2c:	e1ed      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f32:	e1ea      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f34:	4b27      	ldr	r3, [pc, #156]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f40:	d107      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f42:	f107 030c 	add.w	r3, r7, #12
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fb52 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f50:	e1db      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f56:	e1d8      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f58:	4b1e      	ldr	r3, [pc, #120]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f60:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f62:	4b1c      	ldr	r3, [pc, #112]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d109      	bne.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f74:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	08db      	lsrs	r3, r3, #3
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	4a16      	ldr	r2, [pc, #88]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f86:	e01e      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f88:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f94:	d106      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f9c:	d102      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005f9e:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa2:	e010      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb0:	d106      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb8:	d102      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fbe:	e002      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005fc4:	e1a1      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005fc6:	e1a0      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fcc:	e19d      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fd2:	e19a      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005fd4:	58024400 	.word	0x58024400
 8005fd8:	03d09000 	.word	0x03d09000
 8005fdc:	003d0900 	.word	0x003d0900
 8005fe0:	017d7840 	.word	0x017d7840
 8005fe4:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fee:	d173      	bne.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005ff0:	4b9a      	ldr	r3, [pc, #616]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006000:	d02f      	beq.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006008:	d863      	bhi.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006016:	d012      	beq.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006018:	e05b      	b.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800601a:	4b90      	ldr	r3, [pc, #576]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006026:	d107      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006028:	f107 0318 	add.w	r3, r7, #24
 800602c:	4618      	mov	r0, r3
 800602e:	f000 f98b 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006036:	e168      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800603c:	e165      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800603e:	4b87      	ldr	r3, [pc, #540]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800604a:	d107      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800604c:	f107 030c 	add.w	r3, r7, #12
 8006050:	4618      	mov	r0, r3
 8006052:	f000 facd 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800605a:	e156      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006060:	e153      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006062:	4b7e      	ldr	r3, [pc, #504]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800606a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800606c:	4b7b      	ldr	r3, [pc, #492]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b04      	cmp	r3, #4
 8006076:	d10c      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800607e:	4b77      	ldr	r3, [pc, #476]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	08db      	lsrs	r3, r3, #3
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	4a75      	ldr	r2, [pc, #468]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800608a:	fa22 f303 	lsr.w	r3, r2, r3
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006090:	e01e      	b.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006092:	4b72      	ldr	r3, [pc, #456]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609e:	d106      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a6:	d102      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80060a8:	4b6e      	ldr	r3, [pc, #440]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ac:	e010      	b.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060ae:	4b6b      	ldr	r3, [pc, #428]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ba:	d106      	bne.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80060bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c2:	d102      	bne.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80060c4:	4b68      	ldr	r3, [pc, #416]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c8:	e002      	b.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80060ce:	e11c      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80060d0:	e11b      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060d6:	e118      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060de:	d133      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80060e0:	4b5e      	ldr	r3, [pc, #376]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80060e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d004      	beq.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f6:	d012      	beq.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80060f8:	e023      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060fa:	4b58      	ldr	r3, [pc, #352]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006106:	d107      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fbc3 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006116:	e0f8      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800611c:	e0f5      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800611e:	4b4f      	ldr	r3, [pc, #316]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006126:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800612a:	d107      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800612c:	f107 0318 	add.w	r3, r7, #24
 8006130:	4618      	mov	r0, r3
 8006132:	f000 f909 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800613a:	e0e6      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006140:	e0e3      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006146:	e0e0      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800614e:	f040 808d 	bne.w	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006152:	4b42      	ldr	r3, [pc, #264]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006156:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800615a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006162:	d06b      	beq.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8006164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800616a:	d874      	bhi.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006172:	d056      	beq.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617a:	d86c      	bhi.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006182:	d03b      	beq.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800618a:	d864      	bhi.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006192:	d021      	beq.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619a:	d85c      	bhi.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061a8:	d004      	beq.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80061aa:	e054      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80061ac:	f000 f8b6 	bl	800631c <HAL_RCCEx_GetD3PCLK1Freq>
 80061b0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80061b2:	e0aa      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061b4:	4b29      	ldr	r3, [pc, #164]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c0:	d107      	bne.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061c2:	f107 0318 	add.w	r3, r7, #24
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 f8be 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80061d0:	e09b      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061d6:	e098      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061d8:	4b20      	ldr	r3, [pc, #128]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e4:	d107      	bne.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061e6:	f107 030c 	add.w	r3, r7, #12
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fa00 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80061f4:	e089      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061fa:	e086      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061fc:	4b17      	ldr	r3, [pc, #92]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b04      	cmp	r3, #4
 8006206:	d109      	bne.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006208:	4b14      	ldr	r3, [pc, #80]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	08db      	lsrs	r3, r3, #3
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	4a13      	ldr	r2, [pc, #76]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006214:	fa22 f303 	lsr.w	r3, r2, r3
 8006218:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800621a:	e076      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006220:	e073      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006222:	4b0e      	ldr	r3, [pc, #56]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622e:	d102      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8006230:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006234:	e069      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800623a:	e066      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800623c:	4b07      	ldr	r3, [pc, #28]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006248:	d102      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800624c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800624e:	e05c      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006254:	e059      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800625a:	e056      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800625c:	58024400 	.word	0x58024400
 8006260:	03d09000 	.word	0x03d09000
 8006264:	003d0900 	.word	0x003d0900
 8006268:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006272:	d148      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006274:	4b27      	ldr	r3, [pc, #156]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006278:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800627c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006284:	d02a      	beq.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800628c:	d838      	bhi.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800629a:	d00d      	beq.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800629c:	e030      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800629e:	4b1d      	ldr	r3, [pc, #116]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062aa:	d102      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80062ac:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80062ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80062b0:	e02b      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062b6:	e028      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062b8:	4b16      	ldr	r3, [pc, #88]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062c4:	d107      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fae4 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80062d4:	e019      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062da:	e016      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062dc:	4b0d      	ldr	r3, [pc, #52]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062e8:	d107      	bne.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ea:	f107 0318 	add.w	r3, r7, #24
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 f82a 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80062f8:	e007      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062fe:	e004      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006300:	2300      	movs	r3, #0
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006304:	e001      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8006306:	2300      	movs	r3, #0
 8006308:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800630a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800630c:	4618      	mov	r0, r3
 800630e:	3740      	adds	r7, #64	; 0x40
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	58024400 	.word	0x58024400
 8006318:	017d7840 	.word	0x017d7840

0800631c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006320:	f7fe fcae 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8006324:	4602      	mov	r2, r0
 8006326:	4b06      	ldr	r3, [pc, #24]	; (8006340 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	091b      	lsrs	r3, r3, #4
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	4904      	ldr	r1, [pc, #16]	; (8006344 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006332:	5ccb      	ldrb	r3, [r1, r3]
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800633c:	4618      	mov	r0, r3
 800633e:	bd80      	pop	{r7, pc}
 8006340:	58024400 	.word	0x58024400
 8006344:	0800a718 	.word	0x0800a718

08006348 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006348:	b480      	push	{r7}
 800634a:	b089      	sub	sp, #36	; 0x24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006350:	4ba1      	ldr	r3, [pc, #644]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800635a:	4b9f      	ldr	r3, [pc, #636]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	0b1b      	lsrs	r3, r3, #12
 8006360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006364:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006366:	4b9c      	ldr	r3, [pc, #624]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	091b      	lsrs	r3, r3, #4
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006372:	4b99      	ldr	r3, [pc, #612]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8111 	beq.w	80065b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b02      	cmp	r3, #2
 800639a:	f000 8083 	beq.w	80064a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	f200 80a1 	bhi.w	80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d056      	beq.n	8006460 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80063b2:	e099      	b.n	80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b4:	4b88      	ldr	r3, [pc, #544]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d02d      	beq.n	800641c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063c0:	4b85      	ldr	r3, [pc, #532]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	08db      	lsrs	r3, r3, #3
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	4a84      	ldr	r2, [pc, #528]	; (80065dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	ee07 3a90 	vmov	s15, r3
 80063d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ea:	4b7b      	ldr	r3, [pc, #492]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80063fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800640e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006416:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800641a:	e087      	b.n	800652c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80065e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800642a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642e:	4b6a      	ldr	r3, [pc, #424]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006442:	eddf 5a67 	vldr	s11, [pc, #412]	; 80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800645e:	e065      	b.n	800652c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800646e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006472:	4b59      	ldr	r3, [pc, #356]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006482:	ed97 6a03 	vldr	s12, [r7, #12]
 8006486:	eddf 5a56 	vldr	s11, [pc, #344]	; 80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800648a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a2:	e043      	b.n	800652c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80064b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b6:	4b48      	ldr	r3, [pc, #288]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064e6:	e021      	b.n	800652c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fa:	4b37      	ldr	r3, [pc, #220]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650a:	ed97 6a03 	vldr	s12, [r7, #12]
 800650e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800651e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800652a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800652c:	4b2a      	ldr	r3, [pc, #168]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	0a5b      	lsrs	r3, r3, #9
 8006532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006546:	edd7 6a07 	vldr	s13, [r7, #28]
 800654a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800654e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006552:	ee17 2a90 	vmov	r2, s15
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800655a:	4b1f      	ldr	r3, [pc, #124]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	0c1b      	lsrs	r3, r3, #16
 8006560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006570:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006574:	edd7 6a07 	vldr	s13, [r7, #28]
 8006578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800657c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006580:	ee17 2a90 	vmov	r2, s15
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006588:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	0e1b      	lsrs	r3, r3, #24
 800658e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800659e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ae:	ee17 2a90 	vmov	r2, s15
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80065b6:	e008      	b.n	80065ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
}
 80065ca:	bf00      	nop
 80065cc:	3724      	adds	r7, #36	; 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	03d09000 	.word	0x03d09000
 80065e0:	46000000 	.word	0x46000000
 80065e4:	4c742400 	.word	0x4c742400
 80065e8:	4a742400 	.word	0x4a742400
 80065ec:	4bbebc20 	.word	0x4bbebc20

080065f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b089      	sub	sp, #36	; 0x24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065f8:	4ba1      	ldr	r3, [pc, #644]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006602:	4b9f      	ldr	r3, [pc, #636]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	0d1b      	lsrs	r3, r3, #20
 8006608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800660c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800660e:	4b9c      	ldr	r3, [pc, #624]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800661a:	4b99      	ldr	r3, [pc, #612]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	08db      	lsrs	r3, r3, #3
 8006620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	fb02 f303 	mul.w	r3, r2, r3
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006632:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8111 	beq.w	8006860 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b02      	cmp	r3, #2
 8006642:	f000 8083 	beq.w	800674c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b02      	cmp	r3, #2
 800664a:	f200 80a1 	bhi.w	8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d056      	beq.n	8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800665a:	e099      	b.n	8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800665c:	4b88      	ldr	r3, [pc, #544]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02d      	beq.n	80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006668:	4b85      	ldr	r3, [pc, #532]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	08db      	lsrs	r3, r3, #3
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	4a84      	ldr	r2, [pc, #528]	; (8006884 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006674:	fa22 f303 	lsr.w	r3, r2, r3
 8006678:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006692:	4b7b      	ldr	r3, [pc, #492]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80066c2:	e087      	b.n	80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800688c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80066d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d6:	4b6a      	ldr	r3, [pc, #424]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006706:	e065      	b.n	80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006712:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	4b59      	ldr	r3, [pc, #356]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	ed97 6a03 	vldr	s12, [r7, #12]
 800672e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800674a:	e043      	b.n	80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006756:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800675a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675e:	4b48      	ldr	r3, [pc, #288]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006772:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800678e:	e021      	b.n	80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800679e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a2:	4b37      	ldr	r3, [pc, #220]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80067d4:	4b2a      	ldr	r3, [pc, #168]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	0a5b      	lsrs	r3, r3, #9
 80067da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fa:	ee17 2a90 	vmov	r2, s15
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006802:	4b1f      	ldr	r3, [pc, #124]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800681c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006828:	ee17 2a90 	vmov	r2, s15
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006830:	4b13      	ldr	r3, [pc, #76]	; (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	0e1b      	lsrs	r3, r3, #24
 8006836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800684a:	edd7 6a07 	vldr	s13, [r7, #28]
 800684e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006856:	ee17 2a90 	vmov	r2, s15
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800685e:	e008      	b.n	8006872 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	609a      	str	r2, [r3, #8]
}
 8006872:	bf00      	nop
 8006874:	3724      	adds	r7, #36	; 0x24
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	58024400 	.word	0x58024400
 8006884:	03d09000 	.word	0x03d09000
 8006888:	46000000 	.word	0x46000000
 800688c:	4c742400 	.word	0x4c742400
 8006890:	4a742400 	.word	0x4a742400
 8006894:	4bbebc20 	.word	0x4bbebc20

08006898 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006898:	b480      	push	{r7}
 800689a:	b089      	sub	sp, #36	; 0x24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068a0:	4ba0      	ldr	r3, [pc, #640]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80068aa:	4b9e      	ldr	r3, [pc, #632]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	091b      	lsrs	r3, r3, #4
 80068b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80068b6:	4b9b      	ldr	r3, [pc, #620]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80068c0:	4b98      	ldr	r3, [pc, #608]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	08db      	lsrs	r3, r3, #3
 80068c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	fb02 f303 	mul.w	r3, r2, r3
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 8111 	beq.w	8006b06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	f000 8083 	beq.w	80069f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	f200 80a1 	bhi.w	8006a36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d056      	beq.n	80069ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006900:	e099      	b.n	8006a36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006902:	4b88      	ldr	r3, [pc, #544]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d02d      	beq.n	800696a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800690e:	4b85      	ldr	r3, [pc, #532]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	08db      	lsrs	r3, r3, #3
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	4a83      	ldr	r2, [pc, #524]	; (8006b28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800691a:	fa22 f303 	lsr.w	r3, r2, r3
 800691e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	ee07 3a90 	vmov	s15, r3
 8006930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006938:	4b7a      	ldr	r3, [pc, #488]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800693a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006940:	ee07 3a90 	vmov	s15, r3
 8006944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006948:	ed97 6a03 	vldr	s12, [r7, #12]
 800694c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006950:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006954:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800695c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006964:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006968:	e087      	b.n	8006a7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	ee07 3a90 	vmov	s15, r3
 8006970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006974:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006b30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697c:	4b69      	ldr	r3, [pc, #420]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006984:	ee07 3a90 	vmov	s15, r3
 8006988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006990:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069ac:	e065      	b.n	8006a7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	ee07 3a90 	vmov	s15, r3
 80069b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006b34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80069bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c0:	4b58      	ldr	r3, [pc, #352]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80069d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069f0:	e043      	b.n	8006a7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	ee07 3a90 	vmov	s15, r3
 80069f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006b38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a04:	4b47      	ldr	r3, [pc, #284]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0c:	ee07 3a90 	vmov	s15, r3
 8006a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a14:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a18:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a34:	e021      	b.n	8006a7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	ee07 3a90 	vmov	s15, r3
 8006a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a40:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006b30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a48:	4b36      	ldr	r3, [pc, #216]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a58:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a5c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a78:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006a7a:	4b2a      	ldr	r3, [pc, #168]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	0a5b      	lsrs	r3, r3, #9
 8006a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aa0:	ee17 2a90 	vmov	r2, s15
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006aa8:	4b1e      	ldr	r3, [pc, #120]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ace:	ee17 2a90 	vmov	r2, s15
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006ad6:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	0e1b      	lsrs	r3, r3, #24
 8006adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006af0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006afc:	ee17 2a90 	vmov	r2, s15
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006b04:	e008      	b.n	8006b18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	3724      	adds	r7, #36	; 0x24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	58024400 	.word	0x58024400
 8006b28:	03d09000 	.word	0x03d09000
 8006b2c:	46000000 	.word	0x46000000
 8006b30:	4c742400 	.word	0x4c742400
 8006b34:	4a742400 	.word	0x4a742400
 8006b38:	4bbebc20 	.word	0x4bbebc20

08006b3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b4a:	4b53      	ldr	r3, [pc, #332]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d101      	bne.n	8006b5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e099      	b.n	8006c8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006b5a:	4b4f      	ldr	r3, [pc, #316]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a4e      	ldr	r2, [pc, #312]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b66:	f7f9 fcf3 	bl	8000550 <HAL_GetTick>
 8006b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b6c:	e008      	b.n	8006b80 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b6e:	f7f9 fcef 	bl	8000550 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e086      	b.n	8006c8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b80:	4b45      	ldr	r3, [pc, #276]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f0      	bne.n	8006b6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b8c:	4b42      	ldr	r3, [pc, #264]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	031b      	lsls	r3, r3, #12
 8006b9a:	493f      	ldr	r1, [pc, #252]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	628b      	str	r3, [r1, #40]	; 0x28
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	025b      	lsls	r3, r3, #9
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	061b      	lsls	r3, r3, #24
 8006bcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006bd0:	4931      	ldr	r1, [pc, #196]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006bd6:	4b30      	ldr	r3, [pc, #192]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	492d      	ldr	r1, [pc, #180]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006be8:	4b2b      	ldr	r3, [pc, #172]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	f023 0220 	bic.w	r2, r3, #32
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	4928      	ldr	r1, [pc, #160]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006bfa:	4b27      	ldr	r3, [pc, #156]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	4a26      	ldr	r2, [pc, #152]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c00:	f023 0310 	bic.w	r3, r3, #16
 8006c04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c06:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c0a:	4b24      	ldr	r3, [pc, #144]	; (8006c9c <RCCEx_PLL2_Config+0x160>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	69d2      	ldr	r2, [r2, #28]
 8006c12:	00d2      	lsls	r2, r2, #3
 8006c14:	4920      	ldr	r1, [pc, #128]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c1a:	4b1f      	ldr	r3, [pc, #124]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	4a1e      	ldr	r2, [pc, #120]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c20:	f043 0310 	orr.w	r3, r3, #16
 8006c24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d106      	bne.n	8006c3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c2c:	4b1a      	ldr	r3, [pc, #104]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	4a19      	ldr	r2, [pc, #100]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c38:	e00f      	b.n	8006c5a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d106      	bne.n	8006c4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c40:	4b15      	ldr	r3, [pc, #84]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	4a14      	ldr	r2, [pc, #80]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c4c:	e005      	b.n	8006c5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006c4e:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c52:	4a11      	ldr	r2, [pc, #68]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006c5a:	4b0f      	ldr	r3, [pc, #60]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a0e      	ldr	r2, [pc, #56]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c66:	f7f9 fc73 	bl	8000550 <HAL_GetTick>
 8006c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c6c:	e008      	b.n	8006c80 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006c6e:	f7f9 fc6f 	bl	8000550 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e006      	b.n	8006c8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0f0      	beq.n	8006c6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
 8006c9c:	ffff0007 	.word	0xffff0007

08006ca0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cae:	4b53      	ldr	r3, [pc, #332]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d101      	bne.n	8006cbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e099      	b.n	8006df2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006cbe:	4b4f      	ldr	r3, [pc, #316]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a4e      	ldr	r2, [pc, #312]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cca:	f7f9 fc41 	bl	8000550 <HAL_GetTick>
 8006cce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006cd0:	e008      	b.n	8006ce4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006cd2:	f7f9 fc3d 	bl	8000550 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e086      	b.n	8006df2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ce4:	4b45      	ldr	r3, [pc, #276]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f0      	bne.n	8006cd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006cf0:	4b42      	ldr	r3, [pc, #264]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	051b      	lsls	r3, r3, #20
 8006cfe:	493f      	ldr	r1, [pc, #252]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	628b      	str	r3, [r1, #40]	; 0x28
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	025b      	lsls	r3, r3, #9
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	061b      	lsls	r3, r3, #24
 8006d30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d34:	4931      	ldr	r1, [pc, #196]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d3a:	4b30      	ldr	r3, [pc, #192]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	492d      	ldr	r1, [pc, #180]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d4c:	4b2b      	ldr	r3, [pc, #172]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	4928      	ldr	r1, [pc, #160]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d5e:	4b27      	ldr	r3, [pc, #156]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	4a26      	ldr	r2, [pc, #152]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006d6a:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d6e:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <RCCEx_PLL3_Config+0x160>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	69d2      	ldr	r2, [r2, #28]
 8006d76:	00d2      	lsls	r2, r2, #3
 8006d78:	4920      	ldr	r1, [pc, #128]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d7e:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d106      	bne.n	8006d9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d90:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	4a19      	ldr	r2, [pc, #100]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d9c:	e00f      	b.n	8006dbe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d106      	bne.n	8006db2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	4a14      	ldr	r2, [pc, #80]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006daa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006db0:	e005      	b.n	8006dbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006db2:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	4a11      	ldr	r2, [pc, #68]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a0e      	ldr	r2, [pc, #56]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dca:	f7f9 fbc1 	bl	8000550 <HAL_GetTick>
 8006dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006dd0:	e008      	b.n	8006de4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006dd2:	f7f9 fbbd 	bl	8000550 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e006      	b.n	8006df2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f0      	beq.n	8006dd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	58024400 	.word	0x58024400
 8006e00:	ffff0007 	.word	0xffff0007

08006e04 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d904      	bls.n	8006e22 <HAL_SAI_InitProtocol+0x1e>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	3b03      	subs	r3, #3
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d812      	bhi.n	8006e46 <HAL_SAI_InitProtocol+0x42>
 8006e20:	e008      	b.n	8006e34 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fb33 	bl	8007494 <SAI_InitI2S>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	75fb      	strb	r3, [r7, #23]
      break;
 8006e32:	e00b      	b.n	8006e4c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fbdc 	bl	80075f8 <SAI_InitPCM>
 8006e40:	4603      	mov	r3, r0
 8006e42:	75fb      	strb	r3, [r7, #23]
      break;
 8006e44:	e002      	b.n	8006e4c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4a:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f808 	bl	8006e68 <HAL_SAI_Init>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e1fb      	b.n	8007272 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d113      	bne.n	8006eac <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a96      	ldr	r2, [pc, #600]	; (80070e4 <HAL_SAI_Init+0x27c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <HAL_SAI_Init+0x30>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a95      	ldr	r2, [pc, #596]	; (80070e8 <HAL_SAI_Init+0x280>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d107      	bne.n	8006ea8 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d103      	bne.n	8006ea8 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e1e2      	b.n	8007272 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a8c      	ldr	r2, [pc, #560]	; (80070e4 <HAL_SAI_Init+0x27c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_SAI_Init+0x58>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a8c      	ldr	r2, [pc, #560]	; (80070ec <HAL_SAI_Init+0x284>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d102      	bne.n	8006ec6 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006ec0:	4b8b      	ldr	r3, [pc, #556]	; (80070f0 <HAL_SAI_Init+0x288>)
 8006ec2:	61bb      	str	r3, [r7, #24]
 8006ec4:	e00e      	b.n	8006ee4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a87      	ldr	r2, [pc, #540]	; (80070e8 <HAL_SAI_Init+0x280>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_SAI_Init+0x72>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a87      	ldr	r2, [pc, #540]	; (80070f4 <HAL_SAI_Init+0x28c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d102      	bne.n	8006ee0 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8006eda:	4b87      	ldr	r3, [pc, #540]	; (80070f8 <HAL_SAI_Init+0x290>)
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	e001      	b.n	8006ee4 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e1c6      	b.n	8007272 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d106      	bne.n	8006efe <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 f8ab 	bl	8008054 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fbfc 	bl	80076fc <SAI_Disable>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e1b1      	b.n	8007272 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2202      	movs	r2, #2
 8006f12:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d00c      	beq.n	8006f38 <HAL_SAI_Init+0xd0>
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d80d      	bhi.n	8006f3e <HAL_SAI_Init+0xd6>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_SAI_Init+0xc4>
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d003      	beq.n	8006f32 <HAL_SAI_Init+0xca>
 8006f2a:	e008      	b.n	8006f3e <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006f30:	e008      	b.n	8006f44 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006f32:	2310      	movs	r3, #16
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006f36:	e005      	b.n	8006f44 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006f38:	2320      	movs	r3, #32
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006f3c:	e002      	b.n	8006f44 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006f42:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	2b05      	cmp	r3, #5
 8006f4a:	d822      	bhi.n	8006f92 <HAL_SAI_Init+0x12a>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <HAL_SAI_Init+0xec>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006f73 	.word	0x08006f73
 8006f5c:	08006f7b 	.word	0x08006f7b
 8006f60:	08006f93 	.word	0x08006f93
 8006f64:	08006f93 	.word	0x08006f93
 8006f68:	08006f83 	.word	0x08006f83
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61fb      	str	r3, [r7, #28]
      break;
 8006f70:	e012      	b.n	8006f98 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f76:	61fb      	str	r3, [r7, #28]
      break;
 8006f78:	e00e      	b.n	8006f98 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f7e:	61fb      	str	r3, [r7, #28]
      break;
 8006f80:	e00a      	b.n	8006f98 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f86:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	f043 0303 	orr.w	r3, r3, #3
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006f90:	e002      	b.n	8006f98 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
      break;
 8006f96:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8084 	beq.w	80070b0 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a4c      	ldr	r2, [pc, #304]	; (80070e4 <HAL_SAI_Init+0x27c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_SAI_Init+0x158>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a4c      	ldr	r2, [pc, #304]	; (80070ec <HAL_SAI_Init+0x284>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d104      	bne.n	8006fca <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006fc0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006fc4:	f7fe fd86 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fc8:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a46      	ldr	r2, [pc, #280]	; (80070e8 <HAL_SAI_Init+0x280>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d104      	bne.n	8006fde <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006fd4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006fd8:	f7fe fd7c 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fdc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a44      	ldr	r2, [pc, #272]	; (80070f4 <HAL_SAI_Init+0x28c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d104      	bne.n	8006ff2 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006fe8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006fec:	f7fe fd72 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ff0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ffa:	d120      	bne.n	800703e <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007000:	2b04      	cmp	r3, #4
 8007002:	d102      	bne.n	800700a <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007004:	2340      	movs	r3, #64	; 0x40
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	e00a      	b.n	8007020 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700e:	2b08      	cmp	r3, #8
 8007010:	d103      	bne.n	800701a <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	e002      	b.n	8007020 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4619      	mov	r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	fbb1 f3f3 	udiv	r3, r1, r3
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	e017      	b.n	800706e <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007046:	d101      	bne.n	800704c <HAL_SAI_Init+0x1e4>
 8007048:	2302      	movs	r3, #2
 800704a:	e000      	b.n	800704e <HAL_SAI_Init+0x1e6>
 800704c:	2301      	movs	r3, #1
 800704e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	4619      	mov	r1, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	fbb1 f3f3 	udiv	r3, r1, r3
 800706c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	4a22      	ldr	r2, [pc, #136]	; (80070fc <HAL_SAI_Init+0x294>)
 8007072:	fba2 2303 	umull	r2, r3, r2, r3
 8007076:	08da      	lsrs	r2, r3, #3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800707c:	6939      	ldr	r1, [r7, #16]
 800707e:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <HAL_SAI_Init+0x294>)
 8007080:	fba3 2301 	umull	r2, r3, r3, r1
 8007084:	08da      	lsrs	r2, r3, #3
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	1aca      	subs	r2, r1, r3
 8007090:	2a08      	cmp	r2, #8
 8007092:	d904      	bls.n	800709e <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d104      	bne.n	80070b0 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	085a      	lsrs	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_SAI_Init+0x258>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d109      	bne.n	80070d4 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d101      	bne.n	80070cc <HAL_SAI_Init+0x264>
 80070c8:	2300      	movs	r3, #0
 80070ca:	e001      	b.n	80070d0 <HAL_SAI_Init+0x268>
 80070cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070d0:	623b      	str	r3, [r7, #32]
 80070d2:	e017      	b.n	8007104 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d111      	bne.n	8007100 <HAL_SAI_Init+0x298>
 80070dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070e0:	e00f      	b.n	8007102 <HAL_SAI_Init+0x29a>
 80070e2:	bf00      	nop
 80070e4:	40015804 	.word	0x40015804
 80070e8:	58005404 	.word	0x58005404
 80070ec:	40015824 	.word	0x40015824
 80070f0:	40015800 	.word	0x40015800
 80070f4:	58005424 	.word	0x58005424
 80070f8:	58005400 	.word	0x58005400
 80070fc:	cccccccd 	.word	0xcccccccd
 8007100:	2300      	movs	r3, #0
 8007102:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6819      	ldr	r1, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b5b      	ldr	r3, [pc, #364]	; (800727c <HAL_SAI_Init+0x414>)
 8007110:	400b      	ands	r3, r1
 8007112:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6819      	ldr	r1, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007122:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007128:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712e:	431a      	orrs	r2, r3
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800713c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007148:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	051b      	lsls	r3, r3, #20
 8007150:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007156:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6859      	ldr	r1, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	4b43      	ldr	r3, [pc, #268]	; (8007280 <HAL_SAI_Init+0x418>)
 8007172:	400b      	ands	r3, r1
 8007174:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6859      	ldr	r1, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6899      	ldr	r1, [r3, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	4b39      	ldr	r3, [pc, #228]	; (8007284 <HAL_SAI_Init+0x41c>)
 80071a0:	400b      	ands	r3, r1
 80071a2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6899      	ldr	r1, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80071b4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80071ba:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80071c0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c6:	3b01      	subs	r3, #1
 80071c8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80071ca:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68d9      	ldr	r1, [r3, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	f24f 0320 	movw	r3, #61472	; 0xf020
 80071e2:	400b      	ands	r3, r1
 80071e4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68d9      	ldr	r1, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071fa:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80071fc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	3b01      	subs	r3, #1
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1c      	ldr	r2, [pc, #112]	; (8007288 <HAL_SAI_Init+0x420>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <HAL_SAI_Init+0x3bc>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1b      	ldr	r2, [pc, #108]	; (800728c <HAL_SAI_Init+0x424>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d119      	bne.n	8007258 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007228:	f023 0201 	bic.w	r2, r3, #1
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007236:	2b01      	cmp	r3, #1
 8007238:	d10e      	bne.n	8007258 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	3b01      	subs	r3, #1
 8007244:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007246:	431a      	orrs	r2, r3
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007250:	f043 0201 	orr.w	r2, r3, #1
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3728      	adds	r7, #40	; 0x28
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	f005c010 	.word	0xf005c010
 8007280:	ffff1ff0 	.word	0xffff1ff0
 8007284:	fff88000 	.word	0xfff88000
 8007288:	40015804 	.word	0x40015804
 800728c:	58005404 	.word	0x58005404

08007290 <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	4613      	mov	r3, r2
 800729e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80072a0:	f7f9 f956 	bl	8000550 <HAL_GetTick>
 80072a4:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_SAI_Receive+0x22>
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0e9      	b.n	800748a <HAL_SAI_Receive+0x1fa>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b01      	cmp	r3, #1
 80072c0:	f040 80e2 	bne.w	8007488 <HAL_SAI_Receive+0x1f8>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_SAI_Receive+0x42>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e0db      	b.n	800748a <HAL_SAI_Receive+0x1fa>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	88fa      	ldrh	r2, [r7, #6]
 80072e4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	88fa      	ldrh	r2, [r7, #6]
 80072ec:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2222      	movs	r2, #34	; 0x22
 80072f4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800730a:	2b00      	cmp	r3, #0
 800730c:	f040 80ac 	bne.w	8007468 <HAL_SAI_Receive+0x1d8>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800731e:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while (hsai->XferCount > 0U)
 8007320:	e0a2      	b.n	8007468 <HAL_SAI_Receive+0x1d8>
    {
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d06a      	beq.n	8007406 <HAL_SAI_Receive+0x176>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	d110      	bne.n	800735a <HAL_SAI_Receive+0xca>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <HAL_SAI_Receive+0xca>
        {
          *hsai->pBuffPtr = (uint8_t)hsai->Instance->DR;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69da      	ldr	r2, [r3, #28]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	679a      	str	r2, [r3, #120]	; 0x78
 8007358:	e04c      	b.n	80073f4 <HAL_SAI_Receive+0x164>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d819      	bhi.n	8007396 <HAL_SAI_Receive+0x106>
        {
          temp = hsai->Instance->DR;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	0a1a      	lsrs	r2, r3, #8
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	679a      	str	r2, [r3, #120]	; 0x78
 8007394:	e02e      	b.n	80073f4 <HAL_SAI_Receive+0x164>
        }
        else
        {
          temp = hsai->Instance->DR;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	b2d2      	uxtb	r2, r2
 80073a6:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	0a1a      	lsrs	r2, r3, #8
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 16);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	0c1a      	lsrs	r2, r3, #16
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 24);
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	0e1a      	lsrs	r2, r3, #24
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	679a      	str	r2, [r3, #120]	; 0x78
        }
        hsai->XferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8007404:	e030      	b.n	8007468 <HAL_SAI_Receive+0x1d8>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 8007406:	f7f9 f8a3 	bl	8000550 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d302      	bcc.n	800741c <HAL_SAI_Receive+0x18c>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d125      	bne.n	8007468 <HAL_SAI_Receive+0x1d8>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007422:	d021      	beq.n	8007468 <HAL_SAI_Receive+0x1d8>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800742a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800743c:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f95c 	bl	80076fc <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0208 	orr.w	r2, r2, #8
 8007452:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

          return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e010      	b.n	800748a <HAL_SAI_Receive+0x1fa>
    while (hsai->XferCount > 0U)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800746e:	2b00      	cmp	r3, #0
 8007470:	f47f af57 	bne.w	8007322 <HAL_SAI_Receive+0x92>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	e000      	b.n	800748a <HAL_SAI_Receive+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8007488:	2302      	movs	r3, #2
  }
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <SAI_InitI2S+0x2e>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d103      	bne.n	80074ca <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	651a      	str	r2, [r3, #80]	; 0x50
 80074c8:	e002      	b.n	80074d0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80074d6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074de:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e077      	b.n	80075ea <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d107      	bne.n	8007510 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800750c:	665a      	str	r2, [r3, #100]	; 0x64
 800750e:	e006      	b.n	800751e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007516:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	665a      	str	r2, [r3, #100]	; 0x64
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b03      	cmp	r3, #3
 8007522:	d84f      	bhi.n	80075c4 <SAI_InitI2S+0x130>
 8007524:	a201      	add	r2, pc, #4	; (adr r2, 800752c <SAI_InitI2S+0x98>)
 8007526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752a:	bf00      	nop
 800752c:	0800753d 	.word	0x0800753d
 8007530:	0800755f 	.word	0x0800755f
 8007534:	08007581 	.word	0x08007581
 8007538:	080075a3 	.word	0x080075a3

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2280      	movs	r2, #128	; 0x80
 8007540:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	085b      	lsrs	r3, r3, #1
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	085b      	lsrs	r3, r3, #1
 8007550:	011a      	lsls	r2, r3, #4
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2240      	movs	r2, #64	; 0x40
 800755a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800755c:	e035      	b.n	80075ca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2280      	movs	r2, #128	; 0x80
 8007562:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	019a      	lsls	r2, r3, #6
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	085b      	lsrs	r3, r3, #1
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2280      	movs	r2, #128	; 0x80
 800757c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800757e:	e024      	b.n	80075ca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	22c0      	movs	r2, #192	; 0xc0
 8007584:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	085b      	lsrs	r3, r3, #1
 800758a:	019a      	lsls	r2, r3, #6
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2280      	movs	r2, #128	; 0x80
 800759e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80075a0:	e013      	b.n	80075ca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	22e0      	movs	r2, #224	; 0xe0
 80075a6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	085b      	lsrs	r3, r3, #1
 80075ac:	019a      	lsls	r2, r3, #6
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	085b      	lsrs	r3, r3, #1
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2280      	movs	r2, #128	; 0x80
 80075c0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80075c2:	e002      	b.n	80075ca <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	75fb      	strb	r3, [r7, #23]
      break;
 80075c8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d10b      	bne.n	80075e8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d102      	bne.n	80075dc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2210      	movs	r2, #16
 80075da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d102      	bne.n	80075e8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2208      	movs	r2, #8
 80075e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop

080075f8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <SAI_InitPCM+0x2e>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d103      	bne.n	800762e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	651a      	str	r2, [r3, #80]	; 0x50
 800762c:	e002      	b.n	8007634 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007640:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007648:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800765c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b04      	cmp	r3, #4
 8007662:	d103      	bne.n	800766c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	659a      	str	r2, [r3, #88]	; 0x58
 800766a:	e002      	b.n	8007672 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	220d      	movs	r2, #13
 8007670:	659a      	str	r2, [r3, #88]	; 0x58
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b03      	cmp	r3, #3
 8007676:	d837      	bhi.n	80076e8 <SAI_InitPCM+0xf0>
 8007678:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <SAI_InitPCM+0x88>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	08007691 	.word	0x08007691
 8007684:	080076a7 	.word	0x080076a7
 8007688:	080076bd 	.word	0x080076bd
 800768c:	080076d3 	.word	0x080076d3
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2280      	movs	r2, #128	; 0x80
 8007694:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	011a      	lsls	r2, r3, #4
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2240      	movs	r2, #64	; 0x40
 80076a2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80076a4:	e023      	b.n	80076ee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2280      	movs	r2, #128	; 0x80
 80076aa:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2280      	movs	r2, #128	; 0x80
 80076b8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80076ba:	e018      	b.n	80076ee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	22c0      	movs	r2, #192	; 0xc0
 80076c0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2280      	movs	r2, #128	; 0x80
 80076ce:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80076d0:	e00d      	b.n	80076ee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	22e0      	movs	r2, #224	; 0xe0
 80076d6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2280      	movs	r2, #128	; 0x80
 80076e4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80076e6:	e002      	b.n	80076ee <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	75fb      	strb	r3, [r7, #23]
      break;
 80076ec:	bf00      	nop
  }

  return status;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007704:	4b18      	ldr	r3, [pc, #96]	; (8007768 <SAI_Disable+0x6c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a18      	ldr	r2, [pc, #96]	; (800776c <SAI_Disable+0x70>)
 800770a:	fba2 2303 	umull	r2, r3, r2, r3
 800770e:	0b1b      	lsrs	r3, r3, #12
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007726:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10a      	bne.n	8007744 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007734:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	72fb      	strb	r3, [r7, #11]
      break;
 8007742:	e009      	b.n	8007758 <SAI_Disable+0x5c>
    }
    count--;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3b01      	subs	r3, #1
 8007748:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e7      	bne.n	8007728 <SAI_Disable+0x2c>

  return status;
 8007758:	7afb      	ldrb	r3, [r7, #11]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	24000410 	.word	0x24000410
 800776c:	95cbec1b 	.word	0x95cbec1b

08007770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8007776:	f000 fb67 	bl	8007e48 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800777a:	4b48      	ldr	r3, [pc, #288]	; (800789c <main+0x12c>)
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11b      	bne.n	80077be <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007786:	f3bf 8f4f 	dsb	sy
}
 800778a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800778c:	f3bf 8f6f 	isb	sy
}
 8007790:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007792:	4b42      	ldr	r3, [pc, #264]	; (800789c <main+0x12c>)
 8007794:	2200      	movs	r2, #0
 8007796:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800779a:	f3bf 8f4f 	dsb	sy
}
 800779e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80077a0:	f3bf 8f6f 	isb	sy
}
 80077a4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80077a6:	4b3d      	ldr	r3, [pc, #244]	; (800789c <main+0x12c>)
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	4a3c      	ldr	r2, [pc, #240]	; (800789c <main+0x12c>)
 80077ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80077b2:	f3bf 8f4f 	dsb	sy
}
 80077b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80077b8:	f3bf 8f6f 	isb	sy
}
 80077bc:	e000      	b.n	80077c0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80077be:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80077c0:	4b36      	ldr	r3, [pc, #216]	; (800789c <main+0x12c>)
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d138      	bne.n	800783e <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80077cc:	4b33      	ldr	r3, [pc, #204]	; (800789c <main+0x12c>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80077d4:	f3bf 8f4f 	dsb	sy
}
 80077d8:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80077da:	4b30      	ldr	r3, [pc, #192]	; (800789c <main+0x12c>)
 80077dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077e0:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	0b5b      	lsrs	r3, r3, #13
 80077e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80077ea:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	08db      	lsrs	r3, r3, #3
 80077f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077f4:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80077fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007804:	4925      	ldr	r1, [pc, #148]	; (800789c <main+0x12c>)
 8007806:	4313      	orrs	r3, r2
 8007808:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	1e5a      	subs	r2, r3, #1
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1ef      	bne.n	80077f6 <main+0x86>
    } while(sets-- != 0U);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	1e5a      	subs	r2, r3, #1
 800781a:	60ba      	str	r2, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e5      	bne.n	80077ec <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8007820:	f3bf 8f4f 	dsb	sy
}
 8007824:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007826:	4b1d      	ldr	r3, [pc, #116]	; (800789c <main+0x12c>)
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	4a1c      	ldr	r2, [pc, #112]	; (800789c <main+0x12c>)
 800782c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007830:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007832:	f3bf 8f4f 	dsb	sy
}
 8007836:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007838:	f3bf 8f6f 	isb	sy
}
 800783c:	e000      	b.n	8007840 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800783e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007840:	f7f8 fe00 	bl	8000444 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 8007844:	2000      	movs	r0, #0
 8007846:	f7f8 fd63 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800784a:	2001      	movs	r0, #1
 800784c:	f7f8 fd60 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 8007850:	2000      	movs	r0, #0
 8007852:	f7f8 fdd9 	bl	8000408 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8007856:	2001      	movs	r0, #1
 8007858:	f7f8 fdd6 	bl	8000408 <BSP_LED_Off>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800785c:	f000 f824 	bl	80078a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007860:	f000 fa86 	bl	8007d70 <MX_GPIO_Init>
  MX_BDMA_Init();
 8007864:	f000 f9fa 	bl	8007c5c <MX_BDMA_Init>
  MX_SAI4_Init();
 8007868:	f000 f99a 	bl	8007ba0 <MX_SAI4_Init>
  MX_CRC_Init();
 800786c:	f000 f8ae 	bl	80079cc <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8007870:	f000 fb1c 	bl	8007eac <MX_PDM2PCM_Init>
  MX_DMA_Init();
 8007874:	f000 fa0c 	bl	8007c90 <MX_DMA_Init>
  MX_SAI1_Init();
 8007878:	f000 f95c 	bl	8007b34 <MX_SAI1_Init>
  MX_RAMECC_Init();
 800787c:	f000 f928 	bl	8007ad0 <MX_RAMECC_Init>
  MX_I2C4_Init();
 8007880:	f000 f8e6 	bl	8007a50 <MX_I2C4_Init>
//  MX_DFSDM1_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 8007884:	f000 f87e 	bl	8007984 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_SAI_Receive(&hsai_BlockA4, sexy_buffer, 4096, 1000);
 8007888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800788c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007890:	4903      	ldr	r1, [pc, #12]	; (80078a0 <main+0x130>)
 8007892:	4804      	ldr	r0, [pc, #16]	; (80078a4 <main+0x134>)
 8007894:	f7ff fcfc 	bl	8007290 <HAL_SAI_Receive>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8007898:	e7fe      	b.n	8007898 <main+0x128>
 800789a:	bf00      	nop
 800789c:	e000ed00 	.word	0xe000ed00
 80078a0:	2400049c 	.word	0x2400049c
 80078a4:	24001638 	.word	0x24001638

080078a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b09c      	sub	sp, #112	; 0x70
 80078ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80078ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b2:	224c      	movs	r2, #76	; 0x4c
 80078b4:	2100      	movs	r1, #0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f002 fd32 	bl	800a320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80078bc:	1d3b      	adds	r3, r7, #4
 80078be:	2220      	movs	r2, #32
 80078c0:	2100      	movs	r1, #0
 80078c2:	4618      	mov	r0, r3
 80078c4:	f002 fd2c 	bl	800a320 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80078c8:	2004      	movs	r0, #4
 80078ca:	f7fc fa65 	bl	8003d98 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80078ce:	2300      	movs	r3, #0
 80078d0:	603b      	str	r3, [r7, #0]
 80078d2:	4b2b      	ldr	r3, [pc, #172]	; (8007980 <SystemClock_Config+0xd8>)
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	4a2a      	ldr	r2, [pc, #168]	; (8007980 <SystemClock_Config+0xd8>)
 80078d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078dc:	6193      	str	r3, [r2, #24]
 80078de:	4b28      	ldr	r3, [pc, #160]	; (8007980 <SystemClock_Config+0xd8>)
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80078ea:	bf00      	nop
 80078ec:	4b24      	ldr	r3, [pc, #144]	; (8007980 <SystemClock_Config+0xd8>)
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f8:	d1f8      	bne.n	80078ec <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80078fa:	2302      	movs	r3, #2
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80078fe:	2301      	movs	r3, #1
 8007900:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007902:	2340      	movs	r3, #64	; 0x40
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007906:	2302      	movs	r3, #2
 8007908:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800790a:	2300      	movs	r3, #0
 800790c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800790e:	2304      	movs	r3, #4
 8007910:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8007912:	2318      	movs	r3, #24
 8007914:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8007916:	2301      	movs	r3, #1
 8007918:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 800791a:	237d      	movs	r3, #125	; 0x7d
 800791c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800791e:	2302      	movs	r3, #2
 8007920:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007922:	230c      	movs	r3, #12
 8007924:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007926:	2300      	movs	r3, #0
 8007928:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800792e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007932:	4618      	mov	r0, r3
 8007934:	f7fc fac8 	bl	8003ec8 <HAL_RCC_OscConfig>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800793e:	f000 fab0 	bl	8007ea2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007942:	233f      	movs	r3, #63	; 0x3f
 8007944:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007946:	2303      	movs	r3, #3
 8007948:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800794e:	2308      	movs	r3, #8
 8007950:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007952:	2340      	movs	r3, #64	; 0x40
 8007954:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007956:	2340      	movs	r3, #64	; 0x40
 8007958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800795a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800795e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007960:	2340      	movs	r3, #64	; 0x40
 8007962:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007964:	1d3b      	adds	r3, r7, #4
 8007966:	2102      	movs	r1, #2
 8007968:	4618      	mov	r0, r3
 800796a:	f7fc fe59 	bl	8004620 <HAL_RCC_ClockConfig>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007974:	f000 fa95 	bl	8007ea2 <Error_Handler>
  }
}
 8007978:	bf00      	nop
 800797a:	3770      	adds	r7, #112	; 0x70
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	58024800 	.word	0x58024800

08007984 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 8007988:	2200      	movs	r2, #0
 800798a:	2100      	movs	r1, #0
 800798c:	2082      	movs	r0, #130	; 0x82
 800798e:	f7f8 fec6 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8007992:	2082      	movs	r0, #130	; 0x82
 8007994:	f7f8 fedd 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8007998:	2200      	movs	r2, #0
 800799a:	2100      	movs	r1, #0
 800799c:	2038      	movs	r0, #56	; 0x38
 800799e:	f7f8 febe 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80079a2:	2038      	movs	r0, #56	; 0x38
 80079a4:	f7f8 fed5 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80079a8:	2200      	movs	r2, #0
 80079aa:	2100      	movs	r1, #0
 80079ac:	2006      	movs	r0, #6
 80079ae:	f7f8 feb6 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80079b2:	2006      	movs	r0, #6
 80079b4:	f7f8 fecd 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 80079b8:	2200      	movs	r2, #0
 80079ba:	2100      	movs	r1, #0
 80079bc:	2080      	movs	r0, #128	; 0x80
 80079be:	f7f8 feae 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 80079c2:	2080      	movs	r0, #128	; 0x80
 80079c4:	f7f8 fec5 	bl	8000752 <HAL_NVIC_EnableIRQ>
}
 80079c8:	bf00      	nop
 80079ca:	bd80      	pop	{r7, pc}

080079cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <MX_CRC_Init+0x78>)
 80079d4:	4a1c      	ldr	r2, [pc, #112]	; (8007a48 <MX_CRC_Init+0x7c>)
 80079d6:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80079d8:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <MX_CRC_Init+0x78>)
 80079da:	2200      	movs	r2, #0
 80079dc:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80079de:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <MX_CRC_Init+0x78>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80079e4:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <MX_CRC_Init+0x78>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80079ea:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <MX_CRC_Init+0x78>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80079f0:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <MX_CRC_Init+0x78>)
 80079f2:	2201      	movs	r2, #1
 80079f4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80079f6:	4813      	ldr	r0, [pc, #76]	; (8007a44 <MX_CRC_Init+0x78>)
 80079f8:	f7f8 ff42 	bl	8000880 <HAL_CRC_Init>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8007a02:	f000 fa4e 	bl	8007ea2 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <MX_CRC_Init+0x78>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <MX_CRC_Init+0x78>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0201 	orr.w	r2, r2, #1
 8007a14:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8007a16:	4b0d      	ldr	r3, [pc, #52]	; (8007a4c <MX_CRC_Init+0x80>)
 8007a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a1c:	4a0b      	ldr	r2, [pc, #44]	; (8007a4c <MX_CRC_Init+0x80>)
 8007a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a26:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <MX_CRC_Init+0x80>)
 8007a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a30:	607b      	str	r3, [r7, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8007a34:	4803      	ldr	r0, [pc, #12]	; (8007a44 <MX_CRC_Init+0x78>)
 8007a36:	f000 fa7d 	bl	8007f34 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	2400157c 	.word	0x2400157c
 8007a48:	58024c00 	.word	0x58024c00
 8007a4c:	58024400 	.word	0x58024400

08007a50 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8007a54:	4b1b      	ldr	r3, [pc, #108]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a56:	4a1c      	ldr	r2, [pc, #112]	; (8007ac8 <MX_I2C4_Init+0x78>)
 8007a58:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10B0DCFB;
 8007a5a:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a5c:	4a1b      	ldr	r2, [pc, #108]	; (8007acc <MX_I2C4_Init+0x7c>)
 8007a5e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 104;
 8007a60:	4b18      	ldr	r3, [pc, #96]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a62:	2268      	movs	r2, #104	; 0x68
 8007a64:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007a66:	4b17      	ldr	r3, [pc, #92]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a68:	2201      	movs	r2, #1
 8007a6a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007a6c:	4b15      	ldr	r3, [pc, #84]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8007a72:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007a78:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007a7e:	4b11      	ldr	r3, [pc, #68]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007a84:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8007a8a:	480e      	ldr	r0, [pc, #56]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a8c:	f7fb f9f2 	bl	8002e74 <HAL_I2C_Init>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8007a96:	f000 fa04 	bl	8007ea2 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4809      	ldr	r0, [pc, #36]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007a9e:	f7fc f8e4 	bl	8003c6a <HAL_I2CEx_ConfigAnalogFilter>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8007aa8:	f000 f9fb 	bl	8007ea2 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8007aac:	2100      	movs	r1, #0
 8007aae:	4805      	ldr	r0, [pc, #20]	; (8007ac4 <MX_I2C4_Init+0x74>)
 8007ab0:	f7fc f926 	bl	8003d00 <HAL_I2CEx_ConfigDigitalFilter>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8007aba:	f000 f9f2 	bl	8007ea2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8007abe:	bf00      	nop
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	240014a8 	.word	0x240014a8
 8007ac8:	58001c00 	.word	0x58001c00
 8007acc:	10b0dcfb 	.word	0x10b0dcfb

08007ad0 <MX_RAMECC_Init>:
  * @brief RAMECC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RAMECC_Init(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RAMECC_Init 1 */

  /* USER CODE END RAMECC_Init 1 */
  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 8007ad4:	4b11      	ldr	r3, [pc, #68]	; (8007b1c <MX_RAMECC_Init+0x4c>)
 8007ad6:	4a12      	ldr	r2, [pc, #72]	; (8007b20 <MX_RAMECC_Init+0x50>)
 8007ad8:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 8007ada:	4810      	ldr	r0, [pc, #64]	; (8007b1c <MX_RAMECC_Init+0x4c>)
 8007adc:	f7fc f9b6 	bl	8003e4c <HAL_RAMECC_Init>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 8007ae6:	f000 f9dc 	bl	8007ea2 <Error_Handler>
  }
  /** Initialize RAMECC2 M2 : SRAM2_0
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 8007aea:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <MX_RAMECC_Init+0x54>)
 8007aec:	4a0e      	ldr	r2, [pc, #56]	; (8007b28 <MX_RAMECC_Init+0x58>)
 8007aee:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 8007af0:	480c      	ldr	r0, [pc, #48]	; (8007b24 <MX_RAMECC_Init+0x54>)
 8007af2:	f7fc f9ab 	bl	8003e4c <HAL_RAMECC_Init>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 8007afc:	f000 f9d1 	bl	8007ea2 <Error_Handler>
  }
  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 8007b00:	4b0a      	ldr	r3, [pc, #40]	; (8007b2c <MX_RAMECC_Init+0x5c>)
 8007b02:	4a0b      	ldr	r2, [pc, #44]	; (8007b30 <MX_RAMECC_Init+0x60>)
 8007b04:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 8007b06:	4809      	ldr	r0, [pc, #36]	; (8007b2c <MX_RAMECC_Init+0x5c>)
 8007b08:	f7fc f9a0 	bl	8003e4c <HAL_RAMECC_Init>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 8007b12:	f000 f9c6 	bl	8007ea2 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 8007b16:	bf00      	nop
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	24001758 	.word	0x24001758
 8007b20:	48023020 	.word	0x48023020
 8007b24:	240016d0 	.word	0x240016d0
 8007b28:	48023040 	.word	0x48023040
 8007b2c:	240014f4 	.word	0x240014f4
 8007b30:	58027020 	.word	0x58027020

08007b34 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8007b38:	4b16      	ldr	r3, [pc, #88]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b3a:	4a17      	ldr	r2, [pc, #92]	; (8007b98 <MX_SAI1_Init+0x64>)
 8007b3c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8007b3e:	4b15      	ldr	r3, [pc, #84]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8007b44:	4b13      	ldr	r3, [pc, #76]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007b4a:	4b12      	ldr	r3, [pc, #72]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8007b50:	4b10      	ldr	r3, [pc, #64]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007b56:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8007b5c:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b5e:	4a0f      	ldr	r2, [pc, #60]	; (8007b9c <MX_SAI1_Init+0x68>)
 8007b60:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8007b62:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8007b68:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8007b6e:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4804      	ldr	r0, [pc, #16]	; (8007b94 <MX_SAI1_Init+0x60>)
 8007b82:	f7ff f93f 	bl	8006e04 <HAL_SAI_InitProtocol>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8007b8c:	f000 f989 	bl	8007ea2 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8007b90:	bf00      	nop
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	240015a0 	.word	0x240015a0
 8007b98:	40015824 	.word	0x40015824
 8007b9c:	0002ee00 	.word	0x0002ee00

08007ba0 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 8007ba4:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007ba6:	4a2c      	ldr	r2, [pc, #176]	; (8007c58 <MX_SAI4_Init+0xb8>)
 8007ba8:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8007baa:	4b2a      	ldr	r3, [pc, #168]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8007bb0:	4b28      	ldr	r3, [pc, #160]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 8007bb6:	4b27      	ldr	r3, [pc, #156]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bb8:	2280      	movs	r2, #128	; 0x80
 8007bba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_LSB;
 8007bbc:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007bc4:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8007bca:	4b22      	ldr	r3, [pc, #136]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007bd0:	4b20      	ldr	r3, [pc, #128]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8007bd6:	4b1f      	ldr	r3, [pc, #124]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bd8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007bdc:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007bde:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8007be4:	4b1b      	ldr	r3, [pc, #108]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8007bea:	4b1a      	ldr	r3, [pc, #104]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 8007bf0:	4b18      	ldr	r3, [pc, #96]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 8007bf8:	4b16      	ldr	r3, [pc, #88]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8007bfe:	4b15      	ldr	r3, [pc, #84]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c04:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 16;
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c08:	2210      	movs	r2, #16
 8007c0a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8007c0c:	4b11      	ldr	r3, [pc, #68]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c0e:	2201      	movs	r2, #1
 8007c10:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8007c12:	4b10      	ldr	r3, [pc, #64]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007c18:	4b0e      	ldr	r3, [pc, #56]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007c1e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8007c20:	4b0c      	ldr	r3, [pc, #48]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8007c26:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 8007c32:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 8007c38:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c3e:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8007c40:	4804      	ldr	r0, [pc, #16]	; (8007c54 <MX_SAI4_Init+0xb4>)
 8007c42:	f7ff f911 	bl	8006e68 <HAL_SAI_Init>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <MX_SAI4_Init+0xb0>
  {
    Error_Handler();
 8007c4c:	f000 f929 	bl	8007ea2 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8007c50:	bf00      	nop
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	24001638 	.word	0x24001638
 8007c58:	58005404 	.word	0x58005404

08007c5c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8007c62:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <MX_BDMA_Init+0x30>)
 8007c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c68:	4a08      	ldr	r2, [pc, #32]	; (8007c8c <MX_BDMA_Init+0x30>)
 8007c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c72:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <MX_BDMA_Init+0x30>)
 8007c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c7c:	607b      	str	r3, [r7, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]

}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	58024400 	.word	0x58024400

08007c90 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007c96:	4b33      	ldr	r3, [pc, #204]	; (8007d64 <MX_DMA_Init+0xd4>)
 8007c98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007c9c:	4a31      	ldr	r2, [pc, #196]	; (8007d64 <MX_DMA_Init+0xd4>)
 8007c9e:	f043 0302 	orr.w	r3, r3, #2
 8007ca2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007ca6:	4b2f      	ldr	r3, [pc, #188]	; (8007d64 <MX_DMA_Init+0xd4>)
 8007ca8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	607b      	str	r3, [r7, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007cb4:	4b2b      	ldr	r3, [pc, #172]	; (8007d64 <MX_DMA_Init+0xd4>)
 8007cb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cba:	4a2a      	ldr	r2, [pc, #168]	; (8007d64 <MX_DMA_Init+0xd4>)
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007cc4:	4b27      	ldr	r3, [pc, #156]	; (8007d64 <MX_DMA_Init+0xd4>)
 8007cc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8007cd2:	4b25      	ldr	r3, [pc, #148]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007cd4:	4a25      	ldr	r2, [pc, #148]	; (8007d6c <MX_DMA_Init+0xdc>)
 8007cd6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8007cd8:	4b23      	ldr	r3, [pc, #140]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007cde:	4b22      	ldr	r3, [pc, #136]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007ce0:	2280      	movs	r2, #128	; 0x80
 8007ce2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8007ce4:	4b20      	ldr	r3, [pc, #128]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cea:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8007cec:	4b1e      	ldr	r3, [pc, #120]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cf2:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007cf4:	4b1c      	ldr	r3, [pc, #112]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007cf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007cfa:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d02:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8007d04:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8007d0a:	4b17      	ldr	r3, [pc, #92]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007d0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007d10:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007d14:	2204      	movs	r2, #4
 8007d16:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007d18:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007d24:	4b10      	ldr	r3, [pc, #64]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8007d2a:	480f      	ldr	r0, [pc, #60]	; (8007d68 <MX_DMA_Init+0xd8>)
 8007d2c:	f7f8 fe92 	bl	8000a54 <HAL_DMA_Init>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <MX_DMA_Init+0xaa>
  {
    Error_Handler( );
 8007d36:	f000 f8b4 	bl	8007ea2 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	200c      	movs	r0, #12
 8007d40:	f7f8 fced 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007d44:	200c      	movs	r0, #12
 8007d46:	f7f8 fd04 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	2066      	movs	r0, #102	; 0x66
 8007d50:	f7f8 fce5 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8007d54:	2066      	movs	r0, #102	; 0x66
 8007d56:	f7f8 fcfc 	bl	8000752 <HAL_NVIC_EnableIRQ>

}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	58024400 	.word	0x58024400
 8007d68:	24001504 	.word	0x24001504
 8007d6c:	40020410 	.word	0x40020410

08007d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08a      	sub	sp, #40	; 0x28
 8007d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d76:	f107 0314 	add.w	r3, r7, #20
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	605a      	str	r2, [r3, #4]
 8007d80:	609a      	str	r2, [r3, #8]
 8007d82:	60da      	str	r2, [r3, #12]
 8007d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d86:	4b2e      	ldr	r3, [pc, #184]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d8c:	4a2c      	ldr	r2, [pc, #176]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007d8e:	f043 0302 	orr.w	r3, r3, #2
 8007d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d96:	4b2a      	ldr	r3, [pc, #168]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007da4:	4b26      	ldr	r3, [pc, #152]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007daa:	4a25      	ldr	r2, [pc, #148]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007dac:	f043 0301 	orr.w	r3, r3, #1
 8007db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007db4:	4b22      	ldr	r3, [pc, #136]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007dc2:	4b1f      	ldr	r3, [pc, #124]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dc8:	4a1d      	ldr	r2, [pc, #116]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007dca:	f043 0310 	orr.w	r3, r3, #16
 8007dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007dd2:	4b1b      	ldr	r3, [pc, #108]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	60bb      	str	r3, [r7, #8]
 8007dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007de0:	4b17      	ldr	r3, [pc, #92]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007de6:	4a16      	ldr	r2, [pc, #88]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007de8:	f043 0308 	orr.w	r3, r3, #8
 8007dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007df0:	4b13      	ldr	r3, [pc, #76]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007df6:	f003 0308 	and.w	r3, r3, #8
 8007dfa:	607b      	str	r3, [r7, #4]
 8007dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007dfe:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e04:	4a0e      	ldr	r2, [pc, #56]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007e06:	f043 0320 	orr.w	r3, r3, #32
 8007e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e0e:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <MX_GPIO_Init+0xd0>)
 8007e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e14:	f003 0320 	and.w	r3, r3, #32
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007e20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e2a:	f107 0314 	add.w	r3, r7, #20
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4804      	ldr	r0, [pc, #16]	; (8007e44 <MX_GPIO_Init+0xd4>)
 8007e32:	f7fa fe39 	bl	8002aa8 <HAL_GPIO_Init>

}
 8007e36:	bf00      	nop
 8007e38:	3728      	adds	r7, #40	; 0x28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	58024400 	.word	0x58024400
 8007e44:	58021000 	.word	0x58021000

08007e48 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007e4e:	463b      	mov	r3, r7
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	605a      	str	r2, [r3, #4]
 8007e56:	609a      	str	r2, [r3, #8]
 8007e58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007e5a:	f7f8 fc95 	bl	8000788 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8007e66:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007e6a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7f8 fcb2 	bl	80007f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8007e94:	2006      	movs	r0, #6
 8007e96:	f7f8 fc8f 	bl	80007b8 <HAL_MPU_Enable>

}
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007ea6:	b672      	cpsid	i
}
 8007ea8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007eaa:	e7fe      	b.n	8007eaa <Error_Handler+0x8>

08007eac <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8007eb0:	4b10      	ldr	r3, [pc, #64]	; (8007ef4 <MX_PDM2PCM_Init+0x48>)
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8007eb6:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <MX_PDM2PCM_Init+0x48>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <MX_PDM2PCM_Init+0x48>)
 8007ebe:	4a0e      	ldr	r2, [pc, #56]	; (8007ef8 <MX_PDM2PCM_Init+0x4c>)
 8007ec0:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8007ec2:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <MX_PDM2PCM_Init+0x48>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <MX_PDM2PCM_Init+0x48>)
 8007eca:	2201      	movs	r2, #1
 8007ecc:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8007ece:	4809      	ldr	r0, [pc, #36]	; (8007ef4 <MX_PDM2PCM_Init+0x48>)
 8007ed0:	f002 f832 	bl	8009f38 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8007ed4:	4b09      	ldr	r3, [pc, #36]	; (8007efc <MX_PDM2PCM_Init+0x50>)
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8007eda:	4b08      	ldr	r3, [pc, #32]	; (8007efc <MX_PDM2PCM_Init+0x50>)
 8007edc:	2210      	movs	r2, #16
 8007ede:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8007ee0:	4b06      	ldr	r3, [pc, #24]	; (8007efc <MX_PDM2PCM_Init+0x50>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8007ee6:	4905      	ldr	r1, [pc, #20]	; (8007efc <MX_PDM2PCM_Init+0x50>)
 8007ee8:	4802      	ldr	r0, [pc, #8]	; (8007ef4 <MX_PDM2PCM_Init+0x48>)
 8007eea:	f002 f8f5 	bl	800a0d8 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8007eee:	bf00      	nop
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	24001848 	.word	0x24001848
 8007ef8:	7d70a3d6 	.word	0x7d70a3d6
 8007efc:	24001840 	.word	0x24001840

08007f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f06:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <HAL_MspInit+0x30>)
 8007f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f0c:	4a08      	ldr	r2, [pc, #32]	; (8007f30 <HAL_MspInit+0x30>)
 8007f0e:	f043 0302 	orr.w	r3, r3, #2
 8007f12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f16:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <HAL_MspInit+0x30>)
 8007f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	607b      	str	r3, [r7, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	58024400 	.word	0x58024400

08007f34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a0b      	ldr	r2, [pc, #44]	; (8007f70 <HAL_CRC_MspInit+0x3c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d10e      	bne.n	8007f64 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007f46:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <HAL_CRC_MspInit+0x40>)
 8007f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f4c:	4a09      	ldr	r2, [pc, #36]	; (8007f74 <HAL_CRC_MspInit+0x40>)
 8007f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f56:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <HAL_CRC_MspInit+0x40>)
 8007f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	58024c00 	.word	0x58024c00
 8007f74:	58024400 	.word	0x58024400

08007f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b0b6      	sub	sp, #216	; 0xd8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f84:	2200      	movs	r2, #0
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	605a      	str	r2, [r3, #4]
 8007f8a:	609a      	str	r2, [r3, #8]
 8007f8c:	60da      	str	r2, [r3, #12]
 8007f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007f90:	f107 0310 	add.w	r3, r7, #16
 8007f94:	22b4      	movs	r2, #180	; 0xb4
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f002 f9c1 	bl	800a320 <memset>
  if(hi2c->Instance==I2C4)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a29      	ldr	r2, [pc, #164]	; (8008048 <HAL_I2C_MspInit+0xd0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d14a      	bne.n	800803e <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8007fa8:	2310      	movs	r3, #16
 8007faa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8007fac:	2300      	movs	r3, #0
 8007fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007fb2:	f107 0310 	add.w	r3, r7, #16
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fc fe92 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007fc2:	f7ff ff6e 	bl	8007ea2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fc6:	4b21      	ldr	r3, [pc, #132]	; (800804c <HAL_I2C_MspInit+0xd4>)
 8007fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fcc:	4a1f      	ldr	r2, [pc, #124]	; (800804c <HAL_I2C_MspInit+0xd4>)
 8007fce:	f043 0302 	orr.w	r3, r3, #2
 8007fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <HAL_I2C_MspInit+0xd4>)
 8007fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007fe4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007fec:	2312      	movs	r3, #18
 8007fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8007ffe:	2306      	movs	r3, #6
 8008000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008004:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008008:	4619      	mov	r1, r3
 800800a:	4811      	ldr	r0, [pc, #68]	; (8008050 <HAL_I2C_MspInit+0xd8>)
 800800c:	f7fa fd4c 	bl	8002aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8008010:	4b0e      	ldr	r3, [pc, #56]	; (800804c <HAL_I2C_MspInit+0xd4>)
 8008012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008016:	4a0d      	ldr	r2, [pc, #52]	; (800804c <HAL_I2C_MspInit+0xd4>)
 8008018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008020:	4b0a      	ldr	r3, [pc, #40]	; (800804c <HAL_I2C_MspInit+0xd4>)
 8008022:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802a:	60bb      	str	r3, [r7, #8]
 800802c:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800802e:	2200      	movs	r2, #0
 8008030:	2100      	movs	r1, #0
 8008032:	2060      	movs	r0, #96	; 0x60
 8008034:	f7f8 fb73 	bl	800071e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8008038:	2060      	movs	r0, #96	; 0x60
 800803a:	f7f8 fb8a 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800803e:	bf00      	nop
 8008040:	37d8      	adds	r7, #216	; 0xd8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	58001c00 	.word	0x58001c00
 800804c:	58024400 	.word	0x58024400
 8008050:	58020400 	.word	0x58020400

08008054 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b0ba      	sub	sp, #232	; 0xe8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800805c:	f107 0310 	add.w	r3, r7, #16
 8008060:	22b4      	movs	r2, #180	; 0xb4
 8008062:	2100      	movs	r1, #0
 8008064:	4618      	mov	r0, r3
 8008066:	f002 f95b 	bl	800a320 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4aaa      	ldr	r2, [pc, #680]	; (8008318 <HAL_SAI_MspInit+0x2c4>)
 8008070:	4293      	cmp	r3, r2
 8008072:	f040 80a5 	bne.w	80081c0 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8008076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800807a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800807c:	2300      	movs	r3, #0
 800807e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008080:	f107 0310 	add.w	r3, r7, #16
 8008084:	4618      	mov	r0, r3
 8008086:	f7fc fe2b 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8008090:	f7ff ff07 	bl	8007ea2 <Error_Handler>
    }

      if (SAI1_client == 0)
 8008094:	4ba1      	ldr	r3, [pc, #644]	; (800831c <HAL_SAI_MspInit+0x2c8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10e      	bne.n	80080ba <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800809c:	4ba0      	ldr	r3, [pc, #640]	; (8008320 <HAL_SAI_MspInit+0x2cc>)
 800809e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080a2:	4a9f      	ldr	r2, [pc, #636]	; (8008320 <HAL_SAI_MspInit+0x2cc>)
 80080a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80080a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80080ac:	4b9c      	ldr	r3, [pc, #624]	; (8008320 <HAL_SAI_MspInit+0x2cc>)
 80080ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80080ba:	4b98      	ldr	r3, [pc, #608]	; (800831c <HAL_SAI_MspInit+0x2c8>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3301      	adds	r3, #1
 80080c0:	4a96      	ldr	r2, [pc, #600]	; (800831c <HAL_SAI_MspInit+0x2c8>)
 80080c2:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80080c4:	2308      	movs	r3, #8
 80080c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ca:	2302      	movs	r3, #2
 80080cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080d6:	2300      	movs	r3, #0
 80080d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80080dc:	2306      	movs	r3, #6
 80080de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80080e6:	4619      	mov	r1, r3
 80080e8:	488e      	ldr	r0, [pc, #568]	; (8008324 <HAL_SAI_MspInit+0x2d0>)
 80080ea:	f7fa fcdd 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80080ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80080f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f6:	2302      	movs	r3, #2
 80080f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008102:	2300      	movs	r3, #0
 8008104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008108:	2306      	movs	r3, #6
 800810a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800810e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008112:	4619      	mov	r1, r3
 8008114:	4884      	ldr	r0, [pc, #528]	; (8008328 <HAL_SAI_MspInit+0x2d4>)
 8008116:	f7fa fcc7 	bl	8002aa8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800811a:	4b84      	ldr	r3, [pc, #528]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 800811c:	4a84      	ldr	r2, [pc, #528]	; (8008330 <HAL_SAI_MspInit+0x2dc>)
 800811e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8008120:	4b82      	ldr	r3, [pc, #520]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 8008122:	2258      	movs	r2, #88	; 0x58
 8008124:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008126:	4b81      	ldr	r3, [pc, #516]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 8008128:	2240      	movs	r2, #64	; 0x40
 800812a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800812c:	4b7f      	ldr	r3, [pc, #508]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 800812e:	2200      	movs	r2, #0
 8008130:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8008132:	4b7e      	ldr	r3, [pc, #504]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 8008134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008138:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800813a:	4b7c      	ldr	r3, [pc, #496]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 800813c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008140:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008142:	4b7a      	ldr	r3, [pc, #488]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 8008144:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008148:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800814a:	4b78      	ldr	r3, [pc, #480]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 800814c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008150:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8008152:	4b76      	ldr	r3, [pc, #472]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 8008154:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008158:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800815a:	4b74      	ldr	r3, [pc, #464]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 800815c:	2200      	movs	r2, #0
 800815e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8008160:	4872      	ldr	r0, [pc, #456]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 8008162:	f7f8 fc77 	bl	8000a54 <HAL_DMA_Init>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 800816c:	f7ff fe99 	bl	8007ea2 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8008170:	2306      	movs	r3, #6
 8008172:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8008176:	2300      	movs	r3, #0
 8008178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800817c:	2300      	movs	r3, #0
 800817e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008182:	2301      	movs	r3, #1
 8008184:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8008188:	2301      	movs	r3, #1
 800818a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800818e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008192:	4619      	mov	r1, r3
 8008194:	4865      	ldr	r0, [pc, #404]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 8008196:	f7fa fb6f 	bl	8002878 <HAL_DMAEx_ConfigMuxSync>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 80081a0:	f7ff fe7f 	bl	8007ea2 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a61      	ldr	r2, [pc, #388]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 80081a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80081ac:	4a5f      	ldr	r2, [pc, #380]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a5d      	ldr	r2, [pc, #372]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 80081b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80081ba:	4a5c      	ldr	r2, [pc, #368]	; (800832c <HAL_SAI_MspInit+0x2d8>)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a5b      	ldr	r2, [pc, #364]	; (8008334 <HAL_SAI_MspInit+0x2e0>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	f040 80a1 	bne.w	800830e <HAL_SAI_MspInit+0x2ba>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 80081cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80081d8:	f107 0310 	add.w	r3, r7, #16
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fc fd7f 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 80081e8:	f7ff fe5b 	bl	8007ea2 <Error_Handler>
    }

    if (SAI4_client == 0)
 80081ec:	4b52      	ldr	r3, [pc, #328]	; (8008338 <HAL_SAI_MspInit+0x2e4>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10e      	bne.n	8008212 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 80081f4:	4b4a      	ldr	r3, [pc, #296]	; (8008320 <HAL_SAI_MspInit+0x2cc>)
 80081f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081fa:	4a49      	ldr	r2, [pc, #292]	; (8008320 <HAL_SAI_MspInit+0x2cc>)
 80081fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008200:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008204:	4b46      	ldr	r3, [pc, #280]	; (8008320 <HAL_SAI_MspInit+0x2cc>)
 8008206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800820a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800820e:	60bb      	str	r3, [r7, #8]
 8008210:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8008212:	4b49      	ldr	r3, [pc, #292]	; (8008338 <HAL_SAI_MspInit+0x2e4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3301      	adds	r3, #1
 8008218:	4a47      	ldr	r2, [pc, #284]	; (8008338 <HAL_SAI_MspInit+0x2e4>)
 800821a:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800821c:	2330      	movs	r3, #48	; 0x30
 800821e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008222:	2302      	movs	r3, #2
 8008224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008228:	2300      	movs	r3, #0
 800822a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800822e:	2300      	movs	r3, #0
 8008230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8008234:	230a      	movs	r3, #10
 8008236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800823a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800823e:	4619      	mov	r1, r3
 8008240:	4838      	ldr	r0, [pc, #224]	; (8008324 <HAL_SAI_MspInit+0x2d0>)
 8008242:	f7fa fc31 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008246:	2340      	movs	r3, #64	; 0x40
 8008248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824c:	2302      	movs	r3, #2
 800824e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008252:	2300      	movs	r3, #0
 8008254:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008258:	2300      	movs	r3, #0
 800825a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800825e:	2301      	movs	r3, #1
 8008260:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008264:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008268:	4619      	mov	r1, r3
 800826a:	4834      	ldr	r0, [pc, #208]	; (800833c <HAL_SAI_MspInit+0x2e8>)
 800826c:	f7fa fc1c 	bl	8002aa8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 8008270:	4b33      	ldr	r3, [pc, #204]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 8008272:	4a34      	ldr	r2, [pc, #208]	; (8008344 <HAL_SAI_MspInit+0x2f0>)
 8008274:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8008276:	4b32      	ldr	r3, [pc, #200]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 8008278:	220f      	movs	r2, #15
 800827a:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800827c:	4b30      	ldr	r3, [pc, #192]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 800827e:	2200      	movs	r2, #0
 8008280:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008282:	4b2f      	ldr	r3, [pc, #188]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 8008284:	2200      	movs	r2, #0
 8008286:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8008288:	4b2d      	ldr	r3, [pc, #180]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 800828a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800828e:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008290:	4b2b      	ldr	r3, [pc, #172]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 8008292:	2200      	movs	r2, #0
 8008294:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008296:	4b2a      	ldr	r3, [pc, #168]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 8008298:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800829c:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800829e:	4b28      	ldr	r3, [pc, #160]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 80082a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082a4:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80082a6:	4b26      	ldr	r3, [pc, #152]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 80082a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80082ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 80082ae:	4824      	ldr	r0, [pc, #144]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 80082b0:	f7f8 fbd0 	bl	8000a54 <HAL_DMA_Init>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <HAL_SAI_MspInit+0x26a>
    {
      Error_Handler();
 80082ba:	f7ff fdf2 	bl	8007ea2 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 80082be:	230e      	movs	r3, #14
 80082c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80082c4:	2300      	movs	r3, #0
 80082c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 80082ca:	2300      	movs	r3, #0
 80082cc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 80082d0:	2301      	movs	r3, #1
 80082d2:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 80082d6:	2301      	movs	r3, #1
 80082d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 80082dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4817      	ldr	r0, [pc, #92]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 80082e4:	f7fa fac8 	bl	8002878 <HAL_DMAEx_ConfigMuxSync>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <HAL_SAI_MspInit+0x29e>
    {
      Error_Handler();
 80082ee:	f7ff fdd8 	bl	8007ea2 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a12      	ldr	r2, [pc, #72]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 80082f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80082fa:	4a11      	ldr	r2, [pc, #68]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a0f      	ldr	r2, [pc, #60]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 8008304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008308:	4a0d      	ldr	r2, [pc, #52]	; (8008340 <HAL_SAI_MspInit+0x2ec>)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800830e:	bf00      	nop
 8008310:	37e8      	adds	r7, #232	; 0xe8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	40015824 	.word	0x40015824
 800831c:	2400149c 	.word	0x2400149c
 8008320:	58024400 	.word	0x58024400
 8008324:	58021000 	.word	0x58021000
 8008328:	58021400 	.word	0x58021400
 800832c:	240017a0 	.word	0x240017a0
 8008330:	40020028 	.word	0x40020028
 8008334:	58005404 	.word	0x58005404
 8008338:	240014a0 	.word	0x240014a0
 800833c:	58020c00 	.word	0x58020c00
 8008340:	240016e0 	.word	0x240016e0
 8008344:	5802541c 	.word	0x5802541c

08008348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008348:	b480      	push	{r7}
 800834a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800834c:	e7fe      	b.n	800834c <NMI_Handler+0x4>

0800834e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800834e:	b480      	push	{r7}
 8008350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008352:	e7fe      	b.n	8008352 <HardFault_Handler+0x4>

08008354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008358:	e7fe      	b.n	8008358 <MemManage_Handler+0x4>

0800835a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800835a:	b480      	push	{r7}
 800835c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800835e:	e7fe      	b.n	800835e <BusFault_Handler+0x4>

08008360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008364:	e7fe      	b.n	8008364 <UsageFault_Handler+0x4>

08008366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008366:	b480      	push	{r7}
 8008368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800836a:	bf00      	nop
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008378:	bf00      	nop
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008382:	b480      	push	{r7}
 8008384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008386:	bf00      	nop
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008394:	f7f8 f8c8 	bl	8000528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008398:	bf00      	nop
 800839a:	bd80      	pop	{r7, pc}

0800839c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BSP_LED_On(LED1);
 80083a0:	2000      	movs	r0, #0
 80083a2:	f7f8 f813 	bl	80003cc <BSP_LED_On>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80083a6:	2001      	movs	r0, #1
 80083a8:	f7fa fd3f 	bl	8002e2a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 80083ac:	bf00      	nop
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80083b4:	4802      	ldr	r0, [pc, #8]	; (80083c0 <DMA1_Stream1_IRQHandler+0x10>)
 80083b6:	f7f9 f8eb 	bl	8001590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80083ba:	bf00      	nop
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	240017a0 	.word	0x240017a0

080083c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80083c8:	4803      	ldr	r0, [pc, #12]	; (80083d8 <DMA2_Stream0_IRQHandler+0x14>)
 80083ca:	f7f9 f8e1 	bl	8001590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  BSP_LED_On(LED1);
 80083ce:	2000      	movs	r0, #0
 80083d0:	f7f7 fffc 	bl	80003cc <BSP_LED_On>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80083d4:	bf00      	nop
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	24001504 	.word	0x24001504

080083dc <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80083e0:	4802      	ldr	r0, [pc, #8]	; (80083ec <I2C4_ER_IRQHandler+0x10>)
 80083e2:	f7fa fdd7 	bl	8002f94 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80083e6:	bf00      	nop
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	240014a8 	.word	0x240014a8

080083f0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 80083f4:	4802      	ldr	r0, [pc, #8]	; (8008400 <DMAMUX1_OVR_IRQHandler+0x10>)
 80083f6:	f7fa fb05 	bl	8002a04 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80083fa:	bf00      	nop
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	240017a0 	.word	0x240017a0

08008404 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8008408:	4802      	ldr	r0, [pc, #8]	; (8008414 <DMAMUX2_OVR_IRQHandler+0x10>)
 800840a:	f7fa fafb 	bl	8002a04 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */
  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800840e:	bf00      	nop
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	240016e0 	.word	0x240016e0

08008418 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 800841c:	4803      	ldr	r0, [pc, #12]	; (800842c <BDMA_Channel1_IRQHandler+0x14>)
 800841e:	f7f9 f8b7 	bl	8001590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */
  BSP_LED_On(LED2);
 8008422:	2001      	movs	r0, #1
 8008424:	f7f7 ffd2 	bl	80003cc <BSP_LED_On>
  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8008428:	bf00      	nop
 800842a:	bd80      	pop	{r7, pc}
 800842c:	240016e0 	.word	0x240016e0

08008430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008430:	b480      	push	{r7}
 8008432:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008434:	4b32      	ldr	r3, [pc, #200]	; (8008500 <SystemInit+0xd0>)
 8008436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843a:	4a31      	ldr	r2, [pc, #196]	; (8008500 <SystemInit+0xd0>)
 800843c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008444:	4b2f      	ldr	r3, [pc, #188]	; (8008504 <SystemInit+0xd4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 030f 	and.w	r3, r3, #15
 800844c:	2b06      	cmp	r3, #6
 800844e:	d807      	bhi.n	8008460 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008450:	4b2c      	ldr	r3, [pc, #176]	; (8008504 <SystemInit+0xd4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f023 030f 	bic.w	r3, r3, #15
 8008458:	4a2a      	ldr	r2, [pc, #168]	; (8008504 <SystemInit+0xd4>)
 800845a:	f043 0307 	orr.w	r3, r3, #7
 800845e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008460:	4b29      	ldr	r3, [pc, #164]	; (8008508 <SystemInit+0xd8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a28      	ldr	r2, [pc, #160]	; (8008508 <SystemInit+0xd8>)
 8008466:	f043 0301 	orr.w	r3, r3, #1
 800846a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800846c:	4b26      	ldr	r3, [pc, #152]	; (8008508 <SystemInit+0xd8>)
 800846e:	2200      	movs	r2, #0
 8008470:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008472:	4b25      	ldr	r3, [pc, #148]	; (8008508 <SystemInit+0xd8>)
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	4924      	ldr	r1, [pc, #144]	; (8008508 <SystemInit+0xd8>)
 8008478:	4b24      	ldr	r3, [pc, #144]	; (800850c <SystemInit+0xdc>)
 800847a:	4013      	ands	r3, r2
 800847c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800847e:	4b21      	ldr	r3, [pc, #132]	; (8008504 <SystemInit+0xd4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0308 	and.w	r3, r3, #8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d007      	beq.n	800849a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800848a:	4b1e      	ldr	r3, [pc, #120]	; (8008504 <SystemInit+0xd4>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f023 030f 	bic.w	r3, r3, #15
 8008492:	4a1c      	ldr	r2, [pc, #112]	; (8008504 <SystemInit+0xd4>)
 8008494:	f043 0307 	orr.w	r3, r3, #7
 8008498:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800849a:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <SystemInit+0xd8>)
 800849c:	2200      	movs	r2, #0
 800849e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80084a0:	4b19      	ldr	r3, [pc, #100]	; (8008508 <SystemInit+0xd8>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80084a6:	4b18      	ldr	r3, [pc, #96]	; (8008508 <SystemInit+0xd8>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80084ac:	4b16      	ldr	r3, [pc, #88]	; (8008508 <SystemInit+0xd8>)
 80084ae:	4a18      	ldr	r2, [pc, #96]	; (8008510 <SystemInit+0xe0>)
 80084b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80084b2:	4b15      	ldr	r3, [pc, #84]	; (8008508 <SystemInit+0xd8>)
 80084b4:	4a17      	ldr	r2, [pc, #92]	; (8008514 <SystemInit+0xe4>)
 80084b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80084b8:	4b13      	ldr	r3, [pc, #76]	; (8008508 <SystemInit+0xd8>)
 80084ba:	4a17      	ldr	r2, [pc, #92]	; (8008518 <SystemInit+0xe8>)
 80084bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80084be:	4b12      	ldr	r3, [pc, #72]	; (8008508 <SystemInit+0xd8>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80084c4:	4b10      	ldr	r3, [pc, #64]	; (8008508 <SystemInit+0xd8>)
 80084c6:	4a14      	ldr	r2, [pc, #80]	; (8008518 <SystemInit+0xe8>)
 80084c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80084ca:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <SystemInit+0xd8>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80084d0:	4b0d      	ldr	r3, [pc, #52]	; (8008508 <SystemInit+0xd8>)
 80084d2:	4a11      	ldr	r2, [pc, #68]	; (8008518 <SystemInit+0xe8>)
 80084d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80084d6:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <SystemInit+0xd8>)
 80084d8:	2200      	movs	r2, #0
 80084da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <SystemInit+0xd8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a09      	ldr	r2, [pc, #36]	; (8008508 <SystemInit+0xd8>)
 80084e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80084e8:	4b07      	ldr	r3, [pc, #28]	; (8008508 <SystemInit+0xd8>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80084ee:	4b0b      	ldr	r3, [pc, #44]	; (800851c <SystemInit+0xec>)
 80084f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80084f4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80084f6:	bf00      	nop
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	e000ed00 	.word	0xe000ed00
 8008504:	52002000 	.word	0x52002000
 8008508:	58024400 	.word	0x58024400
 800850c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008510:	02020200 	.word	0x02020200
 8008514:	01ff0000 	.word	0x01ff0000
 8008518:	01010280 	.word	0x01010280
 800851c:	52004000 	.word	0x52004000

08008520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008558 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008524:	f7ff ff84 	bl	8008430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008528:	480c      	ldr	r0, [pc, #48]	; (800855c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800852a:	490d      	ldr	r1, [pc, #52]	; (8008560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800852c:	4a0d      	ldr	r2, [pc, #52]	; (8008564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800852e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008530:	e002      	b.n	8008538 <LoopCopyDataInit>

08008532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008536:	3304      	adds	r3, #4

08008538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800853a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800853c:	d3f9      	bcc.n	8008532 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800853e:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008540:	4c0a      	ldr	r4, [pc, #40]	; (800856c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008544:	e001      	b.n	800854a <LoopFillZerobss>

08008546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008548:	3204      	adds	r2, #4

0800854a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800854a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800854c:	d3fb      	bcc.n	8008546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800854e:	f001 fec3 	bl	800a2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008552:	f7ff f90d 	bl	8007770 <main>
  bx  lr
 8008556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008558:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800855c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008560:	2400047c 	.word	0x2400047c
  ldr r2, =_sidata
 8008564:	0800a9a0 	.word	0x0800a9a0
  ldr r2, =_sbss
 8008568:	2400047c 	.word	0x2400047c
  ldr r4, =_ebss
 800856c:	24001894 	.word	0x24001894

08008570 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008570:	e7fe      	b.n	8008570 <ADC3_IRQHandler>
	...

08008574 <D16_GENERIC>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	b089      	sub	sp, #36	; 0x24
 800857a:	6993      	ldr	r3, [r2, #24]
 800857c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800857e:	9103      	str	r1, [sp, #12]
 8008580:	9307      	str	r3, [sp, #28]
 8008582:	69d3      	ldr	r3, [r2, #28]
 8008584:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8008588:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800858c:	9106      	str	r1, [sp, #24]
 800858e:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8008592:	2d00      	cmp	r5, #0
 8008594:	d063      	beq.n	800865e <D16_GENERIC+0xea>
 8008596:	f001 0520 	and.w	r5, r1, #32
 800859a:	f001 0110 	and.w	r1, r1, #16
 800859e:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8008680 <D16_GENERIC+0x10c>
 80085a2:	46c1      	mov	r9, r8
 80085a4:	9104      	str	r1, [sp, #16]
 80085a6:	2100      	movs	r1, #0
 80085a8:	9505      	str	r5, [sp, #20]
 80085aa:	e04d      	b.n	8008648 <D16_GENERIC+0xd4>
 80085ac:	5d87      	ldrb	r7, [r0, r6]
 80085ae:	7805      	ldrb	r5, [r0, #0]
 80085b0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80085b4:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 80085b8:	b2fe      	uxtb	r6, r7
 80085ba:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80085be:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 80085c2:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 80085c6:	441d      	add	r5, r3
 80085c8:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 80085cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80085d0:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80085d4:	0a9b      	lsrs	r3, r3, #10
 80085d6:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80085da:	4d27      	ldr	r5, [pc, #156]	; (8008678 <D16_GENERIC+0x104>)
 80085dc:	fb26 c505 	smlad	r5, r6, r5, ip
 80085e0:	4f26      	ldr	r7, [pc, #152]	; (800867c <D16_GENERIC+0x108>)
 80085e2:	fb26 fc07 	smuad	ip, r6, r7
 80085e6:	9e04      	ldr	r6, [sp, #16]
 80085e8:	f101 0801 	add.w	r8, r1, #1
 80085ec:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 80085f0:	b1ae      	cbz	r6, 800861e <D16_GENERIC+0xaa>
 80085f2:	442c      	add	r4, r5
 80085f4:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80085f8:	eba4 040a 	sub.w	r4, r4, sl
 80085fc:	46aa      	mov	sl, r5
 80085fe:	17e7      	asrs	r7, r4, #31
 8008600:	fba4 450b 	umull	r4, r5, r4, fp
 8008604:	e9cd 4500 	strd	r4, r5, [sp]
 8008608:	fb0b 5407 	mla	r4, fp, r7, r5
 800860c:	9401      	str	r4, [sp, #4]
 800860e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008612:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008616:	f145 0500 	adc.w	r5, r5, #0
 800861a:	006c      	lsls	r4, r5, #1
 800861c:	4625      	mov	r5, r4
 800861e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008622:	042d      	lsls	r5, r5, #16
 8008624:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008628:	2700      	movs	r7, #0
 800862a:	fb01 fb0b 	mul.w	fp, r1, fp
 800862e:	fa1f f188 	uxth.w	r1, r8
 8008632:	fbc9 6705 	smlal	r6, r7, r9, r5
 8008636:	9e03      	ldr	r6, [sp, #12]
 8008638:	10bd      	asrs	r5, r7, #2
 800863a:	f305 050f 	ssat	r5, #16, r5
 800863e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008642:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008644:	428d      	cmp	r5, r1
 8008646:	d90a      	bls.n	800865e <D16_GENERIC+0xea>
 8008648:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800864a:	2d01      	cmp	r5, #1
 800864c:	b2ee      	uxtb	r6, r5
 800864e:	d1ad      	bne.n	80085ac <D16_GENERIC+0x38>
 8008650:	9d05      	ldr	r5, [sp, #20]
 8008652:	f850 7b02 	ldr.w	r7, [r0], #2
 8008656:	2d00      	cmp	r5, #0
 8008658:	d0ae      	beq.n	80085b8 <D16_GENERIC+0x44>
 800865a:	ba7f      	rev16	r7, r7
 800865c:	e7ac      	b.n	80085b8 <D16_GENERIC+0x44>
 800865e:	2000      	movs	r0, #0
 8008660:	9906      	ldr	r1, [sp, #24]
 8008662:	61d3      	str	r3, [r2, #28]
 8008664:	9b07      	ldr	r3, [sp, #28]
 8008666:	f8c2 c008 	str.w	ip, [r2, #8]
 800866a:	60d1      	str	r1, [r2, #12]
 800866c:	6193      	str	r3, [r2, #24]
 800866e:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8008672:	b009      	add	sp, #36	; 0x24
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	00030001 	.word	0x00030001
 800867c:	00010003 	.word	0x00010003
 8008680:	24000000 	.word	0x24000000

08008684 <D24_GENERIC>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800868c:	b089      	sub	sp, #36	; 0x24
 800868e:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	6993      	ldr	r3, [r2, #24]
 8008694:	9104      	str	r1, [sp, #16]
 8008696:	9307      	str	r3, [sp, #28]
 8008698:	69d1      	ldr	r1, [r2, #28]
 800869a:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800869e:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	f000 8088 	beq.w	80087b8 <D24_GENERIC+0x134>
 80086a8:	f005 0620 	and.w	r6, r5, #32
 80086ac:	f005 0510 	and.w	r5, r5, #16
 80086b0:	f04f 0c00 	mov.w	ip, #0
 80086b4:	f8df e140 	ldr.w	lr, [pc, #320]	; 80087f8 <D24_GENERIC+0x174>
 80086b8:	9606      	str	r6, [sp, #24]
 80086ba:	9505      	str	r5, [sp, #20]
 80086bc:	e064      	b.n	8008788 <D24_GENERIC+0x104>
 80086be:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80086c2:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80086c6:	f810 b007 	ldrb.w	fp, [r0, r7]
 80086ca:	042d      	lsls	r5, r5, #16
 80086cc:	19f0      	adds	r0, r6, r7
 80086ce:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 80086d2:	44a9      	add	r9, r5
 80086d4:	fa5f f689 	uxtb.w	r6, r9
 80086d8:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80086dc:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80086e0:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 80086e4:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80086e8:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80086ec:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 80086f0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80086f4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80086f8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80086fc:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8008700:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8008704:	4d3a      	ldr	r5, [pc, #232]	; (80087f0 <D24_GENERIC+0x16c>)
 8008706:	fb26 8705 	smlad	r7, r6, r5, r8
 800870a:	4d3a      	ldr	r5, [pc, #232]	; (80087f4 <D24_GENERIC+0x170>)
 800870c:	fb26 3805 	smlad	r8, r6, r5, r3
 8008710:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8008714:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8008718:	2301      	movs	r3, #1
 800871a:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800871e:	fb26 f603 	smuad	r6, r6, r3
 8008722:	eb0c 0903 	add.w	r9, ip, r3
 8008726:	eb0b 0306 	add.w	r3, fp, r6
 800872a:	9e05      	ldr	r6, [sp, #20]
 800872c:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8008730:	b1ae      	cbz	r6, 800875e <D24_GENERIC+0xda>
 8008732:	442c      	add	r4, r5
 8008734:	9e03      	ldr	r6, [sp, #12]
 8008736:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800873a:	1ba4      	subs	r4, r4, r6
 800873c:	9503      	str	r5, [sp, #12]
 800873e:	17e7      	asrs	r7, r4, #31
 8008740:	fba4 450b 	umull	r4, r5, r4, fp
 8008744:	e9cd 4500 	strd	r4, r5, [sp]
 8008748:	fb0b 5407 	mla	r4, fp, r7, r5
 800874c:	9401      	str	r4, [sp, #4]
 800874e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008752:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008756:	f145 0500 	adc.w	r5, r5, #0
 800875a:	006c      	lsls	r4, r5, #1
 800875c:	4625      	mov	r5, r4
 800875e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008762:	03ad      	lsls	r5, r5, #14
 8008764:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008768:	2700      	movs	r7, #0
 800876a:	fb0c fb0b 	mul.w	fp, ip, fp
 800876e:	fa1f fc89 	uxth.w	ip, r9
 8008772:	fbca 6705 	smlal	r6, r7, sl, r5
 8008776:	9e04      	ldr	r6, [sp, #16]
 8008778:	10bd      	asrs	r5, r7, #2
 800877a:	f305 050f 	ssat	r5, #16, r5
 800877e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008782:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008784:	4565      	cmp	r5, ip
 8008786:	d917      	bls.n	80087b8 <D24_GENERIC+0x134>
 8008788:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800878a:	f890 9000 	ldrb.w	r9, [r0]
 800878e:	b2ef      	uxtb	r7, r5
 8008790:	2d01      	cmp	r5, #1
 8008792:	b23e      	sxth	r6, r7
 8008794:	d193      	bne.n	80086be <D24_GENERIC+0x3a>
 8008796:	9d06      	ldr	r5, [sp, #24]
 8008798:	b1dd      	cbz	r5, 80087d2 <D24_GENERIC+0x14e>
 800879a:	78c7      	ldrb	r7, [r0, #3]
 800879c:	ea4f 2609 	mov.w	r6, r9, lsl #8
 80087a0:	f01c 0f01 	tst.w	ip, #1
 80087a4:	ea4f 2507 	mov.w	r5, r7, lsl #8
 80087a8:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 80087ac:	d11a      	bne.n	80087e4 <D24_GENERIC+0x160>
 80087ae:	f890 9001 	ldrb.w	r9, [r0, #1]
 80087b2:	3002      	adds	r0, #2
 80087b4:	44b1      	add	r9, r6
 80087b6:	e78d      	b.n	80086d4 <D24_GENERIC+0x50>
 80087b8:	6093      	str	r3, [r2, #8]
 80087ba:	2000      	movs	r0, #0
 80087bc:	9b03      	ldr	r3, [sp, #12]
 80087be:	f8c2 800c 	str.w	r8, [r2, #12]
 80087c2:	6153      	str	r3, [r2, #20]
 80087c4:	9b07      	ldr	r3, [sp, #28]
 80087c6:	61d1      	str	r1, [r2, #28]
 80087c8:	6114      	str	r4, [r2, #16]
 80087ca:	6193      	str	r3, [r2, #24]
 80087cc:	b009      	add	sp, #36	; 0x24
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	7845      	ldrb	r5, [r0, #1]
 80087d4:	3003      	adds	r0, #3
 80087d6:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80087da:	022d      	lsls	r5, r5, #8
 80087dc:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80087e0:	44a9      	add	r9, r5
 80087e2:	e777      	b.n	80086d4 <D24_GENERIC+0x50>
 80087e4:	7886      	ldrb	r6, [r0, #2]
 80087e6:	3004      	adds	r0, #4
 80087e8:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80087ec:	44a9      	add	r9, r5
 80087ee:	e771      	b.n	80086d4 <D24_GENERIC+0x50>
 80087f0:	00030001 	.word	0x00030001
 80087f4:	00060007 	.word	0x00060007
 80087f8:	24000000 	.word	0x24000000

080087fc <D32_GENERIC>:
 80087fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008800:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8008804:	b089      	sub	sp, #36	; 0x24
 8008806:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008808:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800880a:	9302      	str	r3, [sp, #8]
 800880c:	6993      	ldr	r3, [r2, #24]
 800880e:	9104      	str	r1, [sp, #16]
 8008810:	9307      	str	r3, [sp, #28]
 8008812:	9503      	str	r5, [sp, #12]
 8008814:	69d1      	ldr	r1, [r2, #28]
 8008816:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8008818:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800881c:	2e00      	cmp	r6, #0
 800881e:	f000 8097 	beq.w	8008950 <D32_GENERIC+0x154>
 8008822:	f005 0620 	and.w	r6, r5, #32
 8008826:	f005 0510 	and.w	r5, r5, #16
 800882a:	f04f 0e00 	mov.w	lr, #0
 800882e:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008980 <D32_GENERIC+0x184>
 8008832:	9606      	str	r6, [sp, #24]
 8008834:	9505      	str	r5, [sp, #20]
 8008836:	e079      	b.n	800892c <D32_GENERIC+0x130>
 8008838:	783d      	ldrb	r5, [r7, #0]
 800883a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800883e:	042d      	lsls	r5, r5, #16
 8008840:	f810 a006 	ldrb.w	sl, [r0, r6]
 8008844:	f890 9000 	ldrb.w	r9, [r0]
 8008848:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800884c:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8008850:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8008854:	44a9      	add	r9, r5
 8008856:	fa5f f789 	uxtb.w	r7, r9
 800885a:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800885e:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8008862:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8008866:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800886a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800886e:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8008872:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8008876:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800887a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800887e:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8008882:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8008886:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800888a:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800888e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008892:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8008896:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800889a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800889e:	4d34      	ldr	r5, [pc, #208]	; (8008970 <D32_GENERIC+0x174>)
 80088a0:	fb29 8805 	smlad	r8, r9, r5, r8
 80088a4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80088a8:	fb26 8705 	smlad	r7, r6, r5, r8
 80088ac:	4d31      	ldr	r5, [pc, #196]	; (8008974 <D32_GENERIC+0x178>)
 80088ae:	fb29 3305 	smlad	r3, r9, r5, r3
 80088b2:	4d31      	ldr	r5, [pc, #196]	; (8008978 <D32_GENERIC+0x17c>)
 80088b4:	fb26 3805 	smlad	r8, r6, r5, r3
 80088b8:	2301      	movs	r3, #1
 80088ba:	fb29 f903 	smuad	r9, r9, r3
 80088be:	4b2f      	ldr	r3, [pc, #188]	; (800897c <D32_GENERIC+0x180>)
 80088c0:	fb26 9303 	smlad	r3, r6, r3, r9
 80088c4:	9e05      	ldr	r6, [sp, #20]
 80088c6:	f10e 0901 	add.w	r9, lr, #1
 80088ca:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80088ce:	b1ae      	cbz	r6, 80088fc <D32_GENERIC+0x100>
 80088d0:	442c      	add	r4, r5
 80088d2:	9e02      	ldr	r6, [sp, #8]
 80088d4:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80088d8:	1ba4      	subs	r4, r4, r6
 80088da:	9502      	str	r5, [sp, #8]
 80088dc:	17e7      	asrs	r7, r4, #31
 80088de:	fba4 450a 	umull	r4, r5, r4, sl
 80088e2:	e9cd 4500 	strd	r4, r5, [sp]
 80088e6:	fb0a 5407 	mla	r4, sl, r7, r5
 80088ea:	9401      	str	r4, [sp, #4]
 80088ec:	e9dd 4500 	ldrd	r4, r5, [sp]
 80088f0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80088f4:	f145 0500 	adc.w	r5, r5, #0
 80088f8:	006c      	lsls	r4, r5, #1
 80088fa:	4625      	mov	r5, r4
 80088fc:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8008900:	036d      	lsls	r5, r5, #13
 8008902:	9f03      	ldr	r7, [sp, #12]
 8008904:	fb0e fb0a 	mul.w	fp, lr, sl
 8008908:	fa1f fe89 	uxth.w	lr, r9
 800890c:	f04f 0a00 	mov.w	sl, #0
 8008910:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8008914:	9e04      	ldr	r6, [sp, #16]
 8008916:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800891a:	4657      	mov	r7, sl
 800891c:	10bd      	asrs	r5, r7, #2
 800891e:	f305 050f 	ssat	r5, #16, r5
 8008922:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008926:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008928:	4575      	cmp	r5, lr
 800892a:	d911      	bls.n	8008950 <D32_GENERIC+0x154>
 800892c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800892e:	b2ee      	uxtb	r6, r5
 8008930:	2d01      	cmp	r5, #1
 8008932:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8008936:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800893a:	f47f af7d 	bne.w	8008838 <D32_GENERIC+0x3c>
 800893e:	1d05      	adds	r5, r0, #4
 8008940:	f8d0 9000 	ldr.w	r9, [r0]
 8008944:	9806      	ldr	r0, [sp, #24]
 8008946:	b180      	cbz	r0, 800896a <D32_GENERIC+0x16e>
 8008948:	fa99 f999 	rev16.w	r9, r9
 800894c:	4628      	mov	r0, r5
 800894e:	e782      	b.n	8008856 <D32_GENERIC+0x5a>
 8008950:	6093      	str	r3, [r2, #8]
 8008952:	2000      	movs	r0, #0
 8008954:	9b02      	ldr	r3, [sp, #8]
 8008956:	f8c2 800c 	str.w	r8, [r2, #12]
 800895a:	6153      	str	r3, [r2, #20]
 800895c:	9b07      	ldr	r3, [sp, #28]
 800895e:	61d1      	str	r1, [r2, #28]
 8008960:	6114      	str	r4, [r2, #16]
 8008962:	6193      	str	r3, [r2, #24]
 8008964:	b009      	add	sp, #36	; 0x24
 8008966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896a:	4628      	mov	r0, r5
 800896c:	e773      	b.n	8008856 <D32_GENERIC+0x5a>
 800896e:	bf00      	nop
 8008970:	00060003 	.word	0x00060003
 8008974:	000a000c 	.word	0x000a000c
 8008978:	000c000a 	.word	0x000c000a
 800897c:	00030006 	.word	0x00030006
 8008980:	24000000 	.word	0x24000000

08008984 <D48_GENERIC>:
 8008984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	6913      	ldr	r3, [r2, #16]
 800898a:	b089      	sub	sp, #36	; 0x24
 800898c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	6953      	ldr	r3, [r2, #20]
 8008992:	9104      	str	r1, [sp, #16]
 8008994:	9302      	str	r3, [sp, #8]
 8008996:	6993      	ldr	r3, [r2, #24]
 8008998:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800899c:	9307      	str	r3, [sp, #28]
 800899e:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 80089a2:	9100      	str	r1, [sp, #0]
 80089a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80089a6:	9103      	str	r1, [sp, #12]
 80089a8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80089aa:	2c00      	cmp	r4, #0
 80089ac:	f000 80be 	beq.w	8008b2c <D48_GENERIC+0x1a8>
 80089b0:	f001 0420 	and.w	r4, r1, #32
 80089b4:	f001 0110 	and.w	r1, r1, #16
 80089b8:	f04f 0e00 	mov.w	lr, #0
 80089bc:	9105      	str	r1, [sp, #20]
 80089be:	9406      	str	r4, [sp, #24]
 80089c0:	4962      	ldr	r1, [pc, #392]	; (8008b4c <D48_GENERIC+0x1c8>)
 80089c2:	e0a0      	b.n	8008b06 <D48_GENERIC+0x182>
 80089c4:	eb00 0608 	add.w	r6, r0, r8
 80089c8:	f810 a008 	ldrb.w	sl, [r0, r8]
 80089cc:	f810 9005 	ldrb.w	r9, [r0, r5]
 80089d0:	5df4      	ldrb	r4, [r6, r7]
 80089d2:	443e      	add	r6, r7
 80089d4:	f890 b000 	ldrb.w	fp, [r0]
 80089d8:	0420      	lsls	r0, r4, #16
 80089da:	eb06 0408 	add.w	r4, r6, r8
 80089de:	f816 6008 	ldrb.w	r6, [r6, r8]
 80089e2:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 80089e6:	f814 8007 	ldrb.w	r8, [r4, r7]
 80089ea:	4427      	add	r7, r4
 80089ec:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 80089f0:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 80089f4:	eb0a 040b 	add.w	r4, sl, fp
 80089f8:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 80089fc:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8008a00:	b2f7      	uxtb	r7, r6
 8008a02:	b2e6      	uxtb	r6, r4
 8008a04:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8008a08:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8008a0c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8008a10:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008a14:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8008a18:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8008a1c:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8008a20:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8008a24:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8008a28:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008a2c:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8008a30:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008a34:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8008a38:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008a3c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8008a40:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008a44:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8008a48:	9d00      	ldr	r5, [sp, #0]
 8008a4a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008a4e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008a52:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8008a56:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008a5a:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8008a5e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8008a62:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8008a66:	4c3a      	ldr	r4, [pc, #232]	; (8008b50 <D48_GENERIC+0x1cc>)
 8008a68:	fb26 5a04 	smlad	sl, r6, r4, r5
 8008a6c:	4c39      	ldr	r4, [pc, #228]	; (8008b54 <D48_GENERIC+0x1d0>)
 8008a6e:	fb29 aa04 	smlad	sl, r9, r4, sl
 8008a72:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8008a76:	fb27 aa04 	smlad	sl, r7, r4, sl
 8008a7a:	4c37      	ldr	r4, [pc, #220]	; (8008b58 <D48_GENERIC+0x1d4>)
 8008a7c:	fb26 3304 	smlad	r3, r6, r4, r3
 8008a80:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8008a84:	fb29 3304 	smlad	r3, r9, r4, r3
 8008a88:	4c34      	ldr	r4, [pc, #208]	; (8008b5c <D48_GENERIC+0x1d8>)
 8008a8a:	fb27 3304 	smlad	r3, r7, r4, r3
 8008a8e:	2501      	movs	r5, #1
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	fb26 f605 	smuad	r6, r6, r5
 8008a96:	4b32      	ldr	r3, [pc, #200]	; (8008b60 <D48_GENERIC+0x1dc>)
 8008a98:	fb29 6903 	smlad	r9, r9, r3, r6
 8008a9c:	4b31      	ldr	r3, [pc, #196]	; (8008b64 <D48_GENERIC+0x1e0>)
 8008a9e:	fb27 9303 	smlad	r3, r7, r3, r9
 8008aa2:	9c05      	ldr	r4, [sp, #20]
 8008aa4:	eb0e 0805 	add.w	r8, lr, r5
 8008aa8:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8008aac:	b19c      	cbz	r4, 8008ad6 <D48_GENERIC+0x152>
 8008aae:	9c01      	ldr	r4, [sp, #4]
 8008ab0:	9d02      	ldr	r5, [sp, #8]
 8008ab2:	4454      	add	r4, sl
 8008ab4:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8008ab8:	f8cd a008 	str.w	sl, [sp, #8]
 8008abc:	1b64      	subs	r4, r4, r5
 8008abe:	fba4 ab09 	umull	sl, fp, r4, r9
 8008ac2:	17e7      	asrs	r7, r4, #31
 8008ac4:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8008ac8:	fb09 bb07 	mla	fp, r9, r7, fp
 8008acc:	f14b 0500 	adc.w	r5, fp, #0
 8008ad0:	006c      	lsls	r4, r5, #1
 8008ad2:	46a2      	mov	sl, r4
 8008ad4:	9401      	str	r4, [sp, #4]
 8008ad6:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8008ad8:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8008adc:	9d03      	ldr	r5, [sp, #12]
 8008ade:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008ae2:	fb0e f606 	mul.w	r6, lr, r6
 8008ae6:	fa1f fe88 	uxth.w	lr, r8
 8008aea:	f04f 0800 	mov.w	r8, #0
 8008aee:	fbc5 780a 	smlal	r7, r8, r5, sl
 8008af2:	4645      	mov	r5, r8
 8008af4:	10ac      	asrs	r4, r5, #2
 8008af6:	9d04      	ldr	r5, [sp, #16]
 8008af8:	f304 040f 	ssat	r4, #16, r4
 8008afc:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8008b00:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008b02:	4574      	cmp	r4, lr
 8008b04:	d912      	bls.n	8008b2c <D48_GENERIC+0x1a8>
 8008b06:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8008b08:	b2e5      	uxtb	r5, r4
 8008b0a:	2c01      	cmp	r4, #1
 8008b0c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8008b10:	f1c5 0700 	rsb	r7, r5, #0
 8008b14:	f47f af56 	bne.w	80089c4 <D48_GENERIC+0x40>
 8008b18:	9d06      	ldr	r5, [sp, #24]
 8008b1a:	e9d0 4600 	ldrd	r4, r6, [r0]
 8008b1e:	3006      	adds	r0, #6
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	f43f af6b 	beq.w	80089fc <D48_GENERIC+0x78>
 8008b26:	ba64      	rev16	r4, r4
 8008b28:	ba76      	rev16	r6, r6
 8008b2a:	e767      	b.n	80089fc <D48_GENERIC+0x78>
 8008b2c:	6093      	str	r3, [r2, #8]
 8008b2e:	2000      	movs	r0, #0
 8008b30:	9b00      	ldr	r3, [sp, #0]
 8008b32:	f8c2 c01c 	str.w	ip, [r2, #28]
 8008b36:	60d3      	str	r3, [r2, #12]
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	6113      	str	r3, [r2, #16]
 8008b3c:	9b02      	ldr	r3, [sp, #8]
 8008b3e:	6153      	str	r3, [r2, #20]
 8008b40:	9b07      	ldr	r3, [sp, #28]
 8008b42:	6193      	str	r3, [r2, #24]
 8008b44:	b009      	add	sp, #36	; 0x24
 8008b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4a:	bf00      	nop
 8008b4c:	24000000 	.word	0x24000000
 8008b50:	000f000a 	.word	0x000f000a
 8008b54:	00060003 	.word	0x00060003
 8008b58:	00150019 	.word	0x00150019
 8008b5c:	00190015 	.word	0x00190015
 8008b60:	00030006 	.word	0x00030006
 8008b64:	000a000f 	.word	0x000a000f

08008b68 <D64_GENERIC>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	6913      	ldr	r3, [r2, #16]
 8008b6e:	b089      	sub	sp, #36	; 0x24
 8008b70:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	6953      	ldr	r3, [r2, #20]
 8008b76:	9105      	str	r1, [sp, #20]
 8008b78:	9303      	str	r3, [sp, #12]
 8008b7a:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8008b7c:	6993      	ldr	r3, [r2, #24]
 8008b7e:	69d4      	ldr	r4, [r2, #28]
 8008b80:	9307      	str	r3, [sp, #28]
 8008b82:	9504      	str	r5, [sp, #16]
 8008b84:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	f000 80e8 	beq.w	8008d5e <D64_GENERIC+0x1f6>
 8008b8e:	6a11      	ldr	r1, [r2, #32]
 8008b90:	2500      	movs	r5, #0
 8008b92:	46b3      	mov	fp, r6
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	9106      	str	r1, [sp, #24]
 8008b98:	4978      	ldr	r1, [pc, #480]	; (8008d7c <D64_GENERIC+0x214>)
 8008b9a:	e0cc      	b.n	8008d36 <D64_GENERIC+0x1ce>
 8008b9c:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8008ba0:	f1ce 0c00 	rsb	ip, lr, #0
 8008ba4:	f890 9000 	ldrb.w	r9, [r0]
 8008ba8:	eb00 0708 	add.w	r7, r0, r8
 8008bac:	f810 6008 	ldrb.w	r6, [r0, r8]
 8008bb0:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8008bb4:	f817 000c 	ldrb.w	r0, [r7, ip]
 8008bb8:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8008bbc:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8008bc0:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8008bc4:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8008bc8:	f817 000c 	ldrb.w	r0, [r7, ip]
 8008bcc:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8008bd0:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8008bd4:	0400      	lsls	r0, r0, #16
 8008bd6:	4467      	add	r7, ip
 8008bd8:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8008bdc:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8008be0:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8008be4:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8008be8:	444e      	add	r6, r9
 8008bea:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8008bee:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8008bf2:	44c2      	add	sl, r8
 8008bf4:	b2f7      	uxtb	r7, r6
 8008bf6:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8008bfa:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8008bfe:	0e36      	lsrs	r6, r6, #24
 8008c00:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008c04:	fa5f fc8a 	uxtb.w	ip, sl
 8008c08:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8008c0c:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8008c10:	443c      	add	r4, r7
 8008c12:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8008c16:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008c1a:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8008c1e:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8008c22:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008c26:	4b56      	ldr	r3, [pc, #344]	; (8008d80 <D64_GENERIC+0x218>)
 8008c28:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8008c2c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008c30:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8008c34:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8008c38:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008c3c:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8008c40:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8008c44:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8008c48:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008c4c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008c50:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008c54:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8008c58:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008c5c:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8008c60:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8008c64:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8008c68:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008c6c:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8008c70:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008c74:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8008c78:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8008c7c:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8008c80:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8008c84:	fb28 b903 	smlad	r9, r8, r3, fp
 8008c88:	4b3e      	ldr	r3, [pc, #248]	; (8008d84 <D64_GENERIC+0x21c>)
 8008c8a:	fb26 9903 	smlad	r9, r6, r3, r9
 8008c8e:	4b3e      	ldr	r3, [pc, #248]	; (8008d88 <D64_GENERIC+0x220>)
 8008c90:	fb2c 9703 	smlad	r7, ip, r3, r9
 8008c94:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8008c98:	fb2a 7909 	smlad	r9, sl, r9, r7
 8008c9c:	4f3b      	ldr	r7, [pc, #236]	; (8008d8c <D64_GENERIC+0x224>)
 8008c9e:	9b02      	ldr	r3, [sp, #8]
 8008ca0:	fb28 3307 	smlad	r3, r8, r7, r3
 8008ca4:	fb2a 3317 	smladx	r3, sl, r7, r3
 8008ca8:	4f39      	ldr	r7, [pc, #228]	; (8008d90 <D64_GENERIC+0x228>)
 8008caa:	fb26 3307 	smlad	r3, r6, r7, r3
 8008cae:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8008cb2:	f04f 0e01 	mov.w	lr, #1
 8008cb6:	fb28 f80e 	smuad	r8, r8, lr
 8008cba:	4b36      	ldr	r3, [pc, #216]	; (8008d94 <D64_GENERIC+0x22c>)
 8008cbc:	fb26 8603 	smlad	r6, r6, r3, r8
 8008cc0:	4b35      	ldr	r3, [pc, #212]	; (8008d98 <D64_GENERIC+0x230>)
 8008cc2:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8008cc6:	4b35      	ldr	r3, [pc, #212]	; (8008d9c <D64_GENERIC+0x234>)
 8008cc8:	fb2a c303 	smlad	r3, sl, r3, ip
 8008ccc:	9f06      	ldr	r7, [sp, #24]
 8008cce:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8008cd2:	9302      	str	r3, [sp, #8]
 8008cd4:	b1cf      	cbz	r7, 8008d0a <D64_GENERIC+0x1a2>
 8008cd6:	9b00      	ldr	r3, [sp, #0]
 8008cd8:	444b      	add	r3, r9
 8008cda:	461e      	mov	r6, r3
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ce2:	1af6      	subs	r6, r6, r3
 8008ce4:	46b0      	mov	r8, r6
 8008ce6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8008cea:	e9cd 8900 	strd	r8, r9, [sp]
 8008cee:	fba6 8907 	umull	r8, r9, r6, r7
 8008cf2:	9e01      	ldr	r6, [sp, #4]
 8008cf4:	fb07 9306 	mla	r3, r7, r6, r9
 8008cf8:	4646      	mov	r6, r8
 8008cfa:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8008cfe:	f143 0700 	adc.w	r7, r3, #0
 8008d02:	fa07 f30e 	lsl.w	r3, r7, lr
 8008d06:	4699      	mov	r9, r3
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8008d0e:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8008d12:	9b04      	ldr	r3, [sp, #16]
 8008d14:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008d18:	2700      	movs	r7, #0
 8008d1a:	fb05 fc0c 	mul.w	ip, r5, ip
 8008d1e:	3501      	adds	r5, #1
 8008d20:	fbc3 6709 	smlal	r6, r7, r3, r9
 8008d24:	9b05      	ldr	r3, [sp, #20]
 8008d26:	10be      	asrs	r6, r7, #2
 8008d28:	f306 060f 	ssat	r6, #16, r6
 8008d2c:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8008d30:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008d32:	42ae      	cmp	r6, r5
 8008d34:	dd11      	ble.n	8008d5a <D64_GENERIC+0x1f2>
 8008d36:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 8008d3a:	f1be 0f01 	cmp.w	lr, #1
 8008d3e:	f47f af2d 	bne.w	8008b9c <D64_GENERIC+0x34>
 8008d42:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8008d44:	f100 0c08 	add.w	ip, r0, #8
 8008d48:	06bb      	lsls	r3, r7, #26
 8008d4a:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8008d4e:	d513      	bpl.n	8008d78 <D64_GENERIC+0x210>
 8008d50:	ba76      	rev16	r6, r6
 8008d52:	fa9a fa9a 	rev16.w	sl, sl
 8008d56:	4660      	mov	r0, ip
 8008d58:	e74c      	b.n	8008bf4 <D64_GENERIC+0x8c>
 8008d5a:	465e      	mov	r6, fp
 8008d5c:	9b02      	ldr	r3, [sp, #8]
 8008d5e:	6093      	str	r3, [r2, #8]
 8008d60:	2000      	movs	r0, #0
 8008d62:	9b00      	ldr	r3, [sp, #0]
 8008d64:	60d6      	str	r6, [r2, #12]
 8008d66:	6113      	str	r3, [r2, #16]
 8008d68:	9b03      	ldr	r3, [sp, #12]
 8008d6a:	61d4      	str	r4, [r2, #28]
 8008d6c:	6153      	str	r3, [r2, #20]
 8008d6e:	9b07      	ldr	r3, [sp, #28]
 8008d70:	6193      	str	r3, [r2, #24]
 8008d72:	b009      	add	sp, #36	; 0x24
 8008d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d78:	4660      	mov	r0, ip
 8008d7a:	e73b      	b.n	8008bf4 <D64_GENERIC+0x8c>
 8008d7c:	24000000 	.word	0x24000000
 8008d80:	001c0015 	.word	0x001c0015
 8008d84:	000f000a 	.word	0x000f000a
 8008d88:	00060003 	.word	0x00060003
 8008d8c:	0024002a 	.word	0x0024002a
 8008d90:	002e0030 	.word	0x002e0030
 8008d94:	00030006 	.word	0x00030006
 8008d98:	000a000f 	.word	0x000a000f
 8008d9c:	0015001c 	.word	0x0015001c

08008da0 <D80_GENERIC>:
 8008da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	b08b      	sub	sp, #44	; 0x2c
 8008da6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008da8:	9107      	str	r1, [sp, #28]
 8008daa:	6911      	ldr	r1, [r2, #16]
 8008dac:	9104      	str	r1, [sp, #16]
 8008dae:	6951      	ldr	r1, [r2, #20]
 8008db0:	9105      	str	r1, [sp, #20]
 8008db2:	6991      	ldr	r1, [r2, #24]
 8008db4:	9109      	str	r1, [sp, #36]	; 0x24
 8008db6:	69d1      	ldr	r1, [r2, #28]
 8008db8:	9102      	str	r1, [sp, #8]
 8008dba:	6891      	ldr	r1, [r2, #8]
 8008dbc:	9103      	str	r1, [sp, #12]
 8008dbe:	68d1      	ldr	r1, [r2, #12]
 8008dc0:	9101      	str	r1, [sp, #4]
 8008dc2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008dc4:	9106      	str	r1, [sp, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 810b 	beq.w	8008fe2 <D80_GENERIC+0x242>
 8008dcc:	6a13      	ldr	r3, [r2, #32]
 8008dce:	f04f 0800 	mov.w	r8, #0
 8008dd2:	f8df c260 	ldr.w	ip, [pc, #608]	; 8009034 <D80_GENERIC+0x294>
 8008dd6:	9308      	str	r3, [sp, #32]
 8008dd8:	9200      	str	r2, [sp, #0]
 8008dda:	e0ee      	b.n	8008fba <D80_GENERIC+0x21a>
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f890 e000 	ldrb.w	lr, [r0]
 8008de2:	b219      	sxth	r1, r3
 8008de4:	425c      	negs	r4, r3
 8008de6:	f810 9003 	ldrb.w	r9, [r0, r3]
 8008dea:	004e      	lsls	r6, r1, #1
 8008dec:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8008df0:	4431      	add	r1, r6
 8008df2:	1843      	adds	r3, r0, r1
 8008df4:	f810 b001 	ldrb.w	fp, [r0, r1]
 8008df8:	1919      	adds	r1, r3, r4
 8008dfa:	5d1b      	ldrb	r3, [r3, r4]
 8008dfc:	1948      	adds	r0, r1, r5
 8008dfe:	f811 a005 	ldrb.w	sl, [r1, r5]
 8008e02:	041b      	lsls	r3, r3, #16
 8008e04:	1907      	adds	r7, r0, r4
 8008e06:	5d01      	ldrb	r1, [r0, r4]
 8008e08:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8008e0c:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8008e10:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8008e14:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8008e18:	0409      	lsls	r1, r1, #16
 8008e1a:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8008e1e:	eb0b 0905 	add.w	r9, fp, r5
 8008e22:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8008e26:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8008e2a:	eb09 0b04 	add.w	fp, r9, r4
 8008e2e:	f819 4004 	ldrb.w	r4, [r9, r4]
 8008e32:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008e36:	4473      	add	r3, lr
 8008e38:	eb0b 0006 	add.w	r0, fp, r6
 8008e3c:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8008e40:	4439      	add	r1, r7
 8008e42:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8008e46:	b2df      	uxtb	r7, r3
 8008e48:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8008e4c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8008e50:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8008e54:	fa5f fa81 	uxtb.w	sl, r1
 8008e58:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8008e5c:	9c02      	ldr	r4, [sp, #8]
 8008e5e:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8008e62:	441c      	add	r4, r3
 8008e64:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8008e68:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8008e6c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008e70:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008e74:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8008e78:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8008e7c:	b2ed      	uxtb	r5, r5
 8008e7e:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8008e82:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008e86:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8008e8a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8008e8e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8008e92:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8008e96:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8008e9a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8008e9e:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8008ea2:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8008ea6:	0e09      	lsrs	r1, r1, #24
 8008ea8:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008eac:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008eb0:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008eb4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008eb8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008ebc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008ec0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008ec4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8008ec8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008ecc:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8008ed0:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008ed4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008ed8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008edc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008ee0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008ee4:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8008ee8:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8008eec:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8008ef0:	9202      	str	r2, [sp, #8]
 8008ef2:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8008ef6:	4a43      	ldr	r2, [pc, #268]	; (8009004 <D80_GENERIC+0x264>)
 8008ef8:	9f01      	ldr	r7, [sp, #4]
 8008efa:	fb23 7a02 	smlad	sl, r3, r2, r7
 8008efe:	4a42      	ldr	r2, [pc, #264]	; (8009008 <D80_GENERIC+0x268>)
 8008f00:	fb26 aa02 	smlad	sl, r6, r2, sl
 8008f04:	4a41      	ldr	r2, [pc, #260]	; (800900c <D80_GENERIC+0x26c>)
 8008f06:	fb24 aa02 	smlad	sl, r4, r2, sl
 8008f0a:	4a41      	ldr	r2, [pc, #260]	; (8009010 <D80_GENERIC+0x270>)
 8008f0c:	fb21 a702 	smlad	r7, r1, r2, sl
 8008f10:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8008f14:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8008f18:	4a3e      	ldr	r2, [pc, #248]	; (8009014 <D80_GENERIC+0x274>)
 8008f1a:	9f03      	ldr	r7, [sp, #12]
 8008f1c:	fb23 7e02 	smlad	lr, r3, r2, r7
 8008f20:	4a3d      	ldr	r2, [pc, #244]	; (8009018 <D80_GENERIC+0x278>)
 8008f22:	fb26 ee02 	smlad	lr, r6, r2, lr
 8008f26:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8008f2a:	fb24 e707 	smlad	r7, r4, r7, lr
 8008f2e:	4a3b      	ldr	r2, [pc, #236]	; (800901c <D80_GENERIC+0x27c>)
 8008f30:	fb21 7702 	smlad	r7, r1, r2, r7
 8008f34:	4a3a      	ldr	r2, [pc, #232]	; (8009020 <D80_GENERIC+0x280>)
 8008f36:	fb25 7202 	smlad	r2, r5, r2, r7
 8008f3a:	f04f 0901 	mov.w	r9, #1
 8008f3e:	9201      	str	r2, [sp, #4]
 8008f40:	fb23 f909 	smuad	r9, r3, r9
 8008f44:	4b37      	ldr	r3, [pc, #220]	; (8009024 <D80_GENERIC+0x284>)
 8008f46:	fb26 9603 	smlad	r6, r6, r3, r9
 8008f4a:	4f37      	ldr	r7, [pc, #220]	; (8009028 <D80_GENERIC+0x288>)
 8008f4c:	fb24 6407 	smlad	r4, r4, r7, r6
 8008f50:	4f36      	ldr	r7, [pc, #216]	; (800902c <D80_GENERIC+0x28c>)
 8008f52:	fb21 4707 	smlad	r7, r1, r7, r4
 8008f56:	4936      	ldr	r1, [pc, #216]	; (8009030 <D80_GENERIC+0x290>)
 8008f58:	fb25 7301 	smlad	r3, r5, r1, r7
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8008f62:	9b08      	ldr	r3, [sp, #32]
 8008f64:	b193      	cbz	r3, 8008f8c <D80_GENERIC+0x1ec>
 8008f66:	9a04      	ldr	r2, [sp, #16]
 8008f68:	4452      	add	r2, sl
 8008f6a:	4614      	mov	r4, r2
 8008f6c:	9a05      	ldr	r2, [sp, #20]
 8008f6e:	f8cd a014 	str.w	sl, [sp, #20]
 8008f72:	1aa4      	subs	r4, r4, r2
 8008f74:	fba4 1203 	umull	r1, r2, r4, r3
 8008f78:	17e7      	asrs	r7, r4, #31
 8008f7a:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8008f7e:	fb03 2207 	mla	r2, r3, r7, r2
 8008f82:	f142 0500 	adc.w	r5, r2, #0
 8008f86:	006b      	lsls	r3, r5, #1
 8008f88:	469a      	mov	sl, r3
 8008f8a:	9304      	str	r3, [sp, #16]
 8008f8c:	9e00      	ldr	r6, [sp, #0]
 8008f8e:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8008f92:	9a06      	ldr	r2, [sp, #24]
 8008f94:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008f98:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8008f9a:	2500      	movs	r5, #0
 8008f9c:	fb08 f303 	mul.w	r3, r8, r3
 8008fa0:	fbc2 450a 	smlal	r4, r5, r2, sl
 8008fa4:	9a07      	ldr	r2, [sp, #28]
 8008fa6:	f108 0801 	add.w	r8, r8, #1
 8008faa:	10a9      	asrs	r1, r5, #2
 8008fac:	f301 010f 	ssat	r1, #16, r1
 8008fb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008fb4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8008fb6:	4543      	cmp	r3, r8
 8008fb8:	dd12      	ble.n	8008fe0 <D80_GENERIC+0x240>
 8008fba:	9b00      	ldr	r3, [sp, #0]
 8008fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	f47f af0c 	bne.w	8008ddc <D80_GENERIC+0x3c>
 8008fc4:	9b00      	ldr	r3, [sp, #0]
 8008fc6:	6885      	ldr	r5, [r0, #8]
 8008fc8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8008fca:	06b2      	lsls	r2, r6, #26
 8008fcc:	e9d0 3100 	ldrd	r3, r1, [r0]
 8008fd0:	f100 000a 	add.w	r0, r0, #10
 8008fd4:	f57f af35 	bpl.w	8008e42 <D80_GENERIC+0xa2>
 8008fd8:	ba5b      	rev16	r3, r3
 8008fda:	ba49      	rev16	r1, r1
 8008fdc:	ba6d      	rev16	r5, r5
 8008fde:	e730      	b.n	8008e42 <D80_GENERIC+0xa2>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	6093      	str	r3, [r2, #8]
 8008fe8:	9b01      	ldr	r3, [sp, #4]
 8008fea:	60d3      	str	r3, [r2, #12]
 8008fec:	9b02      	ldr	r3, [sp, #8]
 8008fee:	61d3      	str	r3, [r2, #28]
 8008ff0:	9b04      	ldr	r3, [sp, #16]
 8008ff2:	6113      	str	r3, [r2, #16]
 8008ff4:	9b05      	ldr	r3, [sp, #20]
 8008ff6:	6153      	str	r3, [r2, #20]
 8008ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ffa:	6193      	str	r3, [r2, #24]
 8008ffc:	b00b      	add	sp, #44	; 0x2c
 8008ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009002:	bf00      	nop
 8009004:	002d0024 	.word	0x002d0024
 8009008:	001c0015 	.word	0x001c0015
 800900c:	000f000a 	.word	0x000f000a
 8009010:	00060003 	.word	0x00060003
 8009014:	0037003f 	.word	0x0037003f
 8009018:	00450049 	.word	0x00450049
 800901c:	00490045 	.word	0x00490045
 8009020:	003f0037 	.word	0x003f0037
 8009024:	00030006 	.word	0x00030006
 8009028:	000a000f 	.word	0x000a000f
 800902c:	0015001c 	.word	0x0015001c
 8009030:	0024002d 	.word	0x0024002d
 8009034:	24000000 	.word	0x24000000

08009038 <D128_GENERIC>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	b08d      	sub	sp, #52	; 0x34
 800903e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009040:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8009044:	9109      	str	r1, [sp, #36]	; 0x24
 8009046:	6911      	ldr	r1, [r2, #16]
 8009048:	9201      	str	r2, [sp, #4]
 800904a:	9106      	str	r1, [sp, #24]
 800904c:	6951      	ldr	r1, [r2, #20]
 800904e:	9107      	str	r1, [sp, #28]
 8009050:	6991      	ldr	r1, [r2, #24]
 8009052:	910b      	str	r1, [sp, #44]	; 0x2c
 8009054:	6891      	ldr	r1, [r2, #8]
 8009056:	9103      	str	r1, [sp, #12]
 8009058:	68d1      	ldr	r1, [r2, #12]
 800905a:	9102      	str	r1, [sp, #8]
 800905c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800905e:	9108      	str	r1, [sp, #32]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 8183 	beq.w	800936c <D128_GENERIC+0x334>
 8009066:	2300      	movs	r3, #0
 8009068:	6a12      	ldr	r2, [r2, #32]
 800906a:	4681      	mov	r9, r0
 800906c:	920a      	str	r2, [sp, #40]	; 0x28
 800906e:	e9cd a304 	strd	sl, r3, [sp, #16]
 8009072:	e165      	b.n	8009340 <D128_GENERIC+0x308>
 8009074:	b2d2      	uxtb	r2, r2
 8009076:	f899 b000 	ldrb.w	fp, [r9]
 800907a:	b213      	sxth	r3, r2
 800907c:	4255      	negs	r5, r2
 800907e:	f819 0002 	ldrb.w	r0, [r9, r2]
 8009082:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009086:	009f      	lsls	r7, r3, #2
 8009088:	eb09 0402 	add.w	r4, r9, r2
 800908c:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8009090:	f819 8002 	ldrb.w	r8, [r9, r2]
 8009094:	443b      	add	r3, r7
 8009096:	1962      	adds	r2, r4, r5
 8009098:	5d64      	ldrb	r4, [r4, r5]
 800909a:	eb02 0c03 	add.w	ip, r2, r3
 800909e:	0424      	lsls	r4, r4, #16
 80090a0:	5cd3      	ldrb	r3, [r2, r3]
 80090a2:	eb0c 0e05 	add.w	lr, ip, r5
 80090a6:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 80090aa:	f81c 2005 	ldrb.w	r2, [ip, r5]
 80090ae:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 80090b2:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 80090b6:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 80090ba:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 80090be:	eb0c 0e06 	add.w	lr, ip, r6
 80090c2:	f81c a006 	ldrb.w	sl, [ip, r6]
 80090c6:	0412      	lsls	r2, r2, #16
 80090c8:	445c      	add	r4, fp
 80090ca:	eb0e 0c05 	add.w	ip, lr, r5
 80090ce:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 80090d2:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80090d6:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 80090da:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80090de:	041b      	lsls	r3, r3, #16
 80090e0:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80090e4:	eb00 0b06 	add.w	fp, r0, r6
 80090e8:	5d80      	ldrb	r0, [r0, r6]
 80090ea:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 80090ee:	f81b 6005 	ldrb.w	r6, [fp, r5]
 80090f2:	eb0b 0a05 	add.w	sl, fp, r5
 80090f6:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 80090fa:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 80090fe:	0436      	lsls	r6, r6, #16
 8009100:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8009104:	4442      	add	r2, r8
 8009106:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800910a:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800910e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009112:	44b9      	add	r9, r7
 8009114:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8009118:	4463      	add	r3, ip
 800911a:	eb06 0508 	add.w	r5, r6, r8
 800911e:	b2e7      	uxtb	r7, r4
 8009120:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8009124:	499b      	ldr	r1, [pc, #620]	; (8009394 <D128_GENERIC+0x35c>)
 8009126:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800912a:	0e24      	lsrs	r4, r4, #24
 800912c:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8009130:	b2d7      	uxtb	r7, r2
 8009132:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8009136:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800913a:	9904      	ldr	r1, [sp, #16]
 800913c:	4461      	add	r1, ip
 800913e:	468c      	mov	ip, r1
 8009140:	4994      	ldr	r1, [pc, #592]	; (8009394 <D128_GENERIC+0x35c>)
 8009142:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8009146:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800914a:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800914e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009152:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8009156:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800915a:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800915e:	0e12      	lsrs	r2, r2, #24
 8009160:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8009164:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009168:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800916c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009170:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8009174:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009178:	b2da      	uxtb	r2, r3
 800917a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800917e:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8009182:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009186:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800918a:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800918e:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8009192:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8009196:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800919a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800919e:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 80091a2:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 80091a6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80091aa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80091ae:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80091b2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80091b6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80091ba:	0e1b      	lsrs	r3, r3, #24
 80091bc:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 80091c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80091c4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80091c8:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 80091cc:	b2eb      	uxtb	r3, r5
 80091ce:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80091d2:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 80091d6:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80091da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80091de:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 80091e2:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 80091e6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80091ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80091ee:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80091f2:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 80091f6:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 80091fa:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80091fe:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8009202:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8009206:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800920a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800920e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009212:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8009216:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800921a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800921e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009222:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8009226:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800922a:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800922e:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8009232:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8009236:	9104      	str	r1, [sp, #16]
 8009238:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800923c:	9902      	ldr	r1, [sp, #8]
 800923e:	4a56      	ldr	r2, [pc, #344]	; (8009398 <D128_GENERIC+0x360>)
 8009240:	fb2b 1202 	smlad	r2, fp, r2, r1
 8009244:	4955      	ldr	r1, [pc, #340]	; (800939c <D128_GENERIC+0x364>)
 8009246:	fb28 2201 	smlad	r2, r8, r1, r2
 800924a:	4955      	ldr	r1, [pc, #340]	; (80093a0 <D128_GENERIC+0x368>)
 800924c:	fb27 2201 	smlad	r2, r7, r1, r2
 8009250:	4954      	ldr	r1, [pc, #336]	; (80093a4 <D128_GENERIC+0x36c>)
 8009252:	fb26 2201 	smlad	r2, r6, r1, r2
 8009256:	4954      	ldr	r1, [pc, #336]	; (80093a8 <D128_GENERIC+0x370>)
 8009258:	fb24 2201 	smlad	r2, r4, r1, r2
 800925c:	4953      	ldr	r1, [pc, #332]	; (80093ac <D128_GENERIC+0x374>)
 800925e:	fb20 2201 	smlad	r2, r0, r1, r2
 8009262:	4953      	ldr	r1, [pc, #332]	; (80093b0 <D128_GENERIC+0x378>)
 8009264:	fb23 2201 	smlad	r2, r3, r1, r2
 8009268:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800926c:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8009270:	4950      	ldr	r1, [pc, #320]	; (80093b4 <D128_GENERIC+0x37c>)
 8009272:	9a03      	ldr	r2, [sp, #12]
 8009274:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8009278:	4a4f      	ldr	r2, [pc, #316]	; (80093b8 <D128_GENERIC+0x380>)
 800927a:	fb28 ce02 	smlad	lr, r8, r2, ip
 800927e:	f8df c150 	ldr.w	ip, [pc, #336]	; 80093d0 <D128_GENERIC+0x398>
 8009282:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8009286:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80093d4 <D128_GENERIC+0x39c>
 800928a:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800928e:	f8df e148 	ldr.w	lr, [pc, #328]	; 80093d8 <D128_GENERIC+0x3a0>
 8009292:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8009296:	f8df c144 	ldr.w	ip, [pc, #324]	; 80093dc <D128_GENERIC+0x3a4>
 800929a:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800929e:	f8df c140 	ldr.w	ip, [pc, #320]	; 80093e0 <D128_GENERIC+0x3a8>
 80092a2:	fb23 ec0c 	smlad	ip, r3, ip, lr
 80092a6:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80093e4 <D128_GENERIC+0x3ac>
 80092aa:	fb25 c20e 	smlad	r2, r5, lr, ip
 80092ae:	f04f 0c01 	mov.w	ip, #1
 80092b2:	9202      	str	r2, [sp, #8]
 80092b4:	fb2b fb0c 	smuad	fp, fp, ip
 80092b8:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80093e8 <D128_GENERIC+0x3b0>
 80092bc:	fb28 bb0c 	smlad	fp, r8, ip, fp
 80092c0:	f8df c128 	ldr.w	ip, [pc, #296]	; 80093ec <D128_GENERIC+0x3b4>
 80092c4:	fb27 bb0c 	smlad	fp, r7, ip, fp
 80092c8:	4f3c      	ldr	r7, [pc, #240]	; (80093bc <D128_GENERIC+0x384>)
 80092ca:	fb26 bb07 	smlad	fp, r6, r7, fp
 80092ce:	4f3c      	ldr	r7, [pc, #240]	; (80093c0 <D128_GENERIC+0x388>)
 80092d0:	fb24 bb07 	smlad	fp, r4, r7, fp
 80092d4:	4f3b      	ldr	r7, [pc, #236]	; (80093c4 <D128_GENERIC+0x38c>)
 80092d6:	fb20 bb07 	smlad	fp, r0, r7, fp
 80092da:	4f3b      	ldr	r7, [pc, #236]	; (80093c8 <D128_GENERIC+0x390>)
 80092dc:	fb23 bb07 	smlad	fp, r3, r7, fp
 80092e0:	4b3a      	ldr	r3, [pc, #232]	; (80093cc <D128_GENERIC+0x394>)
 80092e2:	fb25 b303 	smlad	r3, r5, r3, fp
 80092e6:	9303      	str	r3, [sp, #12]
 80092e8:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 80092ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ee:	b183      	cbz	r3, 8009312 <D128_GENERIC+0x2da>
 80092f0:	9a06      	ldr	r2, [sp, #24]
 80092f2:	9907      	ldr	r1, [sp, #28]
 80092f4:	4422      	add	r2, r4
 80092f6:	9407      	str	r4, [sp, #28]
 80092f8:	1a52      	subs	r2, r2, r1
 80092fa:	fba2 0103 	umull	r0, r1, r2, r3
 80092fe:	17d5      	asrs	r5, r2, #31
 8009300:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8009304:	fb03 1105 	mla	r1, r3, r5, r1
 8009308:	f141 0300 	adc.w	r3, r1, #0
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	461c      	mov	r4, r3
 8009310:	9306      	str	r3, [sp, #24]
 8009312:	9d01      	ldr	r5, [sp, #4]
 8009314:	01e4      	lsls	r4, r4, #7
 8009316:	9e05      	ldr	r6, [sp, #20]
 8009318:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800931c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800931e:	2300      	movs	r3, #0
 8009320:	9908      	ldr	r1, [sp, #32]
 8009322:	fb06 f000 	mul.w	r0, r6, r0
 8009326:	3601      	adds	r6, #1
 8009328:	fbc1 2304 	smlal	r2, r3, r1, r4
 800932c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800932e:	109b      	asrs	r3, r3, #2
 8009330:	9605      	str	r6, [sp, #20]
 8009332:	f303 030f 	ssat	r3, #16, r3
 8009336:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800933a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800933c:	42b3      	cmp	r3, r6
 800933e:	dd13      	ble.n	8009368 <D128_GENERIC+0x330>
 8009340:	9b01      	ldr	r3, [sp, #4]
 8009342:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009344:	2a01      	cmp	r2, #1
 8009346:	f47f ae95 	bne.w	8009074 <D128_GENERIC+0x3c>
 800934a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800934c:	f109 0610 	add.w	r6, r9, #16
 8009350:	0681      	lsls	r1, r0, #26
 8009352:	e9d9 4200 	ldrd	r4, r2, [r9]
 8009356:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800935a:	d518      	bpl.n	800938e <D128_GENERIC+0x356>
 800935c:	ba64      	rev16	r4, r4
 800935e:	ba52      	rev16	r2, r2
 8009360:	ba5b      	rev16	r3, r3
 8009362:	ba6d      	rev16	r5, r5
 8009364:	46b1      	mov	r9, r6
 8009366:	e6da      	b.n	800911e <D128_GENERIC+0xe6>
 8009368:	f8dd a010 	ldr.w	sl, [sp, #16]
 800936c:	9b01      	ldr	r3, [sp, #4]
 800936e:	2000      	movs	r0, #0
 8009370:	9903      	ldr	r1, [sp, #12]
 8009372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009374:	6099      	str	r1, [r3, #8]
 8009376:	9902      	ldr	r1, [sp, #8]
 8009378:	f8c3 a01c 	str.w	sl, [r3, #28]
 800937c:	60d9      	str	r1, [r3, #12]
 800937e:	9906      	ldr	r1, [sp, #24]
 8009380:	619a      	str	r2, [r3, #24]
 8009382:	6119      	str	r1, [r3, #16]
 8009384:	9907      	ldr	r1, [sp, #28]
 8009386:	6159      	str	r1, [r3, #20]
 8009388:	b00d      	add	sp, #52	; 0x34
 800938a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938e:	46b1      	mov	r9, r6
 8009390:	e6c5      	b.n	800911e <D128_GENERIC+0xe6>
 8009392:	bf00      	nop
 8009394:	24000000 	.word	0x24000000
 8009398:	00780069 	.word	0x00780069
 800939c:	005b004e 	.word	0x005b004e
 80093a0:	00420037 	.word	0x00420037
 80093a4:	002d0024 	.word	0x002d0024
 80093a8:	001c0015 	.word	0x001c0015
 80093ac:	000f000a 	.word	0x000f000a
 80093b0:	00060003 	.word	0x00060003
 80093b4:	00880096 	.word	0x00880096
 80093b8:	00a200ac 	.word	0x00a200ac
 80093bc:	0015001c 	.word	0x0015001c
 80093c0:	0024002d 	.word	0x0024002d
 80093c4:	00370042 	.word	0x00370042
 80093c8:	004e005b 	.word	0x004e005b
 80093cc:	00690078 	.word	0x00690078
 80093d0:	00b400ba 	.word	0x00b400ba
 80093d4:	00be00c0 	.word	0x00be00c0
 80093d8:	00c000be 	.word	0x00c000be
 80093dc:	00ba00b4 	.word	0x00ba00b4
 80093e0:	00ac00a2 	.word	0x00ac00a2
 80093e4:	00960088 	.word	0x00960088
 80093e8:	00030006 	.word	0x00030006
 80093ec:	000a000f 	.word	0x000a000f

080093f0 <D16_1CH_HTONS_VOL_HP>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	6993      	ldr	r3, [r2, #24]
 80093f6:	b087      	sub	sp, #28
 80093f8:	4682      	mov	sl, r0
 80093fa:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80093fc:	9304      	str	r3, [sp, #16]
 80093fe:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8009402:	69d3      	ldr	r3, [r2, #28]
 8009404:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8009408:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800940c:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8009410:	9403      	str	r4, [sp, #12]
 8009412:	2800      	cmp	r0, #0
 8009414:	d054      	beq.n	80094c0 <D16_1CH_HTONS_VOL_HP+0xd0>
 8009416:	f1a1 0902 	sub.w	r9, r1, #2
 800941a:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800941e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80094cc <D16_1CH_HTONS_VOL_HP+0xdc>
 8009422:	4650      	mov	r0, sl
 8009424:	9101      	str	r1, [sp, #4]
 8009426:	4619      	mov	r1, r3
 8009428:	f8cd b008 	str.w	fp, [sp, #8]
 800942c:	9205      	str	r2, [sp, #20]
 800942e:	f850 3b02 	ldr.w	r3, [r0], #2
 8009432:	ba5b      	rev16	r3, r3
 8009434:	b2dc      	uxtb	r4, r3
 8009436:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800943a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800943e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8009442:	4419      	add	r1, r3
 8009444:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8009448:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800944c:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8009450:	0aa1      	lsrs	r1, r4, #10
 8009452:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009456:	4a1b      	ldr	r2, [pc, #108]	; (80094c4 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8009458:	fb23 5402 	smlad	r4, r3, r2, r5
 800945c:	4a1a      	ldr	r2, [pc, #104]	; (80094c8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800945e:	fb23 f502 	smuad	r5, r3, r2
 8009462:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009466:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800946a:	f04f 0b00 	mov.w	fp, #0
 800946e:	19a2      	adds	r2, r4, r6
 8009470:	eba2 020c 	sub.w	r2, r2, ip
 8009474:	46a4      	mov	ip, r4
 8009476:	17d7      	asrs	r7, r2, #31
 8009478:	fba2 230e 	umull	r2, r3, r2, lr
 800947c:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8009480:	fb0e 3307 	mla	r3, lr, r7, r3
 8009484:	f143 0700 	adc.w	r7, r3, #0
 8009488:	9b02      	ldr	r3, [sp, #8]
 800948a:	047a      	lsls	r2, r7, #17
 800948c:	007e      	lsls	r6, r7, #1
 800948e:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8009492:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8009496:	f303 030f 	ssat	r3, #16, r3
 800949a:	f829 3f02 	strh.w	r3, [r9, #2]!
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	4298      	cmp	r0, r3
 80094a2:	d1c4      	bne.n	800942e <D16_1CH_HTONS_VOL_HP+0x3e>
 80094a4:	460b      	mov	r3, r1
 80094a6:	9a05      	ldr	r2, [sp, #20]
 80094a8:	2000      	movs	r0, #0
 80094aa:	9903      	ldr	r1, [sp, #12]
 80094ac:	61d3      	str	r3, [r2, #28]
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	6095      	str	r5, [r2, #8]
 80094b2:	60d1      	str	r1, [r2, #12]
 80094b4:	6193      	str	r3, [r2, #24]
 80094b6:	e9c2 6404 	strd	r6, r4, [r2, #16]
 80094ba:	b007      	add	sp, #28
 80094bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c0:	4664      	mov	r4, ip
 80094c2:	e7f1      	b.n	80094a8 <D16_1CH_HTONS_VOL_HP+0xb8>
 80094c4:	00030001 	.word	0x00030001
 80094c8:	00010003 	.word	0x00010003
 80094cc:	24000000 	.word	0x24000000

080094d0 <D24_1CH_HTONS_VOL_HP>:
 80094d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d4:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80094d6:	b089      	sub	sp, #36	; 0x24
 80094d8:	6993      	ldr	r3, [r2, #24]
 80094da:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80094dc:	9604      	str	r6, [sp, #16]
 80094de:	6a16      	ldr	r6, [r2, #32]
 80094e0:	9306      	str	r3, [sp, #24]
 80094e2:	9505      	str	r5, [sp, #20]
 80094e4:	69d3      	ldr	r3, [r2, #28]
 80094e6:	9600      	str	r6, [sp, #0]
 80094e8:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80094ec:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 80094f0:	2d00      	cmp	r5, #0
 80094f2:	f000 8083 	beq.w	80095fc <D24_1CH_HTONS_VOL_HP+0x12c>
 80094f6:	9207      	str	r2, [sp, #28]
 80094f8:	2600      	movs	r6, #0
 80094fa:	4622      	mov	r2, r4
 80094fc:	f1a1 0b02 	sub.w	fp, r1, #2
 8009500:	4f3f      	ldr	r7, [pc, #252]	; (8009600 <D24_1CH_HTONS_VOL_HP+0x130>)
 8009502:	461d      	mov	r5, r3
 8009504:	f8cd a00c 	str.w	sl, [sp, #12]
 8009508:	9c00      	ldr	r4, [sp, #0]
 800950a:	e056      	b.n	80095ba <D24_1CH_HTONS_VOL_HP+0xea>
 800950c:	7841      	ldrb	r1, [r0, #1]
 800950e:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8009512:	3002      	adds	r0, #2
 8009514:	4488      	add	r8, r1
 8009516:	fa5f f388 	uxtb.w	r3, r8
 800951a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800951e:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8009522:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8009526:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800952a:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800952e:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8009532:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8009536:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800953a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800953e:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8009542:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009546:	492f      	ldr	r1, [pc, #188]	; (8009604 <D24_1CH_HTONS_VOL_HP+0x134>)
 8009548:	fb23 e901 	smlad	r9, r3, r1, lr
 800954c:	492e      	ldr	r1, [pc, #184]	; (8009608 <D24_1CH_HTONS_VOL_HP+0x138>)
 800954e:	fb23 ce01 	smlad	lr, r3, r1, ip
 8009552:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8009556:	2101      	movs	r1, #1
 8009558:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800955c:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8009560:	fb23 f301 	smuad	r3, r3, r1
 8009564:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8009568:	eb08 0c03 	add.w	ip, r8, r3
 800956c:	9b03      	ldr	r3, [sp, #12]
 800956e:	f04f 0a00 	mov.w	sl, #0
 8009572:	440a      	add	r2, r1
 8009574:	3601      	adds	r6, #1
 8009576:	9103      	str	r1, [sp, #12]
 8009578:	1ad2      	subs	r2, r2, r3
 800957a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800957e:	fba2 2304 	umull	r2, r3, r2, r4
 8009582:	e9cd 2300 	strd	r2, r3, [sp]
 8009586:	fb04 3309 	mla	r3, r4, r9, r3
 800958a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009594:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009598:	f143 0300 	adc.w	r3, r3, #0
 800959c:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 80095a0:	005a      	lsls	r2, r3, #1
 80095a2:	9b04      	ldr	r3, [sp, #16]
 80095a4:	fbc3 9a08 	smlal	r9, sl, r3, r8
 80095a8:	ea4f 03aa 	mov.w	r3, sl, asr #2
 80095ac:	f303 030f 	ssat	r3, #16, r3
 80095b0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 80095b4:	9b05      	ldr	r3, [sp, #20]
 80095b6:	429e      	cmp	r6, r3
 80095b8:	d010      	beq.n	80095dc <D24_1CH_HTONS_VOL_HP+0x10c>
 80095ba:	f890 9003 	ldrb.w	r9, [r0, #3]
 80095be:	f016 0f01 	tst.w	r6, #1
 80095c2:	7801      	ldrb	r1, [r0, #0]
 80095c4:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80095c8:	ea4f 2801 	mov.w	r8, r1, lsl #8
 80095cc:	d09e      	beq.n	800950c <D24_1CH_HTONS_VOL_HP+0x3c>
 80095ce:	f890 8002 	ldrb.w	r8, [r0, #2]
 80095d2:	3004      	adds	r0, #4
 80095d4:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 80095d8:	4488      	add	r8, r1
 80095da:	e79c      	b.n	8009516 <D24_1CH_HTONS_VOL_HP+0x46>
 80095dc:	4614      	mov	r4, r2
 80095de:	462b      	mov	r3, r5
 80095e0:	9a07      	ldr	r2, [sp, #28]
 80095e2:	2000      	movs	r0, #0
 80095e4:	61d3      	str	r3, [r2, #28]
 80095e6:	9b06      	ldr	r3, [sp, #24]
 80095e8:	f8c2 c008 	str.w	ip, [r2, #8]
 80095ec:	f8c2 e00c 	str.w	lr, [r2, #12]
 80095f0:	6193      	str	r3, [r2, #24]
 80095f2:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80095f6:	b009      	add	sp, #36	; 0x24
 80095f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fc:	4651      	mov	r1, sl
 80095fe:	e7f0      	b.n	80095e2 <D24_1CH_HTONS_VOL_HP+0x112>
 8009600:	24000000 	.word	0x24000000
 8009604:	00030001 	.word	0x00030001
 8009608:	00060007 	.word	0x00060007

0800960c <D32_1CH_HTONS_VOL_HP>:
 800960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009610:	6993      	ldr	r3, [r2, #24]
 8009612:	b087      	sub	sp, #28
 8009614:	4683      	mov	fp, r0
 8009616:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009618:	9304      	str	r3, [sp, #16]
 800961a:	69d5      	ldr	r5, [r2, #28]
 800961c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800961e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009622:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8009626:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800962a:	2800      	cmp	r0, #0
 800962c:	d077      	beq.n	800971e <D32_1CH_HTONS_VOL_HP+0x112>
 800962e:	460f      	mov	r7, r1
 8009630:	46f1      	mov	r9, lr
 8009632:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009636:	f8cd 8000 	str.w	r8, [sp]
 800963a:	4e3a      	ldr	r6, [pc, #232]	; (8009724 <D32_1CH_HTONS_VOL_HP+0x118>)
 800963c:	469e      	mov	lr, r3
 800963e:	46a0      	mov	r8, r4
 8009640:	9103      	str	r1, [sp, #12]
 8009642:	9205      	str	r2, [sp, #20]
 8009644:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009648:	ba64      	rev16	r4, r4
 800964a:	b2e0      	uxtb	r0, r4
 800964c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009650:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009654:	0e24      	lsrs	r4, r4, #24
 8009656:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800965a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800965e:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8009662:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009666:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800966a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800966e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009672:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8009676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800967a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800967e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009682:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009686:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800968a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800968e:	4826      	ldr	r0, [pc, #152]	; (8009728 <D32_1CH_HTONS_VOL_HP+0x11c>)
 8009690:	fb23 c400 	smlad	r4, r3, r0, ip
 8009694:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009698:	fb21 4402 	smlad	r4, r1, r2, r4
 800969c:	4823      	ldr	r0, [pc, #140]	; (800972c <D32_1CH_HTONS_VOL_HP+0x120>)
 800969e:	fb23 ec00 	smlad	ip, r3, r0, lr
 80096a2:	4823      	ldr	r0, [pc, #140]	; (8009730 <D32_1CH_HTONS_VOL_HP+0x124>)
 80096a4:	fb21 cc00 	smlad	ip, r1, r0, ip
 80096a8:	2201      	movs	r2, #1
 80096aa:	fb23 f302 	smuad	r3, r3, r2
 80096ae:	4821      	ldr	r0, [pc, #132]	; (8009734 <D32_1CH_HTONS_VOL_HP+0x128>)
 80096b0:	fb21 3e00 	smlad	lr, r1, r0, r3
 80096b4:	9b00      	ldr	r3, [sp, #0]
 80096b6:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 80096ba:	4423      	add	r3, r4
 80096bc:	eba3 0209 	sub.w	r2, r3, r9
 80096c0:	46a1      	mov	r9, r4
 80096c2:	17d1      	asrs	r1, r2, #31
 80096c4:	fba2 230a 	umull	r2, r3, r2, sl
 80096c8:	e9cd 2300 	strd	r2, r3, [sp]
 80096cc:	fb0a 3301 	mla	r3, sl, r1, r3
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096d6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80096da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096de:	f143 0300 	adc.w	r3, r3, #0
 80096e2:	0399      	lsls	r1, r3, #14
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	2300      	movs	r3, #0
 80096ea:	fbc8 2301 	smlal	r2, r3, r8, r1
 80096ee:	109b      	asrs	r3, r3, #2
 80096f0:	f303 030f 	ssat	r3, #16, r3
 80096f4:	f827 3b02 	strh.w	r3, [r7], #2
 80096f8:	9b03      	ldr	r3, [sp, #12]
 80096fa:	429f      	cmp	r7, r3
 80096fc:	d1a2      	bne.n	8009644 <D32_1CH_HTONS_VOL_HP+0x38>
 80096fe:	4673      	mov	r3, lr
 8009700:	f8dd 8000 	ldr.w	r8, [sp]
 8009704:	9a05      	ldr	r2, [sp, #20]
 8009706:	6093      	str	r3, [r2, #8]
 8009708:	2000      	movs	r0, #0
 800970a:	9b04      	ldr	r3, [sp, #16]
 800970c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009710:	61d5      	str	r5, [r2, #28]
 8009712:	6193      	str	r3, [r2, #24]
 8009714:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8009718:	b007      	add	sp, #28
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	4674      	mov	r4, lr
 8009720:	e7f1      	b.n	8009706 <D32_1CH_HTONS_VOL_HP+0xfa>
 8009722:	bf00      	nop
 8009724:	24000000 	.word	0x24000000
 8009728:	00060003 	.word	0x00060003
 800972c:	000a000c 	.word	0x000a000c
 8009730:	000c000a 	.word	0x000c000a
 8009734:	00030006 	.word	0x00030006

08009738 <D48_1CH_HTONS_VOL_HP>:
 8009738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800973e:	b087      	sub	sp, #28
 8009740:	6993      	ldr	r3, [r2, #24]
 8009742:	9701      	str	r7, [sp, #4]
 8009744:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009746:	6a17      	ldr	r7, [r2, #32]
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	69d6      	ldr	r6, [r2, #28]
 800974c:	9702      	str	r7, [sp, #8]
 800974e:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 8009752:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009756:	2d00      	cmp	r5, #0
 8009758:	f000 8093 	beq.w	8009882 <D48_1CH_HTONS_VOL_HP+0x14a>
 800975c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009760:	f1a1 0b02 	sub.w	fp, r1, #2
 8009764:	46f2      	mov	sl, lr
 8009766:	4f48      	ldr	r7, [pc, #288]	; (8009888 <D48_1CH_HTONS_VOL_HP+0x150>)
 8009768:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800976c:	469e      	mov	lr, r3
 800976e:	9205      	str	r2, [sp, #20]
 8009770:	9103      	str	r1, [sp, #12]
 8009772:	e9d0 3200 	ldrd	r3, r2, [r0]
 8009776:	3006      	adds	r0, #6
 8009778:	ba5b      	rev16	r3, r3
 800977a:	fa92 f992 	rev16.w	r9, r2
 800977e:	b2dd      	uxtb	r5, r3
 8009780:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009784:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009788:	0e1b      	lsrs	r3, r3, #24
 800978a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800978e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8009792:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8009796:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800979a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800979e:	fa5f f289 	uxtb.w	r2, r9
 80097a2:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 80097a6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80097aa:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80097ae:	f3c6 0809 	ubfx	r8, r6, #0, #10
 80097b2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80097b6:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 80097ba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80097be:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 80097c2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80097c6:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80097ca:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 80097ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097d2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80097d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80097da:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80097de:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80097e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80097e6:	4b29      	ldr	r3, [pc, #164]	; (800988c <D48_1CH_HTONS_VOL_HP+0x154>)
 80097e8:	fb28 c103 	smlad	r1, r8, r3, ip
 80097ec:	4b28      	ldr	r3, [pc, #160]	; (8009890 <D48_1CH_HTONS_VOL_HP+0x158>)
 80097ee:	fb25 1103 	smlad	r1, r5, r3, r1
 80097f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097f6:	fb22 1903 	smlad	r9, r2, r3, r1
 80097fa:	4b26      	ldr	r3, [pc, #152]	; (8009894 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80097fc:	fb28 ec03 	smlad	ip, r8, r3, lr
 8009800:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8009804:	fb25 cc03 	smlad	ip, r5, r3, ip
 8009808:	4b23      	ldr	r3, [pc, #140]	; (8009898 <D48_1CH_HTONS_VOL_HP+0x160>)
 800980a:	fb22 cc03 	smlad	ip, r2, r3, ip
 800980e:	2101      	movs	r1, #1
 8009810:	fb28 f801 	smuad	r8, r8, r1
 8009814:	4b21      	ldr	r3, [pc, #132]	; (800989c <D48_1CH_HTONS_VOL_HP+0x164>)
 8009816:	fb25 8503 	smlad	r5, r5, r3, r8
 800981a:	4b21      	ldr	r3, [pc, #132]	; (80098a0 <D48_1CH_HTONS_VOL_HP+0x168>)
 800981c:	fb22 5e03 	smlad	lr, r2, r3, r5
 8009820:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 8009824:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009828:	190a      	adds	r2, r1, r4
 800982a:	9c02      	ldr	r4, [sp, #8]
 800982c:	eba2 020a 	sub.w	r2, r2, sl
 8009830:	468a      	mov	sl, r1
 8009832:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009836:	fba2 2304 	umull	r2, r3, r2, r4
 800983a:	fb04 3309 	mla	r3, r4, r9, r3
 800983e:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8009842:	f04f 0900 	mov.w	r9, #0
 8009846:	f143 0500 	adc.w	r5, r3, #0
 800984a:	9b01      	ldr	r3, [sp, #4]
 800984c:	032a      	lsls	r2, r5, #12
 800984e:	006c      	lsls	r4, r5, #1
 8009850:	fbc3 8902 	smlal	r8, r9, r3, r2
 8009854:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8009858:	f303 030f 	ssat	r3, #16, r3
 800985c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	4283      	cmp	r3, r0
 8009864:	d185      	bne.n	8009772 <D48_1CH_HTONS_VOL_HP+0x3a>
 8009866:	4673      	mov	r3, lr
 8009868:	9a05      	ldr	r2, [sp, #20]
 800986a:	6093      	str	r3, [r2, #8]
 800986c:	2000      	movs	r0, #0
 800986e:	9b04      	ldr	r3, [sp, #16]
 8009870:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009874:	61d6      	str	r6, [r2, #28]
 8009876:	6193      	str	r3, [r2, #24]
 8009878:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800987c:	b007      	add	sp, #28
 800987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009882:	4671      	mov	r1, lr
 8009884:	e7f1      	b.n	800986a <D48_1CH_HTONS_VOL_HP+0x132>
 8009886:	bf00      	nop
 8009888:	24000000 	.word	0x24000000
 800988c:	000f000a 	.word	0x000f000a
 8009890:	00060003 	.word	0x00060003
 8009894:	00150019 	.word	0x00150019
 8009898:	00190015 	.word	0x00190015
 800989c:	00030006 	.word	0x00030006
 80098a0:	000a000f 	.word	0x000a000f

080098a4 <D64_1CH_HTONS_VOL_HP>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80098aa:	b089      	sub	sp, #36	; 0x24
 80098ac:	6993      	ldr	r3, [r2, #24]
 80098ae:	4686      	mov	lr, r0
 80098b0:	9503      	str	r5, [sp, #12]
 80098b2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80098b4:	6a15      	ldr	r5, [r2, #32]
 80098b6:	9306      	str	r3, [sp, #24]
 80098b8:	69d6      	ldr	r6, [r2, #28]
 80098ba:	9504      	str	r5, [sp, #16]
 80098bc:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 80098c0:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80098c4:	2800      	cmp	r0, #0
 80098c6:	f000 80a4 	beq.w	8009a12 <D64_1CH_HTONS_VOL_HP+0x16e>
 80098ca:	460f      	mov	r7, r1
 80098cc:	46f1      	mov	r9, lr
 80098ce:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80098d2:	4d56      	ldr	r5, [pc, #344]	; (8009a2c <D64_1CH_HTONS_VOL_HP+0x188>)
 80098d4:	46a2      	mov	sl, r4
 80098d6:	469e      	mov	lr, r3
 80098d8:	9105      	str	r1, [sp, #20]
 80098da:	9207      	str	r2, [sp, #28]
 80098dc:	f859 1b08 	ldr.w	r1, [r9], #8
 80098e0:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80098e4:	ba49      	rev16	r1, r1
 80098e6:	fa93 fb93 	rev16.w	fp, r3
 80098ea:	b2cb      	uxtb	r3, r1
 80098ec:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80098f0:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80098f4:	0e09      	lsrs	r1, r1, #24
 80098f6:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80098fa:	fa5f f38b 	uxtb.w	r3, fp
 80098fe:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009902:	4426      	add	r6, r4
 8009904:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8009908:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800990c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8009910:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8009914:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009918:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800991c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8009920:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009924:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8009928:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800992c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009930:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8009934:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8009938:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800993c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009940:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8009944:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8009948:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800994c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009950:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8009954:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009958:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800995c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009960:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8009964:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8009968:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800996c:	f3cb 0009 	ubfx	r0, fp, #0, #10
 8009970:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8009974:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8009978:	482d      	ldr	r0, [pc, #180]	; (8009a30 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800997a:	fb22 cc00 	smlad	ip, r2, r0, ip
 800997e:	482d      	ldr	r0, [pc, #180]	; (8009a34 <D64_1CH_HTONS_VOL_HP+0x190>)
 8009980:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009984:	482c      	ldr	r0, [pc, #176]	; (8009a38 <D64_1CH_HTONS_VOL_HP+0x194>)
 8009986:	fb23 cc00 	smlad	ip, r3, r0, ip
 800998a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800998e:	fb2b c404 	smlad	r4, fp, r4, ip
 8009992:	482a      	ldr	r0, [pc, #168]	; (8009a3c <D64_1CH_HTONS_VOL_HP+0x198>)
 8009994:	fb22 ec00 	smlad	ip, r2, r0, lr
 8009998:	fb2b cc10 	smladx	ip, fp, r0, ip
 800999c:	4828      	ldr	r0, [pc, #160]	; (8009a40 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800999e:	fb21 cc00 	smlad	ip, r1, r0, ip
 80099a2:	fb23 cc10 	smladx	ip, r3, r0, ip
 80099a6:	f04f 0e01 	mov.w	lr, #1
 80099aa:	fb22 f20e 	smuad	r2, r2, lr
 80099ae:	4825      	ldr	r0, [pc, #148]	; (8009a44 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80099b0:	fb21 2100 	smlad	r1, r1, r0, r2
 80099b4:	4a24      	ldr	r2, [pc, #144]	; (8009a48 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80099b6:	fb23 1302 	smlad	r3, r3, r2, r1
 80099ba:	4a24      	ldr	r2, [pc, #144]	; (8009a4c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80099bc:	fb2b 3e02 	smlad	lr, fp, r2, r3
 80099c0:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 80099c4:	eb04 0208 	add.w	r2, r4, r8
 80099c8:	eba2 020a 	sub.w	r2, r2, sl
 80099cc:	46a2      	mov	sl, r4
 80099ce:	4610      	mov	r0, r2
 80099d0:	17d1      	asrs	r1, r2, #31
 80099d2:	e9cd 0100 	strd	r0, r1, [sp]
 80099d6:	9904      	ldr	r1, [sp, #16]
 80099d8:	9801      	ldr	r0, [sp, #4]
 80099da:	fba2 2301 	umull	r2, r3, r2, r1
 80099de:	fb01 3300 	mla	r3, r1, r0, r3
 80099e2:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 80099e6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80099ea:	f143 0100 	adc.w	r1, r3, #0
 80099ee:	9b03      	ldr	r3, [sp, #12]
 80099f0:	02ca      	lsls	r2, r1, #11
 80099f2:	ea4f 0841 	mov.w	r8, r1, lsl #1
 80099f6:	2100      	movs	r1, #0
 80099f8:	fbc3 0102 	smlal	r0, r1, r3, r2
 80099fc:	108b      	asrs	r3, r1, #2
 80099fe:	f303 030f 	ssat	r3, #16, r3
 8009a02:	f827 3b02 	strh.w	r3, [r7], #2
 8009a06:	9b05      	ldr	r3, [sp, #20]
 8009a08:	429f      	cmp	r7, r3
 8009a0a:	f47f af67 	bne.w	80098dc <D64_1CH_HTONS_VOL_HP+0x38>
 8009a0e:	4673      	mov	r3, lr
 8009a10:	9a07      	ldr	r2, [sp, #28]
 8009a12:	6093      	str	r3, [r2, #8]
 8009a14:	2000      	movs	r0, #0
 8009a16:	9b06      	ldr	r3, [sp, #24]
 8009a18:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009a1c:	61d6      	str	r6, [r2, #28]
 8009a1e:	6193      	str	r3, [r2, #24]
 8009a20:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8009a24:	b009      	add	sp, #36	; 0x24
 8009a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	bf00      	nop
 8009a2c:	24000000 	.word	0x24000000
 8009a30:	001c0015 	.word	0x001c0015
 8009a34:	000f000a 	.word	0x000f000a
 8009a38:	00060003 	.word	0x00060003
 8009a3c:	0024002a 	.word	0x0024002a
 8009a40:	002e0030 	.word	0x002e0030
 8009a44:	00030006 	.word	0x00030006
 8009a48:	000a000f 	.word	0x000a000f
 8009a4c:	0015001c 	.word	0x0015001c

08009a50 <D80_1CH_HTONS_VOL_HP>:
 8009a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	6913      	ldr	r3, [r2, #16]
 8009a56:	b089      	sub	sp, #36	; 0x24
 8009a58:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	9603      	str	r6, [sp, #12]
 8009a5e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009a60:	6a16      	ldr	r6, [r2, #32]
 8009a62:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 8009a66:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 8009a6a:	9306      	str	r3, [sp, #24]
 8009a6c:	9604      	str	r6, [sp, #16]
 8009a6e:	69d3      	ldr	r3, [r2, #28]
 8009a70:	2c00      	cmp	r4, #0
 8009a72:	f000 80ce 	beq.w	8009c12 <D80_1CH_HTONS_VOL_HP+0x1c2>
 8009a76:	3902      	subs	r1, #2
 8009a78:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009a7c:	4e66      	ldr	r6, [pc, #408]	; (8009c18 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 8009a7e:	469e      	mov	lr, r3
 8009a80:	9102      	str	r1, [sp, #8]
 8009a82:	46aa      	mov	sl, r5
 8009a84:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8009a88:	9207      	str	r2, [sp, #28]
 8009a8a:	9105      	str	r1, [sp, #20]
 8009a8c:	6883      	ldr	r3, [r0, #8]
 8009a8e:	e9d0 4200 	ldrd	r4, r2, [r0]
 8009a92:	300a      	adds	r0, #10
 8009a94:	ba64      	rev16	r4, r4
 8009a96:	ba52      	rev16	r2, r2
 8009a98:	fa93 fb93 	rev16.w	fp, r3
 8009a9c:	b2e5      	uxtb	r5, r4
 8009a9e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009aa2:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009aa6:	0e24      	lsrs	r4, r4, #24
 8009aa8:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8009aac:	b2d5      	uxtb	r5, r2
 8009aae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009ab2:	44c6      	add	lr, r8
 8009ab4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009ab8:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8009abc:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8009ac0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8009ac4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009ac8:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8009acc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ad4:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8009ad8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009adc:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8009ae0:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8009ae4:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8009ae8:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8009aec:	0e12      	lsrs	r2, r2, #24
 8009aee:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8009af2:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8009af6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8009afa:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8009afe:	fa5f fb8b 	uxtb.w	fp, fp
 8009b02:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009b06:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009b0a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8009b0e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009b12:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8009b16:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009b1a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009b1e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8009b22:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8009b26:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009b2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009b2e:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8009b32:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009b36:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8009b3a:	f3ce 0109 	ubfx	r1, lr, #0, #10
 8009b3e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8009b42:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8009b46:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8009b4a:	4934      	ldr	r1, [pc, #208]	; (8009c1c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8009b4c:	fb23 cc01 	smlad	ip, r3, r1, ip
 8009b50:	4933      	ldr	r1, [pc, #204]	; (8009c20 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8009b52:	fb24 cc01 	smlad	ip, r4, r1, ip
 8009b56:	4933      	ldr	r1, [pc, #204]	; (8009c24 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8009b58:	fb28 cc01 	smlad	ip, r8, r1, ip
 8009b5c:	4932      	ldr	r1, [pc, #200]	; (8009c28 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8009b5e:	fb22 cc01 	smlad	ip, r2, r1, ip
 8009b62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009b66:	fb2b c901 	smlad	r9, fp, r1, ip
 8009b6a:	4930      	ldr	r1, [pc, #192]	; (8009c2c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8009b6c:	fb23 7701 	smlad	r7, r3, r1, r7
 8009b70:	492f      	ldr	r1, [pc, #188]	; (8009c30 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8009b72:	fb24 7701 	smlad	r7, r4, r1, r7
 8009b76:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 8009b7a:	fb28 7c0c 	smlad	ip, r8, ip, r7
 8009b7e:	492d      	ldr	r1, [pc, #180]	; (8009c34 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8009b80:	fb22 cc01 	smlad	ip, r2, r1, ip
 8009b84:	492c      	ldr	r1, [pc, #176]	; (8009c38 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8009b86:	fb2b cc01 	smlad	ip, fp, r1, ip
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	fb23 f301 	smuad	r3, r3, r1
 8009b90:	492a      	ldr	r1, [pc, #168]	; (8009c3c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8009b92:	fb24 3401 	smlad	r4, r4, r1, r3
 8009b96:	492a      	ldr	r1, [pc, #168]	; (8009c40 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8009b98:	fb28 4101 	smlad	r1, r8, r1, r4
 8009b9c:	4f29      	ldr	r7, [pc, #164]	; (8009c44 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8009b9e:	fb22 1207 	smlad	r2, r2, r7, r1
 8009ba2:	4f29      	ldr	r7, [pc, #164]	; (8009c48 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8009ba4:	fb2b 2707 	smlad	r7, fp, r7, r2
 8009ba8:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8009bac:	9b01      	ldr	r3, [sp, #4]
 8009bae:	9c04      	ldr	r4, [sp, #16]
 8009bb0:	440b      	add	r3, r1
 8009bb2:	eba3 020a 	sub.w	r2, r3, sl
 8009bb6:	468a      	mov	sl, r1
 8009bb8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009bbc:	fba2 2304 	umull	r2, r3, r2, r4
 8009bc0:	fb04 3309 	mla	r3, r4, r9, r3
 8009bc4:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8009bc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009bcc:	f143 0500 	adc.w	r5, r3, #0
 8009bd0:	006b      	lsls	r3, r5, #1
 8009bd2:	02aa      	lsls	r2, r5, #10
 8009bd4:	2500      	movs	r5, #0
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	9b03      	ldr	r3, [sp, #12]
 8009bda:	fbc3 4502 	smlal	r4, r5, r3, r2
 8009bde:	9a02      	ldr	r2, [sp, #8]
 8009be0:	10ab      	asrs	r3, r5, #2
 8009be2:	f303 030f 	ssat	r3, #16, r3
 8009be6:	f822 3f02 	strh.w	r3, [r2, #2]!
 8009bea:	9b05      	ldr	r3, [sp, #20]
 8009bec:	9202      	str	r2, [sp, #8]
 8009bee:	4298      	cmp	r0, r3
 8009bf0:	f47f af4c 	bne.w	8009a8c <D80_1CH_HTONS_VOL_HP+0x3c>
 8009bf4:	4673      	mov	r3, lr
 8009bf6:	9a07      	ldr	r2, [sp, #28]
 8009bf8:	61d3      	str	r3, [r2, #28]
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	9b01      	ldr	r3, [sp, #4]
 8009bfe:	6097      	str	r7, [r2, #8]
 8009c00:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009c04:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8009c08:	9b06      	ldr	r3, [sp, #24]
 8009c0a:	6193      	str	r3, [r2, #24]
 8009c0c:	b009      	add	sp, #36	; 0x24
 8009c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c12:	4629      	mov	r1, r5
 8009c14:	e7f0      	b.n	8009bf8 <D80_1CH_HTONS_VOL_HP+0x1a8>
 8009c16:	bf00      	nop
 8009c18:	24000000 	.word	0x24000000
 8009c1c:	002d0024 	.word	0x002d0024
 8009c20:	001c0015 	.word	0x001c0015
 8009c24:	000f000a 	.word	0x000f000a
 8009c28:	00060003 	.word	0x00060003
 8009c2c:	0037003f 	.word	0x0037003f
 8009c30:	00450049 	.word	0x00450049
 8009c34:	00490045 	.word	0x00490045
 8009c38:	003f0037 	.word	0x003f0037
 8009c3c:	00030006 	.word	0x00030006
 8009c40:	000a000f 	.word	0x000a000f
 8009c44:	0015001c 	.word	0x0015001c
 8009c48:	0024002d 	.word	0x0024002d

08009c4c <D128_1CH_HTONS_VOL_HP>:
 8009c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	6914      	ldr	r4, [r2, #16]
 8009c52:	b08d      	sub	sp, #52	; 0x34
 8009c54:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009c56:	9404      	str	r4, [sp, #16]
 8009c58:	6954      	ldr	r4, [r2, #20]
 8009c5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c5c:	9405      	str	r4, [sp, #20]
 8009c5e:	6994      	ldr	r4, [r2, #24]
 8009c60:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8009c64:	940a      	str	r4, [sp, #40]	; 0x28
 8009c66:	6894      	ldr	r4, [r2, #8]
 8009c68:	9403      	str	r4, [sp, #12]
 8009c6a:	68d4      	ldr	r4, [r2, #12]
 8009c6c:	9402      	str	r4, [sp, #8]
 8009c6e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009c70:	6a12      	ldr	r2, [r2, #32]
 8009c72:	9407      	str	r4, [sp, #28]
 8009c74:	9208      	str	r2, [sp, #32]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 812e 	beq.w	8009ed8 <D128_1CH_HTONS_VOL_HP+0x28c>
 8009c7c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009c80:	f100 0b10 	add.w	fp, r0, #16
 8009c84:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8009f18 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8009c88:	9106      	str	r1, [sp, #24]
 8009c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8c:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8009c90:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8009c94:	ba40      	rev16	r0, r0
 8009c96:	ba52      	rev16	r2, r2
 8009c98:	ba5b      	rev16	r3, r3
 8009c9a:	ba76      	rev16	r6, r6
 8009c9c:	b2c5      	uxtb	r5, r0
 8009c9e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8009ca2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8009ca6:	0e00      	lsrs	r0, r0, #24
 8009ca8:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8009cac:	b2d5      	uxtb	r5, r2
 8009cae:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8009cb2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8009cb6:	44bc      	add	ip, r7
 8009cb8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009cbc:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8009cc0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009cc4:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8009cc8:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8009ccc:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009cd0:	0e12      	lsrs	r2, r2, #24
 8009cd2:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8009cd6:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8009cda:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009cde:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009ce2:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8009ce6:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8009cea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8009cf4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009cf8:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8009cfc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009d00:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8009d04:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009d08:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8009d0c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009d10:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8009d14:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009d18:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8009d1c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8009d20:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009d24:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009d28:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8009d2c:	0e1b      	lsrs	r3, r3, #24
 8009d2e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8009d32:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009d36:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8009d3a:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8009d3e:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8009d42:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009d46:	b2f3      	uxtb	r3, r6
 8009d48:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8009d4c:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8009d50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009d54:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8009d58:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8009d5c:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8009d60:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009d64:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009d68:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8009d6c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8009d70:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8009d74:	0e36      	lsrs	r6, r6, #24
 8009d76:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8009d7a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009d7e:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8009d82:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009d86:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8009d8a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d8e:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8009d92:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8009d96:	9101      	str	r1, [sp, #4]
 8009d98:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8009d9c:	9b02      	ldr	r3, [sp, #8]
 8009d9e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009da2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009da6:	4611      	mov	r1, r2
 8009da8:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8009dac:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8009db0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009db4:	4a49      	ldr	r2, [pc, #292]	; (8009edc <D128_1CH_HTONS_VOL_HP+0x290>)
 8009db6:	fb2e 3202 	smlad	r2, lr, r2, r3
 8009dba:	4b49      	ldr	r3, [pc, #292]	; (8009ee0 <D128_1CH_HTONS_VOL_HP+0x294>)
 8009dbc:	fb27 2203 	smlad	r2, r7, r3, r2
 8009dc0:	4b48      	ldr	r3, [pc, #288]	; (8009ee4 <D128_1CH_HTONS_VOL_HP+0x298>)
 8009dc2:	fb25 2203 	smlad	r2, r5, r3, r2
 8009dc6:	4b48      	ldr	r3, [pc, #288]	; (8009ee8 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8009dc8:	fb24 2203 	smlad	r2, r4, r3, r2
 8009dcc:	4b47      	ldr	r3, [pc, #284]	; (8009eec <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8009dce:	fb20 2803 	smlad	r8, r0, r3, r2
 8009dd2:	4b47      	ldr	r3, [pc, #284]	; (8009ef0 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8009dd4:	9a01      	ldr	r2, [sp, #4]
 8009dd6:	fb22 8203 	smlad	r2, r2, r3, r8
 8009dda:	4b46      	ldr	r3, [pc, #280]	; (8009ef4 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8009ddc:	9102      	str	r1, [sp, #8]
 8009dde:	fb21 2203 	smlad	r2, r1, r3, r2
 8009de2:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8009de6:	fb26 2308 	smlad	r3, r6, r8, r2
 8009dea:	4619      	mov	r1, r3
 8009dec:	9a03      	ldr	r2, [sp, #12]
 8009dee:	4b42      	ldr	r3, [pc, #264]	; (8009ef8 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8009df0:	fb2e 2803 	smlad	r8, lr, r3, r2
 8009df4:	4b41      	ldr	r3, [pc, #260]	; (8009efc <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8009df6:	fb27 8a03 	smlad	sl, r7, r3, r8
 8009dfa:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8009f1c <D128_1CH_HTONS_VOL_HP+0x2d0>
 8009dfe:	fb25 a808 	smlad	r8, r5, r8, sl
 8009e02:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8009f20 <D128_1CH_HTONS_VOL_HP+0x2d4>
 8009e06:	fb24 880a 	smlad	r8, r4, sl, r8
 8009e0a:	f8df a118 	ldr.w	sl, [pc, #280]	; 8009f24 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8009e0e:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8009e12:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8009f28 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8009e16:	9b01      	ldr	r3, [sp, #4]
 8009e18:	fb23 aa08 	smlad	sl, r3, r8, sl
 8009e1c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8009f2c <D128_1CH_HTONS_VOL_HP+0x2e0>
 8009e20:	9a02      	ldr	r2, [sp, #8]
 8009e22:	fb22 a808 	smlad	r8, r2, r8, sl
 8009e26:	f8df a108 	ldr.w	sl, [pc, #264]	; 8009f30 <D128_1CH_HTONS_VOL_HP+0x2e4>
 8009e2a:	fb26 830a 	smlad	r3, r6, sl, r8
 8009e2e:	f04f 0801 	mov.w	r8, #1
 8009e32:	9302      	str	r3, [sp, #8]
 8009e34:	fb2e fe08 	smuad	lr, lr, r8
 8009e38:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8009f34 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8009e3c:	fb27 ee08 	smlad	lr, r7, r8, lr
 8009e40:	4f2f      	ldr	r7, [pc, #188]	; (8009f00 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8009e42:	fb25 ee07 	smlad	lr, r5, r7, lr
 8009e46:	4f2f      	ldr	r7, [pc, #188]	; (8009f04 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8009e48:	fb24 ee07 	smlad	lr, r4, r7, lr
 8009e4c:	4f2e      	ldr	r7, [pc, #184]	; (8009f08 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8009e4e:	fb20 ee07 	smlad	lr, r0, r7, lr
 8009e52:	4f2e      	ldr	r7, [pc, #184]	; (8009f0c <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8009e54:	9b01      	ldr	r3, [sp, #4]
 8009e56:	fb23 ee07 	smlad	lr, r3, r7, lr
 8009e5a:	4f2d      	ldr	r7, [pc, #180]	; (8009f10 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8009e5c:	fb22 e707 	smlad	r7, r2, r7, lr
 8009e60:	4b2c      	ldr	r3, [pc, #176]	; (8009f14 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009e62:	fb26 7303 	smlad	r3, r6, r3, r7
 8009e66:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8009e6a:	9303      	str	r3, [sp, #12]
 8009e6c:	9b04      	ldr	r3, [sp, #16]
 8009e6e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009e72:	9f08      	ldr	r7, [sp, #32]
 8009e74:	2100      	movs	r1, #0
 8009e76:	4433      	add	r3, r6
 8009e78:	f10b 0b10 	add.w	fp, fp, #16
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	9b05      	ldr	r3, [sp, #20]
 8009e80:	9605      	str	r6, [sp, #20]
 8009e82:	1ad2      	subs	r2, r2, r3
 8009e84:	17d5      	asrs	r5, r2, #31
 8009e86:	fba2 2307 	umull	r2, r3, r2, r7
 8009e8a:	1814      	adds	r4, r2, r0
 8009e8c:	fb07 3305 	mla	r3, r7, r5, r3
 8009e90:	eb43 0501 	adc.w	r5, r3, r1
 8009e94:	006b      	lsls	r3, r5, #1
 8009e96:	022a      	lsls	r2, r5, #8
 8009e98:	9304      	str	r3, [sp, #16]
 8009e9a:	9b07      	ldr	r3, [sp, #28]
 8009e9c:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009ea0:	9a06      	ldr	r2, [sp, #24]
 8009ea2:	108b      	asrs	r3, r1, #2
 8009ea4:	f303 030f 	ssat	r3, #16, r3
 8009ea8:	f822 3b02 	strh.w	r3, [r2], #2
 8009eac:	4613      	mov	r3, r2
 8009eae:	9206      	str	r2, [sp, #24]
 8009eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	f47f aeea 	bne.w	8009c8c <D128_1CH_HTONS_VOL_HP+0x40>
 8009eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eba:	2000      	movs	r0, #0
 8009ebc:	9903      	ldr	r1, [sp, #12]
 8009ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ec0:	6099      	str	r1, [r3, #8]
 8009ec2:	9902      	ldr	r1, [sp, #8]
 8009ec4:	f8c3 c01c 	str.w	ip, [r3, #28]
 8009ec8:	60d9      	str	r1, [r3, #12]
 8009eca:	9904      	ldr	r1, [sp, #16]
 8009ecc:	619a      	str	r2, [r3, #24]
 8009ece:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8009ed2:	b00d      	add	sp, #52	; 0x34
 8009ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed8:	9e05      	ldr	r6, [sp, #20]
 8009eda:	e7ed      	b.n	8009eb8 <D128_1CH_HTONS_VOL_HP+0x26c>
 8009edc:	00780069 	.word	0x00780069
 8009ee0:	005b004e 	.word	0x005b004e
 8009ee4:	00420037 	.word	0x00420037
 8009ee8:	002d0024 	.word	0x002d0024
 8009eec:	001c0015 	.word	0x001c0015
 8009ef0:	000f000a 	.word	0x000f000a
 8009ef4:	00060003 	.word	0x00060003
 8009ef8:	00880096 	.word	0x00880096
 8009efc:	00a200ac 	.word	0x00a200ac
 8009f00:	000a000f 	.word	0x000a000f
 8009f04:	0015001c 	.word	0x0015001c
 8009f08:	0024002d 	.word	0x0024002d
 8009f0c:	00370042 	.word	0x00370042
 8009f10:	004e005b 	.word	0x004e005b
 8009f14:	00690078 	.word	0x00690078
 8009f18:	24000000 	.word	0x24000000
 8009f1c:	00b400ba 	.word	0x00b400ba
 8009f20:	00be00c0 	.word	0x00be00c0
 8009f24:	00c000be 	.word	0x00c000be
 8009f28:	00ba00b4 	.word	0x00ba00b4
 8009f2c:	00ac00a2 	.word	0x00ac00a2
 8009f30:	00960088 	.word	0x00960088
 8009f34:	00030006 	.word	0x00030006

08009f38 <PDM_Filter_Init>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	2240      	movs	r2, #64	; 0x40
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4604      	mov	r4, r0
 8009f40:	300c      	adds	r0, #12
 8009f42:	f000 f9ed 	bl	800a320 <memset>
 8009f46:	4a56      	ldr	r2, [pc, #344]	; (800a0a0 <PDM_Filter_Init+0x168>)
 8009f48:	4856      	ldr	r0, [pc, #344]	; (800a0a4 <PDM_Filter_Init+0x16c>)
 8009f4a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8009f4e:	6813      	ldr	r3, [r2, #0]
 8009f50:	f24c 2540 	movw	r5, #49728	; 0xc240
 8009f54:	f023 0301 	bic.w	r3, r3, #1
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	6803      	ldr	r3, [r0, #0]
 8009f5c:	400b      	ands	r3, r1
 8009f5e:	42ab      	cmp	r3, r5
 8009f60:	d040      	beq.n	8009fe4 <PDM_Filter_Init+0xac>
 8009f62:	6803      	ldr	r3, [r0, #0]
 8009f64:	f24c 2270 	movw	r2, #49776	; 0xc270
 8009f68:	4019      	ands	r1, r3
 8009f6a:	4291      	cmp	r1, r2
 8009f6c:	d03a      	beq.n	8009fe4 <PDM_Filter_Init+0xac>
 8009f6e:	4b4e      	ldr	r3, [pc, #312]	; (800a0a8 <PDM_Filter_Init+0x170>)
 8009f70:	2101      	movs	r1, #1
 8009f72:	461a      	mov	r2, r3
 8009f74:	6019      	str	r1, [r3, #0]
 8009f76:	6813      	ldr	r3, [r2, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1fc      	bne.n	8009f76 <PDM_Filter_Init+0x3e>
 8009f7c:	4b4b      	ldr	r3, [pc, #300]	; (800a0ac <PDM_Filter_Init+0x174>)
 8009f7e:	494c      	ldr	r1, [pc, #304]	; (800a0b0 <PDM_Filter_Init+0x178>)
 8009f80:	4a4c      	ldr	r2, [pc, #304]	; (800a0b4 <PDM_Filter_Init+0x17c>)
 8009f82:	6019      	str	r1, [r3, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	8820      	ldrh	r0, [r4, #0]
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	8961      	ldrh	r1, [r4, #10]
 8009f8c:	f04f 0300 	mov.w	r3, #0
 8009f90:	8922      	ldrh	r2, [r4, #8]
 8009f92:	bf14      	ite	ne
 8009f94:	2500      	movne	r5, #0
 8009f96:	4d47      	ldreq	r5, [pc, #284]	; (800a0b4 <PDM_Filter_Init+0x17c>)
 8009f98:	2801      	cmp	r0, #1
 8009f9a:	61a3      	str	r3, [r4, #24]
 8009f9c:	6465      	str	r5, [r4, #68]	; 0x44
 8009f9e:	60e3      	str	r3, [r4, #12]
 8009fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8009fa2:	6423      	str	r3, [r4, #64]	; 0x40
 8009fa4:	86a1      	strh	r1, [r4, #52]	; 0x34
 8009fa6:	86e2      	strh	r2, [r4, #54]	; 0x36
 8009fa8:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8009fac:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009fb0:	d936      	bls.n	800a020 <PDM_Filter_Init+0xe8>
 8009fb2:	2003      	movs	r0, #3
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	8862      	ldrh	r2, [r4, #2]
 8009fb8:	2a01      	cmp	r2, #1
 8009fba:	d92e      	bls.n	800a01a <PDM_Filter_Init+0xe2>
 8009fbc:	2140      	movs	r1, #64	; 0x40
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009fc2:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8009fc6:	d101      	bne.n	8009fcc <PDM_Filter_Init+0x94>
 8009fc8:	460b      	mov	r3, r1
 8009fca:	6421      	str	r1, [r4, #64]	; 0x40
 8009fcc:	6862      	ldr	r2, [r4, #4]
 8009fce:	b11a      	cbz	r2, 8009fd8 <PDM_Filter_Init+0xa0>
 8009fd0:	f043 0310 	orr.w	r3, r3, #16
 8009fd4:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009fd6:	6423      	str	r3, [r4, #64]	; 0x40
 8009fd8:	2200      	movs	r2, #0
 8009fda:	8722      	strh	r2, [r4, #56]	; 0x38
 8009fdc:	b908      	cbnz	r0, 8009fe2 <PDM_Filter_Init+0xaa>
 8009fde:	3380      	adds	r3, #128	; 0x80
 8009fe0:	6423      	str	r3, [r4, #64]	; 0x40
 8009fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe4:	4b34      	ldr	r3, [pc, #208]	; (800a0b8 <PDM_Filter_Init+0x180>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1c0      	bne.n	8009f6e <PDM_Filter_Init+0x36>
 8009fec:	4a33      	ldr	r2, [pc, #204]	; (800a0bc <PDM_Filter_Init+0x184>)
 8009fee:	6813      	ldr	r3, [r2, #0]
 8009ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ff4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009ff8:	d006      	beq.n	800a008 <PDM_Filter_Init+0xd0>
 8009ffa:	6813      	ldr	r3, [r2, #0]
 8009ffc:	f240 4283 	movw	r2, #1155	; 0x483
 800a000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a004:	4293      	cmp	r3, r2
 800a006:	d1b2      	bne.n	8009f6e <PDM_Filter_Init+0x36>
 800a008:	4b2d      	ldr	r3, [pc, #180]	; (800a0c0 <PDM_Filter_Init+0x188>)
 800a00a:	2101      	movs	r1, #1
 800a00c:	461a      	mov	r2, r3
 800a00e:	6019      	str	r1, [r3, #0]
 800a010:	6813      	ldr	r3, [r2, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1fc      	bne.n	800a010 <PDM_Filter_Init+0xd8>
 800a016:	4b2b      	ldr	r3, [pc, #172]	; (800a0c4 <PDM_Filter_Init+0x18c>)
 800a018:	e7b1      	b.n	8009f7e <PDM_Filter_Init+0x46>
 800a01a:	d03a      	beq.n	800a092 <PDM_Filter_Init+0x15a>
 800a01c:	4618      	mov	r0, r3
 800a01e:	e7cd      	b.n	8009fbc <PDM_Filter_Init+0x84>
 800a020:	4d29      	ldr	r5, [pc, #164]	; (800a0c8 <PDM_Filter_Init+0x190>)
 800a022:	782a      	ldrb	r2, [r5, #0]
 800a024:	d01b      	beq.n	800a05e <PDM_Filter_Init+0x126>
 800a026:	2a01      	cmp	r2, #1
 800a028:	d001      	beq.n	800a02e <PDM_Filter_Init+0xf6>
 800a02a:	2001      	movs	r0, #1
 800a02c:	e7c3      	b.n	8009fb6 <PDM_Filter_Init+0x7e>
 800a02e:	4927      	ldr	r1, [pc, #156]	; (800a0cc <PDM_Filter_Init+0x194>)
 800a030:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800a0d4 <PDM_Filter_Init+0x19c>
 800a034:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a038:	4e25      	ldr	r6, [pc, #148]	; (800a0d0 <PDM_Filter_Init+0x198>)
 800a03a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a03e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a042:	ea02 0006 	and.w	r0, r2, r6
 800a046:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a04a:	428f      	cmp	r7, r1
 800a04c:	ea43 0300 	orr.w	r3, r3, r0
 800a050:	4413      	add	r3, r2
 800a052:	600b      	str	r3, [r1, #0]
 800a054:	d1f1      	bne.n	800a03a <PDM_Filter_Init+0x102>
 800a056:	2300      	movs	r3, #0
 800a058:	2001      	movs	r0, #1
 800a05a:	702b      	strb	r3, [r5, #0]
 800a05c:	e7ab      	b.n	8009fb6 <PDM_Filter_Init+0x7e>
 800a05e:	2a00      	cmp	r2, #0
 800a060:	d1a9      	bne.n	8009fb6 <PDM_Filter_Init+0x7e>
 800a062:	491a      	ldr	r1, [pc, #104]	; (800a0cc <PDM_Filter_Init+0x194>)
 800a064:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800a0d4 <PDM_Filter_Init+0x19c>
 800a068:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a06c:	4e18      	ldr	r6, [pc, #96]	; (800a0d0 <PDM_Filter_Init+0x198>)
 800a06e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a072:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a076:	ea02 0006 	and.w	r0, r2, r6
 800a07a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a07e:	428f      	cmp	r7, r1
 800a080:	ea43 0300 	orr.w	r3, r3, r0
 800a084:	4413      	add	r3, r2
 800a086:	600b      	str	r3, [r1, #0]
 800a088:	d1f1      	bne.n	800a06e <PDM_Filter_Init+0x136>
 800a08a:	2001      	movs	r0, #1
 800a08c:	2300      	movs	r3, #0
 800a08e:	7028      	strb	r0, [r5, #0]
 800a090:	e791      	b.n	8009fb6 <PDM_Filter_Init+0x7e>
 800a092:	2220      	movs	r2, #32
 800a094:	4618      	mov	r0, r3
 800a096:	2160      	movs	r1, #96	; 0x60
 800a098:	6422      	str	r2, [r4, #64]	; 0x40
 800a09a:	4613      	mov	r3, r2
 800a09c:	e790      	b.n	8009fc0 <PDM_Filter_Init+0x88>
 800a09e:	bf00      	nop
 800a0a0:	e0002000 	.word	0xe0002000
 800a0a4:	e000ed00 	.word	0xe000ed00
 800a0a8:	40023008 	.word	0x40023008
 800a0ac:	40023000 	.word	0x40023000
 800a0b0:	f407a5c2 	.word	0xf407a5c2
 800a0b4:	b5e8b5cd 	.word	0xb5e8b5cd
 800a0b8:	e0042000 	.word	0xe0042000
 800a0bc:	5c001000 	.word	0x5c001000
 800a0c0:	58024c08 	.word	0x58024c08
 800a0c4:	58024c00 	.word	0x58024c00
 800a0c8:	24000498 	.word	0x24000498
 800a0cc:	23fffffc 	.word	0x23fffffc
 800a0d0:	000ffc00 	.word	0x000ffc00
 800a0d4:	3ff00000 	.word	0x3ff00000

0800a0d8 <PDM_Filter_setConfig>:
 800a0d8:	4b67      	ldr	r3, [pc, #412]	; (800a278 <PDM_Filter_setConfig+0x1a0>)
 800a0da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d128      	bne.n	800a132 <PDM_Filter_setConfig+0x5a>
 800a0e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a0e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0e4:	880e      	ldrh	r6, [r1, #0]
 800a0e6:	460d      	mov	r5, r1
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800a0ee:	1e73      	subs	r3, r6, #1
 800a0f0:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800a0f4:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800a0f8:	2b06      	cmp	r3, #6
 800a0fa:	ed2d 8b02 	vpush	{d8}
 800a0fe:	6421      	str	r1, [r4, #64]	; 0x40
 800a100:	b083      	sub	sp, #12
 800a102:	d820      	bhi.n	800a146 <PDM_Filter_setConfig+0x6e>
 800a104:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a106:	42b3      	cmp	r3, r6
 800a108:	d03d      	beq.n	800a186 <PDM_Filter_setConfig+0xae>
 800a10a:	4b5c      	ldr	r3, [pc, #368]	; (800a27c <PDM_Filter_setConfig+0x1a4>)
 800a10c:	4013      	ands	r3, r2
 800a10e:	4333      	orrs	r3, r6
 800a110:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a114:	6423      	str	r3, [r4, #64]	; 0x40
 800a116:	f003 030f 	and.w	r3, r3, #15
 800a11a:	2a70      	cmp	r2, #112	; 0x70
 800a11c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a120:	d009      	beq.n	800a136 <PDM_Filter_setConfig+0x5e>
 800a122:	2b06      	cmp	r3, #6
 800a124:	d824      	bhi.n	800a170 <PDM_Filter_setConfig+0x98>
 800a126:	e8df f003 	tbb	[pc, r3]
 800a12a:	878a      	.short	0x878a
 800a12c:	7b7e8184 	.word	0x7b7e8184
 800a130:	78          	.byte	0x78
 800a131:	00          	.byte	0x00
 800a132:	2004      	movs	r0, #4
 800a134:	4770      	bx	lr
 800a136:	2b06      	cmp	r3, #6
 800a138:	d81a      	bhi.n	800a170 <PDM_Filter_setConfig+0x98>
 800a13a:	e8df f003 	tbb	[pc, r3]
 800a13e:	8f92      	.short	0x8f92
 800a140:	8617898c 	.word	0x8617898c
 800a144:	83          	.byte	0x83
 800a145:	00          	.byte	0x00
 800a146:	4287      	cmp	r7, r0
 800a148:	f000 808e 	beq.w	800a268 <PDM_Filter_setConfig+0x190>
 800a14c:	f117 0f0c 	cmn.w	r7, #12
 800a150:	f04f 0008 	mov.w	r0, #8
 800a154:	da11      	bge.n	800a17a <PDM_Filter_setConfig+0xa2>
 800a156:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800a15a:	3040      	adds	r0, #64	; 0x40
 800a15c:	80ab      	strh	r3, [r5, #4]
 800a15e:	886b      	ldrh	r3, [r5, #2]
 800a160:	8626      	strh	r6, [r4, #48]	; 0x30
 800a162:	8663      	strh	r3, [r4, #50]	; 0x32
 800a164:	b003      	add	sp, #12
 800a166:	ecbd 8b02 	vpop	{d8}
 800a16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a16c:	4b44      	ldr	r3, [pc, #272]	; (800a280 <PDM_Filter_setConfig+0x1a8>)
 800a16e:	64a3      	str	r3, [r4, #72]	; 0x48
 800a170:	f117 0f0c 	cmn.w	r7, #12
 800a174:	f04f 0000 	mov.w	r0, #0
 800a178:	dbed      	blt.n	800a156 <PDM_Filter_setConfig+0x7e>
 800a17a:	2f33      	cmp	r7, #51	; 0x33
 800a17c:	dd10      	ble.n	800a1a0 <PDM_Filter_setConfig+0xc8>
 800a17e:	2333      	movs	r3, #51	; 0x33
 800a180:	3040      	adds	r0, #64	; 0x40
 800a182:	80ab      	strh	r3, [r5, #4]
 800a184:	e7eb      	b.n	800a15e <PDM_Filter_setConfig+0x86>
 800a186:	4287      	cmp	r7, r0
 800a188:	d1f2      	bne.n	800a170 <PDM_Filter_setConfig+0x98>
 800a18a:	886b      	ldrh	r3, [r5, #2]
 800a18c:	8663      	strh	r3, [r4, #50]	; 0x32
 800a18e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a190:	2000      	movs	r0, #0
 800a192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a196:	6423      	str	r3, [r4, #64]	; 0x40
 800a198:	b003      	add	sp, #12
 800a19a:	ecbd 8b02 	vpop	{d8}
 800a19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1a2:	f003 030f 	and.w	r3, r3, #15
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	2b06      	cmp	r3, #6
 800a1aa:	d831      	bhi.n	800a210 <PDM_Filter_setConfig+0x138>
 800a1ac:	4a35      	ldr	r2, [pc, #212]	; (800a284 <PDM_Filter_setConfig+0x1ac>)
 800a1ae:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a1b2:	eddf 0a35 	vldr	s1, [pc, #212]	; 800a288 <PDM_Filter_setConfig+0x1b0>
 800a1b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1ba:	9001      	str	r0, [sp, #4]
 800a1bc:	edd3 7a07 	vldr	s15, [r3, #28]
 800a1c0:	ed93 8a00 	vldr	s16, [r3]
 800a1c4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a1c8:	f000 f8ca 	bl	800a360 <powf>
 800a1cc:	eef0 8a40 	vmov.f32	s17, s0
 800a1d0:	9801      	ldr	r0, [sp, #4]
 800a1d2:	ee07 7a90 	vmov	s15, r7
 800a1d6:	ee28 8a28 	vmul.f32	s16, s16, s17
 800a1da:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800a1de:	9001      	str	r0, [sp, #4]
 800a1e0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800a1e4:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a28c <PDM_Filter_setConfig+0x1b4>
 800a1e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a1ec:	f000 f8b8 	bl	800a360 <powf>
 800a1f0:	ee28 8a00 	vmul.f32	s16, s16, s0
 800a1f4:	886b      	ldrh	r3, [r5, #2]
 800a1f6:	9801      	ldr	r0, [sp, #4]
 800a1f8:	feb8 8a48 	vrinta.f32	s16, s16
 800a1fc:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800a200:	8727      	strh	r7, [r4, #56]	; 0x38
 800a202:	8663      	strh	r3, [r4, #50]	; 0x32
 800a204:	8626      	strh	r6, [r4, #48]	; 0x30
 800a206:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d0bf      	beq.n	800a18e <PDM_Filter_setConfig+0xb6>
 800a20e:	e7a9      	b.n	800a164 <PDM_Filter_setConfig+0x8c>
 800a210:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800a290 <PDM_Filter_setConfig+0x1b8>
 800a214:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800a294 <PDM_Filter_setConfig+0x1bc>
 800a218:	e7db      	b.n	800a1d2 <PDM_Filter_setConfig+0xfa>
 800a21a:	4b1f      	ldr	r3, [pc, #124]	; (800a298 <PDM_Filter_setConfig+0x1c0>)
 800a21c:	64a3      	str	r3, [r4, #72]	; 0x48
 800a21e:	e7a7      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a220:	4b1e      	ldr	r3, [pc, #120]	; (800a29c <PDM_Filter_setConfig+0x1c4>)
 800a222:	64a3      	str	r3, [r4, #72]	; 0x48
 800a224:	e7a4      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a226:	4b1e      	ldr	r3, [pc, #120]	; (800a2a0 <PDM_Filter_setConfig+0x1c8>)
 800a228:	64a3      	str	r3, [r4, #72]	; 0x48
 800a22a:	e7a1      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a22c:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <PDM_Filter_setConfig+0x1cc>)
 800a22e:	64a3      	str	r3, [r4, #72]	; 0x48
 800a230:	e79e      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a232:	4b1d      	ldr	r3, [pc, #116]	; (800a2a8 <PDM_Filter_setConfig+0x1d0>)
 800a234:	64a3      	str	r3, [r4, #72]	; 0x48
 800a236:	e79b      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a238:	4b1c      	ldr	r3, [pc, #112]	; (800a2ac <PDM_Filter_setConfig+0x1d4>)
 800a23a:	64a3      	str	r3, [r4, #72]	; 0x48
 800a23c:	e798      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a23e:	4b1c      	ldr	r3, [pc, #112]	; (800a2b0 <PDM_Filter_setConfig+0x1d8>)
 800a240:	64a3      	str	r3, [r4, #72]	; 0x48
 800a242:	e795      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a244:	4b1b      	ldr	r3, [pc, #108]	; (800a2b4 <PDM_Filter_setConfig+0x1dc>)
 800a246:	64a3      	str	r3, [r4, #72]	; 0x48
 800a248:	e792      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a24a:	4b1b      	ldr	r3, [pc, #108]	; (800a2b8 <PDM_Filter_setConfig+0x1e0>)
 800a24c:	64a3      	str	r3, [r4, #72]	; 0x48
 800a24e:	e78f      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a250:	4b1a      	ldr	r3, [pc, #104]	; (800a2bc <PDM_Filter_setConfig+0x1e4>)
 800a252:	64a3      	str	r3, [r4, #72]	; 0x48
 800a254:	e78c      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a256:	4b1a      	ldr	r3, [pc, #104]	; (800a2c0 <PDM_Filter_setConfig+0x1e8>)
 800a258:	64a3      	str	r3, [r4, #72]	; 0x48
 800a25a:	e789      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a25c:	4b19      	ldr	r3, [pc, #100]	; (800a2c4 <PDM_Filter_setConfig+0x1ec>)
 800a25e:	64a3      	str	r3, [r4, #72]	; 0x48
 800a260:	e786      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a262:	4b19      	ldr	r3, [pc, #100]	; (800a2c8 <PDM_Filter_setConfig+0x1f0>)
 800a264:	64a3      	str	r3, [r4, #72]	; 0x48
 800a266:	e783      	b.n	800a170 <PDM_Filter_setConfig+0x98>
 800a268:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a26a:	42b3      	cmp	r3, r6
 800a26c:	f47f af6e 	bne.w	800a14c <PDM_Filter_setConfig+0x74>
 800a270:	886b      	ldrh	r3, [r5, #2]
 800a272:	2008      	movs	r0, #8
 800a274:	8663      	strh	r3, [r4, #50]	; 0x32
 800a276:	e775      	b.n	800a164 <PDM_Filter_setConfig+0x8c>
 800a278:	b5e8b5cd 	.word	0xb5e8b5cd
 800a27c:	fffffef0 	.word	0xfffffef0
 800a280:	080093f1 	.word	0x080093f1
 800a284:	0800a6d0 	.word	0x0800a6d0
 800a288:	42000000 	.word	0x42000000
 800a28c:	3d4ccccd 	.word	0x3d4ccccd
 800a290:	4f800000 	.word	0x4f800000
 800a294:	00000000 	.word	0x00000000
 800a298:	080087fd 	.word	0x080087fd
 800a29c:	08008685 	.word	0x08008685
 800a2a0:	08008575 	.word	0x08008575
 800a2a4:	08009039 	.word	0x08009039
 800a2a8:	08008da1 	.word	0x08008da1
 800a2ac:	08008b69 	.word	0x08008b69
 800a2b0:	08008985 	.word	0x08008985
 800a2b4:	0800960d 	.word	0x0800960d
 800a2b8:	080094d1 	.word	0x080094d1
 800a2bc:	08009c4d 	.word	0x08009c4d
 800a2c0:	08009a51 	.word	0x08009a51
 800a2c4:	080098a5 	.word	0x080098a5
 800a2c8:	08009739 	.word	0x08009739

0800a2cc <__errno>:
 800a2cc:	4b01      	ldr	r3, [pc, #4]	; (800a2d4 <__errno+0x8>)
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	24000418 	.word	0x24000418

0800a2d8 <__libc_init_array>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	4d0d      	ldr	r5, [pc, #52]	; (800a310 <__libc_init_array+0x38>)
 800a2dc:	4c0d      	ldr	r4, [pc, #52]	; (800a314 <__libc_init_array+0x3c>)
 800a2de:	1b64      	subs	r4, r4, r5
 800a2e0:	10a4      	asrs	r4, r4, #2
 800a2e2:	2600      	movs	r6, #0
 800a2e4:	42a6      	cmp	r6, r4
 800a2e6:	d109      	bne.n	800a2fc <__libc_init_array+0x24>
 800a2e8:	4d0b      	ldr	r5, [pc, #44]	; (800a318 <__libc_init_array+0x40>)
 800a2ea:	4c0c      	ldr	r4, [pc, #48]	; (800a31c <__libc_init_array+0x44>)
 800a2ec:	f000 f9e4 	bl	800a6b8 <_init>
 800a2f0:	1b64      	subs	r4, r4, r5
 800a2f2:	10a4      	asrs	r4, r4, #2
 800a2f4:	2600      	movs	r6, #0
 800a2f6:	42a6      	cmp	r6, r4
 800a2f8:	d105      	bne.n	800a306 <__libc_init_array+0x2e>
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a300:	4798      	blx	r3
 800a302:	3601      	adds	r6, #1
 800a304:	e7ee      	b.n	800a2e4 <__libc_init_array+0xc>
 800a306:	f855 3b04 	ldr.w	r3, [r5], #4
 800a30a:	4798      	blx	r3
 800a30c:	3601      	adds	r6, #1
 800a30e:	e7f2      	b.n	800a2f6 <__libc_init_array+0x1e>
 800a310:	0800a998 	.word	0x0800a998
 800a314:	0800a998 	.word	0x0800a998
 800a318:	0800a998 	.word	0x0800a998
 800a31c:	0800a99c 	.word	0x0800a99c

0800a320 <memset>:
 800a320:	4402      	add	r2, r0
 800a322:	4603      	mov	r3, r0
 800a324:	4293      	cmp	r3, r2
 800a326:	d100      	bne.n	800a32a <memset+0xa>
 800a328:	4770      	bx	lr
 800a32a:	f803 1b01 	strb.w	r1, [r3], #1
 800a32e:	e7f9      	b.n	800a324 <memset+0x4>

0800a330 <checkint>:
 800a330:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a334:	2b7e      	cmp	r3, #126	; 0x7e
 800a336:	dd10      	ble.n	800a35a <checkint+0x2a>
 800a338:	2b96      	cmp	r3, #150	; 0x96
 800a33a:	dc0c      	bgt.n	800a356 <checkint+0x26>
 800a33c:	2201      	movs	r2, #1
 800a33e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a342:	fa02 f303 	lsl.w	r3, r2, r3
 800a346:	1e5a      	subs	r2, r3, #1
 800a348:	4202      	tst	r2, r0
 800a34a:	d106      	bne.n	800a35a <checkint+0x2a>
 800a34c:	4203      	tst	r3, r0
 800a34e:	bf0c      	ite	eq
 800a350:	2002      	moveq	r0, #2
 800a352:	2001      	movne	r0, #1
 800a354:	4770      	bx	lr
 800a356:	2002      	movs	r0, #2
 800a358:	4770      	bx	lr
 800a35a:	2000      	movs	r0, #0
 800a35c:	4770      	bx	lr
	...

0800a360 <powf>:
 800a360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a362:	ee10 1a10 	vmov	r1, s0
 800a366:	ee10 6a90 	vmov	r6, s1
 800a36a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800a36e:	0072      	lsls	r2, r6, #1
 800a370:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a374:	b085      	sub	sp, #20
 800a376:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800a37a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800a37e:	d256      	bcs.n	800a42e <powf+0xce>
 800a380:	4298      	cmp	r0, r3
 800a382:	d256      	bcs.n	800a432 <powf+0xd2>
 800a384:	2000      	movs	r0, #0
 800a386:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800a38a:	4ea3      	ldr	r6, [pc, #652]	; (800a618 <powf+0x2b8>)
 800a38c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a390:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800a394:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800a398:	0dd2      	lsrs	r2, r2, #23
 800a39a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800a39e:	05d2      	lsls	r2, r2, #23
 800a3a0:	1a8b      	subs	r3, r1, r2
 800a3a2:	ed97 5b00 	vldr	d5, [r7]
 800a3a6:	ee07 3a90 	vmov	s15, r3
 800a3aa:	15d2      	asrs	r2, r2, #23
 800a3ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a3b0:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a3b4:	ed97 5b02 	vldr	d5, [r7, #8]
 800a3b8:	ee26 2b06 	vmul.f64	d2, d6, d6
 800a3bc:	ee22 1b02 	vmul.f64	d1, d2, d2
 800a3c0:	ee07 2a90 	vmov	s15, r2
 800a3c4:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800a3c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a3cc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a3d0:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800a3d4:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800a3d8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a3dc:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800a3e0:	eea6 4b03 	vfma.f64	d4, d6, d3
 800a3e4:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800a3e8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800a3ec:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a3f0:	eea2 7b04 	vfma.f64	d7, d2, d4
 800a3f4:	eea5 7b01 	vfma.f64	d7, d5, d1
 800a3f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a3fc:	ee10 1a90 	vmov	r1, s1
 800a400:	2300      	movs	r3, #0
 800a402:	2700      	movs	r7, #0
 800a404:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800a408:	f248 06be 	movw	r6, #32958	; 0x80be
 800a40c:	429f      	cmp	r7, r3
 800a40e:	bf08      	it	eq
 800a410:	4296      	cmpeq	r6, r2
 800a412:	f080 80b1 	bcs.w	800a578 <powf+0x218>
 800a416:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800a5f8 <powf+0x298>
 800a41a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a422:	dd79      	ble.n	800a518 <powf+0x1b8>
 800a424:	b005      	add	sp, #20
 800a426:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a42a:	f000 b91f 	b.w	800a66c <__math_oflowf>
 800a42e:	4298      	cmp	r0, r3
 800a430:	d32d      	bcc.n	800a48e <powf+0x12e>
 800a432:	b952      	cbnz	r2, 800a44a <powf+0xea>
 800a434:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800a43e:	f240 80cd 	bls.w	800a5dc <powf+0x27c>
 800a442:	ee30 0a20 	vadd.f32	s0, s0, s1
 800a446:	b005      	add	sp, #20
 800a448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a44a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a44e:	d105      	bne.n	800a45c <powf+0xfc>
 800a450:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800a454:	0076      	lsls	r6, r6, #1
 800a456:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800a45a:	e7f0      	b.n	800a43e <powf+0xde>
 800a45c:	004b      	lsls	r3, r1, #1
 800a45e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800a462:	d8ee      	bhi.n	800a442 <powf+0xe2>
 800a464:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800a468:	d1eb      	bne.n	800a442 <powf+0xe2>
 800a46a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a46e:	f000 80b5 	beq.w	800a5dc <powf+0x27c>
 800a472:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a476:	ea6f 0606 	mvn.w	r6, r6
 800a47a:	bf34      	ite	cc
 800a47c:	2300      	movcc	r3, #0
 800a47e:	2301      	movcs	r3, #1
 800a480:	0ff6      	lsrs	r6, r6, #31
 800a482:	42b3      	cmp	r3, r6
 800a484:	f040 80ad 	bne.w	800a5e2 <powf+0x282>
 800a488:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800a48c:	e7db      	b.n	800a446 <powf+0xe6>
 800a48e:	004f      	lsls	r7, r1, #1
 800a490:	1e7a      	subs	r2, r7, #1
 800a492:	429a      	cmp	r2, r3
 800a494:	d31c      	bcc.n	800a4d0 <powf+0x170>
 800a496:	2900      	cmp	r1, #0
 800a498:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a49c:	da0f      	bge.n	800a4be <powf+0x15e>
 800a49e:	ee10 0a90 	vmov	r0, s1
 800a4a2:	f7ff ff45 	bl	800a330 <checkint>
 800a4a6:	2801      	cmp	r0, #1
 800a4a8:	d109      	bne.n	800a4be <powf+0x15e>
 800a4aa:	eeb1 0a40 	vneg.f32	s0, s0
 800a4ae:	b947      	cbnz	r7, 800a4c2 <powf+0x162>
 800a4b0:	2e00      	cmp	r6, #0
 800a4b2:	dac8      	bge.n	800a446 <powf+0xe6>
 800a4b4:	b005      	add	sp, #20
 800a4b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a4ba:	f000 b8dd 	b.w	800a678 <__math_divzerof>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	e7f5      	b.n	800a4ae <powf+0x14e>
 800a4c2:	2e00      	cmp	r6, #0
 800a4c4:	dabf      	bge.n	800a446 <powf+0xe6>
 800a4c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a4ca:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a4ce:	e7ba      	b.n	800a446 <powf+0xe6>
 800a4d0:	2900      	cmp	r1, #0
 800a4d2:	da1f      	bge.n	800a514 <powf+0x1b4>
 800a4d4:	ee10 0a90 	vmov	r0, s1
 800a4d8:	f7ff ff2a 	bl	800a330 <checkint>
 800a4dc:	b920      	cbnz	r0, 800a4e8 <powf+0x188>
 800a4de:	b005      	add	sp, #20
 800a4e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a4e4:	f000 b8d8 	b.w	800a698 <__math_invalidf>
 800a4e8:	2801      	cmp	r0, #1
 800a4ea:	bf14      	ite	ne
 800a4ec:	2000      	movne	r0, #0
 800a4ee:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a4f2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a4f6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a4fa:	f4bf af44 	bcs.w	800a386 <powf+0x26>
 800a4fe:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a61c <powf+0x2bc>
 800a502:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a506:	ee10 3a10 	vmov	r3, s0
 800a50a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a50e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800a512:	e738      	b.n	800a386 <powf+0x26>
 800a514:	2000      	movs	r0, #0
 800a516:	e7ee      	b.n	800a4f6 <powf+0x196>
 800a518:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800a600 <powf+0x2a0>
 800a51c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a524:	dd10      	ble.n	800a548 <powf+0x1e8>
 800a526:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d15c      	bne.n	800a5e8 <powf+0x288>
 800a52e:	9302      	str	r3, [sp, #8]
 800a530:	eddd 7a02 	vldr	s15, [sp, #8]
 800a534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a53c:	eef4 7a47 	vcmp.f32	s15, s14
 800a540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a544:	f47f af6e 	bne.w	800a424 <powf+0xc4>
 800a548:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a608 <powf+0x2a8>
 800a54c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a554:	d804      	bhi.n	800a560 <powf+0x200>
 800a556:	b005      	add	sp, #20
 800a558:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a55c:	f000 b87a 	b.w	800a654 <__math_uflowf>
 800a560:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800a610 <powf+0x2b0>
 800a564:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a56c:	d504      	bpl.n	800a578 <powf+0x218>
 800a56e:	b005      	add	sp, #20
 800a570:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a574:	f000 b874 	b.w	800a660 <__math_may_uflowf>
 800a578:	4b29      	ldr	r3, [pc, #164]	; (800a620 <powf+0x2c0>)
 800a57a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800a57e:	ee30 6b07 	vadd.f64	d6, d0, d7
 800a582:	ed8d 6b00 	vstr	d6, [sp]
 800a586:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a58a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800a58e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a592:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a596:	f006 011f 	and.w	r1, r6, #31
 800a59a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a59e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800a5a2:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800a5a6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800a5aa:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800a5ae:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a5b2:	ee27 5b07 	vmul.f64	d5, d7, d7
 800a5b6:	1836      	adds	r6, r6, r0
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	eb13 040c 	adds.w	r4, r3, ip
 800a5be:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800a5c2:	eb41 050e 	adc.w	r5, r1, lr
 800a5c6:	eea7 0b04 	vfma.f64	d0, d7, d4
 800a5ca:	ec45 4b17 	vmov	d7, r4, r5
 800a5ce:	eea6 0b05 	vfma.f64	d0, d6, d5
 800a5d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a5d6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a5da:	e734      	b.n	800a446 <powf+0xe6>
 800a5dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a5e0:	e731      	b.n	800a446 <powf+0xe6>
 800a5e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a624 <powf+0x2c4>
 800a5e6:	e72e      	b.n	800a446 <powf+0xe6>
 800a5e8:	9303      	str	r3, [sp, #12]
 800a5ea:	eddd 7a03 	vldr	s15, [sp, #12]
 800a5ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a5f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5f6:	e7a1      	b.n	800a53c <powf+0x1dc>
 800a5f8:	ffd1d571 	.word	0xffd1d571
 800a5fc:	405fffff 	.word	0x405fffff
 800a600:	ffa3aae2 	.word	0xffa3aae2
 800a604:	405fffff 	.word	0x405fffff
 800a608:	00000000 	.word	0x00000000
 800a60c:	c062c000 	.word	0xc062c000
 800a610:	00000000 	.word	0x00000000
 800a614:	c062a000 	.word	0xc062a000
 800a618:	0800a728 	.word	0x0800a728
 800a61c:	4b000000 	.word	0x4b000000
 800a620:	0800a850 	.word	0x0800a850
 800a624:	00000000 	.word	0x00000000

0800a628 <with_errnof>:
 800a628:	b513      	push	{r0, r1, r4, lr}
 800a62a:	4604      	mov	r4, r0
 800a62c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a630:	f7ff fe4c 	bl	800a2cc <__errno>
 800a634:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a638:	6004      	str	r4, [r0, #0]
 800a63a:	b002      	add	sp, #8
 800a63c:	bd10      	pop	{r4, pc}

0800a63e <xflowf>:
 800a63e:	b130      	cbz	r0, 800a64e <xflowf+0x10>
 800a640:	eef1 7a40 	vneg.f32	s15, s0
 800a644:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a648:	2022      	movs	r0, #34	; 0x22
 800a64a:	f7ff bfed 	b.w	800a628 <with_errnof>
 800a64e:	eef0 7a40 	vmov.f32	s15, s0
 800a652:	e7f7      	b.n	800a644 <xflowf+0x6>

0800a654 <__math_uflowf>:
 800a654:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a65c <__math_uflowf+0x8>
 800a658:	f7ff bff1 	b.w	800a63e <xflowf>
 800a65c:	10000000 	.word	0x10000000

0800a660 <__math_may_uflowf>:
 800a660:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a668 <__math_may_uflowf+0x8>
 800a664:	f7ff bfeb 	b.w	800a63e <xflowf>
 800a668:	1a200000 	.word	0x1a200000

0800a66c <__math_oflowf>:
 800a66c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a674 <__math_oflowf+0x8>
 800a670:	f7ff bfe5 	b.w	800a63e <xflowf>
 800a674:	70000000 	.word	0x70000000

0800a678 <__math_divzerof>:
 800a678:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a67c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a680:	2800      	cmp	r0, #0
 800a682:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800a686:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800a694 <__math_divzerof+0x1c>
 800a68a:	2022      	movs	r0, #34	; 0x22
 800a68c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a690:	f7ff bfca 	b.w	800a628 <with_errnof>
 800a694:	00000000 	.word	0x00000000

0800a698 <__math_invalidf>:
 800a698:	eef0 7a40 	vmov.f32	s15, s0
 800a69c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a6a0:	eef4 7a67 	vcmp.f32	s15, s15
 800a6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a6ac:	d602      	bvs.n	800a6b4 <__math_invalidf+0x1c>
 800a6ae:	2021      	movs	r0, #33	; 0x21
 800a6b0:	f7ff bfba 	b.w	800a628 <with_errnof>
 800a6b4:	4770      	bx	lr
	...

0800a6b8 <_init>:
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ba:	bf00      	nop
 800a6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6be:	bc08      	pop	{r3}
 800a6c0:	469e      	mov	lr, r3
 800a6c2:	4770      	bx	lr

0800a6c4 <_fini>:
 800a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c6:	bf00      	nop
 800a6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ca:	bc08      	pop	{r3}
 800a6cc:	469e      	mov	lr, r3
 800a6ce:	4770      	bx	lr
