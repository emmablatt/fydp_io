
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e708  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800e9d8  0800e9d8  0001e9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ed48  0800ed48  0001ed48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ed50  0800ed50  0001ed50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ed54  0800ed54  0001ed54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004c0  24000000  0800ed58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002eac  240004c0  0800f218  000204c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400336c  0800f218  0002336c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003809e  00000000  00000000  000204ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004481  00000000  00000000  0005858c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e68  00000000  00000000  0005ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d58  00000000  00000000  0005e878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000074f5  00000000  00000000  000605d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000228b3  00000000  00000000  00067ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ace4  00000000  00000000  0008a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000d1  00000000  00000000  001e505c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000083a4  00000000  00000000  001e5130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240004c0 	.word	0x240004c0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e9c0 	.word	0x0800e9c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240004c4 	.word	0x240004c4
 800030c:	0800e9c0 	.word	0x0800e9c0

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 8000612:	2303      	movs	r3, #3
 8000614:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f103 0018 	add.w	r0, r3, #24
 800061c:	f107 020a 	add.w	r2, r7, #10
 8000620:	2302      	movs	r3, #2
 8000622:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000626:	f001 fdb9 	bl	800219c <wm8994_write_reg>
 800062a:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 800062c:	2300      	movs	r3, #0
 800062e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f103 0018 	add.w	r0, r3, #24
 8000636:	f107 020a 	add.w	r2, r7, #10
 800063a:	2302      	movs	r3, #2
 800063c:	f640 0117 	movw	r1, #2071	; 0x817
 8000640:	f001 fdac 	bl	800219c <wm8994_write_reg>
 8000644:	4602      	mov	r2, r0
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4413      	add	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f103 0018 	add.w	r0, r3, #24
 8000652:	f107 020a 	add.w	r2, r7, #10
 8000656:	2302      	movs	r3, #2
 8000658:	f44f 7181 	mov.w	r1, #258	; 0x102
 800065c:	f001 fd9e 	bl	800219c <wm8994_write_reg>
 8000660:	4602      	mov	r2, r0
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8000668:	236c      	movs	r3, #108	; 0x6c
 800066a:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f103 0018 	add.w	r0, r3, #24
 8000672:	f107 020a 	add.w	r2, r7, #10
 8000676:	2302      	movs	r3, #2
 8000678:	2139      	movs	r1, #57	; 0x39
 800067a:	f001 fd8f 	bl	800219c <wm8994_write_reg>
 800067e:	4602      	mov	r2, r0
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00f      	beq.n	80006ae <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 800068e:	2313      	movs	r3, #19
 8000690:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f103 0018 	add.w	r0, r3, #24
 8000698:	f107 020a 	add.w	r2, r7, #10
 800069c:	2302      	movs	r3, #2
 800069e:	2101      	movs	r1, #1
 80006a0:	f001 fd7c 	bl	800219c <wm8994_write_reg>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e00e      	b.n	80006cc <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 80006ae:	2303      	movs	r3, #3
 80006b0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f103 0018 	add.w	r0, r3, #24
 80006b8:	f107 020a 	add.w	r2, r7, #10
 80006bc:	2302      	movs	r3, #2
 80006be:	2101      	movs	r1, #1
 80006c0:	f001 fd6c 	bl	800219c <wm8994_write_reg>
 80006c4:	4602      	mov	r2, r0
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	4413      	add	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80006cc:	2132      	movs	r1, #50	; 0x32
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f001 fcec 	bl	80020ac <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	f200 8141 	bhi.w	8000960 <WM8994_Init+0x358>
 80006de:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <WM8994_Init+0xdc>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	080009fb 	.word	0x080009fb
 80006e8:	080006f5 	.word	0x080006f5
 80006ec:	0800078f 	.word	0x0800078f
 80006f0:	08000829 	.word	0x08000829
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 80006f4:	f640 430c 	movw	r3, #3084	; 0xc0c
 80006f8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f103 0018 	add.w	r0, r3, #24
 8000700:	f107 020a 	add.w	r2, r7, #10
 8000704:	2302      	movs	r3, #2
 8000706:	2105      	movs	r1, #5
 8000708:	f001 fd48 	bl	800219c <wm8994_write_reg>
 800070c:	4602      	mov	r2, r0
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 8000714:	2300      	movs	r3, #0
 8000716:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f103 0018 	add.w	r0, r3, #24
 800071e:	f107 020a 	add.w	r2, r7, #10
 8000722:	2302      	movs	r3, #2
 8000724:	f240 6101 	movw	r1, #1537	; 0x601
 8000728:	f001 fd38 	bl	800219c <wm8994_write_reg>
 800072c:	4602      	mov	r2, r0
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4413      	add	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f103 0018 	add.w	r0, r3, #24
 800073a:	f107 020a 	add.w	r2, r7, #10
 800073e:	2302      	movs	r3, #2
 8000740:	f240 6102 	movw	r1, #1538	; 0x602
 8000744:	f001 fd2a 	bl	800219c <wm8994_write_reg>
 8000748:	4602      	mov	r2, r0
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 8000750:	2302      	movs	r3, #2
 8000752:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f103 0018 	add.w	r0, r3, #24
 800075a:	f107 020a 	add.w	r2, r7, #10
 800075e:	2302      	movs	r3, #2
 8000760:	f240 6104 	movw	r1, #1540	; 0x604
 8000764:	f001 fd1a 	bl	800219c <wm8994_write_reg>
 8000768:	4602      	mov	r2, r0
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f103 0018 	add.w	r0, r3, #24
 8000776:	f107 020a 	add.w	r2, r7, #10
 800077a:	2302      	movs	r3, #2
 800077c:	f240 6105 	movw	r1, #1541	; 0x605
 8000780:	f001 fd0c 	bl	800219c <wm8994_write_reg>
 8000784:	4602      	mov	r2, r0
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
    break;
 800078c:	e136      	b.n	80009fc <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800078e:	f240 3303 	movw	r3, #771	; 0x303
 8000792:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f103 0018 	add.w	r0, r3, #24
 800079a:	f107 020a 	add.w	r2, r7, #10
 800079e:	2302      	movs	r3, #2
 80007a0:	2105      	movs	r1, #5
 80007a2:	f001 fcfb 	bl	800219c <wm8994_write_reg>
 80007a6:	4602      	mov	r2, r0
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4413      	add	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80007ae:	2301      	movs	r3, #1
 80007b0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f103 0018 	add.w	r0, r3, #24
 80007b8:	f107 020a 	add.w	r2, r7, #10
 80007bc:	2302      	movs	r3, #2
 80007be:	f240 6101 	movw	r1, #1537	; 0x601
 80007c2:	f001 fceb 	bl	800219c <wm8994_write_reg>
 80007c6:	4602      	mov	r2, r0
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f103 0018 	add.w	r0, r3, #24
 80007d4:	f107 020a 	add.w	r2, r7, #10
 80007d8:	2302      	movs	r3, #2
 80007da:	f240 6102 	movw	r1, #1538	; 0x602
 80007de:	f001 fcdd 	bl	800219c <wm8994_write_reg>
 80007e2:	4602      	mov	r2, r0
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80007ea:	2300      	movs	r3, #0
 80007ec:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f103 0018 	add.w	r0, r3, #24
 80007f4:	f107 020a 	add.w	r2, r7, #10
 80007f8:	2302      	movs	r3, #2
 80007fa:	f240 6104 	movw	r1, #1540	; 0x604
 80007fe:	f001 fccd 	bl	800219c <wm8994_write_reg>
 8000802:	4602      	mov	r2, r0
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f103 0018 	add.w	r0, r3, #24
 8000810:	f107 020a 	add.w	r2, r7, #10
 8000814:	2302      	movs	r3, #2
 8000816:	f240 6105 	movw	r1, #1541	; 0x605
 800081a:	f001 fcbf 	bl	800219c <wm8994_write_reg>
 800081e:	4602      	mov	r2, r0
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
    break;
 8000826:	e0e9      	b.n	80009fc <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b05      	cmp	r3, #5
 800082e:	d14a      	bne.n	80008c6 <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8000830:	f640 730f 	movw	r3, #3855	; 0xf0f
 8000834:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f103 0018 	add.w	r0, r3, #24
 800083c:	f107 020a 	add.w	r2, r7, #10
 8000840:	2302      	movs	r3, #2
 8000842:	2105      	movs	r1, #5
 8000844:	f001 fcaa 	bl	800219c <wm8994_write_reg>
 8000848:	4602      	mov	r2, r0
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4413      	add	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 8000850:	2303      	movs	r3, #3
 8000852:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f103 0018 	add.w	r0, r3, #24
 800085a:	f107 020a 	add.w	r2, r7, #10
 800085e:	2302      	movs	r3, #2
 8000860:	f240 6101 	movw	r1, #1537	; 0x601
 8000864:	f001 fc9a 	bl	800219c <wm8994_write_reg>
 8000868:	4602      	mov	r2, r0
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f103 0018 	add.w	r0, r3, #24
 8000876:	f107 020a 	add.w	r2, r7, #10
 800087a:	2302      	movs	r3, #2
 800087c:	f240 6102 	movw	r1, #1538	; 0x602
 8000880:	f001 fc8c 	bl	800219c <wm8994_write_reg>
 8000884:	4602      	mov	r2, r0
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	4413      	add	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f103 0018 	add.w	r0, r3, #24
 8000892:	f107 020a 	add.w	r2, r7, #10
 8000896:	2302      	movs	r3, #2
 8000898:	f240 6104 	movw	r1, #1540	; 0x604
 800089c:	f001 fc7e 	bl	800219c <wm8994_write_reg>
 80008a0:	4602      	mov	r2, r0
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4413      	add	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f103 0018 	add.w	r0, r3, #24
 80008ae:	f107 020a 	add.w	r2, r7, #10
 80008b2:	2302      	movs	r3, #2
 80008b4:	f240 6105 	movw	r1, #1541	; 0x605
 80008b8:	f001 fc70 	bl	800219c <wm8994_write_reg>
 80008bc:	4602      	mov	r2, r0
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4413      	add	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80008c4:	e09a      	b.n	80009fc <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80008c6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80008ca:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f103 0018 	add.w	r0, r3, #24
 80008d2:	f107 020a 	add.w	r2, r7, #10
 80008d6:	2302      	movs	r3, #2
 80008d8:	2105      	movs	r1, #5
 80008da:	f001 fc5f 	bl	800219c <wm8994_write_reg>
 80008de:	4602      	mov	r2, r0
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80008e6:	2301      	movs	r3, #1
 80008e8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f103 0018 	add.w	r0, r3, #24
 80008f0:	f107 020a 	add.w	r2, r7, #10
 80008f4:	2302      	movs	r3, #2
 80008f6:	f240 6101 	movw	r1, #1537	; 0x601
 80008fa:	f001 fc4f 	bl	800219c <wm8994_write_reg>
 80008fe:	4602      	mov	r2, r0
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0018 	add.w	r0, r3, #24
 800090c:	f107 020a 	add.w	r2, r7, #10
 8000910:	2302      	movs	r3, #2
 8000912:	f240 6102 	movw	r1, #1538	; 0x602
 8000916:	f001 fc41 	bl	800219c <wm8994_write_reg>
 800091a:	4602      	mov	r2, r0
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 8000922:	2302      	movs	r3, #2
 8000924:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f103 0018 	add.w	r0, r3, #24
 800092c:	f107 020a 	add.w	r2, r7, #10
 8000930:	2302      	movs	r3, #2
 8000932:	f240 6104 	movw	r1, #1540	; 0x604
 8000936:	f001 fc31 	bl	800219c <wm8994_write_reg>
 800093a:	4602      	mov	r2, r0
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f103 0018 	add.w	r0, r3, #24
 8000948:	f107 020a 	add.w	r2, r7, #10
 800094c:	2302      	movs	r3, #2
 800094e:	f240 6105 	movw	r1, #1541	; 0x605
 8000952:	f001 fc23 	bl	800219c <wm8994_write_reg>
 8000956:	4602      	mov	r2, r0
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
    break;
 800095e:	e04d      	b.n	80009fc <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000960:	f240 3303 	movw	r3, #771	; 0x303
 8000964:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f103 0018 	add.w	r0, r3, #24
 800096c:	f107 020a 	add.w	r2, r7, #10
 8000970:	2302      	movs	r3, #2
 8000972:	2105      	movs	r1, #5
 8000974:	f001 fc12 	bl	800219c <wm8994_write_reg>
 8000978:	4602      	mov	r2, r0
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8000980:	2301      	movs	r3, #1
 8000982:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f103 0018 	add.w	r0, r3, #24
 800098a:	f107 020a 	add.w	r2, r7, #10
 800098e:	2302      	movs	r3, #2
 8000990:	f240 6101 	movw	r1, #1537	; 0x601
 8000994:	f001 fc02 	bl	800219c <wm8994_write_reg>
 8000998:	4602      	mov	r2, r0
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4413      	add	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f103 0018 	add.w	r0, r3, #24
 80009a6:	f107 020a 	add.w	r2, r7, #10
 80009aa:	2302      	movs	r3, #2
 80009ac:	f240 6102 	movw	r1, #1538	; 0x602
 80009b0:	f001 fbf4 	bl	800219c <wm8994_write_reg>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80009bc:	2300      	movs	r3, #0
 80009be:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f103 0018 	add.w	r0, r3, #24
 80009c6:	f107 020a 	add.w	r2, r7, #10
 80009ca:	2302      	movs	r3, #2
 80009cc:	f240 6104 	movw	r1, #1540	; 0x604
 80009d0:	f001 fbe4 	bl	800219c <wm8994_write_reg>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4413      	add	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f103 0018 	add.w	r0, r3, #24
 80009e2:	f107 020a 	add.w	r2, r7, #10
 80009e6:	2302      	movs	r3, #2
 80009e8:	f240 6105 	movw	r1, #1541	; 0x605
 80009ec:	f001 fbd6 	bl	800219c <wm8994_write_reg>
 80009f0:	4602      	mov	r2, r0
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4413      	add	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
    break;
 80009f8:	e000      	b.n	80009fc <WM8994_Init+0x3f4>
    break;
 80009fa:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	f200 81e0 	bhi.w	8000dc8 <WM8994_Init+0x7c0>
 8000a08:	a201      	add	r2, pc, #4	; (adr r2, 8000a10 <WM8994_Init+0x408>)
 8000a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0e:	bf00      	nop
 8000a10:	08000bf9 	.word	0x08000bf9
 8000a14:	08000a25 	.word	0x08000a25
 8000a18:	08000ae3 	.word	0x08000ae3
 8000a1c:	08000dc9 	.word	0x08000dc9
 8000a20:	08000cb7 	.word	0x08000cb7
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 8000a24:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 8000a28:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f103 0018 	add.w	r0, r3, #24
 8000a30:	f107 020a 	add.w	r2, r7, #10
 8000a34:	2302      	movs	r3, #2
 8000a36:	2104      	movs	r1, #4
 8000a38:	f001 fbb0 	bl	800219c <wm8994_write_reg>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4413      	add	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8000a44:	23db      	movs	r3, #219	; 0xdb
 8000a46:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f103 0018 	add.w	r0, r3, #24
 8000a4e:	f107 020a 	add.w	r2, r7, #10
 8000a52:	2302      	movs	r3, #2
 8000a54:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000a58:	f001 fba0 	bl	800219c <wm8994_write_reg>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 8000a64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a68:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f103 0018 	add.w	r0, r3, #24
 8000a70:	f107 020a 	add.w	r2, r7, #10
 8000a74:	2302      	movs	r3, #2
 8000a76:	2102      	movs	r1, #2
 8000a78:	f001 fb90 	bl	800219c <wm8994_write_reg>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 8000a84:	2302      	movs	r3, #2
 8000a86:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f103 0018 	add.w	r0, r3, #24
 8000a8e:	f107 020a 	add.w	r2, r7, #10
 8000a92:	2302      	movs	r3, #2
 8000a94:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000a98:	f001 fb80 	bl	800219c <wm8994_write_reg>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f103 0018 	add.w	r0, r3, #24
 8000aaa:	f107 020a 	add.w	r2, r7, #10
 8000aae:	2302      	movs	r3, #2
 8000ab0:	f240 6109 	movw	r1, #1545	; 0x609
 8000ab4:	f001 fb72 	bl	800219c <wm8994_write_reg>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4413      	add	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 8000ac0:	230e      	movs	r3, #14
 8000ac2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f103 0018 	add.w	r0, r3, #24
 8000aca:	f107 020a 	add.w	r2, r7, #10
 8000ace:	2302      	movs	r3, #2
 8000ad0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ad4:	f001 fb62 	bl	800219c <wm8994_write_reg>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4413      	add	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
    break;
 8000ae0:	e173      	b.n	8000dca <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 8000ae2:	2311      	movs	r3, #17
 8000ae4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f103 0018 	add.w	r0, r3, #24
 8000aec:	f107 020a 	add.w	r2, r7, #10
 8000af0:	2302      	movs	r3, #2
 8000af2:	2128      	movs	r1, #40	; 0x28
 8000af4:	f001 fb52 	bl	800219c <wm8994_write_reg>
 8000af8:	4602      	mov	r2, r0
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4413      	add	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8000b00:	2335      	movs	r3, #53	; 0x35
 8000b02:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f103 0018 	add.w	r0, r3, #24
 8000b0a:	f107 020a 	add.w	r2, r7, #10
 8000b0e:	2302      	movs	r3, #2
 8000b10:	2129      	movs	r1, #41	; 0x29
 8000b12:	f001 fb43 	bl	800219c <wm8994_write_reg>
 8000b16:	4602      	mov	r2, r0
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f103 0018 	add.w	r0, r3, #24
 8000b24:	f107 020a 	add.w	r2, r7, #10
 8000b28:	2302      	movs	r3, #2
 8000b2a:	212a      	movs	r1, #42	; 0x2a
 8000b2c:	f001 fb36 	bl	800219c <wm8994_write_reg>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8000b38:	f240 3303 	movw	r3, #771	; 0x303
 8000b3c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f103 0018 	add.w	r0, r3, #24
 8000b44:	f107 020a 	add.w	r2, r7, #10
 8000b48:	2302      	movs	r3, #2
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	f001 fb26 	bl	800219c <wm8994_write_reg>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4413      	add	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000b58:	23db      	movs	r3, #219	; 0xdb
 8000b5a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f103 0018 	add.w	r0, r3, #24
 8000b62:	f107 020a 	add.w	r2, r7, #10
 8000b66:	2302      	movs	r3, #2
 8000b68:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000b6c:	f001 fb16 	bl	800219c <wm8994_write_reg>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4413      	add	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000b78:	f246 3350 	movw	r3, #25424	; 0x6350
 8000b7c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f103 0018 	add.w	r0, r3, #24
 8000b84:	f107 020a 	add.w	r2, r7, #10
 8000b88:	2302      	movs	r3, #2
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	f001 fb06 	bl	800219c <wm8994_write_reg>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4413      	add	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f103 0018 	add.w	r0, r3, #24
 8000ba2:	f107 020a 	add.w	r2, r7, #10
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	f240 6106 	movw	r1, #1542	; 0x606
 8000bac:	f001 faf6 	bl	800219c <wm8994_write_reg>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f103 0018 	add.w	r0, r3, #24
 8000bbe:	f107 020a 	add.w	r2, r7, #10
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f240 6107 	movw	r1, #1543	; 0x607
 8000bc8:	f001 fae8 	bl	800219c <wm8994_write_reg>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 8000bd4:	f248 030d 	movw	r3, #32781	; 0x800d
 8000bd8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f103 0018 	add.w	r0, r3, #24
 8000be0:	f107 020a 	add.w	r2, r7, #10
 8000be4:	2302      	movs	r3, #2
 8000be6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000bea:	f001 fad7 	bl	800219c <wm8994_write_reg>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
    break;
 8000bf6:	e0e8      	b.n	8000dca <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8000bf8:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8000bfc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f103 0018 	add.w	r0, r3, #24
 8000c04:	f107 020a 	add.w	r2, r7, #10
 8000c08:	2302      	movs	r3, #2
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	f001 fac6 	bl	800219c <wm8994_write_reg>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4413      	add	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000c18:	23db      	movs	r3, #219	; 0xdb
 8000c1a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f103 0018 	add.w	r0, r3, #24
 8000c22:	f107 020a 	add.w	r2, r7, #10
 8000c26:	2302      	movs	r3, #2
 8000c28:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000c2c:	f001 fab6 	bl	800219c <wm8994_write_reg>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4413      	add	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000c38:	f246 3350 	movw	r3, #25424	; 0x6350
 8000c3c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f103 0018 	add.w	r0, r3, #24
 8000c44:	f107 020a 	add.w	r2, r7, #10
 8000c48:	2302      	movs	r3, #2
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	f001 faa6 	bl	800219c <wm8994_write_reg>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4413      	add	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f103 0018 	add.w	r0, r3, #24
 8000c62:	f107 020a 	add.w	r2, r7, #10
 8000c66:	2302      	movs	r3, #2
 8000c68:	f240 6106 	movw	r1, #1542	; 0x606
 8000c6c:	f001 fa96 	bl	800219c <wm8994_write_reg>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4413      	add	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f103 0018 	add.w	r0, r3, #24
 8000c7e:	f107 020a 	add.w	r2, r7, #10
 8000c82:	2302      	movs	r3, #2
 8000c84:	f240 6107 	movw	r1, #1543	; 0x607
 8000c88:	f001 fa88 	bl	800219c <wm8994_write_reg>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4413      	add	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000c94:	230d      	movs	r3, #13
 8000c96:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f103 0018 	add.w	r0, r3, #24
 8000c9e:	f107 020a 	add.w	r2, r7, #10
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ca8:	f001 fa78 	bl	800219c <wm8994_write_reg>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
    break;
 8000cb4:	e089      	b.n	8000dca <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 8000cb6:	f640 733c 	movw	r3, #3900	; 0xf3c
 8000cba:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f103 0018 	add.w	r0, r3, #24
 8000cc2:	f107 020a 	add.w	r2, r7, #10
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	2104      	movs	r1, #4
 8000cca:	f001 fa67 	bl	800219c <wm8994_write_reg>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8000cd6:	23db      	movs	r3, #219	; 0xdb
 8000cd8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f103 0018 	add.w	r0, r3, #24
 8000ce0:	f107 020a 	add.w	r2, r7, #10
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000cea:	f001 fa57 	bl	800219c <wm8994_write_reg>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f103 0018 	add.w	r0, r3, #24
 8000cfc:	f107 020a 	add.w	r2, r7, #10
 8000d00:	2302      	movs	r3, #2
 8000d02:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000d06:	f001 fa49 	bl	800219c <wm8994_write_reg>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8000d12:	f246 33a0 	movw	r3, #25504	; 0x63a0
 8000d16:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f103 0018 	add.w	r0, r3, #24
 8000d1e:	f107 020a 	add.w	r2, r7, #10
 8000d22:	2302      	movs	r3, #2
 8000d24:	2102      	movs	r1, #2
 8000d26:	f001 fa39 	bl	800219c <wm8994_write_reg>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000d32:	2302      	movs	r3, #2
 8000d34:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f103 0018 	add.w	r0, r3, #24
 8000d3c:	f107 020a 	add.w	r2, r7, #10
 8000d40:	2302      	movs	r3, #2
 8000d42:	f240 6106 	movw	r1, #1542	; 0x606
 8000d46:	f001 fa29 	bl	800219c <wm8994_write_reg>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f103 0018 	add.w	r0, r3, #24
 8000d58:	f107 020a 	add.w	r2, r7, #10
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f240 6107 	movw	r1, #1543	; 0x607
 8000d62:	f001 fa1b 	bl	800219c <wm8994_write_reg>
 8000d66:	4602      	mov	r2, r0
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f103 0018 	add.w	r0, r3, #24
 8000d74:	f107 020a 	add.w	r2, r7, #10
 8000d78:	2302      	movs	r3, #2
 8000d7a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000d7e:	f001 fa0d 	bl	800219c <wm8994_write_reg>
 8000d82:	4602      	mov	r2, r0
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f103 0018 	add.w	r0, r3, #24
 8000d90:	f107 020a 	add.w	r2, r7, #10
 8000d94:	2302      	movs	r3, #2
 8000d96:	f240 6109 	movw	r1, #1545	; 0x609
 8000d9a:	f001 f9ff 	bl	800219c <wm8994_write_reg>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000da6:	230d      	movs	r3, #13
 8000da8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f103 0018 	add.w	r0, r3, #24
 8000db0:	f107 020a 	add.w	r2, r7, #10
 8000db4:	2302      	movs	r3, #2
 8000db6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000dba:	f001 f9ef 	bl	800219c <wm8994_write_reg>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
    
    break;    
 8000dc6:	e000      	b.n	8000dca <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8000dc8:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fff9 	bl	8001dc8 <WM8994_SetFrequency>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b05      	cmp	r3, #5
 8000de4:	d11a      	bne.n	8000e1c <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8000de6:	2100      	movs	r1, #0
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 ff59 	bl	8001ca0 <WM8994_SetResolution>
 8000dee:	4602      	mov	r2, r0
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8000df6:	2103      	movs	r1, #3
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 ffab 	bl	8001d54 <WM8994_SetProtocol>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3318      	adds	r3, #24
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 faf3 	bl	80023f8 <wm8994_aif1_control1_adcr_src>
 8000e12:	4602      	mov	r2, r0
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e01b      	b.n	8000e54 <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	4619      	mov	r1, r3
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 ff3c 	bl	8001ca0 <WM8994_SetResolution>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8000e30:	2102      	movs	r1, #2
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 ff8e 	bl	8001d54 <WM8994_SetProtocol>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3318      	adds	r3, #24
 8000e44:	2101      	movs	r1, #1
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fad6 	bl	80023f8 <wm8994_aif1_control1_adcr_src>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4413      	add	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8000e54:	2300      	movs	r3, #0
 8000e56:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f103 0018 	add.w	r0, r3, #24
 8000e5e:	f107 020a 	add.w	r2, r7, #10
 8000e62:	2302      	movs	r3, #2
 8000e64:	f240 3102 	movw	r1, #770	; 0x302
 8000e68:	f001 f998 	bl	800219c <wm8994_write_reg>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8000e74:	230a      	movs	r3, #10
 8000e76:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f103 0018 	add.w	r0, r3, #24
 8000e7e:	f107 020a 	add.w	r2, r7, #10
 8000e82:	2302      	movs	r3, #2
 8000e84:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000e88:	f001 f988 	bl	800219c <wm8994_write_reg>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4413      	add	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8000e94:	2301      	movs	r3, #1
 8000e96:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f103 0018 	add.w	r0, r3, #24
 8000e9e:	f107 020a 	add.w	r2, r7, #10
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea8:	f001 f978 	bl	800219c <wm8994_write_reg>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 81c6 	beq.w	800124a <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d164      	bne.n	8000f90 <WM8994_Init+0x988>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d160      	bne.n	8000f90 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8000ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed2:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f103 0018 	add.w	r0, r3, #24
 8000eda:	f107 020a 	add.w	r2, r7, #10
 8000ede:	2302      	movs	r3, #2
 8000ee0:	212d      	movs	r1, #45	; 0x2d
 8000ee2:	f001 f95b 	bl	800219c <wm8994_write_reg>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f103 0018 	add.w	r0, r3, #24
 8000ef4:	f107 020a 	add.w	r2, r7, #10
 8000ef8:	2302      	movs	r3, #2
 8000efa:	212e      	movs	r1, #46	; 0x2e
 8000efc:	f001 f94e 	bl	800219c <wm8994_write_reg>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8000f08:	4b52      	ldr	r3, [pc, #328]	; (8001054 <WM8994_Init+0xa4c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d119      	bne.n	8000f44 <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8000f10:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000f14:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f103 0018 	add.w	r0, r3, #24
 8000f1c:	f107 020a 	add.w	r2, r7, #10
 8000f20:	2302      	movs	r3, #2
 8000f22:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000f26:	f001 f939 	bl	800219c <wm8994_write_reg>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8000f32:	4b48      	ldr	r3, [pc, #288]	; (8001054 <WM8994_Init+0xa4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8000f38:	f240 1145 	movw	r1, #325	; 0x145
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f001 f8b5 	bl	80020ac <WM8994_Delay>
 8000f42:	e014      	b.n	8000f6e <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8000f44:	f248 1308 	movw	r3, #33032	; 0x8108
 8000f48:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f103 0018 	add.w	r0, r3, #24
 8000f50:	f107 020a 	add.w	r2, r7, #10
 8000f54:	2302      	movs	r3, #2
 8000f56:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000f5a:	f001 f91f 	bl	800219c <wm8994_write_reg>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8000f66:	2132      	movs	r1, #50	; 0x32
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f001 f89f 	bl	80020ac <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f103 0018 	add.w	r0, r3, #24
 8000f78:	f107 020a 	add.w	r2, r7, #10
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000f82:	f001 f90b 	bl	800219c <wm8994_write_reg>
 8000f86:	4602      	mov	r2, r0
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	e0f4      	b.n	800117a <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8000f90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f94:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f103 0018 	add.w	r0, r3, #24
 8000f9c:	f107 020a 	add.w	r2, r7, #10
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	f001 f8fa 	bl	800219c <wm8994_write_reg>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f103 0018 	add.w	r0, r3, #24
 8000fba:	f107 020a 	add.w	r2, r7, #10
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	2122      	movs	r1, #34	; 0x22
 8000fc2:	f001 f8eb 	bl	800219c <wm8994_write_reg>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f103 0018 	add.w	r0, r3, #24
 8000fd4:	f107 020a 	add.w	r2, r7, #10
 8000fd8:	2302      	movs	r3, #2
 8000fda:	2123      	movs	r1, #35	; 0x23
 8000fdc:	f001 f8de 	bl	800219c <wm8994_write_reg>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8000fe8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fec:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f103 0018 	add.w	r0, r3, #24
 8000ff4:	f107 020a 	add.w	r2, r7, #10
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	2136      	movs	r1, #54	; 0x36
 8000ffc:	f001 f8ce 	bl	800219c <wm8994_write_reg>
 8001000:	4602      	mov	r2, r0
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8001008:	f243 0303 	movw	r3, #12291	; 0x3003
 800100c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f103 0018 	add.w	r0, r3, #24
 8001014:	f107 020a 	add.w	r2, r7, #10
 8001018:	2302      	movs	r3, #2
 800101a:	2101      	movs	r1, #1
 800101c:	f001 f8be 	bl	800219c <wm8994_write_reg>
 8001020:	4602      	mov	r2, r0
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b05      	cmp	r3, #5
 800102e:	d113      	bne.n	8001058 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8001030:	f240 2305 	movw	r3, #517	; 0x205
 8001034:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 0018 	add.w	r0, r3, #24
 800103c:	f107 020a 	add.w	r2, r7, #10
 8001040:	2302      	movs	r3, #2
 8001042:	2151      	movs	r1, #81	; 0x51
 8001044:	f001 f8aa 	bl	800219c <wm8994_write_reg>
 8001048:	4602      	mov	r2, r0
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4413      	add	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e011      	b.n	8001076 <WM8994_Init+0xa6e>
 8001052:	bf00      	nop
 8001054:	24000448 	.word	0x24000448
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8001058:	2305      	movs	r3, #5
 800105a:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f103 0018 	add.w	r0, r3, #24
 8001062:	f107 020a 	add.w	r2, r7, #10
 8001066:	2302      	movs	r3, #2
 8001068:	2151      	movs	r1, #81	; 0x51
 800106a:	f001 f897 	bl	800219c <wm8994_write_reg>
 800106e:	4602      	mov	r2, r0
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8001076:	f243 3303 	movw	r3, #13059	; 0x3303
 800107a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f103 0018 	add.w	r0, r3, #24
 8001082:	f107 020a 	add.w	r2, r7, #10
 8001086:	2302      	movs	r3, #2
 8001088:	2101      	movs	r1, #1
 800108a:	f001 f887 	bl	800219c <wm8994_write_reg>
 800108e:	4602      	mov	r2, r0
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8001096:	2322      	movs	r3, #34	; 0x22
 8001098:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f103 0018 	add.w	r0, r3, #24
 80010a0:	f107 020a 	add.w	r2, r7, #10
 80010a4:	2302      	movs	r3, #2
 80010a6:	2160      	movs	r1, #96	; 0x60
 80010a8:	f001 f878 	bl	800219c <wm8994_write_reg>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 80010b4:	f649 7325 	movw	r3, #40741	; 0x9f25
 80010b8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f103 0018 	add.w	r0, r3, #24
 80010c0:	f107 020a 	add.w	r2, r7, #10
 80010c4:	2302      	movs	r3, #2
 80010c6:	214c      	movs	r1, #76	; 0x4c
 80010c8:	f001 f868 	bl	800219c <wm8994_write_reg>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 80010d4:	210f      	movs	r1, #15
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 ffe8 	bl	80020ac <WM8994_Delay>
      
      tmp = 0x0001;
 80010dc:	2301      	movs	r3, #1
 80010de:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f103 0018 	add.w	r0, r3, #24
 80010e6:	f107 020a 	add.w	r2, r7, #10
 80010ea:	2302      	movs	r3, #2
 80010ec:	212d      	movs	r1, #45	; 0x2d
 80010ee:	f001 f855 	bl	800219c <wm8994_write_reg>
 80010f2:	4602      	mov	r2, r0
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f103 0018 	add.w	r0, r3, #24
 8001100:	f107 020a 	add.w	r2, r7, #10
 8001104:	2302      	movs	r3, #2
 8001106:	212e      	movs	r1, #46	; 0x2e
 8001108:	f001 f848 	bl	800219c <wm8994_write_reg>
 800110c:	4602      	mov	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8001114:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001118:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f103 0018 	add.w	r0, r3, #24
 8001120:	f107 020a 	add.w	r2, r7, #10
 8001124:	2302      	movs	r3, #2
 8001126:	2103      	movs	r1, #3
 8001128:	f001 f838 	bl	800219c <wm8994_write_reg>
 800112c:	4602      	mov	r2, r0
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8001134:	2333      	movs	r3, #51	; 0x33
 8001136:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f103 0018 	add.w	r0, r3, #24
 800113e:	f107 020a 	add.w	r2, r7, #10
 8001142:	2302      	movs	r3, #2
 8001144:	2154      	movs	r1, #84	; 0x54
 8001146:	f001 f829 	bl	800219c <wm8994_write_reg>
 800114a:	4602      	mov	r2, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8001152:	f240 1101 	movw	r1, #257	; 0x101
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 ffa8 	bl	80020ac <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 800115c:	23ee      	movs	r3, #238	; 0xee
 800115e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f103 0018 	add.w	r0, r3, #24
 8001166:	f107 020a 	add.w	r2, r7, #10
 800116a:	2302      	movs	r3, #2
 800116c:	2160      	movs	r1, #96	; 0x60
 800116e:	f001 f815 	bl	800219c <wm8994_write_reg>
 8001172:	4602      	mov	r2, r0
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 800117a:	23c0      	movs	r3, #192	; 0xc0
 800117c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f103 0018 	add.w	r0, r3, #24
 8001184:	f107 020a 	add.w	r2, r7, #10
 8001188:	2302      	movs	r3, #2
 800118a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800118e:	f001 f805 	bl	800219c <wm8994_write_reg>
 8001192:	4602      	mov	r2, r0
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f103 0018 	add.w	r0, r3, #24
 80011a0:	f107 020a 	add.w	r2, r7, #10
 80011a4:	2302      	movs	r3, #2
 80011a6:	f240 6111 	movw	r1, #1553	; 0x611
 80011aa:	f000 fff7 	bl	800219c <wm8994_write_reg>
 80011ae:	4602      	mov	r2, r0
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 80011b6:	2310      	movs	r3, #16
 80011b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f103 0018 	add.w	r0, r3, #24
 80011c0:	f107 020a 	add.w	r2, r7, #10
 80011c4:	2302      	movs	r3, #2
 80011c6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80011ca:	f000 ffe7 	bl	800219c <wm8994_write_reg>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 80011d6:	23c0      	movs	r3, #192	; 0xc0
 80011d8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f103 0018 	add.w	r0, r3, #24
 80011e0:	f107 020a 	add.w	r2, r7, #10
 80011e4:	2302      	movs	r3, #2
 80011e6:	f240 6112 	movw	r1, #1554	; 0x612
 80011ea:	f000 ffd7 	bl	800219c <wm8994_write_reg>
 80011ee:	4602      	mov	r2, r0
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f103 0018 	add.w	r0, r3, #24
 80011fc:	f107 020a 	add.w	r2, r7, #10
 8001200:	2302      	movs	r3, #2
 8001202:	f240 6113 	movw	r1, #1555	; 0x613
 8001206:	f000 ffc9 	bl	800219c <wm8994_write_reg>
 800120a:	4602      	mov	r2, r0
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8001212:	2310      	movs	r3, #16
 8001214:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f103 0018 	add.w	r0, r3, #24
 800121c:	f107 020a 	add.w	r2, r7, #10
 8001220:	2302      	movs	r3, #2
 8001222:	f240 4122 	movw	r1, #1058	; 0x422
 8001226:	f000 ffb9 	bl	800219c <wm8994_write_reg>
 800122a:	4602      	mov	r2, r0
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	2101      	movs	r1, #1
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f99f 	bl	8001580 <WM8994_SetVolume>
 8001242:	4602      	mov	r2, r0
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80b5 	beq.w	80013be <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d003      	beq.n	8001264 <WM8994_Init+0xc5c>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d130      	bne.n	80012c6 <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8001264:	2313      	movs	r3, #19
 8001266:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f103 0018 	add.w	r0, r3, #24
 800126e:	f107 020a 	add.w	r2, r7, #10
 8001272:	2302      	movs	r3, #2
 8001274:	2101      	movs	r1, #1
 8001276:	f000 ff91 	bl	800219c <wm8994_write_reg>
 800127a:	4602      	mov	r2, r0
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8001282:	2302      	movs	r3, #2
 8001284:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f103 0018 	add.w	r0, r3, #24
 800128c:	f107 020a 	add.w	r2, r7, #10
 8001290:	2302      	movs	r3, #2
 8001292:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001296:	f000 ff81 	bl	800219c <wm8994_write_reg>
 800129a:	4602      	mov	r2, r0
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 80012a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012a6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f103 0018 	add.w	r0, r3, #24
 80012ae:	f107 020a 	add.w	r2, r7, #10
 80012b2:	2302      	movs	r3, #2
 80012b4:	f240 4111 	movw	r1, #1041	; 0x411
 80012b8:	f000 ff70 	bl	800219c <wm8994_write_reg>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e06f      	b.n	80013a6 <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d13e      	bne.n	800134c <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 80012ce:	2313      	movs	r3, #19
 80012d0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f103 0018 	add.w	r0, r3, #24
 80012d8:	f107 020a 	add.w	r2, r7, #10
 80012dc:	2302      	movs	r3, #2
 80012de:	2101      	movs	r1, #1
 80012e0:	f000 ff5c 	bl	800219c <wm8994_write_reg>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 80012ec:	2302      	movs	r3, #2
 80012ee:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f103 0018 	add.w	r0, r3, #24
 80012f6:	f107 020a 	add.w	r2, r7, #10
 80012fa:	2302      	movs	r3, #2
 80012fc:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001300:	f000 ff4c 	bl	800219c <wm8994_write_reg>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 800130c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001310:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f103 0018 	add.w	r0, r3, #24
 8001318:	f107 020a 	add.w	r2, r7, #10
 800131c:	2302      	movs	r3, #2
 800131e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001322:	f000 ff3b 	bl	800219c <wm8994_write_reg>
 8001326:	4602      	mov	r2, r0
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f103 0018 	add.w	r0, r3, #24
 8001334:	f107 020a 	add.w	r2, r7, #10
 8001338:	2302      	movs	r3, #2
 800133a:	f240 4111 	movw	r1, #1041	; 0x411
 800133e:	f000 ff2d 	bl	800219c <wm8994_write_reg>
 8001342:	4602      	mov	r2, r0
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e02c      	b.n	80013a6 <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 800134c:	230b      	movs	r3, #11
 800134e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f103 0018 	add.w	r0, r3, #24
 8001356:	f107 020a 	add.w	r2, r7, #10
 800135a:	2302      	movs	r3, #2
 800135c:	2118      	movs	r1, #24
 800135e:	f000 ff1d 	bl	800219c <wm8994_write_reg>
 8001362:	4602      	mov	r2, r0
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f103 0018 	add.w	r0, r3, #24
 8001370:	f107 020a 	add.w	r2, r7, #10
 8001374:	2302      	movs	r3, #2
 8001376:	211a      	movs	r1, #26
 8001378:	f000 ff10 	bl	800219c <wm8994_write_reg>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4413      	add	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8001384:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001388:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f103 0018 	add.w	r0, r3, #24
 8001390:	f107 020a 	add.w	r2, r7, #10
 8001394:	2302      	movs	r3, #2
 8001396:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800139a:	f000 feff 	bl	800219c <wm8994_write_reg>
 800139e:	4602      	mov	r2, r0
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f8e5 	bl	8001580 <WM8994_SetVolume>
 80013b6:	4602      	mov	r2, r0
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c8:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 80013dc:	2100      	movs	r1, #0
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f861 	bl	80014a6 <WM8994_Stop>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b084      	sub	sp, #16
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3318      	adds	r3, #24
 8001402:	f107 020a 	add.w	r2, r7, #10
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f000 ff00 	bl	800220e <wm8994_sw_reset_r>
 800140e:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 8001410:	897b      	ldrh	r3, [r7, #10]
 8001412:	461a      	mov	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	601a      	str	r2, [r3, #0]
  
  return ret;
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 800142a:	2100      	movs	r1, #0
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f9d3 	bl	80017d8 <WM8994_SetMute>
 8001432:	4603      	mov	r3, r0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 8001444:	2301      	movs	r3, #1
 8001446:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 8001448:	2101      	movs	r1, #1
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f9c4 	bl	80017d8 <WM8994_SetMute>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e011      	b.n	8001482 <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f103 0018 	add.w	r0, r3, #24
 8001464:	f107 020a 	add.w	r2, r7, #10
 8001468:	2302      	movs	r3, #2
 800146a:	2102      	movs	r1, #2
 800146c:	f000 fe96 	bl	800219c <wm8994_write_reg>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e001      	b.n	8001482 <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001494:	2100      	movs	r1, #0
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f99e 	bl	80017d8 <WM8994_SetMute>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 80014b0:	2101      	movs	r1, #1
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f990 	bl	80017d8 <WM8994_SetMute>
 80014b8:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d054      	beq.n	800156a <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 80014c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c4:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f103 0018 	add.w	r0, r3, #24
 80014cc:	f107 020a 	add.w	r2, r7, #10
 80014d0:	2302      	movs	r3, #2
 80014d2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80014d6:	f000 fe61 	bl	800219c <wm8994_write_reg>
 80014da:	4602      	mov	r2, r0
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f103 0018 	add.w	r0, r3, #24
 80014e8:	f107 020a 	add.w	r2, r7, #10
 80014ec:	2302      	movs	r3, #2
 80014ee:	f240 4122 	movw	r1, #1058	; 0x422
 80014f2:	f000 fe53 	bl	800219c <wm8994_write_reg>
 80014f6:	4602      	mov	r2, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 80014fe:	2300      	movs	r3, #0
 8001500:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f103 0018 	add.w	r0, r3, #24
 8001508:	f107 020a 	add.w	r2, r7, #10
 800150c:	2302      	movs	r3, #2
 800150e:	212d      	movs	r1, #45	; 0x2d
 8001510:	f000 fe44 	bl	800219c <wm8994_write_reg>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f103 0018 	add.w	r0, r3, #24
 8001522:	f107 020a 	add.w	r2, r7, #10
 8001526:	2302      	movs	r3, #2
 8001528:	212e      	movs	r1, #46	; 0x2e
 800152a:	f000 fe37 	bl	800219c <wm8994_write_reg>
 800152e:	4602      	mov	r2, r0
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f103 0018 	add.w	r0, r3, #24
 800153c:	f107 020a 	add.w	r2, r7, #10
 8001540:	2302      	movs	r3, #2
 8001542:	2105      	movs	r1, #5
 8001544:	f000 fe2a 	bl	800219c <wm8994_write_reg>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4413      	add	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f103 0018 	add.w	r0, r3, #24
 8001556:	f107 020a 	add.w	r2, r7, #10
 800155a:	2302      	movs	r3, #2
 800155c:	2100      	movs	r1, #0
 800155e:	f000 fe1d 	bl	800219c <wm8994_write_reg>
 8001562:	4602      	mov	r2, r0
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001574:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	4613      	mov	r3, r2
 800158c:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	f040 8089 	bne.w	80016a8 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b3e      	cmp	r3, #62	; 0x3e
 800159a:	d93c      	bls.n	8001616 <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 800159c:	2100      	movs	r1, #0
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 f91a 	bl	80017d8 <WM8994_SetMute>
 80015a4:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 80015a6:	f240 137f 	movw	r3, #383	; 0x17f
 80015aa:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f103 0018 	add.w	r0, r3, #24
 80015b2:	f107 0212 	add.w	r2, r7, #18
 80015b6:	2302      	movs	r3, #2
 80015b8:	211c      	movs	r1, #28
 80015ba:	f000 fdef 	bl	800219c <wm8994_write_reg>
 80015be:	4602      	mov	r2, r0
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	4413      	add	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f103 0018 	add.w	r0, r3, #24
 80015cc:	f107 0212 	add.w	r2, r7, #18
 80015d0:	2302      	movs	r3, #2
 80015d2:	211d      	movs	r1, #29
 80015d4:	f000 fde2 	bl	800219c <wm8994_write_reg>
 80015d8:	4602      	mov	r2, r0
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	4413      	add	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f103 0018 	add.w	r0, r3, #24
 80015e6:	f107 0212 	add.w	r2, r7, #18
 80015ea:	2302      	movs	r3, #2
 80015ec:	2126      	movs	r1, #38	; 0x26
 80015ee:	f000 fdd5 	bl	800219c <wm8994_write_reg>
 80015f2:	4602      	mov	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	4413      	add	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f103 0018 	add.w	r0, r3, #24
 8001600:	f107 0212 	add.w	r2, r7, #18
 8001604:	2302      	movs	r3, #2
 8001606:	2127      	movs	r1, #39	; 0x27
 8001608:	f000 fdc8 	bl	800219c <wm8994_write_reg>
 800160c:	4602      	mov	r2, r0
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	4413      	add	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e083      	b.n	800171e <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d105      	bne.n	8001628 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 800161c:	2101      	movs	r1, #1
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f8da 	bl	80017d8 <WM8994_SetMute>
 8001624:	6178      	str	r0, [r7, #20]
 8001626:	e07a      	b.n	800171e <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001628:	2100      	movs	r1, #0
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f8d4 	bl	80017d8 <WM8994_SetMute>
 8001630:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	b29b      	uxth	r3, r3
 8001636:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800163a:	b29b      	uxth	r3, r3
 800163c:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f103 0018 	add.w	r0, r3, #24
 8001644:	f107 0212 	add.w	r2, r7, #18
 8001648:	2302      	movs	r3, #2
 800164a:	211c      	movs	r1, #28
 800164c:	f000 fda6 	bl	800219c <wm8994_write_reg>
 8001650:	4602      	mov	r2, r0
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	4413      	add	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f103 0018 	add.w	r0, r3, #24
 800165e:	f107 0212 	add.w	r2, r7, #18
 8001662:	2302      	movs	r3, #2
 8001664:	211d      	movs	r1, #29
 8001666:	f000 fd99 	bl	800219c <wm8994_write_reg>
 800166a:	4602      	mov	r2, r0
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f103 0018 	add.w	r0, r3, #24
 8001678:	f107 0212 	add.w	r2, r7, #18
 800167c:	2302      	movs	r3, #2
 800167e:	2126      	movs	r1, #38	; 0x26
 8001680:	f000 fd8c 	bl	800219c <wm8994_write_reg>
 8001684:	4602      	mov	r2, r0
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	4413      	add	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f103 0018 	add.w	r0, r3, #24
 8001692:	f107 0212 	add.w	r2, r7, #18
 8001696:	2302      	movs	r3, #2
 8001698:	2127      	movs	r1, #39	; 0x27
 800169a:	f000 fd7f 	bl	800219c <wm8994_write_reg>
 800169e:	4602      	mov	r2, r0
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	4413      	add	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e03a      	b.n	800171e <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f103 0018 	add.w	r0, r3, #24
 80016ba:	f107 0212 	add.w	r2, r7, #18
 80016be:	2302      	movs	r3, #2
 80016c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c4:	f000 fd6a 	bl	800219c <wm8994_write_reg>
 80016c8:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f103 0018 	add.w	r0, r3, #24
 80016d0:	f107 0212 	add.w	r2, r7, #18
 80016d4:	2302      	movs	r3, #2
 80016d6:	f240 4101 	movw	r1, #1025	; 0x401
 80016da:	f000 fd5f 	bl	800219c <wm8994_write_reg>
 80016de:	4602      	mov	r2, r0
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4413      	add	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f103 0018 	add.w	r0, r3, #24
 80016ec:	f107 0212 	add.w	r2, r7, #18
 80016f0:	2302      	movs	r3, #2
 80016f2:	f240 4104 	movw	r1, #1028	; 0x404
 80016f6:	f000 fd51 	bl	800219c <wm8994_write_reg>
 80016fa:	4602      	mov	r2, r0
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	4413      	add	r3, r2
 8001700:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f103 0018 	add.w	r0, r3, #24
 8001708:	f107 0212 	add.w	r2, r7, #18
 800170c:	2302      	movs	r3, #2
 800170e:	f240 4105 	movw	r1, #1029	; 0x405
 8001712:	f000 fd43 	bl	800219c <wm8994_write_reg>
 8001716:	4602      	mov	r2, r0
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4413      	add	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001728:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 800172a:	697b      	ldr	r3, [r7, #20]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d11e      	bne.n	8001788 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3318      	adds	r3, #24
 800174e:	f107 0212 	add.w	r2, r7, #18
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fd6a 	bl	800222e <wm8994_lo_hpout1l_vol_r>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e02d      	b.n	80017c4 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8001768:	8a7b      	ldrh	r3, [r7, #18]
 800176a:	461a      	mov	r2, r3
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	fb03 f302 	mul.w	r3, r3, r2
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <WM8994_GetVolume+0x9c>)
 8001774:	fb82 1203 	smull	r1, r2, r2, r3
 8001778:	441a      	add	r2, r3
 800177a:	1152      	asrs	r2, r2, #5
 800177c:	17db      	asrs	r3, r3, #31
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b2da      	uxtb	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e01d      	b.n	80017c4 <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3318      	adds	r3, #24
 800178c:	f107 0212 	add.w	r2, r7, #18
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fe60 	bl	8002458 <wm8994_aif1_adc1_left_vol_adc1l_r>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e00e      	b.n	80017c4 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 80017a6:	8a7b      	ldrh	r3, [r7, #18]
 80017a8:	461a      	mov	r2, r3
 80017aa:	2364      	movs	r3, #100	; 0x64
 80017ac:	fb03 f302 	mul.w	r3, r3, r2
 80017b0:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <WM8994_GetVolume+0xa0>)
 80017b2:	fb82 1203 	smull	r1, r2, r2, r3
 80017b6:	441a      	add	r2, r3
 80017b8:	11d2      	asrs	r2, r2, #7
 80017ba:	17db      	asrs	r3, r3, #31
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 80017c4:	697b      	ldr	r3, [r7, #20]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	82082083 	.word	0x82082083
 80017d4:	891ac73b 	.word	0x891ac73b

080017d8 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d11c      	bne.n	8001822 <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80017e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ec:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f103 0018 	add.w	r0, r3, #24
 80017f4:	f107 020a 	add.w	r2, r7, #10
 80017f8:	2302      	movs	r3, #2
 80017fa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80017fe:	f000 fccd 	bl	800219c <wm8994_write_reg>
 8001802:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f103 0018 	add.w	r0, r3, #24
 800180a:	f107 020a 	add.w	r2, r7, #10
 800180e:	2302      	movs	r3, #2
 8001810:	f240 4122 	movw	r1, #1058	; 0x422
 8001814:	f000 fcc2 	bl	800219c <wm8994_write_reg>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4413      	add	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e01a      	b.n	8001858 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 8001822:	2310      	movs	r3, #16
 8001824:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f103 0018 	add.w	r0, r3, #24
 800182c:	f107 020a 	add.w	r2, r7, #10
 8001830:	2302      	movs	r3, #2
 8001832:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001836:	f000 fcb1 	bl	800219c <wm8994_write_reg>
 800183a:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f103 0018 	add.w	r0, r3, #24
 8001842:	f107 020a 	add.w	r2, r7, #10
 8001846:	2302      	movs	r3, #2
 8001848:	f240 4122 	movw	r1, #1058	; 0x422
 800184c:	f000 fca6 	bl	800219c <wm8994_write_reg>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4413      	add	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001862:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001864:	68fb      	ldr	r3, [r7, #12]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b084      	sub	sp, #16
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d003      	beq.n	8001886 <WM8994_SetOutputMode+0x18>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b04      	cmp	r3, #4
 8001882:	f040 809c 	bne.w	80019be <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 8001886:	2300      	movs	r3, #0
 8001888:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f103 0018 	add.w	r0, r3, #24
 8001890:	f107 020a 	add.w	r2, r7, #10
 8001894:	2302      	movs	r3, #2
 8001896:	2101      	movs	r1, #1
 8001898:	f000 fc80 	bl	800219c <wm8994_write_reg>
 800189c:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800189e:	f240 3303 	movw	r3, #771	; 0x303
 80018a2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f103 0018 	add.w	r0, r3, #24
 80018aa:	f107 020a 	add.w	r2, r7, #10
 80018ae:	2302      	movs	r3, #2
 80018b0:	2105      	movs	r1, #5
 80018b2:	f000 fc73 	bl	800219c <wm8994_write_reg>
 80018b6:	4602      	mov	r2, r0
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80018be:	2301      	movs	r3, #1
 80018c0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f103 0018 	add.w	r0, r3, #24
 80018c8:	f107 020a 	add.w	r2, r7, #10
 80018cc:	2302      	movs	r3, #2
 80018ce:	f240 6101 	movw	r1, #1537	; 0x601
 80018d2:	f000 fc63 	bl	800219c <wm8994_write_reg>
 80018d6:	4602      	mov	r2, r0
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f103 0018 	add.w	r0, r3, #24
 80018e4:	f107 020a 	add.w	r2, r7, #10
 80018e8:	2302      	movs	r3, #2
 80018ea:	f240 6102 	movw	r1, #1538	; 0x602
 80018ee:	f000 fc55 	bl	800219c <wm8994_write_reg>
 80018f2:	4602      	mov	r2, r0
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80018fa:	2300      	movs	r3, #0
 80018fc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f103 0018 	add.w	r0, r3, #24
 8001904:	f107 020a 	add.w	r2, r7, #10
 8001908:	2302      	movs	r3, #2
 800190a:	f240 6104 	movw	r1, #1540	; 0x604
 800190e:	f000 fc45 	bl	800219c <wm8994_write_reg>
 8001912:	4602      	mov	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f103 0018 	add.w	r0, r3, #24
 8001920:	f107 020a 	add.w	r2, r7, #10
 8001924:	2302      	movs	r3, #2
 8001926:	f240 6105 	movw	r1, #1541	; 0x605
 800192a:	f000 fc37 	bl	800219c <wm8994_write_reg>
 800192e:	4602      	mov	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 8001936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f103 0018 	add.w	r0, r3, #24
 8001942:	f107 020a 	add.w	r2, r7, #10
 8001946:	2302      	movs	r3, #2
 8001948:	212d      	movs	r1, #45	; 0x2d
 800194a:	f000 fc27 	bl	800219c <wm8994_write_reg>
 800194e:	4602      	mov	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f103 0018 	add.w	r0, r3, #24
 800195c:	f107 020a 	add.w	r2, r7, #10
 8001960:	2302      	movs	r3, #2
 8001962:	212e      	movs	r1, #46	; 0x2e
 8001964:	f000 fc1a 	bl	800219c <wm8994_write_reg>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 8001970:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001974:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f103 0018 	add.w	r0, r3, #24
 800197c:	f107 020a 	add.w	r2, r7, #10
 8001980:	2302      	movs	r3, #2
 8001982:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001986:	f000 fc09 	bl	800219c <wm8994_write_reg>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 8001992:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fb88 	bl	80020ac <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 800199c:	2300      	movs	r3, #0
 800199e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f103 0018 	add.w	r0, r3, #24
 80019a6:	f107 020a 	add.w	r2, r7, #10
 80019aa:	2302      	movs	r3, #2
 80019ac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80019b0:	f000 fbf4 	bl	800219c <wm8994_write_reg>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4413      	add	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e165      	b.n	8001c8a <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d149      	bne.n	8001a58 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 80019c4:	f640 430c 	movw	r3, #3084	; 0xc0c
 80019c8:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f103 0018 	add.w	r0, r3, #24
 80019d0:	f107 020a 	add.w	r2, r7, #10
 80019d4:	2302      	movs	r3, #2
 80019d6:	2105      	movs	r1, #5
 80019d8:	f000 fbe0 	bl	800219c <wm8994_write_reg>
 80019dc:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 80019de:	2300      	movs	r3, #0
 80019e0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f103 0018 	add.w	r0, r3, #24
 80019e8:	f107 020a 	add.w	r2, r7, #10
 80019ec:	2302      	movs	r3, #2
 80019ee:	f240 6101 	movw	r1, #1537	; 0x601
 80019f2:	f000 fbd3 	bl	800219c <wm8994_write_reg>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f103 0018 	add.w	r0, r3, #24
 8001a04:	f107 020a 	add.w	r2, r7, #10
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f240 6102 	movw	r1, #1538	; 0x602
 8001a0e:	f000 fbc5 	bl	800219c <wm8994_write_reg>
 8001a12:	4602      	mov	r2, r0
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f103 0018 	add.w	r0, r3, #24
 8001a24:	f107 020a 	add.w	r2, r7, #10
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f240 6104 	movw	r1, #1540	; 0x604
 8001a2e:	f000 fbb5 	bl	800219c <wm8994_write_reg>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f103 0018 	add.w	r0, r3, #24
 8001a40:	f107 020a 	add.w	r2, r7, #10
 8001a44:	2302      	movs	r3, #2
 8001a46:	f240 6105 	movw	r1, #1541	; 0x605
 8001a4a:	f000 fba7 	bl	800219c <wm8994_write_reg>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
      break;
 8001a56:	e03b      	b.n	8001ad0 <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8001a58:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001a5c:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f103 0018 	add.w	r0, r3, #24
 8001a64:	f107 020a 	add.w	r2, r7, #10
 8001a68:	2302      	movs	r3, #2
 8001a6a:	2105      	movs	r1, #5
 8001a6c:	f000 fb96 	bl	800219c <wm8994_write_reg>
 8001a70:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 8001a72:	2301      	movs	r3, #1
 8001a74:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f103 0018 	add.w	r0, r3, #24
 8001a7c:	f107 020a 	add.w	r2, r7, #10
 8001a80:	2302      	movs	r3, #2
 8001a82:	f240 6101 	movw	r1, #1537	; 0x601
 8001a86:	f000 fb89 	bl	800219c <wm8994_write_reg>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f103 0018 	add.w	r0, r3, #24
 8001a98:	f107 020a 	add.w	r2, r7, #10
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f240 6102 	movw	r1, #1538	; 0x602
 8001aa2:	f000 fb7b 	bl	800219c <wm8994_write_reg>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f103 0018 	add.w	r0, r3, #24
 8001ab8:	f107 020a 	add.w	r2, r7, #10
 8001abc:	2302      	movs	r3, #2
 8001abe:	f240 6104 	movw	r1, #1540	; 0x604
 8001ac2:	f000 fb6b 	bl	800219c <wm8994_write_reg>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
      break;
 8001ace:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 8001ad0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ad4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f103 0018 	add.w	r0, r3, #24
 8001adc:	f107 020a 	add.w	r2, r7, #10
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	f000 fb5a 	bl	800219c <wm8994_write_reg>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 8001af0:	2300      	movs	r3, #0
 8001af2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f103 0018 	add.w	r0, r3, #24
 8001afa:	f107 020a 	add.w	r2, r7, #10
 8001afe:	2302      	movs	r3, #2
 8001b00:	2122      	movs	r1, #34	; 0x22
 8001b02:	f000 fb4b 	bl	800219c <wm8994_write_reg>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f103 0018 	add.w	r0, r3, #24
 8001b14:	f107 020a 	add.w	r2, r7, #10
 8001b18:	2302      	movs	r3, #2
 8001b1a:	2123      	movs	r1, #35	; 0x23
 8001b1c:	f000 fb3e 	bl	800219c <wm8994_write_reg>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 8001b28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b2c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f103 0018 	add.w	r0, r3, #24
 8001b34:	f107 020a 	add.w	r2, r7, #10
 8001b38:	2302      	movs	r3, #2
 8001b3a:	2136      	movs	r1, #54	; 0x36
 8001b3c:	f000 fb2e 	bl	800219c <wm8994_write_reg>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 8001b48:	f243 0303 	movw	r3, #12291	; 0x3003
 8001b4c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f103 0018 	add.w	r0, r3, #24
 8001b54:	f107 020a 	add.w	r2, r7, #10
 8001b58:	2302      	movs	r3, #2
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	f000 fb1e 	bl	800219c <wm8994_write_reg>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4413      	add	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 8001b68:	2305      	movs	r3, #5
 8001b6a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f103 0018 	add.w	r0, r3, #24
 8001b72:	f107 020a 	add.w	r2, r7, #10
 8001b76:	2302      	movs	r3, #2
 8001b78:	2151      	movs	r1, #81	; 0x51
 8001b7a:	f000 fb0f 	bl	800219c <wm8994_write_reg>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 8001b86:	f243 3303 	movw	r3, #13059	; 0x3303
 8001b8a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f103 0018 	add.w	r0, r3, #24
 8001b92:	f107 020a 	add.w	r2, r7, #10
 8001b96:	2302      	movs	r3, #2
 8001b98:	2101      	movs	r1, #1
 8001b9a:	f000 faff 	bl	800219c <wm8994_write_reg>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 8001ba6:	2322      	movs	r3, #34	; 0x22
 8001ba8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f103 0018 	add.w	r0, r3, #24
 8001bb0:	f107 020a 	add.w	r2, r7, #10
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	2160      	movs	r1, #96	; 0x60
 8001bb8:	f000 faf0 	bl	800219c <wm8994_write_reg>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 8001bc4:	f649 7325 	movw	r3, #40741	; 0x9f25
 8001bc8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f103 0018 	add.w	r0, r3, #24
 8001bd0:	f107 020a 	add.w	r2, r7, #10
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	214c      	movs	r1, #76	; 0x4c
 8001bd8:	f000 fae0 	bl	800219c <wm8994_write_reg>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4413      	add	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 8001be4:	210f      	movs	r1, #15
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fa60 	bl	80020ac <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 8001bec:	2301      	movs	r3, #1
 8001bee:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f103 0018 	add.w	r0, r3, #24
 8001bf6:	f107 020a 	add.w	r2, r7, #10
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	212d      	movs	r1, #45	; 0x2d
 8001bfe:	f000 facd 	bl	800219c <wm8994_write_reg>
 8001c02:	4602      	mov	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f103 0018 	add.w	r0, r3, #24
 8001c10:	f107 020a 	add.w	r2, r7, #10
 8001c14:	2302      	movs	r3, #2
 8001c16:	212e      	movs	r1, #46	; 0x2e
 8001c18:	f000 fac0 	bl	800219c <wm8994_write_reg>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4413      	add	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 8001c24:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001c28:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f103 0018 	add.w	r0, r3, #24
 8001c30:	f107 020a 	add.w	r2, r7, #10
 8001c34:	2302      	movs	r3, #2
 8001c36:	2103      	movs	r1, #3
 8001c38:	f000 fab0 	bl	800219c <wm8994_write_reg>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 8001c44:	2333      	movs	r3, #51	; 0x33
 8001c46:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f103 0018 	add.w	r0, r3, #24
 8001c4e:	f107 020a 	add.w	r2, r7, #10
 8001c52:	2302      	movs	r3, #2
 8001c54:	2154      	movs	r1, #84	; 0x54
 8001c56:	f000 faa1 	bl	800219c <wm8994_write_reg>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 8001c62:	f240 1101 	movw	r1, #257	; 0x101
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fa20 	bl	80020ac <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 8001c6c:	23ee      	movs	r3, #238	; 0xee
 8001c6e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f103 0018 	add.w	r0, r3, #24
 8001c76:	f107 020a 	add.w	r2, r7, #10
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	2160      	movs	r1, #96	; 0x60
 8001c7e:	f000 fa8d 	bl	800219c <wm8994_write_reg>
 8001c82:	4602      	mov	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c94:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3318      	adds	r3, #24
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	b292      	uxth	r2, r2
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fb4b 	bl	8002354 <wm8994_aif1_control1_wl>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3318      	adds	r3, #24
 8001cea:	f107 020a 	add.w	r2, r7, #10
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fb5f 	bl	80023b4 <wm8994_aif1_control1_wl_r>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e021      	b.n	8001d48 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 8001d04:	897b      	ldrh	r3, [r7, #10]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d81a      	bhi.n	8001d40 <WM8994_GetResolution+0x6c>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <WM8994_GetResolution+0x3c>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001d29 	.word	0x08001d29
 8001d18:	08001d31 	.word	0x08001d31
 8001d1c:	08001d39 	.word	0x08001d39
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
      break;
 8001d26:	e00f      	b.n	8001d48 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
      break;
 8001d2e:	e00b      	b.n	8001d48 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
      break;
 8001d36:	e007      	b.n	8001d48 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	601a      	str	r2, [r3, #0]
      break; 
 8001d3e:	e003      	b.n	8001d48 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
      break;
 8001d46:	bf00      	nop
    }
  }
  
  return ret;
 8001d48:	68fb      	ldr	r3, [r7, #12]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop

08001d54 <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3318      	adds	r3, #24
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fa9f 	bl	80022b0 <wm8994_aif1_control1_fmt>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3318      	adds	r3, #24
 8001d9a:	f107 020a 	add.w	r2, r7, #10
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fab5 	bl	8002310 <wm8994_aif1_control1_fmt_r>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	e003      	b.n	8001dbc <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 8001db4:	897b      	ldrh	r3, [r7, #10]
 8001db6:	461a      	mov	r2, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	4a55      	ldr	r2, [pc, #340]	; (8001f2c <WM8994_SetFrequency+0x164>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d05d      	beq.n	8001e96 <WM8994_SetFrequency+0xce>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	4a53      	ldr	r2, [pc, #332]	; (8001f2c <WM8994_SetFrequency+0x164>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	f200 8091 	bhi.w	8001f06 <WM8994_SetFrequency+0x13e>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d07d      	beq.n	8001eea <WM8994_SetFrequency+0x122>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001df4:	4293      	cmp	r3, r2
 8001df6:	f200 8086 	bhi.w	8001f06 <WM8994_SetFrequency+0x13e>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001e00:	d03b      	beq.n	8001e7a <WM8994_SetFrequency+0xb2>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001e08:	d87d      	bhi.n	8001f06 <WM8994_SetFrequency+0x13e>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f245 6222 	movw	r2, #22050	; 0x5622
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d05c      	beq.n	8001ece <WM8994_SetFrequency+0x106>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f245 6222 	movw	r2, #22050	; 0x5622
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d873      	bhi.n	8001f06 <WM8994_SetFrequency+0x13e>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001e24:	d01b      	beq.n	8001e5e <WM8994_SetFrequency+0x96>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001e2c:	d86b      	bhi.n	8001f06 <WM8994_SetFrequency+0x13e>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001e34:	d005      	beq.n	8001e42 <WM8994_SetFrequency+0x7a>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d038      	beq.n	8001eb2 <WM8994_SetFrequency+0xea>
 8001e40:	e061      	b.n	8001f06 <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 8001e42:	2303      	movs	r3, #3
 8001e44:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f103 0018 	add.w	r0, r3, #24
 8001e4c:	f107 020a 	add.w	r2, r7, #10
 8001e50:	2302      	movs	r3, #2
 8001e52:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001e56:	f000 f9a1 	bl	800219c <wm8994_write_reg>
 8001e5a:	60f8      	str	r0, [r7, #12]
    break;
 8001e5c:	e061      	b.n	8001f22 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8001e5e:	2333      	movs	r3, #51	; 0x33
 8001e60:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f103 0018 	add.w	r0, r3, #24
 8001e68:	f107 020a 	add.w	r2, r7, #10
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001e72:	f000 f993 	bl	800219c <wm8994_write_reg>
 8001e76:	60f8      	str	r0, [r7, #12]
    break;
 8001e78:	e053      	b.n	8001f22 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8001e7a:	2363      	movs	r3, #99	; 0x63
 8001e7c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f103 0018 	add.w	r0, r3, #24
 8001e84:	f107 020a 	add.w	r2, r7, #10
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001e8e:	f000 f985 	bl	800219c <wm8994_write_reg>
 8001e92:	60f8      	str	r0, [r7, #12]
    break;
 8001e94:	e045      	b.n	8001f22 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 8001e96:	23a3      	movs	r3, #163	; 0xa3
 8001e98:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f103 0018 	add.w	r0, r3, #24
 8001ea0:	f107 020a 	add.w	r2, r7, #10
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001eaa:	f000 f977 	bl	800219c <wm8994_write_reg>
 8001eae:	60f8      	str	r0, [r7, #12]
    break;
 8001eb0:	e037      	b.n	8001f22 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 8001eb2:	2313      	movs	r3, #19
 8001eb4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f103 0018 	add.w	r0, r3, #24
 8001ebc:	f107 020a 	add.w	r2, r7, #10
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001ec6:	f000 f969 	bl	800219c <wm8994_write_reg>
 8001eca:	60f8      	str	r0, [r7, #12]
    break;
 8001ecc:	e029      	b.n	8001f22 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8001ece:	2343      	movs	r3, #67	; 0x43
 8001ed0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f103 0018 	add.w	r0, r3, #24
 8001ed8:	f107 020a 	add.w	r2, r7, #10
 8001edc:	2302      	movs	r3, #2
 8001ede:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001ee2:	f000 f95b 	bl	800219c <wm8994_write_reg>
 8001ee6:	60f8      	str	r0, [r7, #12]
    break;
 8001ee8:	e01b      	b.n	8001f22 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 8001eea:	2373      	movs	r3, #115	; 0x73
 8001eec:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f103 0018 	add.w	r0, r3, #24
 8001ef4:	f107 020a 	add.w	r2, r7, #10
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001efe:	f000 f94d 	bl	800219c <wm8994_write_reg>
 8001f02:	60f8      	str	r0, [r7, #12]
    break; 
 8001f04:	e00d      	b.n	8001f22 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8001f06:	2383      	movs	r3, #131	; 0x83
 8001f08:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f103 0018 	add.w	r0, r3, #24
 8001f10:	f107 020a 	add.w	r2, r7, #10
 8001f14:	2302      	movs	r3, #2
 8001f16:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001f1a:	f000 f93f 	bl	800219c <wm8994_write_reg>
 8001f1e:	60f8      	str	r0, [r7, #12]
    break; 
 8001f20:	bf00      	nop
  }
  
  return ret;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	00017700 	.word	0x00017700

08001f30 <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3318      	adds	r3, #24
 8001f46:	f107 020a 	add.w	r2, r7, #10
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 f98d 	bl	800226c <wm8994_aif1_sr_r>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	e043      	b.n	8001fe8 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 8001f60:	897b      	ldrh	r3, [r7, #10]
 8001f62:	2b0a      	cmp	r3, #10
 8001f64:	d83f      	bhi.n	8001fe6 <WM8994_GetFrequency+0xb6>
 8001f66:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <WM8994_GetFrequency+0x3c>)
 8001f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6c:	08001f99 	.word	0x08001f99
 8001f70:	08001fa3 	.word	0x08001fa3
 8001f74:	08001fe7 	.word	0x08001fe7
 8001f78:	08001fad 	.word	0x08001fad
 8001f7c:	08001fb7 	.word	0x08001fb7
 8001f80:	08001fe7 	.word	0x08001fe7
 8001f84:	08001fc1 	.word	0x08001fc1
 8001f88:	08001fcb 	.word	0x08001fcb
 8001f8c:	08001fd5 	.word	0x08001fd5
 8001f90:	08001fe7 	.word	0x08001fe7
 8001f94:	08001fdf 	.word	0x08001fdf
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f9e:	601a      	str	r2, [r3, #0]
      break;
 8001fa0:	e022      	b.n	8001fe8 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001fa8:	601a      	str	r2, [r3, #0]
      break;    
 8001faa:	e01d      	b.n	8001fe8 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001fb2:	601a      	str	r2, [r3, #0]
      break;
 8001fb4:	e018      	b.n	8001fe8 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f245 6222 	movw	r2, #22050	; 0x5622
 8001fbc:	601a      	str	r2, [r3, #0]
      break; 
 8001fbe:	e013      	b.n	8001fe8 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001fc6:	601a      	str	r2, [r3, #0]
      break; 
 8001fc8:	e00e      	b.n	8001fe8 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001fd0:	601a      	str	r2, [r3, #0]
      break;    
 8001fd2:	e009      	b.n	8001fe8 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001fda:	601a      	str	r2, [r3, #0]
      break;
 8001fdc:	e004      	b.n	8001fe8 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <WM8994_GetFrequency+0xc4>)
 8001fe2:	601a      	str	r2, [r3, #0]
      break;    
 8001fe4:	e000      	b.n	8001fe8 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 8001fe6:	bf00      	nop
    }
  }
  
  return ret;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	00017700 	.word	0x00017700

08001ff8 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3318      	adds	r3, #24
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f8ee 	bl	80021ec <wm8994_sw_reset_w>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800201a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800201c:	68fb      	ldr	r3, [r7, #12]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d103      	bne.n	8002040 <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e02c      	b.n	800209a <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	891a      	ldrh	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <WM8994_RegisterBusIO+0x7c>)
 8002074:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <WM8994_RegisterBusIO+0x80>)
 800207a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4798      	blx	r3
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	e002      	b.n	800209a <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002098:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	080020e1 	.word	0x080020e1
 80020a8:	08002113 	.word	0x08002113

080020ac <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4798      	blx	r3
 80020bc:	4603      	mov	r3, r0
 80020be:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80020c0:	bf00      	nop
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	4798      	blx	r3
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d8f5      	bhi.n	80020c2 <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	461a      	mov	r2, r3
 80020ec:	460b      	mov	r3, r1
 80020ee:	817b      	strh	r3, [r7, #10]
 80020f0:	4613      	mov	r3, r2
 80020f2:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	691c      	ldr	r4, [r3, #16]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	8918      	ldrh	r0, [r3, #8]
 8002100:	893b      	ldrh	r3, [r7, #8]
 8002102:	8979      	ldrh	r1, [r7, #10]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	47a0      	blx	r4
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}

08002112 <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8002112:	b590      	push	{r4, r7, lr}
 8002114:	b087      	sub	sp, #28
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	461a      	mov	r2, r3
 800211e:	460b      	mov	r3, r1
 8002120:	817b      	strh	r3, [r7, #10]
 8002122:	4613      	mov	r3, r2
 8002124:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	68dc      	ldr	r4, [r3, #12]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	8918      	ldrh	r0, [r3, #8]
 8002132:	893b      	ldrh	r3, [r7, #8]
 8002134:	8979      	ldrh	r1, [r7, #10]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	47a0      	blx	r4
 800213a:	4603      	mov	r3, r0
}
 800213c:	4618      	mov	r0, r3
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd90      	pop	{r4, r7, pc}

08002144 <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	460b      	mov	r3, r1
 8002152:	817b      	strh	r3, [r7, #10]
 8002154:	4613      	mov	r3, r2
 8002156:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685c      	ldr	r4, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6898      	ldr	r0, [r3, #8]
 8002160:	893b      	ldrh	r3, [r7, #8]
 8002162:	8979      	ldrh	r1, [r7, #10]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	47a0      	blx	r4
 8002168:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db10      	blt.n	8002192 <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b29b      	uxth	r3, r3
 8002180:	b21a      	sxth	r2, r3
 8002182:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002186:	4313      	orrs	r3, r2
 8002188:	b21b      	sxth	r3, r3
 800218a:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8a7a      	ldrh	r2, [r7, #18]
 8002190:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8002192:	697b      	ldr	r3, [r7, #20]
}
 8002194:	4618      	mov	r0, r3
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}

0800219c <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	461a      	mov	r2, r3
 80021a8:	460b      	mov	r3, r1
 80021aa:	817b      	strh	r3, [r7, #10]
 80021ac:	4613      	mov	r3, r2
 80021ae:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	8afb      	ldrh	r3, [r7, #22]
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681c      	ldr	r4, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6898      	ldr	r0, [r3, #8]
 80021d8:	893b      	ldrh	r3, [r7, #8]
 80021da:	f107 0216 	add.w	r2, r7, #22
 80021de:	8979      	ldrh	r1, [r7, #10]
 80021e0:	47a0      	blx	r4
 80021e2:	4603      	mov	r3, r0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}

080021ec <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 80021f8:	1cba      	adds	r2, r7, #2
 80021fa:	2302      	movs	r3, #2
 80021fc:	2100      	movs	r1, #0
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffcc 	bl	800219c <wm8994_write_reg>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 8002218:	2302      	movs	r3, #2
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	2100      	movs	r1, #0
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ff90 	bl	8002144 <wm8994_read_reg>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 8002238:	2302      	movs	r3, #2
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	211c      	movs	r1, #28
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff80 	bl	8002144 <wm8994_read_reg>
 8002244:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002254:	b29a      	uxth	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	881a      	ldrh	r2, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 8002276:	2302      	movs	r3, #2
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ff60 	bl	8002144 <wm8994_read_reg>
 8002284:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10c      	bne.n	80022a6 <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002294:	b29a      	uxth	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80022c0:	f107 020a 	add.w	r2, r7, #10
 80022c4:	2302      	movs	r3, #2
 80022c6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff3a 	bl	8002144 <wm8994_read_reg>
 80022d0:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d116      	bne.n	8002306 <wm8994_aif1_control1_fmt+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 80022d8:	897b      	ldrh	r3, [r7, #10]
 80022da:	f023 0318 	bic.w	r3, r3, #24
 80022de:	b29b      	uxth	r3, r3
 80022e0:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	b21a      	sxth	r2, r3
 80022e8:	897b      	ldrh	r3, [r7, #10]
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80022f4:	f107 020a 	add.w	r2, r7, #10
 80022f8:	2302      	movs	r3, #2
 80022fa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ff4c 	bl	800219c <wm8994_write_reg>
 8002304:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 800231a:	2302      	movs	r3, #2
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ff0e 	bl	8002144 <wm8994_read_reg>
 8002328:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10c      	bne.n	800234a <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	f003 0318 	and.w	r3, r3, #24
 8002338:	b29a      	uxth	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	08db      	lsrs	r3, r3, #3
 8002344:	b29a      	uxth	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002364:	f107 020a 	add.w	r2, r7, #10
 8002368:	2302      	movs	r3, #2
 800236a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fee8 	bl	8002144 <wm8994_read_reg>
 8002374:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d116      	bne.n	80023aa <wm8994_aif1_control1_wl+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 800237c:	897b      	ldrh	r3, [r7, #10]
 800237e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002382:	b29b      	uxth	r3, r3
 8002384:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	015b      	lsls	r3, r3, #5
 800238a:	b21a      	sxth	r2, r3
 800238c:	897b      	ldrh	r3, [r7, #10]
 800238e:	b21b      	sxth	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b21b      	sxth	r3, r3
 8002394:	b29b      	uxth	r3, r3
 8002396:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002398:	f107 020a 	add.w	r2, r7, #10
 800239c:	2302      	movs	r3, #2
 800239e:	f44f 7140 	mov.w	r1, #768	; 0x300
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fefa 	bl	800219c <wm8994_write_reg>
 80023a8:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 80023be:	2302      	movs	r3, #2
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff febc 	bl	8002144 <wm8994_read_reg>
 80023cc:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10c      	bne.n	80023ee <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80023dc:	b29a      	uxth	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002408:	f107 020a 	add.w	r2, r7, #10
 800240c:	2302      	movs	r3, #2
 800240e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fe96 	bl	8002144 <wm8994_read_reg>
 8002418:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d116      	bne.n	800244e <wm8994_aif1_control1_adcr_src+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 8002420:	897b      	ldrh	r3, [r7, #10]
 8002422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002426:	b29b      	uxth	r3, r3
 8002428:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	039b      	lsls	r3, r3, #14
 800242e:	b21a      	sxth	r2, r3
 8002430:	897b      	ldrh	r3, [r7, #10]
 8002432:	b21b      	sxth	r3, r3
 8002434:	4313      	orrs	r3, r2
 8002436:	b21b      	sxth	r3, r3
 8002438:	b29b      	uxth	r3, r3
 800243a:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800243c:	f107 020a 	add.w	r2, r7, #10
 8002440:	2302      	movs	r3, #2
 8002442:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff fea8 	bl	800219c <wm8994_write_reg>
 800244c:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 8002462:	2302      	movs	r3, #2
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fe6a 	bl	8002144 <wm8994_read_reg>
 8002470:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	b29a      	uxth	r2, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800248c:	68fb      	ldr	r3, [r7, #12]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 800249e:	2000      	movs	r0, #0
 80024a0:	f000 f826 	bl	80024f0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 f825 	bl	8002504 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a06      	ldr	r2, [pc, #24]	; (80024ec <HAL_SAI_ErrorCallback+0x28>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d103      	bne.n	80024de <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 f81e 	bl	8002518 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 80024dc:	e002      	b.n	80024e4 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 80024de:	2000      	movs	r0, #0
 80024e0:	f000 f824 	bl	800252c <BSP_AUDIO_IN_Error_CallBack>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40015824 	.word	0x40015824

080024f0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <BSP_I2C4_Init+0x64>)
 800254c:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <BSP_I2C4_Init+0x68>)
 800254e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter++ == 0U)
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <BSP_I2C4_Init+0x6c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	4915      	ldr	r1, [pc, #84]	; (80025ac <BSP_I2C4_Init+0x6c>)
 8002558:	600a      	str	r2, [r1, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d11d      	bne.n	800259a <BSP_I2C4_Init+0x5a>
  {
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800255e:	4811      	ldr	r0, [pc, #68]	; (80025a4 <BSP_I2C4_Init+0x64>)
 8002560:	f003 fe74 	bl	800624c <HAL_I2C_GetState>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d117      	bne.n	800259a <BSP_I2C4_Init+0x5a>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800256a:	480e      	ldr	r0, [pc, #56]	; (80025a4 <BSP_I2C4_Init+0x64>)
 800256c:	f000 fb66 	bl	8002c3c <I2C4_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d111      	bne.n	800259a <BSP_I2C4_Init+0x5a>
      {
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002576:	f005 f93d 	bl	80077f4 <HAL_RCC_GetPCLK2Freq>
 800257a:	4603      	mov	r3, r0
 800257c:	490c      	ldr	r1, [pc, #48]	; (80025b0 <BSP_I2C4_Init+0x70>)
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f8e6 	bl	8002750 <I2C_GetTiming>
 8002584:	4603      	mov	r3, r0
 8002586:	4619      	mov	r1, r3
 8002588:	4806      	ldr	r0, [pc, #24]	; (80025a4 <BSP_I2C4_Init+0x64>)
 800258a:	f000 f83b 	bl	8002604 <MX_I2C4_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <BSP_I2C4_Init+0x5a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002594:	f06f 0307 	mvn.w	r3, #7
 8002598:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 800259a:	687b      	ldr	r3, [r7, #4]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	24000f1c 	.word	0x24000f1c
 80025a8:	58001c00 	.word	0x58001c00
 80025ac:	240004e0 	.word	0x240004e0
 80025b0:	000186a0 	.word	0x000186a0

080025b4 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C4_DeInit(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]

  if (I2c4InitCounter > 0U)
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <BSP_I2C4_DeInit+0x48>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d014      	beq.n	80025f0 <BSP_I2C4_DeInit+0x3c>
  {
    if (--I2c4InitCounter == 0U)
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <BSP_I2C4_DeInit+0x48>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <BSP_I2C4_DeInit+0x48>)
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <BSP_I2C4_DeInit+0x48>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <BSP_I2C4_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C4_MspDeInit(&hbus_i2c4);
 80025d8:	4809      	ldr	r0, [pc, #36]	; (8002600 <BSP_I2C4_DeInit+0x4c>)
 80025da:	f000 fb95 	bl	8002d08 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

      /* Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80025de:	4808      	ldr	r0, [pc, #32]	; (8002600 <BSP_I2C4_DeInit+0x4c>)
 80025e0:	f003 fbc2 	bl	8005d68 <HAL_I2C_DeInit>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <BSP_I2C4_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80025ea:	f06f 0307 	mvn.w	r3, #7
 80025ee:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return ret;
 80025f0:	687b      	ldr	r3, [r7, #4]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	240004e0 	.word	0x240004e0
 8002600:	24000f1c 	.word	0x24000f1c

08002604 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f003 fb00 	bl	8005c48 <HAL_I2C_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	e014      	b.n	800267e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f004 f8b6 	bl	80067cc <HAL_I2CEx_ConfigAnalogFilter>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	e008      	b.n	800267e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800266c:	2100      	movs	r1, #0
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f004 f8f7 	bl	8006862 <HAL_I2CEx_ConfigDigitalFilter>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af02      	add	r7, sp, #8
 800268e:	60ba      	str	r2, [r7, #8]
 8002690:	461a      	mov	r2, r3
 8002692:	4603      	mov	r3, r0
 8002694:	81fb      	strh	r3, [r7, #14]
 8002696:	460b      	mov	r3, r1
 8002698:	81bb      	strh	r3, [r7, #12]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800269e:	89b9      	ldrh	r1, [r7, #12]
 80026a0:	89f8      	ldrh	r0, [r7, #14]
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f000 fb51 	bl	8002d50 <I2C4_WriteReg>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e00c      	b.n	80026d4 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80026ba:	4809      	ldr	r0, [pc, #36]	; (80026e0 <BSP_I2C4_WriteReg16+0x58>)
 80026bc:	f003 fdd4 	bl	8006268 <HAL_I2C_GetError>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d103      	bne.n	80026ce <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80026c6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	e002      	b.n	80026d4 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80026ce:	f06f 0303 	mvn.w	r3, #3
 80026d2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80026d4:	697b      	ldr	r3, [r7, #20]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	24000f1c 	.word	0x24000f1c

080026e4 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60ba      	str	r2, [r7, #8]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	81fb      	strh	r3, [r7, #14]
 80026f2:	460b      	mov	r3, r1
 80026f4:	81bb      	strh	r3, [r7, #12]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80026fa:	89b9      	ldrh	r1, [r7, #12]
 80026fc:	89f8      	ldrh	r0, [r7, #14]
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2202      	movs	r2, #2
 8002706:	f000 fb49 	bl	8002d9c <I2C4_ReadReg>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e00c      	b.n	8002730 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002716:	4809      	ldr	r0, [pc, #36]	; (800273c <BSP_I2C4_ReadReg16+0x58>)
 8002718:	f003 fda6 	bl	8006268 <HAL_I2C_GetError>
 800271c:	4603      	mov	r3, r0
 800271e:	2b04      	cmp	r3, #4
 8002720:	d103      	bne.n	800272a <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002722:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e002      	b.n	8002730 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800272a:	f06f 0303 	mvn.w	r3, #3
 800272e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002730:	697b      	ldr	r3, [r7, #20]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	24000f1c 	.word	0x24000f1c

08002740 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002744:	f000 fbd6 	bl	8002ef4 <HAL_GetTick>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d06b      	beq.n	800283c <I2C_GetTiming+0xec>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d068      	beq.n	800283c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	e060      	b.n	8002832 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002770:	4a35      	ldr	r2, [pc, #212]	; (8002848 <I2C_GetTiming+0xf8>)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3304      	adds	r3, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d352      	bcc.n	800282c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002786:	4a30      	ldr	r2, [pc, #192]	; (8002848 <I2C_GetTiming+0xf8>)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3308      	adds	r3, #8
 8002794:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d847      	bhi.n	800282c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800279c:	6939      	ldr	r1, [r7, #16]
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f856 	bl	8002850 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80027a4:	6939      	ldr	r1, [r7, #16]
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f940 	bl	8002a2c <I2C_Compute_SCLL_SCLH>
 80027ac:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b7f      	cmp	r3, #127	; 0x7f
 80027b2:	d842      	bhi.n	800283a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80027b4:	4925      	ldr	r1, [pc, #148]	; (800284c <I2C_GetTiming+0xfc>)
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80027c6:	4821      	ldr	r0, [pc, #132]	; (800284c <I2C_GetTiming+0xfc>)
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4403      	add	r3, r0
 80027d4:	3304      	adds	r3, #4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	051b      	lsls	r3, r3, #20
 80027da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80027de:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80027e0:	481a      	ldr	r0, [pc, #104]	; (800284c <I2C_GetTiming+0xfc>)
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4403      	add	r3, r0
 80027ee:	3308      	adds	r3, #8
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80027f8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80027fa:	4814      	ldr	r0, [pc, #80]	; (800284c <I2C_GetTiming+0xfc>)
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4403      	add	r3, r0
 8002808:	330c      	adds	r3, #12
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002810:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002812:	480e      	ldr	r0, [pc, #56]	; (800284c <I2C_GetTiming+0xfc>)
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4403      	add	r3, r0
 8002820:	3310      	adds	r3, #16
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002826:	430b      	orrs	r3, r1
 8002828:	617b      	str	r3, [r7, #20]
        }
        break;
 800282a:	e006      	b.n	800283a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	3301      	adds	r3, #1
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d99b      	bls.n	8002770 <I2C_GetTiming+0x20>
 8002838:	e000      	b.n	800283c <I2C_GetTiming+0xec>
        break;
 800283a:	bf00      	nop
      }
    }
  }

  return ret;
 800283c:	697b      	ldr	r3, [r7, #20]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	0800ea10 	.word	0x0800ea10
 800284c:	240004e4 	.word	0x240004e4

08002850 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002850:	b480      	push	{r7}
 8002852:	b08f      	sub	sp, #60	; 0x3c
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800285a:	2310      	movs	r3, #16
 800285c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	085a      	lsrs	r2, r3, #1
 8002862:	4b6e      	ldr	r3, [pc, #440]	; (8002a1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002864:	4413      	add	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	fbb3 f3f2 	udiv	r3, r3, r2
 800286c:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 800286e:	2332      	movs	r3, #50	; 0x32
 8002870:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8002872:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002876:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002878:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3324      	adds	r3, #36	; 0x24
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	4a65      	ldr	r2, [pc, #404]	; (8002a20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	330c      	adds	r3, #12
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800289c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800289e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80028a0:	495f      	ldr	r1, [pc, #380]	; (8002a20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	202c      	movs	r0, #44	; 0x2c
 80028a6:	fb00 f303 	mul.w	r3, r0, r3
 80028aa:	440b      	add	r3, r1
 80028ac:	3328      	adds	r3, #40	; 0x28
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3303      	adds	r3, #3
 80028b2:	69f9      	ldr	r1, [r7, #28]
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3310      	adds	r3, #16
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	4a54      	ldr	r2, [pc, #336]	; (8002a20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3320      	adds	r3, #32
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80028e0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80028e2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80028e4:	494e      	ldr	r1, [pc, #312]	; (8002a20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	202c      	movs	r0, #44	; 0x2c
 80028ea:	fb00 f303 	mul.w	r3, r0, r3
 80028ee:	440b      	add	r3, r1
 80028f0:	3328      	adds	r3, #40	; 0x28
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3304      	adds	r3, #4
 80028f6:	69f9      	ldr	r1, [r7, #28]
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002900:	4a47      	ldr	r2, [pc, #284]	; (8002a20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3320      	adds	r3, #32
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	4a43      	ldr	r2, [pc, #268]	; (8002a20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3314      	adds	r3, #20
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4403      	add	r3, r0
 8002924:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	2b00      	cmp	r3, #0
 800292a:	dc01      	bgt.n	8002930 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b00      	cmp	r3, #0
 8002934:	dc01      	bgt.n	800293a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800293a:	2300      	movs	r3, #0
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
 800293e:	e062      	b.n	8002a06 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
 8002944:	e059      	b.n	80029fa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	3301      	adds	r3, #1
 800294a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800294c:	3201      	adds	r2, #1
 800294e:	fb02 f203 	mul.w	r2, r2, r3
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	429a      	cmp	r2, r3
 8002960:	d348      	bcc.n	80029f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	e042      	b.n	80029ee <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	3301      	adds	r3, #1
 800296c:	6a3a      	ldr	r2, [r7, #32]
 800296e:	fb02 f203 	mul.w	r2, r2, r3
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	429a      	cmp	r2, r3
 8002980:	d332      	bcc.n	80029e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	429a      	cmp	r2, r3
 8002988:	d82e      	bhi.n	80029e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800298a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298e:	429a      	cmp	r2, r3
 8002990:	d02a      	beq.n	80029e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4924      	ldr	r1, [pc, #144]	; (8002a28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80029a6:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	491f      	ldr	r1, [pc, #124]	; (8002a28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3304      	adds	r3, #4
 80029b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ba:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4919      	ldr	r1, [pc, #100]	; (8002a28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3308      	adds	r3, #8
 80029ce:	6a3a      	ldr	r2, [r7, #32]
 80029d0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80029de:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b7f      	cmp	r3, #127	; 0x7f
 80029e6:	d812      	bhi.n	8002a0e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	3301      	adds	r3, #1
 80029ec:	623b      	str	r3, [r7, #32]
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	2b0f      	cmp	r3, #15
 80029f2:	d9b9      	bls.n	8002968 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	3301      	adds	r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d9a2      	bls.n	8002946 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	3301      	adds	r3, #1
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	2b0f      	cmp	r3, #15
 8002a0a:	d999      	bls.n	8002940 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002a0c:	e000      	b.n	8002a10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002a0e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002a10:	373c      	adds	r7, #60	; 0x3c
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	3b9aca00 	.word	0x3b9aca00
 8002a20:	0800ea10 	.word	0x0800ea10
 8002a24:	24000ee4 	.word	0x24000ee4
 8002a28:	240004e4 	.word	0x240004e4

08002a2c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b093      	sub	sp, #76	; 0x4c
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	085a      	lsrs	r2, r3, #1
 8002a40:	4b7a      	ldr	r3, [pc, #488]	; (8002c2c <I2C_Compute_SCLL_SCLH+0x200>)
 8002a42:	4413      	add	r3, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002a4c:	4a78      	ldr	r2, [pc, #480]	; (8002c30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	085a      	lsrs	r2, r3, #1
 8002a5c:	4b73      	ldr	r3, [pc, #460]	; (8002c2c <I2C_Compute_SCLL_SCLH+0x200>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	4973      	ldr	r1, [pc, #460]	; (8002c30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	202c      	movs	r0, #44	; 0x2c
 8002a66:	fb00 f202 	mul.w	r2, r0, r2
 8002a6a:	440a      	add	r2, r1
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8002a74:	2332      	movs	r3, #50	; 0x32
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002a78:	4a6d      	ldr	r2, [pc, #436]	; (8002c30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3328      	adds	r3, #40	; 0x28
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002a90:	4a67      	ldr	r2, [pc, #412]	; (8002c30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a62      	ldr	r2, [pc, #392]	; (8002c2c <I2C_Compute_SCLL_SCLH+0x200>)
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002aa8:	4a61      	ldr	r2, [pc, #388]	; (8002c30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5c      	ldr	r2, [pc, #368]	; (8002c2c <I2C_Compute_SCLL_SCLH+0x200>)
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac8:	e0a3      	b.n	8002c12 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8002aca:	495a      	ldr	r1, [pc, #360]	; (8002c34 <I2C_Compute_SCLL_SCLH+0x208>)
 8002acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae8:	e08c      	b.n	8002c04 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8002aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	441a      	add	r2, r3
 8002af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af2:	3301      	adds	r3, #1
 8002af4:	6979      	ldr	r1, [r7, #20]
 8002af6:	fb01 f103 	mul.w	r1, r1, r3
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	440b      	add	r3, r1
 8002b00:	4413      	add	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002b04:	4a4a      	ldr	r2, [pc, #296]	; (8002c30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3318      	adds	r3, #24
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d971      	bls.n	8002bfe <I2C_Compute_SCLL_SCLH+0x1d2>
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	1ad2      	subs	r2, r2, r3
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d268      	bcs.n	8002bfe <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b30:	e062      	b.n	8002bf8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8002b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	441a      	add	r2, r3
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	6979      	ldr	r1, [r7, #20]
 8002b3e:	fb01 f103 	mul.w	r1, r1, r3
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	440b      	add	r3, r1
 8002b48:	4413      	add	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	441a      	add	r2, r3
 8002b52:	4937      	ldr	r1, [pc, #220]	; (8002c30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	202c      	movs	r0, #44	; 0x2c
 8002b58:	fb00 f303 	mul.w	r3, r0, r3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3320      	adds	r3, #32
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	441a      	add	r2, r3
 8002b64:	4932      	ldr	r1, [pc, #200]	; (8002c30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	202c      	movs	r0, #44	; 0x2c
 8002b6a:	fb00 f303 	mul.w	r3, r0, r3
 8002b6e:	440b      	add	r3, r1
 8002b70:	3324      	adds	r3, #36	; 0x24
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4413      	add	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d338      	bcc.n	8002bf2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d834      	bhi.n	8002bf2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002b88:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <I2C_Compute_SCLL_SCLH+0x204>)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	331c      	adds	r3, #28
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d329      	bcc.n	8002bf2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d225      	bcs.n	8002bf2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da02      	bge.n	8002bba <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	425b      	negs	r3, r3
 8002bb8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d917      	bls.n	8002bf2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8002bc6:	491b      	ldr	r1, [pc, #108]	; (8002c34 <I2C_Compute_SCLL_SCLH+0x208>)
 8002bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3310      	adds	r3, #16
 8002bd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bd8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8002bda:	4916      	ldr	r1, [pc, #88]	; (8002c34 <I2C_Compute_SCLL_SCLH+0x208>)
 8002bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	330c      	adds	r3, #12
 8002bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bec:	601a      	str	r2, [r3, #0]
              ret = count;
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfa:	2bff      	cmp	r3, #255	; 0xff
 8002bfc:	d999      	bls.n	8002b32 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c00:	3301      	adds	r3, #1
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c06:	2bff      	cmp	r3, #255	; 0xff
 8002c08:	f67f af6f 	bls.w	8002aea <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	3301      	adds	r3, #1
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <I2C_Compute_SCLL_SCLH+0x20c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	f4ff af56 	bcc.w	8002aca <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	374c      	adds	r7, #76	; 0x4c
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	3b9aca00 	.word	0x3b9aca00
 8002c30:	0800ea10 	.word	0x0800ea10
 8002c34:	240004e4 	.word	0x240004e4
 8002c38:	24000ee4 	.word	0x24000ee4

08002c3c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8002c44:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4a:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002c4c:	f043 0320 	orr.w	r3, r3, #32
 8002c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c68:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002c6a:	f043 0320 	orr.w	r3, r3, #32
 8002c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c72:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002c80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c84:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002c86:	2312      	movs	r3, #18
 8002c88:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8002c92:	2304      	movs	r3, #4
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4819      	ldr	r0, [pc, #100]	; (8002d04 <I2C4_MspInit+0xc8>)
 8002c9e:	f002 fd29 	bl	80056f4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8002ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4814      	ldr	r0, [pc, #80]	; (8002d04 <I2C4_MspInit+0xc8>)
 8002cb4:	f002 fd1e 	bl	80056f4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cbe:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cdc:	4a08      	ldr	r2, [pc, #32]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002ce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <I2C4_MspInit+0xc4>)
 8002cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8002cf6:	bf00      	nop
 8002cf8:	3728      	adds	r7, #40	; 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	58024400 	.word	0x58024400
 8002d04:	58021400 	.word	0x58021400

08002d08 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8002d10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d14:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	480b      	ldr	r0, [pc, #44]	; (8002d48 <I2C4_MspDeInit+0x40>)
 8002d1c:	f002 fe92 	bl	8005a44 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8002d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d24:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4807      	ldr	r0, [pc, #28]	; (8002d48 <I2C4_MspDeInit+0x40>)
 8002d2c:	f002 fe8a 	bl	8005a44 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <I2C4_MspDeInit+0x44>)
 8002d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <I2C4_MspDeInit+0x44>)
 8002d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8002d40:	bf00      	nop
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	58021400 	.word	0x58021400
 8002d4c:	58024400 	.word	0x58024400

08002d50 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af04      	add	r7, sp, #16
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	4603      	mov	r3, r0
 8002d5a:	81fb      	strh	r3, [r7, #14]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	81bb      	strh	r3, [r7, #12]
 8002d60:	4613      	mov	r3, r2
 8002d62:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002d64:	8978      	ldrh	r0, [r7, #10]
 8002d66:	89ba      	ldrh	r2, [r7, #12]
 8002d68:	89f9      	ldrh	r1, [r7, #14]
 8002d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6e:	9302      	str	r3, [sp, #8]
 8002d70:	8b3b      	ldrh	r3, [r7, #24]
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4807      	ldr	r0, [pc, #28]	; (8002d98 <I2C4_WriteReg+0x48>)
 8002d7c:	f003 f838 	bl	8005df0 <HAL_I2C_Mem_Write>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e001      	b.n	8002d8e <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002d8a:	f06f 0307 	mvn.w	r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	24000f1c 	.word	0x24000f1c

08002d9c <I2C4_ReadReg>:
  * @param  MemAddSize Size of internal memory address
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af04      	add	r7, sp, #16
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	4603      	mov	r3, r0
 8002da6:	81fb      	strh	r3, [r7, #14]
 8002da8:	460b      	mov	r3, r1
 8002daa:	81bb      	strh	r3, [r7, #12]
 8002dac:	4613      	mov	r3, r2
 8002dae:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002db0:	8978      	ldrh	r0, [r7, #10]
 8002db2:	89ba      	ldrh	r2, [r7, #12]
 8002db4:	89f9      	ldrh	r1, [r7, #14]
 8002db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dba:	9302      	str	r3, [sp, #8]
 8002dbc:	8b3b      	ldrh	r3, [r7, #24]
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4807      	ldr	r0, [pc, #28]	; (8002de4 <I2C4_ReadReg+0x48>)
 8002dc8:	f003 f926 	bl	8006018 <HAL_I2C_Mem_Read>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e001      	b.n	8002dda <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002dd6:	f06f 0307 	mvn.w	r3, #7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	24000f1c 	.word	0x24000f1c

08002de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dee:	2003      	movs	r0, #3
 8002df0:	f000 f95c 	bl	80030ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002df4:	f004 fb3e 	bl	8007474 <HAL_RCC_GetSysClockFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <HAL_Init+0x68>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	4913      	ldr	r1, [pc, #76]	; (8002e54 <HAL_Init+0x6c>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_Init+0x68>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <HAL_Init+0x6c>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <HAL_Init+0x70>)
 8002e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <HAL_Init+0x74>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e32:	2000      	movs	r0, #0
 8002e34:	f000 f814 	bl	8002e60 <HAL_InitTick>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e002      	b.n	8002e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e42:	f009 fa15 	bl	800c270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	58024400 	.word	0x58024400
 8002e54:	0800eac4 	.word	0x0800eac4
 8002e58:	24000458 	.word	0x24000458
 8002e5c:	24000454 	.word	0x24000454

08002e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_InitTick+0x60>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e021      	b.n	8002eb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_InitTick+0x64>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_InitTick+0x60>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f941 	bl	8003112 <HAL_SYSTICK_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00e      	b.n	8002eb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b0f      	cmp	r3, #15
 8002e9e:	d80a      	bhi.n	8002eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ea8:	f000 f90b 	bl	80030c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eac:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <HAL_InitTick+0x68>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	24000450 	.word	0x24000450
 8002ec4:	24000454 	.word	0x24000454
 8002ec8:	2400044c 	.word	0x2400044c

08002ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_IncTick+0x20>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_IncTick+0x24>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_IncTick+0x24>)
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	24000450 	.word	0x24000450
 8002ef0:	24000f68 	.word	0x24000f68

08002ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_GetTick+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	24000f68 	.word	0x24000f68

08002f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <__NVIC_SetPriorityGrouping+0x40>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <__NVIC_SetPriorityGrouping+0x44>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3a:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <__NVIC_SetPriorityGrouping+0x40>)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	60d3      	str	r3, [r2, #12]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00
 8002f50:	05fa0000 	.word	0x05fa0000

08002f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <__NVIC_GetPriorityGrouping+0x18>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	f003 0307 	and.w	r3, r3, #7
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	db0b      	blt.n	8002f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <__NVIC_EnableIRQ+0x38>)
 8002f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2001      	movs	r0, #1
 8002f92:	fa00 f202 	lsl.w	r2, r0, r2
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e100 	.word	0xe000e100

08002fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	6039      	str	r1, [r7, #0]
 8002fb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	db0a      	blt.n	8002fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	490c      	ldr	r1, [pc, #48]	; (8002ff8 <__NVIC_SetPriority+0x4c>)
 8002fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd4:	e00a      	b.n	8002fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4908      	ldr	r1, [pc, #32]	; (8002ffc <__NVIC_SetPriority+0x50>)
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	3b04      	subs	r3, #4
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	440b      	add	r3, r1
 8002fea:	761a      	strb	r2, [r3, #24]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000e100 	.word	0xe000e100
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f1c3 0307 	rsb	r3, r3, #7
 800301a:	2b04      	cmp	r3, #4
 800301c:	bf28      	it	cs
 800301e:	2304      	movcs	r3, #4
 8003020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3304      	adds	r3, #4
 8003026:	2b06      	cmp	r3, #6
 8003028:	d902      	bls.n	8003030 <NVIC_EncodePriority+0x30>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3b03      	subs	r3, #3
 800302e:	e000      	b.n	8003032 <NVIC_EncodePriority+0x32>
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	401a      	ands	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43d9      	mvns	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	4313      	orrs	r3, r2
         );
}
 800305a:	4618      	mov	r0, r3
 800305c:	3724      	adds	r7, #36	; 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003078:	d301      	bcc.n	800307e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307a:	2301      	movs	r3, #1
 800307c:	e00f      	b.n	800309e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <SysTick_Config+0x40>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3b01      	subs	r3, #1
 8003084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003086:	210f      	movs	r1, #15
 8003088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800308c:	f7ff ff8e 	bl	8002fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <SysTick_Config+0x40>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003096:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <SysTick_Config+0x40>)
 8003098:	2207      	movs	r2, #7
 800309a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	e000e010 	.word	0xe000e010

080030ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ff29 	bl	8002f0c <__NVIC_SetPriorityGrouping>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030d0:	f7ff ff40 	bl	8002f54 <__NVIC_GetPriorityGrouping>
 80030d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	6978      	ldr	r0, [r7, #20]
 80030dc:	f7ff ff90 	bl	8003000 <NVIC_EncodePriority>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff5f 	bl	8002fac <__NVIC_SetPriority>
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff33 	bl	8002f70 <__NVIC_EnableIRQ>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff ffa4 	bl	8003068 <SysTick_Config>
 8003120:	4603      	mov	r3, r0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e054      	b.n	80031e8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7f5b      	ldrb	r3, [r3, #29]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f009 f8a8 	bl	800c2a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	791b      	ldrb	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <HAL_CRC_Init+0xc4>)
 8003168:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0218 	bic.w	r2, r2, #24
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	e00c      	b.n	8003196 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	461a      	mov	r2, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f834 	bl	80031f4 <HAL_CRCEx_Polynomial_Set>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e028      	b.n	80031e8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	795b      	ldrb	r3, [r3, #5]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031a6:	611a      	str	r2, [r3, #16]
 80031a8:	e004      	b.n	80031b4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6912      	ldr	r2, [r2, #16]
 80031b2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	04c11db7 	.word	0x04c11db7

080031f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003204:	231f      	movs	r3, #31
 8003206:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003208:	bf00      	nop
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1e5a      	subs	r2, r3, #1
 800320e:	613a      	str	r2, [r7, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d009      	beq.n	8003228 <HAL_CRCEx_Polynomial_Set+0x34>
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_CRCEx_Polynomial_Set+0x16>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b18      	cmp	r3, #24
 800322c:	d846      	bhi.n	80032bc <HAL_CRCEx_Polynomial_Set+0xc8>
 800322e:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	080032c3 	.word	0x080032c3
 8003238:	080032bd 	.word	0x080032bd
 800323c:	080032bd 	.word	0x080032bd
 8003240:	080032bd 	.word	0x080032bd
 8003244:	080032bd 	.word	0x080032bd
 8003248:	080032bd 	.word	0x080032bd
 800324c:	080032bd 	.word	0x080032bd
 8003250:	080032bd 	.word	0x080032bd
 8003254:	080032b1 	.word	0x080032b1
 8003258:	080032bd 	.word	0x080032bd
 800325c:	080032bd 	.word	0x080032bd
 8003260:	080032bd 	.word	0x080032bd
 8003264:	080032bd 	.word	0x080032bd
 8003268:	080032bd 	.word	0x080032bd
 800326c:	080032bd 	.word	0x080032bd
 8003270:	080032bd 	.word	0x080032bd
 8003274:	080032a5 	.word	0x080032a5
 8003278:	080032bd 	.word	0x080032bd
 800327c:	080032bd 	.word	0x080032bd
 8003280:	080032bd 	.word	0x080032bd
 8003284:	080032bd 	.word	0x080032bd
 8003288:	080032bd 	.word	0x080032bd
 800328c:	080032bd 	.word	0x080032bd
 8003290:	080032bd 	.word	0x080032bd
 8003294:	08003299 	.word	0x08003299
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b06      	cmp	r3, #6
 800329c:	d913      	bls.n	80032c6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032a2:	e010      	b.n	80032c6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b07      	cmp	r3, #7
 80032a8:	d90f      	bls.n	80032ca <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	d90b      	bls.n	80032ce <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032ba:	e008      	b.n	80032ce <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
      break;
 80032c0:	e006      	b.n	80032d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032c2:	bf00      	nop
 80032c4:	e004      	b.n	80032d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032c6:	bf00      	nop
 80032c8:	e002      	b.n	80032d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032ce:	bf00      	nop
  }
  if (status == HAL_OK)
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f023 0118 	bic.w	r1, r3, #24
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff fdf4 	bl	8002ef4 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e314      	b.n	8003942 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a66      	ldr	r2, [pc, #408]	; (80034b8 <HAL_DMA_Init+0x1b8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d04a      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a65      	ldr	r2, [pc, #404]	; (80034bc <HAL_DMA_Init+0x1bc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d045      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a63      	ldr	r2, [pc, #396]	; (80034c0 <HAL_DMA_Init+0x1c0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d040      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a62      	ldr	r2, [pc, #392]	; (80034c4 <HAL_DMA_Init+0x1c4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d03b      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a60      	ldr	r2, [pc, #384]	; (80034c8 <HAL_DMA_Init+0x1c8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d036      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5f      	ldr	r2, [pc, #380]	; (80034cc <HAL_DMA_Init+0x1cc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d031      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5d      	ldr	r2, [pc, #372]	; (80034d0 <HAL_DMA_Init+0x1d0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d02c      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a5c      	ldr	r2, [pc, #368]	; (80034d4 <HAL_DMA_Init+0x1d4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d027      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a5a      	ldr	r2, [pc, #360]	; (80034d8 <HAL_DMA_Init+0x1d8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d022      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a59      	ldr	r2, [pc, #356]	; (80034dc <HAL_DMA_Init+0x1dc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d01d      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a57      	ldr	r2, [pc, #348]	; (80034e0 <HAL_DMA_Init+0x1e0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d018      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a56      	ldr	r2, [pc, #344]	; (80034e4 <HAL_DMA_Init+0x1e4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a54      	ldr	r2, [pc, #336]	; (80034e8 <HAL_DMA_Init+0x1e8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a53      	ldr	r2, [pc, #332]	; (80034ec <HAL_DMA_Init+0x1ec>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a51      	ldr	r2, [pc, #324]	; (80034f0 <HAL_DMA_Init+0x1f0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_DMA_Init+0xb8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a50      	ldr	r2, [pc, #320]	; (80034f4 <HAL_DMA_Init+0x1f4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_DMA_Init+0xbc>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_DMA_Init+0xbe>
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 813c 	beq.w	800363c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a37      	ldr	r2, [pc, #220]	; (80034b8 <HAL_DMA_Init+0x1b8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d04a      	beq.n	8003474 <HAL_DMA_Init+0x174>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a36      	ldr	r2, [pc, #216]	; (80034bc <HAL_DMA_Init+0x1bc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d045      	beq.n	8003474 <HAL_DMA_Init+0x174>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a34      	ldr	r2, [pc, #208]	; (80034c0 <HAL_DMA_Init+0x1c0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d040      	beq.n	8003474 <HAL_DMA_Init+0x174>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a33      	ldr	r2, [pc, #204]	; (80034c4 <HAL_DMA_Init+0x1c4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d03b      	beq.n	8003474 <HAL_DMA_Init+0x174>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a31      	ldr	r2, [pc, #196]	; (80034c8 <HAL_DMA_Init+0x1c8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d036      	beq.n	8003474 <HAL_DMA_Init+0x174>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a30      	ldr	r2, [pc, #192]	; (80034cc <HAL_DMA_Init+0x1cc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d031      	beq.n	8003474 <HAL_DMA_Init+0x174>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2e      	ldr	r2, [pc, #184]	; (80034d0 <HAL_DMA_Init+0x1d0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02c      	beq.n	8003474 <HAL_DMA_Init+0x174>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2d      	ldr	r2, [pc, #180]	; (80034d4 <HAL_DMA_Init+0x1d4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d027      	beq.n	8003474 <HAL_DMA_Init+0x174>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <HAL_DMA_Init+0x1d8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d022      	beq.n	8003474 <HAL_DMA_Init+0x174>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <HAL_DMA_Init+0x1dc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d01d      	beq.n	8003474 <HAL_DMA_Init+0x174>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a28      	ldr	r2, [pc, #160]	; (80034e0 <HAL_DMA_Init+0x1e0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d018      	beq.n	8003474 <HAL_DMA_Init+0x174>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a27      	ldr	r2, [pc, #156]	; (80034e4 <HAL_DMA_Init+0x1e4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_DMA_Init+0x174>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a25      	ldr	r2, [pc, #148]	; (80034e8 <HAL_DMA_Init+0x1e8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00e      	beq.n	8003474 <HAL_DMA_Init+0x174>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a24      	ldr	r2, [pc, #144]	; (80034ec <HAL_DMA_Init+0x1ec>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_DMA_Init+0x174>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a22      	ldr	r2, [pc, #136]	; (80034f0 <HAL_DMA_Init+0x1f0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_DMA_Init+0x174>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <HAL_DMA_Init+0x1f4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d108      	bne.n	8003486 <HAL_DMA_Init+0x186>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e007      	b.n	8003496 <HAL_DMA_Init+0x196>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003496:	e02f      	b.n	80034f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003498:	f7ff fd2c 	bl	8002ef4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d928      	bls.n	80034f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2203      	movs	r2, #3
 80034b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e244      	b.n	8003942 <HAL_DMA_Init+0x642>
 80034b8:	40020010 	.word	0x40020010
 80034bc:	40020028 	.word	0x40020028
 80034c0:	40020040 	.word	0x40020040
 80034c4:	40020058 	.word	0x40020058
 80034c8:	40020070 	.word	0x40020070
 80034cc:	40020088 	.word	0x40020088
 80034d0:	400200a0 	.word	0x400200a0
 80034d4:	400200b8 	.word	0x400200b8
 80034d8:	40020410 	.word	0x40020410
 80034dc:	40020428 	.word	0x40020428
 80034e0:	40020440 	.word	0x40020440
 80034e4:	40020458 	.word	0x40020458
 80034e8:	40020470 	.word	0x40020470
 80034ec:	40020488 	.word	0x40020488
 80034f0:	400204a0 	.word	0x400204a0
 80034f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1c8      	bne.n	8003498 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4b84      	ldr	r3, [pc, #528]	; (8003724 <HAL_DMA_Init+0x424>)
 8003512:	4013      	ands	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800351e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003536:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	2b04      	cmp	r3, #4
 800354a:	d107      	bne.n	800355c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	4313      	orrs	r3, r2
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b28      	cmp	r3, #40	; 0x28
 8003562:	d903      	bls.n	800356c <HAL_DMA_Init+0x26c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b2e      	cmp	r3, #46	; 0x2e
 800356a:	d91f      	bls.n	80035ac <HAL_DMA_Init+0x2ac>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b3e      	cmp	r3, #62	; 0x3e
 8003572:	d903      	bls.n	800357c <HAL_DMA_Init+0x27c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b42      	cmp	r3, #66	; 0x42
 800357a:	d917      	bls.n	80035ac <HAL_DMA_Init+0x2ac>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b46      	cmp	r3, #70	; 0x46
 8003582:	d903      	bls.n	800358c <HAL_DMA_Init+0x28c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b48      	cmp	r3, #72	; 0x48
 800358a:	d90f      	bls.n	80035ac <HAL_DMA_Init+0x2ac>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b4e      	cmp	r3, #78	; 0x4e
 8003592:	d903      	bls.n	800359c <HAL_DMA_Init+0x29c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b52      	cmp	r3, #82	; 0x52
 800359a:	d907      	bls.n	80035ac <HAL_DMA_Init+0x2ac>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b73      	cmp	r3, #115	; 0x73
 80035a2:	d905      	bls.n	80035b0 <HAL_DMA_Init+0x2b0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b77      	cmp	r3, #119	; 0x77
 80035aa:	d801      	bhi.n	80035b0 <HAL_DMA_Init+0x2b0>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <HAL_DMA_Init+0x2b2>
 80035b0:	2300      	movs	r3, #0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035bc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f023 0307 	bic.w	r3, r3, #7
 80035d4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d117      	bne.n	8003618 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00e      	beq.n	8003618 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f001 fdd8 	bl	80051b0 <DMA_CheckFifoParam>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2240      	movs	r2, #64	; 0x40
 800360a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e194      	b.n	8003942 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f001 fd13 	bl	800504c <DMA_CalcBaseAndBitshift>
 8003626:	4603      	mov	r3, r0
 8003628:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	223f      	movs	r2, #63	; 0x3f
 8003634:	409a      	lsls	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	e0ca      	b.n	80037d2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a39      	ldr	r2, [pc, #228]	; (8003728 <HAL_DMA_Init+0x428>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <HAL_DMA_Init+0x38c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a38      	ldr	r2, [pc, #224]	; (800372c <HAL_DMA_Init+0x42c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d01d      	beq.n	800368c <HAL_DMA_Init+0x38c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a36      	ldr	r2, [pc, #216]	; (8003730 <HAL_DMA_Init+0x430>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_DMA_Init+0x38c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a35      	ldr	r2, [pc, #212]	; (8003734 <HAL_DMA_Init+0x434>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_DMA_Init+0x38c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a33      	ldr	r2, [pc, #204]	; (8003738 <HAL_DMA_Init+0x438>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_DMA_Init+0x38c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a32      	ldr	r2, [pc, #200]	; (800373c <HAL_DMA_Init+0x43c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_DMA_Init+0x38c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a30      	ldr	r2, [pc, #192]	; (8003740 <HAL_DMA_Init+0x440>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_DMA_Init+0x38c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2f      	ldr	r2, [pc, #188]	; (8003744 <HAL_DMA_Init+0x444>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Init+0x390>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_DMA_Init+0x392>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8094 	beq.w	80037c0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a22      	ldr	r2, [pc, #136]	; (8003728 <HAL_DMA_Init+0x428>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d021      	beq.n	80036e6 <HAL_DMA_Init+0x3e6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a21      	ldr	r2, [pc, #132]	; (800372c <HAL_DMA_Init+0x42c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01c      	beq.n	80036e6 <HAL_DMA_Init+0x3e6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1f      	ldr	r2, [pc, #124]	; (8003730 <HAL_DMA_Init+0x430>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d017      	beq.n	80036e6 <HAL_DMA_Init+0x3e6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <HAL_DMA_Init+0x434>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d012      	beq.n	80036e6 <HAL_DMA_Init+0x3e6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <HAL_DMA_Init+0x438>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00d      	beq.n	80036e6 <HAL_DMA_Init+0x3e6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1b      	ldr	r2, [pc, #108]	; (800373c <HAL_DMA_Init+0x43c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d008      	beq.n	80036e6 <HAL_DMA_Init+0x3e6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a19      	ldr	r2, [pc, #100]	; (8003740 <HAL_DMA_Init+0x440>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <HAL_DMA_Init+0x3e6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a18      	ldr	r2, [pc, #96]	; (8003744 <HAL_DMA_Init+0x444>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_DMA_Init+0x448>)
 8003704:	4013      	ands	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d01d      	beq.n	800374c <HAL_DMA_Init+0x44c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d102      	bne.n	800371e <HAL_DMA_Init+0x41e>
 8003718:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800371c:	e017      	b.n	800374e <HAL_DMA_Init+0x44e>
 800371e:	2300      	movs	r3, #0
 8003720:	e015      	b.n	800374e <HAL_DMA_Init+0x44e>
 8003722:	bf00      	nop
 8003724:	fe10803f 	.word	0xfe10803f
 8003728:	58025408 	.word	0x58025408
 800372c:	5802541c 	.word	0x5802541c
 8003730:	58025430 	.word	0x58025430
 8003734:	58025444 	.word	0x58025444
 8003738:	58025458 	.word	0x58025458
 800373c:	5802546c 	.word	0x5802546c
 8003740:	58025480 	.word	0x58025480
 8003744:	58025494 	.word	0x58025494
 8003748:	fffe000f 	.word	0xfffe000f
 800374c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68d2      	ldr	r2, [r2, #12]
 8003752:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800375c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800376c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800377c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	4b6e      	ldr	r3, [pc, #440]	; (800394c <HAL_DMA_Init+0x64c>)
 8003794:	4413      	add	r3, r2
 8003796:	4a6e      	ldr	r2, [pc, #440]	; (8003950 <HAL_DMA_Init+0x650>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	009a      	lsls	r2, r3, #2
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f001 fc51 	bl	800504c <DMA_CalcBaseAndBitshift>
 80037aa:	4603      	mov	r3, r0
 80037ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	2201      	movs	r2, #1
 80037b8:	409a      	lsls	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	e008      	b.n	80037d2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2240      	movs	r2, #64	; 0x40
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2203      	movs	r2, #3
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0b7      	b.n	8003942 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5f      	ldr	r2, [pc, #380]	; (8003954 <HAL_DMA_Init+0x654>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d072      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a5d      	ldr	r2, [pc, #372]	; (8003958 <HAL_DMA_Init+0x658>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d06d      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a5c      	ldr	r2, [pc, #368]	; (800395c <HAL_DMA_Init+0x65c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d068      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a5a      	ldr	r2, [pc, #360]	; (8003960 <HAL_DMA_Init+0x660>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d063      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a59      	ldr	r2, [pc, #356]	; (8003964 <HAL_DMA_Init+0x664>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d05e      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a57      	ldr	r2, [pc, #348]	; (8003968 <HAL_DMA_Init+0x668>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d059      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_DMA_Init+0x66c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d054      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a54      	ldr	r2, [pc, #336]	; (8003970 <HAL_DMA_Init+0x670>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d04f      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a53      	ldr	r2, [pc, #332]	; (8003974 <HAL_DMA_Init+0x674>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d04a      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a51      	ldr	r2, [pc, #324]	; (8003978 <HAL_DMA_Init+0x678>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d045      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a50      	ldr	r2, [pc, #320]	; (800397c <HAL_DMA_Init+0x67c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d040      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4e      	ldr	r2, [pc, #312]	; (8003980 <HAL_DMA_Init+0x680>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d03b      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4d      	ldr	r2, [pc, #308]	; (8003984 <HAL_DMA_Init+0x684>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d036      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4b      	ldr	r2, [pc, #300]	; (8003988 <HAL_DMA_Init+0x688>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d031      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a4a      	ldr	r2, [pc, #296]	; (800398c <HAL_DMA_Init+0x68c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d02c      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a48      	ldr	r2, [pc, #288]	; (8003990 <HAL_DMA_Init+0x690>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d027      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a47      	ldr	r2, [pc, #284]	; (8003994 <HAL_DMA_Init+0x694>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d022      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a45      	ldr	r2, [pc, #276]	; (8003998 <HAL_DMA_Init+0x698>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01d      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a44      	ldr	r2, [pc, #272]	; (800399c <HAL_DMA_Init+0x69c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d018      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a42      	ldr	r2, [pc, #264]	; (80039a0 <HAL_DMA_Init+0x6a0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a41      	ldr	r2, [pc, #260]	; (80039a4 <HAL_DMA_Init+0x6a4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <HAL_DMA_Init+0x6a8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a3e      	ldr	r2, [pc, #248]	; (80039ac <HAL_DMA_Init+0x6ac>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_DMA_Init+0x5c2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a3c      	ldr	r2, [pc, #240]	; (80039b0 <HAL_DMA_Init+0x6b0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_DMA_Init+0x5c6>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_DMA_Init+0x5c8>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d032      	beq.n	8003932 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f001 fceb 	bl	80052a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b80      	cmp	r3, #128	; 0x80
 80038d8:	d102      	bne.n	80038e0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d010      	beq.n	8003920 <HAL_DMA_Init+0x620>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b08      	cmp	r3, #8
 8003904:	d80c      	bhi.n	8003920 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f001 fd68 	bl	80053dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	e008      	b.n	8003932 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	a7fdabf8 	.word	0xa7fdabf8
 8003950:	cccccccd 	.word	0xcccccccd
 8003954:	40020010 	.word	0x40020010
 8003958:	40020028 	.word	0x40020028
 800395c:	40020040 	.word	0x40020040
 8003960:	40020058 	.word	0x40020058
 8003964:	40020070 	.word	0x40020070
 8003968:	40020088 	.word	0x40020088
 800396c:	400200a0 	.word	0x400200a0
 8003970:	400200b8 	.word	0x400200b8
 8003974:	40020410 	.word	0x40020410
 8003978:	40020428 	.word	0x40020428
 800397c:	40020440 	.word	0x40020440
 8003980:	40020458 	.word	0x40020458
 8003984:	40020470 	.word	0x40020470
 8003988:	40020488 	.word	0x40020488
 800398c:	400204a0 	.word	0x400204a0
 8003990:	400204b8 	.word	0x400204b8
 8003994:	58025408 	.word	0x58025408
 8003998:	5802541c 	.word	0x5802541c
 800399c:	58025430 	.word	0x58025430
 80039a0:	58025444 	.word	0x58025444
 80039a4:	58025458 	.word	0x58025458
 80039a8:	5802546c 	.word	0x5802546c
 80039ac:	58025480 	.word	0x58025480
 80039b0:	58025494 	.word	0x58025494

080039b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e226      	b.n	8003e1e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_DMA_Start_IT+0x2a>
 80039da:	2302      	movs	r3, #2
 80039dc:	e21f      	b.n	8003e1e <HAL_DMA_Start_IT+0x46a>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	f040 820a 	bne.w	8003e08 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a68      	ldr	r2, [pc, #416]	; (8003ba8 <HAL_DMA_Start_IT+0x1f4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d04a      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a66      	ldr	r2, [pc, #408]	; (8003bac <HAL_DMA_Start_IT+0x1f8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d045      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a65      	ldr	r2, [pc, #404]	; (8003bb0 <HAL_DMA_Start_IT+0x1fc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d040      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a63      	ldr	r2, [pc, #396]	; (8003bb4 <HAL_DMA_Start_IT+0x200>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d03b      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a62      	ldr	r2, [pc, #392]	; (8003bb8 <HAL_DMA_Start_IT+0x204>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d036      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a60      	ldr	r2, [pc, #384]	; (8003bbc <HAL_DMA_Start_IT+0x208>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d031      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5f      	ldr	r2, [pc, #380]	; (8003bc0 <HAL_DMA_Start_IT+0x20c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d02c      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5d      	ldr	r2, [pc, #372]	; (8003bc4 <HAL_DMA_Start_IT+0x210>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d027      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5c      	ldr	r2, [pc, #368]	; (8003bc8 <HAL_DMA_Start_IT+0x214>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d022      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a5a      	ldr	r2, [pc, #360]	; (8003bcc <HAL_DMA_Start_IT+0x218>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01d      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a59      	ldr	r2, [pc, #356]	; (8003bd0 <HAL_DMA_Start_IT+0x21c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d018      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a57      	ldr	r2, [pc, #348]	; (8003bd4 <HAL_DMA_Start_IT+0x220>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a56      	ldr	r2, [pc, #344]	; (8003bd8 <HAL_DMA_Start_IT+0x224>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a54      	ldr	r2, [pc, #336]	; (8003bdc <HAL_DMA_Start_IT+0x228>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a53      	ldr	r2, [pc, #332]	; (8003be0 <HAL_DMA_Start_IT+0x22c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <HAL_DMA_Start_IT+0xee>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a51      	ldr	r2, [pc, #324]	; (8003be4 <HAL_DMA_Start_IT+0x230>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d108      	bne.n	8003ab4 <HAL_DMA_Start_IT+0x100>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e007      	b.n	8003ac4 <HAL_DMA_Start_IT+0x110>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f001 f912 	bl	8004cf4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a34      	ldr	r2, [pc, #208]	; (8003ba8 <HAL_DMA_Start_IT+0x1f4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d04a      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a33      	ldr	r2, [pc, #204]	; (8003bac <HAL_DMA_Start_IT+0x1f8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d045      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a31      	ldr	r2, [pc, #196]	; (8003bb0 <HAL_DMA_Start_IT+0x1fc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d040      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a30      	ldr	r2, [pc, #192]	; (8003bb4 <HAL_DMA_Start_IT+0x200>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d03b      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2e      	ldr	r2, [pc, #184]	; (8003bb8 <HAL_DMA_Start_IT+0x204>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d036      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2d      	ldr	r2, [pc, #180]	; (8003bbc <HAL_DMA_Start_IT+0x208>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d031      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2b      	ldr	r2, [pc, #172]	; (8003bc0 <HAL_DMA_Start_IT+0x20c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d02c      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <HAL_DMA_Start_IT+0x210>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d027      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a28      	ldr	r2, [pc, #160]	; (8003bc8 <HAL_DMA_Start_IT+0x214>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d022      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <HAL_DMA_Start_IT+0x218>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d01d      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a25      	ldr	r2, [pc, #148]	; (8003bd0 <HAL_DMA_Start_IT+0x21c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d018      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a24      	ldr	r2, [pc, #144]	; (8003bd4 <HAL_DMA_Start_IT+0x220>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d013      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <HAL_DMA_Start_IT+0x224>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a21      	ldr	r2, [pc, #132]	; (8003bdc <HAL_DMA_Start_IT+0x228>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <HAL_DMA_Start_IT+0x22c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_DMA_Start_IT+0x1bc>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <HAL_DMA_Start_IT+0x230>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d101      	bne.n	8003b74 <HAL_DMA_Start_IT+0x1c0>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_DMA_Start_IT+0x1c2>
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d036      	beq.n	8003be8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f023 021e 	bic.w	r2, r3, #30
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0216 	orr.w	r2, r2, #22
 8003b8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d03e      	beq.n	8003c14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0208 	orr.w	r2, r2, #8
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e035      	b.n	8003c14 <HAL_DMA_Start_IT+0x260>
 8003ba8:	40020010 	.word	0x40020010
 8003bac:	40020028 	.word	0x40020028
 8003bb0:	40020040 	.word	0x40020040
 8003bb4:	40020058 	.word	0x40020058
 8003bb8:	40020070 	.word	0x40020070
 8003bbc:	40020088 	.word	0x40020088
 8003bc0:	400200a0 	.word	0x400200a0
 8003bc4:	400200b8 	.word	0x400200b8
 8003bc8:	40020410 	.word	0x40020410
 8003bcc:	40020428 	.word	0x40020428
 8003bd0:	40020440 	.word	0x40020440
 8003bd4:	40020458 	.word	0x40020458
 8003bd8:	40020470 	.word	0x40020470
 8003bdc:	40020488 	.word	0x40020488
 8003be0:	400204a0 	.word	0x400204a0
 8003be4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 020e 	bic.w	r2, r3, #14
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 020a 	orr.w	r2, r2, #10
 8003bfa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0204 	orr.w	r2, r2, #4
 8003c12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a83      	ldr	r2, [pc, #524]	; (8003e28 <HAL_DMA_Start_IT+0x474>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d072      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a82      	ldr	r2, [pc, #520]	; (8003e2c <HAL_DMA_Start_IT+0x478>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d06d      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a80      	ldr	r2, [pc, #512]	; (8003e30 <HAL_DMA_Start_IT+0x47c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d068      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a7f      	ldr	r2, [pc, #508]	; (8003e34 <HAL_DMA_Start_IT+0x480>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d063      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a7d      	ldr	r2, [pc, #500]	; (8003e38 <HAL_DMA_Start_IT+0x484>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d05e      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	; (8003e3c <HAL_DMA_Start_IT+0x488>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d059      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7a      	ldr	r2, [pc, #488]	; (8003e40 <HAL_DMA_Start_IT+0x48c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d054      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a79      	ldr	r2, [pc, #484]	; (8003e44 <HAL_DMA_Start_IT+0x490>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d04f      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a77      	ldr	r2, [pc, #476]	; (8003e48 <HAL_DMA_Start_IT+0x494>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d04a      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a76      	ldr	r2, [pc, #472]	; (8003e4c <HAL_DMA_Start_IT+0x498>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d045      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a74      	ldr	r2, [pc, #464]	; (8003e50 <HAL_DMA_Start_IT+0x49c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d040      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a73      	ldr	r2, [pc, #460]	; (8003e54 <HAL_DMA_Start_IT+0x4a0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d03b      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a71      	ldr	r2, [pc, #452]	; (8003e58 <HAL_DMA_Start_IT+0x4a4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d036      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a70      	ldr	r2, [pc, #448]	; (8003e5c <HAL_DMA_Start_IT+0x4a8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d031      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a6e      	ldr	r2, [pc, #440]	; (8003e60 <HAL_DMA_Start_IT+0x4ac>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d02c      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6d      	ldr	r2, [pc, #436]	; (8003e64 <HAL_DMA_Start_IT+0x4b0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d027      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6b      	ldr	r2, [pc, #428]	; (8003e68 <HAL_DMA_Start_IT+0x4b4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d022      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6a      	ldr	r2, [pc, #424]	; (8003e6c <HAL_DMA_Start_IT+0x4b8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d01d      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a68      	ldr	r2, [pc, #416]	; (8003e70 <HAL_DMA_Start_IT+0x4bc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d018      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a67      	ldr	r2, [pc, #412]	; (8003e74 <HAL_DMA_Start_IT+0x4c0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a65      	ldr	r2, [pc, #404]	; (8003e78 <HAL_DMA_Start_IT+0x4c4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a64      	ldr	r2, [pc, #400]	; (8003e7c <HAL_DMA_Start_IT+0x4c8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d009      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a62      	ldr	r2, [pc, #392]	; (8003e80 <HAL_DMA_Start_IT+0x4cc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_DMA_Start_IT+0x350>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a61      	ldr	r2, [pc, #388]	; (8003e84 <HAL_DMA_Start_IT+0x4d0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <HAL_DMA_Start_IT+0x354>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_DMA_Start_IT+0x356>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01a      	beq.n	8003d44 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d2a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d42:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a37      	ldr	r2, [pc, #220]	; (8003e28 <HAL_DMA_Start_IT+0x474>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d04a      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a36      	ldr	r2, [pc, #216]	; (8003e2c <HAL_DMA_Start_IT+0x478>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d045      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a34      	ldr	r2, [pc, #208]	; (8003e30 <HAL_DMA_Start_IT+0x47c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d040      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a33      	ldr	r2, [pc, #204]	; (8003e34 <HAL_DMA_Start_IT+0x480>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d03b      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a31      	ldr	r2, [pc, #196]	; (8003e38 <HAL_DMA_Start_IT+0x484>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d036      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a30      	ldr	r2, [pc, #192]	; (8003e3c <HAL_DMA_Start_IT+0x488>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d031      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2e      	ldr	r2, [pc, #184]	; (8003e40 <HAL_DMA_Start_IT+0x48c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d02c      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <HAL_DMA_Start_IT+0x490>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d027      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2b      	ldr	r2, [pc, #172]	; (8003e48 <HAL_DMA_Start_IT+0x494>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d022      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <HAL_DMA_Start_IT+0x498>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d01d      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a28      	ldr	r2, [pc, #160]	; (8003e50 <HAL_DMA_Start_IT+0x49c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <HAL_DMA_Start_IT+0x4a0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a25      	ldr	r2, [pc, #148]	; (8003e58 <HAL_DMA_Start_IT+0x4a4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <HAL_DMA_Start_IT+0x4a8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <HAL_DMA_Start_IT+0x4ac>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_DMA_Start_IT+0x430>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a21      	ldr	r2, [pc, #132]	; (8003e64 <HAL_DMA_Start_IT+0x4b0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d108      	bne.n	8003df6 <HAL_DMA_Start_IT+0x442>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	e012      	b.n	8003e1c <HAL_DMA_Start_IT+0x468>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e009      	b.n	8003e1c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40020010 	.word	0x40020010
 8003e2c:	40020028 	.word	0x40020028
 8003e30:	40020040 	.word	0x40020040
 8003e34:	40020058 	.word	0x40020058
 8003e38:	40020070 	.word	0x40020070
 8003e3c:	40020088 	.word	0x40020088
 8003e40:	400200a0 	.word	0x400200a0
 8003e44:	400200b8 	.word	0x400200b8
 8003e48:	40020410 	.word	0x40020410
 8003e4c:	40020428 	.word	0x40020428
 8003e50:	40020440 	.word	0x40020440
 8003e54:	40020458 	.word	0x40020458
 8003e58:	40020470 	.word	0x40020470
 8003e5c:	40020488 	.word	0x40020488
 8003e60:	400204a0 	.word	0x400204a0
 8003e64:	400204b8 	.word	0x400204b8
 8003e68:	58025408 	.word	0x58025408
 8003e6c:	5802541c 	.word	0x5802541c
 8003e70:	58025430 	.word	0x58025430
 8003e74:	58025444 	.word	0x58025444
 8003e78:	58025458 	.word	0x58025458
 8003e7c:	5802546c 	.word	0x5802546c
 8003e80:	58025480 	.word	0x58025480
 8003e84:	58025494 	.word	0x58025494

08003e88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e94:	4b67      	ldr	r3, [pc, #412]	; (8004034 <HAL_DMA_IRQHandler+0x1ac>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a67      	ldr	r2, [pc, #412]	; (8004038 <HAL_DMA_IRQHandler+0x1b0>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	0a9b      	lsrs	r3, r3, #10
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a5f      	ldr	r2, [pc, #380]	; (800403c <HAL_DMA_IRQHandler+0x1b4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d04a      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a5d      	ldr	r2, [pc, #372]	; (8004040 <HAL_DMA_IRQHandler+0x1b8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d045      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a5c      	ldr	r2, [pc, #368]	; (8004044 <HAL_DMA_IRQHandler+0x1bc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d040      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5a      	ldr	r2, [pc, #360]	; (8004048 <HAL_DMA_IRQHandler+0x1c0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d03b      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a59      	ldr	r2, [pc, #356]	; (800404c <HAL_DMA_IRQHandler+0x1c4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d036      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a57      	ldr	r2, [pc, #348]	; (8004050 <HAL_DMA_IRQHandler+0x1c8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d031      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a56      	ldr	r2, [pc, #344]	; (8004054 <HAL_DMA_IRQHandler+0x1cc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d02c      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a54      	ldr	r2, [pc, #336]	; (8004058 <HAL_DMA_IRQHandler+0x1d0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d027      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a53      	ldr	r2, [pc, #332]	; (800405c <HAL_DMA_IRQHandler+0x1d4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d022      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a51      	ldr	r2, [pc, #324]	; (8004060 <HAL_DMA_IRQHandler+0x1d8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a50      	ldr	r2, [pc, #320]	; (8004064 <HAL_DMA_IRQHandler+0x1dc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a4e      	ldr	r2, [pc, #312]	; (8004068 <HAL_DMA_IRQHandler+0x1e0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a4d      	ldr	r2, [pc, #308]	; (800406c <HAL_DMA_IRQHandler+0x1e4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00e      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a4b      	ldr	r2, [pc, #300]	; (8004070 <HAL_DMA_IRQHandler+0x1e8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a4a      	ldr	r2, [pc, #296]	; (8004074 <HAL_DMA_IRQHandler+0x1ec>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xd2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a48      	ldr	r2, [pc, #288]	; (8004078 <HAL_DMA_IRQHandler+0x1f0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_DMA_IRQHandler+0xd6>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_DMA_IRQHandler+0xd8>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 842b 	beq.w	80047bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	2208      	movs	r2, #8
 8003f70:	409a      	lsls	r2, r3
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80a2 	beq.w	80040c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2e      	ldr	r2, [pc, #184]	; (800403c <HAL_DMA_IRQHandler+0x1b4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d04a      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2d      	ldr	r2, [pc, #180]	; (8004040 <HAL_DMA_IRQHandler+0x1b8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d045      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <HAL_DMA_IRQHandler+0x1bc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d040      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <HAL_DMA_IRQHandler+0x1c0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d03b      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a28      	ldr	r2, [pc, #160]	; (800404c <HAL_DMA_IRQHandler+0x1c4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d036      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a27      	ldr	r2, [pc, #156]	; (8004050 <HAL_DMA_IRQHandler+0x1c8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d031      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a25      	ldr	r2, [pc, #148]	; (8004054 <HAL_DMA_IRQHandler+0x1cc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d02c      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a24      	ldr	r2, [pc, #144]	; (8004058 <HAL_DMA_IRQHandler+0x1d0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d027      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a22      	ldr	r2, [pc, #136]	; (800405c <HAL_DMA_IRQHandler+0x1d4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d022      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a21      	ldr	r2, [pc, #132]	; (8004060 <HAL_DMA_IRQHandler+0x1d8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d01d      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <HAL_DMA_IRQHandler+0x1dc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d018      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <HAL_DMA_IRQHandler+0x1e0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1c      	ldr	r2, [pc, #112]	; (800406c <HAL_DMA_IRQHandler+0x1e4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1b      	ldr	r2, [pc, #108]	; (8004070 <HAL_DMA_IRQHandler+0x1e8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_DMA_IRQHandler+0x1ec>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_DMA_IRQHandler+0x194>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_DMA_IRQHandler+0x1f0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d12f      	bne.n	800407c <HAL_DMA_IRQHandler+0x1f4>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf14      	ite	ne
 800402a:	2301      	movne	r3, #1
 800402c:	2300      	moveq	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	e02e      	b.n	8004090 <HAL_DMA_IRQHandler+0x208>
 8004032:	bf00      	nop
 8004034:	24000454 	.word	0x24000454
 8004038:	1b4e81b5 	.word	0x1b4e81b5
 800403c:	40020010 	.word	0x40020010
 8004040:	40020028 	.word	0x40020028
 8004044:	40020040 	.word	0x40020040
 8004048:	40020058 	.word	0x40020058
 800404c:	40020070 	.word	0x40020070
 8004050:	40020088 	.word	0x40020088
 8004054:	400200a0 	.word	0x400200a0
 8004058:	400200b8 	.word	0x400200b8
 800405c:	40020410 	.word	0x40020410
 8004060:	40020428 	.word	0x40020428
 8004064:	40020440 	.word	0x40020440
 8004068:	40020458 	.word	0x40020458
 800406c:	40020470 	.word	0x40020470
 8004070:	40020488 	.word	0x40020488
 8004074:	400204a0 	.word	0x400204a0
 8004078:	400204b8 	.word	0x400204b8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	bf14      	ite	ne
 800408a:	2301      	movne	r3, #1
 800408c:	2300      	moveq	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0204 	bic.w	r2, r2, #4
 80040a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2208      	movs	r2, #8
 80040ae:	409a      	lsls	r2, r3
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	fa22 f303 	lsr.w	r3, r2, r3
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d06e      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a69      	ldr	r2, [pc, #420]	; (8004280 <HAL_DMA_IRQHandler+0x3f8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04a      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a67      	ldr	r2, [pc, #412]	; (8004284 <HAL_DMA_IRQHandler+0x3fc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d045      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a66      	ldr	r2, [pc, #408]	; (8004288 <HAL_DMA_IRQHandler+0x400>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d040      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a64      	ldr	r2, [pc, #400]	; (800428c <HAL_DMA_IRQHandler+0x404>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d03b      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a63      	ldr	r2, [pc, #396]	; (8004290 <HAL_DMA_IRQHandler+0x408>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d036      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a61      	ldr	r2, [pc, #388]	; (8004294 <HAL_DMA_IRQHandler+0x40c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d031      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a60      	ldr	r2, [pc, #384]	; (8004298 <HAL_DMA_IRQHandler+0x410>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d02c      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a5e      	ldr	r2, [pc, #376]	; (800429c <HAL_DMA_IRQHandler+0x414>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d027      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a5d      	ldr	r2, [pc, #372]	; (80042a0 <HAL_DMA_IRQHandler+0x418>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a5b      	ldr	r2, [pc, #364]	; (80042a4 <HAL_DMA_IRQHandler+0x41c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a5a      	ldr	r2, [pc, #360]	; (80042a8 <HAL_DMA_IRQHandler+0x420>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a58      	ldr	r2, [pc, #352]	; (80042ac <HAL_DMA_IRQHandler+0x424>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a57      	ldr	r2, [pc, #348]	; (80042b0 <HAL_DMA_IRQHandler+0x428>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a55      	ldr	r2, [pc, #340]	; (80042b4 <HAL_DMA_IRQHandler+0x42c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a54      	ldr	r2, [pc, #336]	; (80042b8 <HAL_DMA_IRQHandler+0x430>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2ee>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a52      	ldr	r2, [pc, #328]	; (80042bc <HAL_DMA_IRQHandler+0x434>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d10a      	bne.n	800418c <HAL_DMA_IRQHandler+0x304>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e003      	b.n	8004194 <HAL_DMA_IRQHandler+0x30c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f043 0202 	orr.w	r2, r3, #2
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	2204      	movs	r2, #4
 80041be:	409a      	lsls	r2, r3
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 808f 	beq.w	80042e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <HAL_DMA_IRQHandler+0x3f8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d04a      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_DMA_IRQHandler+0x3fc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d045      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a29      	ldr	r2, [pc, #164]	; (8004288 <HAL_DMA_IRQHandler+0x400>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d040      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a27      	ldr	r2, [pc, #156]	; (800428c <HAL_DMA_IRQHandler+0x404>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d03b      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a26      	ldr	r2, [pc, #152]	; (8004290 <HAL_DMA_IRQHandler+0x408>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d036      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a24      	ldr	r2, [pc, #144]	; (8004294 <HAL_DMA_IRQHandler+0x40c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d031      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a23      	ldr	r2, [pc, #140]	; (8004298 <HAL_DMA_IRQHandler+0x410>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d02c      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a21      	ldr	r2, [pc, #132]	; (800429c <HAL_DMA_IRQHandler+0x414>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d027      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <HAL_DMA_IRQHandler+0x418>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d022      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <HAL_DMA_IRQHandler+0x41c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01d      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <HAL_DMA_IRQHandler+0x420>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d018      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <HAL_DMA_IRQHandler+0x424>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1a      	ldr	r2, [pc, #104]	; (80042b0 <HAL_DMA_IRQHandler+0x428>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00e      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <HAL_DMA_IRQHandler+0x42c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d009      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <HAL_DMA_IRQHandler+0x430>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d004      	beq.n	800426a <HAL_DMA_IRQHandler+0x3e2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a15      	ldr	r2, [pc, #84]	; (80042bc <HAL_DMA_IRQHandler+0x434>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12a      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x438>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e023      	b.n	80042c8 <HAL_DMA_IRQHandler+0x440>
 8004280:	40020010 	.word	0x40020010
 8004284:	40020028 	.word	0x40020028
 8004288:	40020040 	.word	0x40020040
 800428c:	40020058 	.word	0x40020058
 8004290:	40020070 	.word	0x40020070
 8004294:	40020088 	.word	0x40020088
 8004298:	400200a0 	.word	0x400200a0
 800429c:	400200b8 	.word	0x400200b8
 80042a0:	40020410 	.word	0x40020410
 80042a4:	40020428 	.word	0x40020428
 80042a8:	40020440 	.word	0x40020440
 80042ac:	40020458 	.word	0x40020458
 80042b0:	40020470 	.word	0x40020470
 80042b4:	40020488 	.word	0x40020488
 80042b8:	400204a0 	.word	0x400204a0
 80042bc:	400204b8 	.word	0x400204b8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2204      	movs	r2, #4
 80042d6:	409a      	lsls	r2, r3
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	f043 0204 	orr.w	r2, r3, #4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2210      	movs	r2, #16
 80042f2:	409a      	lsls	r2, r3
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80a6 	beq.w	800444a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a85      	ldr	r2, [pc, #532]	; (8004518 <HAL_DMA_IRQHandler+0x690>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d04a      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a83      	ldr	r2, [pc, #524]	; (800451c <HAL_DMA_IRQHandler+0x694>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d045      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a82      	ldr	r2, [pc, #520]	; (8004520 <HAL_DMA_IRQHandler+0x698>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d040      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a80      	ldr	r2, [pc, #512]	; (8004524 <HAL_DMA_IRQHandler+0x69c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d03b      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7f      	ldr	r2, [pc, #508]	; (8004528 <HAL_DMA_IRQHandler+0x6a0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d036      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a7d      	ldr	r2, [pc, #500]	; (800452c <HAL_DMA_IRQHandler+0x6a4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d031      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a7c      	ldr	r2, [pc, #496]	; (8004530 <HAL_DMA_IRQHandler+0x6a8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d02c      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a7a      	ldr	r2, [pc, #488]	; (8004534 <HAL_DMA_IRQHandler+0x6ac>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d027      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a79      	ldr	r2, [pc, #484]	; (8004538 <HAL_DMA_IRQHandler+0x6b0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d022      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a77      	ldr	r2, [pc, #476]	; (800453c <HAL_DMA_IRQHandler+0x6b4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01d      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a76      	ldr	r2, [pc, #472]	; (8004540 <HAL_DMA_IRQHandler+0x6b8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d018      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a74      	ldr	r2, [pc, #464]	; (8004544 <HAL_DMA_IRQHandler+0x6bc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a73      	ldr	r2, [pc, #460]	; (8004548 <HAL_DMA_IRQHandler+0x6c0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00e      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a71      	ldr	r2, [pc, #452]	; (800454c <HAL_DMA_IRQHandler+0x6c4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a70      	ldr	r2, [pc, #448]	; (8004550 <HAL_DMA_IRQHandler+0x6c8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <HAL_DMA_IRQHandler+0x516>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6e      	ldr	r2, [pc, #440]	; (8004554 <HAL_DMA_IRQHandler+0x6cc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10a      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x52c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e009      	b.n	80043c8 <HAL_DMA_IRQHandler+0x540>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bf14      	ite	ne
 80043c2:	2301      	movne	r3, #1
 80043c4:	2300      	moveq	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d03e      	beq.n	800444a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	2210      	movs	r2, #16
 80043d6:	409a      	lsls	r2, r3
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d018      	beq.n	800441c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d108      	bne.n	800440a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d024      	beq.n	800444a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
 8004408:	e01f      	b.n	800444a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01b      	beq.n	800444a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
 800441a:	e016      	b.n	800444a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0208 	bic.w	r2, r2, #8
 8004438:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2220      	movs	r2, #32
 8004454:	409a      	lsls	r2, r3
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8110 	beq.w	8004680 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2c      	ldr	r2, [pc, #176]	; (8004518 <HAL_DMA_IRQHandler+0x690>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d04a      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2b      	ldr	r2, [pc, #172]	; (800451c <HAL_DMA_IRQHandler+0x694>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d045      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a29      	ldr	r2, [pc, #164]	; (8004520 <HAL_DMA_IRQHandler+0x698>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d040      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a28      	ldr	r2, [pc, #160]	; (8004524 <HAL_DMA_IRQHandler+0x69c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d03b      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HAL_DMA_IRQHandler+0x6a0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d036      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a25      	ldr	r2, [pc, #148]	; (800452c <HAL_DMA_IRQHandler+0x6a4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d031      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a23      	ldr	r2, [pc, #140]	; (8004530 <HAL_DMA_IRQHandler+0x6a8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02c      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a22      	ldr	r2, [pc, #136]	; (8004534 <HAL_DMA_IRQHandler+0x6ac>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d027      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a20      	ldr	r2, [pc, #128]	; (8004538 <HAL_DMA_IRQHandler+0x6b0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d022      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1f      	ldr	r2, [pc, #124]	; (800453c <HAL_DMA_IRQHandler+0x6b4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d01d      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_DMA_IRQHandler+0x6b8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d018      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <HAL_DMA_IRQHandler+0x6bc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <HAL_DMA_IRQHandler+0x6c0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a19      	ldr	r2, [pc, #100]	; (800454c <HAL_DMA_IRQHandler+0x6c4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a17      	ldr	r2, [pc, #92]	; (8004550 <HAL_DMA_IRQHandler+0x6c8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <HAL_DMA_IRQHandler+0x678>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a16      	ldr	r2, [pc, #88]	; (8004554 <HAL_DMA_IRQHandler+0x6cc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d12b      	bne.n	8004558 <HAL_DMA_IRQHandler+0x6d0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf14      	ite	ne
 800450e:	2301      	movne	r3, #1
 8004510:	2300      	moveq	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	e02a      	b.n	800456c <HAL_DMA_IRQHandler+0x6e4>
 8004516:	bf00      	nop
 8004518:	40020010 	.word	0x40020010
 800451c:	40020028 	.word	0x40020028
 8004520:	40020040 	.word	0x40020040
 8004524:	40020058 	.word	0x40020058
 8004528:	40020070 	.word	0x40020070
 800452c:	40020088 	.word	0x40020088
 8004530:	400200a0 	.word	0x400200a0
 8004534:	400200b8 	.word	0x400200b8
 8004538:	40020410 	.word	0x40020410
 800453c:	40020428 	.word	0x40020428
 8004540:	40020440 	.word	0x40020440
 8004544:	40020458 	.word	0x40020458
 8004548:	40020470 	.word	0x40020470
 800454c:	40020488 	.word	0x40020488
 8004550:	400204a0 	.word	0x400204a0
 8004554:	400204b8 	.word	0x400204b8
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf14      	ite	ne
 8004566:	2301      	movne	r3, #1
 8004568:	2300      	moveq	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8087 	beq.w	8004680 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2220      	movs	r2, #32
 800457c:	409a      	lsls	r2, r3
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b04      	cmp	r3, #4
 800458c:	d139      	bne.n	8004602 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0216 	bic.w	r2, r2, #22
 800459c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <HAL_DMA_IRQHandler+0x736>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0208 	bic.w	r2, r2, #8
 80045cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	223f      	movs	r2, #63	; 0x3f
 80045d8:	409a      	lsls	r2, r3
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 834a 	beq.w	8004c8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4798      	blx	r3
          }
          return;
 8004600:	e344      	b.n	8004c8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d018      	beq.n	8004642 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d108      	bne.n	8004630 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	2b00      	cmp	r3, #0
 8004624:	d02c      	beq.n	8004680 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	4798      	blx	r3
 800462e:	e027      	b.n	8004680 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004634:	2b00      	cmp	r3, #0
 8004636:	d023      	beq.n	8004680 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
 8004640:	e01e      	b.n	8004680 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10f      	bne.n	8004670 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0210 	bic.w	r2, r2, #16
 800465e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8306 	beq.w	8004c96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8088 	beq.w	80047a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2204      	movs	r2, #4
 800469c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a7a      	ldr	r2, [pc, #488]	; (8004890 <HAL_DMA_IRQHandler+0xa08>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d04a      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a79      	ldr	r2, [pc, #484]	; (8004894 <HAL_DMA_IRQHandler+0xa0c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d045      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a77      	ldr	r2, [pc, #476]	; (8004898 <HAL_DMA_IRQHandler+0xa10>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d040      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a76      	ldr	r2, [pc, #472]	; (800489c <HAL_DMA_IRQHandler+0xa14>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d03b      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a74      	ldr	r2, [pc, #464]	; (80048a0 <HAL_DMA_IRQHandler+0xa18>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d036      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a73      	ldr	r2, [pc, #460]	; (80048a4 <HAL_DMA_IRQHandler+0xa1c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d031      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a71      	ldr	r2, [pc, #452]	; (80048a8 <HAL_DMA_IRQHandler+0xa20>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d02c      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a70      	ldr	r2, [pc, #448]	; (80048ac <HAL_DMA_IRQHandler+0xa24>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d027      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a6e      	ldr	r2, [pc, #440]	; (80048b0 <HAL_DMA_IRQHandler+0xa28>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d022      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a6d      	ldr	r2, [pc, #436]	; (80048b4 <HAL_DMA_IRQHandler+0xa2c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d01d      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a6b      	ldr	r2, [pc, #428]	; (80048b8 <HAL_DMA_IRQHandler+0xa30>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d018      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6a      	ldr	r2, [pc, #424]	; (80048bc <HAL_DMA_IRQHandler+0xa34>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d013      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a68      	ldr	r2, [pc, #416]	; (80048c0 <HAL_DMA_IRQHandler+0xa38>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00e      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a67      	ldr	r2, [pc, #412]	; (80048c4 <HAL_DMA_IRQHandler+0xa3c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d009      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a65      	ldr	r2, [pc, #404]	; (80048c8 <HAL_DMA_IRQHandler+0xa40>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_DMA_IRQHandler+0x8b8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a64      	ldr	r2, [pc, #400]	; (80048cc <HAL_DMA_IRQHandler+0xa44>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d108      	bne.n	8004752 <HAL_DMA_IRQHandler+0x8ca>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e007      	b.n	8004762 <HAL_DMA_IRQHandler+0x8da>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476a:	429a      	cmp	r2, r3
 800476c:	d307      	bcc.n	800477e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f2      	bne.n	8004762 <HAL_DMA_IRQHandler+0x8da>
 800477c:	e000      	b.n	8004780 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800477e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d004      	beq.n	8004798 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2203      	movs	r2, #3
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004796:	e003      	b.n	80047a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8272 	beq.w	8004c96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	4798      	blx	r3
 80047ba:	e26c      	b.n	8004c96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a43      	ldr	r2, [pc, #268]	; (80048d0 <HAL_DMA_IRQHandler+0xa48>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <HAL_DMA_IRQHandler+0x984>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a42      	ldr	r2, [pc, #264]	; (80048d4 <HAL_DMA_IRQHandler+0xa4c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d01d      	beq.n	800480c <HAL_DMA_IRQHandler+0x984>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <HAL_DMA_IRQHandler+0xa50>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <HAL_DMA_IRQHandler+0x984>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a3f      	ldr	r2, [pc, #252]	; (80048dc <HAL_DMA_IRQHandler+0xa54>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <HAL_DMA_IRQHandler+0x984>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3d      	ldr	r2, [pc, #244]	; (80048e0 <HAL_DMA_IRQHandler+0xa58>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <HAL_DMA_IRQHandler+0x984>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3c      	ldr	r2, [pc, #240]	; (80048e4 <HAL_DMA_IRQHandler+0xa5c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_DMA_IRQHandler+0x984>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a3a      	ldr	r2, [pc, #232]	; (80048e8 <HAL_DMA_IRQHandler+0xa60>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_DMA_IRQHandler+0x984>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a39      	ldr	r2, [pc, #228]	; (80048ec <HAL_DMA_IRQHandler+0xa64>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <HAL_DMA_IRQHandler+0x988>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_DMA_IRQHandler+0x98a>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 823f 	beq.w	8004c96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2204      	movs	r2, #4
 800482a:	409a      	lsls	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80cd 	beq.w	80049d0 <HAL_DMA_IRQHandler+0xb48>
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80c7 	beq.w	80049d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2204      	movs	r2, #4
 800484c:	409a      	lsls	r2, r3
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d049      	beq.n	80048f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8210 	beq.w	8004c90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004878:	e20a      	b.n	8004c90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8206 	beq.w	8004c90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800488c:	e200      	b.n	8004c90 <HAL_DMA_IRQHandler+0xe08>
 800488e:	bf00      	nop
 8004890:	40020010 	.word	0x40020010
 8004894:	40020028 	.word	0x40020028
 8004898:	40020040 	.word	0x40020040
 800489c:	40020058 	.word	0x40020058
 80048a0:	40020070 	.word	0x40020070
 80048a4:	40020088 	.word	0x40020088
 80048a8:	400200a0 	.word	0x400200a0
 80048ac:	400200b8 	.word	0x400200b8
 80048b0:	40020410 	.word	0x40020410
 80048b4:	40020428 	.word	0x40020428
 80048b8:	40020440 	.word	0x40020440
 80048bc:	40020458 	.word	0x40020458
 80048c0:	40020470 	.word	0x40020470
 80048c4:	40020488 	.word	0x40020488
 80048c8:	400204a0 	.word	0x400204a0
 80048cc:	400204b8 	.word	0x400204b8
 80048d0:	58025408 	.word	0x58025408
 80048d4:	5802541c 	.word	0x5802541c
 80048d8:	58025430 	.word	0x58025430
 80048dc:	58025444 	.word	0x58025444
 80048e0:	58025458 	.word	0x58025458
 80048e4:	5802546c 	.word	0x5802546c
 80048e8:	58025480 	.word	0x58025480
 80048ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d160      	bne.n	80049bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a8c      	ldr	r2, [pc, #560]	; (8004b30 <HAL_DMA_IRQHandler+0xca8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d04a      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a8a      	ldr	r2, [pc, #552]	; (8004b34 <HAL_DMA_IRQHandler+0xcac>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d045      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a89      	ldr	r2, [pc, #548]	; (8004b38 <HAL_DMA_IRQHandler+0xcb0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d040      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a87      	ldr	r2, [pc, #540]	; (8004b3c <HAL_DMA_IRQHandler+0xcb4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d03b      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a86      	ldr	r2, [pc, #536]	; (8004b40 <HAL_DMA_IRQHandler+0xcb8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d036      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a84      	ldr	r2, [pc, #528]	; (8004b44 <HAL_DMA_IRQHandler+0xcbc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d031      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a83      	ldr	r2, [pc, #524]	; (8004b48 <HAL_DMA_IRQHandler+0xcc0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d02c      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a81      	ldr	r2, [pc, #516]	; (8004b4c <HAL_DMA_IRQHandler+0xcc4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d027      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a80      	ldr	r2, [pc, #512]	; (8004b50 <HAL_DMA_IRQHandler+0xcc8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d022      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a7e      	ldr	r2, [pc, #504]	; (8004b54 <HAL_DMA_IRQHandler+0xccc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01d      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a7d      	ldr	r2, [pc, #500]	; (8004b58 <HAL_DMA_IRQHandler+0xcd0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d018      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a7b      	ldr	r2, [pc, #492]	; (8004b5c <HAL_DMA_IRQHandler+0xcd4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7a      	ldr	r2, [pc, #488]	; (8004b60 <HAL_DMA_IRQHandler+0xcd8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00e      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a78      	ldr	r2, [pc, #480]	; (8004b64 <HAL_DMA_IRQHandler+0xcdc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a77      	ldr	r2, [pc, #476]	; (8004b68 <HAL_DMA_IRQHandler+0xce0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d004      	beq.n	800499a <HAL_DMA_IRQHandler+0xb12>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a75      	ldr	r2, [pc, #468]	; (8004b6c <HAL_DMA_IRQHandler+0xce4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <HAL_DMA_IRQHandler+0xb24>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0208 	bic.w	r2, r2, #8
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e007      	b.n	80049bc <HAL_DMA_IRQHandler+0xb34>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0204 	bic.w	r2, r2, #4
 80049ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8165 	beq.w	8004c90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ce:	e15f      	b.n	8004c90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2202      	movs	r2, #2
 80049da:	409a      	lsls	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80c5 	beq.w	8004b70 <HAL_DMA_IRQHandler+0xce8>
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80bf 	beq.w	8004b70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	2202      	movs	r2, #2
 80049fc:	409a      	lsls	r2, r3
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d018      	beq.n	8004a3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 813a 	beq.w	8004c94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a28:	e134      	b.n	8004c94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8130 	beq.w	8004c94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a3c:	e12a      	b.n	8004c94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d168      	bne.n	8004b1a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a38      	ldr	r2, [pc, #224]	; (8004b30 <HAL_DMA_IRQHandler+0xca8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d04a      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a37      	ldr	r2, [pc, #220]	; (8004b34 <HAL_DMA_IRQHandler+0xcac>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d045      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a35      	ldr	r2, [pc, #212]	; (8004b38 <HAL_DMA_IRQHandler+0xcb0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d040      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a34      	ldr	r2, [pc, #208]	; (8004b3c <HAL_DMA_IRQHandler+0xcb4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d03b      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a32      	ldr	r2, [pc, #200]	; (8004b40 <HAL_DMA_IRQHandler+0xcb8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d036      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a31      	ldr	r2, [pc, #196]	; (8004b44 <HAL_DMA_IRQHandler+0xcbc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d031      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2f      	ldr	r2, [pc, #188]	; (8004b48 <HAL_DMA_IRQHandler+0xcc0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d02c      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2e      	ldr	r2, [pc, #184]	; (8004b4c <HAL_DMA_IRQHandler+0xcc4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d027      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <HAL_DMA_IRQHandler+0xcc8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d022      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2b      	ldr	r2, [pc, #172]	; (8004b54 <HAL_DMA_IRQHandler+0xccc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d01d      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a29      	ldr	r2, [pc, #164]	; (8004b58 <HAL_DMA_IRQHandler+0xcd0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d018      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a28      	ldr	r2, [pc, #160]	; (8004b5c <HAL_DMA_IRQHandler+0xcd4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d013      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <HAL_DMA_IRQHandler+0xcd8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a25      	ldr	r2, [pc, #148]	; (8004b64 <HAL_DMA_IRQHandler+0xcdc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a23      	ldr	r2, [pc, #140]	; (8004b68 <HAL_DMA_IRQHandler+0xce0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xc60>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <HAL_DMA_IRQHandler+0xce4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d108      	bne.n	8004afa <HAL_DMA_IRQHandler+0xc72>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0214 	bic.w	r2, r2, #20
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e007      	b.n	8004b0a <HAL_DMA_IRQHandler+0xc82>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 020a 	bic.w	r2, r2, #10
 8004b08:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80b8 	beq.w	8004c94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b2c:	e0b2      	b.n	8004c94 <HAL_DMA_IRQHandler+0xe0c>
 8004b2e:	bf00      	nop
 8004b30:	40020010 	.word	0x40020010
 8004b34:	40020028 	.word	0x40020028
 8004b38:	40020040 	.word	0x40020040
 8004b3c:	40020058 	.word	0x40020058
 8004b40:	40020070 	.word	0x40020070
 8004b44:	40020088 	.word	0x40020088
 8004b48:	400200a0 	.word	0x400200a0
 8004b4c:	400200b8 	.word	0x400200b8
 8004b50:	40020410 	.word	0x40020410
 8004b54:	40020428 	.word	0x40020428
 8004b58:	40020440 	.word	0x40020440
 8004b5c:	40020458 	.word	0x40020458
 8004b60:	40020470 	.word	0x40020470
 8004b64:	40020488 	.word	0x40020488
 8004b68:	400204a0 	.word	0x400204a0
 8004b6c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	2208      	movs	r2, #8
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8088 	beq.w	8004c96 <HAL_DMA_IRQHandler+0xe0e>
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8082 	beq.w	8004c96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a41      	ldr	r2, [pc, #260]	; (8004c9c <HAL_DMA_IRQHandler+0xe14>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d04a      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a3f      	ldr	r2, [pc, #252]	; (8004ca0 <HAL_DMA_IRQHandler+0xe18>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d045      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3e      	ldr	r2, [pc, #248]	; (8004ca4 <HAL_DMA_IRQHandler+0xe1c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d040      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3c      	ldr	r2, [pc, #240]	; (8004ca8 <HAL_DMA_IRQHandler+0xe20>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d03b      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3b      	ldr	r2, [pc, #236]	; (8004cac <HAL_DMA_IRQHandler+0xe24>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d036      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a39      	ldr	r2, [pc, #228]	; (8004cb0 <HAL_DMA_IRQHandler+0xe28>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d031      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a38      	ldr	r2, [pc, #224]	; (8004cb4 <HAL_DMA_IRQHandler+0xe2c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d02c      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a36      	ldr	r2, [pc, #216]	; (8004cb8 <HAL_DMA_IRQHandler+0xe30>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d027      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a35      	ldr	r2, [pc, #212]	; (8004cbc <HAL_DMA_IRQHandler+0xe34>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d022      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a33      	ldr	r2, [pc, #204]	; (8004cc0 <HAL_DMA_IRQHandler+0xe38>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01d      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a32      	ldr	r2, [pc, #200]	; (8004cc4 <HAL_DMA_IRQHandler+0xe3c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d018      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a30      	ldr	r2, [pc, #192]	; (8004cc8 <HAL_DMA_IRQHandler+0xe40>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2f      	ldr	r2, [pc, #188]	; (8004ccc <HAL_DMA_IRQHandler+0xe44>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2d      	ldr	r2, [pc, #180]	; (8004cd0 <HAL_DMA_IRQHandler+0xe48>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2c      	ldr	r2, [pc, #176]	; (8004cd4 <HAL_DMA_IRQHandler+0xe4c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xdaa>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a2a      	ldr	r2, [pc, #168]	; (8004cd8 <HAL_DMA_IRQHandler+0xe50>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <HAL_DMA_IRQHandler+0xdbc>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 021c 	bic.w	r2, r2, #28
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e007      	b.n	8004c54 <HAL_DMA_IRQHandler+0xdcc>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 020e 	bic.w	r2, r2, #14
 8004c52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	4798      	blx	r3
 8004c8a:	e004      	b.n	8004c96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c8c:	bf00      	nop
 8004c8e:	e002      	b.n	8004c96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c96:	3728      	adds	r7, #40	; 0x28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40020010 	.word	0x40020010
 8004ca0:	40020028 	.word	0x40020028
 8004ca4:	40020040 	.word	0x40020040
 8004ca8:	40020058 	.word	0x40020058
 8004cac:	40020070 	.word	0x40020070
 8004cb0:	40020088 	.word	0x40020088
 8004cb4:	400200a0 	.word	0x400200a0
 8004cb8:	400200b8 	.word	0x400200b8
 8004cbc:	40020410 	.word	0x40020410
 8004cc0:	40020428 	.word	0x40020428
 8004cc4:	40020440 	.word	0x40020440
 8004cc8:	40020458 	.word	0x40020458
 8004ccc:	40020470 	.word	0x40020470
 8004cd0:	40020488 	.word	0x40020488
 8004cd4:	400204a0 	.word	0x400204a0
 8004cd8:	400204b8 	.word	0x400204b8

08004cdc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a84      	ldr	r2, [pc, #528]	; (8004f24 <DMA_SetConfig+0x230>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d072      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a82      	ldr	r2, [pc, #520]	; (8004f28 <DMA_SetConfig+0x234>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d06d      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a81      	ldr	r2, [pc, #516]	; (8004f2c <DMA_SetConfig+0x238>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d068      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a7f      	ldr	r2, [pc, #508]	; (8004f30 <DMA_SetConfig+0x23c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d063      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a7e      	ldr	r2, [pc, #504]	; (8004f34 <DMA_SetConfig+0x240>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d05e      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a7c      	ldr	r2, [pc, #496]	; (8004f38 <DMA_SetConfig+0x244>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d059      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7b      	ldr	r2, [pc, #492]	; (8004f3c <DMA_SetConfig+0x248>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d054      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a79      	ldr	r2, [pc, #484]	; (8004f40 <DMA_SetConfig+0x24c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d04f      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a78      	ldr	r2, [pc, #480]	; (8004f44 <DMA_SetConfig+0x250>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d04a      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a76      	ldr	r2, [pc, #472]	; (8004f48 <DMA_SetConfig+0x254>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d045      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a75      	ldr	r2, [pc, #468]	; (8004f4c <DMA_SetConfig+0x258>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d040      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a73      	ldr	r2, [pc, #460]	; (8004f50 <DMA_SetConfig+0x25c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d03b      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a72      	ldr	r2, [pc, #456]	; (8004f54 <DMA_SetConfig+0x260>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d036      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a70      	ldr	r2, [pc, #448]	; (8004f58 <DMA_SetConfig+0x264>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d031      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6f      	ldr	r2, [pc, #444]	; (8004f5c <DMA_SetConfig+0x268>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d02c      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a6d      	ldr	r2, [pc, #436]	; (8004f60 <DMA_SetConfig+0x26c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d027      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a6c      	ldr	r2, [pc, #432]	; (8004f64 <DMA_SetConfig+0x270>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d022      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6a      	ldr	r2, [pc, #424]	; (8004f68 <DMA_SetConfig+0x274>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01d      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a69      	ldr	r2, [pc, #420]	; (8004f6c <DMA_SetConfig+0x278>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d018      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a67      	ldr	r2, [pc, #412]	; (8004f70 <DMA_SetConfig+0x27c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a66      	ldr	r2, [pc, #408]	; (8004f74 <DMA_SetConfig+0x280>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a64      	ldr	r2, [pc, #400]	; (8004f78 <DMA_SetConfig+0x284>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d009      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a63      	ldr	r2, [pc, #396]	; (8004f7c <DMA_SetConfig+0x288>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <DMA_SetConfig+0x10a>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a61      	ldr	r2, [pc, #388]	; (8004f80 <DMA_SetConfig+0x28c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d101      	bne.n	8004e02 <DMA_SetConfig+0x10e>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <DMA_SetConfig+0x110>
 8004e02:	2300      	movs	r3, #0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00d      	beq.n	8004e24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d004      	beq.n	8004e24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a3e      	ldr	r2, [pc, #248]	; (8004f24 <DMA_SetConfig+0x230>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d04a      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a3d      	ldr	r2, [pc, #244]	; (8004f28 <DMA_SetConfig+0x234>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d045      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3b      	ldr	r2, [pc, #236]	; (8004f2c <DMA_SetConfig+0x238>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d040      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a3a      	ldr	r2, [pc, #232]	; (8004f30 <DMA_SetConfig+0x23c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d03b      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a38      	ldr	r2, [pc, #224]	; (8004f34 <DMA_SetConfig+0x240>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d036      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a37      	ldr	r2, [pc, #220]	; (8004f38 <DMA_SetConfig+0x244>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d031      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a35      	ldr	r2, [pc, #212]	; (8004f3c <DMA_SetConfig+0x248>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d02c      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a34      	ldr	r2, [pc, #208]	; (8004f40 <DMA_SetConfig+0x24c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d027      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a32      	ldr	r2, [pc, #200]	; (8004f44 <DMA_SetConfig+0x250>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d022      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a31      	ldr	r2, [pc, #196]	; (8004f48 <DMA_SetConfig+0x254>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d01d      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a2f      	ldr	r2, [pc, #188]	; (8004f4c <DMA_SetConfig+0x258>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d018      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a2e      	ldr	r2, [pc, #184]	; (8004f50 <DMA_SetConfig+0x25c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d013      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a2c      	ldr	r2, [pc, #176]	; (8004f54 <DMA_SetConfig+0x260>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00e      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2b      	ldr	r2, [pc, #172]	; (8004f58 <DMA_SetConfig+0x264>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d009      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <DMA_SetConfig+0x268>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <DMA_SetConfig+0x1d0>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a28      	ldr	r2, [pc, #160]	; (8004f60 <DMA_SetConfig+0x26c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d101      	bne.n	8004ec8 <DMA_SetConfig+0x1d4>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <DMA_SetConfig+0x1d6>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d05a      	beq.n	8004f84 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	223f      	movs	r2, #63	; 0x3f
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004eec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	d108      	bne.n	8004f10 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f0e:	e087      	b.n	8005020 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]
}
 8004f20:	e07e      	b.n	8005020 <DMA_SetConfig+0x32c>
 8004f22:	bf00      	nop
 8004f24:	40020010 	.word	0x40020010
 8004f28:	40020028 	.word	0x40020028
 8004f2c:	40020040 	.word	0x40020040
 8004f30:	40020058 	.word	0x40020058
 8004f34:	40020070 	.word	0x40020070
 8004f38:	40020088 	.word	0x40020088
 8004f3c:	400200a0 	.word	0x400200a0
 8004f40:	400200b8 	.word	0x400200b8
 8004f44:	40020410 	.word	0x40020410
 8004f48:	40020428 	.word	0x40020428
 8004f4c:	40020440 	.word	0x40020440
 8004f50:	40020458 	.word	0x40020458
 8004f54:	40020470 	.word	0x40020470
 8004f58:	40020488 	.word	0x40020488
 8004f5c:	400204a0 	.word	0x400204a0
 8004f60:	400204b8 	.word	0x400204b8
 8004f64:	58025408 	.word	0x58025408
 8004f68:	5802541c 	.word	0x5802541c
 8004f6c:	58025430 	.word	0x58025430
 8004f70:	58025444 	.word	0x58025444
 8004f74:	58025458 	.word	0x58025458
 8004f78:	5802546c 	.word	0x5802546c
 8004f7c:	58025480 	.word	0x58025480
 8004f80:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a28      	ldr	r2, [pc, #160]	; (800502c <DMA_SetConfig+0x338>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d022      	beq.n	8004fd4 <DMA_SetConfig+0x2e0>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a27      	ldr	r2, [pc, #156]	; (8005030 <DMA_SetConfig+0x33c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d01d      	beq.n	8004fd4 <DMA_SetConfig+0x2e0>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a25      	ldr	r2, [pc, #148]	; (8005034 <DMA_SetConfig+0x340>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d018      	beq.n	8004fd4 <DMA_SetConfig+0x2e0>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a24      	ldr	r2, [pc, #144]	; (8005038 <DMA_SetConfig+0x344>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d013      	beq.n	8004fd4 <DMA_SetConfig+0x2e0>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a22      	ldr	r2, [pc, #136]	; (800503c <DMA_SetConfig+0x348>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00e      	beq.n	8004fd4 <DMA_SetConfig+0x2e0>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a21      	ldr	r2, [pc, #132]	; (8005040 <DMA_SetConfig+0x34c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d009      	beq.n	8004fd4 <DMA_SetConfig+0x2e0>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <DMA_SetConfig+0x350>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d004      	beq.n	8004fd4 <DMA_SetConfig+0x2e0>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <DMA_SetConfig+0x354>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d101      	bne.n	8004fd8 <DMA_SetConfig+0x2e4>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <DMA_SetConfig+0x2e6>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d020      	beq.n	8005020 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b40      	cmp	r3, #64	; 0x40
 8004ffc:	d108      	bne.n	8005010 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	60da      	str	r2, [r3, #12]
}
 800500e:	e007      	b.n	8005020 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	60da      	str	r2, [r3, #12]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	58025408 	.word	0x58025408
 8005030:	5802541c 	.word	0x5802541c
 8005034:	58025430 	.word	0x58025430
 8005038:	58025444 	.word	0x58025444
 800503c:	58025458 	.word	0x58025458
 8005040:	5802546c 	.word	0x5802546c
 8005044:	58025480 	.word	0x58025480
 8005048:	58025494 	.word	0x58025494

0800504c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a42      	ldr	r2, [pc, #264]	; (8005164 <DMA_CalcBaseAndBitshift+0x118>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d04a      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a41      	ldr	r2, [pc, #260]	; (8005168 <DMA_CalcBaseAndBitshift+0x11c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d045      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a3f      	ldr	r2, [pc, #252]	; (800516c <DMA_CalcBaseAndBitshift+0x120>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d040      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a3e      	ldr	r2, [pc, #248]	; (8005170 <DMA_CalcBaseAndBitshift+0x124>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d03b      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a3c      	ldr	r2, [pc, #240]	; (8005174 <DMA_CalcBaseAndBitshift+0x128>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d036      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a3b      	ldr	r2, [pc, #236]	; (8005178 <DMA_CalcBaseAndBitshift+0x12c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d031      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a39      	ldr	r2, [pc, #228]	; (800517c <DMA_CalcBaseAndBitshift+0x130>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d02c      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a38      	ldr	r2, [pc, #224]	; (8005180 <DMA_CalcBaseAndBitshift+0x134>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d027      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a36      	ldr	r2, [pc, #216]	; (8005184 <DMA_CalcBaseAndBitshift+0x138>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d022      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a35      	ldr	r2, [pc, #212]	; (8005188 <DMA_CalcBaseAndBitshift+0x13c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d01d      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a33      	ldr	r2, [pc, #204]	; (800518c <DMA_CalcBaseAndBitshift+0x140>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d018      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a32      	ldr	r2, [pc, #200]	; (8005190 <DMA_CalcBaseAndBitshift+0x144>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d013      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a30      	ldr	r2, [pc, #192]	; (8005194 <DMA_CalcBaseAndBitshift+0x148>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00e      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a2f      	ldr	r2, [pc, #188]	; (8005198 <DMA_CalcBaseAndBitshift+0x14c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a2d      	ldr	r2, [pc, #180]	; (800519c <DMA_CalcBaseAndBitshift+0x150>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <DMA_CalcBaseAndBitshift+0xa8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a2c      	ldr	r2, [pc, #176]	; (80051a0 <DMA_CalcBaseAndBitshift+0x154>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d101      	bne.n	80050f8 <DMA_CalcBaseAndBitshift+0xac>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <DMA_CalcBaseAndBitshift+0xae>
 80050f8:	2300      	movs	r3, #0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d024      	beq.n	8005148 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	3b10      	subs	r3, #16
 8005106:	4a27      	ldr	r2, [pc, #156]	; (80051a4 <DMA_CalcBaseAndBitshift+0x158>)
 8005108:	fba2 2303 	umull	r2, r3, r2, r3
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	4a24      	ldr	r2, [pc, #144]	; (80051a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005118:	5cd3      	ldrb	r3, [r2, r3]
 800511a:	461a      	mov	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b03      	cmp	r3, #3
 8005124:	d908      	bls.n	8005138 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	4b1f      	ldr	r3, [pc, #124]	; (80051ac <DMA_CalcBaseAndBitshift+0x160>)
 800512e:	4013      	ands	r3, r2
 8005130:	1d1a      	adds	r2, r3, #4
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	659a      	str	r2, [r3, #88]	; 0x58
 8005136:	e00d      	b.n	8005154 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <DMA_CalcBaseAndBitshift+0x160>)
 8005140:	4013      	ands	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6593      	str	r3, [r2, #88]	; 0x58
 8005146:	e005      	b.n	8005154 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	40020010 	.word	0x40020010
 8005168:	40020028 	.word	0x40020028
 800516c:	40020040 	.word	0x40020040
 8005170:	40020058 	.word	0x40020058
 8005174:	40020070 	.word	0x40020070
 8005178:	40020088 	.word	0x40020088
 800517c:	400200a0 	.word	0x400200a0
 8005180:	400200b8 	.word	0x400200b8
 8005184:	40020410 	.word	0x40020410
 8005188:	40020428 	.word	0x40020428
 800518c:	40020440 	.word	0x40020440
 8005190:	40020458 	.word	0x40020458
 8005194:	40020470 	.word	0x40020470
 8005198:	40020488 	.word	0x40020488
 800519c:	400204a0 	.word	0x400204a0
 80051a0:	400204b8 	.word	0x400204b8
 80051a4:	aaaaaaab 	.word	0xaaaaaaab
 80051a8:	0800ea94 	.word	0x0800ea94
 80051ac:	fffffc00 	.word	0xfffffc00

080051b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d120      	bne.n	8005206 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d858      	bhi.n	800527e <DMA_CheckFifoParam+0xce>
 80051cc:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <DMA_CheckFifoParam+0x24>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	080051e5 	.word	0x080051e5
 80051d8:	080051f7 	.word	0x080051f7
 80051dc:	080051e5 	.word	0x080051e5
 80051e0:	0800527f 	.word	0x0800527f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d048      	beq.n	8005282 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051f4:	e045      	b.n	8005282 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051fe:	d142      	bne.n	8005286 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005204:	e03f      	b.n	8005286 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520e:	d123      	bne.n	8005258 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	2b03      	cmp	r3, #3
 8005216:	d838      	bhi.n	800528a <DMA_CheckFifoParam+0xda>
 8005218:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <DMA_CheckFifoParam+0x70>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	08005231 	.word	0x08005231
 8005224:	08005237 	.word	0x08005237
 8005228:	08005231 	.word	0x08005231
 800522c:	08005249 	.word	0x08005249
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
        break;
 8005234:	e030      	b.n	8005298 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d025      	beq.n	800528e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005246:	e022      	b.n	800528e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005250:	d11f      	bne.n	8005292 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005256:	e01c      	b.n	8005292 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	2b02      	cmp	r3, #2
 800525e:	d902      	bls.n	8005266 <DMA_CheckFifoParam+0xb6>
 8005260:	2b03      	cmp	r3, #3
 8005262:	d003      	beq.n	800526c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005264:	e018      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
        break;
 800526a:	e015      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00e      	beq.n	8005296 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
    break;
 800527c:	e00b      	b.n	8005296 <DMA_CheckFifoParam+0xe6>
        break;
 800527e:	bf00      	nop
 8005280:	e00a      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
        break;
 8005282:	bf00      	nop
 8005284:	e008      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
        break;
 8005286:	bf00      	nop
 8005288:	e006      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
        break;
 800528a:	bf00      	nop
 800528c:	e004      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
        break;
 800528e:	bf00      	nop
 8005290:	e002      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
        break;
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
    break;
 8005296:	bf00      	nop
    }
  }

  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop

080052a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a38      	ldr	r2, [pc, #224]	; (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d022      	beq.n	8005306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a36      	ldr	r2, [pc, #216]	; (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01d      	beq.n	8005306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a35      	ldr	r2, [pc, #212]	; (80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d018      	beq.n	8005306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a33      	ldr	r2, [pc, #204]	; (80053a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a32      	ldr	r2, [pc, #200]	; (80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00e      	beq.n	8005306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a30      	ldr	r2, [pc, #192]	; (80053b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d009      	beq.n	8005306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a2f      	ldr	r2, [pc, #188]	; (80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d004      	beq.n	8005306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a2d      	ldr	r2, [pc, #180]	; (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d101      	bne.n	800530a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800530a:	2300      	movs	r3, #0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	3b08      	subs	r3, #8
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	461a      	mov	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005334:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	2201      	movs	r2, #1
 800533e:	409a      	lsls	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005344:	e024      	b.n	8005390 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	3b10      	subs	r3, #16
 800534e:	4a1e      	ldr	r2, [pc, #120]	; (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d806      	bhi.n	800536e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d902      	bls.n	800536e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3308      	adds	r3, #8
 800536c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4b18      	ldr	r3, [pc, #96]	; (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	461a      	mov	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005380:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	2201      	movs	r2, #1
 800538a:	409a      	lsls	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	58025408 	.word	0x58025408
 80053a0:	5802541c 	.word	0x5802541c
 80053a4:	58025430 	.word	0x58025430
 80053a8:	58025444 	.word	0x58025444
 80053ac:	58025458 	.word	0x58025458
 80053b0:	5802546c 	.word	0x5802546c
 80053b4:	58025480 	.word	0x58025480
 80053b8:	58025494 	.word	0x58025494
 80053bc:	cccccccd 	.word	0xcccccccd
 80053c0:	16009600 	.word	0x16009600
 80053c4:	58025880 	.word	0x58025880
 80053c8:	aaaaaaab 	.word	0xaaaaaaab
 80053cc:	400204b8 	.word	0x400204b8
 80053d0:	4002040f 	.word	0x4002040f
 80053d4:	10008200 	.word	0x10008200
 80053d8:	40020880 	.word	0x40020880

080053dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d04a      	beq.n	8005488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d847      	bhi.n	8005488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a25      	ldr	r2, [pc, #148]	; (8005494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d022      	beq.n	8005448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a24      	ldr	r2, [pc, #144]	; (8005498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d01d      	beq.n	8005448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a22      	ldr	r2, [pc, #136]	; (800549c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d013      	beq.n	8005448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d101      	bne.n	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4b17      	ldr	r3, [pc, #92]	; (80054b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005464:	671a      	str	r2, [r3, #112]	; 0x70
 8005466:	e009      	b.n	800547c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800546c:	4413      	add	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	461a      	mov	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a11      	ldr	r2, [pc, #68]	; (80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800547a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3b01      	subs	r3, #1
 8005480:	2201      	movs	r2, #1
 8005482:	409a      	lsls	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005488:	bf00      	nop
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	58025408 	.word	0x58025408
 8005498:	5802541c 	.word	0x5802541c
 800549c:	58025430 	.word	0x58025430
 80054a0:	58025444 	.word	0x58025444
 80054a4:	58025458 	.word	0x58025458
 80054a8:	5802546c 	.word	0x5802546c
 80054ac:	58025480 	.word	0x58025480
 80054b0:	58025494 	.word	0x58025494
 80054b4:	1600963f 	.word	0x1600963f
 80054b8:	58025940 	.word	0x58025940
 80054bc:	1000823f 	.word	0x1000823f
 80054c0:	40020940 	.word	0x40020940

080054c4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	7a1b      	ldrb	r3, [r3, #8]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d155      	bne.n	800558a <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a4b      	ldr	r2, [pc, #300]	; (8005610 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d049      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a49      	ldr	r2, [pc, #292]	; (8005614 <HAL_DMAEx_ConfigMuxSync+0x150>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d044      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a48      	ldr	r2, [pc, #288]	; (8005618 <HAL_DMAEx_ConfigMuxSync+0x154>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d03f      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a46      	ldr	r2, [pc, #280]	; (800561c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d03a      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a45      	ldr	r2, [pc, #276]	; (8005620 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d035      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a43      	ldr	r2, [pc, #268]	; (8005624 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d030      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a42      	ldr	r2, [pc, #264]	; (8005628 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d02b      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a40      	ldr	r2, [pc, #256]	; (800562c <HAL_DMAEx_ConfigMuxSync+0x168>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d026      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a3f      	ldr	r2, [pc, #252]	; (8005630 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d021      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a3d      	ldr	r2, [pc, #244]	; (8005634 <HAL_DMAEx_ConfigMuxSync+0x170>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01c      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a3c      	ldr	r2, [pc, #240]	; (8005638 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d017      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a3a      	ldr	r2, [pc, #232]	; (800563c <HAL_DMAEx_ConfigMuxSync+0x178>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d012      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a39      	ldr	r2, [pc, #228]	; (8005640 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00d      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a37      	ldr	r2, [pc, #220]	; (8005644 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d008      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a36      	ldr	r2, [pc, #216]	; (8005648 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a34      	ldr	r2, [pc, #208]	; (800564c <HAL_DMAEx_ConfigMuxSync+0x188>)
 800557a:	4293      	cmp	r3, r2
 800557c:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	d131      	bne.n	80055fa <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_DMAEx_ConfigMuxSync+0xe0>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e02f      	b.n	8005604 <HAL_DMAEx_ConfigMuxSync+0x140>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b6:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 80055ba:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	b2d9      	uxtb	r1, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	061a      	lsls	r2, r3, #24
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	04db      	lsls	r3, r3, #19
 80055d0:	431a      	orrs	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	7a1b      	ldrb	r3, [r3, #8]
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	431a      	orrs	r2, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	7a5b      	ldrb	r3, [r3, #9]
 80055e2:	025b      	lsls	r3, r3, #9
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ea:	430a      	orrs	r2, r1
 80055ec:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e004      	b.n	8005604 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005600:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
  }
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40020010 	.word	0x40020010
 8005614:	40020028 	.word	0x40020028
 8005618:	40020040 	.word	0x40020040
 800561c:	40020058 	.word	0x40020058
 8005620:	40020070 	.word	0x40020070
 8005624:	40020088 	.word	0x40020088
 8005628:	400200a0 	.word	0x400200a0
 800562c:	400200b8 	.word	0x400200b8
 8005630:	40020410 	.word	0x40020410
 8005634:	40020428 	.word	0x40020428
 8005638:	40020440 	.word	0x40020440
 800563c:	40020458 	.word	0x40020458
 8005640:	40020470 	.word	0x40020470
 8005644:	40020488 	.word	0x40020488
 8005648:	400204a0 	.word	0x400204a0
 800564c:	400204b8 	.word	0x400204b8

08005650 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01a      	beq.n	800569e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005676:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005680:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d022      	beq.n	80056ec <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01a      	beq.n	80056ec <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80056ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
      }
    }
  }
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b089      	sub	sp, #36	; 0x24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005702:	4b86      	ldr	r3, [pc, #536]	; (800591c <HAL_GPIO_Init+0x228>)
 8005704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005706:	e18c      	b.n	8005a22 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	2101      	movs	r1, #1
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	fa01 f303 	lsl.w	r3, r1, r3
 8005714:	4013      	ands	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 817e 	beq.w	8005a1c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 0303 	and.w	r3, r3, #3
 8005728:	2b01      	cmp	r3, #1
 800572a:	d005      	beq.n	8005738 <HAL_GPIO_Init+0x44>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d130      	bne.n	800579a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	2203      	movs	r2, #3
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4313      	orrs	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800576e:	2201      	movs	r2, #1
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43db      	mvns	r3, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4013      	ands	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	091b      	lsrs	r3, r3, #4
 8005784:	f003 0201 	and.w	r2, r3, #1
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4313      	orrs	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d017      	beq.n	80057d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	2203      	movs	r2, #3
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d123      	bne.n	800582a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	08da      	lsrs	r2, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3208      	adds	r2, #8
 80057ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	220f      	movs	r2, #15
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	08da      	lsrs	r2, r3, #3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3208      	adds	r2, #8
 8005824:	69b9      	ldr	r1, [r7, #24]
 8005826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	2203      	movs	r2, #3
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f003 0203 	and.w	r2, r3, #3
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4313      	orrs	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80d8 	beq.w	8005a1c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586c:	4b2c      	ldr	r3, [pc, #176]	; (8005920 <HAL_GPIO_Init+0x22c>)
 800586e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005872:	4a2b      	ldr	r2, [pc, #172]	; (8005920 <HAL_GPIO_Init+0x22c>)
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800587c:	4b28      	ldr	r3, [pc, #160]	; (8005920 <HAL_GPIO_Init+0x22c>)
 800587e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800588a:	4a26      	ldr	r2, [pc, #152]	; (8005924 <HAL_GPIO_Init+0x230>)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	3302      	adds	r3, #2
 8005892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	220f      	movs	r2, #15
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <HAL_GPIO_Init+0x234>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d04a      	beq.n	800594c <HAL_GPIO_Init+0x258>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1c      	ldr	r2, [pc, #112]	; (800592c <HAL_GPIO_Init+0x238>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d02b      	beq.n	8005916 <HAL_GPIO_Init+0x222>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <HAL_GPIO_Init+0x23c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d025      	beq.n	8005912 <HAL_GPIO_Init+0x21e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <HAL_GPIO_Init+0x240>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01f      	beq.n	800590e <HAL_GPIO_Init+0x21a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a19      	ldr	r2, [pc, #100]	; (8005938 <HAL_GPIO_Init+0x244>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d019      	beq.n	800590a <HAL_GPIO_Init+0x216>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a18      	ldr	r2, [pc, #96]	; (800593c <HAL_GPIO_Init+0x248>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_GPIO_Init+0x212>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a17      	ldr	r2, [pc, #92]	; (8005940 <HAL_GPIO_Init+0x24c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00d      	beq.n	8005902 <HAL_GPIO_Init+0x20e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a16      	ldr	r2, [pc, #88]	; (8005944 <HAL_GPIO_Init+0x250>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d007      	beq.n	80058fe <HAL_GPIO_Init+0x20a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a15      	ldr	r2, [pc, #84]	; (8005948 <HAL_GPIO_Init+0x254>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <HAL_GPIO_Init+0x206>
 80058f6:	2309      	movs	r3, #9
 80058f8:	e029      	b.n	800594e <HAL_GPIO_Init+0x25a>
 80058fa:	230a      	movs	r3, #10
 80058fc:	e027      	b.n	800594e <HAL_GPIO_Init+0x25a>
 80058fe:	2307      	movs	r3, #7
 8005900:	e025      	b.n	800594e <HAL_GPIO_Init+0x25a>
 8005902:	2306      	movs	r3, #6
 8005904:	e023      	b.n	800594e <HAL_GPIO_Init+0x25a>
 8005906:	2305      	movs	r3, #5
 8005908:	e021      	b.n	800594e <HAL_GPIO_Init+0x25a>
 800590a:	2304      	movs	r3, #4
 800590c:	e01f      	b.n	800594e <HAL_GPIO_Init+0x25a>
 800590e:	2303      	movs	r3, #3
 8005910:	e01d      	b.n	800594e <HAL_GPIO_Init+0x25a>
 8005912:	2302      	movs	r3, #2
 8005914:	e01b      	b.n	800594e <HAL_GPIO_Init+0x25a>
 8005916:	2301      	movs	r3, #1
 8005918:	e019      	b.n	800594e <HAL_GPIO_Init+0x25a>
 800591a:	bf00      	nop
 800591c:	58000080 	.word	0x58000080
 8005920:	58024400 	.word	0x58024400
 8005924:	58000400 	.word	0x58000400
 8005928:	58020000 	.word	0x58020000
 800592c:	58020400 	.word	0x58020400
 8005930:	58020800 	.word	0x58020800
 8005934:	58020c00 	.word	0x58020c00
 8005938:	58021000 	.word	0x58021000
 800593c:	58021400 	.word	0x58021400
 8005940:	58021800 	.word	0x58021800
 8005944:	58021c00 	.word	0x58021c00
 8005948:	58022400 	.word	0x58022400
 800594c:	2300      	movs	r3, #0
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	f002 0203 	and.w	r2, r2, #3
 8005954:	0092      	lsls	r2, r2, #2
 8005956:	4093      	lsls	r3, r2
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800595e:	4938      	ldr	r1, [pc, #224]	; (8005a40 <HAL_GPIO_Init+0x34c>)
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	089b      	lsrs	r3, r3, #2
 8005964:	3302      	adds	r3, #2
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	43db      	mvns	r3, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4013      	ands	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800599a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	43db      	mvns	r3, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4013      	ands	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f47f ae6b 	bne.w	8005708 <HAL_GPIO_Init+0x14>
  }
}
 8005a32:	bf00      	nop
 8005a34:	bf00      	nop
 8005a36:	3724      	adds	r7, #36	; 0x24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	58000400 	.word	0x58000400

08005a44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a52:	4b72      	ldr	r3, [pc, #456]	; (8005c1c <HAL_GPIO_DeInit+0x1d8>)
 8005a54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005a56:	e0d3      	b.n	8005c00 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005a58:	2201      	movs	r2, #1
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	4013      	ands	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80c6 	beq.w	8005bfa <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005a6e:	4a6c      	ldr	r2, [pc, #432]	; (8005c20 <HAL_GPIO_DeInit+0x1dc>)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	089b      	lsrs	r3, r3, #2
 8005a74:	3302      	adds	r3, #2
 8005a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a7a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	220f      	movs	r2, #15
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a64      	ldr	r2, [pc, #400]	; (8005c24 <HAL_GPIO_DeInit+0x1e0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d031      	beq.n	8005afc <HAL_GPIO_DeInit+0xb8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a63      	ldr	r2, [pc, #396]	; (8005c28 <HAL_GPIO_DeInit+0x1e4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d02b      	beq.n	8005af8 <HAL_GPIO_DeInit+0xb4>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a62      	ldr	r2, [pc, #392]	; (8005c2c <HAL_GPIO_DeInit+0x1e8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d025      	beq.n	8005af4 <HAL_GPIO_DeInit+0xb0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a61      	ldr	r2, [pc, #388]	; (8005c30 <HAL_GPIO_DeInit+0x1ec>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d01f      	beq.n	8005af0 <HAL_GPIO_DeInit+0xac>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a60      	ldr	r2, [pc, #384]	; (8005c34 <HAL_GPIO_DeInit+0x1f0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d019      	beq.n	8005aec <HAL_GPIO_DeInit+0xa8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a5f      	ldr	r2, [pc, #380]	; (8005c38 <HAL_GPIO_DeInit+0x1f4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <HAL_GPIO_DeInit+0xa4>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a5e      	ldr	r2, [pc, #376]	; (8005c3c <HAL_GPIO_DeInit+0x1f8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00d      	beq.n	8005ae4 <HAL_GPIO_DeInit+0xa0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a5d      	ldr	r2, [pc, #372]	; (8005c40 <HAL_GPIO_DeInit+0x1fc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <HAL_GPIO_DeInit+0x9c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a5c      	ldr	r2, [pc, #368]	; (8005c44 <HAL_GPIO_DeInit+0x200>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d101      	bne.n	8005adc <HAL_GPIO_DeInit+0x98>
 8005ad8:	2309      	movs	r3, #9
 8005ada:	e010      	b.n	8005afe <HAL_GPIO_DeInit+0xba>
 8005adc:	230a      	movs	r3, #10
 8005ade:	e00e      	b.n	8005afe <HAL_GPIO_DeInit+0xba>
 8005ae0:	2307      	movs	r3, #7
 8005ae2:	e00c      	b.n	8005afe <HAL_GPIO_DeInit+0xba>
 8005ae4:	2306      	movs	r3, #6
 8005ae6:	e00a      	b.n	8005afe <HAL_GPIO_DeInit+0xba>
 8005ae8:	2305      	movs	r3, #5
 8005aea:	e008      	b.n	8005afe <HAL_GPIO_DeInit+0xba>
 8005aec:	2304      	movs	r3, #4
 8005aee:	e006      	b.n	8005afe <HAL_GPIO_DeInit+0xba>
 8005af0:	2303      	movs	r3, #3
 8005af2:	e004      	b.n	8005afe <HAL_GPIO_DeInit+0xba>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e002      	b.n	8005afe <HAL_GPIO_DeInit+0xba>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <HAL_GPIO_DeInit+0xba>
 8005afc:	2300      	movs	r3, #0
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	f002 0203 	and.w	r2, r2, #3
 8005b04:	0092      	lsls	r2, r2, #2
 8005b06:	4093      	lsls	r3, r2
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d136      	bne.n	8005b7c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	401a      	ands	r2, r3
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	43db      	mvns	r3, r3
 8005b24:	401a      	ands	r2, r3
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	43db      	mvns	r3, r3
 8005b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b38:	4013      	ands	r3, r2
 8005b3a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	220f      	movs	r2, #15
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005b5e:	4a30      	ldr	r2, [pc, #192]	; (8005c20 <HAL_GPIO_DeInit+0x1dc>)
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	3302      	adds	r3, #2
 8005b66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	43da      	mvns	r2, r3
 8005b6e:	482c      	ldr	r0, [pc, #176]	; (8005c20 <HAL_GPIO_DeInit+0x1dc>)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	089b      	lsrs	r3, r3, #2
 8005b74:	400a      	ands	r2, r1
 8005b76:	3302      	adds	r3, #2
 8005b78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	2103      	movs	r1, #3
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	08da      	lsrs	r2, r3, #3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3208      	adds	r2, #8
 8005b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	220f      	movs	r2, #15
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	43db      	mvns	r3, r3
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	08d2      	lsrs	r2, r2, #3
 8005bb0:	4019      	ands	r1, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3208      	adds	r2, #8
 8005bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	2103      	movs	r1, #3
 8005bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	401a      	ands	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	401a      	ands	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	2103      	movs	r1, #3
 8005bee:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	401a      	ands	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f47f af25 	bne.w	8005a58 <HAL_GPIO_DeInit+0x14>
  }
}
 8005c0e:	bf00      	nop
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	58000080 	.word	0x58000080
 8005c20:	58000400 	.word	0x58000400
 8005c24:	58020000 	.word	0x58020000
 8005c28:	58020400 	.word	0x58020400
 8005c2c:	58020800 	.word	0x58020800
 8005c30:	58020c00 	.word	0x58020c00
 8005c34:	58021000 	.word	0x58021000
 8005c38:	58021400 	.word	0x58021400
 8005c3c:	58021800 	.word	0x58021800
 8005c40:	58021c00 	.word	0x58021c00
 8005c44:	58022400 	.word	0x58022400

08005c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e07f      	b.n	8005d5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f8a9 	bl	8005dc6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	; 0x24
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ca8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d107      	bne.n	8005cc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cbe:	609a      	str	r2, [r3, #8]
 8005cc0:	e006      	b.n	8005cd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005cce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d104      	bne.n	8005ce2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ce0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6859      	ldr	r1, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <HAL_I2C_Init+0x11c>)
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69d9      	ldr	r1, [r3, #28]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	02008000 	.word	0x02008000

08005d68 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e021      	b.n	8005dbe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2224      	movs	r2, #36	; 0x24
 8005d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f821 	bl	8005dda <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	817b      	strh	r3, [r7, #10]
 8005e02:	460b      	mov	r3, r1
 8005e04:	813b      	strh	r3, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	f040 80f9 	bne.w	800600a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_I2C_Mem_Write+0x34>
 8005e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d105      	bne.n	8005e30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0ed      	b.n	800600c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_I2C_Mem_Write+0x4e>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e0e6      	b.n	800600c <HAL_I2C_Mem_Write+0x21c>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e46:	f7fd f855 	bl	8002ef4 <HAL_GetTick>
 8005e4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	2319      	movs	r3, #25
 8005e52:	2201      	movs	r2, #1
 8005e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fadd 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e0d1      	b.n	800600c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2221      	movs	r2, #33	; 0x21
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2240      	movs	r2, #64	; 0x40
 8005e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a3a      	ldr	r2, [r7, #32]
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e90:	88f8      	ldrh	r0, [r7, #6]
 8005e92:	893a      	ldrh	r2, [r7, #8]
 8005e94:	8979      	ldrh	r1, [r7, #10]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f9ed 	bl	8006280 <I2C_RequestMemoryWrite>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e0a9      	b.n	800600c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2bff      	cmp	r3, #255	; 0xff
 8005ec0:	d90e      	bls.n	8005ee0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	22ff      	movs	r2, #255	; 0xff
 8005ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	8979      	ldrh	r1, [r7, #10]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fc45 	bl	8006768 <I2C_TransferConfig>
 8005ede:	e00f      	b.n	8005f00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	8979      	ldrh	r1, [r7, #10]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fc34 	bl	8006768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 fac7 	bl	8006498 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e07b      	b.n	800600c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d034      	beq.n	8005fb8 <HAL_I2C_Mem_Write+0x1c8>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d130      	bne.n	8005fb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2180      	movs	r1, #128	; 0x80
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 fa59 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e04d      	b.n	800600c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2bff      	cmp	r3, #255	; 0xff
 8005f78:	d90e      	bls.n	8005f98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	22ff      	movs	r2, #255	; 0xff
 8005f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	8979      	ldrh	r1, [r7, #10]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fbe9 	bl	8006768 <I2C_TransferConfig>
 8005f96:	e00f      	b.n	8005fb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	8979      	ldrh	r1, [r7, #10]
 8005faa:	2300      	movs	r3, #0
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fbd8 	bl	8006768 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d19e      	bne.n	8005f00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 faa6 	bl	8006518 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e01a      	b.n	800600c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6859      	ldr	r1, [r3, #4]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <HAL_I2C_Mem_Write+0x224>)
 8005fea:	400b      	ands	r3, r1
 8005fec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e000      	b.n	800600c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800600a:	2302      	movs	r3, #2
  }
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	fe00e800 	.word	0xfe00e800

08006018 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	4608      	mov	r0, r1
 8006022:	4611      	mov	r1, r2
 8006024:	461a      	mov	r2, r3
 8006026:	4603      	mov	r3, r0
 8006028:	817b      	strh	r3, [r7, #10]
 800602a:	460b      	mov	r3, r1
 800602c:	813b      	strh	r3, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b20      	cmp	r3, #32
 800603c:	f040 80fd 	bne.w	800623a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_I2C_Mem_Read+0x34>
 8006046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006052:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e0f1      	b.n	800623c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_I2C_Mem_Read+0x4e>
 8006062:	2302      	movs	r3, #2
 8006064:	e0ea      	b.n	800623c <HAL_I2C_Mem_Read+0x224>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800606e:	f7fc ff41 	bl	8002ef4 <HAL_GetTick>
 8006072:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2319      	movs	r3, #25
 800607a:	2201      	movs	r2, #1
 800607c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f9c9 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0d5      	b.n	800623c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2222      	movs	r2, #34	; 0x22
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2240      	movs	r2, #64	; 0x40
 800609c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6a3a      	ldr	r2, [r7, #32]
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060b8:	88f8      	ldrh	r0, [r7, #6]
 80060ba:	893a      	ldrh	r2, [r7, #8]
 80060bc:	8979      	ldrh	r1, [r7, #10]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	4603      	mov	r3, r0
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f92d 	bl	8006328 <I2C_RequestMemoryRead>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e0ad      	b.n	800623c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2bff      	cmp	r3, #255	; 0xff
 80060e8:	d90e      	bls.n	8006108 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	22ff      	movs	r2, #255	; 0xff
 80060ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	8979      	ldrh	r1, [r7, #10]
 80060f8:	4b52      	ldr	r3, [pc, #328]	; (8006244 <HAL_I2C_Mem_Read+0x22c>)
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 fb31 	bl	8006768 <I2C_TransferConfig>
 8006106:	e00f      	b.n	8006128 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006116:	b2da      	uxtb	r2, r3
 8006118:	8979      	ldrh	r1, [r7, #10]
 800611a:	4b4a      	ldr	r3, [pc, #296]	; (8006244 <HAL_I2C_Mem_Read+0x22c>)
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 fb20 	bl	8006768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	2200      	movs	r2, #0
 8006130:	2104      	movs	r1, #4
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f970 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e07c      	b.n	800623c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d034      	beq.n	80061e8 <HAL_I2C_Mem_Read+0x1d0>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d130      	bne.n	80061e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	2200      	movs	r2, #0
 800618e:	2180      	movs	r1, #128	; 0x80
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f941 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e04d      	b.n	800623c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2bff      	cmp	r3, #255	; 0xff
 80061a8:	d90e      	bls.n	80061c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	22ff      	movs	r2, #255	; 0xff
 80061ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	8979      	ldrh	r1, [r7, #10]
 80061b8:	2300      	movs	r3, #0
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fad1 	bl	8006768 <I2C_TransferConfig>
 80061c6:	e00f      	b.n	80061e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	8979      	ldrh	r1, [r7, #10]
 80061da:	2300      	movs	r3, #0
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fac0 	bl	8006768 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d19a      	bne.n	8006128 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f98e 	bl	8006518 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e01a      	b.n	800623c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2220      	movs	r2, #32
 800620c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6859      	ldr	r1, [r3, #4]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <HAL_I2C_Mem_Read+0x230>)
 800621a:	400b      	ands	r3, r1
 800621c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2220      	movs	r2, #32
 8006222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	e000      	b.n	800623c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800623a:	2302      	movs	r3, #2
  }
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	80002400 	.word	0x80002400
 8006248:	fe00e800 	.word	0xfe00e800

0800624c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800625a:	b2db      	uxtb	r3, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	461a      	mov	r2, r3
 800628e:	4603      	mov	r3, r0
 8006290:	817b      	strh	r3, [r7, #10]
 8006292:	460b      	mov	r3, r1
 8006294:	813b      	strh	r3, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	8979      	ldrh	r1, [r7, #10]
 80062a0:	4b20      	ldr	r3, [pc, #128]	; (8006324 <I2C_RequestMemoryWrite+0xa4>)
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 fa5d 	bl	8006768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	69b9      	ldr	r1, [r7, #24]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 f8f0 	bl	8006498 <I2C_WaitOnTXISFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e02c      	b.n	800631c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d105      	bne.n	80062d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062c8:	893b      	ldrh	r3, [r7, #8]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	629a      	str	r2, [r3, #40]	; 0x28
 80062d2:	e015      	b.n	8006300 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062d4:	893b      	ldrh	r3, [r7, #8]
 80062d6:	0a1b      	lsrs	r3, r3, #8
 80062d8:	b29b      	uxth	r3, r3
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	69b9      	ldr	r1, [r7, #24]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 f8d6 	bl	8006498 <I2C_WaitOnTXISFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e012      	b.n	800631c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062f6:	893b      	ldrh	r3, [r7, #8]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2200      	movs	r2, #0
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f884 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	80002000 	.word	0x80002000

08006328 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	4608      	mov	r0, r1
 8006332:	4611      	mov	r1, r2
 8006334:	461a      	mov	r2, r3
 8006336:	4603      	mov	r3, r0
 8006338:	817b      	strh	r3, [r7, #10]
 800633a:	460b      	mov	r3, r1
 800633c:	813b      	strh	r3, [r7, #8]
 800633e:	4613      	mov	r3, r2
 8006340:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	8979      	ldrh	r1, [r7, #10]
 8006348:	4b20      	ldr	r3, [pc, #128]	; (80063cc <I2C_RequestMemoryRead+0xa4>)
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	2300      	movs	r3, #0
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fa0a 	bl	8006768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	69b9      	ldr	r1, [r7, #24]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f89d 	bl	8006498 <I2C_WaitOnTXISFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e02c      	b.n	80063c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d105      	bne.n	800637a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800636e:	893b      	ldrh	r3, [r7, #8]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	629a      	str	r2, [r3, #40]	; 0x28
 8006378:	e015      	b.n	80063a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800637a:	893b      	ldrh	r3, [r7, #8]
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	b29b      	uxth	r3, r3
 8006380:	b2da      	uxtb	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	69b9      	ldr	r1, [r7, #24]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f883 	bl	8006498 <I2C_WaitOnTXISFlagUntilTimeout>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e012      	b.n	80063c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800639c:	893b      	ldrh	r3, [r7, #8]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2200      	movs	r2, #0
 80063ae:	2140      	movs	r1, #64	; 0x40
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f831 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	80002000 	.word	0x80002000

080063d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d103      	bne.n	80063ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d007      	beq.n	800640c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	619a      	str	r2, [r3, #24]
  }
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006428:	e022      	b.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006430:	d01e      	beq.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006432:	f7fc fd5f 	bl	8002ef4 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d302      	bcc.n	8006448 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d113      	bne.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	f043 0220 	orr.w	r2, r3, #32
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e00f      	b.n	8006490 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4013      	ands	r3, r2
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	429a      	cmp	r2, r3
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	429a      	cmp	r2, r3
 800648c:	d0cd      	beq.n	800642a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064a4:	e02c      	b.n	8006500 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f870 	bl	8006590 <I2C_IsErrorOccurred>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e02a      	b.n	8006510 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c0:	d01e      	beq.n	8006500 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c2:	f7fc fd17 	bl	8002ef4 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d302      	bcc.n	80064d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d113      	bne.n	8006500 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064dc:	f043 0220 	orr.w	r2, r3, #32
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e007      	b.n	8006510 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b02      	cmp	r3, #2
 800650c:	d1cb      	bne.n	80064a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006524:	e028      	b.n	8006578 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f830 	bl	8006590 <I2C_IsErrorOccurred>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e026      	b.n	8006588 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653a:	f7fc fcdb 	bl	8002ef4 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	429a      	cmp	r2, r3
 8006548:	d302      	bcc.n	8006550 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d113      	bne.n	8006578 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006554:	f043 0220 	orr.w	r2, r3, #32
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e007      	b.n	8006588 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b20      	cmp	r3, #32
 8006584:	d1cf      	bne.n	8006526 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d075      	beq.n	80066a8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2210      	movs	r2, #16
 80065c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065c4:	e056      	b.n	8006674 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065cc:	d052      	beq.n	8006674 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065ce:	f7fc fc91 	bl	8002ef4 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d302      	bcc.n	80065e4 <I2C_IsErrorOccurred+0x54>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d147      	bne.n	8006674 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006606:	d12e      	bne.n	8006666 <I2C_IsErrorOccurred+0xd6>
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800660e:	d02a      	beq.n	8006666 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006610:	7cfb      	ldrb	r3, [r7, #19]
 8006612:	2b20      	cmp	r3, #32
 8006614:	d027      	beq.n	8006666 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006624:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006626:	f7fc fc65 	bl	8002ef4 <HAL_GetTick>
 800662a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800662c:	e01b      	b.n	8006666 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800662e:	f7fc fc61 	bl	8002ef4 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b19      	cmp	r3, #25
 800663a:	d914      	bls.n	8006666 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006640:	f043 0220 	orr.w	r2, r3, #32
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b20      	cmp	r3, #32
 8006672:	d1dc      	bne.n	800662e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b20      	cmp	r3, #32
 8006680:	d003      	beq.n	800668a <I2C_IsErrorOccurred+0xfa>
 8006682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006686:	2b00      	cmp	r3, #0
 8006688:	d09d      	beq.n	80065c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800668a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800668e:	2b00      	cmp	r3, #0
 8006690:	d103      	bne.n	800669a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2220      	movs	r2, #32
 8006698:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	f043 0304 	orr.w	r3, r3, #4
 80066a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	f043 0308 	orr.w	r3, r3, #8
 80066e2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00b      	beq.n	8006716 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	f043 0302 	orr.w	r3, r3, #2
 8006704:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800670e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800671a:	2b00      	cmp	r3, #0
 800671c:	d01c      	beq.n	8006758 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff fe56 	bl	80063d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6859      	ldr	r1, [r3, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <I2C_IsErrorOccurred+0x1d4>)
 8006730:	400b      	ands	r3, r1
 8006732:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	431a      	orrs	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800675c:	4618      	mov	r0, r3
 800675e:	3728      	adds	r7, #40	; 0x28
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	fe00e800 	.word	0xfe00e800

08006768 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	460b      	mov	r3, r1
 8006774:	817b      	strh	r3, [r7, #10]
 8006776:	4613      	mov	r3, r2
 8006778:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800677a:	897b      	ldrh	r3, [r7, #10]
 800677c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006780:	7a7b      	ldrb	r3, [r7, #9]
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006788:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	4313      	orrs	r3, r2
 8006792:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006796:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	0d5b      	lsrs	r3, r3, #21
 80067a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80067a6:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <I2C_TransferConfig+0x60>)
 80067a8:	430b      	orrs	r3, r1
 80067aa:	43db      	mvns	r3, r3
 80067ac:	ea02 0103 	and.w	r1, r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	03ff63ff 	.word	0x03ff63ff

080067cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d138      	bne.n	8006854 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e032      	b.n	8006856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2224      	movs	r2, #36	; 0x24
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800681e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6819      	ldr	r1, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0201 	orr.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e000      	b.n	8006856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b20      	cmp	r3, #32
 8006876:	d139      	bne.n	80068ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006882:	2302      	movs	r3, #2
 8006884:	e033      	b.n	80068ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2224      	movs	r2, #36	; 0x24
 8006892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0201 	bic.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80068b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e000      	b.n	80068ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068ec:	2302      	movs	r3, #2
  }
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006904:	4b29      	ldr	r3, [pc, #164]	; (80069ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	2b06      	cmp	r3, #6
 800690e:	d00a      	beq.n	8006926 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006910:	4b26      	ldr	r3, [pc, #152]	; (80069ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d001      	beq.n	8006922 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e03f      	b.n	80069a2 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	e03d      	b.n	80069a2 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006926:	4b21      	ldr	r3, [pc, #132]	; (80069ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800692e:	491f      	ldr	r1, [pc, #124]	; (80069ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4313      	orrs	r3, r2
 8006934:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006936:	f7fc fadd 	bl	8002ef4 <HAL_GetTick>
 800693a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800693c:	e009      	b.n	8006952 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800693e:	f7fc fad9 	bl	8002ef4 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800694c:	d901      	bls.n	8006952 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e027      	b.n	80069a2 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006952:	4b16      	ldr	r3, [pc, #88]	; (80069ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800695a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800695e:	d1ee      	bne.n	800693e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b1e      	cmp	r3, #30
 8006964:	d008      	beq.n	8006978 <HAL_PWREx_ConfigSupply+0x7c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b2e      	cmp	r3, #46	; 0x2e
 800696a:	d005      	beq.n	8006978 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b1d      	cmp	r3, #29
 8006970:	d002      	beq.n	8006978 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b2d      	cmp	r3, #45	; 0x2d
 8006976:	d113      	bne.n	80069a0 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006978:	f7fc fabc 	bl	8002ef4 <HAL_GetTick>
 800697c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800697e:	e009      	b.n	8006994 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006980:	f7fc fab8 	bl	8002ef4 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800698e:	d901      	bls.n	8006994 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e006      	b.n	80069a2 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0311 	and.w	r3, r3, #17
 800699c:	2b11      	cmp	r3, #17
 800699e:	d1ef      	bne.n	8006980 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	58024800 	.word	0x58024800

080069b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	; 0x30
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e397      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 8087 	beq.w	8006ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069d0:	4b9e      	ldr	r3, [pc, #632]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069da:	4b9c      	ldr	r3, [pc, #624]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	2b10      	cmp	r3, #16
 80069e4:	d007      	beq.n	80069f6 <HAL_RCC_OscConfig+0x46>
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	2b18      	cmp	r3, #24
 80069ea:	d110      	bne.n	8006a0e <HAL_RCC_OscConfig+0x5e>
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d10b      	bne.n	8006a0e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f6:	4b95      	ldr	r3, [pc, #596]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d06c      	beq.n	8006adc <HAL_RCC_OscConfig+0x12c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d168      	bne.n	8006adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e371      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a16:	d106      	bne.n	8006a26 <HAL_RCC_OscConfig+0x76>
 8006a18:	4b8c      	ldr	r3, [pc, #560]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a8b      	ldr	r2, [pc, #556]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	e02e      	b.n	8006a84 <HAL_RCC_OscConfig+0xd4>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCC_OscConfig+0x98>
 8006a2e:	4b87      	ldr	r3, [pc, #540]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a86      	ldr	r2, [pc, #536]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	4b84      	ldr	r3, [pc, #528]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a83      	ldr	r2, [pc, #524]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e01d      	b.n	8006a84 <HAL_RCC_OscConfig+0xd4>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a50:	d10c      	bne.n	8006a6c <HAL_RCC_OscConfig+0xbc>
 8006a52:	4b7e      	ldr	r3, [pc, #504]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a7d      	ldr	r2, [pc, #500]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	4b7b      	ldr	r3, [pc, #492]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a7a      	ldr	r2, [pc, #488]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e00b      	b.n	8006a84 <HAL_RCC_OscConfig+0xd4>
 8006a6c:	4b77      	ldr	r3, [pc, #476]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a76      	ldr	r2, [pc, #472]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	4b74      	ldr	r3, [pc, #464]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a73      	ldr	r2, [pc, #460]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d013      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8c:	f7fc fa32 	bl	8002ef4 <HAL_GetTick>
 8006a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a94:	f7fc fa2e 	bl	8002ef4 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	; 0x64
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e325      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006aa6:	4b69      	ldr	r3, [pc, #420]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0xe4>
 8006ab2:	e014      	b.n	8006ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fc fa1e 	bl	8002ef4 <HAL_GetTick>
 8006ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006abc:	f7fc fa1a 	bl	8002ef4 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b64      	cmp	r3, #100	; 0x64
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e311      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ace:	4b5f      	ldr	r3, [pc, #380]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0x10c>
 8006ada:	e000      	b.n	8006ade <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 808a 	beq.w	8006c00 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aec:	4b57      	ldr	r3, [pc, #348]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006af6:	4b55      	ldr	r3, [pc, #340]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d007      	beq.n	8006b12 <HAL_RCC_OscConfig+0x162>
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	2b18      	cmp	r3, #24
 8006b06:	d137      	bne.n	8006b78 <HAL_RCC_OscConfig+0x1c8>
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d132      	bne.n	8006b78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b12:	4b4e      	ldr	r3, [pc, #312]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_RCC_OscConfig+0x17a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e2e3      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b2a:	4b48      	ldr	r3, [pc, #288]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 0219 	bic.w	r2, r3, #25
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	4945      	ldr	r1, [pc, #276]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b3c:	f7fc f9da 	bl	8002ef4 <HAL_GetTick>
 8006b40:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b44:	f7fc f9d6 	bl	8002ef4 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e2cd      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b56:	4b3d      	ldr	r3, [pc, #244]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b62:	4b3a      	ldr	r3, [pc, #232]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	061b      	lsls	r3, r3, #24
 8006b70:	4936      	ldr	r1, [pc, #216]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b76:	e043      	b.n	8006c00 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d026      	beq.n	8006bce <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b80:	4b32      	ldr	r3, [pc, #200]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f023 0219 	bic.w	r2, r3, #25
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	492f      	ldr	r1, [pc, #188]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b92:	f7fc f9af 	bl	8002ef4 <HAL_GetTick>
 8006b96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b98:	e008      	b.n	8006bac <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b9a:	f7fc f9ab 	bl	8002ef4 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e2a2      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bac:	4b27      	ldr	r3, [pc, #156]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0f0      	beq.n	8006b9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bb8:	4b24      	ldr	r3, [pc, #144]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	061b      	lsls	r3, r3, #24
 8006bc6:	4921      	ldr	r1, [pc, #132]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	604b      	str	r3, [r1, #4]
 8006bcc:	e018      	b.n	8006c00 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bce:	4b1f      	ldr	r3, [pc, #124]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1e      	ldr	r2, [pc, #120]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bda:	f7fc f98b 	bl	8002ef4 <HAL_GetTick>
 8006bde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006be0:	e008      	b.n	8006bf4 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006be2:	f7fc f987 	bl	8002ef4 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e27e      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bf4:	4b15      	ldr	r3, [pc, #84]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1f0      	bne.n	8006be2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0310 	and.w	r3, r3, #16
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d06d      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c0c:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c14:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c16:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d007      	beq.n	8006c32 <HAL_RCC_OscConfig+0x282>
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b18      	cmp	r3, #24
 8006c26:	d11e      	bne.n	8006c66 <HAL_RCC_OscConfig+0x2b6>
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d119      	bne.n	8006c66 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c32:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <HAL_RCC_OscConfig+0x29c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <HAL_RCC_OscConfig+0x2a0>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	2b80      	cmp	r3, #128	; 0x80
 8006c44:	d004      	beq.n	8006c50 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e253      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
 8006c4a:	bf00      	nop
 8006c4c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c50:	4ba3      	ldr	r3, [pc, #652]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	061b      	lsls	r3, r3, #24
 8006c5e:	49a0      	ldr	r1, [pc, #640]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c64:	e040      	b.n	8006ce8 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d023      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c6e:	4b9c      	ldr	r3, [pc, #624]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a9b      	ldr	r2, [pc, #620]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7a:	f7fc f93b 	bl	8002ef4 <HAL_GetTick>
 8006c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c82:	f7fc f937 	bl	8002ef4 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e22e      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c94:	4b92      	ldr	r3, [pc, #584]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f0      	beq.n	8006c82 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ca0:	4b8f      	ldr	r3, [pc, #572]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	061b      	lsls	r3, r3, #24
 8006cae:	498c      	ldr	r1, [pc, #560]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60cb      	str	r3, [r1, #12]
 8006cb4:	e018      	b.n	8006ce8 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cb6:	4b8a      	ldr	r3, [pc, #552]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a89      	ldr	r2, [pc, #548]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc2:	f7fc f917 	bl	8002ef4 <HAL_GetTick>
 8006cc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006cca:	f7fc f913 	bl	8002ef4 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e20a      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cdc:	4b80      	ldr	r3, [pc, #512]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1f0      	bne.n	8006cca <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d036      	beq.n	8006d62 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d019      	beq.n	8006d30 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cfc:	4b78      	ldr	r3, [pc, #480]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d00:	4a77      	ldr	r2, [pc, #476]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006d02:	f043 0301 	orr.w	r3, r3, #1
 8006d06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d08:	f7fc f8f4 	bl	8002ef4 <HAL_GetTick>
 8006d0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d10:	f7fc f8f0 	bl	8002ef4 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e1e7      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d22:	4b6f      	ldr	r3, [pc, #444]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f0      	beq.n	8006d10 <HAL_RCC_OscConfig+0x360>
 8006d2e:	e018      	b.n	8006d62 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d30:	4b6b      	ldr	r3, [pc, #428]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d34:	4a6a      	ldr	r2, [pc, #424]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006d36:	f023 0301 	bic.w	r3, r3, #1
 8006d3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3c:	f7fc f8da 	bl	8002ef4 <HAL_GetTick>
 8006d40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d44:	f7fc f8d6 	bl	8002ef4 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e1cd      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d56:	4b62      	ldr	r3, [pc, #392]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d036      	beq.n	8006ddc <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d019      	beq.n	8006daa <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d76:	4b5a      	ldr	r3, [pc, #360]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a59      	ldr	r2, [pc, #356]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006d7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d82:	f7fc f8b7 	bl	8002ef4 <HAL_GetTick>
 8006d86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d8a:	f7fc f8b3 	bl	8002ef4 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e1aa      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d9c:	4b50      	ldr	r3, [pc, #320]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f0      	beq.n	8006d8a <HAL_RCC_OscConfig+0x3da>
 8006da8:	e018      	b.n	8006ddc <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006daa:	4b4d      	ldr	r3, [pc, #308]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a4c      	ldr	r2, [pc, #304]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006db0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006db6:	f7fc f89d 	bl	8002ef4 <HAL_GetTick>
 8006dba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006dbe:	f7fc f899 	bl	8002ef4 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e190      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dd0:	4b43      	ldr	r3, [pc, #268]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f0      	bne.n	8006dbe <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8085 	beq.w	8006ef4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006dea:	4b3e      	ldr	r3, [pc, #248]	; (8006ee4 <HAL_RCC_OscConfig+0x534>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a3d      	ldr	r2, [pc, #244]	; (8006ee4 <HAL_RCC_OscConfig+0x534>)
 8006df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006df6:	f7fc f87d 	bl	8002ef4 <HAL_GetTick>
 8006dfa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dfc:	e008      	b.n	8006e10 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006dfe:	f7fc f879 	bl	8002ef4 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b64      	cmp	r3, #100	; 0x64
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e170      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e10:	4b34      	ldr	r3, [pc, #208]	; (8006ee4 <HAL_RCC_OscConfig+0x534>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0f0      	beq.n	8006dfe <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d106      	bne.n	8006e32 <HAL_RCC_OscConfig+0x482>
 8006e24:	4b2e      	ldr	r3, [pc, #184]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e28:	4a2d      	ldr	r2, [pc, #180]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e2a:	f043 0301 	orr.w	r3, r3, #1
 8006e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e30:	e02d      	b.n	8006e8e <HAL_RCC_OscConfig+0x4de>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10c      	bne.n	8006e54 <HAL_RCC_OscConfig+0x4a4>
 8006e3a:	4b29      	ldr	r3, [pc, #164]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3e:	4a28      	ldr	r2, [pc, #160]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e40:	f023 0301 	bic.w	r3, r3, #1
 8006e44:	6713      	str	r3, [r2, #112]	; 0x70
 8006e46:	4b26      	ldr	r3, [pc, #152]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	4a25      	ldr	r2, [pc, #148]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e4c:	f023 0304 	bic.w	r3, r3, #4
 8006e50:	6713      	str	r3, [r2, #112]	; 0x70
 8006e52:	e01c      	b.n	8006e8e <HAL_RCC_OscConfig+0x4de>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b05      	cmp	r3, #5
 8006e5a:	d10c      	bne.n	8006e76 <HAL_RCC_OscConfig+0x4c6>
 8006e5c:	4b20      	ldr	r3, [pc, #128]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e60:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e62:	f043 0304 	orr.w	r3, r3, #4
 8006e66:	6713      	str	r3, [r2, #112]	; 0x70
 8006e68:	4b1d      	ldr	r3, [pc, #116]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	6713      	str	r3, [r2, #112]	; 0x70
 8006e74:	e00b      	b.n	8006e8e <HAL_RCC_OscConfig+0x4de>
 8006e76:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	4a19      	ldr	r2, [pc, #100]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e7c:	f023 0301 	bic.w	r3, r3, #1
 8006e80:	6713      	str	r3, [r2, #112]	; 0x70
 8006e82:	4b17      	ldr	r3, [pc, #92]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	4a16      	ldr	r2, [pc, #88]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006e88:	f023 0304 	bic.w	r3, r3, #4
 8006e8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d015      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e96:	f7fc f82d 	bl	8002ef4 <HAL_GetTick>
 8006e9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e9c:	e00a      	b.n	8006eb4 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e9e:	f7fc f829 	bl	8002ef4 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e11e      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <HAL_RCC_OscConfig+0x530>)
 8006eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0ee      	beq.n	8006e9e <HAL_RCC_OscConfig+0x4ee>
 8006ec0:	e018      	b.n	8006ef4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec2:	f7fc f817 	bl	8002ef4 <HAL_GetTick>
 8006ec6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ec8:	e00e      	b.n	8006ee8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eca:	f7fc f813 	bl	8002ef4 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d905      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e108      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
 8006ee0:	58024400 	.word	0x58024400
 8006ee4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ee8:	4b84      	ldr	r3, [pc, #528]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1ea      	bne.n	8006eca <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80f9 	beq.w	80070f0 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006efe:	4b7f      	ldr	r3, [pc, #508]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f06:	2b18      	cmp	r3, #24
 8006f08:	f000 80b4 	beq.w	8007074 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	f040 8095 	bne.w	8007040 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f16:	4b79      	ldr	r3, [pc, #484]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a78      	ldr	r2, [pc, #480]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f22:	f7fb ffe7 	bl	8002ef4 <HAL_GetTick>
 8006f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f2a:	f7fb ffe3 	bl	8002ef4 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e0da      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f3c:	4b6f      	ldr	r3, [pc, #444]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1f0      	bne.n	8006f2a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f48:	4b6c      	ldr	r3, [pc, #432]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f4c:	4b6c      	ldr	r3, [pc, #432]	; (8007100 <HAL_RCC_OscConfig+0x750>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f58:	0112      	lsls	r2, r2, #4
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	4967      	ldr	r1, [pc, #412]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	628b      	str	r3, [r1, #40]	; 0x28
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	3b01      	subs	r3, #1
 8006f68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f70:	3b01      	subs	r3, #1
 8006f72:	025b      	lsls	r3, r3, #9
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	041b      	lsls	r3, r3, #16
 8006f80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	061b      	lsls	r3, r3, #24
 8006f8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f92:	495a      	ldr	r1, [pc, #360]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f98:	4b58      	ldr	r3, [pc, #352]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	4a57      	ldr	r2, [pc, #348]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fa4:	4b55      	ldr	r3, [pc, #340]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa8:	4b56      	ldr	r3, [pc, #344]	; (8007104 <HAL_RCC_OscConfig+0x754>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fb0:	00d2      	lsls	r2, r2, #3
 8006fb2:	4952      	ldr	r1, [pc, #328]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fb8:	4b50      	ldr	r3, [pc, #320]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	f023 020c 	bic.w	r2, r3, #12
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	494d      	ldr	r1, [pc, #308]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fca:	4b4c      	ldr	r3, [pc, #304]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	f023 0202 	bic.w	r2, r3, #2
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd6:	4949      	ldr	r1, [pc, #292]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fdc:	4b47      	ldr	r3, [pc, #284]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	4a46      	ldr	r2, [pc, #280]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe8:	4b44      	ldr	r3, [pc, #272]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	4a43      	ldr	r2, [pc, #268]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ff4:	4b41      	ldr	r3, [pc, #260]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	4a40      	ldr	r2, [pc, #256]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8006ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007000:	4b3e      	ldr	r3, [pc, #248]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	4a3d      	ldr	r2, [pc, #244]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800700c:	4b3b      	ldr	r3, [pc, #236]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a3a      	ldr	r2, [pc, #232]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8007012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fb ff6c 	bl	8002ef4 <HAL_GetTick>
 800701c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007020:	f7fb ff68 	bl	8002ef4 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e05f      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007032:	4b32      	ldr	r3, [pc, #200]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0f0      	beq.n	8007020 <HAL_RCC_OscConfig+0x670>
 800703e:	e057      	b.n	80070f0 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007040:	4b2e      	ldr	r3, [pc, #184]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2d      	ldr	r2, [pc, #180]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8007046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800704a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7fb ff52 	bl	8002ef4 <HAL_GetTick>
 8007050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007054:	f7fb ff4e 	bl	8002ef4 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e045      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007066:	4b25      	ldr	r3, [pc, #148]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1f0      	bne.n	8007054 <HAL_RCC_OscConfig+0x6a4>
 8007072:	e03d      	b.n	80070f0 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007074:	4b21      	ldr	r3, [pc, #132]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 8007076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007078:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800707a:	4b20      	ldr	r3, [pc, #128]	; (80070fc <HAL_RCC_OscConfig+0x74c>)
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	2b01      	cmp	r3, #1
 8007086:	d031      	beq.n	80070ec <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f003 0203 	and.w	r2, r3, #3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007092:	429a      	cmp	r2, r3
 8007094:	d12a      	bne.n	80070ec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	091b      	lsrs	r3, r3, #4
 800709a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d122      	bne.n	80070ec <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d11a      	bne.n	80070ec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	0a5b      	lsrs	r3, r3, #9
 80070ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d111      	bne.n	80070ec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d108      	bne.n	80070ec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	0e1b      	lsrs	r3, r3, #24
 80070de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d001      	beq.n	80070f0 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3730      	adds	r7, #48	; 0x30
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	58024400 	.word	0x58024400
 8007100:	fffffc0c 	.word	0xfffffc0c
 8007104:	ffff0007 	.word	0xffff0007

08007108 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e19c      	b.n	8007456 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800711c:	4b8a      	ldr	r3, [pc, #552]	; (8007348 <HAL_RCC_ClockConfig+0x240>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d910      	bls.n	800714c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800712a:	4b87      	ldr	r3, [pc, #540]	; (8007348 <HAL_RCC_ClockConfig+0x240>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f023 020f 	bic.w	r2, r3, #15
 8007132:	4985      	ldr	r1, [pc, #532]	; (8007348 <HAL_RCC_ClockConfig+0x240>)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	4313      	orrs	r3, r2
 8007138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800713a:	4b83      	ldr	r3, [pc, #524]	; (8007348 <HAL_RCC_ClockConfig+0x240>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d001      	beq.n	800714c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e184      	b.n	8007456 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d010      	beq.n	800717a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	4b7b      	ldr	r3, [pc, #492]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007164:	429a      	cmp	r2, r3
 8007166:	d908      	bls.n	800717a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007168:	4b78      	ldr	r3, [pc, #480]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	4975      	ldr	r1, [pc, #468]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 8007176:	4313      	orrs	r3, r2
 8007178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d010      	beq.n	80071a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695a      	ldr	r2, [r3, #20]
 800718a:	4b70      	ldr	r3, [pc, #448]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007192:	429a      	cmp	r2, r3
 8007194:	d908      	bls.n	80071a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007196:	4b6d      	ldr	r3, [pc, #436]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	496a      	ldr	r1, [pc, #424]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d010      	beq.n	80071d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	4b64      	ldr	r3, [pc, #400]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d908      	bls.n	80071d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071c4:	4b61      	ldr	r3, [pc, #388]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	495e      	ldr	r1, [pc, #376]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d010      	beq.n	8007204 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	4b59      	ldr	r3, [pc, #356]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d908      	bls.n	8007204 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80071f2:	4b56      	ldr	r3, [pc, #344]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	4953      	ldr	r1, [pc, #332]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 8007200:	4313      	orrs	r3, r2
 8007202:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d010      	beq.n	8007232 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68da      	ldr	r2, [r3, #12]
 8007214:	4b4d      	ldr	r3, [pc, #308]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	429a      	cmp	r2, r3
 800721e:	d908      	bls.n	8007232 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007220:	4b4a      	ldr	r3, [pc, #296]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	f023 020f 	bic.w	r2, r3, #15
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	4947      	ldr	r1, [pc, #284]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 800722e:	4313      	orrs	r3, r2
 8007230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d055      	beq.n	80072ea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800723e:	4b43      	ldr	r3, [pc, #268]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	4940      	ldr	r1, [pc, #256]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 800724c:	4313      	orrs	r3, r2
 800724e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d107      	bne.n	8007268 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007258:	4b3c      	ldr	r3, [pc, #240]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d121      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e0f6      	b.n	8007456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2b03      	cmp	r3, #3
 800726e:	d107      	bne.n	8007280 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007270:	4b36      	ldr	r3, [pc, #216]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d115      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0ea      	b.n	8007456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d107      	bne.n	8007298 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007288:	4b30      	ldr	r3, [pc, #192]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e0de      	b.n	8007456 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007298:	4b2c      	ldr	r3, [pc, #176]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e0d6      	b.n	8007456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072a8:	4b28      	ldr	r3, [pc, #160]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f023 0207 	bic.w	r2, r3, #7
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4925      	ldr	r1, [pc, #148]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ba:	f7fb fe1b 	bl	8002ef4 <HAL_GetTick>
 80072be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072c0:	e00a      	b.n	80072d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072c2:	f7fb fe17 	bl	8002ef4 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e0be      	b.n	8007456 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072d8:	4b1c      	ldr	r3, [pc, #112]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d1eb      	bne.n	80072c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d010      	beq.n	8007318 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	4b14      	ldr	r3, [pc, #80]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	429a      	cmp	r2, r3
 8007304:	d208      	bcs.n	8007318 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007306:	4b11      	ldr	r3, [pc, #68]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f023 020f 	bic.w	r2, r3, #15
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	490e      	ldr	r1, [pc, #56]	; (800734c <HAL_RCC_ClockConfig+0x244>)
 8007314:	4313      	orrs	r3, r2
 8007316:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007318:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <HAL_RCC_ClockConfig+0x240>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 030f 	and.w	r3, r3, #15
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d214      	bcs.n	8007350 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <HAL_RCC_ClockConfig+0x240>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f023 020f 	bic.w	r2, r3, #15
 800732e:	4906      	ldr	r1, [pc, #24]	; (8007348 <HAL_RCC_ClockConfig+0x240>)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	4313      	orrs	r3, r2
 8007334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007336:	4b04      	ldr	r3, [pc, #16]	; (8007348 <HAL_RCC_ClockConfig+0x240>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d005      	beq.n	8007350 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e086      	b.n	8007456 <HAL_RCC_ClockConfig+0x34e>
 8007348:	52002000 	.word	0x52002000
 800734c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d010      	beq.n	800737e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	4b3f      	ldr	r3, [pc, #252]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007368:	429a      	cmp	r2, r3
 800736a:	d208      	bcs.n	800737e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800736c:	4b3c      	ldr	r3, [pc, #240]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	4939      	ldr	r1, [pc, #228]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 800737a:	4313      	orrs	r3, r2
 800737c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d010      	beq.n	80073ac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	695a      	ldr	r2, [r3, #20]
 800738e:	4b34      	ldr	r3, [pc, #208]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007396:	429a      	cmp	r2, r3
 8007398:	d208      	bcs.n	80073ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800739a:	4b31      	ldr	r3, [pc, #196]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	492e      	ldr	r1, [pc, #184]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d010      	beq.n	80073da <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	4b28      	ldr	r3, [pc, #160]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d208      	bcs.n	80073da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073c8:	4b25      	ldr	r3, [pc, #148]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	4922      	ldr	r1, [pc, #136]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d010      	beq.n	8007408 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	4b1d      	ldr	r3, [pc, #116]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d208      	bcs.n	8007408 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073f6:	4b1a      	ldr	r3, [pc, #104]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	4917      	ldr	r1, [pc, #92]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 8007404:	4313      	orrs	r3, r2
 8007406:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007408:	f000 f834 	bl	8007474 <HAL_RCC_GetSysClockFreq>
 800740c:	4602      	mov	r2, r0
 800740e:	4b14      	ldr	r3, [pc, #80]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	0a1b      	lsrs	r3, r3, #8
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	4912      	ldr	r1, [pc, #72]	; (8007464 <HAL_RCC_ClockConfig+0x35c>)
 800741a:	5ccb      	ldrb	r3, [r1, r3]
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	fa22 f303 	lsr.w	r3, r2, r3
 8007424:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007426:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <HAL_RCC_ClockConfig+0x358>)
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	4a0d      	ldr	r2, [pc, #52]	; (8007464 <HAL_RCC_ClockConfig+0x35c>)
 8007430:	5cd3      	ldrb	r3, [r2, r3]
 8007432:	f003 031f 	and.w	r3, r3, #31
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	fa22 f303 	lsr.w	r3, r2, r3
 800743c:	4a0a      	ldr	r2, [pc, #40]	; (8007468 <HAL_RCC_ClockConfig+0x360>)
 800743e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007440:	4a0a      	ldr	r2, [pc, #40]	; (800746c <HAL_RCC_ClockConfig+0x364>)
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007446:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <HAL_RCC_ClockConfig+0x368>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f7fb fd08 	bl	8002e60 <HAL_InitTick>
 8007450:	4603      	mov	r3, r0
 8007452:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	58024400 	.word	0x58024400
 8007464:	0800eac4 	.word	0x0800eac4
 8007468:	24000458 	.word	0x24000458
 800746c:	24000454 	.word	0x24000454
 8007470:	2400044c 	.word	0x2400044c

08007474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007474:	b480      	push	{r7}
 8007476:	b089      	sub	sp, #36	; 0x24
 8007478:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800747a:	4bb3      	ldr	r3, [pc, #716]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007482:	2b18      	cmp	r3, #24
 8007484:	f200 8155 	bhi.w	8007732 <HAL_RCC_GetSysClockFreq+0x2be>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <HAL_RCC_GetSysClockFreq+0x1c>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074f5 	.word	0x080074f5
 8007494:	08007733 	.word	0x08007733
 8007498:	08007733 	.word	0x08007733
 800749c:	08007733 	.word	0x08007733
 80074a0:	08007733 	.word	0x08007733
 80074a4:	08007733 	.word	0x08007733
 80074a8:	08007733 	.word	0x08007733
 80074ac:	08007733 	.word	0x08007733
 80074b0:	0800751b 	.word	0x0800751b
 80074b4:	08007733 	.word	0x08007733
 80074b8:	08007733 	.word	0x08007733
 80074bc:	08007733 	.word	0x08007733
 80074c0:	08007733 	.word	0x08007733
 80074c4:	08007733 	.word	0x08007733
 80074c8:	08007733 	.word	0x08007733
 80074cc:	08007733 	.word	0x08007733
 80074d0:	08007521 	.word	0x08007521
 80074d4:	08007733 	.word	0x08007733
 80074d8:	08007733 	.word	0x08007733
 80074dc:	08007733 	.word	0x08007733
 80074e0:	08007733 	.word	0x08007733
 80074e4:	08007733 	.word	0x08007733
 80074e8:	08007733 	.word	0x08007733
 80074ec:	08007733 	.word	0x08007733
 80074f0:	08007527 	.word	0x08007527
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074f4:	4b94      	ldr	r3, [pc, #592]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d009      	beq.n	8007514 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007500:	4b91      	ldr	r3, [pc, #580]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	08db      	lsrs	r3, r3, #3
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	4a90      	ldr	r2, [pc, #576]	; (800774c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800750c:	fa22 f303 	lsr.w	r3, r2, r3
 8007510:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007512:	e111      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007514:	4b8d      	ldr	r3, [pc, #564]	; (800774c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007516:	61bb      	str	r3, [r7, #24]
    break;
 8007518:	e10e      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800751a:	4b8d      	ldr	r3, [pc, #564]	; (8007750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800751c:	61bb      	str	r3, [r7, #24]
    break;
 800751e:	e10b      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007520:	4b8c      	ldr	r3, [pc, #560]	; (8007754 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007522:	61bb      	str	r3, [r7, #24]
    break;
 8007524:	e108      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007526:	4b88      	ldr	r3, [pc, #544]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007530:	4b85      	ldr	r3, [pc, #532]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	091b      	lsrs	r3, r3, #4
 8007536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800753a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800753c:	4b82      	ldr	r3, [pc, #520]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007546:	4b80      	ldr	r3, [pc, #512]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754a:	08db      	lsrs	r3, r3, #3
 800754c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	fb02 f303 	mul.w	r3, r2, r3
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80e1 	beq.w	800772c <HAL_RCC_GetSysClockFreq+0x2b8>
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b02      	cmp	r3, #2
 800756e:	f000 8083 	beq.w	8007678 <HAL_RCC_GetSysClockFreq+0x204>
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b02      	cmp	r3, #2
 8007576:	f200 80a1 	bhi.w	80076bc <HAL_RCC_GetSysClockFreq+0x248>
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_RCC_GetSysClockFreq+0x114>
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d056      	beq.n	8007634 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007586:	e099      	b.n	80076bc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007588:	4b6f      	ldr	r3, [pc, #444]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d02d      	beq.n	80075f0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007594:	4b6c      	ldr	r3, [pc, #432]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	08db      	lsrs	r3, r3, #3
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	4a6b      	ldr	r2, [pc, #428]	; (800774c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
 80075a4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	ee07 3a90 	vmov	s15, r3
 80075ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075be:	4b62      	ldr	r3, [pc, #392]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80075d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80075ee:	e087      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800775c <HAL_RCC_GetSysClockFreq+0x2e8>
 80075fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007602:	4b51      	ldr	r3, [pc, #324]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007612:	ed97 6a02 	vldr	s12, [r7, #8]
 8007616:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800761a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007632:	e065      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007760 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007646:	4b40      	ldr	r3, [pc, #256]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007656:	ed97 6a02 	vldr	s12, [r7, #8]
 800765a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800765e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800766a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007676:	e043      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007682:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007764 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768a:	4b2f      	ldr	r3, [pc, #188]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769a:	ed97 6a02 	vldr	s12, [r7, #8]
 800769e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ba:	e021      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007760 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ce:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076de:	ed97 6a02 	vldr	s12, [r7, #8]
 80076e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007700:	4b11      	ldr	r3, [pc, #68]	; (8007748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007704:	0a5b      	lsrs	r3, r3, #9
 8007706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770a:	3301      	adds	r3, #1
 800770c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	ee07 3a90 	vmov	s15, r3
 8007714:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007718:	edd7 6a07 	vldr	s13, [r7, #28]
 800771c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007724:	ee17 3a90 	vmov	r3, s15
 8007728:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800772a:	e005      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	61bb      	str	r3, [r7, #24]
    break;
 8007730:	e002      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007732:	4b07      	ldr	r3, [pc, #28]	; (8007750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007734:	61bb      	str	r3, [r7, #24]
    break;
 8007736:	bf00      	nop
  }

  return sysclockfreq;
 8007738:	69bb      	ldr	r3, [r7, #24]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3724      	adds	r7, #36	; 0x24
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	58024400 	.word	0x58024400
 800774c:	03d09000 	.word	0x03d09000
 8007750:	003d0900 	.word	0x003d0900
 8007754:	017d7840 	.word	0x017d7840
 8007758:	46000000 	.word	0x46000000
 800775c:	4c742400 	.word	0x4c742400
 8007760:	4a742400 	.word	0x4a742400
 8007764:	4bbebc20 	.word	0x4bbebc20

08007768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800776e:	f7ff fe81 	bl	8007474 <HAL_RCC_GetSysClockFreq>
 8007772:	4602      	mov	r2, r0
 8007774:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	0a1b      	lsrs	r3, r3, #8
 800777a:	f003 030f 	and.w	r3, r3, #15
 800777e:	490f      	ldr	r1, [pc, #60]	; (80077bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007780:	5ccb      	ldrb	r3, [r1, r3]
 8007782:	f003 031f 	and.w	r3, r3, #31
 8007786:	fa22 f303 	lsr.w	r3, r2, r3
 800778a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	4a09      	ldr	r2, [pc, #36]	; (80077bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007796:	5cd3      	ldrb	r3, [r2, r3]
 8007798:	f003 031f 	and.w	r3, r3, #31
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	fa22 f303 	lsr.w	r3, r2, r3
 80077a2:	4a07      	ldr	r2, [pc, #28]	; (80077c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80077a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077a6:	4a07      	ldr	r2, [pc, #28]	; (80077c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80077ac:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80077ae:	681b      	ldr	r3, [r3, #0]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	58024400 	.word	0x58024400
 80077bc:	0800eac4 	.word	0x0800eac4
 80077c0:	24000458 	.word	0x24000458
 80077c4:	24000454 	.word	0x24000454

080077c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80077cc:	f7ff ffcc 	bl	8007768 <HAL_RCC_GetHCLKFreq>
 80077d0:	4602      	mov	r2, r0
 80077d2:	4b06      	ldr	r3, [pc, #24]	; (80077ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	091b      	lsrs	r3, r3, #4
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	4904      	ldr	r1, [pc, #16]	; (80077f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077de:	5ccb      	ldrb	r3, [r1, r3]
 80077e0:	f003 031f 	and.w	r3, r3, #31
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	58024400 	.word	0x58024400
 80077f0:	0800eac4 	.word	0x0800eac4

080077f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80077f8:	f7ff ffb6 	bl	8007768 <HAL_RCC_GetHCLKFreq>
 80077fc:	4602      	mov	r2, r0
 80077fe:	4b06      	ldr	r3, [pc, #24]	; (8007818 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	0a1b      	lsrs	r3, r3, #8
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	4904      	ldr	r1, [pc, #16]	; (800781c <HAL_RCC_GetPCLK2Freq+0x28>)
 800780a:	5ccb      	ldrb	r3, [r1, r3]
 800780c:	f003 031f 	and.w	r3, r3, #31
 8007810:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007814:	4618      	mov	r0, r3
 8007816:	bd80      	pop	{r7, pc}
 8007818:	58024400 	.word	0x58024400
 800781c:	0800eac4 	.word	0x0800eac4

08007820 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007828:	2300      	movs	r3, #0
 800782a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800782c:	2300      	movs	r3, #0
 800782e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d03f      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007844:	d02a      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007846:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800784a:	d824      	bhi.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800784c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007850:	d018      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007856:	d81e      	bhi.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800785c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007860:	d007      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007862:	e018      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007864:	4bab      	ldr	r3, [pc, #684]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	4aaa      	ldr	r2, [pc, #680]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800786a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800786e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007870:	e015      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3304      	adds	r3, #4
 8007876:	2102      	movs	r1, #2
 8007878:	4618      	mov	r0, r3
 800787a:	f001 feff 	bl	800967c <RCCEx_PLL2_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007882:	e00c      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3324      	adds	r3, #36	; 0x24
 8007888:	2102      	movs	r1, #2
 800788a:	4618      	mov	r0, r3
 800788c:	f001 ffa8 	bl	80097e0 <RCCEx_PLL3_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007894:	e003      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	75fb      	strb	r3, [r7, #23]
      break;
 800789a:	e000      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800789c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d109      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80078a4:	4b9b      	ldr	r3, [pc, #620]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b0:	4998      	ldr	r1, [pc, #608]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	650b      	str	r3, [r1, #80]	; 0x50
 80078b6:	e001      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d03d      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d826      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80078d0:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80078d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d6:	bf00      	nop
 80078d8:	080078ed 	.word	0x080078ed
 80078dc:	080078fb 	.word	0x080078fb
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	08007925 	.word	0x08007925
 80078e8:	08007925 	.word	0x08007925
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ec:	4b89      	ldr	r3, [pc, #548]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	4a88      	ldr	r2, [pc, #544]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078f8:	e015      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3304      	adds	r3, #4
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f001 febb 	bl	800967c <RCCEx_PLL2_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800790a:	e00c      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3324      	adds	r3, #36	; 0x24
 8007910:	2100      	movs	r1, #0
 8007912:	4618      	mov	r0, r3
 8007914:	f001 ff64 	bl	80097e0 <RCCEx_PLL3_Config>
 8007918:	4603      	mov	r3, r0
 800791a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800791c:	e003      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	75fb      	strb	r3, [r7, #23]
      break;
 8007922:	e000      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800792c:	4b79      	ldr	r3, [pc, #484]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800792e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007930:	f023 0207 	bic.w	r2, r3, #7
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007938:	4976      	ldr	r1, [pc, #472]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800793a:	4313      	orrs	r3, r2
 800793c:	650b      	str	r3, [r1, #80]	; 0x50
 800793e:	e001      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800794c:	2b00      	cmp	r3, #0
 800794e:	d051      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007956:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800795a:	d036      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800795c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007960:	d830      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007966:	d032      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800796c:	d82a      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800796e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007972:	d02e      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007974:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007978:	d824      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800797a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800797e:	d018      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007984:	d81e      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800798a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800798e:	d007      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007990:	e018      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007992:	4b60      	ldr	r3, [pc, #384]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	4a5f      	ldr	r2, [pc, #380]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800799c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800799e:	e019      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3304      	adds	r3, #4
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 fe68 	bl	800967c <RCCEx_PLL2_Config>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80079b0:	e010      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	3324      	adds	r3, #36	; 0x24
 80079b6:	2100      	movs	r1, #0
 80079b8:	4618      	mov	r0, r3
 80079ba:	f001 ff11 	bl	80097e0 <RCCEx_PLL3_Config>
 80079be:	4603      	mov	r3, r0
 80079c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079c2:	e007      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	75fb      	strb	r3, [r7, #23]
      break;
 80079c8:	e004      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80079ca:	bf00      	nop
 80079cc:	e002      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80079ce:	bf00      	nop
 80079d0:	e000      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80079d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10a      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80079da:	4b4e      	ldr	r3, [pc, #312]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079de:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079e8:	494a      	ldr	r1, [pc, #296]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	658b      	str	r3, [r1, #88]	; 0x58
 80079ee:	e001      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d051      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a06:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007a0a:	d036      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007a0c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007a10:	d830      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a16:	d032      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007a18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a1c:	d82a      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007a1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a22:	d02e      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007a24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a28:	d824      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a2e:	d018      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a34:	d81e      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a3e:	d007      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007a40:	e018      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a42:	4b34      	ldr	r3, [pc, #208]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	4a33      	ldr	r2, [pc, #204]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a4e:	e019      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3304      	adds	r3, #4
 8007a54:	2100      	movs	r1, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 fe10 	bl	800967c <RCCEx_PLL2_Config>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a60:	e010      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3324      	adds	r3, #36	; 0x24
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 feb9 	bl	80097e0 <RCCEx_PLL3_Config>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a72:	e007      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	75fb      	strb	r3, [r7, #23]
      break;
 8007a78:	e004      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007a7a:	bf00      	nop
 8007a7c:	e002      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007a7e:	bf00      	nop
 8007a80:	e000      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a8a:	4b22      	ldr	r3, [pc, #136]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a98:	491e      	ldr	r1, [pc, #120]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	658b      	str	r3, [r1, #88]	; 0x58
 8007a9e:	e001      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d035      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab4:	2b30      	cmp	r3, #48	; 0x30
 8007ab6:	d01c      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007ab8:	2b30      	cmp	r3, #48	; 0x30
 8007aba:	d817      	bhi.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007abc:	2b20      	cmp	r3, #32
 8007abe:	d00c      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d813      	bhi.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d016      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8007ac8:	2b10      	cmp	r3, #16
 8007aca:	d10f      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007acc:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	4a10      	ldr	r2, [pc, #64]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007ad8:	e00e      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3304      	adds	r3, #4
 8007ade:	2102      	movs	r1, #2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 fdcb 	bl	800967c <RCCEx_PLL2_Config>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007aea:	e005      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	75fb      	strb	r3, [r7, #23]
      break;
 8007af0:	e002      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007af2:	bf00      	nop
 8007af4:	e000      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10c      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007afe:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b0a:	4902      	ldr	r1, [pc, #8]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b10:	e004      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007b12:	bf00      	nop
 8007b14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d047      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b30:	d030      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b36:	d82a      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007b38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b3c:	d02c      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007b3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b42:	d824      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b48:	d018      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b4e:	d81e      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b58:	d007      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b5a:	e018      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b5c:	4bac      	ldr	r3, [pc, #688]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	4aab      	ldr	r2, [pc, #684]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b68:	e017      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	2100      	movs	r1, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 fd83 	bl	800967c <RCCEx_PLL2_Config>
 8007b76:	4603      	mov	r3, r0
 8007b78:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b7a:	e00e      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3324      	adds	r3, #36	; 0x24
 8007b80:	2100      	movs	r1, #0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 fe2c 	bl	80097e0 <RCCEx_PLL3_Config>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b8c:	e005      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	75fb      	strb	r3, [r7, #23]
      break;
 8007b92:	e002      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007b94:	bf00      	nop
 8007b96:	e000      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d109      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ba0:	4b9b      	ldr	r3, [pc, #620]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bac:	4998      	ldr	r1, [pc, #608]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	650b      	str	r3, [r1, #80]	; 0x50
 8007bb2:	e001      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d049      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bcc:	d02e      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bd2:	d828      	bhi.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007bd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bd8:	d02a      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007bda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bde:	d822      	bhi.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007be0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007be4:	d026      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007be6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bea:	d81c      	bhi.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf0:	d010      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007bf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf6:	d816      	bhi.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01d      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c00:	d111      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3304      	adds	r3, #4
 8007c06:	2101      	movs	r1, #1
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f001 fd37 	bl	800967c <RCCEx_PLL2_Config>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007c12:	e012      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3324      	adds	r3, #36	; 0x24
 8007c18:	2101      	movs	r1, #1
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 fde0 	bl	80097e0 <RCCEx_PLL3_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007c24:	e009      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	75fb      	strb	r3, [r7, #23]
      break;
 8007c2a:	e006      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007c2c:	bf00      	nop
 8007c2e:	e004      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007c30:	bf00      	nop
 8007c32:	e002      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007c34:	bf00      	nop
 8007c36:	e000      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d109      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c40:	4b73      	ldr	r3, [pc, #460]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c44:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	4970      	ldr	r1, [pc, #448]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	650b      	str	r3, [r1, #80]	; 0x50
 8007c52:	e001      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d04b      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c6e:	d02e      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c74:	d828      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7a:	d02a      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c80:	d822      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007c82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c86:	d026      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007c88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c8c:	d81c      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c92:	d010      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c98:	d816      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d01d      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ca2:	d111      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	2101      	movs	r1, #1
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 fce6 	bl	800967c <RCCEx_PLL2_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007cb4:	e012      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3324      	adds	r3, #36	; 0x24
 8007cba:	2101      	movs	r1, #1
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f001 fd8f 	bl	80097e0 <RCCEx_PLL3_Config>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007cc6:	e009      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	75fb      	strb	r3, [r7, #23]
      break;
 8007ccc:	e006      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007cce:	bf00      	nop
 8007cd0:	e004      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007cd2:	bf00      	nop
 8007cd4:	e002      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007cd6:	bf00      	nop
 8007cd8:	e000      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ce2:	4b4b      	ldr	r3, [pc, #300]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007cf0:	4947      	ldr	r1, [pc, #284]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	658b      	str	r3, [r1, #88]	; 0x58
 8007cf6:	e001      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d02f      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d10:	d00e      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d16:	d814      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d015      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d20:	d10f      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d22:	4b3b      	ldr	r3, [pc, #236]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	4a3a      	ldr	r2, [pc, #232]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007d2e:	e00c      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3304      	adds	r3, #4
 8007d34:	2101      	movs	r1, #1
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 fca0 	bl	800967c <RCCEx_PLL2_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007d40:	e003      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	75fb      	strb	r3, [r7, #23]
      break;
 8007d46:	e000      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d109      	bne.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d50:	4b2f      	ldr	r3, [pc, #188]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d5c:	492c      	ldr	r1, [pc, #176]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	650b      	str	r3, [r1, #80]	; 0x50
 8007d62:	e001      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d032      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d81b      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007d7c:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007dbb 	.word	0x08007dbb
 8007d88:	08007d95 	.word	0x08007d95
 8007d8c:	08007da3 	.word	0x08007da3
 8007d90:	08007dbb 	.word	0x08007dbb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d94:	4b1e      	ldr	r3, [pc, #120]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007da0:	e00c      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3304      	adds	r3, #4
 8007da6:	2102      	movs	r1, #2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 fc67 	bl	800967c <RCCEx_PLL2_Config>
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007db2:	e003      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
      break;
 8007db8:	e000      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d109      	bne.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007dc2:	4b13      	ldr	r3, [pc, #76]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc6:	f023 0203 	bic.w	r2, r3, #3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dce:	4910      	ldr	r1, [pc, #64]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007dd4:	e001      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 808a 	beq.w	8007efc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a09      	ldr	r2, [pc, #36]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007df2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007df4:	f7fb f87e 	bl	8002ef4 <HAL_GetTick>
 8007df8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007dfa:	e00d      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dfc:	f7fb f87a 	bl	8002ef4 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b64      	cmp	r3, #100	; 0x64
 8007e08:	d906      	bls.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	75fb      	strb	r3, [r7, #23]
        break;
 8007e0e:	e009      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007e10:	58024400 	.word	0x58024400
 8007e14:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e18:	4bb9      	ldr	r3, [pc, #740]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0eb      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d166      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e2a:	4bb6      	ldr	r3, [pc, #728]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e34:	4053      	eors	r3, r2
 8007e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d013      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e3e:	4bb1      	ldr	r3, [pc, #708]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e48:	4bae      	ldr	r3, [pc, #696]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4c:	4aad      	ldr	r2, [pc, #692]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e54:	4bab      	ldr	r3, [pc, #684]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e58:	4aaa      	ldr	r2, [pc, #680]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e60:	4aa8      	ldr	r2, [pc, #672]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e70:	d115      	bne.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e72:	f7fb f83f 	bl	8002ef4 <HAL_GetTick>
 8007e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e78:	e00b      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e7a:	f7fb f83b 	bl	8002ef4 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d902      	bls.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	75fb      	strb	r3, [r7, #23]
            break;
 8007e90:	e005      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e92:	4b9c      	ldr	r3, [pc, #624]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0ed      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d126      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eb2:	d10d      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007eb4:	4b93      	ldr	r3, [pc, #588]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ec2:	0919      	lsrs	r1, r3, #4
 8007ec4:	4b90      	ldr	r3, [pc, #576]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ec6:	400b      	ands	r3, r1
 8007ec8:	498e      	ldr	r1, [pc, #568]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	610b      	str	r3, [r1, #16]
 8007ece:	e005      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007ed0:	4b8c      	ldr	r3, [pc, #560]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	4a8b      	ldr	r2, [pc, #556]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ed6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007eda:	6113      	str	r3, [r2, #16]
 8007edc:	4b89      	ldr	r3, [pc, #548]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007eea:	4986      	ldr	r1, [pc, #536]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	670b      	str	r3, [r1, #112]	; 0x70
 8007ef0:	e004      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	75bb      	strb	r3, [r7, #22]
 8007ef6:	e001      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d07e      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0c:	2b28      	cmp	r3, #40	; 0x28
 8007f0e:	d867      	bhi.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007f10:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f16:	bf00      	nop
 8007f18:	08007fe7 	.word	0x08007fe7
 8007f1c:	08007fe1 	.word	0x08007fe1
 8007f20:	08007fe1 	.word	0x08007fe1
 8007f24:	08007fe1 	.word	0x08007fe1
 8007f28:	08007fe1 	.word	0x08007fe1
 8007f2c:	08007fe1 	.word	0x08007fe1
 8007f30:	08007fe1 	.word	0x08007fe1
 8007f34:	08007fe1 	.word	0x08007fe1
 8007f38:	08007fbd 	.word	0x08007fbd
 8007f3c:	08007fe1 	.word	0x08007fe1
 8007f40:	08007fe1 	.word	0x08007fe1
 8007f44:	08007fe1 	.word	0x08007fe1
 8007f48:	08007fe1 	.word	0x08007fe1
 8007f4c:	08007fe1 	.word	0x08007fe1
 8007f50:	08007fe1 	.word	0x08007fe1
 8007f54:	08007fe1 	.word	0x08007fe1
 8007f58:	08007fcf 	.word	0x08007fcf
 8007f5c:	08007fe1 	.word	0x08007fe1
 8007f60:	08007fe1 	.word	0x08007fe1
 8007f64:	08007fe1 	.word	0x08007fe1
 8007f68:	08007fe1 	.word	0x08007fe1
 8007f6c:	08007fe1 	.word	0x08007fe1
 8007f70:	08007fe1 	.word	0x08007fe1
 8007f74:	08007fe1 	.word	0x08007fe1
 8007f78:	08007fe7 	.word	0x08007fe7
 8007f7c:	08007fe1 	.word	0x08007fe1
 8007f80:	08007fe1 	.word	0x08007fe1
 8007f84:	08007fe1 	.word	0x08007fe1
 8007f88:	08007fe1 	.word	0x08007fe1
 8007f8c:	08007fe1 	.word	0x08007fe1
 8007f90:	08007fe1 	.word	0x08007fe1
 8007f94:	08007fe1 	.word	0x08007fe1
 8007f98:	08007fe7 	.word	0x08007fe7
 8007f9c:	08007fe1 	.word	0x08007fe1
 8007fa0:	08007fe1 	.word	0x08007fe1
 8007fa4:	08007fe1 	.word	0x08007fe1
 8007fa8:	08007fe1 	.word	0x08007fe1
 8007fac:	08007fe1 	.word	0x08007fe1
 8007fb0:	08007fe1 	.word	0x08007fe1
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	08007fe7 	.word	0x08007fe7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f001 fb5a 	bl	800967c <RCCEx_PLL2_Config>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007fcc:	e00c      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3324      	adds	r3, #36	; 0x24
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 fc03 	bl	80097e0 <RCCEx_PLL3_Config>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007fde:	e003      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007fee:	4b45      	ldr	r3, [pc, #276]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ffa:	4942      	ldr	r1, [pc, #264]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	654b      	str	r3, [r1, #84]	; 0x54
 8008000:	e001      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d037      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	2b05      	cmp	r3, #5
 8008018:	d820      	bhi.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800801a:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	08008063 	.word	0x08008063
 8008024:	08008039 	.word	0x08008039
 8008028:	0800804b 	.word	0x0800804b
 800802c:	08008063 	.word	0x08008063
 8008030:	08008063 	.word	0x08008063
 8008034:	08008063 	.word	0x08008063
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3304      	adds	r3, #4
 800803c:	2101      	movs	r1, #1
 800803e:	4618      	mov	r0, r3
 8008040:	f001 fb1c 	bl	800967c <RCCEx_PLL2_Config>
 8008044:	4603      	mov	r3, r0
 8008046:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008048:	e00c      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3324      	adds	r3, #36	; 0x24
 800804e:	2101      	movs	r1, #1
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fbc5 	bl	80097e0 <RCCEx_PLL3_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	75fb      	strb	r3, [r7, #23]
      break;
 8008060:	e000      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8008062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800806a:	4b26      	ldr	r3, [pc, #152]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800806c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806e:	f023 0207 	bic.w	r2, r3, #7
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008076:	4923      	ldr	r1, [pc, #140]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008078:	4313      	orrs	r3, r2
 800807a:	654b      	str	r3, [r1, #84]	; 0x54
 800807c:	e001      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	d040      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008094:	2b05      	cmp	r3, #5
 8008096:	d821      	bhi.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008098:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809e:	bf00      	nop
 80080a0:	080080e3 	.word	0x080080e3
 80080a4:	080080b9 	.word	0x080080b9
 80080a8:	080080cb 	.word	0x080080cb
 80080ac:	080080e3 	.word	0x080080e3
 80080b0:	080080e3 	.word	0x080080e3
 80080b4:	080080e3 	.word	0x080080e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3304      	adds	r3, #4
 80080bc:	2101      	movs	r1, #1
 80080be:	4618      	mov	r0, r3
 80080c0:	f001 fadc 	bl	800967c <RCCEx_PLL2_Config>
 80080c4:	4603      	mov	r3, r0
 80080c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80080c8:	e00c      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3324      	adds	r3, #36	; 0x24
 80080ce:	2101      	movs	r1, #1
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 fb85 	bl	80097e0 <RCCEx_PLL3_Config>
 80080d6:	4603      	mov	r3, r0
 80080d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80080da:	e003      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	75fb      	strb	r3, [r7, #23]
      break;
 80080e0:	e000      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80080e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d110      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080ea:	4b06      	ldr	r3, [pc, #24]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ee:	f023 0207 	bic.w	r2, r3, #7
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080f8:	4902      	ldr	r1, [pc, #8]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	658b      	str	r3, [r1, #88]	; 0x58
 80080fe:	e007      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008100:	58024800 	.word	0x58024800
 8008104:	58024400 	.word	0x58024400
 8008108:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d04b      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008126:	d02e      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800812c:	d828      	bhi.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800812e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008132:	d02a      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008138:	d822      	bhi.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800813a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800813e:	d026      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008144:	d81c      	bhi.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800814a:	d010      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800814c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008150:	d816      	bhi.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d01d      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800815a:	d111      	bne.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3304      	adds	r3, #4
 8008160:	2100      	movs	r1, #0
 8008162:	4618      	mov	r0, r3
 8008164:	f001 fa8a 	bl	800967c <RCCEx_PLL2_Config>
 8008168:	4603      	mov	r3, r0
 800816a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800816c:	e012      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3324      	adds	r3, #36	; 0x24
 8008172:	2102      	movs	r1, #2
 8008174:	4618      	mov	r0, r3
 8008176:	f001 fb33 	bl	80097e0 <RCCEx_PLL3_Config>
 800817a:	4603      	mov	r3, r0
 800817c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800817e:	e009      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	75fb      	strb	r3, [r7, #23]
      break;
 8008184:	e006      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008186:	bf00      	nop
 8008188:	e004      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800818a:	bf00      	nop
 800818c:	e002      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800818e:	bf00      	nop
 8008190:	e000      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800819a:	4bb2      	ldr	r3, [pc, #712]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800819c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a8:	49ae      	ldr	r1, [pc, #696]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	654b      	str	r3, [r1, #84]	; 0x54
 80081ae:	e001      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d04b      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80081ca:	d02e      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80081cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80081d0:	d828      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80081d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d6:	d02a      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80081d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081dc:	d822      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80081de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e2:	d026      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80081e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e8:	d81c      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80081ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ee:	d010      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80081f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f4:	d816      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d01d      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80081fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081fe:	d111      	bne.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3304      	adds	r3, #4
 8008204:	2100      	movs	r1, #0
 8008206:	4618      	mov	r0, r3
 8008208:	f001 fa38 	bl	800967c <RCCEx_PLL2_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008210:	e012      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3324      	adds	r3, #36	; 0x24
 8008216:	2102      	movs	r1, #2
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fae1 	bl	80097e0 <RCCEx_PLL3_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008222:	e009      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
      break;
 8008228:	e006      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800822a:	bf00      	nop
 800822c:	e004      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800822e:	bf00      	nop
 8008230:	e002      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008232:	bf00      	nop
 8008234:	e000      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800823e:	4b89      	ldr	r3, [pc, #548]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008242:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800824c:	4985      	ldr	r1, [pc, #532]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800824e:	4313      	orrs	r3, r2
 8008250:	658b      	str	r3, [r1, #88]	; 0x58
 8008252:	e001      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008260:	2b00      	cmp	r3, #0
 8008262:	d04b      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800826a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800826e:	d02e      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008270:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008274:	d828      	bhi.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827a:	d02a      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800827c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008280:	d822      	bhi.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008282:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008286:	d026      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008288:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800828c:	d81c      	bhi.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800828e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008292:	d010      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008298:	d816      	bhi.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d01d      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800829e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082a2:	d111      	bne.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3304      	adds	r3, #4
 80082a8:	2100      	movs	r1, #0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 f9e6 	bl	800967c <RCCEx_PLL2_Config>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80082b4:	e012      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3324      	adds	r3, #36	; 0x24
 80082ba:	2102      	movs	r1, #2
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 fa8f 	bl	80097e0 <RCCEx_PLL3_Config>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80082c6:	e009      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	75fb      	strb	r3, [r7, #23]
      break;
 80082cc:	e006      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80082ce:	bf00      	nop
 80082d0:	e004      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80082d2:	bf00      	nop
 80082d4:	e002      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80082d6:	bf00      	nop
 80082d8:	e000      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80082da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10a      	bne.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80082e2:	4b60      	ldr	r3, [pc, #384]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80082e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082f0:	495c      	ldr	r1, [pc, #368]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	658b      	str	r3, [r1, #88]	; 0x58
 80082f6:	e001      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	2b00      	cmp	r3, #0
 8008306:	d018      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008310:	d10a      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	3324      	adds	r3, #36	; 0x24
 8008316:	2102      	movs	r1, #2
 8008318:	4618      	mov	r0, r3
 800831a:	f001 fa61 	bl	80097e0 <RCCEx_PLL3_Config>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008328:	4b4e      	ldr	r3, [pc, #312]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800832a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008334:	494b      	ldr	r1, [pc, #300]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008336:	4313      	orrs	r3, r2
 8008338:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0310 	and.w	r3, r3, #16
 8008342:	2b00      	cmp	r3, #0
 8008344:	d01a      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008350:	d10a      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3324      	adds	r3, #36	; 0x24
 8008356:	2102      	movs	r1, #2
 8008358:	4618      	mov	r0, r3
 800835a:	f001 fa41 	bl	80097e0 <RCCEx_PLL3_Config>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008368:	4b3e      	ldr	r3, [pc, #248]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800836a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008376:	493b      	ldr	r1, [pc, #236]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008378:	4313      	orrs	r3, r2
 800837a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d034      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800838e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008392:	d01d      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008398:	d817      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800839e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a2:	d009      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80083a4:	e011      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3304      	adds	r3, #4
 80083aa:	2100      	movs	r1, #0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 f965 	bl	800967c <RCCEx_PLL2_Config>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80083b6:	e00c      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3324      	adds	r3, #36	; 0x24
 80083bc:	2102      	movs	r1, #2
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 fa0e 	bl	80097e0 <RCCEx_PLL3_Config>
 80083c4:	4603      	mov	r3, r0
 80083c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80083c8:	e003      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	75fb      	strb	r3, [r7, #23]
      break;
 80083ce:	e000      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80083d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10a      	bne.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083d8:	4b22      	ldr	r3, [pc, #136]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80083da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083e6:	491f      	ldr	r1, [pc, #124]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	658b      	str	r3, [r1, #88]	; 0x58
 80083ec:	e001      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d036      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008404:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008408:	d01c      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800840a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800840e:	d816      	bhi.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008414:	d003      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800841a:	d007      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800841c:	e00f      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800841e:	4b11      	ldr	r3, [pc, #68]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	4a10      	ldr	r2, [pc, #64]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800842a:	e00c      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3324      	adds	r3, #36	; 0x24
 8008430:	2101      	movs	r1, #1
 8008432:	4618      	mov	r0, r3
 8008434:	f001 f9d4 	bl	80097e0 <RCCEx_PLL3_Config>
 8008438:	4603      	mov	r3, r0
 800843a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800843c:	e003      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	75fb      	strb	r3, [r7, #23]
      break;
 8008442:	e000      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10d      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800844c:	4b05      	ldr	r3, [pc, #20]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800844e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800845a:	4902      	ldr	r1, [pc, #8]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800845c:	4313      	orrs	r3, r2
 800845e:	654b      	str	r3, [r1, #84]	; 0x54
 8008460:	e004      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008462:	bf00      	nop
 8008464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
 800846a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d029      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008484:	d007      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008486:	e00f      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008488:	4b61      	ldr	r3, [pc, #388]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	4a60      	ldr	r2, [pc, #384]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800848e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008494:	e00b      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3304      	adds	r3, #4
 800849a:	2102      	movs	r1, #2
 800849c:	4618      	mov	r0, r3
 800849e:	f001 f8ed 	bl	800967c <RCCEx_PLL2_Config>
 80084a2:	4603      	mov	r3, r0
 80084a4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80084a6:	e002      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	75fb      	strb	r3, [r7, #23]
      break;
 80084ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d109      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80084b4:	4b56      	ldr	r3, [pc, #344]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c0:	4953      	ldr	r1, [pc, #332]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80084c6:	e001      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
 80084ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3324      	adds	r3, #36	; 0x24
 80084dc:	2102      	movs	r1, #2
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 f97e 	bl	80097e0 <RCCEx_PLL3_Config>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d030      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008502:	d017      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008508:	d811      	bhi.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800850a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800850e:	d013      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008514:	d80b      	bhi.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d010      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800851a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800851e:	d106      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008520:	4b3b      	ldr	r3, [pc, #236]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	4a3a      	ldr	r2, [pc, #232]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800852a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800852c:	e007      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	75fb      	strb	r3, [r7, #23]
      break;
 8008532:	e004      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008534:	bf00      	nop
 8008536:	e002      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008538:	bf00      	nop
 800853a:	e000      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800853c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d109      	bne.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008544:	4b32      	ldr	r3, [pc, #200]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008550:	492f      	ldr	r1, [pc, #188]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008552:	4313      	orrs	r3, r2
 8008554:	654b      	str	r3, [r1, #84]	; 0x54
 8008556:	e001      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d008      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008568:	4b29      	ldr	r3, [pc, #164]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800856a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800856c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008574:	4926      	ldr	r1, [pc, #152]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008576:	4313      	orrs	r3, r2
 8008578:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d008      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008586:	4b22      	ldr	r3, [pc, #136]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800858a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008592:	491f      	ldr	r1, [pc, #124]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008594:	4313      	orrs	r3, r2
 8008596:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00d      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085a4:	4b1a      	ldr	r3, [pc, #104]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	4a19      	ldr	r2, [pc, #100]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80085aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085ae:	6113      	str	r3, [r2, #16]
 80085b0:	4b17      	ldr	r3, [pc, #92]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80085b2:	691a      	ldr	r2, [r3, #16]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085ba:	4915      	ldr	r1, [pc, #84]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	da08      	bge.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80085c8:	4b11      	ldr	r3, [pc, #68]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80085ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d4:	490e      	ldr	r1, [pc, #56]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80085e6:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80085e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085f4:	4906      	ldr	r1, [pc, #24]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80085fa:	7dbb      	ldrb	r3, [r7, #22]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	e000      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	58024400 	.word	0x58024400

08008614 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b090      	sub	sp, #64	; 0x40
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008622:	f040 8089 	bne.w	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008626:	4b95      	ldr	r3, [pc, #596]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800862a:	f003 0307 	and.w	r3, r3, #7
 800862e:	633b      	str	r3, [r7, #48]	; 0x30
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	2b04      	cmp	r3, #4
 8008634:	d87d      	bhi.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008636:	a201      	add	r2, pc, #4	; (adr r2, 800863c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	08008651 	.word	0x08008651
 8008640:	08008675 	.word	0x08008675
 8008644:	08008699 	.word	0x08008699
 8008648:	0800872d 	.word	0x0800872d
 800864c:	080086bd 	.word	0x080086bd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008650:	4b8a      	ldr	r3, [pc, #552]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800865c:	d107      	bne.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800865e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008662:	4618      	mov	r0, r3
 8008664:	f000 feb8 	bl	80093d8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800866c:	e3ed      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008672:	e3ea      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008674:	4b81      	ldr	r3, [pc, #516]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800867c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008680:	d107      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008682:	f107 0318 	add.w	r3, r7, #24
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fbfe 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008690:	e3db      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008696:	e3d8      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008698:	4b78      	ldr	r3, [pc, #480]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a4:	d107      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a6:	f107 030c 	add.w	r3, r7, #12
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fd40 	bl	8009130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086b4:	e3c9      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ba:	e3c6      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80086bc:	4b6f      	ldr	r3, [pc, #444]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086c4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086c6:	4b6d      	ldr	r3, [pc, #436]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d10c      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80086d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d109      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086d8:	4b68      	ldr	r3, [pc, #416]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	08db      	lsrs	r3, r3, #3
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	4a67      	ldr	r2, [pc, #412]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80086e4:	fa22 f303 	lsr.w	r3, r2, r3
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ea:	e01e      	b.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086ec:	4b63      	ldr	r3, [pc, #396]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086f8:	d106      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80086fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008700:	d102      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008702:	4b60      	ldr	r3, [pc, #384]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008706:	e010      	b.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008708:	4b5c      	ldr	r3, [pc, #368]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008714:	d106      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800871c:	d102      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800871e:	4b5a      	ldr	r3, [pc, #360]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008722:	e002      	b.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008728:	e38f      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800872a:	e38e      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800872c:	4b57      	ldr	r3, [pc, #348]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008730:	e38b      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008736:	e388      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800873e:	f040 80a7 	bne.w	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008742:	4b4e      	ldr	r3, [pc, #312]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008746:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800874a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008752:	d054      	beq.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800875a:	f200 808b 	bhi.w	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008764:	f000 8083 	beq.w	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800876e:	f200 8081 	bhi.w	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008778:	d02f      	beq.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008780:	d878      	bhi.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800878e:	d012      	beq.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008790:	e070      	b.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008792:	4b3a      	ldr	r3, [pc, #232]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800879a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800879e:	d107      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 fe17 	bl	80093d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087ae:	e34c      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087b4:	e349      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087b6:	4b31      	ldr	r3, [pc, #196]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087c2:	d107      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c4:	f107 0318 	add.w	r3, r7, #24
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fb5d 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087d2:	e33a      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087d8:	e337      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087da:	4b28      	ldr	r3, [pc, #160]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e6:	d107      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e8:	f107 030c 	add.w	r3, r7, #12
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fc9f 	bl	8009130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087f6:	e328      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087fc:	e325      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80087fe:	4b1f      	ldr	r3, [pc, #124]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008802:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008806:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008808:	4b1c      	ldr	r3, [pc, #112]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b04      	cmp	r3, #4
 8008812:	d10c      	bne.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	2b00      	cmp	r3, #0
 8008818:	d109      	bne.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800881a:	4b18      	ldr	r3, [pc, #96]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	08db      	lsrs	r3, r3, #3
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	4a16      	ldr	r2, [pc, #88]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008826:	fa22 f303 	lsr.w	r3, r2, r3
 800882a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800882c:	e01e      	b.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800882e:	4b13      	ldr	r3, [pc, #76]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800883a:	d106      	bne.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800883c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008842:	d102      	bne.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008848:	e010      	b.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800884a:	4b0c      	ldr	r3, [pc, #48]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008856:	d106      	bne.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800885e:	d102      	bne.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008860:	4b09      	ldr	r3, [pc, #36]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008864:	e002      	b.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800886a:	e2ee      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800886c:	e2ed      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800886e:	4b07      	ldr	r3, [pc, #28]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008872:	e2ea      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008874:	2300      	movs	r3, #0
 8008876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008878:	e2e7      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800887a:	bf00      	nop
 800887c:	58024400 	.word	0x58024400
 8008880:	03d09000 	.word	0x03d09000
 8008884:	003d0900 	.word	0x003d0900
 8008888:	017d7840 	.word	0x017d7840
 800888c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008896:	f040 809c 	bne.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800889a:	4b9e      	ldr	r3, [pc, #632]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800889c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80088a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088aa:	d054      	beq.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088b2:	f200 808b 	bhi.w	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088bc:	f000 8083 	beq.w	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088c6:	f200 8081 	bhi.w	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088d0:	d02f      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088d8:	d878      	bhi.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d004      	beq.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088e6:	d012      	beq.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80088e8:	e070      	b.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088ea:	4b8a      	ldr	r3, [pc, #552]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088f6:	d107      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fd6b 	bl	80093d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008906:	e2a0      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800890c:	e29d      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800890e:	4b81      	ldr	r3, [pc, #516]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800891a:	d107      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800891c:	f107 0318 	add.w	r3, r7, #24
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fab1 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800892a:	e28e      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008930:	e28b      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008932:	4b78      	ldr	r3, [pc, #480]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800893a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800893e:	d107      	bne.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008940:	f107 030c 	add.w	r3, r7, #12
 8008944:	4618      	mov	r0, r3
 8008946:	f000 fbf3 	bl	8009130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800894e:	e27c      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008950:	2300      	movs	r3, #0
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008954:	e279      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008956:	4b6f      	ldr	r3, [pc, #444]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800895a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800895e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008960:	4b6c      	ldr	r3, [pc, #432]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b04      	cmp	r3, #4
 800896a:	d10c      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008972:	4b68      	ldr	r3, [pc, #416]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	08db      	lsrs	r3, r3, #3
 8008978:	f003 0303 	and.w	r3, r3, #3
 800897c:	4a66      	ldr	r2, [pc, #408]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800897e:	fa22 f303 	lsr.w	r3, r2, r3
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008984:	e01e      	b.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008986:	4b63      	ldr	r3, [pc, #396]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008992:	d106      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8008994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800899a:	d102      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800899c:	4b5f      	ldr	r3, [pc, #380]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a0:	e010      	b.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089a2:	4b5c      	ldr	r3, [pc, #368]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ae:	d106      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80089b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b6:	d102      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80089b8:	4b59      	ldr	r3, [pc, #356]	; (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089bc:	e002      	b.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80089c2:	e242      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80089c4:	e241      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80089c6:	4b57      	ldr	r3, [pc, #348]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80089c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ca:	e23e      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d0:	e23b      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d8:	f040 80a6 	bne.w	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80089dc:	4b4d      	ldr	r3, [pc, #308]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80089e4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089ec:	d054      	beq.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80089ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089f4:	f200 808b 	bhi.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80089f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089fe:	f000 8083 	beq.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a08:	f200 8081 	bhi.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a12:	d02f      	beq.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a1a:	d878      	bhi.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d004      	beq.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a28:	d012      	beq.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8008a2a:	e070      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a2c:	4b39      	ldr	r3, [pc, #228]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a38:	d107      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fcca 	bl	80093d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a48:	e1ff      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a4e:	e1fc      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a50:	4b30      	ldr	r3, [pc, #192]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a5c:	d107      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5e:	f107 0318 	add.w	r3, r7, #24
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fa10 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a6c:	e1ed      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a72:	e1ea      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a74:	4b27      	ldr	r3, [pc, #156]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a80:	d107      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fb52 	bl	8009130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a90:	e1db      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a96:	e1d8      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a98:	4b1e      	ldr	r3, [pc, #120]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008aa0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008aa2:	4b1c      	ldr	r3, [pc, #112]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0304 	and.w	r3, r3, #4
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d10c      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8008aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d109      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ab4:	4b17      	ldr	r3, [pc, #92]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	08db      	lsrs	r3, r3, #3
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	4a16      	ldr	r2, [pc, #88]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ac6:	e01e      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ac8:	4b12      	ldr	r3, [pc, #72]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad4:	d106      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008adc:	d102      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae2:	e010      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ae4:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008af0:	d106      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af8:	d102      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008afa:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008afe:	e002      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b04:	e1a1      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008b06:	e1a0      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b08:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b0c:	e19d      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b12:	e19a      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008b14:	58024400 	.word	0x58024400
 8008b18:	03d09000 	.word	0x03d09000
 8008b1c:	003d0900 	.word	0x003d0900
 8008b20:	017d7840 	.word	0x017d7840
 8008b24:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b2e:	d173      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008b30:	4b9a      	ldr	r3, [pc, #616]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b38:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b40:	d02f      	beq.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b48:	d863      	bhi.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b56:	d012      	beq.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008b58:	e05b      	b.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b5a:	4b90      	ldr	r3, [pc, #576]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b66:	d107      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b68:	f107 0318 	add.w	r3, r7, #24
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f98b 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b76:	e168      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b7c:	e165      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b7e:	4b87      	ldr	r3, [pc, #540]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b8a:	d107      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b8c:	f107 030c 	add.w	r3, r7, #12
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 facd 	bl	8009130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b9a:	e156      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ba0:	e153      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ba2:	4b7e      	ldr	r3, [pc, #504]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ba6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008baa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bac:	4b7b      	ldr	r3, [pc, #492]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d10c      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d109      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bbe:	4b77      	ldr	r3, [pc, #476]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	08db      	lsrs	r3, r3, #3
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	4a75      	ldr	r2, [pc, #468]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008bca:	fa22 f303 	lsr.w	r3, r2, r3
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bd0:	e01e      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bd2:	4b72      	ldr	r3, [pc, #456]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bde:	d106      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008be6:	d102      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008be8:	4b6e      	ldr	r3, [pc, #440]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bec:	e010      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bee:	4b6b      	ldr	r3, [pc, #428]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bfa:	d106      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c02:	d102      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c04:	4b68      	ldr	r3, [pc, #416]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c08:	e002      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c0e:	e11c      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008c10:	e11b      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c16:	e118      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c1e:	d133      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008c20:	4b5e      	ldr	r3, [pc, #376]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c28:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d004      	beq.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c36:	d012      	beq.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008c38:	e023      	b.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c3a:	4b58      	ldr	r3, [pc, #352]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c46:	d107      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fbc3 	bl	80093d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c56:	e0f8      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c5c:	e0f5      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c5e:	4b4f      	ldr	r3, [pc, #316]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c6a:	d107      	bne.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c6c:	f107 0318 	add.w	r3, r7, #24
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 f909 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c7a:	e0e6      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c80:	e0e3      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c86:	e0e0      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c8e:	f040 808d 	bne.w	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008c92:	4b42      	ldr	r3, [pc, #264]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c96:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008c9a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ca2:	d06b      	beq.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008caa:	d874      	bhi.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb2:	d056      	beq.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cba:	d86c      	bhi.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cc2:	d03b      	beq.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cca:	d864      	bhi.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cd2:	d021      	beq.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cda:	d85c      	bhi.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ce8:	d004      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008cea:	e054      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008cec:	f000 f8b6 	bl	8008e5c <HAL_RCCEx_GetD3PCLK1Freq>
 8008cf0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008cf2:	e0aa      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cf4:	4b29      	ldr	r3, [pc, #164]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d00:	d107      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d02:	f107 0318 	add.w	r3, r7, #24
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f8be 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d10:	e09b      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d16:	e098      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d18:	4b20      	ldr	r3, [pc, #128]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d24:	d107      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d26:	f107 030c 	add.w	r3, r7, #12
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 fa00 	bl	8009130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d34:	e089      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d3a:	e086      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d3c:	4b17      	ldr	r3, [pc, #92]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	d109      	bne.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d48:	4b14      	ldr	r3, [pc, #80]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	08db      	lsrs	r3, r3, #3
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	4a13      	ldr	r2, [pc, #76]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008d54:	fa22 f303 	lsr.w	r3, r2, r3
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d5a:	e076      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d60:	e073      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d62:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6e:	d102      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008d70:	4b0c      	ldr	r3, [pc, #48]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008d72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d74:	e069      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d7a:	e066      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d7c:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d88:	d102      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008d8a:	4b07      	ldr	r3, [pc, #28]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d8e:	e05c      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d94:	e059      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d9a:	e056      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	03d09000 	.word	0x03d09000
 8008da4:	003d0900 	.word	0x003d0900
 8008da8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db2:	d148      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008db4:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dc4:	d02a      	beq.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dcc:	d838      	bhi.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d004      	beq.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dda:	d00d      	beq.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008ddc:	e030      	b.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008dde:	4b1d      	ldr	r3, [pc, #116]	; (8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dea:	d102      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008dec:	4b1a      	ldr	r3, [pc, #104]	; (8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008dee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008df0:	e02b      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008df6:	e028      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008df8:	4b16      	ldr	r3, [pc, #88]	; (8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e04:	d107      	bne.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fae4 	bl	80093d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e14:	e019      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1a:	e016      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e28:	d107      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e2a:	f107 0318 	add.w	r3, r7, #24
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f82a 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e38:	e007      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e3e:	e004      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e44:	e001      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3740      	adds	r7, #64	; 0x40
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	58024400 	.word	0x58024400
 8008e58:	017d7840 	.word	0x017d7840

08008e5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008e60:	f7fe fc82 	bl	8007768 <HAL_RCC_GetHCLKFreq>
 8008e64:	4602      	mov	r2, r0
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	091b      	lsrs	r3, r3, #4
 8008e6c:	f003 0307 	and.w	r3, r3, #7
 8008e70:	4904      	ldr	r1, [pc, #16]	; (8008e84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008e72:	5ccb      	ldrb	r3, [r1, r3]
 8008e74:	f003 031f 	and.w	r3, r3, #31
 8008e78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	58024400 	.word	0x58024400
 8008e84:	0800eac4 	.word	0x0800eac4

08008e88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b089      	sub	sp, #36	; 0x24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e90:	4ba1      	ldr	r3, [pc, #644]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e94:	f003 0303 	and.w	r3, r3, #3
 8008e98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008e9a:	4b9f      	ldr	r3, [pc, #636]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9e:	0b1b      	lsrs	r3, r3, #12
 8008ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ea4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ea6:	4b9c      	ldr	r3, [pc, #624]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eaa:	091b      	lsrs	r3, r3, #4
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008eb2:	4b99      	ldr	r3, [pc, #612]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb6:	08db      	lsrs	r3, r3, #3
 8008eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	fb02 f303 	mul.w	r3, r2, r3
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 8111 	beq.w	80090f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	f000 8083 	beq.w	8008fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	f200 80a1 	bhi.w	8009028 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d056      	beq.n	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ef2:	e099      	b.n	8009028 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ef4:	4b88      	ldr	r3, [pc, #544]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d02d      	beq.n	8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f00:	4b85      	ldr	r3, [pc, #532]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	08db      	lsrs	r3, r3, #3
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	4a84      	ldr	r2, [pc, #528]	; (800911c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f10:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	ee07 3a90 	vmov	s15, r3
 8008f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2a:	4b7b      	ldr	r3, [pc, #492]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008f5a:	e087      	b.n	800906c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6e:	4b6a      	ldr	r3, [pc, #424]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f9e:	e065      	b.n	800906c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008faa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009128 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb2:	4b59      	ldr	r3, [pc, #356]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fe2:	e043      	b.n	800906c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800912c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff6:	4b48      	ldr	r3, [pc, #288]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009006:	ed97 6a03 	vldr	s12, [r7, #12]
 800900a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800900e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800901a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009026:	e021      	b.n	800906c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009032:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009128 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903a:	4b37      	ldr	r3, [pc, #220]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800903c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904a:	ed97 6a03 	vldr	s12, [r7, #12]
 800904e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800905e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800906a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800906c:	4b2a      	ldr	r3, [pc, #168]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	0a5b      	lsrs	r3, r3, #9
 8009072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009086:	edd7 6a07 	vldr	s13, [r7, #28]
 800908a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800908e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009092:	ee17 2a90 	vmov	r2, s15
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800909a:	4b1f      	ldr	r3, [pc, #124]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	0c1b      	lsrs	r3, r3, #16
 80090a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a4:	ee07 3a90 	vmov	s15, r3
 80090a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80090b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090c0:	ee17 2a90 	vmov	r2, s15
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80090c8:	4b13      	ldr	r3, [pc, #76]	; (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090cc:	0e1b      	lsrs	r3, r3, #24
 80090ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ee:	ee17 2a90 	vmov	r2, s15
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80090f6:	e008      	b.n	800910a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	609a      	str	r2, [r3, #8]
}
 800910a:	bf00      	nop
 800910c:	3724      	adds	r7, #36	; 0x24
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	58024400 	.word	0x58024400
 800911c:	03d09000 	.word	0x03d09000
 8009120:	46000000 	.word	0x46000000
 8009124:	4c742400 	.word	0x4c742400
 8009128:	4a742400 	.word	0x4a742400
 800912c:	4bbebc20 	.word	0x4bbebc20

08009130 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009130:	b480      	push	{r7}
 8009132:	b089      	sub	sp, #36	; 0x24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009138:	4ba1      	ldr	r3, [pc, #644]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800913a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913c:	f003 0303 	and.w	r3, r3, #3
 8009140:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009142:	4b9f      	ldr	r3, [pc, #636]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009146:	0d1b      	lsrs	r3, r3, #20
 8009148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800914c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800914e:	4b9c      	ldr	r3, [pc, #624]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800915a:	4b99      	ldr	r3, [pc, #612]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800915c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915e:	08db      	lsrs	r3, r3, #3
 8009160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	fb02 f303 	mul.w	r3, r2, r3
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009172:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 8111 	beq.w	80093a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	2b02      	cmp	r3, #2
 8009182:	f000 8083 	beq.w	800928c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	2b02      	cmp	r3, #2
 800918a:	f200 80a1 	bhi.w	80092d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d056      	beq.n	8009248 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800919a:	e099      	b.n	80092d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800919c:	4b88      	ldr	r3, [pc, #544]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d02d      	beq.n	8009204 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091a8:	4b85      	ldr	r3, [pc, #532]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	08db      	lsrs	r3, r3, #3
 80091ae:	f003 0303 	and.w	r3, r3, #3
 80091b2:	4a84      	ldr	r2, [pc, #528]	; (80093c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
 80091b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	ee07 3a90 	vmov	s15, r3
 80091c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d2:	4b7b      	ldr	r3, [pc, #492]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009202:	e087      	b.n	8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009216:	4b6a      	ldr	r3, [pc, #424]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009226:	ed97 6a03 	vldr	s12, [r7, #12]
 800922a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800922e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800923a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009246:	e065      	b.n	8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	ee07 3a90 	vmov	s15, r3
 800924e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009252:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80093d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800925a:	4b59      	ldr	r3, [pc, #356]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800926a:	ed97 6a03 	vldr	s12, [r7, #12]
 800926e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800927a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800927e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009286:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800928a:	e043      	b.n	8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009296:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80093d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800929a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800929e:	4b48      	ldr	r3, [pc, #288]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80092b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092ce:	e021      	b.n	8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80093d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80092de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e2:	4b37      	ldr	r3, [pc, #220]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ea:	ee07 3a90 	vmov	s15, r3
 80092ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800930a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009312:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009314:	4b2a      	ldr	r3, [pc, #168]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009318:	0a5b      	lsrs	r3, r3, #9
 800931a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800932a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800932e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800933a:	ee17 2a90 	vmov	r2, s15
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009342:	4b1f      	ldr	r3, [pc, #124]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009346:	0c1b      	lsrs	r3, r3, #16
 8009348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800935c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009368:	ee17 2a90 	vmov	r2, s15
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009370:	4b13      	ldr	r3, [pc, #76]	; (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009374:	0e1b      	lsrs	r3, r3, #24
 8009376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800938a:	edd7 6a07 	vldr	s13, [r7, #28]
 800938e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009396:	ee17 2a90 	vmov	r2, s15
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800939e:	e008      	b.n	80093b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	609a      	str	r2, [r3, #8]
}
 80093b2:	bf00      	nop
 80093b4:	3724      	adds	r7, #36	; 0x24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	58024400 	.word	0x58024400
 80093c4:	03d09000 	.word	0x03d09000
 80093c8:	46000000 	.word	0x46000000
 80093cc:	4c742400 	.word	0x4c742400
 80093d0:	4a742400 	.word	0x4a742400
 80093d4:	4bbebc20 	.word	0x4bbebc20

080093d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80093d8:	b480      	push	{r7}
 80093da:	b089      	sub	sp, #36	; 0x24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093e0:	4ba0      	ldr	r3, [pc, #640]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e4:	f003 0303 	and.w	r3, r3, #3
 80093e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80093ea:	4b9e      	ldr	r3, [pc, #632]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ee:	091b      	lsrs	r3, r3, #4
 80093f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80093f6:	4b9b      	ldr	r3, [pc, #620]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009400:	4b98      	ldr	r3, [pc, #608]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009404:	08db      	lsrs	r3, r3, #3
 8009406:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	fb02 f303 	mul.w	r3, r2, r3
 8009410:	ee07 3a90 	vmov	s15, r3
 8009414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009418:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 8111 	beq.w	8009646 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	2b02      	cmp	r3, #2
 8009428:	f000 8083 	beq.w	8009532 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	2b02      	cmp	r3, #2
 8009430:	f200 80a1 	bhi.w	8009576 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d056      	beq.n	80094ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009440:	e099      	b.n	8009576 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009442:	4b88      	ldr	r3, [pc, #544]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 0320 	and.w	r3, r3, #32
 800944a:	2b00      	cmp	r3, #0
 800944c:	d02d      	beq.n	80094aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800944e:	4b85      	ldr	r3, [pc, #532]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	08db      	lsrs	r3, r3, #3
 8009454:	f003 0303 	and.w	r3, r3, #3
 8009458:	4a83      	ldr	r2, [pc, #524]	; (8009668 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800945a:	fa22 f303 	lsr.w	r3, r2, r3
 800945e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	ee07 3a90 	vmov	s15, r3
 8009470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009478:	4b7a      	ldr	r3, [pc, #488]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800947a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009480:	ee07 3a90 	vmov	s15, r3
 8009484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009488:	ed97 6a03 	vldr	s12, [r7, #12]
 800948c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800966c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80094a8:	e087      	b.n	80095ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80094b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094bc:	4b69      	ldr	r3, [pc, #420]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c4:	ee07 3a90 	vmov	s15, r3
 80094c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800966c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094ec:	e065      	b.n	80095ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	ee07 3a90 	vmov	s15, r3
 80094f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009674 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80094fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009500:	4b58      	ldr	r3, [pc, #352]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009508:	ee07 3a90 	vmov	s15, r3
 800950c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009510:	ed97 6a03 	vldr	s12, [r7, #12]
 8009514:	eddf 5a55 	vldr	s11, [pc, #340]	; 800966c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009520:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009530:	e043      	b.n	80095ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	ee07 3a90 	vmov	s15, r3
 8009538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009678 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009544:	4b47      	ldr	r3, [pc, #284]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954c:	ee07 3a90 	vmov	s15, r3
 8009550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009554:	ed97 6a03 	vldr	s12, [r7, #12]
 8009558:	eddf 5a44 	vldr	s11, [pc, #272]	; 800966c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800955c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800956c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009570:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009574:	e021      	b.n	80095ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	ee07 3a90 	vmov	s15, r3
 800957c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009580:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009588:	4b36      	ldr	r3, [pc, #216]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800958a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009590:	ee07 3a90 	vmov	s15, r3
 8009594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009598:	ed97 6a03 	vldr	s12, [r7, #12]
 800959c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800966c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80095ba:	4b2a      	ldr	r3, [pc, #168]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095be:	0a5b      	lsrs	r3, r3, #9
 80095c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095e0:	ee17 2a90 	vmov	r2, s15
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80095e8:	4b1e      	ldr	r3, [pc, #120]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ec:	0c1b      	lsrs	r3, r3, #16
 80095ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009602:	edd7 6a07 	vldr	s13, [r7, #28]
 8009606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800960a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800960e:	ee17 2a90 	vmov	r2, s15
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009616:	4b13      	ldr	r3, [pc, #76]	; (8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	0e1b      	lsrs	r3, r3, #24
 800961c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009620:	ee07 3a90 	vmov	s15, r3
 8009624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800962c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009630:	edd7 6a07 	vldr	s13, [r7, #28]
 8009634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800963c:	ee17 2a90 	vmov	r2, s15
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009644:	e008      	b.n	8009658 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	609a      	str	r2, [r3, #8]
}
 8009658:	bf00      	nop
 800965a:	3724      	adds	r7, #36	; 0x24
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	58024400 	.word	0x58024400
 8009668:	03d09000 	.word	0x03d09000
 800966c:	46000000 	.word	0x46000000
 8009670:	4c742400 	.word	0x4c742400
 8009674:	4a742400 	.word	0x4a742400
 8009678:	4bbebc20 	.word	0x4bbebc20

0800967c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800968a:	4b53      	ldr	r3, [pc, #332]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 800968c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	2b03      	cmp	r3, #3
 8009694:	d101      	bne.n	800969a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e099      	b.n	80097ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800969a:	4b4f      	ldr	r3, [pc, #316]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a4e      	ldr	r2, [pc, #312]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 80096a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096a6:	f7f9 fc25 	bl	8002ef4 <HAL_GetTick>
 80096aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096ac:	e008      	b.n	80096c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80096ae:	f7f9 fc21 	bl	8002ef4 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d901      	bls.n	80096c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e086      	b.n	80097ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096c0:	4b45      	ldr	r3, [pc, #276]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1f0      	bne.n	80096ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80096cc:	4b42      	ldr	r3, [pc, #264]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 80096ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	031b      	lsls	r3, r3, #12
 80096da:	493f      	ldr	r1, [pc, #252]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	628b      	str	r3, [r1, #40]	; 0x28
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	3b01      	subs	r3, #1
 80096f0:	025b      	lsls	r3, r3, #9
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	041b      	lsls	r3, r3, #16
 80096fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009702:	431a      	orrs	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	3b01      	subs	r3, #1
 800970a:	061b      	lsls	r3, r3, #24
 800970c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009710:	4931      	ldr	r1, [pc, #196]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009712:	4313      	orrs	r3, r2
 8009714:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009716:	4b30      	ldr	r3, [pc, #192]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	492d      	ldr	r1, [pc, #180]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009724:	4313      	orrs	r3, r2
 8009726:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009728:	4b2b      	ldr	r3, [pc, #172]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	f023 0220 	bic.w	r2, r3, #32
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	4928      	ldr	r1, [pc, #160]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009736:	4313      	orrs	r3, r2
 8009738:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800973a:	4b27      	ldr	r3, [pc, #156]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 800973c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973e:	4a26      	ldr	r2, [pc, #152]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009740:	f023 0310 	bic.w	r3, r3, #16
 8009744:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009746:	4b24      	ldr	r3, [pc, #144]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800974a:	4b24      	ldr	r3, [pc, #144]	; (80097dc <RCCEx_PLL2_Config+0x160>)
 800974c:	4013      	ands	r3, r2
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	69d2      	ldr	r2, [r2, #28]
 8009752:	00d2      	lsls	r2, r2, #3
 8009754:	4920      	ldr	r1, [pc, #128]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009756:	4313      	orrs	r3, r2
 8009758:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800975a:	4b1f      	ldr	r3, [pc, #124]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 800975c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975e:	4a1e      	ldr	r2, [pc, #120]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009760:	f043 0310 	orr.w	r3, r3, #16
 8009764:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d106      	bne.n	800977a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800976c:	4b1a      	ldr	r3, [pc, #104]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 800976e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009770:	4a19      	ldr	r2, [pc, #100]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009772:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009776:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009778:	e00f      	b.n	800979a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d106      	bne.n	800978e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009780:	4b15      	ldr	r3, [pc, #84]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	4a14      	ldr	r2, [pc, #80]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800978a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800978c:	e005      	b.n	800979a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800978e:	4b12      	ldr	r3, [pc, #72]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009792:	4a11      	ldr	r2, [pc, #68]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 8009794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009798:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800979a:	4b0f      	ldr	r3, [pc, #60]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a0e      	ldr	r2, [pc, #56]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 80097a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80097a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097a6:	f7f9 fba5 	bl	8002ef4 <HAL_GetTick>
 80097aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097ac:	e008      	b.n	80097c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80097ae:	f7f9 fba1 	bl	8002ef4 <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d901      	bls.n	80097c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e006      	b.n	80097ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097c0:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <RCCEx_PLL2_Config+0x15c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0f0      	beq.n	80097ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	58024400 	.word	0x58024400
 80097dc:	ffff0007 	.word	0xffff0007

080097e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097ee:	4b53      	ldr	r3, [pc, #332]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80097f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f2:	f003 0303 	and.w	r3, r3, #3
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d101      	bne.n	80097fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e099      	b.n	8009932 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80097fe:	4b4f      	ldr	r3, [pc, #316]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a4e      	ldr	r2, [pc, #312]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 8009804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800980a:	f7f9 fb73 	bl	8002ef4 <HAL_GetTick>
 800980e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009810:	e008      	b.n	8009824 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009812:	f7f9 fb6f 	bl	8002ef4 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	2b02      	cmp	r3, #2
 800981e:	d901      	bls.n	8009824 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e086      	b.n	8009932 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009824:	4b45      	ldr	r3, [pc, #276]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1f0      	bne.n	8009812 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009830:	4b42      	ldr	r3, [pc, #264]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 8009832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009834:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	051b      	lsls	r3, r3, #20
 800983e:	493f      	ldr	r1, [pc, #252]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 8009840:	4313      	orrs	r3, r2
 8009842:	628b      	str	r3, [r1, #40]	; 0x28
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	3b01      	subs	r3, #1
 800984a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	3b01      	subs	r3, #1
 8009854:	025b      	lsls	r3, r3, #9
 8009856:	b29b      	uxth	r3, r3
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	3b01      	subs	r3, #1
 8009860:	041b      	lsls	r3, r3, #16
 8009862:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	3b01      	subs	r3, #1
 800986e:	061b      	lsls	r3, r3, #24
 8009870:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009874:	4931      	ldr	r1, [pc, #196]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 8009876:	4313      	orrs	r3, r2
 8009878:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800987a:	4b30      	ldr	r3, [pc, #192]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	492d      	ldr	r1, [pc, #180]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 8009888:	4313      	orrs	r3, r2
 800988a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800988c:	4b2b      	ldr	r3, [pc, #172]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 800988e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009890:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	4928      	ldr	r1, [pc, #160]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 800989a:	4313      	orrs	r3, r2
 800989c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800989e:	4b27      	ldr	r3, [pc, #156]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a2:	4a26      	ldr	r2, [pc, #152]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80098aa:	4b24      	ldr	r3, [pc, #144]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ae:	4b24      	ldr	r3, [pc, #144]	; (8009940 <RCCEx_PLL3_Config+0x160>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	69d2      	ldr	r2, [r2, #28]
 80098b6:	00d2      	lsls	r2, r2, #3
 80098b8:	4920      	ldr	r1, [pc, #128]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80098be:	4b1f      	ldr	r3, [pc, #124]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	4a1e      	ldr	r2, [pc, #120]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d106      	bne.n	80098de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80098d0:	4b1a      	ldr	r3, [pc, #104]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	4a19      	ldr	r2, [pc, #100]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80098da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80098dc:	e00f      	b.n	80098fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d106      	bne.n	80098f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80098e4:	4b15      	ldr	r3, [pc, #84]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	4a14      	ldr	r2, [pc, #80]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80098ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80098f0:	e005      	b.n	80098fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80098f2:	4b12      	ldr	r3, [pc, #72]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f6:	4a11      	ldr	r2, [pc, #68]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 80098f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80098fe:	4b0f      	ldr	r3, [pc, #60]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a0e      	ldr	r2, [pc, #56]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 8009904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800990a:	f7f9 faf3 	bl	8002ef4 <HAL_GetTick>
 800990e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009910:	e008      	b.n	8009924 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009912:	f7f9 faef 	bl	8002ef4 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	2b02      	cmp	r3, #2
 800991e:	d901      	bls.n	8009924 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e006      	b.n	8009932 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009924:	4b05      	ldr	r3, [pc, #20]	; (800993c <RCCEx_PLL3_Config+0x15c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0f0      	beq.n	8009912 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	58024400 	.word	0x58024400
 8009940:	ffff0007 	.word	0xffff0007

08009944 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d904      	bls.n	8009962 <HAL_SAI_InitProtocol+0x1e>
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	3b03      	subs	r3, #3
 800995c:	2b01      	cmp	r3, #1
 800995e:	d812      	bhi.n	8009986 <HAL_SAI_InitProtocol+0x42>
 8009960:	e008      	b.n	8009974 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	68b9      	ldr	r1, [r7, #8]
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 fbe9 	bl	800a140 <SAI_InitI2S>
 800996e:	4603      	mov	r3, r0
 8009970:	75fb      	strb	r3, [r7, #23]
      break;
 8009972:	e00b      	b.n	800998c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	68b9      	ldr	r1, [r7, #8]
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fc92 	bl	800a2a4 <SAI_InitPCM>
 8009980:	4603      	mov	r3, r0
 8009982:	75fb      	strb	r3, [r7, #23]
      break;
 8009984:	e002      	b.n	800998c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	75fb      	strb	r3, [r7, #23]
      break;
 800998a:	bf00      	nop
  }

  if (status == HAL_OK)
 800998c:	7dfb      	ldrb	r3, [r7, #23]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d104      	bne.n	800999c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f808 	bl	80099a8 <HAL_SAI_Init>
 8009998:	4603      	mov	r3, r0
 800999a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800999c:	7dfb      	ldrb	r3, [r7, #23]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08a      	sub	sp, #40	; 0x28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d101      	bne.n	80099ba <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e1fb      	b.n	8009db2 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d113      	bne.n	80099ec <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a96      	ldr	r2, [pc, #600]	; (8009c24 <HAL_SAI_Init+0x27c>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d004      	beq.n	80099d8 <HAL_SAI_Init+0x30>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a95      	ldr	r2, [pc, #596]	; (8009c28 <HAL_SAI_Init+0x280>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d107      	bne.n	80099e8 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d103      	bne.n	80099e8 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	e1e2      	b.n	8009db2 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a8c      	ldr	r2, [pc, #560]	; (8009c24 <HAL_SAI_Init+0x27c>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d004      	beq.n	8009a00 <HAL_SAI_Init+0x58>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a8c      	ldr	r2, [pc, #560]	; (8009c2c <HAL_SAI_Init+0x284>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d102      	bne.n	8009a06 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8009a00:	4b8b      	ldr	r3, [pc, #556]	; (8009c30 <HAL_SAI_Init+0x288>)
 8009a02:	61bb      	str	r3, [r7, #24]
 8009a04:	e00e      	b.n	8009a24 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a87      	ldr	r2, [pc, #540]	; (8009c28 <HAL_SAI_Init+0x280>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d004      	beq.n	8009a1a <HAL_SAI_Init+0x72>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a87      	ldr	r2, [pc, #540]	; (8009c34 <HAL_SAI_Init+0x28c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d102      	bne.n	8009a20 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8009a1a:	4b87      	ldr	r3, [pc, #540]	; (8009c38 <HAL_SAI_Init+0x290>)
 8009a1c:	61bb      	str	r3, [r7, #24]
 8009a1e:	e001      	b.n	8009a24 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e1c6      	b.n	8009db2 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d106      	bne.n	8009a3e <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f002 fcbb 	bl	800c3b4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fcea 	bl	800a418 <SAI_Disable>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e1b1      	b.n	8009db2 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2202      	movs	r2, #2
 8009a52:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d00c      	beq.n	8009a78 <HAL_SAI_Init+0xd0>
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d80d      	bhi.n	8009a7e <HAL_SAI_Init+0xd6>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <HAL_SAI_Init+0xc4>
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d003      	beq.n	8009a72 <HAL_SAI_Init+0xca>
 8009a6a:	e008      	b.n	8009a7e <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009a70:	e008      	b.n	8009a84 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009a72:	2310      	movs	r3, #16
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009a76:	e005      	b.n	8009a84 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009a78:	2320      	movs	r3, #32
 8009a7a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009a7c:	e002      	b.n	8009a84 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009a82:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	2b05      	cmp	r3, #5
 8009a8a:	d822      	bhi.n	8009ad2 <HAL_SAI_Init+0x12a>
 8009a8c:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <HAL_SAI_Init+0xec>)
 8009a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a92:	bf00      	nop
 8009a94:	08009aad 	.word	0x08009aad
 8009a98:	08009ab3 	.word	0x08009ab3
 8009a9c:	08009abb 	.word	0x08009abb
 8009aa0:	08009ad3 	.word	0x08009ad3
 8009aa4:	08009ad3 	.word	0x08009ad3
 8009aa8:	08009ac3 	.word	0x08009ac3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	61fb      	str	r3, [r7, #28]
      break;
 8009ab0:	e012      	b.n	8009ad8 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab6:	61fb      	str	r3, [r7, #28]
      break;
 8009ab8:	e00e      	b.n	8009ad8 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009abe:	61fb      	str	r3, [r7, #28]
      break;
 8009ac0:	e00a      	b.n	8009ad8 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009ac2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ac6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	f043 0303 	orr.w	r3, r3, #3
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009ad0:	e002      	b.n	8009ad8 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	61fb      	str	r3, [r7, #28]
      break;
 8009ad6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009adc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 8084 	beq.w	8009bf0 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a4c      	ldr	r2, [pc, #304]	; (8009c24 <HAL_SAI_Init+0x27c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d004      	beq.n	8009b00 <HAL_SAI_Init+0x158>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a4c      	ldr	r2, [pc, #304]	; (8009c2c <HAL_SAI_Init+0x284>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d104      	bne.n	8009b0a <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009b00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009b04:	f7fe fd86 	bl	8008614 <HAL_RCCEx_GetPeriphCLKFreq>
 8009b08:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a46      	ldr	r2, [pc, #280]	; (8009c28 <HAL_SAI_Init+0x280>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d104      	bne.n	8009b1e <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009b14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009b18:	f7fe fd7c 	bl	8008614 <HAL_RCCEx_GetPeriphCLKFreq>
 8009b1c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a44      	ldr	r2, [pc, #272]	; (8009c34 <HAL_SAI_Init+0x28c>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d104      	bne.n	8009b32 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009b28:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009b2c:	f7fe fd72 	bl	8008614 <HAL_RCCEx_GetPeriphCLKFreq>
 8009b30:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b3a:	d120      	bne.n	8009b7e <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	d102      	bne.n	8009b4a <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8009b44:	2340      	movs	r3, #64	; 0x40
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	e00a      	b.n	8009b60 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4e:	2b08      	cmp	r3, #8
 8009b50:	d103      	bne.n	8009b5a <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8009b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	e002      	b.n	8009b60 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b5e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	4613      	mov	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	fb02 f303 	mul.w	r3, r2, r3
 8009b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b7a:	613b      	str	r3, [r7, #16]
 8009b7c:	e017      	b.n	8009bae <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b86:	d101      	bne.n	8009b8c <HAL_SAI_Init+0x1e4>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e000      	b.n	8009b8e <HAL_SAI_Init+0x1e6>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	4613      	mov	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a1b      	ldr	r3, [r3, #32]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	fb02 f303 	mul.w	r3, r2, r3
 8009ba6:	021b      	lsls	r3, r3, #8
 8009ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8009bac:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	4a22      	ldr	r2, [pc, #136]	; (8009c3c <HAL_SAI_Init+0x294>)
 8009bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb6:	08da      	lsrs	r2, r3, #3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009bbc:	6939      	ldr	r1, [r7, #16]
 8009bbe:	4b1f      	ldr	r3, [pc, #124]	; (8009c3c <HAL_SAI_Init+0x294>)
 8009bc0:	fba3 2301 	umull	r2, r3, r3, r1
 8009bc4:	08da      	lsrs	r2, r3, #3
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	1aca      	subs	r2, r1, r3
 8009bd0:	2a08      	cmp	r2, #8
 8009bd2:	d904      	bls.n	8009bde <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be2:	2b04      	cmp	r3, #4
 8009be4:	d104      	bne.n	8009bf0 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	085a      	lsrs	r2, r3, #1
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d003      	beq.n	8009c00 <HAL_SAI_Init+0x258>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d109      	bne.n	8009c14 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d101      	bne.n	8009c0c <HAL_SAI_Init+0x264>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e001      	b.n	8009c10 <HAL_SAI_Init+0x268>
 8009c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c10:	623b      	str	r3, [r7, #32]
 8009c12:	e017      	b.n	8009c44 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d111      	bne.n	8009c40 <HAL_SAI_Init+0x298>
 8009c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c20:	e00f      	b.n	8009c42 <HAL_SAI_Init+0x29a>
 8009c22:	bf00      	nop
 8009c24:	40015804 	.word	0x40015804
 8009c28:	58005404 	.word	0x58005404
 8009c2c:	40015824 	.word	0x40015824
 8009c30:	40015800 	.word	0x40015800
 8009c34:	58005424 	.word	0x58005424
 8009c38:	58005400 	.word	0x58005400
 8009c3c:	cccccccd 	.word	0xcccccccd
 8009c40:	2300      	movs	r3, #0
 8009c42:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6819      	ldr	r1, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	4b5b      	ldr	r3, [pc, #364]	; (8009dbc <HAL_SAI_Init+0x414>)
 8009c50:	400b      	ands	r3, r1
 8009c52:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6819      	ldr	r1, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c62:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009c68:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8009c7c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009c88:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	051b      	lsls	r3, r3, #20
 8009c90:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009c96:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6859      	ldr	r1, [r3, #4]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	4b43      	ldr	r3, [pc, #268]	; (8009dc0 <HAL_SAI_Init+0x418>)
 8009cb2:	400b      	ands	r3, r1
 8009cb4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	6859      	ldr	r1, [r3, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	69da      	ldr	r2, [r3, #28]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc4:	431a      	orrs	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6899      	ldr	r1, [r3, #8]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4b39      	ldr	r3, [pc, #228]	; (8009dc4 <HAL_SAI_Init+0x41c>)
 8009ce0:	400b      	ands	r3, r1
 8009ce2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6899      	ldr	r1, [r3, #8]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cee:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009cf4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009cfa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009d00:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d06:	3b01      	subs	r3, #1
 8009d08:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009d0a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68d9      	ldr	r1, [r3, #12]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009d22:	400b      	ands	r3, r1
 8009d24:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68d9      	ldr	r1, [r3, #12]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d34:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d3a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009d3c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d42:	3b01      	subs	r3, #1
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a1c      	ldr	r2, [pc, #112]	; (8009dc8 <HAL_SAI_Init+0x420>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d004      	beq.n	8009d64 <HAL_SAI_Init+0x3bc>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a1b      	ldr	r2, [pc, #108]	; (8009dcc <HAL_SAI_Init+0x424>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d119      	bne.n	8009d98 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d68:	f023 0201 	bic.w	r2, r3, #1
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d10e      	bne.n	8009d98 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d82:	3b01      	subs	r3, #1
 8009d84:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009d86:	431a      	orrs	r2, r3
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d90:	f043 0201 	orr.w	r2, r3, #1
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3728      	adds	r7, #40	; 0x28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	f005c010 	.word	0xf005c010
 8009dc0:	ffff1ff0 	.word	0xffff1ff0
 8009dc4:	fff88000 	.word	0xfff88000
 8009dc8:	40015804 	.word	0x40015804
 8009dcc:	58005404 	.word	0x58005404

08009dd0 <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	603b      	str	r3, [r7, #0]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009de0:	f7f9 f888 	bl	8002ef4 <HAL_GetTick>
 8009de4:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <HAL_SAI_Receive+0x22>
 8009dec:	88fb      	ldrh	r3, [r7, #6]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e0e9      	b.n	8009fca <HAL_SAI_Receive+0x1fa>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	f040 80e2 	bne.w	8009fc8 <HAL_SAI_Receive+0x1f8>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d101      	bne.n	8009e12 <HAL_SAI_Receive+0x42>
 8009e0e:	2302      	movs	r3, #2
 8009e10:	e0db      	b.n	8009fca <HAL_SAI_Receive+0x1fa>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	88fa      	ldrh	r2, [r7, #6]
 8009e24:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	88fa      	ldrh	r2, [r7, #6]
 8009e2c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2222      	movs	r2, #34	; 0x22
 8009e34:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f040 80ac 	bne.w	8009fa8 <HAL_SAI_Receive+0x1d8>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009e5e:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while (hsai->XferCount > 0U)
 8009e60:	e0a2      	b.n	8009fa8 <HAL_SAI_Receive+0x1d8>
    {
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d06a      	beq.n	8009f46 <HAL_SAI_Receive+0x176>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e74:	2b40      	cmp	r3, #64	; 0x40
 8009e76:	d110      	bne.n	8009e9a <HAL_SAI_Receive+0xca>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10c      	bne.n	8009e9a <HAL_SAI_Receive+0xca>
        {
          *hsai->pBuffPtr = (uint8_t)hsai->Instance->DR;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	69da      	ldr	r2, [r3, #28]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e8a:	b2d2      	uxtb	r2, r2
 8009e8c:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	679a      	str	r2, [r3, #120]	; 0x78
 8009e98:	e04c      	b.n	8009f34 <HAL_SAI_Receive+0x164>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e9e:	2b80      	cmp	r3, #128	; 0x80
 8009ea0:	d819      	bhi.n	8009ed6 <HAL_SAI_Receive+0x106>
        {
          temp = hsai->Instance->DR;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	69db      	ldr	r3, [r3, #28]
 8009ea8:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	b2d2      	uxtb	r2, r2
 8009eb2:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	0a1a      	lsrs	r2, r3, #8
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ec6:	b2d2      	uxtb	r2, r2
 8009ec8:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	679a      	str	r2, [r3, #120]	; 0x78
 8009ed4:	e02e      	b.n	8009f34 <HAL_SAI_Receive+0x164>
        }
        else
        {
          temp = hsai->Instance->DR;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	b2d2      	uxtb	r2, r2
 8009ee6:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	0a1a      	lsrs	r2, r3, #8
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009efa:	b2d2      	uxtb	r2, r2
 8009efc:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 16);
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	0c1a      	lsrs	r2, r3, #16
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 24);
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	0e1a      	lsrs	r2, r3, #24
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	679a      	str	r2, [r3, #120]	; 0x78
        }
        hsai->XferCount--;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8009f44:	e030      	b.n	8009fa8 <HAL_SAI_Receive+0x1d8>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 8009f46:	f7f8 ffd5 	bl	8002ef4 <HAL_GetTick>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d302      	bcc.n	8009f5c <HAL_SAI_Receive+0x18c>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d125      	bne.n	8009fa8 <HAL_SAI_Receive+0x1d8>
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f62:	d021      	beq.n	8009fa8 <HAL_SAI_Receive+0x1d8>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f7c:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 fa4a 	bl	800a418 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f042 0208 	orr.w	r2, r2, #8
 8009f92:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

          return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e010      	b.n	8009fca <HAL_SAI_Receive+0x1fa>
    while (hsai->XferCount > 0U)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f47f af57 	bne.w	8009e62 <HAL_SAI_Receive+0x92>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e000      	b.n	8009fca <HAL_SAI_Receive+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8009fc8:	2302      	movs	r3, #2
  }
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009fe2:	f7f8 ff87 	bl	8002ef4 <HAL_GetTick>
 8009fe6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <HAL_SAI_Transmit_DMA+0x20>
 8009fee:	88fb      	ldrh	r3, [r7, #6]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e098      	b.n	800a12a <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b01      	cmp	r3, #1
 800a002:	f040 8091 	bne.w	800a128 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d101      	bne.n	800a014 <HAL_SAI_Transmit_DMA+0x40>
 800a010:	2302      	movs	r3, #2
 800a012:	e08a      	b.n	800a12a <HAL_SAI_Transmit_DMA+0x156>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	88fa      	ldrh	r2, [r7, #6]
 800a026:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	88fa      	ldrh	r2, [r7, #6]
 800a02e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2212      	movs	r2, #18
 800a03e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a048:	4a3a      	ldr	r2, [pc, #232]	; (800a134 <HAL_SAI_Transmit_DMA+0x160>)
 800a04a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a052:	4a39      	ldr	r2, [pc, #228]	; (800a138 <HAL_SAI_Transmit_DMA+0x164>)
 800a054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05c:	4a37      	ldr	r2, [pc, #220]	; (800a13c <HAL_SAI_Transmit_DMA+0x168>)
 800a05e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a066:	2200      	movs	r2, #0
 800a068:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a074:	4619      	mov	r1, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	331c      	adds	r3, #28
 800a07c:	461a      	mov	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a084:	f7f9 fc96 	bl	80039b4 <HAL_DMA_Start_IT>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d005      	beq.n	800a09a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e047      	b.n	800a12a <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a09a:	2100      	movs	r1, #0
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 f983 	bl	800a3a8 <SAI_InterruptFlag>
 800a0a2:	4601      	mov	r1, r0
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a0c0:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a0c2:	e015      	b.n	800a0f0 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a0c4:	f7f8 ff16 	bl	8002ef4 <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0d2:	d90d      	bls.n	800a0f0 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e01c      	b.n	800a12a <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0e2      	beq.n	800a0c4 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d107      	bne.n	800a11c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a11a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	e000      	b.n	800a12a <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800a128:	2302      	movs	r3, #2
  }
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	0800a4ed 	.word	0x0800a4ed
 800a138:	0800a48d 	.word	0x0800a48d
 800a13c:	0800a509 	.word	0x0800a509

0800a140 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <SAI_InitI2S+0x2e>
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d103      	bne.n	800a176 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	651a      	str	r2, [r3, #80]	; 0x50
 800a174:	e002      	b.n	800a17c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2201      	movs	r2, #1
 800a17a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a182:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a18a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e077      	b.n	800a296 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d107      	bne.n	800a1bc <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a1b8:	665a      	str	r2, [r3, #100]	; 0x64
 800a1ba:	e006      	b.n	800a1ca <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a1c2:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	665a      	str	r2, [r3, #100]	; 0x64
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d84f      	bhi.n	800a270 <SAI_InitI2S+0x130>
 800a1d0:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <SAI_InitI2S+0x98>)
 800a1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d6:	bf00      	nop
 800a1d8:	0800a1e9 	.word	0x0800a1e9
 800a1dc:	0800a20b 	.word	0x0800a20b
 800a1e0:	0800a22d 	.word	0x0800a22d
 800a1e4:	0800a24f 	.word	0x0800a24f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2280      	movs	r2, #128	; 0x80
 800a1ec:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	085b      	lsrs	r3, r3, #1
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	085b      	lsrs	r3, r3, #1
 800a1fc:	011a      	lsls	r2, r3, #4
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2240      	movs	r2, #64	; 0x40
 800a206:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a208:	e035      	b.n	800a276 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2280      	movs	r2, #128	; 0x80
 800a20e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	085b      	lsrs	r3, r3, #1
 800a214:	019a      	lsls	r2, r3, #6
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	085b      	lsrs	r3, r3, #1
 800a21e:	015a      	lsls	r2, r3, #5
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2280      	movs	r2, #128	; 0x80
 800a228:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a22a:	e024      	b.n	800a276 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	22c0      	movs	r2, #192	; 0xc0
 800a230:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	085b      	lsrs	r3, r3, #1
 800a236:	019a      	lsls	r2, r3, #6
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	085b      	lsrs	r3, r3, #1
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2280      	movs	r2, #128	; 0x80
 800a24a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a24c:	e013      	b.n	800a276 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	22e0      	movs	r2, #224	; 0xe0
 800a252:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	085b      	lsrs	r3, r3, #1
 800a258:	019a      	lsls	r2, r3, #6
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	085b      	lsrs	r3, r3, #1
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2280      	movs	r2, #128	; 0x80
 800a26c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a26e:	e002      	b.n	800a276 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	75fb      	strb	r3, [r7, #23]
      break;
 800a274:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d10b      	bne.n	800a294 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d102      	bne.n	800a288 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2210      	movs	r2, #16
 800a286:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d102      	bne.n	800a294 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2208      	movs	r2, #8
 800a292:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800a294:	7dfb      	ldrb	r3, [r7, #23]
}
 800a296:	4618      	mov	r0, r3
 800a298:	371c      	adds	r7, #28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop

0800a2a4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <SAI_InitPCM+0x2e>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d103      	bne.n	800a2da <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	651a      	str	r2, [r3, #80]	; 0x50
 800a2d8:	e002      	b.n	800a2e0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a2ec:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a2f4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a308:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	d103      	bne.n	800a318 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2201      	movs	r2, #1
 800a314:	659a      	str	r2, [r3, #88]	; 0x58
 800a316:	e002      	b.n	800a31e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	220d      	movs	r2, #13
 800a31c:	659a      	str	r2, [r3, #88]	; 0x58
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b03      	cmp	r3, #3
 800a322:	d837      	bhi.n	800a394 <SAI_InitPCM+0xf0>
 800a324:	a201      	add	r2, pc, #4	; (adr r2, 800a32c <SAI_InitPCM+0x88>)
 800a326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32a:	bf00      	nop
 800a32c:	0800a33d 	.word	0x0800a33d
 800a330:	0800a353 	.word	0x0800a353
 800a334:	0800a369 	.word	0x0800a369
 800a338:	0800a37f 	.word	0x0800a37f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2280      	movs	r2, #128	; 0x80
 800a340:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	011a      	lsls	r2, r3, #4
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2240      	movs	r2, #64	; 0x40
 800a34e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a350:	e023      	b.n	800a39a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2280      	movs	r2, #128	; 0x80
 800a356:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2280      	movs	r2, #128	; 0x80
 800a364:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a366:	e018      	b.n	800a39a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	22c0      	movs	r2, #192	; 0xc0
 800a36c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2280      	movs	r2, #128	; 0x80
 800a37a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a37c:	e00d      	b.n	800a39a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	22e0      	movs	r2, #224	; 0xe0
 800a382:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2280      	movs	r2, #128	; 0x80
 800a390:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a392:	e002      	b.n	800a39a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	75fb      	strb	r3, [r7, #23]
      break;
 800a398:	bf00      	nop
  }

  return status;
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a3b8:	78fb      	ldrb	r3, [r7, #3]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d103      	bne.n	800a3c6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f043 0308 	orr.w	r3, r3, #8
 800a3c4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ca:	2b08      	cmp	r3, #8
 800a3cc:	d10b      	bne.n	800a3e6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d003      	beq.n	800a3de <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d103      	bne.n	800a3e6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f043 0310 	orr.w	r3, r3, #16
 800a3e4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d003      	beq.n	800a3f6 <SAI_InterruptFlag+0x4e>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d104      	bne.n	800a400 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	e003      	b.n	800a408 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f043 0304 	orr.w	r3, r3, #4
 800a406:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a408:	68fb      	ldr	r3, [r7, #12]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
	...

0800a418 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a420:	4b18      	ldr	r3, [pc, #96]	; (800a484 <SAI_Disable+0x6c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a18      	ldr	r2, [pc, #96]	; (800a488 <SAI_Disable+0x70>)
 800a426:	fba2 2303 	umull	r2, r3, r2, r3
 800a42a:	0b1b      	lsrs	r3, r3, #12
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a430:	2300      	movs	r3, #0
 800a432:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a442:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10a      	bne.n	800a460 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a450:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	72fb      	strb	r3, [r7, #11]
      break;
 800a45e:	e009      	b.n	800a474 <SAI_Disable+0x5c>
    }
    count--;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3b01      	subs	r3, #1
 800a464:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e7      	bne.n	800a444 <SAI_Disable+0x2c>

  return status;
 800a474:	7afb      	ldrb	r3, [r7, #11]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	24000454 	.word	0x24000454
 800a488:	95cbec1b 	.word	0x95cbec1b

0800a48c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4a2:	d01c      	beq.n	800a4de <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a4ba:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a4bc:	2100      	movs	r1, #0
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7ff ff72 	bl	800a3a8 <SAI_InterruptFlag>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	43d9      	mvns	r1, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	691a      	ldr	r2, [r3, #16]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	400a      	ands	r2, r1
 800a4d4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f7f7 ffd9 	bl	8002496 <HAL_SAI_TxCpltCallback>
#endif
}
 800a4e4:	bf00      	nop
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f7f7 ffd6 	bl	80024ac <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a514:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7fa fbe0 	bl	8004cdc <HAL_DMA_GetError>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d01d      	beq.n	800a55e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a528:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a540:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f7ff ff68 	bl	800a418 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f7f7 ffb3 	bl	80024c4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800a55e:	bf00      	nop
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b082      	sub	sp, #8
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e042      	b.n	800a5fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d106      	bne.n	800a590 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f001 feac 	bl	800c2e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2224      	movs	r2, #36	; 0x24
 800a594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 0201 	bic.w	r2, r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f82d 	bl	800a608 <UART_SetConfig>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e022      	b.n	800a5fe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fe7f 	bl	800b2c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689a      	ldr	r2, [r3, #8]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f042 0201 	orr.w	r2, r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 ff06 	bl	800b408 <UART_CheckIdleState>
 800a5fc:	4603      	mov	r3, r0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a608:	b5b0      	push	{r4, r5, r7, lr}
 800a60a:	b08e      	sub	sp, #56	; 0x38
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689a      	ldr	r2, [r3, #8]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	431a      	orrs	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	431a      	orrs	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	4bbf      	ldr	r3, [pc, #764]	; (800a934 <UART_SetConfig+0x32c>)
 800a636:	4013      	ands	r3, r2
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6812      	ldr	r2, [r2, #0]
 800a63c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a63e:	430b      	orrs	r3, r1
 800a640:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4ab5      	ldr	r2, [pc, #724]	; (800a938 <UART_SetConfig+0x330>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d004      	beq.n	800a672 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a1b      	ldr	r3, [r3, #32]
 800a66c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a66e:	4313      	orrs	r3, r2
 800a670:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	4bb0      	ldr	r3, [pc, #704]	; (800a93c <UART_SetConfig+0x334>)
 800a67a:	4013      	ands	r3, r2
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	6812      	ldr	r2, [r2, #0]
 800a680:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a682:	430b      	orrs	r3, r1
 800a684:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68c:	f023 010f 	bic.w	r1, r3, #15
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	430a      	orrs	r2, r1
 800a69a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4aa7      	ldr	r2, [pc, #668]	; (800a940 <UART_SetConfig+0x338>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d176      	bne.n	800a794 <UART_SetConfig+0x18c>
 800a6a6:	4ba7      	ldr	r3, [pc, #668]	; (800a944 <UART_SetConfig+0x33c>)
 800a6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6ae:	2b28      	cmp	r3, #40	; 0x28
 800a6b0:	d86c      	bhi.n	800a78c <UART_SetConfig+0x184>
 800a6b2:	a201      	add	r2, pc, #4	; (adr r2, 800a6b8 <UART_SetConfig+0xb0>)
 800a6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b8:	0800a75d 	.word	0x0800a75d
 800a6bc:	0800a78d 	.word	0x0800a78d
 800a6c0:	0800a78d 	.word	0x0800a78d
 800a6c4:	0800a78d 	.word	0x0800a78d
 800a6c8:	0800a78d 	.word	0x0800a78d
 800a6cc:	0800a78d 	.word	0x0800a78d
 800a6d0:	0800a78d 	.word	0x0800a78d
 800a6d4:	0800a78d 	.word	0x0800a78d
 800a6d8:	0800a765 	.word	0x0800a765
 800a6dc:	0800a78d 	.word	0x0800a78d
 800a6e0:	0800a78d 	.word	0x0800a78d
 800a6e4:	0800a78d 	.word	0x0800a78d
 800a6e8:	0800a78d 	.word	0x0800a78d
 800a6ec:	0800a78d 	.word	0x0800a78d
 800a6f0:	0800a78d 	.word	0x0800a78d
 800a6f4:	0800a78d 	.word	0x0800a78d
 800a6f8:	0800a76d 	.word	0x0800a76d
 800a6fc:	0800a78d 	.word	0x0800a78d
 800a700:	0800a78d 	.word	0x0800a78d
 800a704:	0800a78d 	.word	0x0800a78d
 800a708:	0800a78d 	.word	0x0800a78d
 800a70c:	0800a78d 	.word	0x0800a78d
 800a710:	0800a78d 	.word	0x0800a78d
 800a714:	0800a78d 	.word	0x0800a78d
 800a718:	0800a775 	.word	0x0800a775
 800a71c:	0800a78d 	.word	0x0800a78d
 800a720:	0800a78d 	.word	0x0800a78d
 800a724:	0800a78d 	.word	0x0800a78d
 800a728:	0800a78d 	.word	0x0800a78d
 800a72c:	0800a78d 	.word	0x0800a78d
 800a730:	0800a78d 	.word	0x0800a78d
 800a734:	0800a78d 	.word	0x0800a78d
 800a738:	0800a77d 	.word	0x0800a77d
 800a73c:	0800a78d 	.word	0x0800a78d
 800a740:	0800a78d 	.word	0x0800a78d
 800a744:	0800a78d 	.word	0x0800a78d
 800a748:	0800a78d 	.word	0x0800a78d
 800a74c:	0800a78d 	.word	0x0800a78d
 800a750:	0800a78d 	.word	0x0800a78d
 800a754:	0800a78d 	.word	0x0800a78d
 800a758:	0800a785 	.word	0x0800a785
 800a75c:	2301      	movs	r3, #1
 800a75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a762:	e326      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a764:	2304      	movs	r3, #4
 800a766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a76a:	e322      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a76c:	2308      	movs	r3, #8
 800a76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a772:	e31e      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a774:	2310      	movs	r3, #16
 800a776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a77a:	e31a      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a77c:	2320      	movs	r3, #32
 800a77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a782:	e316      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a784:	2340      	movs	r3, #64	; 0x40
 800a786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a78a:	e312      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a78c:	2380      	movs	r3, #128	; 0x80
 800a78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a792:	e30e      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a6b      	ldr	r2, [pc, #428]	; (800a948 <UART_SetConfig+0x340>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d130      	bne.n	800a800 <UART_SetConfig+0x1f8>
 800a79e:	4b69      	ldr	r3, [pc, #420]	; (800a944 <UART_SetConfig+0x33c>)
 800a7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	2b05      	cmp	r3, #5
 800a7a8:	d826      	bhi.n	800a7f8 <UART_SetConfig+0x1f0>
 800a7aa:	a201      	add	r2, pc, #4	; (adr r2, 800a7b0 <UART_SetConfig+0x1a8>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a7c9 	.word	0x0800a7c9
 800a7b4:	0800a7d1 	.word	0x0800a7d1
 800a7b8:	0800a7d9 	.word	0x0800a7d9
 800a7bc:	0800a7e1 	.word	0x0800a7e1
 800a7c0:	0800a7e9 	.word	0x0800a7e9
 800a7c4:	0800a7f1 	.word	0x0800a7f1
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ce:	e2f0      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d6:	e2ec      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a7d8:	2308      	movs	r3, #8
 800a7da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7de:	e2e8      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7e6:	e2e4      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a7e8:	2320      	movs	r3, #32
 800a7ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ee:	e2e0      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a7f0:	2340      	movs	r3, #64	; 0x40
 800a7f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7f6:	e2dc      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a7f8:	2380      	movs	r3, #128	; 0x80
 800a7fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7fe:	e2d8      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a51      	ldr	r2, [pc, #324]	; (800a94c <UART_SetConfig+0x344>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d130      	bne.n	800a86c <UART_SetConfig+0x264>
 800a80a:	4b4e      	ldr	r3, [pc, #312]	; (800a944 <UART_SetConfig+0x33c>)
 800a80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80e:	f003 0307 	and.w	r3, r3, #7
 800a812:	2b05      	cmp	r3, #5
 800a814:	d826      	bhi.n	800a864 <UART_SetConfig+0x25c>
 800a816:	a201      	add	r2, pc, #4	; (adr r2, 800a81c <UART_SetConfig+0x214>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a835 	.word	0x0800a835
 800a820:	0800a83d 	.word	0x0800a83d
 800a824:	0800a845 	.word	0x0800a845
 800a828:	0800a84d 	.word	0x0800a84d
 800a82c:	0800a855 	.word	0x0800a855
 800a830:	0800a85d 	.word	0x0800a85d
 800a834:	2300      	movs	r3, #0
 800a836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83a:	e2ba      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a83c:	2304      	movs	r3, #4
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a842:	e2b6      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a844:	2308      	movs	r3, #8
 800a846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a84a:	e2b2      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a84c:	2310      	movs	r3, #16
 800a84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a852:	e2ae      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a854:	2320      	movs	r3, #32
 800a856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a85a:	e2aa      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a85c:	2340      	movs	r3, #64	; 0x40
 800a85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a862:	e2a6      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a864:	2380      	movs	r3, #128	; 0x80
 800a866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a86a:	e2a2      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a37      	ldr	r2, [pc, #220]	; (800a950 <UART_SetConfig+0x348>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d130      	bne.n	800a8d8 <UART_SetConfig+0x2d0>
 800a876:	4b33      	ldr	r3, [pc, #204]	; (800a944 <UART_SetConfig+0x33c>)
 800a878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87a:	f003 0307 	and.w	r3, r3, #7
 800a87e:	2b05      	cmp	r3, #5
 800a880:	d826      	bhi.n	800a8d0 <UART_SetConfig+0x2c8>
 800a882:	a201      	add	r2, pc, #4	; (adr r2, 800a888 <UART_SetConfig+0x280>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a8a1 	.word	0x0800a8a1
 800a88c:	0800a8a9 	.word	0x0800a8a9
 800a890:	0800a8b1 	.word	0x0800a8b1
 800a894:	0800a8b9 	.word	0x0800a8b9
 800a898:	0800a8c1 	.word	0x0800a8c1
 800a89c:	0800a8c9 	.word	0x0800a8c9
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8a6:	e284      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ae:	e280      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8b6:	e27c      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a8b8:	2310      	movs	r3, #16
 800a8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8be:	e278      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a8c0:	2320      	movs	r3, #32
 800a8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8c6:	e274      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a8c8:	2340      	movs	r3, #64	; 0x40
 800a8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ce:	e270      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a8d0:	2380      	movs	r3, #128	; 0x80
 800a8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8d6:	e26c      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <UART_SetConfig+0x34c>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d142      	bne.n	800a968 <UART_SetConfig+0x360>
 800a8e2:	4b18      	ldr	r3, [pc, #96]	; (800a944 <UART_SetConfig+0x33c>)
 800a8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	d838      	bhi.n	800a960 <UART_SetConfig+0x358>
 800a8ee:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <UART_SetConfig+0x2ec>)
 800a8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f4:	0800a90d 	.word	0x0800a90d
 800a8f8:	0800a915 	.word	0x0800a915
 800a8fc:	0800a91d 	.word	0x0800a91d
 800a900:	0800a925 	.word	0x0800a925
 800a904:	0800a92d 	.word	0x0800a92d
 800a908:	0800a959 	.word	0x0800a959
 800a90c:	2300      	movs	r3, #0
 800a90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a912:	e24e      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a914:	2304      	movs	r3, #4
 800a916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a91a:	e24a      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a91c:	2308      	movs	r3, #8
 800a91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a922:	e246      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a924:	2310      	movs	r3, #16
 800a926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a92a:	e242      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a92c:	2320      	movs	r3, #32
 800a92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a932:	e23e      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a934:	cfff69f3 	.word	0xcfff69f3
 800a938:	58000c00 	.word	0x58000c00
 800a93c:	11fff4ff 	.word	0x11fff4ff
 800a940:	40011000 	.word	0x40011000
 800a944:	58024400 	.word	0x58024400
 800a948:	40004400 	.word	0x40004400
 800a94c:	40004800 	.word	0x40004800
 800a950:	40004c00 	.word	0x40004c00
 800a954:	40005000 	.word	0x40005000
 800a958:	2340      	movs	r3, #64	; 0x40
 800a95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95e:	e228      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a960:	2380      	movs	r3, #128	; 0x80
 800a962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a966:	e224      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4ab1      	ldr	r2, [pc, #708]	; (800ac34 <UART_SetConfig+0x62c>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d176      	bne.n	800aa60 <UART_SetConfig+0x458>
 800a972:	4bb1      	ldr	r3, [pc, #708]	; (800ac38 <UART_SetConfig+0x630>)
 800a974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a97a:	2b28      	cmp	r3, #40	; 0x28
 800a97c:	d86c      	bhi.n	800aa58 <UART_SetConfig+0x450>
 800a97e:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <UART_SetConfig+0x37c>)
 800a980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a984:	0800aa29 	.word	0x0800aa29
 800a988:	0800aa59 	.word	0x0800aa59
 800a98c:	0800aa59 	.word	0x0800aa59
 800a990:	0800aa59 	.word	0x0800aa59
 800a994:	0800aa59 	.word	0x0800aa59
 800a998:	0800aa59 	.word	0x0800aa59
 800a99c:	0800aa59 	.word	0x0800aa59
 800a9a0:	0800aa59 	.word	0x0800aa59
 800a9a4:	0800aa31 	.word	0x0800aa31
 800a9a8:	0800aa59 	.word	0x0800aa59
 800a9ac:	0800aa59 	.word	0x0800aa59
 800a9b0:	0800aa59 	.word	0x0800aa59
 800a9b4:	0800aa59 	.word	0x0800aa59
 800a9b8:	0800aa59 	.word	0x0800aa59
 800a9bc:	0800aa59 	.word	0x0800aa59
 800a9c0:	0800aa59 	.word	0x0800aa59
 800a9c4:	0800aa39 	.word	0x0800aa39
 800a9c8:	0800aa59 	.word	0x0800aa59
 800a9cc:	0800aa59 	.word	0x0800aa59
 800a9d0:	0800aa59 	.word	0x0800aa59
 800a9d4:	0800aa59 	.word	0x0800aa59
 800a9d8:	0800aa59 	.word	0x0800aa59
 800a9dc:	0800aa59 	.word	0x0800aa59
 800a9e0:	0800aa59 	.word	0x0800aa59
 800a9e4:	0800aa41 	.word	0x0800aa41
 800a9e8:	0800aa59 	.word	0x0800aa59
 800a9ec:	0800aa59 	.word	0x0800aa59
 800a9f0:	0800aa59 	.word	0x0800aa59
 800a9f4:	0800aa59 	.word	0x0800aa59
 800a9f8:	0800aa59 	.word	0x0800aa59
 800a9fc:	0800aa59 	.word	0x0800aa59
 800aa00:	0800aa59 	.word	0x0800aa59
 800aa04:	0800aa49 	.word	0x0800aa49
 800aa08:	0800aa59 	.word	0x0800aa59
 800aa0c:	0800aa59 	.word	0x0800aa59
 800aa10:	0800aa59 	.word	0x0800aa59
 800aa14:	0800aa59 	.word	0x0800aa59
 800aa18:	0800aa59 	.word	0x0800aa59
 800aa1c:	0800aa59 	.word	0x0800aa59
 800aa20:	0800aa59 	.word	0x0800aa59
 800aa24:	0800aa51 	.word	0x0800aa51
 800aa28:	2301      	movs	r3, #1
 800aa2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa2e:	e1c0      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aa30:	2304      	movs	r3, #4
 800aa32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa36:	e1bc      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aa38:	2308      	movs	r3, #8
 800aa3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa3e:	e1b8      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aa40:	2310      	movs	r3, #16
 800aa42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa46:	e1b4      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aa48:	2320      	movs	r3, #32
 800aa4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa4e:	e1b0      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aa50:	2340      	movs	r3, #64	; 0x40
 800aa52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa56:	e1ac      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aa58:	2380      	movs	r3, #128	; 0x80
 800aa5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa5e:	e1a8      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a75      	ldr	r2, [pc, #468]	; (800ac3c <UART_SetConfig+0x634>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d130      	bne.n	800aacc <UART_SetConfig+0x4c4>
 800aa6a:	4b73      	ldr	r3, [pc, #460]	; (800ac38 <UART_SetConfig+0x630>)
 800aa6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6e:	f003 0307 	and.w	r3, r3, #7
 800aa72:	2b05      	cmp	r3, #5
 800aa74:	d826      	bhi.n	800aac4 <UART_SetConfig+0x4bc>
 800aa76:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <UART_SetConfig+0x474>)
 800aa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7c:	0800aa95 	.word	0x0800aa95
 800aa80:	0800aa9d 	.word	0x0800aa9d
 800aa84:	0800aaa5 	.word	0x0800aaa5
 800aa88:	0800aaad 	.word	0x0800aaad
 800aa8c:	0800aab5 	.word	0x0800aab5
 800aa90:	0800aabd 	.word	0x0800aabd
 800aa94:	2300      	movs	r3, #0
 800aa96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa9a:	e18a      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aa9c:	2304      	movs	r3, #4
 800aa9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaa2:	e186      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aaa4:	2308      	movs	r3, #8
 800aaa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaaa:	e182      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aaac:	2310      	movs	r3, #16
 800aaae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aab2:	e17e      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aab4:	2320      	movs	r3, #32
 800aab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaba:	e17a      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aabc:	2340      	movs	r3, #64	; 0x40
 800aabe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aac2:	e176      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aac4:	2380      	movs	r3, #128	; 0x80
 800aac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaca:	e172      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a5b      	ldr	r2, [pc, #364]	; (800ac40 <UART_SetConfig+0x638>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d130      	bne.n	800ab38 <UART_SetConfig+0x530>
 800aad6:	4b58      	ldr	r3, [pc, #352]	; (800ac38 <UART_SetConfig+0x630>)
 800aad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aada:	f003 0307 	and.w	r3, r3, #7
 800aade:	2b05      	cmp	r3, #5
 800aae0:	d826      	bhi.n	800ab30 <UART_SetConfig+0x528>
 800aae2:	a201      	add	r2, pc, #4	; (adr r2, 800aae8 <UART_SetConfig+0x4e0>)
 800aae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae8:	0800ab01 	.word	0x0800ab01
 800aaec:	0800ab09 	.word	0x0800ab09
 800aaf0:	0800ab11 	.word	0x0800ab11
 800aaf4:	0800ab19 	.word	0x0800ab19
 800aaf8:	0800ab21 	.word	0x0800ab21
 800aafc:	0800ab29 	.word	0x0800ab29
 800ab00:	2300      	movs	r3, #0
 800ab02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab06:	e154      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ab08:	2304      	movs	r3, #4
 800ab0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab0e:	e150      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ab10:	2308      	movs	r3, #8
 800ab12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab16:	e14c      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ab18:	2310      	movs	r3, #16
 800ab1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab1e:	e148      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ab20:	2320      	movs	r3, #32
 800ab22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab26:	e144      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ab28:	2340      	movs	r3, #64	; 0x40
 800ab2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab2e:	e140      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ab30:	2380      	movs	r3, #128	; 0x80
 800ab32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab36:	e13c      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a41      	ldr	r2, [pc, #260]	; (800ac44 <UART_SetConfig+0x63c>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	f040 8082 	bne.w	800ac48 <UART_SetConfig+0x640>
 800ab44:	4b3c      	ldr	r3, [pc, #240]	; (800ac38 <UART_SetConfig+0x630>)
 800ab46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab4c:	2b28      	cmp	r3, #40	; 0x28
 800ab4e:	d86d      	bhi.n	800ac2c <UART_SetConfig+0x624>
 800ab50:	a201      	add	r2, pc, #4	; (adr r2, 800ab58 <UART_SetConfig+0x550>)
 800ab52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab56:	bf00      	nop
 800ab58:	0800abfd 	.word	0x0800abfd
 800ab5c:	0800ac2d 	.word	0x0800ac2d
 800ab60:	0800ac2d 	.word	0x0800ac2d
 800ab64:	0800ac2d 	.word	0x0800ac2d
 800ab68:	0800ac2d 	.word	0x0800ac2d
 800ab6c:	0800ac2d 	.word	0x0800ac2d
 800ab70:	0800ac2d 	.word	0x0800ac2d
 800ab74:	0800ac2d 	.word	0x0800ac2d
 800ab78:	0800ac05 	.word	0x0800ac05
 800ab7c:	0800ac2d 	.word	0x0800ac2d
 800ab80:	0800ac2d 	.word	0x0800ac2d
 800ab84:	0800ac2d 	.word	0x0800ac2d
 800ab88:	0800ac2d 	.word	0x0800ac2d
 800ab8c:	0800ac2d 	.word	0x0800ac2d
 800ab90:	0800ac2d 	.word	0x0800ac2d
 800ab94:	0800ac2d 	.word	0x0800ac2d
 800ab98:	0800ac0d 	.word	0x0800ac0d
 800ab9c:	0800ac2d 	.word	0x0800ac2d
 800aba0:	0800ac2d 	.word	0x0800ac2d
 800aba4:	0800ac2d 	.word	0x0800ac2d
 800aba8:	0800ac2d 	.word	0x0800ac2d
 800abac:	0800ac2d 	.word	0x0800ac2d
 800abb0:	0800ac2d 	.word	0x0800ac2d
 800abb4:	0800ac2d 	.word	0x0800ac2d
 800abb8:	0800ac15 	.word	0x0800ac15
 800abbc:	0800ac2d 	.word	0x0800ac2d
 800abc0:	0800ac2d 	.word	0x0800ac2d
 800abc4:	0800ac2d 	.word	0x0800ac2d
 800abc8:	0800ac2d 	.word	0x0800ac2d
 800abcc:	0800ac2d 	.word	0x0800ac2d
 800abd0:	0800ac2d 	.word	0x0800ac2d
 800abd4:	0800ac2d 	.word	0x0800ac2d
 800abd8:	0800ac1d 	.word	0x0800ac1d
 800abdc:	0800ac2d 	.word	0x0800ac2d
 800abe0:	0800ac2d 	.word	0x0800ac2d
 800abe4:	0800ac2d 	.word	0x0800ac2d
 800abe8:	0800ac2d 	.word	0x0800ac2d
 800abec:	0800ac2d 	.word	0x0800ac2d
 800abf0:	0800ac2d 	.word	0x0800ac2d
 800abf4:	0800ac2d 	.word	0x0800ac2d
 800abf8:	0800ac25 	.word	0x0800ac25
 800abfc:	2301      	movs	r3, #1
 800abfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac02:	e0d6      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ac04:	2304      	movs	r3, #4
 800ac06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0a:	e0d2      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ac0c:	2308      	movs	r3, #8
 800ac0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac12:	e0ce      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ac14:	2310      	movs	r3, #16
 800ac16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1a:	e0ca      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ac1c:	2320      	movs	r3, #32
 800ac1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac22:	e0c6      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ac24:	2340      	movs	r3, #64	; 0x40
 800ac26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2a:	e0c2      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ac2c:	2380      	movs	r3, #128	; 0x80
 800ac2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac32:	e0be      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ac34:	40011400 	.word	0x40011400
 800ac38:	58024400 	.word	0x58024400
 800ac3c:	40007800 	.word	0x40007800
 800ac40:	40007c00 	.word	0x40007c00
 800ac44:	40011800 	.word	0x40011800
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4aad      	ldr	r2, [pc, #692]	; (800af04 <UART_SetConfig+0x8fc>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d176      	bne.n	800ad40 <UART_SetConfig+0x738>
 800ac52:	4bad      	ldr	r3, [pc, #692]	; (800af08 <UART_SetConfig+0x900>)
 800ac54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac5a:	2b28      	cmp	r3, #40	; 0x28
 800ac5c:	d86c      	bhi.n	800ad38 <UART_SetConfig+0x730>
 800ac5e:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <UART_SetConfig+0x65c>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800ad09 	.word	0x0800ad09
 800ac68:	0800ad39 	.word	0x0800ad39
 800ac6c:	0800ad39 	.word	0x0800ad39
 800ac70:	0800ad39 	.word	0x0800ad39
 800ac74:	0800ad39 	.word	0x0800ad39
 800ac78:	0800ad39 	.word	0x0800ad39
 800ac7c:	0800ad39 	.word	0x0800ad39
 800ac80:	0800ad39 	.word	0x0800ad39
 800ac84:	0800ad11 	.word	0x0800ad11
 800ac88:	0800ad39 	.word	0x0800ad39
 800ac8c:	0800ad39 	.word	0x0800ad39
 800ac90:	0800ad39 	.word	0x0800ad39
 800ac94:	0800ad39 	.word	0x0800ad39
 800ac98:	0800ad39 	.word	0x0800ad39
 800ac9c:	0800ad39 	.word	0x0800ad39
 800aca0:	0800ad39 	.word	0x0800ad39
 800aca4:	0800ad19 	.word	0x0800ad19
 800aca8:	0800ad39 	.word	0x0800ad39
 800acac:	0800ad39 	.word	0x0800ad39
 800acb0:	0800ad39 	.word	0x0800ad39
 800acb4:	0800ad39 	.word	0x0800ad39
 800acb8:	0800ad39 	.word	0x0800ad39
 800acbc:	0800ad39 	.word	0x0800ad39
 800acc0:	0800ad39 	.word	0x0800ad39
 800acc4:	0800ad21 	.word	0x0800ad21
 800acc8:	0800ad39 	.word	0x0800ad39
 800accc:	0800ad39 	.word	0x0800ad39
 800acd0:	0800ad39 	.word	0x0800ad39
 800acd4:	0800ad39 	.word	0x0800ad39
 800acd8:	0800ad39 	.word	0x0800ad39
 800acdc:	0800ad39 	.word	0x0800ad39
 800ace0:	0800ad39 	.word	0x0800ad39
 800ace4:	0800ad29 	.word	0x0800ad29
 800ace8:	0800ad39 	.word	0x0800ad39
 800acec:	0800ad39 	.word	0x0800ad39
 800acf0:	0800ad39 	.word	0x0800ad39
 800acf4:	0800ad39 	.word	0x0800ad39
 800acf8:	0800ad39 	.word	0x0800ad39
 800acfc:	0800ad39 	.word	0x0800ad39
 800ad00:	0800ad39 	.word	0x0800ad39
 800ad04:	0800ad31 	.word	0x0800ad31
 800ad08:	2301      	movs	r3, #1
 800ad0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad0e:	e050      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad10:	2304      	movs	r3, #4
 800ad12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad16:	e04c      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad18:	2308      	movs	r3, #8
 800ad1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad1e:	e048      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad20:	2310      	movs	r3, #16
 800ad22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad26:	e044      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad28:	2320      	movs	r3, #32
 800ad2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad2e:	e040      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad30:	2340      	movs	r3, #64	; 0x40
 800ad32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad36:	e03c      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad38:	2380      	movs	r3, #128	; 0x80
 800ad3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3e:	e038      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a71      	ldr	r2, [pc, #452]	; (800af0c <UART_SetConfig+0x904>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d130      	bne.n	800adac <UART_SetConfig+0x7a4>
 800ad4a:	4b6f      	ldr	r3, [pc, #444]	; (800af08 <UART_SetConfig+0x900>)
 800ad4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad4e:	f003 0307 	and.w	r3, r3, #7
 800ad52:	2b05      	cmp	r3, #5
 800ad54:	d826      	bhi.n	800ada4 <UART_SetConfig+0x79c>
 800ad56:	a201      	add	r2, pc, #4	; (adr r2, 800ad5c <UART_SetConfig+0x754>)
 800ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5c:	0800ad75 	.word	0x0800ad75
 800ad60:	0800ad7d 	.word	0x0800ad7d
 800ad64:	0800ad85 	.word	0x0800ad85
 800ad68:	0800ad8d 	.word	0x0800ad8d
 800ad6c:	0800ad95 	.word	0x0800ad95
 800ad70:	0800ad9d 	.word	0x0800ad9d
 800ad74:	2302      	movs	r3, #2
 800ad76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad7a:	e01a      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad82:	e016      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad84:	2308      	movs	r3, #8
 800ad86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad8a:	e012      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad92:	e00e      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad94:	2320      	movs	r3, #32
 800ad96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad9a:	e00a      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ad9c:	2340      	movs	r3, #64	; 0x40
 800ad9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ada2:	e006      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800ada4:	2380      	movs	r3, #128	; 0x80
 800ada6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adaa:	e002      	b.n	800adb2 <UART_SetConfig+0x7aa>
 800adac:	2380      	movs	r3, #128	; 0x80
 800adae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a55      	ldr	r2, [pc, #340]	; (800af0c <UART_SetConfig+0x904>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	f040 80f0 	bne.w	800af9e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800adbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adc2:	2b20      	cmp	r3, #32
 800adc4:	dc46      	bgt.n	800ae54 <UART_SetConfig+0x84c>
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	db75      	blt.n	800aeb6 <UART_SetConfig+0x8ae>
 800adca:	3b02      	subs	r3, #2
 800adcc:	2b1e      	cmp	r3, #30
 800adce:	d872      	bhi.n	800aeb6 <UART_SetConfig+0x8ae>
 800add0:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <UART_SetConfig+0x7d0>)
 800add2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add6:	bf00      	nop
 800add8:	0800ae5b 	.word	0x0800ae5b
 800addc:	0800aeb7 	.word	0x0800aeb7
 800ade0:	0800ae63 	.word	0x0800ae63
 800ade4:	0800aeb7 	.word	0x0800aeb7
 800ade8:	0800aeb7 	.word	0x0800aeb7
 800adec:	0800aeb7 	.word	0x0800aeb7
 800adf0:	0800ae73 	.word	0x0800ae73
 800adf4:	0800aeb7 	.word	0x0800aeb7
 800adf8:	0800aeb7 	.word	0x0800aeb7
 800adfc:	0800aeb7 	.word	0x0800aeb7
 800ae00:	0800aeb7 	.word	0x0800aeb7
 800ae04:	0800aeb7 	.word	0x0800aeb7
 800ae08:	0800aeb7 	.word	0x0800aeb7
 800ae0c:	0800aeb7 	.word	0x0800aeb7
 800ae10:	0800ae83 	.word	0x0800ae83
 800ae14:	0800aeb7 	.word	0x0800aeb7
 800ae18:	0800aeb7 	.word	0x0800aeb7
 800ae1c:	0800aeb7 	.word	0x0800aeb7
 800ae20:	0800aeb7 	.word	0x0800aeb7
 800ae24:	0800aeb7 	.word	0x0800aeb7
 800ae28:	0800aeb7 	.word	0x0800aeb7
 800ae2c:	0800aeb7 	.word	0x0800aeb7
 800ae30:	0800aeb7 	.word	0x0800aeb7
 800ae34:	0800aeb7 	.word	0x0800aeb7
 800ae38:	0800aeb7 	.word	0x0800aeb7
 800ae3c:	0800aeb7 	.word	0x0800aeb7
 800ae40:	0800aeb7 	.word	0x0800aeb7
 800ae44:	0800aeb7 	.word	0x0800aeb7
 800ae48:	0800aeb7 	.word	0x0800aeb7
 800ae4c:	0800aeb7 	.word	0x0800aeb7
 800ae50:	0800aea9 	.word	0x0800aea9
 800ae54:	2b40      	cmp	r3, #64	; 0x40
 800ae56:	d02a      	beq.n	800aeae <UART_SetConfig+0x8a6>
 800ae58:	e02d      	b.n	800aeb6 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae5a:	f7fd ffff 	bl	8008e5c <HAL_RCCEx_GetD3PCLK1Freq>
 800ae5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae60:	e02f      	b.n	800aec2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae62:	f107 0314 	add.w	r3, r7, #20
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe f80e 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae70:	e027      	b.n	800aec2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae72:	f107 0308 	add.w	r3, r7, #8
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fe f95a 	bl	8009130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae80:	e01f      	b.n	800aec2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae82:	4b21      	ldr	r3, [pc, #132]	; (800af08 <UART_SetConfig+0x900>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d009      	beq.n	800aea2 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae8e:	4b1e      	ldr	r3, [pc, #120]	; (800af08 <UART_SetConfig+0x900>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	08db      	lsrs	r3, r3, #3
 800ae94:	f003 0303 	and.w	r3, r3, #3
 800ae98:	4a1d      	ldr	r2, [pc, #116]	; (800af10 <UART_SetConfig+0x908>)
 800ae9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aea0:	e00f      	b.n	800aec2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800aea2:	4b1b      	ldr	r3, [pc, #108]	; (800af10 <UART_SetConfig+0x908>)
 800aea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aea6:	e00c      	b.n	800aec2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aea8:	4b1a      	ldr	r3, [pc, #104]	; (800af14 <UART_SetConfig+0x90c>)
 800aeaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aeac:	e009      	b.n	800aec2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aeb4:	e005      	b.n	800aec2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aec0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 81e6 	beq.w	800b296 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aece:	4a12      	ldr	r2, [pc, #72]	; (800af18 <UART_SetConfig+0x910>)
 800aed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aed4:	461a      	mov	r2, r3
 800aed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aedc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	4613      	mov	r3, r2
 800aee4:	005b      	lsls	r3, r3, #1
 800aee6:	4413      	add	r3, r2
 800aee8:	6a3a      	ldr	r2, [r7, #32]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d305      	bcc.n	800aefa <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aef4:	6a3a      	ldr	r2, [r7, #32]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d910      	bls.n	800af1c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800af00:	e1c9      	b.n	800b296 <UART_SetConfig+0xc8e>
 800af02:	bf00      	nop
 800af04:	40011c00 	.word	0x40011c00
 800af08:	58024400 	.word	0x58024400
 800af0c:	58000c00 	.word	0x58000c00
 800af10:	03d09000 	.word	0x03d09000
 800af14:	003d0900 	.word	0x003d0900
 800af18:	0800ea9c 	.word	0x0800ea9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1e:	4618      	mov	r0, r3
 800af20:	f04f 0100 	mov.w	r1, #0
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af28:	4ac1      	ldr	r2, [pc, #772]	; (800b230 <UART_SetConfig+0xc28>)
 800af2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af2e:	b29a      	uxth	r2, r3
 800af30:	f04f 0300 	mov.w	r3, #0
 800af34:	f7f5 f9ec 	bl	8000310 <__aeabi_uldivmod>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	4610      	mov	r0, r2
 800af3e:	4619      	mov	r1, r3
 800af40:	f04f 0200 	mov.w	r2, #0
 800af44:	f04f 0300 	mov.w	r3, #0
 800af48:	020b      	lsls	r3, r1, #8
 800af4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af4e:	0202      	lsls	r2, r0, #8
 800af50:	6879      	ldr	r1, [r7, #4]
 800af52:	6849      	ldr	r1, [r1, #4]
 800af54:	0849      	lsrs	r1, r1, #1
 800af56:	4608      	mov	r0, r1
 800af58:	f04f 0100 	mov.w	r1, #0
 800af5c:	1814      	adds	r4, r2, r0
 800af5e:	eb43 0501 	adc.w	r5, r3, r1
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	461a      	mov	r2, r3
 800af68:	f04f 0300 	mov.w	r3, #0
 800af6c:	4620      	mov	r0, r4
 800af6e:	4629      	mov	r1, r5
 800af70:	f7f5 f9ce 	bl	8000310 <__aeabi_uldivmod>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4613      	mov	r3, r2
 800af7a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af82:	d308      	bcc.n	800af96 <UART_SetConfig+0x98e>
 800af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af8a:	d204      	bcs.n	800af96 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af92:	60da      	str	r2, [r3, #12]
 800af94:	e17f      	b.n	800b296 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800af9c:	e17b      	b.n	800b296 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afa6:	f040 80bd 	bne.w	800b124 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800afaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800afae:	2b20      	cmp	r3, #32
 800afb0:	dc48      	bgt.n	800b044 <UART_SetConfig+0xa3c>
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	db7b      	blt.n	800b0ae <UART_SetConfig+0xaa6>
 800afb6:	2b20      	cmp	r3, #32
 800afb8:	d879      	bhi.n	800b0ae <UART_SetConfig+0xaa6>
 800afba:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <UART_SetConfig+0x9b8>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800b04b 	.word	0x0800b04b
 800afc4:	0800b053 	.word	0x0800b053
 800afc8:	0800b0af 	.word	0x0800b0af
 800afcc:	0800b0af 	.word	0x0800b0af
 800afd0:	0800b05b 	.word	0x0800b05b
 800afd4:	0800b0af 	.word	0x0800b0af
 800afd8:	0800b0af 	.word	0x0800b0af
 800afdc:	0800b0af 	.word	0x0800b0af
 800afe0:	0800b06b 	.word	0x0800b06b
 800afe4:	0800b0af 	.word	0x0800b0af
 800afe8:	0800b0af 	.word	0x0800b0af
 800afec:	0800b0af 	.word	0x0800b0af
 800aff0:	0800b0af 	.word	0x0800b0af
 800aff4:	0800b0af 	.word	0x0800b0af
 800aff8:	0800b0af 	.word	0x0800b0af
 800affc:	0800b0af 	.word	0x0800b0af
 800b000:	0800b07b 	.word	0x0800b07b
 800b004:	0800b0af 	.word	0x0800b0af
 800b008:	0800b0af 	.word	0x0800b0af
 800b00c:	0800b0af 	.word	0x0800b0af
 800b010:	0800b0af 	.word	0x0800b0af
 800b014:	0800b0af 	.word	0x0800b0af
 800b018:	0800b0af 	.word	0x0800b0af
 800b01c:	0800b0af 	.word	0x0800b0af
 800b020:	0800b0af 	.word	0x0800b0af
 800b024:	0800b0af 	.word	0x0800b0af
 800b028:	0800b0af 	.word	0x0800b0af
 800b02c:	0800b0af 	.word	0x0800b0af
 800b030:	0800b0af 	.word	0x0800b0af
 800b034:	0800b0af 	.word	0x0800b0af
 800b038:	0800b0af 	.word	0x0800b0af
 800b03c:	0800b0af 	.word	0x0800b0af
 800b040:	0800b0a1 	.word	0x0800b0a1
 800b044:	2b40      	cmp	r3, #64	; 0x40
 800b046:	d02e      	beq.n	800b0a6 <UART_SetConfig+0xa9e>
 800b048:	e031      	b.n	800b0ae <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b04a:	f7fc fbbd 	bl	80077c8 <HAL_RCC_GetPCLK1Freq>
 800b04e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b050:	e033      	b.n	800b0ba <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b052:	f7fc fbcf 	bl	80077f4 <HAL_RCC_GetPCLK2Freq>
 800b056:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b058:	e02f      	b.n	800b0ba <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b05a:	f107 0314 	add.w	r3, r7, #20
 800b05e:	4618      	mov	r0, r3
 800b060:	f7fd ff12 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b068:	e027      	b.n	800b0ba <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b06a:	f107 0308 	add.w	r3, r7, #8
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe f85e 	bl	8009130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b078:	e01f      	b.n	800b0ba <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b07a:	4b6e      	ldr	r3, [pc, #440]	; (800b234 <UART_SetConfig+0xc2c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 0320 	and.w	r3, r3, #32
 800b082:	2b00      	cmp	r3, #0
 800b084:	d009      	beq.n	800b09a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b086:	4b6b      	ldr	r3, [pc, #428]	; (800b234 <UART_SetConfig+0xc2c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	08db      	lsrs	r3, r3, #3
 800b08c:	f003 0303 	and.w	r3, r3, #3
 800b090:	4a69      	ldr	r2, [pc, #420]	; (800b238 <UART_SetConfig+0xc30>)
 800b092:	fa22 f303 	lsr.w	r3, r2, r3
 800b096:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b098:	e00f      	b.n	800b0ba <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800b09a:	4b67      	ldr	r3, [pc, #412]	; (800b238 <UART_SetConfig+0xc30>)
 800b09c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b09e:	e00c      	b.n	800b0ba <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0a0:	4b66      	ldr	r3, [pc, #408]	; (800b23c <UART_SetConfig+0xc34>)
 800b0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0a4:	e009      	b.n	800b0ba <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0ac:	e005      	b.n	800b0ba <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b0b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f000 80ea 	beq.w	800b296 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c6:	4a5a      	ldr	r2, [pc, #360]	; (800b230 <UART_SetConfig+0xc28>)
 800b0c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0d4:	005a      	lsls	r2, r3, #1
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	085b      	lsrs	r3, r3, #1
 800b0dc:	441a      	add	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	2b0f      	cmp	r3, #15
 800b0ec:	d916      	bls.n	800b11c <UART_SetConfig+0xb14>
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f4:	d212      	bcs.n	800b11c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	f023 030f 	bic.w	r3, r3, #15
 800b0fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	085b      	lsrs	r3, r3, #1
 800b104:	b29b      	uxth	r3, r3
 800b106:	f003 0307 	and.w	r3, r3, #7
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b10e:	4313      	orrs	r3, r2
 800b110:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b118:	60da      	str	r2, [r3, #12]
 800b11a:	e0bc      	b.n	800b296 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b122:	e0b8      	b.n	800b296 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b128:	2b20      	cmp	r3, #32
 800b12a:	dc4b      	bgt.n	800b1c4 <UART_SetConfig+0xbbc>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f2c0 8087 	blt.w	800b240 <UART_SetConfig+0xc38>
 800b132:	2b20      	cmp	r3, #32
 800b134:	f200 8084 	bhi.w	800b240 <UART_SetConfig+0xc38>
 800b138:	a201      	add	r2, pc, #4	; (adr r2, 800b140 <UART_SetConfig+0xb38>)
 800b13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13e:	bf00      	nop
 800b140:	0800b1cb 	.word	0x0800b1cb
 800b144:	0800b1d3 	.word	0x0800b1d3
 800b148:	0800b241 	.word	0x0800b241
 800b14c:	0800b241 	.word	0x0800b241
 800b150:	0800b1db 	.word	0x0800b1db
 800b154:	0800b241 	.word	0x0800b241
 800b158:	0800b241 	.word	0x0800b241
 800b15c:	0800b241 	.word	0x0800b241
 800b160:	0800b1eb 	.word	0x0800b1eb
 800b164:	0800b241 	.word	0x0800b241
 800b168:	0800b241 	.word	0x0800b241
 800b16c:	0800b241 	.word	0x0800b241
 800b170:	0800b241 	.word	0x0800b241
 800b174:	0800b241 	.word	0x0800b241
 800b178:	0800b241 	.word	0x0800b241
 800b17c:	0800b241 	.word	0x0800b241
 800b180:	0800b1fb 	.word	0x0800b1fb
 800b184:	0800b241 	.word	0x0800b241
 800b188:	0800b241 	.word	0x0800b241
 800b18c:	0800b241 	.word	0x0800b241
 800b190:	0800b241 	.word	0x0800b241
 800b194:	0800b241 	.word	0x0800b241
 800b198:	0800b241 	.word	0x0800b241
 800b19c:	0800b241 	.word	0x0800b241
 800b1a0:	0800b241 	.word	0x0800b241
 800b1a4:	0800b241 	.word	0x0800b241
 800b1a8:	0800b241 	.word	0x0800b241
 800b1ac:	0800b241 	.word	0x0800b241
 800b1b0:	0800b241 	.word	0x0800b241
 800b1b4:	0800b241 	.word	0x0800b241
 800b1b8:	0800b241 	.word	0x0800b241
 800b1bc:	0800b241 	.word	0x0800b241
 800b1c0:	0800b221 	.word	0x0800b221
 800b1c4:	2b40      	cmp	r3, #64	; 0x40
 800b1c6:	d02e      	beq.n	800b226 <UART_SetConfig+0xc1e>
 800b1c8:	e03a      	b.n	800b240 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1ca:	f7fc fafd 	bl	80077c8 <HAL_RCC_GetPCLK1Freq>
 800b1ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b1d0:	e03c      	b.n	800b24c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1d2:	f7fc fb0f 	bl	80077f4 <HAL_RCC_GetPCLK2Freq>
 800b1d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b1d8:	e038      	b.n	800b24c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1da:	f107 0314 	add.w	r3, r7, #20
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fd fe52 	bl	8008e88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1e8:	e030      	b.n	800b24c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fd ff9e 	bl	8009130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1f8:	e028      	b.n	800b24c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1fa:	4b0e      	ldr	r3, [pc, #56]	; (800b234 <UART_SetConfig+0xc2c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 0320 	and.w	r3, r3, #32
 800b202:	2b00      	cmp	r3, #0
 800b204:	d009      	beq.n	800b21a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b206:	4b0b      	ldr	r3, [pc, #44]	; (800b234 <UART_SetConfig+0xc2c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	08db      	lsrs	r3, r3, #3
 800b20c:	f003 0303 	and.w	r3, r3, #3
 800b210:	4a09      	ldr	r2, [pc, #36]	; (800b238 <UART_SetConfig+0xc30>)
 800b212:	fa22 f303 	lsr.w	r3, r2, r3
 800b216:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b218:	e018      	b.n	800b24c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800b21a:	4b07      	ldr	r3, [pc, #28]	; (800b238 <UART_SetConfig+0xc30>)
 800b21c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b21e:	e015      	b.n	800b24c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b220:	4b06      	ldr	r3, [pc, #24]	; (800b23c <UART_SetConfig+0xc34>)
 800b222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b224:	e012      	b.n	800b24c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b22a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b22c:	e00e      	b.n	800b24c <UART_SetConfig+0xc44>
 800b22e:	bf00      	nop
 800b230:	0800ea9c 	.word	0x0800ea9c
 800b234:	58024400 	.word	0x58024400
 800b238:	03d09000 	.word	0x03d09000
 800b23c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b24a:	bf00      	nop
    }

    if (pclk != 0U)
 800b24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d021      	beq.n	800b296 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b256:	4a1a      	ldr	r2, [pc, #104]	; (800b2c0 <UART_SetConfig+0xcb8>)
 800b258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b25c:	461a      	mov	r2, r3
 800b25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b260:	fbb3 f2f2 	udiv	r2, r3, r2
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	085b      	lsrs	r3, r3, #1
 800b26a:	441a      	add	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	fbb2 f3f3 	udiv	r3, r2, r3
 800b274:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b278:	2b0f      	cmp	r3, #15
 800b27a:	d909      	bls.n	800b290 <UART_SetConfig+0xc88>
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b282:	d205      	bcs.n	800b290 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	b29a      	uxth	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	60da      	str	r2, [r3, #12]
 800b28e:	e002      	b.n	800b296 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b2b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3738      	adds	r7, #56	; 0x38
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	0800ea9c 	.word	0x0800ea9c

0800b2c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d0:	f003 0301 	and.w	r3, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00a      	beq.n	800b2ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00a      	beq.n	800b310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	430a      	orrs	r2, r1
 800b30e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b314:	f003 0304 	and.w	r3, r3, #4
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00a      	beq.n	800b332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	430a      	orrs	r2, r1
 800b330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b336:	f003 0308 	and.w	r3, r3, #8
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00a      	beq.n	800b354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	430a      	orrs	r2, r1
 800b352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b358:	f003 0310 	and.w	r3, r3, #16
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00a      	beq.n	800b376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	430a      	orrs	r2, r1
 800b374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b37a:	f003 0320 	and.w	r3, r3, #32
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00a      	beq.n	800b398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	430a      	orrs	r2, r1
 800b396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d01a      	beq.n	800b3da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	430a      	orrs	r2, r1
 800b3b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3c2:	d10a      	bne.n	800b3da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	430a      	orrs	r2, r1
 800b3d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00a      	beq.n	800b3fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	605a      	str	r2, [r3, #4]
  }
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af02      	add	r7, sp, #8
 800b40e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b418:	f7f7 fd6c 	bl	8002ef4 <HAL_GetTick>
 800b41c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0308 	and.w	r3, r3, #8
 800b428:	2b08      	cmp	r3, #8
 800b42a:	d10e      	bne.n	800b44a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b42c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f82f 	bl	800b49e <UART_WaitOnFlagUntilTimeout>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	e025      	b.n	800b496 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 0304 	and.w	r3, r3, #4
 800b454:	2b04      	cmp	r3, #4
 800b456:	d10e      	bne.n	800b476 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f819 	bl	800b49e <UART_WaitOnFlagUntilTimeout>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e00f      	b.n	800b496 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2220      	movs	r2, #32
 800b47a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2220      	movs	r2, #32
 800b482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b09c      	sub	sp, #112	; 0x70
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	603b      	str	r3, [r7, #0]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4ae:	e0a9      	b.n	800b604 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4b6:	f000 80a5 	beq.w	800b604 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4ba:	f7f7 fd1b 	bl	8002ef4 <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d302      	bcc.n	800b4d0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b4ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d140      	bne.n	800b552 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d8:	e853 3f00 	ldrex	r3, [r3]
 800b4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b4e4:	667b      	str	r3, [r7, #100]	; 0x64
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b4f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4f6:	e841 2300 	strex	r3, r2, [r1]
 800b4fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b4fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1e6      	bne.n	800b4d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	3308      	adds	r3, #8
 800b508:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b50c:	e853 3f00 	ldrex	r3, [r3]
 800b510:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b514:	f023 0301 	bic.w	r3, r3, #1
 800b518:	663b      	str	r3, [r7, #96]	; 0x60
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3308      	adds	r3, #8
 800b520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b522:	64ba      	str	r2, [r7, #72]	; 0x48
 800b524:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b526:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b52a:	e841 2300 	strex	r3, r2, [r1]
 800b52e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1e5      	bne.n	800b502 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2220      	movs	r2, #32
 800b53a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2220      	movs	r2, #32
 800b542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	e069      	b.n	800b626 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 0304 	and.w	r3, r3, #4
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d051      	beq.n	800b604 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b56a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b56e:	d149      	bne.n	800b604 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b578:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b58e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	461a      	mov	r2, r3
 800b596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b598:	637b      	str	r3, [r7, #52]	; 0x34
 800b59a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5a0:	e841 2300 	strex	r3, r2, [r1]
 800b5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1e6      	bne.n	800b57a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	e853 3f00 	ldrex	r3, [r3]
 800b5ba:	613b      	str	r3, [r7, #16]
   return(result);
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f023 0301 	bic.w	r3, r3, #1
 800b5c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5cc:	623a      	str	r2, [r7, #32]
 800b5ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d0:	69f9      	ldr	r1, [r7, #28]
 800b5d2:	6a3a      	ldr	r2, [r7, #32]
 800b5d4:	e841 2300 	strex	r3, r2, [r1]
 800b5d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1e5      	bne.n	800b5ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2220      	movs	r2, #32
 800b5ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b600:	2303      	movs	r3, #3
 800b602:	e010      	b.n	800b626 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	69da      	ldr	r2, [r3, #28]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	4013      	ands	r3, r2
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	429a      	cmp	r2, r3
 800b612:	bf0c      	ite	eq
 800b614:	2301      	moveq	r3, #1
 800b616:	2300      	movne	r3, #0
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	461a      	mov	r2, r3
 800b61c:	79fb      	ldrb	r3, [r7, #7]
 800b61e:	429a      	cmp	r2, r3
 800b620:	f43f af46 	beq.w	800b4b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3770      	adds	r7, #112	; 0x70
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b62e:	b480      	push	{r7}
 800b630:	b085      	sub	sp, #20
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d101      	bne.n	800b644 <HAL_UARTEx_DisableFifoMode+0x16>
 800b640:	2302      	movs	r3, #2
 800b642:	e027      	b.n	800b694 <HAL_UARTEx_DisableFifoMode+0x66>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2224      	movs	r2, #36	; 0x24
 800b650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f022 0201 	bic.w	r2, r2, #1
 800b66a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b672:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2220      	movs	r2, #32
 800b686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d101      	bne.n	800b6b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	e02d      	b.n	800b714 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2224      	movs	r2, #36	; 0x24
 800b6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f022 0201 	bic.w	r2, r2, #1
 800b6de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f84f 	bl	800b798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2220      	movs	r2, #32
 800b706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d101      	bne.n	800b734 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b730:	2302      	movs	r3, #2
 800b732:	e02d      	b.n	800b790 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2224      	movs	r2, #36	; 0x24
 800b740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f022 0201 	bic.w	r2, r2, #1
 800b75a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	430a      	orrs	r2, r1
 800b76e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f811 	bl	800b798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2220      	movs	r2, #32
 800b782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d108      	bne.n	800b7ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b7b8:	e031      	b.n	800b81e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b7ba:	2310      	movs	r3, #16
 800b7bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b7be:	2310      	movs	r3, #16
 800b7c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	0e5b      	lsrs	r3, r3, #25
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	f003 0307 	and.w	r3, r3, #7
 800b7d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	0f5b      	lsrs	r3, r3, #29
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	f003 0307 	and.w	r3, r3, #7
 800b7e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7e2:	7bbb      	ldrb	r3, [r7, #14]
 800b7e4:	7b3a      	ldrb	r2, [r7, #12]
 800b7e6:	4911      	ldr	r1, [pc, #68]	; (800b82c <UARTEx_SetNbDataToProcess+0x94>)
 800b7e8:	5c8a      	ldrb	r2, [r1, r2]
 800b7ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b7ee:	7b3a      	ldrb	r2, [r7, #12]
 800b7f0:	490f      	ldr	r1, [pc, #60]	; (800b830 <UARTEx_SetNbDataToProcess+0x98>)
 800b7f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b800:	7bfb      	ldrb	r3, [r7, #15]
 800b802:	7b7a      	ldrb	r2, [r7, #13]
 800b804:	4909      	ldr	r1, [pc, #36]	; (800b82c <UARTEx_SetNbDataToProcess+0x94>)
 800b806:	5c8a      	ldrb	r2, [r1, r2]
 800b808:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b80c:	7b7a      	ldrb	r2, [r7, #13]
 800b80e:	4908      	ldr	r1, [pc, #32]	; (800b830 <UARTEx_SetNbDataToProcess+0x98>)
 800b810:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b812:	fb93 f3f2 	sdiv	r3, r3, r2
 800b816:	b29a      	uxth	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b81e:	bf00      	nop
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	0800eab4 	.word	0x0800eab4
 800b830:	0800eabc 	.word	0x0800eabc

0800b834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	f5ad 5d10 	sub.w	sp, sp, #9216	; 0x2400
 800b83a:	b08a      	sub	sp, #40	; 0x28
 800b83c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  // for pdm: input buffer is uint8 with length >= (48 * 64 * 1/8) = 384
	  uint8_t pdm_buffer[PLAY_BUFF_SIZE/4] = {0};
 800b83e:	f242 0304 	movw	r3, #8196	; 0x2004
 800b842:	443b      	add	r3, r7
 800b844:	2200      	movs	r2, #0
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	3304      	adds	r3, #4
 800b84a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800b84e:	2100      	movs	r1, #0
 800b850:	4618      	mov	r0, r3
 800b852:	f002 fee9 	bl	800e628 <memset>

	  // for pdm: output buffer is uint16 with length >= 48
	  uint16_t pcm_buffer[PLAY_BUFF_SIZE] = {0};
 800b856:	4ba4      	ldr	r3, [pc, #656]	; (800bae8 <main+0x2b4>)
 800b858:	f242 4228 	movw	r2, #9256	; 0x2428
 800b85c:	443a      	add	r2, r7
 800b85e:	4413      	add	r3, r2
 800b860:	4618      	mov	r0, r3
 800b862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b866:	461a      	mov	r2, r3
 800b868:	2100      	movs	r1, #0
 800b86a:	f002 fedd 	bl	800e628 <memset>

	  uint32_t PlaybackPosition   = PLAY_BUFF_SIZE + pcm_buffer;
 800b86e:	4b9e      	ldr	r3, [pc, #632]	; (800bae8 <main+0x2b4>)
 800b870:	f242 4228 	movw	r2, #9256	; 0x2428
 800b874:	443a      	add	r2, r7
 800b876:	4413      	add	r3, r2
 800b878:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b87c:	f242 4224 	movw	r2, #9252	; 0x2424
 800b880:	443a      	add	r2, r7
 800b882:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b884:	f7f7 fab0 	bl	8002de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b888:	f000 f942 	bl	800bb10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b88c:	f000 fc6c 	bl	800c168 <MX_GPIO_Init>
  MX_BDMA_Init();
 800b890:	f000 fbea 	bl	800c068 <MX_BDMA_Init>
  MX_SAI4_Init();
 800b894:	f000 fb3c 	bl	800bf10 <MX_SAI4_Init>
  MX_CRC_Init();
 800b898:	f000 f9a8 	bl	800bbec <MX_CRC_Init>
  MX_USART3_UART_Init();
 800b89c:	f000 fb98 	bl	800bfd0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800b8a0:	f000 fc0a 	bl	800c0b8 <MX_DMA_Init>
  MX_PDM2PCM_Init();
 800b8a4:	f000 fcbc 	bl	800c220 <MX_PDM2PCM_Init>
  //MX_DFSDM1_Init();
  MX_SAI1_Init();
 800b8a8:	f000 fafc 	bl	800bea4 <MX_SAI1_Init>

  /* USER CODE BEGIN 2 */

  HAL_SAI_MspInit(&hdma_sai1_b);
 800b8ac:	488f      	ldr	r0, [pc, #572]	; (800baec <main+0x2b8>)
 800b8ae:	f000 fd81 	bl	800c3b4 <HAL_SAI_MspInit>
  /* Infinite loop */
  // output freq (pcm freq) = 48kHz
  // decimiation factor = 64

  /* INITIALIZE */
  HAL_SAI_MspInit(&hsai_BlockA4);
 800b8b2:	488f      	ldr	r0, [pc, #572]	; (800baf0 <main+0x2bc>)
 800b8b4:	f000 fd7e 	bl	800c3b4 <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockA4);
 800b8b8:	488d      	ldr	r0, [pc, #564]	; (800baf0 <main+0x2bc>)
 800b8ba:	f7fe f875 	bl	80099a8 <HAL_SAI_Init>

  // polling mode - SIZE = # BYTES
  HAL_SAI_Receive(&hsai_BlockA4, pdm_buffer, 64, 1000);
 800b8be:	f242 0104 	movw	r1, #8196	; 0x2004
 800b8c2:	4439      	add	r1, r7
 800b8c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8c8:	2240      	movs	r2, #64	; 0x40
 800b8ca:	4889      	ldr	r0, [pc, #548]	; (800baf0 <main+0x2bc>)
 800b8cc:	f7fe fa80 	bl	8009dd0 <HAL_SAI_Receive>
  uint32_t pdm_status = PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 800b8d0:	4b85      	ldr	r3, [pc, #532]	; (800bae8 <main+0x2b4>)
 800b8d2:	f242 4228 	movw	r2, #9256	; 0x2428
 800b8d6:	443a      	add	r2, r7
 800b8d8:	4413      	add	r3, r2
 800b8da:	f242 0004 	movw	r0, #8196	; 0x2004
 800b8de:	4438      	add	r0, r7
 800b8e0:	4a84      	ldr	r2, [pc, #528]	; (800baf4 <main+0x2c0>)
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	f002 fe5c 	bl	800e5a0 <PDM_Filter>
 800b8e8:	f242 4318 	movw	r3, #9240	; 0x2418
 800b8ec:	443b      	add	r3, r7
 800b8ee:	6018      	str	r0, [r3, #0]
  Playback_Init();
 800b8f0:	f000 fa18 	bl	800bd24 <Playback_Init>

  /* Initialize the data buffer */
  for(int i=0; i < PLAY_BUFF_SIZE; i+=2)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f242 4220 	movw	r2, #9248	; 0x2420
 800b8fa:	443a      	add	r2, r7
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	e01d      	b.n	800b93c <main+0x108>
  {
    PlayBuff[i]=*((__IO uint16_t *)(pcm_buffer + PLAY_HEADER + i));
 800b900:	f242 4320 	movw	r3, #9248	; 0x2420
 800b904:	443b      	add	r3, r7
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	332c      	adds	r3, #44	; 0x2c
 800b90a:	005a      	lsls	r2, r3, #1
 800b90c:	4b76      	ldr	r3, [pc, #472]	; (800bae8 <main+0x2b4>)
 800b90e:	f242 4128 	movw	r1, #9256	; 0x2428
 800b912:	4439      	add	r1, r7
 800b914:	440b      	add	r3, r1
 800b916:	4413      	add	r3, r2
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	b299      	uxth	r1, r3
 800b91c:	4a76      	ldr	r2, [pc, #472]	; (800baf8 <main+0x2c4>)
 800b91e:	f242 4320 	movw	r3, #9248	; 0x2420
 800b922:	443b      	add	r3, r7
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i < PLAY_BUFF_SIZE; i+=2)
 800b92a:	f242 4320 	movw	r3, #9248	; 0x2420
 800b92e:	443b      	add	r3, r7
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3302      	adds	r3, #2
 800b934:	f242 4220 	movw	r2, #9248	; 0x2420
 800b938:	443a      	add	r2, r7
 800b93a:	6013      	str	r3, [r2, #0]
 800b93c:	f242 4320 	movw	r3, #9248	; 0x2420
 800b940:	443b      	add	r3, r7
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b948:	dbda      	blt.n	800b900 <main+0xcc>
  }

  /* Start the playback */
  if(0 != AudioDrv->Play(AudioCompObj))
 800b94a:	4b6c      	ldr	r3, [pc, #432]	; (800bafc <main+0x2c8>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	4a6b      	ldr	r2, [pc, #428]	; (800bb00 <main+0x2cc>)
 800b952:	6812      	ldr	r2, [r2, #0]
 800b954:	4610      	mov	r0, r2
 800b956:	4798      	blx	r3
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <main+0x12e>
  {
    Error_Handler();
 800b95e:	f000 fc59 	bl	800c214 <Error_Handler>
  }

  if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t *)PlayBuff, PLAY_BUFF_SIZE))
 800b962:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b966:	4964      	ldr	r1, [pc, #400]	; (800baf8 <main+0x2c4>)
 800b968:	4866      	ldr	r0, [pc, #408]	; (800bb04 <main+0x2d0>)
 800b96a:	f7fe fb33 	bl	8009fd4 <HAL_SAI_Transmit_DMA>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <main+0x144>
  {
    Error_Handler();
 800b974:	f000 fc4e 	bl	800c214 <Error_Handler>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	    while(UpdatePointer==-1);
 800b978:	bf00      	nop
 800b97a:	4b63      	ldr	r3, [pc, #396]	; (800bb08 <main+0x2d4>)
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	b21b      	sxth	r3, r3
 800b980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b984:	d0f9      	beq.n	800b97a <main+0x146>

	    int position = UpdatePointer;
 800b986:	4b60      	ldr	r3, [pc, #384]	; (800bb08 <main+0x2d4>)
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	b21b      	sxth	r3, r3
 800b98c:	f242 4214 	movw	r2, #9236	; 0x2414
 800b990:	443a      	add	r2, r7
 800b992:	6013      	str	r3, [r2, #0]
	    UpdatePointer = -1;
 800b994:	4b5c      	ldr	r3, [pc, #368]	; (800bb08 <main+0x2d4>)
 800b996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b99a:	801a      	strh	r2, [r3, #0]

	    /* Update the first or the second part of the buffer */
	    for(int i = 0; i < PLAY_BUFF_SIZE/2; i++)
 800b99c:	2300      	movs	r3, #0
 800b99e:	f242 421c 	movw	r2, #9244	; 0x241c
 800b9a2:	443a      	add	r2, r7
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	e029      	b.n	800b9fc <main+0x1c8>
	    {
	      PlayBuff[i+position] = *(uint16_t *)(pcm_buffer + PlaybackPosition);
 800b9a8:	f242 4324 	movw	r3, #9252	; 0x2424
 800b9ac:	443b      	add	r3, r7
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	005a      	lsls	r2, r3, #1
 800b9b2:	4b4d      	ldr	r3, [pc, #308]	; (800bae8 <main+0x2b4>)
 800b9b4:	f242 4128 	movw	r1, #9256	; 0x2428
 800b9b8:	4439      	add	r1, r7
 800b9ba:	440b      	add	r3, r1
 800b9bc:	441a      	add	r2, r3
 800b9be:	f242 431c 	movw	r3, #9244	; 0x241c
 800b9c2:	443b      	add	r3, r7
 800b9c4:	6819      	ldr	r1, [r3, #0]
 800b9c6:	f242 4314 	movw	r3, #9236	; 0x2414
 800b9ca:	443b      	add	r3, r7
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	440b      	add	r3, r1
 800b9d0:	8811      	ldrh	r1, [r2, #0]
 800b9d2:	4a49      	ldr	r2, [pc, #292]	; (800baf8 <main+0x2c4>)
 800b9d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	      PlaybackPosition+=2;
 800b9d8:	f242 4324 	movw	r3, #9252	; 0x2424
 800b9dc:	443b      	add	r3, r7
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3302      	adds	r3, #2
 800b9e2:	f242 4224 	movw	r2, #9252	; 0x2424
 800b9e6:	443a      	add	r2, r7
 800b9e8:	6013      	str	r3, [r2, #0]
	    for(int i = 0; i < PLAY_BUFF_SIZE/2; i++)
 800b9ea:	f242 431c 	movw	r3, #9244	; 0x241c
 800b9ee:	443b      	add	r3, r7
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	f242 421c 	movw	r2, #9244	; 0x241c
 800b9f8:	443a      	add	r2, r7
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	f242 431c 	movw	r3, #9244	; 0x241c
 800ba00:	443b      	add	r3, r7
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba08:	dbce      	blt.n	800b9a8 <main+0x174>
	    }

	    /* Clean Data Cache to update the content of the SRAM */
	    SCB_CleanDCache_by_Addr((uint32_t*)&PlayBuff[position], PLAY_BUFF_SIZE);
 800ba0a:	f242 4314 	movw	r3, #9236	; 0x2414
 800ba0e:	443b      	add	r3, r7
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	4a38      	ldr	r2, [pc, #224]	; (800baf8 <main+0x2c4>)
 800ba16:	4413      	add	r3, r2
 800ba18:	f242 4210 	movw	r2, #9232	; 0x2410
 800ba1c:	443a      	add	r2, r7
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba24:	f242 420c 	movw	r2, #9228	; 0x240c
 800ba28:	443a      	add	r2, r7
 800ba2a:	6013      	str	r3, [r2, #0]
    if ( dsize > 0 ) { 
 800ba2c:	f242 430c 	movw	r3, #9228	; 0x240c
 800ba30:	443b      	add	r3, r7
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	dd3e      	ble.n	800bab6 <main+0x282>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800ba38:	f242 4310 	movw	r3, #9232	; 0x2410
 800ba3c:	443b      	add	r3, r7
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 021f 	and.w	r2, r3, #31
 800ba44:	f242 430c 	movw	r3, #9228	; 0x240c
 800ba48:	443b      	add	r3, r7
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f242 4208 	movw	r2, #9224	; 0x2408
 800ba52:	443a      	add	r2, r7
 800ba54:	6013      	str	r3, [r2, #0]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800ba56:	f242 4310 	movw	r3, #9232	; 0x2410
 800ba5a:	443b      	add	r3, r7
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f242 4204 	movw	r2, #9220	; 0x2404
 800ba62:	443a      	add	r2, r7
 800ba64:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800ba66:	f3bf 8f4f 	dsb	sy
}
 800ba6a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800ba6c:	4a27      	ldr	r2, [pc, #156]	; (800bb0c <main+0x2d8>)
 800ba6e:	f242 4304 	movw	r3, #9220	; 0x2404
 800ba72:	443b      	add	r3, r7
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800ba7a:	f242 4304 	movw	r3, #9220	; 0x2404
 800ba7e:	443b      	add	r3, r7
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3320      	adds	r3, #32
 800ba84:	f242 4204 	movw	r2, #9220	; 0x2404
 800ba88:	443a      	add	r2, r7
 800ba8a:	6013      	str	r3, [r2, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800ba8c:	f242 4308 	movw	r3, #9224	; 0x2408
 800ba90:	443b      	add	r3, r7
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3b20      	subs	r3, #32
 800ba96:	f242 4208 	movw	r2, #9224	; 0x2408
 800ba9a:	443a      	add	r2, r7
 800ba9c:	6013      	str	r3, [r2, #0]
      } while ( op_size > 0 );
 800ba9e:	f242 4308 	movw	r3, #9224	; 0x2408
 800baa2:	443b      	add	r3, r7
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	dce0      	bgt.n	800ba6c <main+0x238>
  __ASM volatile ("dsb 0xF":::"memory");
 800baaa:	f3bf 8f4f 	dsb	sy
}
 800baae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bab0:	f3bf 8f6f 	isb	sy
}
 800bab4:	bf00      	nop
}
 800bab6:	bf00      	nop

	    /* check the end of the file */
	    if((PlaybackPosition+PLAY_BUFF_SIZE/2) > PLAY_BUFF_SIZE)
 800bab8:	f242 4324 	movw	r3, #9252	; 0x2424
 800babc:	443b      	add	r3, r7
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bac8:	d904      	bls.n	800bad4 <main+0x2a0>
	    {
	      PlaybackPosition = PLAY_HEADER;
 800baca:	232c      	movs	r3, #44	; 0x2c
 800bacc:	f242 4224 	movw	r2, #9252	; 0x2424
 800bad0:	443a      	add	r2, r7
 800bad2:	6013      	str	r3, [r2, #0]
	    }

	    if(UpdatePointer != -1)
 800bad4:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <main+0x2d4>)
 800bad6:	881b      	ldrh	r3, [r3, #0]
 800bad8:	b21b      	sxth	r3, r3
 800bada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bade:	f43f af4b 	beq.w	800b978 <main+0x144>
	    {
	      /* Buffer update time is too long compare to the data transfer time */
	      Error_Handler();
 800bae2:	f000 fb97 	bl	800c214 <Error_Handler>
  {
 800bae6:	e747      	b.n	800b978 <main+0x144>
 800bae8:	ffffdbdc 	.word	0xffffdbdc
 800baec:	240032ec 	.word	0x240032ec
 800baf0:	24003158 	.word	0x24003158
 800baf4:	240032a0 	.word	0x240032a0
 800baf8:	240010c0 	.word	0x240010c0
 800bafc:	24000ee8 	.word	0x24000ee8
 800bb00:	24000f80 	.word	0x24000f80
 800bb04:	240030c0 	.word	0x240030c0
 800bb08:	24000452 	.word	0x24000452
 800bb0c:	e000ed00 	.word	0xe000ed00

0800bb10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b09c      	sub	sp, #112	; 0x70
 800bb14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bb16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb1a:	224c      	movs	r2, #76	; 0x4c
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f002 fd82 	bl	800e628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bb24:	1d3b      	adds	r3, r7, #4
 800bb26:	2220      	movs	r2, #32
 800bb28:	2100      	movs	r1, #0
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f002 fd7c 	bl	800e628 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800bb30:	2004      	movs	r0, #4
 800bb32:	f7fa fee3 	bl	80068fc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bb36:	2300      	movs	r3, #0
 800bb38:	603b      	str	r3, [r7, #0]
 800bb3a:	4b2b      	ldr	r3, [pc, #172]	; (800bbe8 <SystemClock_Config+0xd8>)
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	4a2a      	ldr	r2, [pc, #168]	; (800bbe8 <SystemClock_Config+0xd8>)
 800bb40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb44:	6193      	str	r3, [r2, #24]
 800bb46:	4b28      	ldr	r3, [pc, #160]	; (800bbe8 <SystemClock_Config+0xd8>)
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800bb52:	bf00      	nop
 800bb54:	4b24      	ldr	r3, [pc, #144]	; (800bbe8 <SystemClock_Config+0xd8>)
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb60:	d1f8      	bne.n	800bb54 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800bb62:	2302      	movs	r3, #2
 800bb64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800bb66:	2301      	movs	r3, #1
 800bb68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800bb6a:	2340      	movs	r3, #64	; 0x40
 800bb6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bb6e:	2302      	movs	r3, #2
 800bb70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800bb72:	2300      	movs	r3, #0
 800bb74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800bb76:	2304      	movs	r3, #4
 800bb78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800bb7a:	2318      	movs	r3, #24
 800bb7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 800bb82:	237d      	movs	r3, #125	; 0x7d
 800bb84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800bb86:	2302      	movs	r3, #2
 800bb88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800bb8a:	230c      	movs	r3, #12
 800bb8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800bb92:	2300      	movs	r3, #0
 800bb94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bb96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fa ff08 	bl	80069b0 <HAL_RCC_OscConfig>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800bba6:	f000 fb35 	bl	800c214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bbaa:	233f      	movs	r3, #63	; 0x3f
 800bbac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800bbb6:	2308      	movs	r3, #8
 800bbb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800bbba:	2340      	movs	r3, #64	; 0x40
 800bbbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800bbbe:	2340      	movs	r3, #64	; 0x40
 800bbc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800bbc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800bbc8:	2340      	movs	r3, #64	; 0x40
 800bbca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800bbcc:	1d3b      	adds	r3, r7, #4
 800bbce:	2102      	movs	r1, #2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fb fa99 	bl	8007108 <HAL_RCC_ClockConfig>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800bbdc:	f000 fb1a 	bl	800c214 <Error_Handler>
  }
}
 800bbe0:	bf00      	nop
 800bbe2:	3770      	adds	r7, #112	; 0x70
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	58024800 	.word	0x58024800

0800bbec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800bbf2:	4b1c      	ldr	r3, [pc, #112]	; (800bc64 <MX_CRC_Init+0x78>)
 800bbf4:	4a1c      	ldr	r2, [pc, #112]	; (800bc68 <MX_CRC_Init+0x7c>)
 800bbf6:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800bbf8:	4b1a      	ldr	r3, [pc, #104]	; (800bc64 <MX_CRC_Init+0x78>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800bbfe:	4b19      	ldr	r3, [pc, #100]	; (800bc64 <MX_CRC_Init+0x78>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800bc04:	4b17      	ldr	r3, [pc, #92]	; (800bc64 <MX_CRC_Init+0x78>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800bc0a:	4b16      	ldr	r3, [pc, #88]	; (800bc64 <MX_CRC_Init+0x78>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800bc10:	4b14      	ldr	r3, [pc, #80]	; (800bc64 <MX_CRC_Init+0x78>)
 800bc12:	2201      	movs	r2, #1
 800bc14:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800bc16:	4813      	ldr	r0, [pc, #76]	; (800bc64 <MX_CRC_Init+0x78>)
 800bc18:	f7f7 fa88 	bl	800312c <HAL_CRC_Init>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800bc22:	f000 faf7 	bl	800c214 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800bc26:	4b0f      	ldr	r3, [pc, #60]	; (800bc64 <MX_CRC_Init+0x78>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	4b0d      	ldr	r3, [pc, #52]	; (800bc64 <MX_CRC_Init+0x78>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f042 0201 	orr.w	r2, r2, #1
 800bc34:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800bc36:	4b0d      	ldr	r3, [pc, #52]	; (800bc6c <MX_CRC_Init+0x80>)
 800bc38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc3c:	4a0b      	ldr	r2, [pc, #44]	; (800bc6c <MX_CRC_Init+0x80>)
 800bc3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bc46:	4b09      	ldr	r3, [pc, #36]	; (800bc6c <MX_CRC_Init+0x80>)
 800bc48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc50:	607b      	str	r3, [r7, #4]
 800bc52:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 800bc54:	4803      	ldr	r0, [pc, #12]	; (800bc64 <MX_CRC_Init+0x78>)
 800bc56:	f000 fb25 	bl	800c2a4 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 800bc5a:	bf00      	nop
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	2400108c 	.word	0x2400108c
 800bc68:	58024c00 	.word	0x58024c00
 800bc6c:	58024400 	.word	0x58024400

0800bc70 <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
  int32_t                   ret = BSP_ERROR_NONE;
 800bc76:	2300      	movs	r3, #0
 800bc78:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t               hi2c4;
  static WM8994_Object_t    WM8994Obj;
  uint32_t                  wm8994_id;

  /* Configure the audio driver */
  hi2c4.Address     = AUDIO_I2C_ADDRESS;
 800bc7a:	2334      	movs	r3, #52	; 0x34
 800bc7c:	81bb      	strh	r3, [r7, #12]
  hi2c4.Init        = BSP_I2C4_Init;
 800bc7e:	4b20      	ldr	r3, [pc, #128]	; (800bd00 <WM8994_Probe+0x90>)
 800bc80:	607b      	str	r3, [r7, #4]
  hi2c4.DeInit      = BSP_I2C4_DeInit;
 800bc82:	4b20      	ldr	r3, [pc, #128]	; (800bd04 <WM8994_Probe+0x94>)
 800bc84:	60bb      	str	r3, [r7, #8]
  hi2c4.ReadReg     = BSP_I2C4_ReadReg16;
 800bc86:	4b20      	ldr	r3, [pc, #128]	; (800bd08 <WM8994_Probe+0x98>)
 800bc88:	617b      	str	r3, [r7, #20]
  hi2c4.WriteReg    = BSP_I2C4_WriteReg16;
 800bc8a:	4b20      	ldr	r3, [pc, #128]	; (800bd0c <WM8994_Probe+0x9c>)
 800bc8c:	613b      	str	r3, [r7, #16]
  hi2c4.GetTick     = BSP_GetTick;
 800bc8e:	4b20      	ldr	r3, [pc, #128]	; (800bd10 <WM8994_Probe+0xa0>)
 800bc90:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &hi2c4) != WM8994_OK)
 800bc92:	1d3b      	adds	r3, r7, #4
 800bc94:	4619      	mov	r1, r3
 800bc96:	481f      	ldr	r0, [pc, #124]	; (800bd14 <WM8994_Probe+0xa4>)
 800bc98:	f7f6 f9c6 	bl	8002028 <WM8994_RegisterBusIO>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800bca2:	f06f 0307 	mvn.w	r3, #7
 800bca6:	61fb      	str	r3, [r7, #28]
 800bca8:	e024      	b.n	800bcf4 <WM8994_Probe+0x84>
  }
  else if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 800bcaa:	481a      	ldr	r0, [pc, #104]	; (800bd14 <WM8994_Probe+0xa4>)
 800bcac:	f7f6 f9a4 	bl	8001ff8 <WM8994_Reset>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d003      	beq.n	800bcbe <WM8994_Probe+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcb6:	f06f 0304 	mvn.w	r3, #4
 800bcba:	61fb      	str	r3, [r7, #28]
 800bcbc:	e01a      	b.n	800bcf4 <WM8994_Probe+0x84>
  }
  else if(WM8994_ReadID(&WM8994Obj, &wm8994_id) != WM8994_OK)
 800bcbe:	463b      	mov	r3, r7
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4814      	ldr	r0, [pc, #80]	; (800bd14 <WM8994_Probe+0xa4>)
 800bcc4:	f7f5 fb93 	bl	80013ee <WM8994_ReadID>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d003      	beq.n	800bcd6 <WM8994_Probe+0x66>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcce:	f06f 0304 	mvn.w	r3, #4
 800bcd2:	61fb      	str	r3, [r7, #28]
 800bcd4:	e00e      	b.n	800bcf4 <WM8994_Probe+0x84>
  }
  else if(wm8994_id != WM8994_ID)
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	f648 1294 	movw	r2, #35220	; 0x8994
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d003      	beq.n	800bce8 <WM8994_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bce0:	f06f 0306 	mvn.w	r3, #6
 800bce4:	61fb      	str	r3, [r7, #28]
 800bce6:	e005      	b.n	800bcf4 <WM8994_Probe+0x84>
  }
  else
  {
    AudioDrv = (AUDIO_Drv_t *) &WM8994_Driver;
 800bce8:	4b0b      	ldr	r3, [pc, #44]	; (800bd18 <WM8994_Probe+0xa8>)
 800bcea:	4a0c      	ldr	r2, [pc, #48]	; (800bd1c <WM8994_Probe+0xac>)
 800bcec:	601a      	str	r2, [r3, #0]
    AudioCompObj = &WM8994Obj;
 800bcee:	4b0c      	ldr	r3, [pc, #48]	; (800bd20 <WM8994_Probe+0xb0>)
 800bcf0:	4a08      	ldr	r2, [pc, #32]	; (800bd14 <WM8994_Probe+0xa4>)
 800bcf2:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800bcf4:	69fb      	ldr	r3, [r7, #28]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	08002541 	.word	0x08002541
 800bd04:	080025b5 	.word	0x080025b5
 800bd08:	080026e5 	.word	0x080026e5
 800bd0c:	08002689 	.word	0x08002689
 800bd10:	08002741 	.word	0x08002741
 800bd14:	24000eec 	.word	0x24000eec
 800bd18:	24000ee8 	.word	0x24000ee8
 800bd1c:	24000400 	.word	0x24000400
 800bd20:	24000f80 	.word	0x24000f80

0800bd24 <Playback_Init>:
  * @brief  Playback initialization
  * @param  None
  * @retval None
  */
static void Playback_Init(void)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b0b2      	sub	sp, #200	; 0xc8
 800bd28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  /* Configure PLLSAI prescalers */
  /* PLL2SAI_VCO: VCO_271M
     SAI_CLK(first level) = PLLSAI_VCO/PLL2P = 271/24 = 11.291 Mhz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800bd2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd2e:	603b      	str	r3, [r7, #0]
  RCC_PeriphCLKInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800bd30:	2301      	movs	r3, #1
 800bd32:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_PeriphCLKInitStruct.PLL2.PLL2P = 24;
 800bd34:	2318      	movs	r3, #24
 800bd36:	60fb      	str	r3, [r7, #12]
  RCC_PeriphCLKInitStruct.PLL2.PLL2Q = 24;
 800bd38:	2318      	movs	r3, #24
 800bd3a:	613b      	str	r3, [r7, #16]
  RCC_PeriphCLKInitStruct.PLL2.PLL2R = 1;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	617b      	str	r3, [r7, #20]
  RCC_PeriphCLKInitStruct.PLL2.PLL2N = 271;
 800bd40:	f240 130f 	movw	r3, #271	; 0x10f
 800bd44:	60bb      	str	r3, [r7, #8]
  RCC_PeriphCLKInitStruct.PLL2.PLL2FRACN = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	623b      	str	r3, [r7, #32]
  RCC_PeriphCLKInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	61bb      	str	r3, [r7, #24]
  RCC_PeriphCLKInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800bd4e:	2320      	movs	r3, #32
 800bd50:	61fb      	str	r3, [r7, #28]
  RCC_PeriphCLKInitStruct.PLL2.PLL2M = 25;
 800bd52:	2319      	movs	r3, #25
 800bd54:	607b      	str	r3, [r7, #4]

  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 800bd56:	463b      	mov	r3, r7
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fb fd61 	bl	8007820 <HAL_RCCEx_PeriphCLKConfig>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <Playback_Init+0x44>
  {
    Error_Handler();
 800bd64:	f000 fa56 	bl	800c214 <Error_Handler>
  }

  /* Initialize SAI */
  __HAL_SAI_RESET_HANDLE_STATE(&hsai_BlockB1);
 800bd68:	4b4a      	ldr	r3, [pc, #296]	; (800be94 <Playback_Init+0x170>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  hsai_BlockB1.Instance = AUDIO_IN_SAIx;
 800bd70:	4b48      	ldr	r3, [pc, #288]	; (800be94 <Playback_Init+0x170>)
 800bd72:	4a49      	ldr	r2, [pc, #292]	; (800be98 <Playback_Init+0x174>)
 800bd74:	601a      	str	r2, [r3, #0]

  __HAL_SAI_DISABLE(&hsai_BlockB1);
 800bd76:	4b47      	ldr	r3, [pc, #284]	; (800be94 <Playback_Init+0x170>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	4b45      	ldr	r3, [pc, #276]	; (800be94 <Playback_Init+0x170>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bd84:	601a      	str	r2, [r3, #0]

  hsai_BlockB1.Init.AudioMode      = SAI_MODEMASTER_TX;
 800bd86:	4b43      	ldr	r3, [pc, #268]	; (800be94 <Playback_Init+0x170>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro        = SAI_ASYNCHRONOUS;
 800bd8c:	4b41      	ldr	r3, [pc, #260]	; (800be94 <Playback_Init+0x170>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 800bd92:	4b40      	ldr	r3, [pc, #256]	; (800be94 <Playback_Init+0x170>)
 800bd94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bd98:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800bd9a:	4b3e      	ldr	r3, [pc, #248]	; (800be94 <Playback_Init+0x170>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800bda0:	4b3c      	ldr	r3, [pc, #240]	; (800be94 <Playback_Init+0x170>)
 800bda2:	2201      	movs	r2, #1
 800bda4:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_22K;
 800bda6:	4b3b      	ldr	r3, [pc, #236]	; (800be94 <Playback_Init+0x170>)
 800bda8:	f245 6222 	movw	r2, #22050	; 0x5622
 800bdac:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.Protocol       = SAI_FREE_PROTOCOL;
 800bdae:	4b39      	ldr	r3, [pc, #228]	; (800be94 <Playback_Init+0x170>)
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.DataSize       = SAI_DATASIZE_16;
 800bdb4:	4b37      	ldr	r3, [pc, #220]	; (800be94 <Playback_Init+0x170>)
 800bdb6:	2280      	movs	r2, #128	; 0x80
 800bdb8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800bdba:	4b36      	ldr	r3, [pc, #216]	; (800be94 <Playback_Init+0x170>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bdc0:	4b34      	ldr	r3, [pc, #208]	; (800be94 <Playback_Init+0x170>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800bdc6:	4b33      	ldr	r3, [pc, #204]	; (800be94 <Playback_Init+0x170>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.Mckdiv         = 0; /* N.U */
 800bdcc:	4b31      	ldr	r3, [pc, #196]	; (800be94 <Playback_Init+0x170>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bdd2:	4b30      	ldr	r3, [pc, #192]	; (800be94 <Playback_Init+0x170>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bdd8:	4b2e      	ldr	r3, [pc, #184]	; (800be94 <Playback_Init+0x170>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800bdde:	4b2d      	ldr	r3, [pc, #180]	; (800be94 <Playback_Init+0x170>)
 800bde0:	2200      	movs	r2, #0
 800bde2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 800bde4:	4b2b      	ldr	r3, [pc, #172]	; (800be94 <Playback_Init+0x170>)
 800bde6:	2200      	movs	r2, #0
 800bde8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.PdmInit.Activation   = DISABLE;
 800bdea:	4b2a      	ldr	r3, [pc, #168]	; (800be94 <Playback_Init+0x170>)
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  hsai_BlockB1.FrameInit.FrameLength       = 32;
 800bdf2:	4b28      	ldr	r3, [pc, #160]	; (800be94 <Playback_Init+0x170>)
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 16;
 800bdf8:	4b26      	ldr	r3, [pc, #152]	; (800be94 <Playback_Init+0x170>)
 800bdfa:	2210      	movs	r2, #16
 800bdfc:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800bdfe:	4b25      	ldr	r3, [pc, #148]	; (800be94 <Playback_Init+0x170>)
 800be00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800be04:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800be06:	4b23      	ldr	r3, [pc, #140]	; (800be94 <Playback_Init+0x170>)
 800be08:	2200      	movs	r2, #0
 800be0a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800be0c:	4b21      	ldr	r3, [pc, #132]	; (800be94 <Playback_Init+0x170>)
 800be0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800be12:	665a      	str	r2, [r3, #100]	; 0x64

  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800be14:	4b1f      	ldr	r3, [pc, #124]	; (800be94 <Playback_Init+0x170>)
 800be16:	2200      	movs	r2, #0
 800be18:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800be1a:	4b1e      	ldr	r3, [pc, #120]	; (800be94 <Playback_Init+0x170>)
 800be1c:	2200      	movs	r2, #0
 800be1e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber     = 2;
 800be20:	4b1c      	ldr	r3, [pc, #112]	; (800be94 <Playback_Init+0x170>)
 800be22:	2202      	movs	r2, #2
 800be24:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive     = (SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1);
 800be26:	4b1b      	ldr	r3, [pc, #108]	; (800be94 <Playback_Init+0x170>)
 800be28:	2203      	movs	r2, #3
 800be2a:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_OK != HAL_SAI_Init(&hsai_BlockB1))
 800be2c:	4819      	ldr	r0, [pc, #100]	; (800be94 <Playback_Init+0x170>)
 800be2e:	f7fd fdbb 	bl	80099a8 <HAL_SAI_Init>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <Playback_Init+0x118>
  {
    Error_Handler();
 800be38:	f000 f9ec 	bl	800c214 <Error_Handler>
  }

  /* Enable SAI to generate clock used by audio driver */
  __HAL_SAI_ENABLE(&hsai_BlockB1);
 800be3c:	4b15      	ldr	r3, [pc, #84]	; (800be94 <Playback_Init+0x170>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	4b14      	ldr	r3, [pc, #80]	; (800be94 <Playback_Init+0x170>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800be4a:	601a      	str	r2, [r3, #0]

  WM8994_Probe();
 800be4c:	f7ff ff10 	bl	800bc70 <WM8994_Probe>

  /* Fill codec_init structure */
  codec_init.InputDevice  = WM8994_IN_NONE;
 800be50:	2300      	movs	r3, #0
 800be52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  codec_init.OutputDevice = WM8994_OUT_HEADPHONE;
 800be56:	2302      	movs	r3, #2
 800be58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  codec_init.Frequency    = AUDIO_FREQUENCY_22K;
 800be5c:	f245 6322 	movw	r3, #22050	; 0x5622
 800be60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  codec_init.Resolution   = WM8994_RESOLUTION_16b; /* Not used */
 800be64:	2300      	movs	r3, #0
 800be66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  codec_init.Volume       = 80;
 800be6a:	2350      	movs	r3, #80	; 0x50
 800be6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

  /* Initialize the codec internal registers */
  if(AudioDrv->Init(AudioCompObj, &codec_init) < 0)
 800be70:	4b0a      	ldr	r3, [pc, #40]	; (800be9c <Playback_Init+0x178>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a0a      	ldr	r2, [pc, #40]	; (800bea0 <Playback_Init+0x17c>)
 800be78:	6812      	ldr	r2, [r2, #0]
 800be7a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800be7e:	4610      	mov	r0, r2
 800be80:	4798      	blx	r3
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	da01      	bge.n	800be8c <Playback_Init+0x168>
  {
     Error_Handler();
 800be88:	f000 f9c4 	bl	800c214 <Error_Handler>
  }
}
 800be8c:	bf00      	nop
 800be8e:	37c8      	adds	r7, #200	; 0xc8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	240030c0 	.word	0x240030c0
 800be98:	40015804 	.word	0x40015804
 800be9c:	24000ee8 	.word	0x24000ee8
 800bea0:	24000f80 	.word	0x24000f80

0800bea4 <MX_SAI1_Init>:
//  * @brief SAI1 Initialization Function
//  * @param None
//  * @retval None
//  */
static void MX_SAI1_Init(void)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800bea8:	4b16      	ldr	r3, [pc, #88]	; (800bf04 <MX_SAI1_Init+0x60>)
 800beaa:	4a17      	ldr	r2, [pc, #92]	; (800bf08 <MX_SAI1_Init+0x64>)
 800beac:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800beae:	4b15      	ldr	r3, [pc, #84]	; (800bf04 <MX_SAI1_Init+0x60>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800beb4:	4b13      	ldr	r3, [pc, #76]	; (800bf04 <MX_SAI1_Init+0x60>)
 800beb6:	2200      	movs	r2, #0
 800beb8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800beba:	4b12      	ldr	r3, [pc, #72]	; (800bf04 <MX_SAI1_Init+0x60>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800bec0:	4b10      	ldr	r3, [pc, #64]	; (800bf04 <MX_SAI1_Init+0x60>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bec6:	4b0f      	ldr	r3, [pc, #60]	; (800bf04 <MX_SAI1_Init+0x60>)
 800bec8:	2200      	movs	r2, #0
 800beca:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800becc:	4b0d      	ldr	r3, [pc, #52]	; (800bf04 <MX_SAI1_Init+0x60>)
 800bece:	4a0f      	ldr	r2, [pc, #60]	; (800bf0c <MX_SAI1_Init+0x68>)
 800bed0:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bed2:	4b0c      	ldr	r3, [pc, #48]	; (800bf04 <MX_SAI1_Init+0x60>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bed8:	4b0a      	ldr	r3, [pc, #40]	; (800bf04 <MX_SAI1_Init+0x60>)
 800beda:	2200      	movs	r2, #0
 800bedc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bede:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <MX_SAI1_Init+0x60>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bee4:	4b07      	ldr	r3, [pc, #28]	; (800bf04 <MX_SAI1_Init+0x60>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800beea:	2302      	movs	r3, #2
 800beec:	2200      	movs	r2, #0
 800beee:	2100      	movs	r1, #0
 800bef0:	4804      	ldr	r0, [pc, #16]	; (800bf04 <MX_SAI1_Init+0x60>)
 800bef2:	f7fd fd27 	bl	8009944 <HAL_SAI_InitProtocol>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d001      	beq.n	800bf00 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 800befc:	f000 f98a 	bl	800c214 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800bf00:	bf00      	nop
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	240030c0 	.word	0x240030c0
 800bf08:	40015824 	.word	0x40015824
 800bf0c:	0002ee00 	.word	0x0002ee00

0800bf10 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 800bf14:	4b2c      	ldr	r3, [pc, #176]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf16:	4a2d      	ldr	r2, [pc, #180]	; (800bfcc <MX_SAI4_Init+0xbc>)
 800bf18:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 800bf1a:	4b2b      	ldr	r3, [pc, #172]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 800bf20:	4b29      	ldr	r3, [pc, #164]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf22:	2201      	movs	r2, #1
 800bf24:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 800bf26:	4b28      	ldr	r3, [pc, #160]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf28:	2280      	movs	r2, #128	; 0x80
 800bf2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800bf2c:	4b26      	ldr	r3, [pc, #152]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf2e:	2200      	movs	r2, #0
 800bf30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bf32:	4b25      	ldr	r3, [pc, #148]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 800bf38:	4b23      	ldr	r3, [pc, #140]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bf3e:	4b22      	ldr	r3, [pc, #136]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800bf44:	4b20      	ldr	r3, [pc, #128]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bf4a:	4b1f      	ldr	r3, [pc, #124]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800bf50:	4b1d      	ldr	r3, [pc, #116]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf52:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800bf56:	621a      	str	r2, [r3, #32]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 800bf58:	4b1b      	ldr	r3, [pc, #108]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 800bf5e:	4b1a      	ldr	r3, [pc, #104]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 800bf64:	4b18      	ldr	r3, [pc, #96]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 800bf6c:	4b16      	ldr	r3, [pc, #88]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf6e:	2201      	movs	r2, #1
 800bf70:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 800bf72:	4b15      	ldr	r3, [pc, #84]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf78:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 16;
 800bf7a:	4b13      	ldr	r3, [pc, #76]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf7c:	2210      	movs	r2, #16
 800bf7e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 800bf80:	4b11      	ldr	r3, [pc, #68]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf82:	2201      	movs	r2, #1
 800bf84:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800bf86:	4b10      	ldr	r3, [pc, #64]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bf8c:	4b0e      	ldr	r3, [pc, #56]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800bf92:	4b0d      	ldr	r3, [pc, #52]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 800bf98:	4b0b      	ldr	r3, [pc, #44]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800bf9e:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 800bfa4:	4b08      	ldr	r3, [pc, #32]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 800bfaa:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bfac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfb0:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 800bfb2:	4805      	ldr	r0, [pc, #20]	; (800bfc8 <MX_SAI4_Init+0xb8>)
 800bfb4:	f7fd fcf8 	bl	80099a8 <HAL_SAI_Init>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d001      	beq.n	800bfc2 <MX_SAI4_Init+0xb2>
  {
    Error_Handler();
 800bfbe:	f000 f929 	bl	800c214 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 800bfc2:	bf00      	nop
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	24003158 	.word	0x24003158
 800bfcc:	58005404 	.word	0x58005404

0800bfd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800bfd4:	4b22      	ldr	r3, [pc, #136]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800bfd6:	4a23      	ldr	r2, [pc, #140]	; (800c064 <MX_USART3_UART_Init+0x94>)
 800bfd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800bfda:	4b21      	ldr	r3, [pc, #132]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800bfdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bfe0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800bfe2:	4b1f      	ldr	r3, [pc, #124]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800bfe8:	4b1d      	ldr	r3, [pc, #116]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800bfee:	4b1c      	ldr	r3, [pc, #112]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800bff4:	4b1a      	ldr	r3, [pc, #104]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800bff6:	220c      	movs	r2, #12
 800bff8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bffa:	4b19      	ldr	r3, [pc, #100]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800bffc:	2200      	movs	r2, #0
 800bffe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c000:	4b17      	ldr	r3, [pc, #92]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800c002:	2200      	movs	r2, #0
 800c004:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c006:	4b16      	ldr	r3, [pc, #88]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800c008:	2200      	movs	r2, #0
 800c00a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800c00c:	4b14      	ldr	r3, [pc, #80]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800c00e:	2200      	movs	r2, #0
 800c010:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c012:	4b13      	ldr	r3, [pc, #76]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800c014:	2200      	movs	r2, #0
 800c016:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c018:	4811      	ldr	r0, [pc, #68]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800c01a:	f7fe faa4 	bl	800a566 <HAL_UART_Init>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800c024:	f000 f8f6 	bl	800c214 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c028:	2100      	movs	r1, #0
 800c02a:	480d      	ldr	r0, [pc, #52]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800c02c:	f7ff fb38 	bl	800b6a0 <HAL_UARTEx_SetTxFifoThreshold>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800c036:	f000 f8ed 	bl	800c214 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c03a:	2100      	movs	r1, #0
 800c03c:	4808      	ldr	r0, [pc, #32]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800c03e:	f7ff fb6d 	bl	800b71c <HAL_UARTEx_SetRxFifoThreshold>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800c048:	f000 f8e4 	bl	800c214 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800c04c:	4804      	ldr	r0, [pc, #16]	; (800c060 <MX_USART3_UART_Init+0x90>)
 800c04e:	f7ff faee 	bl	800b62e <HAL_UARTEx_DisableFifoMode>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800c058:	f000 f8dc 	bl	800c214 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800c05c:	bf00      	nop
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	24000ffc 	.word	0x24000ffc
 800c064:	40004800 	.word	0x40004800

0800c068 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800c06e:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <MX_BDMA_Init+0x4c>)
 800c070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c074:	4a0f      	ldr	r2, [pc, #60]	; (800c0b4 <MX_BDMA_Init+0x4c>)
 800c076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c07a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c07e:	4b0d      	ldr	r3, [pc, #52]	; (800c0b4 <MX_BDMA_Init+0x4c>)
 800c080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c088:	607b      	str	r3, [r7, #4]
 800c08a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 800c08c:	2200      	movs	r2, #0
 800c08e:	2100      	movs	r1, #0
 800c090:	2080      	movs	r0, #128	; 0x80
 800c092:	f7f7 f816 	bl	80030c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 800c096:	2080      	movs	r0, #128	; 0x80
 800c098:	f7f7 f82d 	bl	80030f6 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 800c09c:	2200      	movs	r2, #0
 800c09e:	2100      	movs	r1, #0
 800c0a0:	2081      	movs	r0, #129	; 0x81
 800c0a2:	f7f7 f80e 	bl	80030c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 800c0a6:	2081      	movs	r0, #129	; 0x81
 800c0a8:	f7f7 f825 	bl	80030f6 <HAL_NVIC_EnableIRQ>

}
 800c0ac:	bf00      	nop
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	58024400 	.word	0x58024400

0800c0b8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c0be:	4b27      	ldr	r3, [pc, #156]	; (800c15c <MX_DMA_Init+0xa4>)
 800c0c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c0c4:	4a25      	ldr	r2, [pc, #148]	; (800c15c <MX_DMA_Init+0xa4>)
 800c0c6:	f043 0301 	orr.w	r3, r3, #1
 800c0ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c0ce:	4b23      	ldr	r3, [pc, #140]	; (800c15c <MX_DMA_Init+0xa4>)
 800c0d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c0d4:	f003 0301 	and.w	r3, r3, #1
 800c0d8:	607b      	str	r3, [r7, #4]
 800c0da:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 800c0dc:	4b20      	ldr	r3, [pc, #128]	; (800c160 <MX_DMA_Init+0xa8>)
 800c0de:	4a21      	ldr	r2, [pc, #132]	; (800c164 <MX_DMA_Init+0xac>)
 800c0e0:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 800c0e2:	4b1f      	ldr	r3, [pc, #124]	; (800c160 <MX_DMA_Init+0xa8>)
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c0e8:	4b1d      	ldr	r3, [pc, #116]	; (800c160 <MX_DMA_Init+0xa8>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 800c0ee:	4b1c      	ldr	r3, [pc, #112]	; (800c160 <MX_DMA_Init+0xa8>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 800c0f4:	4b1a      	ldr	r3, [pc, #104]	; (800c160 <MX_DMA_Init+0xa8>)
 800c0f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0fa:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c0fc:	4b18      	ldr	r3, [pc, #96]	; (800c160 <MX_DMA_Init+0xa8>)
 800c0fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c102:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c104:	4b16      	ldr	r3, [pc, #88]	; (800c160 <MX_DMA_Init+0xa8>)
 800c106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c10a:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_CIRCULAR;
 800c10c:	4b14      	ldr	r3, [pc, #80]	; (800c160 <MX_DMA_Init+0xa8>)
 800c10e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c112:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 800c114:	4b12      	ldr	r3, [pc, #72]	; (800c160 <MX_DMA_Init+0xa8>)
 800c116:	2200      	movs	r2, #0
 800c118:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c11a:	4b11      	ldr	r3, [pc, #68]	; (800c160 <MX_DMA_Init+0xa8>)
 800c11c:	2204      	movs	r2, #4
 800c11e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_dma_generator0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800c120:	4b0f      	ldr	r3, [pc, #60]	; (800c160 <MX_DMA_Init+0xa8>)
 800c122:	2203      	movs	r2, #3
 800c124:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_dma_generator0.Init.MemBurst = DMA_MBURST_SINGLE;
 800c126:	4b0e      	ldr	r3, [pc, #56]	; (800c160 <MX_DMA_Init+0xa8>)
 800c128:	2200      	movs	r2, #0
 800c12a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_dma_generator0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800c12c:	4b0c      	ldr	r3, [pc, #48]	; (800c160 <MX_DMA_Init+0xa8>)
 800c12e:	2200      	movs	r2, #0
 800c130:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 800c132:	480b      	ldr	r0, [pc, #44]	; (800c160 <MX_DMA_Init+0xa8>)
 800c134:	f7f7 f8e4 	bl	8003300 <HAL_DMA_Init>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <MX_DMA_Init+0x8a>
  {
    Error_Handler( );
 800c13e:	f000 f869 	bl	800c214 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800c142:	2200      	movs	r2, #0
 800c144:	2100      	movs	r1, #0
 800c146:	200c      	movs	r0, #12
 800c148:	f7f6 ffbb 	bl	80030c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800c14c:	200c      	movs	r0, #12
 800c14e:	f7f6 ffd2 	bl	80030f6 <HAL_NVIC_EnableIRQ>

}
 800c152:	bf00      	nop
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	58024400 	.word	0x58024400
 800c160:	24000f84 	.word	0x24000f84
 800c164:	40020010 	.word	0x40020010

0800c168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c168:	b480      	push	{r7}
 800c16a:	b087      	sub	sp, #28
 800c16c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c16e:	4b28      	ldr	r3, [pc, #160]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c174:	4a26      	ldr	r2, [pc, #152]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c176:	f043 0301 	orr.w	r3, r3, #1
 800c17a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c17e:	4b24      	ldr	r3, [pc, #144]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	617b      	str	r3, [r7, #20]
 800c18a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c18c:	4b20      	ldr	r3, [pc, #128]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c18e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c192:	4a1f      	ldr	r2, [pc, #124]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c194:	f043 0310 	orr.w	r3, r3, #16
 800c198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c19c:	4b1c      	ldr	r3, [pc, #112]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c19e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c1a2:	f003 0310 	and.w	r3, r3, #16
 800c1a6:	613b      	str	r3, [r7, #16]
 800c1a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c1aa:	4b19      	ldr	r3, [pc, #100]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c1ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c1b0:	4a17      	ldr	r2, [pc, #92]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c1b2:	f043 0304 	orr.w	r3, r3, #4
 800c1b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c1ba:	4b15      	ldr	r3, [pc, #84]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c1bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c1c0:	f003 0304 	and.w	r3, r3, #4
 800c1c4:	60fb      	str	r3, [r7, #12]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c1c8:	4b11      	ldr	r3, [pc, #68]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c1ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c1ce:	4a10      	ldr	r2, [pc, #64]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c1d0:	f043 0308 	orr.w	r3, r3, #8
 800c1d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c1d8:	4b0d      	ldr	r3, [pc, #52]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c1da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c1de:	f003 0308 	and.w	r3, r3, #8
 800c1e2:	60bb      	str	r3, [r7, #8]
 800c1e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c1e6:	4b0a      	ldr	r3, [pc, #40]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c1e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c1ec:	4a08      	ldr	r2, [pc, #32]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c1ee:	f043 0320 	orr.w	r3, r3, #32
 800c1f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c1f6:	4b06      	ldr	r3, [pc, #24]	; (800c210 <MX_GPIO_Init+0xa8>)
 800c1f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c1fc:	f003 0320 	and.w	r3, r3, #32
 800c200:	607b      	str	r3, [r7, #4]
 800c202:	687b      	ldr	r3, [r7, #4]

}
 800c204:	bf00      	nop
 800c206:	371c      	adds	r7, #28
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	58024400 	.word	0x58024400

0800c214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c214:	b480      	push	{r7}
 800c216:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c218:	b672      	cpsid	i
}
 800c21a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c21c:	e7fe      	b.n	800c21c <Error_Handler+0x8>
	...

0800c220 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800c224:	4b10      	ldr	r3, [pc, #64]	; (800c268 <MX_PDM2PCM_Init+0x48>)
 800c226:	2200      	movs	r2, #0
 800c228:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800c22a:	4b0f      	ldr	r3, [pc, #60]	; (800c268 <MX_PDM2PCM_Init+0x48>)
 800c22c:	2201      	movs	r2, #1
 800c22e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 0;
 800c230:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <MX_PDM2PCM_Init+0x48>)
 800c232:	2200      	movs	r2, #0
 800c234:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800c236:	4b0c      	ldr	r3, [pc, #48]	; (800c268 <MX_PDM2PCM_Init+0x48>)
 800c238:	2201      	movs	r2, #1
 800c23a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800c23c:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <MX_PDM2PCM_Init+0x48>)
 800c23e:	2201      	movs	r2, #1
 800c240:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800c242:	4809      	ldr	r0, [pc, #36]	; (800c268 <MX_PDM2PCM_Init+0x48>)
 800c244:	f001 ffe2 	bl	800e20c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800c248:	4b08      	ldr	r3, [pc, #32]	; (800c26c <MX_PDM2PCM_Init+0x4c>)
 800c24a:	2202      	movs	r2, #2
 800c24c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800c24e:	4b07      	ldr	r3, [pc, #28]	; (800c26c <MX_PDM2PCM_Init+0x4c>)
 800c250:	2210      	movs	r2, #16
 800c252:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800c254:	4b05      	ldr	r3, [pc, #20]	; (800c26c <MX_PDM2PCM_Init+0x4c>)
 800c256:	2200      	movs	r2, #0
 800c258:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800c25a:	4904      	ldr	r1, [pc, #16]	; (800c26c <MX_PDM2PCM_Init+0x4c>)
 800c25c:	4802      	ldr	r0, [pc, #8]	; (800c268 <MX_PDM2PCM_Init+0x48>)
 800c25e:	f002 f8a5 	bl	800e3ac <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800c262:	bf00      	nop
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	240032a0 	.word	0x240032a0
 800c26c:	24003364 	.word	0x24003364

0800c270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c276:	4b0a      	ldr	r3, [pc, #40]	; (800c2a0 <HAL_MspInit+0x30>)
 800c278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c27c:	4a08      	ldr	r2, [pc, #32]	; (800c2a0 <HAL_MspInit+0x30>)
 800c27e:	f043 0302 	orr.w	r3, r3, #2
 800c282:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c286:	4b06      	ldr	r3, [pc, #24]	; (800c2a0 <HAL_MspInit+0x30>)
 800c288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c28c:	f003 0302 	and.w	r3, r3, #2
 800c290:	607b      	str	r3, [r7, #4]
 800c292:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	58024400 	.word	0x58024400

0800c2a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a0b      	ldr	r2, [pc, #44]	; (800c2e0 <HAL_CRC_MspInit+0x3c>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d10e      	bne.n	800c2d4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	; (800c2e4 <HAL_CRC_MspInit+0x40>)
 800c2b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2bc:	4a09      	ldr	r2, [pc, #36]	; (800c2e4 <HAL_CRC_MspInit+0x40>)
 800c2be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2c6:	4b07      	ldr	r3, [pc, #28]	; (800c2e4 <HAL_CRC_MspInit+0x40>)
 800c2c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c2d0:	60fb      	str	r3, [r7, #12]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800c2d4:	bf00      	nop
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	58024c00 	.word	0x58024c00
 800c2e4:	58024400 	.word	0x58024400

0800c2e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b0b6      	sub	sp, #216	; 0xd8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	601a      	str	r2, [r3, #0]
 800c2f8:	605a      	str	r2, [r3, #4]
 800c2fa:	609a      	str	r2, [r3, #8]
 800c2fc:	60da      	str	r2, [r3, #12]
 800c2fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c300:	f107 0310 	add.w	r3, r7, #16
 800c304:	22b4      	movs	r2, #180	; 0xb4
 800c306:	2100      	movs	r1, #0
 800c308:	4618      	mov	r0, r3
 800c30a:	f002 f98d 	bl	800e628 <memset>
  if(huart->Instance==USART3)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a25      	ldr	r2, [pc, #148]	; (800c3a8 <HAL_UART_MspInit+0xc0>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d142      	bne.n	800c39e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800c318:	2302      	movs	r3, #2
 800c31a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800c31c:	2300      	movs	r3, #0
 800c31e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c322:	f107 0310 	add.w	r3, r7, #16
 800c326:	4618      	mov	r0, r3
 800c328:	f7fb fa7a 	bl	8007820 <HAL_RCCEx_PeriphCLKConfig>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800c332:	f7ff ff6f 	bl	800c214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800c336:	4b1d      	ldr	r3, [pc, #116]	; (800c3ac <HAL_UART_MspInit+0xc4>)
 800c338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c33c:	4a1b      	ldr	r2, [pc, #108]	; (800c3ac <HAL_UART_MspInit+0xc4>)
 800c33e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c342:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c346:	4b19      	ldr	r3, [pc, #100]	; (800c3ac <HAL_UART_MspInit+0xc4>)
 800c348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c34c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c350:	60fb      	str	r3, [r7, #12]
 800c352:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c354:	4b15      	ldr	r3, [pc, #84]	; (800c3ac <HAL_UART_MspInit+0xc4>)
 800c356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c35a:	4a14      	ldr	r2, [pc, #80]	; (800c3ac <HAL_UART_MspInit+0xc4>)
 800c35c:	f043 0304 	orr.w	r3, r3, #4
 800c360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c364:	4b11      	ldr	r3, [pc, #68]	; (800c3ac <HAL_UART_MspInit+0xc4>)
 800c366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c36a:	f003 0304 	and.w	r3, r3, #4
 800c36e:	60bb      	str	r3, [r7, #8]
 800c370:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800c372:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c376:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c37a:	2302      	movs	r3, #2
 800c37c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c380:	2300      	movs	r3, #0
 800c382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c386:	2300      	movs	r3, #0
 800c388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c38c:	2307      	movs	r3, #7
 800c38e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c392:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c396:	4619      	mov	r1, r3
 800c398:	4805      	ldr	r0, [pc, #20]	; (800c3b0 <HAL_UART_MspInit+0xc8>)
 800c39a:	f7f9 f9ab 	bl	80056f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800c39e:	bf00      	nop
 800c3a0:	37d8      	adds	r7, #216	; 0xd8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	40004800 	.word	0x40004800
 800c3ac:	58024400 	.word	0x58024400
 800c3b0:	58020800 	.word	0x58020800

0800c3b4 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b0ba      	sub	sp, #232	; 0xe8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c3bc:	f107 0310 	add.w	r3, r7, #16
 800c3c0:	22b4      	movs	r2, #180	; 0xb4
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f002 f92f 	bl	800e628 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a9d      	ldr	r2, [pc, #628]	; (800c644 <HAL_SAI_MspInit+0x290>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	f040 808b 	bne.w	800c4ec <HAL_SAI_MspInit+0x138>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800c3d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3da:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c3e0:	f107 0310 	add.w	r3, r7, #16
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fb fa1b 	bl	8007820 <HAL_RCCEx_PeriphCLKConfig>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 800c3f0:	f7ff ff10 	bl	800c214 <Error_Handler>
    }

      if (SAI1_client == 0)
 800c3f4:	4b94      	ldr	r3, [pc, #592]	; (800c648 <HAL_SAI_MspInit+0x294>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10e      	bne.n	800c41a <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800c3fc:	4b93      	ldr	r3, [pc, #588]	; (800c64c <HAL_SAI_MspInit+0x298>)
 800c3fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c402:	4a92      	ldr	r2, [pc, #584]	; (800c64c <HAL_SAI_MspInit+0x298>)
 800c404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c408:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c40c:	4b8f      	ldr	r3, [pc, #572]	; (800c64c <HAL_SAI_MspInit+0x298>)
 800c40e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c416:	60fb      	str	r3, [r7, #12]
 800c418:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800c41a:	4b8b      	ldr	r3, [pc, #556]	; (800c648 <HAL_SAI_MspInit+0x294>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	3301      	adds	r3, #1
 800c420:	4a89      	ldr	r2, [pc, #548]	; (800c648 <HAL_SAI_MspInit+0x294>)
 800c422:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c424:	2308      	movs	r3, #8
 800c426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c42a:	2302      	movs	r3, #2
 800c42c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c430:	2300      	movs	r3, #0
 800c432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c436:	2300      	movs	r3, #0
 800c438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800c43c:	2306      	movs	r3, #6
 800c43e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c442:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c446:	4619      	mov	r1, r3
 800c448:	4881      	ldr	r0, [pc, #516]	; (800c650 <HAL_SAI_MspInit+0x29c>)
 800c44a:	f7f9 f953 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 800c44e:	f44f 7360 	mov.w	r3, #896	; 0x380
 800c452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c456:	2302      	movs	r3, #2
 800c458:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c45c:	2300      	movs	r3, #0
 800c45e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c462:	2300      	movs	r3, #0
 800c464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800c468:	2306      	movs	r3, #6
 800c46a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800c46e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c472:	4619      	mov	r1, r3
 800c474:	4877      	ldr	r0, [pc, #476]	; (800c654 <HAL_SAI_MspInit+0x2a0>)
 800c476:	f7f9 f93d 	bl	80056f4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800c47a:	4b77      	ldr	r3, [pc, #476]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c47c:	4a77      	ldr	r2, [pc, #476]	; (800c65c <HAL_SAI_MspInit+0x2a8>)
 800c47e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800c480:	4b75      	ldr	r3, [pc, #468]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c482:	2258      	movs	r2, #88	; 0x58
 800c484:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c486:	4b74      	ldr	r3, [pc, #464]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c488:	2240      	movs	r2, #64	; 0x40
 800c48a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800c48c:	4b72      	ldr	r3, [pc, #456]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c48e:	2200      	movs	r2, #0
 800c490:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800c492:	4b71      	ldr	r3, [pc, #452]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c494:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c498:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c49a:	4b6f      	ldr	r3, [pc, #444]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c49c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4a0:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c4a2:	4b6d      	ldr	r3, [pc, #436]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c4a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c4a8:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800c4aa:	4b6b      	ldr	r3, [pc, #428]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c4ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4b0:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800c4b2:	4b69      	ldr	r3, [pc, #420]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c4b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c4b8:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c4ba:	4b67      	ldr	r3, [pc, #412]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800c4c0:	4865      	ldr	r0, [pc, #404]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c4c2:	f7f6 ff1d 	bl	8003300 <HAL_DMA_Init>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d001      	beq.n	800c4d0 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 800c4cc:	f7ff fea2 	bl	800c214 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a61      	ldr	r2, [pc, #388]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c4d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c4d8:	4a5f      	ldr	r2, [pc, #380]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a5d      	ldr	r2, [pc, #372]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c4e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c4e6:	4a5c      	ldr	r2, [pc, #368]	; (800c658 <HAL_SAI_MspInit+0x2a4>)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a5b      	ldr	r2, [pc, #364]	; (800c660 <HAL_SAI_MspInit+0x2ac>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	f040 80a2 	bne.w	800c63c <HAL_SAI_MspInit+0x288>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800c4f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800c4fe:	2300      	movs	r3, #0
 800c500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c504:	f107 0310 	add.w	r3, r7, #16
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fb f989 	bl	8007820 <HAL_RCCEx_PeriphCLKConfig>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d001      	beq.n	800c518 <HAL_SAI_MspInit+0x164>
    {
      Error_Handler();
 800c514:	f7ff fe7e 	bl	800c214 <Error_Handler>
    }

    if (SAI4_client == 0)
 800c518:	4b52      	ldr	r3, [pc, #328]	; (800c664 <HAL_SAI_MspInit+0x2b0>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d10e      	bne.n	800c53e <HAL_SAI_MspInit+0x18a>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800c520:	4b4a      	ldr	r3, [pc, #296]	; (800c64c <HAL_SAI_MspInit+0x298>)
 800c522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c526:	4a49      	ldr	r2, [pc, #292]	; (800c64c <HAL_SAI_MspInit+0x298>)
 800c528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c52c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c530:	4b46      	ldr	r3, [pc, #280]	; (800c64c <HAL_SAI_MspInit+0x298>)
 800c532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c53a:	60bb      	str	r3, [r7, #8]
 800c53c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 800c53e:	4b49      	ldr	r3, [pc, #292]	; (800c664 <HAL_SAI_MspInit+0x2b0>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	3301      	adds	r3, #1
 800c544:	4a47      	ldr	r2, [pc, #284]	; (800c664 <HAL_SAI_MspInit+0x2b0>)
 800c546:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800c548:	2330      	movs	r3, #48	; 0x30
 800c54a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c54e:	2302      	movs	r3, #2
 800c550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c554:	2300      	movs	r3, #0
 800c556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c55a:	2300      	movs	r3, #0
 800c55c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800c560:	230a      	movs	r3, #10
 800c562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c566:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c56a:	4619      	mov	r1, r3
 800c56c:	4838      	ldr	r0, [pc, #224]	; (800c650 <HAL_SAI_MspInit+0x29c>)
 800c56e:	f7f9 f8c1 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800c572:	2340      	movs	r3, #64	; 0x40
 800c574:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c578:	2302      	movs	r3, #2
 800c57a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c57e:	2300      	movs	r3, #0
 800c580:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c584:	2300      	movs	r3, #0
 800c586:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800c58a:	2301      	movs	r3, #1
 800c58c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c590:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c594:	4619      	mov	r1, r3
 800c596:	4834      	ldr	r0, [pc, #208]	; (800c668 <HAL_SAI_MspInit+0x2b4>)
 800c598:	f7f9 f8ac 	bl	80056f4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 800c59c:	4b33      	ldr	r3, [pc, #204]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c59e:	4a34      	ldr	r2, [pc, #208]	; (800c670 <HAL_SAI_MspInit+0x2bc>)
 800c5a0:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800c5a2:	4b32      	ldr	r3, [pc, #200]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c5a4:	220f      	movs	r2, #15
 800c5a6:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c5a8:	4b30      	ldr	r3, [pc, #192]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800c5ae:	4b2f      	ldr	r3, [pc, #188]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800c5b4:	4b2d      	ldr	r3, [pc, #180]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c5b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5ba:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c5bc:	4b2b      	ldr	r3, [pc, #172]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c5be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c5c2:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c5c4:	4b29      	ldr	r3, [pc, #164]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c5c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c5ca:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800c5cc:	4b27      	ldr	r3, [pc, #156]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c5ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5d2:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 800c5d4:	4b25      	ldr	r3, [pc, #148]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c5d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c5da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800c5dc:	4823      	ldr	r0, [pc, #140]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c5de:	f7f6 fe8f 	bl	8003300 <HAL_DMA_Init>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d001      	beq.n	800c5ec <HAL_SAI_MspInit+0x238>
    {
      Error_Handler();
 800c5e8:	f7ff fe14 	bl	800c214 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800c5ec:	230e      	movs	r3, #14
 800c5ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800c5fe:	2301      	movs	r3, #1
 800c600:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800c604:	2301      	movs	r3, #1
 800c606:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 800c60a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c60e:	4619      	mov	r1, r3
 800c610:	4816      	ldr	r0, [pc, #88]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c612:	f7f8 ff57 	bl	80054c4 <HAL_DMAEx_ConfigMuxSync>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d001      	beq.n	800c620 <HAL_SAI_MspInit+0x26c>
    {
      Error_Handler();
 800c61c:	f7ff fdfa 	bl	800c214 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a12      	ldr	r2, [pc, #72]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c628:	4a10      	ldr	r2, [pc, #64]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4a0e      	ldr	r2, [pc, #56]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c636:	4a0d      	ldr	r2, [pc, #52]	; (800c66c <HAL_SAI_MspInit+0x2b8>)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800c63c:	bf00      	nop
 800c63e:	37e8      	adds	r7, #232	; 0xe8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	40015824 	.word	0x40015824
 800c648:	24000f14 	.word	0x24000f14
 800c64c:	58024400 	.word	0x58024400
 800c650:	58021000 	.word	0x58021000
 800c654:	58021400 	.word	0x58021400
 800c658:	240032ec 	.word	0x240032ec
 800c65c:	40020028 	.word	0x40020028
 800c660:	58005404 	.word	0x58005404
 800c664:	24000f18 	.word	0x24000f18
 800c668:	58020c00 	.word	0x58020c00
 800c66c:	240031f0 	.word	0x240031f0
 800c670:	58025408 	.word	0x58025408

0800c674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c678:	e7fe      	b.n	800c678 <NMI_Handler+0x4>

0800c67a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c67a:	b480      	push	{r7}
 800c67c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c67e:	e7fe      	b.n	800c67e <HardFault_Handler+0x4>

0800c680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c680:	b480      	push	{r7}
 800c682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c684:	e7fe      	b.n	800c684 <MemManage_Handler+0x4>

0800c686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c686:	b480      	push	{r7}
 800c688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c68a:	e7fe      	b.n	800c68a <BusFault_Handler+0x4>

0800c68c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c68c:	b480      	push	{r7}
 800c68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c690:	e7fe      	b.n	800c690 <UsageFault_Handler+0x4>

0800c692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c692:	b480      	push	{r7}
 800c694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c696:	bf00      	nop
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c6a4:	bf00      	nop
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c6b2:	bf00      	nop
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c6c0:	f7f6 fc04 	bl	8002ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c6c4:	bf00      	nop
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800c6cc:	4802      	ldr	r0, [pc, #8]	; (800c6d8 <DMA1_Stream1_IRQHandler+0x10>)
 800c6ce:	f7f7 fbdb 	bl	8003e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800c6d2:	bf00      	nop
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	240032ec 	.word	0x240032ec

0800c6dc <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 800c6e0:	4802      	ldr	r0, [pc, #8]	; (800c6ec <DMAMUX2_OVR_IRQHandler+0x10>)
 800c6e2:	f7f8 ffb5 	bl	8005650 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800c6e6:	bf00      	nop
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	240031f0 	.word	0x240031f0

0800c6f0 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 800c6f4:	4802      	ldr	r0, [pc, #8]	; (800c700 <BDMA_Channel0_IRQHandler+0x10>)
 800c6f6:	f7f7 fbc7 	bl	8003e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800c6fa:	bf00      	nop
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	240031f0 	.word	0x240031f0

0800c704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c704:	b480      	push	{r7}
 800c706:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c708:	4b32      	ldr	r3, [pc, #200]	; (800c7d4 <SystemInit+0xd0>)
 800c70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c70e:	4a31      	ldr	r2, [pc, #196]	; (800c7d4 <SystemInit+0xd0>)
 800c710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800c718:	4b2f      	ldr	r3, [pc, #188]	; (800c7d8 <SystemInit+0xd4>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f003 030f 	and.w	r3, r3, #15
 800c720:	2b06      	cmp	r3, #6
 800c722:	d807      	bhi.n	800c734 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800c724:	4b2c      	ldr	r3, [pc, #176]	; (800c7d8 <SystemInit+0xd4>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f023 030f 	bic.w	r3, r3, #15
 800c72c:	4a2a      	ldr	r2, [pc, #168]	; (800c7d8 <SystemInit+0xd4>)
 800c72e:	f043 0307 	orr.w	r3, r3, #7
 800c732:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800c734:	4b29      	ldr	r3, [pc, #164]	; (800c7dc <SystemInit+0xd8>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a28      	ldr	r2, [pc, #160]	; (800c7dc <SystemInit+0xd8>)
 800c73a:	f043 0301 	orr.w	r3, r3, #1
 800c73e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c740:	4b26      	ldr	r3, [pc, #152]	; (800c7dc <SystemInit+0xd8>)
 800c742:	2200      	movs	r2, #0
 800c744:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800c746:	4b25      	ldr	r3, [pc, #148]	; (800c7dc <SystemInit+0xd8>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	4924      	ldr	r1, [pc, #144]	; (800c7dc <SystemInit+0xd8>)
 800c74c:	4b24      	ldr	r3, [pc, #144]	; (800c7e0 <SystemInit+0xdc>)
 800c74e:	4013      	ands	r3, r2
 800c750:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800c752:	4b21      	ldr	r3, [pc, #132]	; (800c7d8 <SystemInit+0xd4>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 0308 	and.w	r3, r3, #8
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d007      	beq.n	800c76e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800c75e:	4b1e      	ldr	r3, [pc, #120]	; (800c7d8 <SystemInit+0xd4>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f023 030f 	bic.w	r3, r3, #15
 800c766:	4a1c      	ldr	r2, [pc, #112]	; (800c7d8 <SystemInit+0xd4>)
 800c768:	f043 0307 	orr.w	r3, r3, #7
 800c76c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800c76e:	4b1b      	ldr	r3, [pc, #108]	; (800c7dc <SystemInit+0xd8>)
 800c770:	2200      	movs	r2, #0
 800c772:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800c774:	4b19      	ldr	r3, [pc, #100]	; (800c7dc <SystemInit+0xd8>)
 800c776:	2200      	movs	r2, #0
 800c778:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800c77a:	4b18      	ldr	r3, [pc, #96]	; (800c7dc <SystemInit+0xd8>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800c780:	4b16      	ldr	r3, [pc, #88]	; (800c7dc <SystemInit+0xd8>)
 800c782:	4a18      	ldr	r2, [pc, #96]	; (800c7e4 <SystemInit+0xe0>)
 800c784:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800c786:	4b15      	ldr	r3, [pc, #84]	; (800c7dc <SystemInit+0xd8>)
 800c788:	4a17      	ldr	r2, [pc, #92]	; (800c7e8 <SystemInit+0xe4>)
 800c78a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800c78c:	4b13      	ldr	r3, [pc, #76]	; (800c7dc <SystemInit+0xd8>)
 800c78e:	4a17      	ldr	r2, [pc, #92]	; (800c7ec <SystemInit+0xe8>)
 800c790:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800c792:	4b12      	ldr	r3, [pc, #72]	; (800c7dc <SystemInit+0xd8>)
 800c794:	2200      	movs	r2, #0
 800c796:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800c798:	4b10      	ldr	r3, [pc, #64]	; (800c7dc <SystemInit+0xd8>)
 800c79a:	4a14      	ldr	r2, [pc, #80]	; (800c7ec <SystemInit+0xe8>)
 800c79c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800c79e:	4b0f      	ldr	r3, [pc, #60]	; (800c7dc <SystemInit+0xd8>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800c7a4:	4b0d      	ldr	r3, [pc, #52]	; (800c7dc <SystemInit+0xd8>)
 800c7a6:	4a11      	ldr	r2, [pc, #68]	; (800c7ec <SystemInit+0xe8>)
 800c7a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800c7aa:	4b0c      	ldr	r3, [pc, #48]	; (800c7dc <SystemInit+0xd8>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c7b0:	4b0a      	ldr	r3, [pc, #40]	; (800c7dc <SystemInit+0xd8>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a09      	ldr	r2, [pc, #36]	; (800c7dc <SystemInit+0xd8>)
 800c7b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800c7bc:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <SystemInit+0xd8>)
 800c7be:	2200      	movs	r2, #0
 800c7c0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800c7c2:	4b0b      	ldr	r3, [pc, #44]	; (800c7f0 <SystemInit+0xec>)
 800c7c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800c7c8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800c7ca:	bf00      	nop
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	e000ed00 	.word	0xe000ed00
 800c7d8:	52002000 	.word	0x52002000
 800c7dc:	58024400 	.word	0x58024400
 800c7e0:	eaf6ed7f 	.word	0xeaf6ed7f
 800c7e4:	02020200 	.word	0x02020200
 800c7e8:	01ff0000 	.word	0x01ff0000
 800c7ec:	01010280 	.word	0x01010280
 800c7f0:	52004000 	.word	0x52004000

0800c7f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800c7f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c82c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800c7f8:	f7ff ff84 	bl	800c704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c7fc:	480c      	ldr	r0, [pc, #48]	; (800c830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800c7fe:	490d      	ldr	r1, [pc, #52]	; (800c834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800c800:	4a0d      	ldr	r2, [pc, #52]	; (800c838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800c802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c804:	e002      	b.n	800c80c <LoopCopyDataInit>

0800c806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c80a:	3304      	adds	r3, #4

0800c80c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c80c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c80e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c810:	d3f9      	bcc.n	800c806 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c812:	4a0a      	ldr	r2, [pc, #40]	; (800c83c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800c814:	4c0a      	ldr	r4, [pc, #40]	; (800c840 <LoopFillZerobss+0x22>)
  movs r3, #0
 800c816:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c818:	e001      	b.n	800c81e <LoopFillZerobss>

0800c81a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c81a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c81c:	3204      	adds	r2, #4

0800c81e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c81e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c820:	d3fb      	bcc.n	800c81a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c822:	f001 fedd 	bl	800e5e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c826:	f7ff f805 	bl	800b834 <main>
  bx  lr
 800c82a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c82c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800c830:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800c834:	240004c0 	.word	0x240004c0
  ldr r2, =_sidata
 800c838:	0800ed58 	.word	0x0800ed58
  ldr r2, =_sbss
 800c83c:	240004c0 	.word	0x240004c0
  ldr r4, =_ebss
 800c840:	2400336c 	.word	0x2400336c

0800c844 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c844:	e7fe      	b.n	800c844 <ADC3_IRQHandler>
	...

0800c848 <D16_GENERIC>:
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	b089      	sub	sp, #36	; 0x24
 800c84e:	6993      	ldr	r3, [r2, #24]
 800c850:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c852:	9103      	str	r1, [sp, #12]
 800c854:	9307      	str	r3, [sp, #28]
 800c856:	69d3      	ldr	r3, [r2, #28]
 800c858:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800c85c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800c860:	9106      	str	r1, [sp, #24]
 800c862:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800c866:	2d00      	cmp	r5, #0
 800c868:	d063      	beq.n	800c932 <D16_GENERIC+0xea>
 800c86a:	f001 0520 	and.w	r5, r1, #32
 800c86e:	f001 0110 	and.w	r1, r1, #16
 800c872:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800c954 <D16_GENERIC+0x10c>
 800c876:	46c1      	mov	r9, r8
 800c878:	9104      	str	r1, [sp, #16]
 800c87a:	2100      	movs	r1, #0
 800c87c:	9505      	str	r5, [sp, #20]
 800c87e:	e04d      	b.n	800c91c <D16_GENERIC+0xd4>
 800c880:	5d87      	ldrb	r7, [r0, r6]
 800c882:	7805      	ldrb	r5, [r0, #0]
 800c884:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c888:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800c88c:	b2fe      	uxtb	r6, r7
 800c88e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800c892:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800c896:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800c89a:	441d      	add	r5, r3
 800c89c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800c8a0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c8a4:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800c8a8:	0a9b      	lsrs	r3, r3, #10
 800c8aa:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800c8ae:	4d27      	ldr	r5, [pc, #156]	; (800c94c <D16_GENERIC+0x104>)
 800c8b0:	fb26 c505 	smlad	r5, r6, r5, ip
 800c8b4:	4f26      	ldr	r7, [pc, #152]	; (800c950 <D16_GENERIC+0x108>)
 800c8b6:	fb26 fc07 	smuad	ip, r6, r7
 800c8ba:	9e04      	ldr	r6, [sp, #16]
 800c8bc:	f101 0801 	add.w	r8, r1, #1
 800c8c0:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800c8c4:	b1ae      	cbz	r6, 800c8f2 <D16_GENERIC+0xaa>
 800c8c6:	442c      	add	r4, r5
 800c8c8:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800c8cc:	eba4 040a 	sub.w	r4, r4, sl
 800c8d0:	46aa      	mov	sl, r5
 800c8d2:	17e7      	asrs	r7, r4, #31
 800c8d4:	fba4 450b 	umull	r4, r5, r4, fp
 800c8d8:	e9cd 4500 	strd	r4, r5, [sp]
 800c8dc:	fb0b 5407 	mla	r4, fp, r7, r5
 800c8e0:	9401      	str	r4, [sp, #4]
 800c8e2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800c8e6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800c8ea:	f145 0500 	adc.w	r5, r5, #0
 800c8ee:	006c      	lsls	r4, r5, #1
 800c8f0:	4625      	mov	r5, r4
 800c8f2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800c8f6:	042d      	lsls	r5, r5, #16
 800c8f8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c8fc:	2700      	movs	r7, #0
 800c8fe:	fb01 fb0b 	mul.w	fp, r1, fp
 800c902:	fa1f f188 	uxth.w	r1, r8
 800c906:	fbc9 6705 	smlal	r6, r7, r9, r5
 800c90a:	9e03      	ldr	r6, [sp, #12]
 800c90c:	10bd      	asrs	r5, r7, #2
 800c90e:	f305 050f 	ssat	r5, #16, r5
 800c912:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800c916:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c918:	428d      	cmp	r5, r1
 800c91a:	d90a      	bls.n	800c932 <D16_GENERIC+0xea>
 800c91c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800c91e:	2d01      	cmp	r5, #1
 800c920:	b2ee      	uxtb	r6, r5
 800c922:	d1ad      	bne.n	800c880 <D16_GENERIC+0x38>
 800c924:	9d05      	ldr	r5, [sp, #20]
 800c926:	f850 7b02 	ldr.w	r7, [r0], #2
 800c92a:	2d00      	cmp	r5, #0
 800c92c:	d0ae      	beq.n	800c88c <D16_GENERIC+0x44>
 800c92e:	ba7f      	rev16	r7, r7
 800c930:	e7ac      	b.n	800c88c <D16_GENERIC+0x44>
 800c932:	2000      	movs	r0, #0
 800c934:	9906      	ldr	r1, [sp, #24]
 800c936:	61d3      	str	r3, [r2, #28]
 800c938:	9b07      	ldr	r3, [sp, #28]
 800c93a:	f8c2 c008 	str.w	ip, [r2, #8]
 800c93e:	60d1      	str	r1, [r2, #12]
 800c940:	6193      	str	r3, [r2, #24]
 800c942:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800c946:	b009      	add	sp, #36	; 0x24
 800c948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94c:	00030001 	.word	0x00030001
 800c950:	00010003 	.word	0x00010003
 800c954:	24000000 	.word	0x24000000

0800c958 <D24_GENERIC>:
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800c960:	b089      	sub	sp, #36	; 0x24
 800c962:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800c964:	9303      	str	r3, [sp, #12]
 800c966:	6993      	ldr	r3, [r2, #24]
 800c968:	9104      	str	r1, [sp, #16]
 800c96a:	9307      	str	r3, [sp, #28]
 800c96c:	69d1      	ldr	r1, [r2, #28]
 800c96e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800c972:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800c976:	2e00      	cmp	r6, #0
 800c978:	f000 8088 	beq.w	800ca8c <D24_GENERIC+0x134>
 800c97c:	f005 0620 	and.w	r6, r5, #32
 800c980:	f005 0510 	and.w	r5, r5, #16
 800c984:	f04f 0c00 	mov.w	ip, #0
 800c988:	f8df e140 	ldr.w	lr, [pc, #320]	; 800cacc <D24_GENERIC+0x174>
 800c98c:	9606      	str	r6, [sp, #24]
 800c98e:	9505      	str	r5, [sp, #20]
 800c990:	e064      	b.n	800ca5c <D24_GENERIC+0x104>
 800c992:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800c996:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800c99a:	f810 b007 	ldrb.w	fp, [r0, r7]
 800c99e:	042d      	lsls	r5, r5, #16
 800c9a0:	19f0      	adds	r0, r6, r7
 800c9a2:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800c9a6:	44a9      	add	r9, r5
 800c9a8:	fa5f f689 	uxtb.w	r6, r9
 800c9ac:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800c9b0:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800c9b4:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800c9b8:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800c9bc:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800c9c0:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800c9c4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800c9c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c9cc:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800c9d0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800c9d4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800c9d8:	4d3a      	ldr	r5, [pc, #232]	; (800cac4 <D24_GENERIC+0x16c>)
 800c9da:	fb26 8705 	smlad	r7, r6, r5, r8
 800c9de:	4d3a      	ldr	r5, [pc, #232]	; (800cac8 <D24_GENERIC+0x170>)
 800c9e0:	fb26 3805 	smlad	r8, r6, r5, r3
 800c9e4:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800c9e8:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800c9f2:	fb26 f603 	smuad	r6, r6, r3
 800c9f6:	eb0c 0903 	add.w	r9, ip, r3
 800c9fa:	eb0b 0306 	add.w	r3, fp, r6
 800c9fe:	9e05      	ldr	r6, [sp, #20]
 800ca00:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800ca04:	b1ae      	cbz	r6, 800ca32 <D24_GENERIC+0xda>
 800ca06:	442c      	add	r4, r5
 800ca08:	9e03      	ldr	r6, [sp, #12]
 800ca0a:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800ca0e:	1ba4      	subs	r4, r4, r6
 800ca10:	9503      	str	r5, [sp, #12]
 800ca12:	17e7      	asrs	r7, r4, #31
 800ca14:	fba4 450b 	umull	r4, r5, r4, fp
 800ca18:	e9cd 4500 	strd	r4, r5, [sp]
 800ca1c:	fb0b 5407 	mla	r4, fp, r7, r5
 800ca20:	9401      	str	r4, [sp, #4]
 800ca22:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ca26:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ca2a:	f145 0500 	adc.w	r5, r5, #0
 800ca2e:	006c      	lsls	r4, r5, #1
 800ca30:	4625      	mov	r5, r4
 800ca32:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800ca36:	03ad      	lsls	r5, r5, #14
 800ca38:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ca3c:	2700      	movs	r7, #0
 800ca3e:	fb0c fb0b 	mul.w	fp, ip, fp
 800ca42:	fa1f fc89 	uxth.w	ip, r9
 800ca46:	fbca 6705 	smlal	r6, r7, sl, r5
 800ca4a:	9e04      	ldr	r6, [sp, #16]
 800ca4c:	10bd      	asrs	r5, r7, #2
 800ca4e:	f305 050f 	ssat	r5, #16, r5
 800ca52:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800ca56:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ca58:	4565      	cmp	r5, ip
 800ca5a:	d917      	bls.n	800ca8c <D24_GENERIC+0x134>
 800ca5c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800ca5e:	f890 9000 	ldrb.w	r9, [r0]
 800ca62:	b2ef      	uxtb	r7, r5
 800ca64:	2d01      	cmp	r5, #1
 800ca66:	b23e      	sxth	r6, r7
 800ca68:	d193      	bne.n	800c992 <D24_GENERIC+0x3a>
 800ca6a:	9d06      	ldr	r5, [sp, #24]
 800ca6c:	b1dd      	cbz	r5, 800caa6 <D24_GENERIC+0x14e>
 800ca6e:	78c7      	ldrb	r7, [r0, #3]
 800ca70:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800ca74:	f01c 0f01 	tst.w	ip, #1
 800ca78:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800ca7c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800ca80:	d11a      	bne.n	800cab8 <D24_GENERIC+0x160>
 800ca82:	f890 9001 	ldrb.w	r9, [r0, #1]
 800ca86:	3002      	adds	r0, #2
 800ca88:	44b1      	add	r9, r6
 800ca8a:	e78d      	b.n	800c9a8 <D24_GENERIC+0x50>
 800ca8c:	6093      	str	r3, [r2, #8]
 800ca8e:	2000      	movs	r0, #0
 800ca90:	9b03      	ldr	r3, [sp, #12]
 800ca92:	f8c2 800c 	str.w	r8, [r2, #12]
 800ca96:	6153      	str	r3, [r2, #20]
 800ca98:	9b07      	ldr	r3, [sp, #28]
 800ca9a:	61d1      	str	r1, [r2, #28]
 800ca9c:	6114      	str	r4, [r2, #16]
 800ca9e:	6193      	str	r3, [r2, #24]
 800caa0:	b009      	add	sp, #36	; 0x24
 800caa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa6:	7845      	ldrb	r5, [r0, #1]
 800caa8:	3003      	adds	r0, #3
 800caaa:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800caae:	022d      	lsls	r5, r5, #8
 800cab0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800cab4:	44a9      	add	r9, r5
 800cab6:	e777      	b.n	800c9a8 <D24_GENERIC+0x50>
 800cab8:	7886      	ldrb	r6, [r0, #2]
 800caba:	3004      	adds	r0, #4
 800cabc:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800cac0:	44a9      	add	r9, r5
 800cac2:	e771      	b.n	800c9a8 <D24_GENERIC+0x50>
 800cac4:	00030001 	.word	0x00030001
 800cac8:	00060007 	.word	0x00060007
 800cacc:	24000000 	.word	0x24000000

0800cad0 <D32_GENERIC>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800cad8:	b089      	sub	sp, #36	; 0x24
 800cada:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800cadc:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800cade:	9302      	str	r3, [sp, #8]
 800cae0:	6993      	ldr	r3, [r2, #24]
 800cae2:	9104      	str	r1, [sp, #16]
 800cae4:	9307      	str	r3, [sp, #28]
 800cae6:	9503      	str	r5, [sp, #12]
 800cae8:	69d1      	ldr	r1, [r2, #28]
 800caea:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800caec:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800caf0:	2e00      	cmp	r6, #0
 800caf2:	f000 8097 	beq.w	800cc24 <D32_GENERIC+0x154>
 800caf6:	f005 0620 	and.w	r6, r5, #32
 800cafa:	f005 0510 	and.w	r5, r5, #16
 800cafe:	f04f 0e00 	mov.w	lr, #0
 800cb02:	f8df c150 	ldr.w	ip, [pc, #336]	; 800cc54 <D32_GENERIC+0x184>
 800cb06:	9606      	str	r6, [sp, #24]
 800cb08:	9505      	str	r5, [sp, #20]
 800cb0a:	e079      	b.n	800cc00 <D32_GENERIC+0x130>
 800cb0c:	783d      	ldrb	r5, [r7, #0]
 800cb0e:	f810 b009 	ldrb.w	fp, [r0, r9]
 800cb12:	042d      	lsls	r5, r5, #16
 800cb14:	f810 a006 	ldrb.w	sl, [r0, r6]
 800cb18:	f890 9000 	ldrb.w	r9, [r0]
 800cb1c:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800cb20:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800cb24:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800cb28:	44a9      	add	r9, r5
 800cb2a:	fa5f f789 	uxtb.w	r7, r9
 800cb2e:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800cb32:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800cb36:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800cb3a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800cb3e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800cb42:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800cb46:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800cb4a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800cb4e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800cb52:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800cb56:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800cb5a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cb5e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800cb62:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cb66:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800cb6a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800cb6e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800cb72:	4d34      	ldr	r5, [pc, #208]	; (800cc44 <D32_GENERIC+0x174>)
 800cb74:	fb29 8805 	smlad	r8, r9, r5, r8
 800cb78:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800cb7c:	fb26 8705 	smlad	r7, r6, r5, r8
 800cb80:	4d31      	ldr	r5, [pc, #196]	; (800cc48 <D32_GENERIC+0x178>)
 800cb82:	fb29 3305 	smlad	r3, r9, r5, r3
 800cb86:	4d31      	ldr	r5, [pc, #196]	; (800cc4c <D32_GENERIC+0x17c>)
 800cb88:	fb26 3805 	smlad	r8, r6, r5, r3
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	fb29 f903 	smuad	r9, r9, r3
 800cb92:	4b2f      	ldr	r3, [pc, #188]	; (800cc50 <D32_GENERIC+0x180>)
 800cb94:	fb26 9303 	smlad	r3, r6, r3, r9
 800cb98:	9e05      	ldr	r6, [sp, #20]
 800cb9a:	f10e 0901 	add.w	r9, lr, #1
 800cb9e:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800cba2:	b1ae      	cbz	r6, 800cbd0 <D32_GENERIC+0x100>
 800cba4:	442c      	add	r4, r5
 800cba6:	9e02      	ldr	r6, [sp, #8]
 800cba8:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800cbac:	1ba4      	subs	r4, r4, r6
 800cbae:	9502      	str	r5, [sp, #8]
 800cbb0:	17e7      	asrs	r7, r4, #31
 800cbb2:	fba4 450a 	umull	r4, r5, r4, sl
 800cbb6:	e9cd 4500 	strd	r4, r5, [sp]
 800cbba:	fb0a 5407 	mla	r4, sl, r7, r5
 800cbbe:	9401      	str	r4, [sp, #4]
 800cbc0:	e9dd 4500 	ldrd	r4, r5, [sp]
 800cbc4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800cbc8:	f145 0500 	adc.w	r5, r5, #0
 800cbcc:	006c      	lsls	r4, r5, #1
 800cbce:	4625      	mov	r5, r4
 800cbd0:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800cbd4:	036d      	lsls	r5, r5, #13
 800cbd6:	9f03      	ldr	r7, [sp, #12]
 800cbd8:	fb0e fb0a 	mul.w	fp, lr, sl
 800cbdc:	fa1f fe89 	uxth.w	lr, r9
 800cbe0:	f04f 0a00 	mov.w	sl, #0
 800cbe4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800cbe8:	9e04      	ldr	r6, [sp, #16]
 800cbea:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800cbee:	4657      	mov	r7, sl
 800cbf0:	10bd      	asrs	r5, r7, #2
 800cbf2:	f305 050f 	ssat	r5, #16, r5
 800cbf6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800cbfa:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cbfc:	4575      	cmp	r5, lr
 800cbfe:	d911      	bls.n	800cc24 <D32_GENERIC+0x154>
 800cc00:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800cc02:	b2ee      	uxtb	r6, r5
 800cc04:	2d01      	cmp	r5, #1
 800cc06:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800cc0a:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800cc0e:	f47f af7d 	bne.w	800cb0c <D32_GENERIC+0x3c>
 800cc12:	1d05      	adds	r5, r0, #4
 800cc14:	f8d0 9000 	ldr.w	r9, [r0]
 800cc18:	9806      	ldr	r0, [sp, #24]
 800cc1a:	b180      	cbz	r0, 800cc3e <D32_GENERIC+0x16e>
 800cc1c:	fa99 f999 	rev16.w	r9, r9
 800cc20:	4628      	mov	r0, r5
 800cc22:	e782      	b.n	800cb2a <D32_GENERIC+0x5a>
 800cc24:	6093      	str	r3, [r2, #8]
 800cc26:	2000      	movs	r0, #0
 800cc28:	9b02      	ldr	r3, [sp, #8]
 800cc2a:	f8c2 800c 	str.w	r8, [r2, #12]
 800cc2e:	6153      	str	r3, [r2, #20]
 800cc30:	9b07      	ldr	r3, [sp, #28]
 800cc32:	61d1      	str	r1, [r2, #28]
 800cc34:	6114      	str	r4, [r2, #16]
 800cc36:	6193      	str	r3, [r2, #24]
 800cc38:	b009      	add	sp, #36	; 0x24
 800cc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3e:	4628      	mov	r0, r5
 800cc40:	e773      	b.n	800cb2a <D32_GENERIC+0x5a>
 800cc42:	bf00      	nop
 800cc44:	00060003 	.word	0x00060003
 800cc48:	000a000c 	.word	0x000a000c
 800cc4c:	000c000a 	.word	0x000c000a
 800cc50:	00030006 	.word	0x00030006
 800cc54:	24000000 	.word	0x24000000

0800cc58 <D48_GENERIC>:
 800cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	6913      	ldr	r3, [r2, #16]
 800cc5e:	b089      	sub	sp, #36	; 0x24
 800cc60:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cc62:	9301      	str	r3, [sp, #4]
 800cc64:	6953      	ldr	r3, [r2, #20]
 800cc66:	9104      	str	r1, [sp, #16]
 800cc68:	9302      	str	r3, [sp, #8]
 800cc6a:	6993      	ldr	r3, [r2, #24]
 800cc6c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800cc70:	9307      	str	r3, [sp, #28]
 800cc72:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800cc76:	9100      	str	r1, [sp, #0]
 800cc78:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800cc7a:	9103      	str	r1, [sp, #12]
 800cc7c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800cc7e:	2c00      	cmp	r4, #0
 800cc80:	f000 80be 	beq.w	800ce00 <D48_GENERIC+0x1a8>
 800cc84:	f001 0420 	and.w	r4, r1, #32
 800cc88:	f001 0110 	and.w	r1, r1, #16
 800cc8c:	f04f 0e00 	mov.w	lr, #0
 800cc90:	9105      	str	r1, [sp, #20]
 800cc92:	9406      	str	r4, [sp, #24]
 800cc94:	4962      	ldr	r1, [pc, #392]	; (800ce20 <D48_GENERIC+0x1c8>)
 800cc96:	e0a0      	b.n	800cdda <D48_GENERIC+0x182>
 800cc98:	eb00 0608 	add.w	r6, r0, r8
 800cc9c:	f810 a008 	ldrb.w	sl, [r0, r8]
 800cca0:	f810 9005 	ldrb.w	r9, [r0, r5]
 800cca4:	5df4      	ldrb	r4, [r6, r7]
 800cca6:	443e      	add	r6, r7
 800cca8:	f890 b000 	ldrb.w	fp, [r0]
 800ccac:	0420      	lsls	r0, r4, #16
 800ccae:	eb06 0408 	add.w	r4, r6, r8
 800ccb2:	f816 6008 	ldrb.w	r6, [r6, r8]
 800ccb6:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800ccba:	f814 8007 	ldrb.w	r8, [r4, r7]
 800ccbe:	4427      	add	r7, r4
 800ccc0:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800ccc4:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800ccc8:	eb0a 040b 	add.w	r4, sl, fp
 800cccc:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800ccd0:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800ccd4:	b2f7      	uxtb	r7, r6
 800ccd6:	b2e6      	uxtb	r6, r4
 800ccd8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800ccdc:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800cce0:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800cce4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800cce8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800ccec:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800ccf0:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800ccf4:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800ccf8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800ccfc:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800cd00:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800cd04:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cd08:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800cd0c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cd10:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800cd14:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800cd18:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800cd1c:	9d00      	ldr	r5, [sp, #0]
 800cd1e:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800cd22:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cd26:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800cd2a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800cd2e:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800cd32:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800cd36:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800cd3a:	4c3a      	ldr	r4, [pc, #232]	; (800ce24 <D48_GENERIC+0x1cc>)
 800cd3c:	fb26 5a04 	smlad	sl, r6, r4, r5
 800cd40:	4c39      	ldr	r4, [pc, #228]	; (800ce28 <D48_GENERIC+0x1d0>)
 800cd42:	fb29 aa04 	smlad	sl, r9, r4, sl
 800cd46:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800cd4a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800cd4e:	4c37      	ldr	r4, [pc, #220]	; (800ce2c <D48_GENERIC+0x1d4>)
 800cd50:	fb26 3304 	smlad	r3, r6, r4, r3
 800cd54:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800cd58:	fb29 3304 	smlad	r3, r9, r4, r3
 800cd5c:	4c34      	ldr	r4, [pc, #208]	; (800ce30 <D48_GENERIC+0x1d8>)
 800cd5e:	fb27 3304 	smlad	r3, r7, r4, r3
 800cd62:	2501      	movs	r5, #1
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	fb26 f605 	smuad	r6, r6, r5
 800cd6a:	4b32      	ldr	r3, [pc, #200]	; (800ce34 <D48_GENERIC+0x1dc>)
 800cd6c:	fb29 6903 	smlad	r9, r9, r3, r6
 800cd70:	4b31      	ldr	r3, [pc, #196]	; (800ce38 <D48_GENERIC+0x1e0>)
 800cd72:	fb27 9303 	smlad	r3, r7, r3, r9
 800cd76:	9c05      	ldr	r4, [sp, #20]
 800cd78:	eb0e 0805 	add.w	r8, lr, r5
 800cd7c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800cd80:	b19c      	cbz	r4, 800cdaa <D48_GENERIC+0x152>
 800cd82:	9c01      	ldr	r4, [sp, #4]
 800cd84:	9d02      	ldr	r5, [sp, #8]
 800cd86:	4454      	add	r4, sl
 800cd88:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800cd8c:	f8cd a008 	str.w	sl, [sp, #8]
 800cd90:	1b64      	subs	r4, r4, r5
 800cd92:	fba4 ab09 	umull	sl, fp, r4, r9
 800cd96:	17e7      	asrs	r7, r4, #31
 800cd98:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800cd9c:	fb09 bb07 	mla	fp, r9, r7, fp
 800cda0:	f14b 0500 	adc.w	r5, fp, #0
 800cda4:	006c      	lsls	r4, r5, #1
 800cda6:	46a2      	mov	sl, r4
 800cda8:	9401      	str	r4, [sp, #4]
 800cdaa:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800cdac:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800cdb0:	9d03      	ldr	r5, [sp, #12]
 800cdb2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800cdb6:	fb0e f606 	mul.w	r6, lr, r6
 800cdba:	fa1f fe88 	uxth.w	lr, r8
 800cdbe:	f04f 0800 	mov.w	r8, #0
 800cdc2:	fbc5 780a 	smlal	r7, r8, r5, sl
 800cdc6:	4645      	mov	r5, r8
 800cdc8:	10ac      	asrs	r4, r5, #2
 800cdca:	9d04      	ldr	r5, [sp, #16]
 800cdcc:	f304 040f 	ssat	r4, #16, r4
 800cdd0:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800cdd4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cdd6:	4574      	cmp	r4, lr
 800cdd8:	d912      	bls.n	800ce00 <D48_GENERIC+0x1a8>
 800cdda:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800cddc:	b2e5      	uxtb	r5, r4
 800cdde:	2c01      	cmp	r4, #1
 800cde0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800cde4:	f1c5 0700 	rsb	r7, r5, #0
 800cde8:	f47f af56 	bne.w	800cc98 <D48_GENERIC+0x40>
 800cdec:	9d06      	ldr	r5, [sp, #24]
 800cdee:	e9d0 4600 	ldrd	r4, r6, [r0]
 800cdf2:	3006      	adds	r0, #6
 800cdf4:	2d00      	cmp	r5, #0
 800cdf6:	f43f af6b 	beq.w	800ccd0 <D48_GENERIC+0x78>
 800cdfa:	ba64      	rev16	r4, r4
 800cdfc:	ba76      	rev16	r6, r6
 800cdfe:	e767      	b.n	800ccd0 <D48_GENERIC+0x78>
 800ce00:	6093      	str	r3, [r2, #8]
 800ce02:	2000      	movs	r0, #0
 800ce04:	9b00      	ldr	r3, [sp, #0]
 800ce06:	f8c2 c01c 	str.w	ip, [r2, #28]
 800ce0a:	60d3      	str	r3, [r2, #12]
 800ce0c:	9b01      	ldr	r3, [sp, #4]
 800ce0e:	6113      	str	r3, [r2, #16]
 800ce10:	9b02      	ldr	r3, [sp, #8]
 800ce12:	6153      	str	r3, [r2, #20]
 800ce14:	9b07      	ldr	r3, [sp, #28]
 800ce16:	6193      	str	r3, [r2, #24]
 800ce18:	b009      	add	sp, #36	; 0x24
 800ce1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1e:	bf00      	nop
 800ce20:	24000000 	.word	0x24000000
 800ce24:	000f000a 	.word	0x000f000a
 800ce28:	00060003 	.word	0x00060003
 800ce2c:	00150019 	.word	0x00150019
 800ce30:	00190015 	.word	0x00190015
 800ce34:	00030006 	.word	0x00030006
 800ce38:	000a000f 	.word	0x000a000f

0800ce3c <D64_GENERIC>:
 800ce3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce40:	6913      	ldr	r3, [r2, #16]
 800ce42:	b089      	sub	sp, #36	; 0x24
 800ce44:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ce46:	9300      	str	r3, [sp, #0]
 800ce48:	6953      	ldr	r3, [r2, #20]
 800ce4a:	9105      	str	r1, [sp, #20]
 800ce4c:	9303      	str	r3, [sp, #12]
 800ce4e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800ce50:	6993      	ldr	r3, [r2, #24]
 800ce52:	69d4      	ldr	r4, [r2, #28]
 800ce54:	9307      	str	r3, [sp, #28]
 800ce56:	9504      	str	r5, [sp, #16]
 800ce58:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800ce5c:	2900      	cmp	r1, #0
 800ce5e:	f000 80e8 	beq.w	800d032 <D64_GENERIC+0x1f6>
 800ce62:	6a11      	ldr	r1, [r2, #32]
 800ce64:	2500      	movs	r5, #0
 800ce66:	46b3      	mov	fp, r6
 800ce68:	9302      	str	r3, [sp, #8]
 800ce6a:	9106      	str	r1, [sp, #24]
 800ce6c:	4978      	ldr	r1, [pc, #480]	; (800d050 <D64_GENERIC+0x214>)
 800ce6e:	e0cc      	b.n	800d00a <D64_GENERIC+0x1ce>
 800ce70:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800ce74:	f1ce 0c00 	rsb	ip, lr, #0
 800ce78:	f890 9000 	ldrb.w	r9, [r0]
 800ce7c:	eb00 0708 	add.w	r7, r0, r8
 800ce80:	f810 6008 	ldrb.w	r6, [r0, r8]
 800ce84:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800ce88:	f817 000c 	ldrb.w	r0, [r7, ip]
 800ce8c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800ce90:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800ce94:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800ce98:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800ce9c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800cea0:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800cea4:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800cea8:	0400      	lsls	r0, r0, #16
 800ceaa:	4467      	add	r7, ip
 800ceac:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800ceb0:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800ceb4:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800ceb8:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800cebc:	444e      	add	r6, r9
 800cebe:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800cec2:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800cec6:	44c2      	add	sl, r8
 800cec8:	b2f7      	uxtb	r7, r6
 800ceca:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800cece:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800ced2:	0e36      	lsrs	r6, r6, #24
 800ced4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800ced8:	fa5f fc8a 	uxtb.w	ip, sl
 800cedc:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800cee0:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800cee4:	443c      	add	r4, r7
 800cee6:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800ceea:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800ceee:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800cef2:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800cef6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cefa:	4b56      	ldr	r3, [pc, #344]	; (800d054 <D64_GENERIC+0x218>)
 800cefc:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800cf00:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cf04:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800cf08:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800cf0c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800cf10:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800cf14:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800cf18:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800cf1c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cf20:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800cf24:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800cf28:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800cf2c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800cf30:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800cf34:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800cf38:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800cf3c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800cf40:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800cf44:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800cf48:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800cf4c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800cf50:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800cf54:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800cf58:	fb28 b903 	smlad	r9, r8, r3, fp
 800cf5c:	4b3e      	ldr	r3, [pc, #248]	; (800d058 <D64_GENERIC+0x21c>)
 800cf5e:	fb26 9903 	smlad	r9, r6, r3, r9
 800cf62:	4b3e      	ldr	r3, [pc, #248]	; (800d05c <D64_GENERIC+0x220>)
 800cf64:	fb2c 9703 	smlad	r7, ip, r3, r9
 800cf68:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800cf6c:	fb2a 7909 	smlad	r9, sl, r9, r7
 800cf70:	4f3b      	ldr	r7, [pc, #236]	; (800d060 <D64_GENERIC+0x224>)
 800cf72:	9b02      	ldr	r3, [sp, #8]
 800cf74:	fb28 3307 	smlad	r3, r8, r7, r3
 800cf78:	fb2a 3317 	smladx	r3, sl, r7, r3
 800cf7c:	4f39      	ldr	r7, [pc, #228]	; (800d064 <D64_GENERIC+0x228>)
 800cf7e:	fb26 3307 	smlad	r3, r6, r7, r3
 800cf82:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800cf86:	f04f 0e01 	mov.w	lr, #1
 800cf8a:	fb28 f80e 	smuad	r8, r8, lr
 800cf8e:	4b36      	ldr	r3, [pc, #216]	; (800d068 <D64_GENERIC+0x22c>)
 800cf90:	fb26 8603 	smlad	r6, r6, r3, r8
 800cf94:	4b35      	ldr	r3, [pc, #212]	; (800d06c <D64_GENERIC+0x230>)
 800cf96:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800cf9a:	4b35      	ldr	r3, [pc, #212]	; (800d070 <D64_GENERIC+0x234>)
 800cf9c:	fb2a c303 	smlad	r3, sl, r3, ip
 800cfa0:	9f06      	ldr	r7, [sp, #24]
 800cfa2:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800cfa6:	9302      	str	r3, [sp, #8]
 800cfa8:	b1cf      	cbz	r7, 800cfde <D64_GENERIC+0x1a2>
 800cfaa:	9b00      	ldr	r3, [sp, #0]
 800cfac:	444b      	add	r3, r9
 800cfae:	461e      	mov	r6, r3
 800cfb0:	9b03      	ldr	r3, [sp, #12]
 800cfb2:	f8cd 900c 	str.w	r9, [sp, #12]
 800cfb6:	1af6      	subs	r6, r6, r3
 800cfb8:	46b0      	mov	r8, r6
 800cfba:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800cfbe:	e9cd 8900 	strd	r8, r9, [sp]
 800cfc2:	fba6 8907 	umull	r8, r9, r6, r7
 800cfc6:	9e01      	ldr	r6, [sp, #4]
 800cfc8:	fb07 9306 	mla	r3, r7, r6, r9
 800cfcc:	4646      	mov	r6, r8
 800cfce:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800cfd2:	f143 0700 	adc.w	r7, r3, #0
 800cfd6:	fa07 f30e 	lsl.w	r3, r7, lr
 800cfda:	4699      	mov	r9, r3
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800cfe2:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800cfe6:	9b04      	ldr	r3, [sp, #16]
 800cfe8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cfec:	2700      	movs	r7, #0
 800cfee:	fb05 fc0c 	mul.w	ip, r5, ip
 800cff2:	3501      	adds	r5, #1
 800cff4:	fbc3 6709 	smlal	r6, r7, r3, r9
 800cff8:	9b05      	ldr	r3, [sp, #20]
 800cffa:	10be      	asrs	r6, r7, #2
 800cffc:	f306 060f 	ssat	r6, #16, r6
 800d000:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800d004:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800d006:	42ae      	cmp	r6, r5
 800d008:	dd11      	ble.n	800d02e <D64_GENERIC+0x1f2>
 800d00a:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800d00e:	f1be 0f01 	cmp.w	lr, #1
 800d012:	f47f af2d 	bne.w	800ce70 <D64_GENERIC+0x34>
 800d016:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800d018:	f100 0c08 	add.w	ip, r0, #8
 800d01c:	06bb      	lsls	r3, r7, #26
 800d01e:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800d022:	d513      	bpl.n	800d04c <D64_GENERIC+0x210>
 800d024:	ba76      	rev16	r6, r6
 800d026:	fa9a fa9a 	rev16.w	sl, sl
 800d02a:	4660      	mov	r0, ip
 800d02c:	e74c      	b.n	800cec8 <D64_GENERIC+0x8c>
 800d02e:	465e      	mov	r6, fp
 800d030:	9b02      	ldr	r3, [sp, #8]
 800d032:	6093      	str	r3, [r2, #8]
 800d034:	2000      	movs	r0, #0
 800d036:	9b00      	ldr	r3, [sp, #0]
 800d038:	60d6      	str	r6, [r2, #12]
 800d03a:	6113      	str	r3, [r2, #16]
 800d03c:	9b03      	ldr	r3, [sp, #12]
 800d03e:	61d4      	str	r4, [r2, #28]
 800d040:	6153      	str	r3, [r2, #20]
 800d042:	9b07      	ldr	r3, [sp, #28]
 800d044:	6193      	str	r3, [r2, #24]
 800d046:	b009      	add	sp, #36	; 0x24
 800d048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04c:	4660      	mov	r0, ip
 800d04e:	e73b      	b.n	800cec8 <D64_GENERIC+0x8c>
 800d050:	24000000 	.word	0x24000000
 800d054:	001c0015 	.word	0x001c0015
 800d058:	000f000a 	.word	0x000f000a
 800d05c:	00060003 	.word	0x00060003
 800d060:	0024002a 	.word	0x0024002a
 800d064:	002e0030 	.word	0x002e0030
 800d068:	00030006 	.word	0x00030006
 800d06c:	000a000f 	.word	0x000a000f
 800d070:	0015001c 	.word	0x0015001c

0800d074 <D80_GENERIC>:
 800d074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d078:	b08b      	sub	sp, #44	; 0x2c
 800d07a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d07c:	9107      	str	r1, [sp, #28]
 800d07e:	6911      	ldr	r1, [r2, #16]
 800d080:	9104      	str	r1, [sp, #16]
 800d082:	6951      	ldr	r1, [r2, #20]
 800d084:	9105      	str	r1, [sp, #20]
 800d086:	6991      	ldr	r1, [r2, #24]
 800d088:	9109      	str	r1, [sp, #36]	; 0x24
 800d08a:	69d1      	ldr	r1, [r2, #28]
 800d08c:	9102      	str	r1, [sp, #8]
 800d08e:	6891      	ldr	r1, [r2, #8]
 800d090:	9103      	str	r1, [sp, #12]
 800d092:	68d1      	ldr	r1, [r2, #12]
 800d094:	9101      	str	r1, [sp, #4]
 800d096:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d098:	9106      	str	r1, [sp, #24]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f000 810b 	beq.w	800d2b6 <D80_GENERIC+0x242>
 800d0a0:	6a13      	ldr	r3, [r2, #32]
 800d0a2:	f04f 0800 	mov.w	r8, #0
 800d0a6:	f8df c260 	ldr.w	ip, [pc, #608]	; 800d308 <D80_GENERIC+0x294>
 800d0aa:	9308      	str	r3, [sp, #32]
 800d0ac:	9200      	str	r2, [sp, #0]
 800d0ae:	e0ee      	b.n	800d28e <D80_GENERIC+0x21a>
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	f890 e000 	ldrb.w	lr, [r0]
 800d0b6:	b219      	sxth	r1, r3
 800d0b8:	425c      	negs	r4, r3
 800d0ba:	f810 9003 	ldrb.w	r9, [r0, r3]
 800d0be:	004e      	lsls	r6, r1, #1
 800d0c0:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800d0c4:	4431      	add	r1, r6
 800d0c6:	1843      	adds	r3, r0, r1
 800d0c8:	f810 b001 	ldrb.w	fp, [r0, r1]
 800d0cc:	1919      	adds	r1, r3, r4
 800d0ce:	5d1b      	ldrb	r3, [r3, r4]
 800d0d0:	1948      	adds	r0, r1, r5
 800d0d2:	f811 a005 	ldrb.w	sl, [r1, r5]
 800d0d6:	041b      	lsls	r3, r3, #16
 800d0d8:	1907      	adds	r7, r0, r4
 800d0da:	5d01      	ldrb	r1, [r0, r4]
 800d0dc:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800d0e0:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800d0e4:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800d0e8:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800d0ec:	0409      	lsls	r1, r1, #16
 800d0ee:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800d0f2:	eb0b 0905 	add.w	r9, fp, r5
 800d0f6:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800d0fa:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800d0fe:	eb09 0b04 	add.w	fp, r9, r4
 800d102:	f819 4004 	ldrb.w	r4, [r9, r4]
 800d106:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800d10a:	4473      	add	r3, lr
 800d10c:	eb0b 0006 	add.w	r0, fp, r6
 800d110:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800d114:	4439      	add	r1, r7
 800d116:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800d11a:	b2df      	uxtb	r7, r3
 800d11c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800d120:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800d124:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800d128:	fa5f fa81 	uxtb.w	sl, r1
 800d12c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800d130:	9c02      	ldr	r4, [sp, #8]
 800d132:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800d136:	441c      	add	r4, r3
 800d138:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800d13c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800d140:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800d144:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800d148:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800d14c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d150:	b2ed      	uxtb	r5, r5
 800d152:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800d156:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d15a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800d15e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800d162:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800d166:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d16a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800d16e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800d172:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800d176:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800d17a:	0e09      	lsrs	r1, r1, #24
 800d17c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800d180:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800d184:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800d188:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d18c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800d190:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d194:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d198:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800d19c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d1a0:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800d1a4:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800d1a8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d1ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800d1b0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800d1b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d1b8:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800d1bc:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800d1c0:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800d1c4:	9202      	str	r2, [sp, #8]
 800d1c6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800d1ca:	4a43      	ldr	r2, [pc, #268]	; (800d2d8 <D80_GENERIC+0x264>)
 800d1cc:	9f01      	ldr	r7, [sp, #4]
 800d1ce:	fb23 7a02 	smlad	sl, r3, r2, r7
 800d1d2:	4a42      	ldr	r2, [pc, #264]	; (800d2dc <D80_GENERIC+0x268>)
 800d1d4:	fb26 aa02 	smlad	sl, r6, r2, sl
 800d1d8:	4a41      	ldr	r2, [pc, #260]	; (800d2e0 <D80_GENERIC+0x26c>)
 800d1da:	fb24 aa02 	smlad	sl, r4, r2, sl
 800d1de:	4a41      	ldr	r2, [pc, #260]	; (800d2e4 <D80_GENERIC+0x270>)
 800d1e0:	fb21 a702 	smlad	r7, r1, r2, sl
 800d1e4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800d1e8:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800d1ec:	4a3e      	ldr	r2, [pc, #248]	; (800d2e8 <D80_GENERIC+0x274>)
 800d1ee:	9f03      	ldr	r7, [sp, #12]
 800d1f0:	fb23 7e02 	smlad	lr, r3, r2, r7
 800d1f4:	4a3d      	ldr	r2, [pc, #244]	; (800d2ec <D80_GENERIC+0x278>)
 800d1f6:	fb26 ee02 	smlad	lr, r6, r2, lr
 800d1fa:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800d1fe:	fb24 e707 	smlad	r7, r4, r7, lr
 800d202:	4a3b      	ldr	r2, [pc, #236]	; (800d2f0 <D80_GENERIC+0x27c>)
 800d204:	fb21 7702 	smlad	r7, r1, r2, r7
 800d208:	4a3a      	ldr	r2, [pc, #232]	; (800d2f4 <D80_GENERIC+0x280>)
 800d20a:	fb25 7202 	smlad	r2, r5, r2, r7
 800d20e:	f04f 0901 	mov.w	r9, #1
 800d212:	9201      	str	r2, [sp, #4]
 800d214:	fb23 f909 	smuad	r9, r3, r9
 800d218:	4b37      	ldr	r3, [pc, #220]	; (800d2f8 <D80_GENERIC+0x284>)
 800d21a:	fb26 9603 	smlad	r6, r6, r3, r9
 800d21e:	4f37      	ldr	r7, [pc, #220]	; (800d2fc <D80_GENERIC+0x288>)
 800d220:	fb24 6407 	smlad	r4, r4, r7, r6
 800d224:	4f36      	ldr	r7, [pc, #216]	; (800d300 <D80_GENERIC+0x28c>)
 800d226:	fb21 4707 	smlad	r7, r1, r7, r4
 800d22a:	4936      	ldr	r1, [pc, #216]	; (800d304 <D80_GENERIC+0x290>)
 800d22c:	fb25 7301 	smlad	r3, r5, r1, r7
 800d230:	9303      	str	r3, [sp, #12]
 800d232:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800d236:	9b08      	ldr	r3, [sp, #32]
 800d238:	b193      	cbz	r3, 800d260 <D80_GENERIC+0x1ec>
 800d23a:	9a04      	ldr	r2, [sp, #16]
 800d23c:	4452      	add	r2, sl
 800d23e:	4614      	mov	r4, r2
 800d240:	9a05      	ldr	r2, [sp, #20]
 800d242:	f8cd a014 	str.w	sl, [sp, #20]
 800d246:	1aa4      	subs	r4, r4, r2
 800d248:	fba4 1203 	umull	r1, r2, r4, r3
 800d24c:	17e7      	asrs	r7, r4, #31
 800d24e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800d252:	fb03 2207 	mla	r2, r3, r7, r2
 800d256:	f142 0500 	adc.w	r5, r2, #0
 800d25a:	006b      	lsls	r3, r5, #1
 800d25c:	469a      	mov	sl, r3
 800d25e:	9304      	str	r3, [sp, #16]
 800d260:	9e00      	ldr	r6, [sp, #0]
 800d262:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800d266:	9a06      	ldr	r2, [sp, #24]
 800d268:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d26c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800d26e:	2500      	movs	r5, #0
 800d270:	fb08 f303 	mul.w	r3, r8, r3
 800d274:	fbc2 450a 	smlal	r4, r5, r2, sl
 800d278:	9a07      	ldr	r2, [sp, #28]
 800d27a:	f108 0801 	add.w	r8, r8, #1
 800d27e:	10a9      	asrs	r1, r5, #2
 800d280:	f301 010f 	ssat	r1, #16, r1
 800d284:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d288:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800d28a:	4543      	cmp	r3, r8
 800d28c:	dd12      	ble.n	800d2b4 <D80_GENERIC+0x240>
 800d28e:	9b00      	ldr	r3, [sp, #0]
 800d290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d292:	2b01      	cmp	r3, #1
 800d294:	f47f af0c 	bne.w	800d0b0 <D80_GENERIC+0x3c>
 800d298:	9b00      	ldr	r3, [sp, #0]
 800d29a:	6885      	ldr	r5, [r0, #8]
 800d29c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d29e:	06b2      	lsls	r2, r6, #26
 800d2a0:	e9d0 3100 	ldrd	r3, r1, [r0]
 800d2a4:	f100 000a 	add.w	r0, r0, #10
 800d2a8:	f57f af35 	bpl.w	800d116 <D80_GENERIC+0xa2>
 800d2ac:	ba5b      	rev16	r3, r3
 800d2ae:	ba49      	rev16	r1, r1
 800d2b0:	ba6d      	rev16	r5, r5
 800d2b2:	e730      	b.n	800d116 <D80_GENERIC+0xa2>
 800d2b4:	4632      	mov	r2, r6
 800d2b6:	9b03      	ldr	r3, [sp, #12]
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	6093      	str	r3, [r2, #8]
 800d2bc:	9b01      	ldr	r3, [sp, #4]
 800d2be:	60d3      	str	r3, [r2, #12]
 800d2c0:	9b02      	ldr	r3, [sp, #8]
 800d2c2:	61d3      	str	r3, [r2, #28]
 800d2c4:	9b04      	ldr	r3, [sp, #16]
 800d2c6:	6113      	str	r3, [r2, #16]
 800d2c8:	9b05      	ldr	r3, [sp, #20]
 800d2ca:	6153      	str	r3, [r2, #20]
 800d2cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2ce:	6193      	str	r3, [r2, #24]
 800d2d0:	b00b      	add	sp, #44	; 0x2c
 800d2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d6:	bf00      	nop
 800d2d8:	002d0024 	.word	0x002d0024
 800d2dc:	001c0015 	.word	0x001c0015
 800d2e0:	000f000a 	.word	0x000f000a
 800d2e4:	00060003 	.word	0x00060003
 800d2e8:	0037003f 	.word	0x0037003f
 800d2ec:	00450049 	.word	0x00450049
 800d2f0:	00490045 	.word	0x00490045
 800d2f4:	003f0037 	.word	0x003f0037
 800d2f8:	00030006 	.word	0x00030006
 800d2fc:	000a000f 	.word	0x000a000f
 800d300:	0015001c 	.word	0x0015001c
 800d304:	0024002d 	.word	0x0024002d
 800d308:	24000000 	.word	0x24000000

0800d30c <D128_GENERIC>:
 800d30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d310:	b08d      	sub	sp, #52	; 0x34
 800d312:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d314:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800d318:	9109      	str	r1, [sp, #36]	; 0x24
 800d31a:	6911      	ldr	r1, [r2, #16]
 800d31c:	9201      	str	r2, [sp, #4]
 800d31e:	9106      	str	r1, [sp, #24]
 800d320:	6951      	ldr	r1, [r2, #20]
 800d322:	9107      	str	r1, [sp, #28]
 800d324:	6991      	ldr	r1, [r2, #24]
 800d326:	910b      	str	r1, [sp, #44]	; 0x2c
 800d328:	6891      	ldr	r1, [r2, #8]
 800d32a:	9103      	str	r1, [sp, #12]
 800d32c:	68d1      	ldr	r1, [r2, #12]
 800d32e:	9102      	str	r1, [sp, #8]
 800d330:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d332:	9108      	str	r1, [sp, #32]
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 8183 	beq.w	800d640 <D128_GENERIC+0x334>
 800d33a:	2300      	movs	r3, #0
 800d33c:	6a12      	ldr	r2, [r2, #32]
 800d33e:	4681      	mov	r9, r0
 800d340:	920a      	str	r2, [sp, #40]	; 0x28
 800d342:	e9cd a304 	strd	sl, r3, [sp, #16]
 800d346:	e165      	b.n	800d614 <D128_GENERIC+0x308>
 800d348:	b2d2      	uxtb	r2, r2
 800d34a:	f899 b000 	ldrb.w	fp, [r9]
 800d34e:	b213      	sxth	r3, r2
 800d350:	4255      	negs	r5, r2
 800d352:	f819 0002 	ldrb.w	r0, [r9, r2]
 800d356:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d35a:	009f      	lsls	r7, r3, #2
 800d35c:	eb09 0402 	add.w	r4, r9, r2
 800d360:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800d364:	f819 8002 	ldrb.w	r8, [r9, r2]
 800d368:	443b      	add	r3, r7
 800d36a:	1962      	adds	r2, r4, r5
 800d36c:	5d64      	ldrb	r4, [r4, r5]
 800d36e:	eb02 0c03 	add.w	ip, r2, r3
 800d372:	0424      	lsls	r4, r4, #16
 800d374:	5cd3      	ldrb	r3, [r2, r3]
 800d376:	eb0c 0e05 	add.w	lr, ip, r5
 800d37a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800d37e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800d382:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800d386:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800d38a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800d38e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800d392:	eb0c 0e06 	add.w	lr, ip, r6
 800d396:	f81c a006 	ldrb.w	sl, [ip, r6]
 800d39a:	0412      	lsls	r2, r2, #16
 800d39c:	445c      	add	r4, fp
 800d39e:	eb0e 0c05 	add.w	ip, lr, r5
 800d3a2:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800d3a6:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800d3aa:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800d3ae:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800d3b2:	041b      	lsls	r3, r3, #16
 800d3b4:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800d3b8:	eb00 0b06 	add.w	fp, r0, r6
 800d3bc:	5d80      	ldrb	r0, [r0, r6]
 800d3be:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800d3c2:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800d3c6:	eb0b 0a05 	add.w	sl, fp, r5
 800d3ca:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800d3ce:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800d3d2:	0436      	lsls	r6, r6, #16
 800d3d4:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800d3d8:	4442      	add	r2, r8
 800d3da:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800d3de:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800d3e2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800d3e6:	44b9      	add	r9, r7
 800d3e8:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800d3ec:	4463      	add	r3, ip
 800d3ee:	eb06 0508 	add.w	r5, r6, r8
 800d3f2:	b2e7      	uxtb	r7, r4
 800d3f4:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800d3f8:	499b      	ldr	r1, [pc, #620]	; (800d668 <D128_GENERIC+0x35c>)
 800d3fa:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800d3fe:	0e24      	lsrs	r4, r4, #24
 800d400:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800d404:	b2d7      	uxtb	r7, r2
 800d406:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800d40a:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800d40e:	9904      	ldr	r1, [sp, #16]
 800d410:	4461      	add	r1, ip
 800d412:	468c      	mov	ip, r1
 800d414:	4994      	ldr	r1, [pc, #592]	; (800d668 <D128_GENERIC+0x35c>)
 800d416:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800d41a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800d41e:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800d422:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d426:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800d42a:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800d42e:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800d432:	0e12      	lsrs	r2, r2, #24
 800d434:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800d438:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800d43c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800d440:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d444:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800d448:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d44c:	b2da      	uxtb	r2, r3
 800d44e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d452:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800d456:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d45a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d45e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800d462:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800d466:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800d46a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800d46e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d472:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800d476:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800d47a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800d47e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d482:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800d486:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d48a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800d48e:	0e1b      	lsrs	r3, r3, #24
 800d490:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800d494:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d498:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d49c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800d4a0:	b2eb      	uxtb	r3, r5
 800d4a2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d4a6:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800d4aa:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800d4ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d4b2:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800d4b6:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800d4ba:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800d4be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d4c2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d4c6:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800d4ca:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800d4ce:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800d4d2:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800d4d6:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800d4da:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d4de:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800d4e2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d4e6:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800d4ea:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800d4ee:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800d4f2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d4f6:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800d4fa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d4fe:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800d502:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800d506:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800d50a:	9104      	str	r1, [sp, #16]
 800d50c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800d510:	9902      	ldr	r1, [sp, #8]
 800d512:	4a56      	ldr	r2, [pc, #344]	; (800d66c <D128_GENERIC+0x360>)
 800d514:	fb2b 1202 	smlad	r2, fp, r2, r1
 800d518:	4955      	ldr	r1, [pc, #340]	; (800d670 <D128_GENERIC+0x364>)
 800d51a:	fb28 2201 	smlad	r2, r8, r1, r2
 800d51e:	4955      	ldr	r1, [pc, #340]	; (800d674 <D128_GENERIC+0x368>)
 800d520:	fb27 2201 	smlad	r2, r7, r1, r2
 800d524:	4954      	ldr	r1, [pc, #336]	; (800d678 <D128_GENERIC+0x36c>)
 800d526:	fb26 2201 	smlad	r2, r6, r1, r2
 800d52a:	4954      	ldr	r1, [pc, #336]	; (800d67c <D128_GENERIC+0x370>)
 800d52c:	fb24 2201 	smlad	r2, r4, r1, r2
 800d530:	4953      	ldr	r1, [pc, #332]	; (800d680 <D128_GENERIC+0x374>)
 800d532:	fb20 2201 	smlad	r2, r0, r1, r2
 800d536:	4953      	ldr	r1, [pc, #332]	; (800d684 <D128_GENERIC+0x378>)
 800d538:	fb23 2201 	smlad	r2, r3, r1, r2
 800d53c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800d540:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800d544:	4950      	ldr	r1, [pc, #320]	; (800d688 <D128_GENERIC+0x37c>)
 800d546:	9a03      	ldr	r2, [sp, #12]
 800d548:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800d54c:	4a4f      	ldr	r2, [pc, #316]	; (800d68c <D128_GENERIC+0x380>)
 800d54e:	fb28 ce02 	smlad	lr, r8, r2, ip
 800d552:	f8df c150 	ldr.w	ip, [pc, #336]	; 800d6a4 <D128_GENERIC+0x398>
 800d556:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800d55a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800d6a8 <D128_GENERIC+0x39c>
 800d55e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800d562:	f8df e148 	ldr.w	lr, [pc, #328]	; 800d6ac <D128_GENERIC+0x3a0>
 800d566:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800d56a:	f8df c144 	ldr.w	ip, [pc, #324]	; 800d6b0 <D128_GENERIC+0x3a4>
 800d56e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800d572:	f8df c140 	ldr.w	ip, [pc, #320]	; 800d6b4 <D128_GENERIC+0x3a8>
 800d576:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800d57a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800d6b8 <D128_GENERIC+0x3ac>
 800d57e:	fb25 c20e 	smlad	r2, r5, lr, ip
 800d582:	f04f 0c01 	mov.w	ip, #1
 800d586:	9202      	str	r2, [sp, #8]
 800d588:	fb2b fb0c 	smuad	fp, fp, ip
 800d58c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800d6bc <D128_GENERIC+0x3b0>
 800d590:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800d594:	f8df c128 	ldr.w	ip, [pc, #296]	; 800d6c0 <D128_GENERIC+0x3b4>
 800d598:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800d59c:	4f3c      	ldr	r7, [pc, #240]	; (800d690 <D128_GENERIC+0x384>)
 800d59e:	fb26 bb07 	smlad	fp, r6, r7, fp
 800d5a2:	4f3c      	ldr	r7, [pc, #240]	; (800d694 <D128_GENERIC+0x388>)
 800d5a4:	fb24 bb07 	smlad	fp, r4, r7, fp
 800d5a8:	4f3b      	ldr	r7, [pc, #236]	; (800d698 <D128_GENERIC+0x38c>)
 800d5aa:	fb20 bb07 	smlad	fp, r0, r7, fp
 800d5ae:	4f3b      	ldr	r7, [pc, #236]	; (800d69c <D128_GENERIC+0x390>)
 800d5b0:	fb23 bb07 	smlad	fp, r3, r7, fp
 800d5b4:	4b3a      	ldr	r3, [pc, #232]	; (800d6a0 <D128_GENERIC+0x394>)
 800d5b6:	fb25 b303 	smlad	r3, r5, r3, fp
 800d5ba:	9303      	str	r3, [sp, #12]
 800d5bc:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800d5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5c2:	b183      	cbz	r3, 800d5e6 <D128_GENERIC+0x2da>
 800d5c4:	9a06      	ldr	r2, [sp, #24]
 800d5c6:	9907      	ldr	r1, [sp, #28]
 800d5c8:	4422      	add	r2, r4
 800d5ca:	9407      	str	r4, [sp, #28]
 800d5cc:	1a52      	subs	r2, r2, r1
 800d5ce:	fba2 0103 	umull	r0, r1, r2, r3
 800d5d2:	17d5      	asrs	r5, r2, #31
 800d5d4:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800d5d8:	fb03 1105 	mla	r1, r3, r5, r1
 800d5dc:	f141 0300 	adc.w	r3, r1, #0
 800d5e0:	005b      	lsls	r3, r3, #1
 800d5e2:	461c      	mov	r4, r3
 800d5e4:	9306      	str	r3, [sp, #24]
 800d5e6:	9d01      	ldr	r5, [sp, #4]
 800d5e8:	01e4      	lsls	r4, r4, #7
 800d5ea:	9e05      	ldr	r6, [sp, #20]
 800d5ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d5f0:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	9908      	ldr	r1, [sp, #32]
 800d5f6:	fb06 f000 	mul.w	r0, r6, r0
 800d5fa:	3601      	adds	r6, #1
 800d5fc:	fbc1 2304 	smlal	r2, r3, r1, r4
 800d600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d602:	109b      	asrs	r3, r3, #2
 800d604:	9605      	str	r6, [sp, #20]
 800d606:	f303 030f 	ssat	r3, #16, r3
 800d60a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800d60e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800d610:	42b3      	cmp	r3, r6
 800d612:	dd13      	ble.n	800d63c <D128_GENERIC+0x330>
 800d614:	9b01      	ldr	r3, [sp, #4]
 800d616:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d618:	2a01      	cmp	r2, #1
 800d61a:	f47f ae95 	bne.w	800d348 <D128_GENERIC+0x3c>
 800d61e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d620:	f109 0610 	add.w	r6, r9, #16
 800d624:	0681      	lsls	r1, r0, #26
 800d626:	e9d9 4200 	ldrd	r4, r2, [r9]
 800d62a:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800d62e:	d518      	bpl.n	800d662 <D128_GENERIC+0x356>
 800d630:	ba64      	rev16	r4, r4
 800d632:	ba52      	rev16	r2, r2
 800d634:	ba5b      	rev16	r3, r3
 800d636:	ba6d      	rev16	r5, r5
 800d638:	46b1      	mov	r9, r6
 800d63a:	e6da      	b.n	800d3f2 <D128_GENERIC+0xe6>
 800d63c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d640:	9b01      	ldr	r3, [sp, #4]
 800d642:	2000      	movs	r0, #0
 800d644:	9903      	ldr	r1, [sp, #12]
 800d646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d648:	6099      	str	r1, [r3, #8]
 800d64a:	9902      	ldr	r1, [sp, #8]
 800d64c:	f8c3 a01c 	str.w	sl, [r3, #28]
 800d650:	60d9      	str	r1, [r3, #12]
 800d652:	9906      	ldr	r1, [sp, #24]
 800d654:	619a      	str	r2, [r3, #24]
 800d656:	6119      	str	r1, [r3, #16]
 800d658:	9907      	ldr	r1, [sp, #28]
 800d65a:	6159      	str	r1, [r3, #20]
 800d65c:	b00d      	add	sp, #52	; 0x34
 800d65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d662:	46b1      	mov	r9, r6
 800d664:	e6c5      	b.n	800d3f2 <D128_GENERIC+0xe6>
 800d666:	bf00      	nop
 800d668:	24000000 	.word	0x24000000
 800d66c:	00780069 	.word	0x00780069
 800d670:	005b004e 	.word	0x005b004e
 800d674:	00420037 	.word	0x00420037
 800d678:	002d0024 	.word	0x002d0024
 800d67c:	001c0015 	.word	0x001c0015
 800d680:	000f000a 	.word	0x000f000a
 800d684:	00060003 	.word	0x00060003
 800d688:	00880096 	.word	0x00880096
 800d68c:	00a200ac 	.word	0x00a200ac
 800d690:	0015001c 	.word	0x0015001c
 800d694:	0024002d 	.word	0x0024002d
 800d698:	00370042 	.word	0x00370042
 800d69c:	004e005b 	.word	0x004e005b
 800d6a0:	00690078 	.word	0x00690078
 800d6a4:	00b400ba 	.word	0x00b400ba
 800d6a8:	00be00c0 	.word	0x00be00c0
 800d6ac:	00c000be 	.word	0x00c000be
 800d6b0:	00ba00b4 	.word	0x00ba00b4
 800d6b4:	00ac00a2 	.word	0x00ac00a2
 800d6b8:	00960088 	.word	0x00960088
 800d6bc:	00030006 	.word	0x00030006
 800d6c0:	000a000f 	.word	0x000a000f

0800d6c4 <D16_1CH_HTONS_VOL_HP>:
 800d6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c8:	6993      	ldr	r3, [r2, #24]
 800d6ca:	b087      	sub	sp, #28
 800d6cc:	4682      	mov	sl, r0
 800d6ce:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800d6d0:	9304      	str	r3, [sp, #16]
 800d6d2:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800d6d6:	69d3      	ldr	r3, [r2, #28]
 800d6d8:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800d6dc:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800d6e0:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800d6e4:	9403      	str	r4, [sp, #12]
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d054      	beq.n	800d794 <D16_1CH_HTONS_VOL_HP+0xd0>
 800d6ea:	f1a1 0902 	sub.w	r9, r1, #2
 800d6ee:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800d6f2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800d7a0 <D16_1CH_HTONS_VOL_HP+0xdc>
 800d6f6:	4650      	mov	r0, sl
 800d6f8:	9101      	str	r1, [sp, #4]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	f8cd b008 	str.w	fp, [sp, #8]
 800d700:	9205      	str	r2, [sp, #20]
 800d702:	f850 3b02 	ldr.w	r3, [r0], #2
 800d706:	ba5b      	rev16	r3, r3
 800d708:	b2dc      	uxtb	r4, r3
 800d70a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d70e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d712:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800d716:	4419      	add	r1, r3
 800d718:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800d71c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800d720:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800d724:	0aa1      	lsrs	r1, r4, #10
 800d726:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800d72a:	4a1b      	ldr	r2, [pc, #108]	; (800d798 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800d72c:	fb23 5402 	smlad	r4, r3, r2, r5
 800d730:	4a1a      	ldr	r2, [pc, #104]	; (800d79c <D16_1CH_HTONS_VOL_HP+0xd8>)
 800d732:	fb23 f502 	smuad	r5, r3, r2
 800d736:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800d73a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800d73e:	f04f 0b00 	mov.w	fp, #0
 800d742:	19a2      	adds	r2, r4, r6
 800d744:	eba2 020c 	sub.w	r2, r2, ip
 800d748:	46a4      	mov	ip, r4
 800d74a:	17d7      	asrs	r7, r2, #31
 800d74c:	fba2 230e 	umull	r2, r3, r2, lr
 800d750:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800d754:	fb0e 3307 	mla	r3, lr, r7, r3
 800d758:	f143 0700 	adc.w	r7, r3, #0
 800d75c:	9b02      	ldr	r3, [sp, #8]
 800d75e:	047a      	lsls	r2, r7, #17
 800d760:	007e      	lsls	r6, r7, #1
 800d762:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800d766:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800d76a:	f303 030f 	ssat	r3, #16, r3
 800d76e:	f829 3f02 	strh.w	r3, [r9, #2]!
 800d772:	9b01      	ldr	r3, [sp, #4]
 800d774:	4298      	cmp	r0, r3
 800d776:	d1c4      	bne.n	800d702 <D16_1CH_HTONS_VOL_HP+0x3e>
 800d778:	460b      	mov	r3, r1
 800d77a:	9a05      	ldr	r2, [sp, #20]
 800d77c:	2000      	movs	r0, #0
 800d77e:	9903      	ldr	r1, [sp, #12]
 800d780:	61d3      	str	r3, [r2, #28]
 800d782:	9b04      	ldr	r3, [sp, #16]
 800d784:	6095      	str	r5, [r2, #8]
 800d786:	60d1      	str	r1, [r2, #12]
 800d788:	6193      	str	r3, [r2, #24]
 800d78a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800d78e:	b007      	add	sp, #28
 800d790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d794:	4664      	mov	r4, ip
 800d796:	e7f1      	b.n	800d77c <D16_1CH_HTONS_VOL_HP+0xb8>
 800d798:	00030001 	.word	0x00030001
 800d79c:	00010003 	.word	0x00010003
 800d7a0:	24000000 	.word	0x24000000

0800d7a4 <D24_1CH_HTONS_VOL_HP>:
 800d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800d7aa:	b089      	sub	sp, #36	; 0x24
 800d7ac:	6993      	ldr	r3, [r2, #24]
 800d7ae:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800d7b0:	9604      	str	r6, [sp, #16]
 800d7b2:	6a16      	ldr	r6, [r2, #32]
 800d7b4:	9306      	str	r3, [sp, #24]
 800d7b6:	9505      	str	r5, [sp, #20]
 800d7b8:	69d3      	ldr	r3, [r2, #28]
 800d7ba:	9600      	str	r6, [sp, #0]
 800d7bc:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800d7c0:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800d7c4:	2d00      	cmp	r5, #0
 800d7c6:	f000 8083 	beq.w	800d8d0 <D24_1CH_HTONS_VOL_HP+0x12c>
 800d7ca:	9207      	str	r2, [sp, #28]
 800d7cc:	2600      	movs	r6, #0
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	f1a1 0b02 	sub.w	fp, r1, #2
 800d7d4:	4f3f      	ldr	r7, [pc, #252]	; (800d8d4 <D24_1CH_HTONS_VOL_HP+0x130>)
 800d7d6:	461d      	mov	r5, r3
 800d7d8:	f8cd a00c 	str.w	sl, [sp, #12]
 800d7dc:	9c00      	ldr	r4, [sp, #0]
 800d7de:	e056      	b.n	800d88e <D24_1CH_HTONS_VOL_HP+0xea>
 800d7e0:	7841      	ldrb	r1, [r0, #1]
 800d7e2:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800d7e6:	3002      	adds	r0, #2
 800d7e8:	4488      	add	r8, r1
 800d7ea:	fa5f f388 	uxtb.w	r3, r8
 800d7ee:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800d7f2:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800d7f6:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800d7fa:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800d7fe:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800d802:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800d806:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800d80a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d80e:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800d812:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800d816:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d81a:	492f      	ldr	r1, [pc, #188]	; (800d8d8 <D24_1CH_HTONS_VOL_HP+0x134>)
 800d81c:	fb23 e901 	smlad	r9, r3, r1, lr
 800d820:	492e      	ldr	r1, [pc, #184]	; (800d8dc <D24_1CH_HTONS_VOL_HP+0x138>)
 800d822:	fb23 ce01 	smlad	lr, r3, r1, ip
 800d826:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800d82a:	2101      	movs	r1, #1
 800d82c:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800d830:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800d834:	fb23 f301 	smuad	r3, r3, r1
 800d838:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800d83c:	eb08 0c03 	add.w	ip, r8, r3
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	f04f 0a00 	mov.w	sl, #0
 800d846:	440a      	add	r2, r1
 800d848:	3601      	adds	r6, #1
 800d84a:	9103      	str	r1, [sp, #12]
 800d84c:	1ad2      	subs	r2, r2, r3
 800d84e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800d852:	fba2 2304 	umull	r2, r3, r2, r4
 800d856:	e9cd 2300 	strd	r2, r3, [sp]
 800d85a:	fb04 3309 	mla	r3, r4, r9, r3
 800d85e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800d862:	9301      	str	r3, [sp, #4]
 800d864:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d868:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d86c:	f143 0300 	adc.w	r3, r3, #0
 800d870:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800d874:	005a      	lsls	r2, r3, #1
 800d876:	9b04      	ldr	r3, [sp, #16]
 800d878:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800d87c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800d880:	f303 030f 	ssat	r3, #16, r3
 800d884:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800d888:	9b05      	ldr	r3, [sp, #20]
 800d88a:	429e      	cmp	r6, r3
 800d88c:	d010      	beq.n	800d8b0 <D24_1CH_HTONS_VOL_HP+0x10c>
 800d88e:	f890 9003 	ldrb.w	r9, [r0, #3]
 800d892:	f016 0f01 	tst.w	r6, #1
 800d896:	7801      	ldrb	r1, [r0, #0]
 800d898:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800d89c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800d8a0:	d09e      	beq.n	800d7e0 <D24_1CH_HTONS_VOL_HP+0x3c>
 800d8a2:	f890 8002 	ldrb.w	r8, [r0, #2]
 800d8a6:	3004      	adds	r0, #4
 800d8a8:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800d8ac:	4488      	add	r8, r1
 800d8ae:	e79c      	b.n	800d7ea <D24_1CH_HTONS_VOL_HP+0x46>
 800d8b0:	4614      	mov	r4, r2
 800d8b2:	462b      	mov	r3, r5
 800d8b4:	9a07      	ldr	r2, [sp, #28]
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	61d3      	str	r3, [r2, #28]
 800d8ba:	9b06      	ldr	r3, [sp, #24]
 800d8bc:	f8c2 c008 	str.w	ip, [r2, #8]
 800d8c0:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d8c4:	6193      	str	r3, [r2, #24]
 800d8c6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800d8ca:	b009      	add	sp, #36	; 0x24
 800d8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d0:	4651      	mov	r1, sl
 800d8d2:	e7f0      	b.n	800d8b6 <D24_1CH_HTONS_VOL_HP+0x112>
 800d8d4:	24000000 	.word	0x24000000
 800d8d8:	00030001 	.word	0x00030001
 800d8dc:	00060007 	.word	0x00060007

0800d8e0 <D32_1CH_HTONS_VOL_HP>:
 800d8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e4:	6993      	ldr	r3, [r2, #24]
 800d8e6:	b087      	sub	sp, #28
 800d8e8:	4683      	mov	fp, r0
 800d8ea:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800d8ec:	9304      	str	r3, [sp, #16]
 800d8ee:	69d5      	ldr	r5, [r2, #28]
 800d8f0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d8f2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800d8f6:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800d8fa:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d077      	beq.n	800d9f2 <D32_1CH_HTONS_VOL_HP+0x112>
 800d902:	460f      	mov	r7, r1
 800d904:	46f1      	mov	r9, lr
 800d906:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800d90a:	f8cd 8000 	str.w	r8, [sp]
 800d90e:	4e3a      	ldr	r6, [pc, #232]	; (800d9f8 <D32_1CH_HTONS_VOL_HP+0x118>)
 800d910:	469e      	mov	lr, r3
 800d912:	46a0      	mov	r8, r4
 800d914:	9103      	str	r1, [sp, #12]
 800d916:	9205      	str	r2, [sp, #20]
 800d918:	f85b 4b04 	ldr.w	r4, [fp], #4
 800d91c:	ba64      	rev16	r4, r4
 800d91e:	b2e0      	uxtb	r0, r4
 800d920:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800d924:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800d928:	0e24      	lsrs	r4, r4, #24
 800d92a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800d92e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800d932:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800d936:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800d93a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800d93e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800d942:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d946:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800d94a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d94e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800d952:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d956:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d95a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800d95e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800d962:	4826      	ldr	r0, [pc, #152]	; (800d9fc <D32_1CH_HTONS_VOL_HP+0x11c>)
 800d964:	fb23 c400 	smlad	r4, r3, r0, ip
 800d968:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d96c:	fb21 4402 	smlad	r4, r1, r2, r4
 800d970:	4823      	ldr	r0, [pc, #140]	; (800da00 <D32_1CH_HTONS_VOL_HP+0x120>)
 800d972:	fb23 ec00 	smlad	ip, r3, r0, lr
 800d976:	4823      	ldr	r0, [pc, #140]	; (800da04 <D32_1CH_HTONS_VOL_HP+0x124>)
 800d978:	fb21 cc00 	smlad	ip, r1, r0, ip
 800d97c:	2201      	movs	r2, #1
 800d97e:	fb23 f302 	smuad	r3, r3, r2
 800d982:	4821      	ldr	r0, [pc, #132]	; (800da08 <D32_1CH_HTONS_VOL_HP+0x128>)
 800d984:	fb21 3e00 	smlad	lr, r1, r0, r3
 800d988:	9b00      	ldr	r3, [sp, #0]
 800d98a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800d98e:	4423      	add	r3, r4
 800d990:	eba3 0209 	sub.w	r2, r3, r9
 800d994:	46a1      	mov	r9, r4
 800d996:	17d1      	asrs	r1, r2, #31
 800d998:	fba2 230a 	umull	r2, r3, r2, sl
 800d99c:	e9cd 2300 	strd	r2, r3, [sp]
 800d9a0:	fb0a 3301 	mla	r3, sl, r1, r3
 800d9a4:	9301      	str	r3, [sp, #4]
 800d9a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9aa:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d9ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9b2:	f143 0300 	adc.w	r3, r3, #0
 800d9b6:	0399      	lsls	r1, r3, #14
 800d9b8:	005b      	lsls	r3, r3, #1
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	2300      	movs	r3, #0
 800d9be:	fbc8 2301 	smlal	r2, r3, r8, r1
 800d9c2:	109b      	asrs	r3, r3, #2
 800d9c4:	f303 030f 	ssat	r3, #16, r3
 800d9c8:	f827 3b02 	strh.w	r3, [r7], #2
 800d9cc:	9b03      	ldr	r3, [sp, #12]
 800d9ce:	429f      	cmp	r7, r3
 800d9d0:	d1a2      	bne.n	800d918 <D32_1CH_HTONS_VOL_HP+0x38>
 800d9d2:	4673      	mov	r3, lr
 800d9d4:	f8dd 8000 	ldr.w	r8, [sp]
 800d9d8:	9a05      	ldr	r2, [sp, #20]
 800d9da:	6093      	str	r3, [r2, #8]
 800d9dc:	2000      	movs	r0, #0
 800d9de:	9b04      	ldr	r3, [sp, #16]
 800d9e0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800d9e4:	61d5      	str	r5, [r2, #28]
 800d9e6:	6193      	str	r3, [r2, #24]
 800d9e8:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800d9ec:	b007      	add	sp, #28
 800d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f2:	4674      	mov	r4, lr
 800d9f4:	e7f1      	b.n	800d9da <D32_1CH_HTONS_VOL_HP+0xfa>
 800d9f6:	bf00      	nop
 800d9f8:	24000000 	.word	0x24000000
 800d9fc:	00060003 	.word	0x00060003
 800da00:	000a000c 	.word	0x000a000c
 800da04:	000c000a 	.word	0x000c000a
 800da08:	00030006 	.word	0x00030006

0800da0c <D48_1CH_HTONS_VOL_HP>:
 800da0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da10:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800da12:	b087      	sub	sp, #28
 800da14:	6993      	ldr	r3, [r2, #24]
 800da16:	9701      	str	r7, [sp, #4]
 800da18:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800da1a:	6a17      	ldr	r7, [r2, #32]
 800da1c:	9304      	str	r3, [sp, #16]
 800da1e:	69d6      	ldr	r6, [r2, #28]
 800da20:	9702      	str	r7, [sp, #8]
 800da22:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800da26:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800da2a:	2d00      	cmp	r5, #0
 800da2c:	f000 8093 	beq.w	800db56 <D48_1CH_HTONS_VOL_HP+0x14a>
 800da30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da34:	f1a1 0b02 	sub.w	fp, r1, #2
 800da38:	46f2      	mov	sl, lr
 800da3a:	4f48      	ldr	r7, [pc, #288]	; (800db5c <D48_1CH_HTONS_VOL_HP+0x150>)
 800da3c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800da40:	469e      	mov	lr, r3
 800da42:	9205      	str	r2, [sp, #20]
 800da44:	9103      	str	r1, [sp, #12]
 800da46:	e9d0 3200 	ldrd	r3, r2, [r0]
 800da4a:	3006      	adds	r0, #6
 800da4c:	ba5b      	rev16	r3, r3
 800da4e:	fa92 f992 	rev16.w	r9, r2
 800da52:	b2dd      	uxtb	r5, r3
 800da54:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800da58:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800da5c:	0e1b      	lsrs	r3, r3, #24
 800da5e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800da62:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800da66:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800da6a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800da6e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800da72:	fa5f f289 	uxtb.w	r2, r9
 800da76:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800da7a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800da7e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800da82:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800da86:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800da8a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800da8e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800da92:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800da96:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800da9a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800da9e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800daa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800daa6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800daaa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800daae:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800dab2:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800dab6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800daba:	4b29      	ldr	r3, [pc, #164]	; (800db60 <D48_1CH_HTONS_VOL_HP+0x154>)
 800dabc:	fb28 c103 	smlad	r1, r8, r3, ip
 800dac0:	4b28      	ldr	r3, [pc, #160]	; (800db64 <D48_1CH_HTONS_VOL_HP+0x158>)
 800dac2:	fb25 1103 	smlad	r1, r5, r3, r1
 800dac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800daca:	fb22 1903 	smlad	r9, r2, r3, r1
 800dace:	4b26      	ldr	r3, [pc, #152]	; (800db68 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800dad0:	fb28 ec03 	smlad	ip, r8, r3, lr
 800dad4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800dad8:	fb25 cc03 	smlad	ip, r5, r3, ip
 800dadc:	4b23      	ldr	r3, [pc, #140]	; (800db6c <D48_1CH_HTONS_VOL_HP+0x160>)
 800dade:	fb22 cc03 	smlad	ip, r2, r3, ip
 800dae2:	2101      	movs	r1, #1
 800dae4:	fb28 f801 	smuad	r8, r8, r1
 800dae8:	4b21      	ldr	r3, [pc, #132]	; (800db70 <D48_1CH_HTONS_VOL_HP+0x164>)
 800daea:	fb25 8503 	smlad	r5, r5, r3, r8
 800daee:	4b21      	ldr	r3, [pc, #132]	; (800db74 <D48_1CH_HTONS_VOL_HP+0x168>)
 800daf0:	fb22 5e03 	smlad	lr, r2, r3, r5
 800daf4:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800daf8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800dafc:	190a      	adds	r2, r1, r4
 800dafe:	9c02      	ldr	r4, [sp, #8]
 800db00:	eba2 020a 	sub.w	r2, r2, sl
 800db04:	468a      	mov	sl, r1
 800db06:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800db0a:	fba2 2304 	umull	r2, r3, r2, r4
 800db0e:	fb04 3309 	mla	r3, r4, r9, r3
 800db12:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800db16:	f04f 0900 	mov.w	r9, #0
 800db1a:	f143 0500 	adc.w	r5, r3, #0
 800db1e:	9b01      	ldr	r3, [sp, #4]
 800db20:	032a      	lsls	r2, r5, #12
 800db22:	006c      	lsls	r4, r5, #1
 800db24:	fbc3 8902 	smlal	r8, r9, r3, r2
 800db28:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800db2c:	f303 030f 	ssat	r3, #16, r3
 800db30:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800db34:	9b03      	ldr	r3, [sp, #12]
 800db36:	4283      	cmp	r3, r0
 800db38:	d185      	bne.n	800da46 <D48_1CH_HTONS_VOL_HP+0x3a>
 800db3a:	4673      	mov	r3, lr
 800db3c:	9a05      	ldr	r2, [sp, #20]
 800db3e:	6093      	str	r3, [r2, #8]
 800db40:	2000      	movs	r0, #0
 800db42:	9b04      	ldr	r3, [sp, #16]
 800db44:	f8c2 c00c 	str.w	ip, [r2, #12]
 800db48:	61d6      	str	r6, [r2, #28]
 800db4a:	6193      	str	r3, [r2, #24]
 800db4c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800db50:	b007      	add	sp, #28
 800db52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db56:	4671      	mov	r1, lr
 800db58:	e7f1      	b.n	800db3e <D48_1CH_HTONS_VOL_HP+0x132>
 800db5a:	bf00      	nop
 800db5c:	24000000 	.word	0x24000000
 800db60:	000f000a 	.word	0x000f000a
 800db64:	00060003 	.word	0x00060003
 800db68:	00150019 	.word	0x00150019
 800db6c:	00190015 	.word	0x00190015
 800db70:	00030006 	.word	0x00030006
 800db74:	000a000f 	.word	0x000a000f

0800db78 <D64_1CH_HTONS_VOL_HP>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800db7e:	b089      	sub	sp, #36	; 0x24
 800db80:	6993      	ldr	r3, [r2, #24]
 800db82:	4686      	mov	lr, r0
 800db84:	9503      	str	r5, [sp, #12]
 800db86:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800db88:	6a15      	ldr	r5, [r2, #32]
 800db8a:	9306      	str	r3, [sp, #24]
 800db8c:	69d6      	ldr	r6, [r2, #28]
 800db8e:	9504      	str	r5, [sp, #16]
 800db90:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800db94:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800db98:	2800      	cmp	r0, #0
 800db9a:	f000 80a4 	beq.w	800dce6 <D64_1CH_HTONS_VOL_HP+0x16e>
 800db9e:	460f      	mov	r7, r1
 800dba0:	46f1      	mov	r9, lr
 800dba2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800dba6:	4d56      	ldr	r5, [pc, #344]	; (800dd00 <D64_1CH_HTONS_VOL_HP+0x188>)
 800dba8:	46a2      	mov	sl, r4
 800dbaa:	469e      	mov	lr, r3
 800dbac:	9105      	str	r1, [sp, #20]
 800dbae:	9207      	str	r2, [sp, #28]
 800dbb0:	f859 1b08 	ldr.w	r1, [r9], #8
 800dbb4:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800dbb8:	ba49      	rev16	r1, r1
 800dbba:	fa93 fb93 	rev16.w	fp, r3
 800dbbe:	b2cb      	uxtb	r3, r1
 800dbc0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800dbc4:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800dbc8:	0e09      	lsrs	r1, r1, #24
 800dbca:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800dbce:	fa5f f38b 	uxtb.w	r3, fp
 800dbd2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800dbd6:	4426      	add	r6, r4
 800dbd8:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800dbdc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800dbe0:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800dbe4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800dbe8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800dbec:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800dbf0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800dbf4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dbf8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800dbfc:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800dc00:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800dc04:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800dc08:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800dc0c:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800dc10:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800dc14:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800dc18:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800dc1c:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800dc20:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800dc24:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800dc28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800dc2c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800dc30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc34:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800dc38:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800dc3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc40:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800dc44:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800dc48:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800dc4c:	482d      	ldr	r0, [pc, #180]	; (800dd04 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800dc4e:	fb22 cc00 	smlad	ip, r2, r0, ip
 800dc52:	482d      	ldr	r0, [pc, #180]	; (800dd08 <D64_1CH_HTONS_VOL_HP+0x190>)
 800dc54:	fb21 cc00 	smlad	ip, r1, r0, ip
 800dc58:	482c      	ldr	r0, [pc, #176]	; (800dd0c <D64_1CH_HTONS_VOL_HP+0x194>)
 800dc5a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800dc5e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800dc62:	fb2b c404 	smlad	r4, fp, r4, ip
 800dc66:	482a      	ldr	r0, [pc, #168]	; (800dd10 <D64_1CH_HTONS_VOL_HP+0x198>)
 800dc68:	fb22 ec00 	smlad	ip, r2, r0, lr
 800dc6c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800dc70:	4828      	ldr	r0, [pc, #160]	; (800dd14 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800dc72:	fb21 cc00 	smlad	ip, r1, r0, ip
 800dc76:	fb23 cc10 	smladx	ip, r3, r0, ip
 800dc7a:	f04f 0e01 	mov.w	lr, #1
 800dc7e:	fb22 f20e 	smuad	r2, r2, lr
 800dc82:	4825      	ldr	r0, [pc, #148]	; (800dd18 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800dc84:	fb21 2100 	smlad	r1, r1, r0, r2
 800dc88:	4a24      	ldr	r2, [pc, #144]	; (800dd1c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800dc8a:	fb23 1302 	smlad	r3, r3, r2, r1
 800dc8e:	4a24      	ldr	r2, [pc, #144]	; (800dd20 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800dc90:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800dc94:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800dc98:	eb04 0208 	add.w	r2, r4, r8
 800dc9c:	eba2 020a 	sub.w	r2, r2, sl
 800dca0:	46a2      	mov	sl, r4
 800dca2:	4610      	mov	r0, r2
 800dca4:	17d1      	asrs	r1, r2, #31
 800dca6:	e9cd 0100 	strd	r0, r1, [sp]
 800dcaa:	9904      	ldr	r1, [sp, #16]
 800dcac:	9801      	ldr	r0, [sp, #4]
 800dcae:	fba2 2301 	umull	r2, r3, r2, r1
 800dcb2:	fb01 3300 	mla	r3, r1, r0, r3
 800dcb6:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800dcba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800dcbe:	f143 0100 	adc.w	r1, r3, #0
 800dcc2:	9b03      	ldr	r3, [sp, #12]
 800dcc4:	02ca      	lsls	r2, r1, #11
 800dcc6:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800dcca:	2100      	movs	r1, #0
 800dccc:	fbc3 0102 	smlal	r0, r1, r3, r2
 800dcd0:	108b      	asrs	r3, r1, #2
 800dcd2:	f303 030f 	ssat	r3, #16, r3
 800dcd6:	f827 3b02 	strh.w	r3, [r7], #2
 800dcda:	9b05      	ldr	r3, [sp, #20]
 800dcdc:	429f      	cmp	r7, r3
 800dcde:	f47f af67 	bne.w	800dbb0 <D64_1CH_HTONS_VOL_HP+0x38>
 800dce2:	4673      	mov	r3, lr
 800dce4:	9a07      	ldr	r2, [sp, #28]
 800dce6:	6093      	str	r3, [r2, #8]
 800dce8:	2000      	movs	r0, #0
 800dcea:	9b06      	ldr	r3, [sp, #24]
 800dcec:	f8c2 c00c 	str.w	ip, [r2, #12]
 800dcf0:	61d6      	str	r6, [r2, #28]
 800dcf2:	6193      	str	r3, [r2, #24]
 800dcf4:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800dcf8:	b009      	add	sp, #36	; 0x24
 800dcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcfe:	bf00      	nop
 800dd00:	24000000 	.word	0x24000000
 800dd04:	001c0015 	.word	0x001c0015
 800dd08:	000f000a 	.word	0x000f000a
 800dd0c:	00060003 	.word	0x00060003
 800dd10:	0024002a 	.word	0x0024002a
 800dd14:	002e0030 	.word	0x002e0030
 800dd18:	00030006 	.word	0x00030006
 800dd1c:	000a000f 	.word	0x000a000f
 800dd20:	0015001c 	.word	0x0015001c

0800dd24 <D80_1CH_HTONS_VOL_HP>:
 800dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	6913      	ldr	r3, [r2, #16]
 800dd2a:	b089      	sub	sp, #36	; 0x24
 800dd2c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800dd2e:	9301      	str	r3, [sp, #4]
 800dd30:	9603      	str	r6, [sp, #12]
 800dd32:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800dd34:	6a16      	ldr	r6, [r2, #32]
 800dd36:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800dd3a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800dd3e:	9306      	str	r3, [sp, #24]
 800dd40:	9604      	str	r6, [sp, #16]
 800dd42:	69d3      	ldr	r3, [r2, #28]
 800dd44:	2c00      	cmp	r4, #0
 800dd46:	f000 80ce 	beq.w	800dee6 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800dd4a:	3902      	subs	r1, #2
 800dd4c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800dd50:	4e66      	ldr	r6, [pc, #408]	; (800deec <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800dd52:	469e      	mov	lr, r3
 800dd54:	9102      	str	r1, [sp, #8]
 800dd56:	46aa      	mov	sl, r5
 800dd58:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800dd5c:	9207      	str	r2, [sp, #28]
 800dd5e:	9105      	str	r1, [sp, #20]
 800dd60:	6883      	ldr	r3, [r0, #8]
 800dd62:	e9d0 4200 	ldrd	r4, r2, [r0]
 800dd66:	300a      	adds	r0, #10
 800dd68:	ba64      	rev16	r4, r4
 800dd6a:	ba52      	rev16	r2, r2
 800dd6c:	fa93 fb93 	rev16.w	fp, r3
 800dd70:	b2e5      	uxtb	r5, r4
 800dd72:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800dd76:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800dd7a:	0e24      	lsrs	r4, r4, #24
 800dd7c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800dd80:	b2d5      	uxtb	r5, r2
 800dd82:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800dd86:	44c6      	add	lr, r8
 800dd88:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800dd8c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800dd90:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800dd94:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800dd98:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800dd9c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800dda0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800dda4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dda8:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800ddac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800ddb0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800ddb4:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800ddb8:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800ddbc:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800ddc0:	0e12      	lsrs	r2, r2, #24
 800ddc2:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800ddc6:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800ddca:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800ddce:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800ddd2:	fa5f fb8b 	uxtb.w	fp, fp
 800ddd6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ddda:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800ddde:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800dde2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800dde6:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800ddea:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800ddee:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ddf2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800ddf6:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800ddfa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ddfe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800de02:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800de06:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800de0a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800de0e:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800de12:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800de16:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800de1a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800de1e:	4934      	ldr	r1, [pc, #208]	; (800def0 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800de20:	fb23 cc01 	smlad	ip, r3, r1, ip
 800de24:	4933      	ldr	r1, [pc, #204]	; (800def4 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800de26:	fb24 cc01 	smlad	ip, r4, r1, ip
 800de2a:	4933      	ldr	r1, [pc, #204]	; (800def8 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800de2c:	fb28 cc01 	smlad	ip, r8, r1, ip
 800de30:	4932      	ldr	r1, [pc, #200]	; (800defc <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800de32:	fb22 cc01 	smlad	ip, r2, r1, ip
 800de36:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800de3a:	fb2b c901 	smlad	r9, fp, r1, ip
 800de3e:	4930      	ldr	r1, [pc, #192]	; (800df00 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800de40:	fb23 7701 	smlad	r7, r3, r1, r7
 800de44:	492f      	ldr	r1, [pc, #188]	; (800df04 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800de46:	fb24 7701 	smlad	r7, r4, r1, r7
 800de4a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800de4e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800de52:	492d      	ldr	r1, [pc, #180]	; (800df08 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800de54:	fb22 cc01 	smlad	ip, r2, r1, ip
 800de58:	492c      	ldr	r1, [pc, #176]	; (800df0c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800de5a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800de5e:	2101      	movs	r1, #1
 800de60:	fb23 f301 	smuad	r3, r3, r1
 800de64:	492a      	ldr	r1, [pc, #168]	; (800df10 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800de66:	fb24 3401 	smlad	r4, r4, r1, r3
 800de6a:	492a      	ldr	r1, [pc, #168]	; (800df14 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800de6c:	fb28 4101 	smlad	r1, r8, r1, r4
 800de70:	4f29      	ldr	r7, [pc, #164]	; (800df18 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800de72:	fb22 1207 	smlad	r2, r2, r7, r1
 800de76:	4f29      	ldr	r7, [pc, #164]	; (800df1c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800de78:	fb2b 2707 	smlad	r7, fp, r7, r2
 800de7c:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800de80:	9b01      	ldr	r3, [sp, #4]
 800de82:	9c04      	ldr	r4, [sp, #16]
 800de84:	440b      	add	r3, r1
 800de86:	eba3 020a 	sub.w	r2, r3, sl
 800de8a:	468a      	mov	sl, r1
 800de8c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800de90:	fba2 2304 	umull	r2, r3, r2, r4
 800de94:	fb04 3309 	mla	r3, r4, r9, r3
 800de98:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800de9c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800dea0:	f143 0500 	adc.w	r5, r3, #0
 800dea4:	006b      	lsls	r3, r5, #1
 800dea6:	02aa      	lsls	r2, r5, #10
 800dea8:	2500      	movs	r5, #0
 800deaa:	9301      	str	r3, [sp, #4]
 800deac:	9b03      	ldr	r3, [sp, #12]
 800deae:	fbc3 4502 	smlal	r4, r5, r3, r2
 800deb2:	9a02      	ldr	r2, [sp, #8]
 800deb4:	10ab      	asrs	r3, r5, #2
 800deb6:	f303 030f 	ssat	r3, #16, r3
 800deba:	f822 3f02 	strh.w	r3, [r2, #2]!
 800debe:	9b05      	ldr	r3, [sp, #20]
 800dec0:	9202      	str	r2, [sp, #8]
 800dec2:	4298      	cmp	r0, r3
 800dec4:	f47f af4c 	bne.w	800dd60 <D80_1CH_HTONS_VOL_HP+0x3c>
 800dec8:	4673      	mov	r3, lr
 800deca:	9a07      	ldr	r2, [sp, #28]
 800decc:	61d3      	str	r3, [r2, #28]
 800dece:	2000      	movs	r0, #0
 800ded0:	9b01      	ldr	r3, [sp, #4]
 800ded2:	6097      	str	r7, [r2, #8]
 800ded4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ded8:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800dedc:	9b06      	ldr	r3, [sp, #24]
 800dede:	6193      	str	r3, [r2, #24]
 800dee0:	b009      	add	sp, #36	; 0x24
 800dee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee6:	4629      	mov	r1, r5
 800dee8:	e7f0      	b.n	800decc <D80_1CH_HTONS_VOL_HP+0x1a8>
 800deea:	bf00      	nop
 800deec:	24000000 	.word	0x24000000
 800def0:	002d0024 	.word	0x002d0024
 800def4:	001c0015 	.word	0x001c0015
 800def8:	000f000a 	.word	0x000f000a
 800defc:	00060003 	.word	0x00060003
 800df00:	0037003f 	.word	0x0037003f
 800df04:	00450049 	.word	0x00450049
 800df08:	00490045 	.word	0x00490045
 800df0c:	003f0037 	.word	0x003f0037
 800df10:	00030006 	.word	0x00030006
 800df14:	000a000f 	.word	0x000a000f
 800df18:	0015001c 	.word	0x0015001c
 800df1c:	0024002d 	.word	0x0024002d

0800df20 <D128_1CH_HTONS_VOL_HP>:
 800df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df24:	6914      	ldr	r4, [r2, #16]
 800df26:	b08d      	sub	sp, #52	; 0x34
 800df28:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800df2a:	9404      	str	r4, [sp, #16]
 800df2c:	6954      	ldr	r4, [r2, #20]
 800df2e:	920b      	str	r2, [sp, #44]	; 0x2c
 800df30:	9405      	str	r4, [sp, #20]
 800df32:	6994      	ldr	r4, [r2, #24]
 800df34:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800df38:	940a      	str	r4, [sp, #40]	; 0x28
 800df3a:	6894      	ldr	r4, [r2, #8]
 800df3c:	9403      	str	r4, [sp, #12]
 800df3e:	68d4      	ldr	r4, [r2, #12]
 800df40:	9402      	str	r4, [sp, #8]
 800df42:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800df44:	6a12      	ldr	r2, [r2, #32]
 800df46:	9407      	str	r4, [sp, #28]
 800df48:	9208      	str	r2, [sp, #32]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f000 812e 	beq.w	800e1ac <D128_1CH_HTONS_VOL_HP+0x28c>
 800df50:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800df54:	f100 0b10 	add.w	fp, r0, #16
 800df58:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800e1ec <D128_1CH_HTONS_VOL_HP+0x2cc>
 800df5c:	9106      	str	r1, [sp, #24]
 800df5e:	9309      	str	r3, [sp, #36]	; 0x24
 800df60:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800df64:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800df68:	ba40      	rev16	r0, r0
 800df6a:	ba52      	rev16	r2, r2
 800df6c:	ba5b      	rev16	r3, r3
 800df6e:	ba76      	rev16	r6, r6
 800df70:	b2c5      	uxtb	r5, r0
 800df72:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800df76:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800df7a:	0e00      	lsrs	r0, r0, #24
 800df7c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800df80:	b2d5      	uxtb	r5, r2
 800df82:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800df86:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800df8a:	44bc      	add	ip, r7
 800df8c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800df90:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800df94:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800df98:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800df9c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800dfa0:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800dfa4:	0e12      	lsrs	r2, r2, #24
 800dfa6:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800dfaa:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800dfae:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800dfb2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800dfb6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800dfba:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800dfbe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800dfc8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800dfcc:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800dfd0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800dfd4:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800dfd8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800dfdc:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800dfe0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800dfe4:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800dfe8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dfec:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800dff0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800dff4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800dff8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800dffc:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800e000:	0e1b      	lsrs	r3, r3, #24
 800e002:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800e006:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e00a:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800e00e:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800e012:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800e016:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e01a:	b2f3      	uxtb	r3, r6
 800e01c:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800e020:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800e024:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e028:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800e02c:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800e030:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800e034:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e038:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e03c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800e040:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800e044:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800e048:	0e36      	lsrs	r6, r6, #24
 800e04a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800e04e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e052:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800e056:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e05a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800e05e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e062:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800e066:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800e06a:	9101      	str	r1, [sp, #4]
 800e06c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800e070:	9b02      	ldr	r3, [sp, #8]
 800e072:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800e076:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e07a:	4611      	mov	r1, r2
 800e07c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800e080:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800e084:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800e088:	4a49      	ldr	r2, [pc, #292]	; (800e1b0 <D128_1CH_HTONS_VOL_HP+0x290>)
 800e08a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800e08e:	4b49      	ldr	r3, [pc, #292]	; (800e1b4 <D128_1CH_HTONS_VOL_HP+0x294>)
 800e090:	fb27 2203 	smlad	r2, r7, r3, r2
 800e094:	4b48      	ldr	r3, [pc, #288]	; (800e1b8 <D128_1CH_HTONS_VOL_HP+0x298>)
 800e096:	fb25 2203 	smlad	r2, r5, r3, r2
 800e09a:	4b48      	ldr	r3, [pc, #288]	; (800e1bc <D128_1CH_HTONS_VOL_HP+0x29c>)
 800e09c:	fb24 2203 	smlad	r2, r4, r3, r2
 800e0a0:	4b47      	ldr	r3, [pc, #284]	; (800e1c0 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800e0a2:	fb20 2803 	smlad	r8, r0, r3, r2
 800e0a6:	4b47      	ldr	r3, [pc, #284]	; (800e1c4 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800e0a8:	9a01      	ldr	r2, [sp, #4]
 800e0aa:	fb22 8203 	smlad	r2, r2, r3, r8
 800e0ae:	4b46      	ldr	r3, [pc, #280]	; (800e1c8 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800e0b0:	9102      	str	r1, [sp, #8]
 800e0b2:	fb21 2203 	smlad	r2, r1, r3, r2
 800e0b6:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800e0ba:	fb26 2308 	smlad	r3, r6, r8, r2
 800e0be:	4619      	mov	r1, r3
 800e0c0:	9a03      	ldr	r2, [sp, #12]
 800e0c2:	4b42      	ldr	r3, [pc, #264]	; (800e1cc <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800e0c4:	fb2e 2803 	smlad	r8, lr, r3, r2
 800e0c8:	4b41      	ldr	r3, [pc, #260]	; (800e1d0 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800e0ca:	fb27 8a03 	smlad	sl, r7, r3, r8
 800e0ce:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800e1f0 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800e0d2:	fb25 a808 	smlad	r8, r5, r8, sl
 800e0d6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800e1f4 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800e0da:	fb24 880a 	smlad	r8, r4, sl, r8
 800e0de:	f8df a118 	ldr.w	sl, [pc, #280]	; 800e1f8 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800e0e2:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800e0e6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800e1fc <D128_1CH_HTONS_VOL_HP+0x2dc>
 800e0ea:	9b01      	ldr	r3, [sp, #4]
 800e0ec:	fb23 aa08 	smlad	sl, r3, r8, sl
 800e0f0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800e200 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800e0f4:	9a02      	ldr	r2, [sp, #8]
 800e0f6:	fb22 a808 	smlad	r8, r2, r8, sl
 800e0fa:	f8df a108 	ldr.w	sl, [pc, #264]	; 800e204 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800e0fe:	fb26 830a 	smlad	r3, r6, sl, r8
 800e102:	f04f 0801 	mov.w	r8, #1
 800e106:	9302      	str	r3, [sp, #8]
 800e108:	fb2e fe08 	smuad	lr, lr, r8
 800e10c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800e208 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800e110:	fb27 ee08 	smlad	lr, r7, r8, lr
 800e114:	4f2f      	ldr	r7, [pc, #188]	; (800e1d4 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800e116:	fb25 ee07 	smlad	lr, r5, r7, lr
 800e11a:	4f2f      	ldr	r7, [pc, #188]	; (800e1d8 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800e11c:	fb24 ee07 	smlad	lr, r4, r7, lr
 800e120:	4f2e      	ldr	r7, [pc, #184]	; (800e1dc <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800e122:	fb20 ee07 	smlad	lr, r0, r7, lr
 800e126:	4f2e      	ldr	r7, [pc, #184]	; (800e1e0 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800e128:	9b01      	ldr	r3, [sp, #4]
 800e12a:	fb23 ee07 	smlad	lr, r3, r7, lr
 800e12e:	4f2d      	ldr	r7, [pc, #180]	; (800e1e4 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800e130:	fb22 e707 	smlad	r7, r2, r7, lr
 800e134:	4b2c      	ldr	r3, [pc, #176]	; (800e1e8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800e136:	fb26 7303 	smlad	r3, r6, r3, r7
 800e13a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800e13e:	9303      	str	r3, [sp, #12]
 800e140:	9b04      	ldr	r3, [sp, #16]
 800e142:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e146:	9f08      	ldr	r7, [sp, #32]
 800e148:	2100      	movs	r1, #0
 800e14a:	4433      	add	r3, r6
 800e14c:	f10b 0b10 	add.w	fp, fp, #16
 800e150:	461a      	mov	r2, r3
 800e152:	9b05      	ldr	r3, [sp, #20]
 800e154:	9605      	str	r6, [sp, #20]
 800e156:	1ad2      	subs	r2, r2, r3
 800e158:	17d5      	asrs	r5, r2, #31
 800e15a:	fba2 2307 	umull	r2, r3, r2, r7
 800e15e:	1814      	adds	r4, r2, r0
 800e160:	fb07 3305 	mla	r3, r7, r5, r3
 800e164:	eb43 0501 	adc.w	r5, r3, r1
 800e168:	006b      	lsls	r3, r5, #1
 800e16a:	022a      	lsls	r2, r5, #8
 800e16c:	9304      	str	r3, [sp, #16]
 800e16e:	9b07      	ldr	r3, [sp, #28]
 800e170:	fbc3 0102 	smlal	r0, r1, r3, r2
 800e174:	9a06      	ldr	r2, [sp, #24]
 800e176:	108b      	asrs	r3, r1, #2
 800e178:	f303 030f 	ssat	r3, #16, r3
 800e17c:	f822 3b02 	strh.w	r3, [r2], #2
 800e180:	4613      	mov	r3, r2
 800e182:	9206      	str	r2, [sp, #24]
 800e184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e186:	4293      	cmp	r3, r2
 800e188:	f47f aeea 	bne.w	800df60 <D128_1CH_HTONS_VOL_HP+0x40>
 800e18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e18e:	2000      	movs	r0, #0
 800e190:	9903      	ldr	r1, [sp, #12]
 800e192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e194:	6099      	str	r1, [r3, #8]
 800e196:	9902      	ldr	r1, [sp, #8]
 800e198:	f8c3 c01c 	str.w	ip, [r3, #28]
 800e19c:	60d9      	str	r1, [r3, #12]
 800e19e:	9904      	ldr	r1, [sp, #16]
 800e1a0:	619a      	str	r2, [r3, #24]
 800e1a2:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800e1a6:	b00d      	add	sp, #52	; 0x34
 800e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ac:	9e05      	ldr	r6, [sp, #20]
 800e1ae:	e7ed      	b.n	800e18c <D128_1CH_HTONS_VOL_HP+0x26c>
 800e1b0:	00780069 	.word	0x00780069
 800e1b4:	005b004e 	.word	0x005b004e
 800e1b8:	00420037 	.word	0x00420037
 800e1bc:	002d0024 	.word	0x002d0024
 800e1c0:	001c0015 	.word	0x001c0015
 800e1c4:	000f000a 	.word	0x000f000a
 800e1c8:	00060003 	.word	0x00060003
 800e1cc:	00880096 	.word	0x00880096
 800e1d0:	00a200ac 	.word	0x00a200ac
 800e1d4:	000a000f 	.word	0x000a000f
 800e1d8:	0015001c 	.word	0x0015001c
 800e1dc:	0024002d 	.word	0x0024002d
 800e1e0:	00370042 	.word	0x00370042
 800e1e4:	004e005b 	.word	0x004e005b
 800e1e8:	00690078 	.word	0x00690078
 800e1ec:	24000000 	.word	0x24000000
 800e1f0:	00b400ba 	.word	0x00b400ba
 800e1f4:	00be00c0 	.word	0x00be00c0
 800e1f8:	00c000be 	.word	0x00c000be
 800e1fc:	00ba00b4 	.word	0x00ba00b4
 800e200:	00ac00a2 	.word	0x00ac00a2
 800e204:	00960088 	.word	0x00960088
 800e208:	00030006 	.word	0x00030006

0800e20c <PDM_Filter_Init>:
 800e20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20e:	2240      	movs	r2, #64	; 0x40
 800e210:	2100      	movs	r1, #0
 800e212:	4604      	mov	r4, r0
 800e214:	300c      	adds	r0, #12
 800e216:	f000 fa07 	bl	800e628 <memset>
 800e21a:	4a56      	ldr	r2, [pc, #344]	; (800e374 <PDM_Filter_Init+0x168>)
 800e21c:	4856      	ldr	r0, [pc, #344]	; (800e378 <PDM_Filter_Init+0x16c>)
 800e21e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800e222:	6813      	ldr	r3, [r2, #0]
 800e224:	f24c 2540 	movw	r5, #49728	; 0xc240
 800e228:	f023 0301 	bic.w	r3, r3, #1
 800e22c:	6013      	str	r3, [r2, #0]
 800e22e:	6803      	ldr	r3, [r0, #0]
 800e230:	400b      	ands	r3, r1
 800e232:	42ab      	cmp	r3, r5
 800e234:	d040      	beq.n	800e2b8 <PDM_Filter_Init+0xac>
 800e236:	6803      	ldr	r3, [r0, #0]
 800e238:	f24c 2270 	movw	r2, #49776	; 0xc270
 800e23c:	4019      	ands	r1, r3
 800e23e:	4291      	cmp	r1, r2
 800e240:	d03a      	beq.n	800e2b8 <PDM_Filter_Init+0xac>
 800e242:	4b4e      	ldr	r3, [pc, #312]	; (800e37c <PDM_Filter_Init+0x170>)
 800e244:	2101      	movs	r1, #1
 800e246:	461a      	mov	r2, r3
 800e248:	6019      	str	r1, [r3, #0]
 800e24a:	6813      	ldr	r3, [r2, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d1fc      	bne.n	800e24a <PDM_Filter_Init+0x3e>
 800e250:	4b4b      	ldr	r3, [pc, #300]	; (800e380 <PDM_Filter_Init+0x174>)
 800e252:	494c      	ldr	r1, [pc, #304]	; (800e384 <PDM_Filter_Init+0x178>)
 800e254:	4a4c      	ldr	r2, [pc, #304]	; (800e388 <PDM_Filter_Init+0x17c>)
 800e256:	6019      	str	r1, [r3, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	8820      	ldrh	r0, [r4, #0]
 800e25c:	4293      	cmp	r3, r2
 800e25e:	8961      	ldrh	r1, [r4, #10]
 800e260:	f04f 0300 	mov.w	r3, #0
 800e264:	8922      	ldrh	r2, [r4, #8]
 800e266:	bf14      	ite	ne
 800e268:	2500      	movne	r5, #0
 800e26a:	4d47      	ldreq	r5, [pc, #284]	; (800e388 <PDM_Filter_Init+0x17c>)
 800e26c:	2801      	cmp	r0, #1
 800e26e:	61a3      	str	r3, [r4, #24]
 800e270:	6465      	str	r5, [r4, #68]	; 0x44
 800e272:	60e3      	str	r3, [r4, #12]
 800e274:	6263      	str	r3, [r4, #36]	; 0x24
 800e276:	6423      	str	r3, [r4, #64]	; 0x40
 800e278:	86a1      	strh	r1, [r4, #52]	; 0x34
 800e27a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800e27c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800e280:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e284:	d936      	bls.n	800e2f4 <PDM_Filter_Init+0xe8>
 800e286:	2003      	movs	r0, #3
 800e288:	2302      	movs	r3, #2
 800e28a:	8862      	ldrh	r2, [r4, #2]
 800e28c:	2a01      	cmp	r2, #1
 800e28e:	d92e      	bls.n	800e2ee <PDM_Filter_Init+0xe2>
 800e290:	2140      	movs	r1, #64	; 0x40
 800e292:	2300      	movs	r3, #0
 800e294:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e296:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800e29a:	d101      	bne.n	800e2a0 <PDM_Filter_Init+0x94>
 800e29c:	460b      	mov	r3, r1
 800e29e:	6421      	str	r1, [r4, #64]	; 0x40
 800e2a0:	6862      	ldr	r2, [r4, #4]
 800e2a2:	b11a      	cbz	r2, 800e2ac <PDM_Filter_Init+0xa0>
 800e2a4:	f043 0310 	orr.w	r3, r3, #16
 800e2a8:	62e2      	str	r2, [r4, #44]	; 0x2c
 800e2aa:	6423      	str	r3, [r4, #64]	; 0x40
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	8722      	strh	r2, [r4, #56]	; 0x38
 800e2b0:	b908      	cbnz	r0, 800e2b6 <PDM_Filter_Init+0xaa>
 800e2b2:	3380      	adds	r3, #128	; 0x80
 800e2b4:	6423      	str	r3, [r4, #64]	; 0x40
 800e2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2b8:	4b34      	ldr	r3, [pc, #208]	; (800e38c <PDM_Filter_Init+0x180>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d1c0      	bne.n	800e242 <PDM_Filter_Init+0x36>
 800e2c0:	4a33      	ldr	r2, [pc, #204]	; (800e390 <PDM_Filter_Init+0x184>)
 800e2c2:	6813      	ldr	r3, [r2, #0]
 800e2c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e2c8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e2cc:	d006      	beq.n	800e2dc <PDM_Filter_Init+0xd0>
 800e2ce:	6813      	ldr	r3, [r2, #0]
 800e2d0:	f240 4283 	movw	r2, #1155	; 0x483
 800e2d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d1b2      	bne.n	800e242 <PDM_Filter_Init+0x36>
 800e2dc:	4b2d      	ldr	r3, [pc, #180]	; (800e394 <PDM_Filter_Init+0x188>)
 800e2de:	2101      	movs	r1, #1
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	6019      	str	r1, [r3, #0]
 800e2e4:	6813      	ldr	r3, [r2, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1fc      	bne.n	800e2e4 <PDM_Filter_Init+0xd8>
 800e2ea:	4b2b      	ldr	r3, [pc, #172]	; (800e398 <PDM_Filter_Init+0x18c>)
 800e2ec:	e7b1      	b.n	800e252 <PDM_Filter_Init+0x46>
 800e2ee:	d03a      	beq.n	800e366 <PDM_Filter_Init+0x15a>
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	e7cd      	b.n	800e290 <PDM_Filter_Init+0x84>
 800e2f4:	4d29      	ldr	r5, [pc, #164]	; (800e39c <PDM_Filter_Init+0x190>)
 800e2f6:	782a      	ldrb	r2, [r5, #0]
 800e2f8:	d01b      	beq.n	800e332 <PDM_Filter_Init+0x126>
 800e2fa:	2a01      	cmp	r2, #1
 800e2fc:	d001      	beq.n	800e302 <PDM_Filter_Init+0xf6>
 800e2fe:	2001      	movs	r0, #1
 800e300:	e7c3      	b.n	800e28a <PDM_Filter_Init+0x7e>
 800e302:	4927      	ldr	r1, [pc, #156]	; (800e3a0 <PDM_Filter_Init+0x194>)
 800e304:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800e3a8 <PDM_Filter_Init+0x19c>
 800e308:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800e30c:	4e25      	ldr	r6, [pc, #148]	; (800e3a4 <PDM_Filter_Init+0x198>)
 800e30e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e312:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800e316:	ea02 0006 	and.w	r0, r2, r6
 800e31a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e31e:	428f      	cmp	r7, r1
 800e320:	ea43 0300 	orr.w	r3, r3, r0
 800e324:	4413      	add	r3, r2
 800e326:	600b      	str	r3, [r1, #0]
 800e328:	d1f1      	bne.n	800e30e <PDM_Filter_Init+0x102>
 800e32a:	2300      	movs	r3, #0
 800e32c:	2001      	movs	r0, #1
 800e32e:	702b      	strb	r3, [r5, #0]
 800e330:	e7ab      	b.n	800e28a <PDM_Filter_Init+0x7e>
 800e332:	2a00      	cmp	r2, #0
 800e334:	d1a9      	bne.n	800e28a <PDM_Filter_Init+0x7e>
 800e336:	491a      	ldr	r1, [pc, #104]	; (800e3a0 <PDM_Filter_Init+0x194>)
 800e338:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800e3a8 <PDM_Filter_Init+0x19c>
 800e33c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800e340:	4e18      	ldr	r6, [pc, #96]	; (800e3a4 <PDM_Filter_Init+0x198>)
 800e342:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e346:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800e34a:	ea02 0006 	and.w	r0, r2, r6
 800e34e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e352:	428f      	cmp	r7, r1
 800e354:	ea43 0300 	orr.w	r3, r3, r0
 800e358:	4413      	add	r3, r2
 800e35a:	600b      	str	r3, [r1, #0]
 800e35c:	d1f1      	bne.n	800e342 <PDM_Filter_Init+0x136>
 800e35e:	2001      	movs	r0, #1
 800e360:	2300      	movs	r3, #0
 800e362:	7028      	strb	r0, [r5, #0]
 800e364:	e791      	b.n	800e28a <PDM_Filter_Init+0x7e>
 800e366:	2220      	movs	r2, #32
 800e368:	4618      	mov	r0, r3
 800e36a:	2160      	movs	r1, #96	; 0x60
 800e36c:	6422      	str	r2, [r4, #64]	; 0x40
 800e36e:	4613      	mov	r3, r2
 800e370:	e790      	b.n	800e294 <PDM_Filter_Init+0x88>
 800e372:	bf00      	nop
 800e374:	e0002000 	.word	0xe0002000
 800e378:	e000ed00 	.word	0xe000ed00
 800e37c:	40023008 	.word	0x40023008
 800e380:	40023000 	.word	0x40023000
 800e384:	f407a5c2 	.word	0xf407a5c2
 800e388:	b5e8b5cd 	.word	0xb5e8b5cd
 800e38c:	e0042000 	.word	0xe0042000
 800e390:	5c001000 	.word	0x5c001000
 800e394:	58024c08 	.word	0x58024c08
 800e398:	58024c00 	.word	0x58024c00
 800e39c:	240004dc 	.word	0x240004dc
 800e3a0:	23fffffc 	.word	0x23fffffc
 800e3a4:	000ffc00 	.word	0x000ffc00
 800e3a8:	3ff00000 	.word	0x3ff00000

0800e3ac <PDM_Filter_setConfig>:
 800e3ac:	4b67      	ldr	r3, [pc, #412]	; (800e54c <PDM_Filter_setConfig+0x1a0>)
 800e3ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d128      	bne.n	800e406 <PDM_Filter_setConfig+0x5a>
 800e3b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e3b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3b8:	880e      	ldrh	r6, [r1, #0]
 800e3ba:	460d      	mov	r5, r1
 800e3bc:	4604      	mov	r4, r0
 800e3be:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800e3c2:	1e73      	subs	r3, r6, #1
 800e3c4:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800e3c8:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800e3cc:	2b06      	cmp	r3, #6
 800e3ce:	ed2d 8b02 	vpush	{d8}
 800e3d2:	6421      	str	r1, [r4, #64]	; 0x40
 800e3d4:	b083      	sub	sp, #12
 800e3d6:	d820      	bhi.n	800e41a <PDM_Filter_setConfig+0x6e>
 800e3d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e3da:	42b3      	cmp	r3, r6
 800e3dc:	d03d      	beq.n	800e45a <PDM_Filter_setConfig+0xae>
 800e3de:	4b5c      	ldr	r3, [pc, #368]	; (800e550 <PDM_Filter_setConfig+0x1a4>)
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	4333      	orrs	r3, r6
 800e3e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e3e8:	6423      	str	r3, [r4, #64]	; 0x40
 800e3ea:	f003 030f 	and.w	r3, r3, #15
 800e3ee:	2a70      	cmp	r2, #112	; 0x70
 800e3f0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e3f4:	d009      	beq.n	800e40a <PDM_Filter_setConfig+0x5e>
 800e3f6:	2b06      	cmp	r3, #6
 800e3f8:	d824      	bhi.n	800e444 <PDM_Filter_setConfig+0x98>
 800e3fa:	e8df f003 	tbb	[pc, r3]
 800e3fe:	878a      	.short	0x878a
 800e400:	7b7e8184 	.word	0x7b7e8184
 800e404:	78          	.byte	0x78
 800e405:	00          	.byte	0x00
 800e406:	2004      	movs	r0, #4
 800e408:	4770      	bx	lr
 800e40a:	2b06      	cmp	r3, #6
 800e40c:	d81a      	bhi.n	800e444 <PDM_Filter_setConfig+0x98>
 800e40e:	e8df f003 	tbb	[pc, r3]
 800e412:	8f92      	.short	0x8f92
 800e414:	8617898c 	.word	0x8617898c
 800e418:	83          	.byte	0x83
 800e419:	00          	.byte	0x00
 800e41a:	4287      	cmp	r7, r0
 800e41c:	f000 808e 	beq.w	800e53c <PDM_Filter_setConfig+0x190>
 800e420:	f117 0f0c 	cmn.w	r7, #12
 800e424:	f04f 0008 	mov.w	r0, #8
 800e428:	da11      	bge.n	800e44e <PDM_Filter_setConfig+0xa2>
 800e42a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800e42e:	3040      	adds	r0, #64	; 0x40
 800e430:	80ab      	strh	r3, [r5, #4]
 800e432:	886b      	ldrh	r3, [r5, #2]
 800e434:	8626      	strh	r6, [r4, #48]	; 0x30
 800e436:	8663      	strh	r3, [r4, #50]	; 0x32
 800e438:	b003      	add	sp, #12
 800e43a:	ecbd 8b02 	vpop	{d8}
 800e43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e440:	4b44      	ldr	r3, [pc, #272]	; (800e554 <PDM_Filter_setConfig+0x1a8>)
 800e442:	64a3      	str	r3, [r4, #72]	; 0x48
 800e444:	f117 0f0c 	cmn.w	r7, #12
 800e448:	f04f 0000 	mov.w	r0, #0
 800e44c:	dbed      	blt.n	800e42a <PDM_Filter_setConfig+0x7e>
 800e44e:	2f33      	cmp	r7, #51	; 0x33
 800e450:	dd10      	ble.n	800e474 <PDM_Filter_setConfig+0xc8>
 800e452:	2333      	movs	r3, #51	; 0x33
 800e454:	3040      	adds	r0, #64	; 0x40
 800e456:	80ab      	strh	r3, [r5, #4]
 800e458:	e7eb      	b.n	800e432 <PDM_Filter_setConfig+0x86>
 800e45a:	4287      	cmp	r7, r0
 800e45c:	d1f2      	bne.n	800e444 <PDM_Filter_setConfig+0x98>
 800e45e:	886b      	ldrh	r3, [r5, #2]
 800e460:	8663      	strh	r3, [r4, #50]	; 0x32
 800e462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e464:	2000      	movs	r0, #0
 800e466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e46a:	6423      	str	r3, [r4, #64]	; 0x40
 800e46c:	b003      	add	sp, #12
 800e46e:	ecbd 8b02 	vpop	{d8}
 800e472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e476:	f003 030f 	and.w	r3, r3, #15
 800e47a:	3b01      	subs	r3, #1
 800e47c:	2b06      	cmp	r3, #6
 800e47e:	d831      	bhi.n	800e4e4 <PDM_Filter_setConfig+0x138>
 800e480:	4a35      	ldr	r2, [pc, #212]	; (800e558 <PDM_Filter_setConfig+0x1ac>)
 800e482:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e486:	eddf 0a35 	vldr	s1, [pc, #212]	; 800e55c <PDM_Filter_setConfig+0x1b0>
 800e48a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e48e:	9001      	str	r0, [sp, #4]
 800e490:	edd3 7a07 	vldr	s15, [r3, #28]
 800e494:	ed93 8a00 	vldr	s16, [r3]
 800e498:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e49c:	f000 f8e4 	bl	800e668 <powf>
 800e4a0:	eef0 8a40 	vmov.f32	s17, s0
 800e4a4:	9801      	ldr	r0, [sp, #4]
 800e4a6:	ee07 7a90 	vmov	s15, r7
 800e4aa:	ee28 8a28 	vmul.f32	s16, s16, s17
 800e4ae:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e4b2:	9001      	str	r0, [sp, #4]
 800e4b4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800e4b8:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e560 <PDM_Filter_setConfig+0x1b4>
 800e4bc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e4c0:	f000 f8d2 	bl	800e668 <powf>
 800e4c4:	ee28 8a00 	vmul.f32	s16, s16, s0
 800e4c8:	886b      	ldrh	r3, [r5, #2]
 800e4ca:	9801      	ldr	r0, [sp, #4]
 800e4cc:	feb8 8a48 	vrinta.f32	s16, s16
 800e4d0:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800e4d4:	8727      	strh	r7, [r4, #56]	; 0x38
 800e4d6:	8663      	strh	r3, [r4, #50]	; 0x32
 800e4d8:	8626      	strh	r6, [r4, #48]	; 0x30
 800e4da:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	d0bf      	beq.n	800e462 <PDM_Filter_setConfig+0xb6>
 800e4e2:	e7a9      	b.n	800e438 <PDM_Filter_setConfig+0x8c>
 800e4e4:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800e564 <PDM_Filter_setConfig+0x1b8>
 800e4e8:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800e568 <PDM_Filter_setConfig+0x1bc>
 800e4ec:	e7db      	b.n	800e4a6 <PDM_Filter_setConfig+0xfa>
 800e4ee:	4b1f      	ldr	r3, [pc, #124]	; (800e56c <PDM_Filter_setConfig+0x1c0>)
 800e4f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e4f2:	e7a7      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e4f4:	4b1e      	ldr	r3, [pc, #120]	; (800e570 <PDM_Filter_setConfig+0x1c4>)
 800e4f6:	64a3      	str	r3, [r4, #72]	; 0x48
 800e4f8:	e7a4      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e4fa:	4b1e      	ldr	r3, [pc, #120]	; (800e574 <PDM_Filter_setConfig+0x1c8>)
 800e4fc:	64a3      	str	r3, [r4, #72]	; 0x48
 800e4fe:	e7a1      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e500:	4b1d      	ldr	r3, [pc, #116]	; (800e578 <PDM_Filter_setConfig+0x1cc>)
 800e502:	64a3      	str	r3, [r4, #72]	; 0x48
 800e504:	e79e      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e506:	4b1d      	ldr	r3, [pc, #116]	; (800e57c <PDM_Filter_setConfig+0x1d0>)
 800e508:	64a3      	str	r3, [r4, #72]	; 0x48
 800e50a:	e79b      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e50c:	4b1c      	ldr	r3, [pc, #112]	; (800e580 <PDM_Filter_setConfig+0x1d4>)
 800e50e:	64a3      	str	r3, [r4, #72]	; 0x48
 800e510:	e798      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e512:	4b1c      	ldr	r3, [pc, #112]	; (800e584 <PDM_Filter_setConfig+0x1d8>)
 800e514:	64a3      	str	r3, [r4, #72]	; 0x48
 800e516:	e795      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e518:	4b1b      	ldr	r3, [pc, #108]	; (800e588 <PDM_Filter_setConfig+0x1dc>)
 800e51a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e51c:	e792      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e51e:	4b1b      	ldr	r3, [pc, #108]	; (800e58c <PDM_Filter_setConfig+0x1e0>)
 800e520:	64a3      	str	r3, [r4, #72]	; 0x48
 800e522:	e78f      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e524:	4b1a      	ldr	r3, [pc, #104]	; (800e590 <PDM_Filter_setConfig+0x1e4>)
 800e526:	64a3      	str	r3, [r4, #72]	; 0x48
 800e528:	e78c      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e52a:	4b1a      	ldr	r3, [pc, #104]	; (800e594 <PDM_Filter_setConfig+0x1e8>)
 800e52c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e52e:	e789      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e530:	4b19      	ldr	r3, [pc, #100]	; (800e598 <PDM_Filter_setConfig+0x1ec>)
 800e532:	64a3      	str	r3, [r4, #72]	; 0x48
 800e534:	e786      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e536:	4b19      	ldr	r3, [pc, #100]	; (800e59c <PDM_Filter_setConfig+0x1f0>)
 800e538:	64a3      	str	r3, [r4, #72]	; 0x48
 800e53a:	e783      	b.n	800e444 <PDM_Filter_setConfig+0x98>
 800e53c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e53e:	42b3      	cmp	r3, r6
 800e540:	f47f af6e 	bne.w	800e420 <PDM_Filter_setConfig+0x74>
 800e544:	886b      	ldrh	r3, [r5, #2]
 800e546:	2008      	movs	r0, #8
 800e548:	8663      	strh	r3, [r4, #50]	; 0x32
 800e54a:	e775      	b.n	800e438 <PDM_Filter_setConfig+0x8c>
 800e54c:	b5e8b5cd 	.word	0xb5e8b5cd
 800e550:	fffffef0 	.word	0xfffffef0
 800e554:	0800d6c5 	.word	0x0800d6c5
 800e558:	0800e9d8 	.word	0x0800e9d8
 800e55c:	42000000 	.word	0x42000000
 800e560:	3d4ccccd 	.word	0x3d4ccccd
 800e564:	4f800000 	.word	0x4f800000
 800e568:	00000000 	.word	0x00000000
 800e56c:	0800cad1 	.word	0x0800cad1
 800e570:	0800c959 	.word	0x0800c959
 800e574:	0800c849 	.word	0x0800c849
 800e578:	0800d30d 	.word	0x0800d30d
 800e57c:	0800d075 	.word	0x0800d075
 800e580:	0800ce3d 	.word	0x0800ce3d
 800e584:	0800cc59 	.word	0x0800cc59
 800e588:	0800d8e1 	.word	0x0800d8e1
 800e58c:	0800d7a5 	.word	0x0800d7a5
 800e590:	0800df21 	.word	0x0800df21
 800e594:	0800dd25 	.word	0x0800dd25
 800e598:	0800db79 	.word	0x0800db79
 800e59c:	0800da0d 	.word	0x0800da0d

0800e5a0 <PDM_Filter>:
 800e5a0:	b410      	push	{r4}
 800e5a2:	4b0b      	ldr	r3, [pc, #44]	; (800e5d0 <PDM_Filter+0x30>)
 800e5a4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800e5a6:	429c      	cmp	r4, r3
 800e5a8:	d107      	bne.n	800e5ba <PDM_Filter+0x1a>
 800e5aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e5ac:	05dc      	lsls	r4, r3, #23
 800e5ae:	d508      	bpl.n	800e5c2 <PDM_Filter+0x22>
 800e5b0:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800e5b2:	320c      	adds	r2, #12
 800e5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5b8:	4718      	bx	r3
 800e5ba:	2004      	movs	r0, #4
 800e5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5c0:	4770      	bx	lr
 800e5c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e5c6:	bf14      	ite	ne
 800e5c8:	2020      	movne	r0, #32
 800e5ca:	2030      	moveq	r0, #48	; 0x30
 800e5cc:	e7f6      	b.n	800e5bc <PDM_Filter+0x1c>
 800e5ce:	bf00      	nop
 800e5d0:	b5e8b5cd 	.word	0xb5e8b5cd

0800e5d4 <__errno>:
 800e5d4:	4b01      	ldr	r3, [pc, #4]	; (800e5dc <__errno+0x8>)
 800e5d6:	6818      	ldr	r0, [r3, #0]
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop
 800e5dc:	2400045c 	.word	0x2400045c

0800e5e0 <__libc_init_array>:
 800e5e0:	b570      	push	{r4, r5, r6, lr}
 800e5e2:	4d0d      	ldr	r5, [pc, #52]	; (800e618 <__libc_init_array+0x38>)
 800e5e4:	4c0d      	ldr	r4, [pc, #52]	; (800e61c <__libc_init_array+0x3c>)
 800e5e6:	1b64      	subs	r4, r4, r5
 800e5e8:	10a4      	asrs	r4, r4, #2
 800e5ea:	2600      	movs	r6, #0
 800e5ec:	42a6      	cmp	r6, r4
 800e5ee:	d109      	bne.n	800e604 <__libc_init_array+0x24>
 800e5f0:	4d0b      	ldr	r5, [pc, #44]	; (800e620 <__libc_init_array+0x40>)
 800e5f2:	4c0c      	ldr	r4, [pc, #48]	; (800e624 <__libc_init_array+0x44>)
 800e5f4:	f000 f9e4 	bl	800e9c0 <_init>
 800e5f8:	1b64      	subs	r4, r4, r5
 800e5fa:	10a4      	asrs	r4, r4, #2
 800e5fc:	2600      	movs	r6, #0
 800e5fe:	42a6      	cmp	r6, r4
 800e600:	d105      	bne.n	800e60e <__libc_init_array+0x2e>
 800e602:	bd70      	pop	{r4, r5, r6, pc}
 800e604:	f855 3b04 	ldr.w	r3, [r5], #4
 800e608:	4798      	blx	r3
 800e60a:	3601      	adds	r6, #1
 800e60c:	e7ee      	b.n	800e5ec <__libc_init_array+0xc>
 800e60e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e612:	4798      	blx	r3
 800e614:	3601      	adds	r6, #1
 800e616:	e7f2      	b.n	800e5fe <__libc_init_array+0x1e>
 800e618:	0800ed50 	.word	0x0800ed50
 800e61c:	0800ed50 	.word	0x0800ed50
 800e620:	0800ed50 	.word	0x0800ed50
 800e624:	0800ed54 	.word	0x0800ed54

0800e628 <memset>:
 800e628:	4402      	add	r2, r0
 800e62a:	4603      	mov	r3, r0
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d100      	bne.n	800e632 <memset+0xa>
 800e630:	4770      	bx	lr
 800e632:	f803 1b01 	strb.w	r1, [r3], #1
 800e636:	e7f9      	b.n	800e62c <memset+0x4>

0800e638 <checkint>:
 800e638:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e63c:	2b7e      	cmp	r3, #126	; 0x7e
 800e63e:	dd10      	ble.n	800e662 <checkint+0x2a>
 800e640:	2b96      	cmp	r3, #150	; 0x96
 800e642:	dc0c      	bgt.n	800e65e <checkint+0x26>
 800e644:	2201      	movs	r2, #1
 800e646:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e64a:	fa02 f303 	lsl.w	r3, r2, r3
 800e64e:	1e5a      	subs	r2, r3, #1
 800e650:	4202      	tst	r2, r0
 800e652:	d106      	bne.n	800e662 <checkint+0x2a>
 800e654:	4203      	tst	r3, r0
 800e656:	bf0c      	ite	eq
 800e658:	2002      	moveq	r0, #2
 800e65a:	2001      	movne	r0, #1
 800e65c:	4770      	bx	lr
 800e65e:	2002      	movs	r0, #2
 800e660:	4770      	bx	lr
 800e662:	2000      	movs	r0, #0
 800e664:	4770      	bx	lr
	...

0800e668 <powf>:
 800e668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e66a:	ee10 1a10 	vmov	r1, s0
 800e66e:	ee10 6a90 	vmov	r6, s1
 800e672:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800e676:	0072      	lsls	r2, r6, #1
 800e678:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e67c:	b085      	sub	sp, #20
 800e67e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800e682:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800e686:	d256      	bcs.n	800e736 <powf+0xce>
 800e688:	4298      	cmp	r0, r3
 800e68a:	d256      	bcs.n	800e73a <powf+0xd2>
 800e68c:	2000      	movs	r0, #0
 800e68e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800e692:	4ea3      	ldr	r6, [pc, #652]	; (800e920 <powf+0x2b8>)
 800e694:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e698:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800e69c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800e6a0:	0dd2      	lsrs	r2, r2, #23
 800e6a2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800e6a6:	05d2      	lsls	r2, r2, #23
 800e6a8:	1a8b      	subs	r3, r1, r2
 800e6aa:	ed97 5b00 	vldr	d5, [r7]
 800e6ae:	ee07 3a90 	vmov	s15, r3
 800e6b2:	15d2      	asrs	r2, r2, #23
 800e6b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e6b8:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e6bc:	ed97 5b02 	vldr	d5, [r7, #8]
 800e6c0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800e6c4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800e6c8:	ee07 2a90 	vmov	s15, r2
 800e6cc:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800e6d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e6d4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e6d8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800e6dc:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800e6e0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800e6e4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800e6e8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e6ec:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800e6f0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800e6f4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e6f8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800e6fc:	eea5 7b01 	vfma.f64	d7, d5, d1
 800e700:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e704:	ee10 1a90 	vmov	r1, s1
 800e708:	2300      	movs	r3, #0
 800e70a:	2700      	movs	r7, #0
 800e70c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800e710:	f248 06be 	movw	r6, #32958	; 0x80be
 800e714:	429f      	cmp	r7, r3
 800e716:	bf08      	it	eq
 800e718:	4296      	cmpeq	r6, r2
 800e71a:	f080 80b1 	bcs.w	800e880 <powf+0x218>
 800e71e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800e900 <powf+0x298>
 800e722:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72a:	dd79      	ble.n	800e820 <powf+0x1b8>
 800e72c:	b005      	add	sp, #20
 800e72e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e732:	f000 b91f 	b.w	800e974 <__math_oflowf>
 800e736:	4298      	cmp	r0, r3
 800e738:	d32d      	bcc.n	800e796 <powf+0x12e>
 800e73a:	b952      	cbnz	r2, 800e752 <powf+0xea>
 800e73c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800e740:	005b      	lsls	r3, r3, #1
 800e742:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800e746:	f240 80cd 	bls.w	800e8e4 <powf+0x27c>
 800e74a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800e74e:	b005      	add	sp, #20
 800e750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e752:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800e756:	d105      	bne.n	800e764 <powf+0xfc>
 800e758:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800e75c:	0076      	lsls	r6, r6, #1
 800e75e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800e762:	e7f0      	b.n	800e746 <powf+0xde>
 800e764:	004b      	lsls	r3, r1, #1
 800e766:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800e76a:	d8ee      	bhi.n	800e74a <powf+0xe2>
 800e76c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800e770:	d1eb      	bne.n	800e74a <powf+0xe2>
 800e772:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e776:	f000 80b5 	beq.w	800e8e4 <powf+0x27c>
 800e77a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e77e:	ea6f 0606 	mvn.w	r6, r6
 800e782:	bf34      	ite	cc
 800e784:	2300      	movcc	r3, #0
 800e786:	2301      	movcs	r3, #1
 800e788:	0ff6      	lsrs	r6, r6, #31
 800e78a:	42b3      	cmp	r3, r6
 800e78c:	f040 80ad 	bne.w	800e8ea <powf+0x282>
 800e790:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800e794:	e7db      	b.n	800e74e <powf+0xe6>
 800e796:	004f      	lsls	r7, r1, #1
 800e798:	1e7a      	subs	r2, r7, #1
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d31c      	bcc.n	800e7d8 <powf+0x170>
 800e79e:	2900      	cmp	r1, #0
 800e7a0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e7a4:	da0f      	bge.n	800e7c6 <powf+0x15e>
 800e7a6:	ee10 0a90 	vmov	r0, s1
 800e7aa:	f7ff ff45 	bl	800e638 <checkint>
 800e7ae:	2801      	cmp	r0, #1
 800e7b0:	d109      	bne.n	800e7c6 <powf+0x15e>
 800e7b2:	eeb1 0a40 	vneg.f32	s0, s0
 800e7b6:	b947      	cbnz	r7, 800e7ca <powf+0x162>
 800e7b8:	2e00      	cmp	r6, #0
 800e7ba:	dac8      	bge.n	800e74e <powf+0xe6>
 800e7bc:	b005      	add	sp, #20
 800e7be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e7c2:	f000 b8dd 	b.w	800e980 <__math_divzerof>
 800e7c6:	2000      	movs	r0, #0
 800e7c8:	e7f5      	b.n	800e7b6 <powf+0x14e>
 800e7ca:	2e00      	cmp	r6, #0
 800e7cc:	dabf      	bge.n	800e74e <powf+0xe6>
 800e7ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e7d2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800e7d6:	e7ba      	b.n	800e74e <powf+0xe6>
 800e7d8:	2900      	cmp	r1, #0
 800e7da:	da1f      	bge.n	800e81c <powf+0x1b4>
 800e7dc:	ee10 0a90 	vmov	r0, s1
 800e7e0:	f7ff ff2a 	bl	800e638 <checkint>
 800e7e4:	b920      	cbnz	r0, 800e7f0 <powf+0x188>
 800e7e6:	b005      	add	sp, #20
 800e7e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e7ec:	f000 b8d8 	b.w	800e9a0 <__math_invalidf>
 800e7f0:	2801      	cmp	r0, #1
 800e7f2:	bf14      	ite	ne
 800e7f4:	2000      	movne	r0, #0
 800e7f6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800e7fa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e7fe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800e802:	f4bf af44 	bcs.w	800e68e <powf+0x26>
 800e806:	eddf 7a47 	vldr	s15, [pc, #284]	; 800e924 <powf+0x2bc>
 800e80a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e80e:	ee10 3a10 	vmov	r3, s0
 800e812:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e816:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800e81a:	e738      	b.n	800e68e <powf+0x26>
 800e81c:	2000      	movs	r0, #0
 800e81e:	e7ee      	b.n	800e7fe <powf+0x196>
 800e820:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800e908 <powf+0x2a0>
 800e824:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e82c:	dd10      	ble.n	800e850 <powf+0x1e8>
 800e82e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800e832:	2800      	cmp	r0, #0
 800e834:	d15c      	bne.n	800e8f0 <powf+0x288>
 800e836:	9302      	str	r3, [sp, #8]
 800e838:	eddd 7a02 	vldr	s15, [sp, #8]
 800e83c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e840:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e844:	eef4 7a47 	vcmp.f32	s15, s14
 800e848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e84c:	f47f af6e 	bne.w	800e72c <powf+0xc4>
 800e850:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e910 <powf+0x2a8>
 800e854:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e85c:	d804      	bhi.n	800e868 <powf+0x200>
 800e85e:	b005      	add	sp, #20
 800e860:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e864:	f000 b87a 	b.w	800e95c <__math_uflowf>
 800e868:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800e918 <powf+0x2b0>
 800e86c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e874:	d504      	bpl.n	800e880 <powf+0x218>
 800e876:	b005      	add	sp, #20
 800e878:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e87c:	f000 b874 	b.w	800e968 <__math_may_uflowf>
 800e880:	4b29      	ldr	r3, [pc, #164]	; (800e928 <powf+0x2c0>)
 800e882:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800e886:	ee30 6b07 	vadd.f64	d6, d0, d7
 800e88a:	ed8d 6b00 	vstr	d6, [sp]
 800e88e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e892:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e896:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e89a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e89e:	f006 011f 	and.w	r1, r6, #31
 800e8a2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e8a6:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800e8aa:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800e8ae:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800e8b2:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800e8b6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e8ba:	ee27 5b07 	vmul.f64	d5, d7, d7
 800e8be:	1836      	adds	r6, r6, r0
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	eb13 040c 	adds.w	r4, r3, ip
 800e8c6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800e8ca:	eb41 050e 	adc.w	r5, r1, lr
 800e8ce:	eea7 0b04 	vfma.f64	d0, d7, d4
 800e8d2:	ec45 4b17 	vmov	d7, r4, r5
 800e8d6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800e8da:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e8de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e8e2:	e734      	b.n	800e74e <powf+0xe6>
 800e8e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e8e8:	e731      	b.n	800e74e <powf+0xe6>
 800e8ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e92c <powf+0x2c4>
 800e8ee:	e72e      	b.n	800e74e <powf+0xe6>
 800e8f0:	9303      	str	r3, [sp, #12]
 800e8f2:	eddd 7a03 	vldr	s15, [sp, #12]
 800e8f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e8fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8fe:	e7a1      	b.n	800e844 <powf+0x1dc>
 800e900:	ffd1d571 	.word	0xffd1d571
 800e904:	405fffff 	.word	0x405fffff
 800e908:	ffa3aae2 	.word	0xffa3aae2
 800e90c:	405fffff 	.word	0x405fffff
 800e910:	00000000 	.word	0x00000000
 800e914:	c062c000 	.word	0xc062c000
 800e918:	00000000 	.word	0x00000000
 800e91c:	c062a000 	.word	0xc062a000
 800e920:	0800ead8 	.word	0x0800ead8
 800e924:	4b000000 	.word	0x4b000000
 800e928:	0800ec00 	.word	0x0800ec00
 800e92c:	00000000 	.word	0x00000000

0800e930 <with_errnof>:
 800e930:	b513      	push	{r0, r1, r4, lr}
 800e932:	4604      	mov	r4, r0
 800e934:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e938:	f7ff fe4c 	bl	800e5d4 <__errno>
 800e93c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e940:	6004      	str	r4, [r0, #0]
 800e942:	b002      	add	sp, #8
 800e944:	bd10      	pop	{r4, pc}

0800e946 <xflowf>:
 800e946:	b130      	cbz	r0, 800e956 <xflowf+0x10>
 800e948:	eef1 7a40 	vneg.f32	s15, s0
 800e94c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e950:	2022      	movs	r0, #34	; 0x22
 800e952:	f7ff bfed 	b.w	800e930 <with_errnof>
 800e956:	eef0 7a40 	vmov.f32	s15, s0
 800e95a:	e7f7      	b.n	800e94c <xflowf+0x6>

0800e95c <__math_uflowf>:
 800e95c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e964 <__math_uflowf+0x8>
 800e960:	f7ff bff1 	b.w	800e946 <xflowf>
 800e964:	10000000 	.word	0x10000000

0800e968 <__math_may_uflowf>:
 800e968:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e970 <__math_may_uflowf+0x8>
 800e96c:	f7ff bfeb 	b.w	800e946 <xflowf>
 800e970:	1a200000 	.word	0x1a200000

0800e974 <__math_oflowf>:
 800e974:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e97c <__math_oflowf+0x8>
 800e978:	f7ff bfe5 	b.w	800e946 <xflowf>
 800e97c:	70000000 	.word	0x70000000

0800e980 <__math_divzerof>:
 800e980:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e984:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800e988:	2800      	cmp	r0, #0
 800e98a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800e98e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800e99c <__math_divzerof+0x1c>
 800e992:	2022      	movs	r0, #34	; 0x22
 800e994:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800e998:	f7ff bfca 	b.w	800e930 <with_errnof>
 800e99c:	00000000 	.word	0x00000000

0800e9a0 <__math_invalidf>:
 800e9a0:	eef0 7a40 	vmov.f32	s15, s0
 800e9a4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e9a8:	eef4 7a67 	vcmp.f32	s15, s15
 800e9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800e9b4:	d602      	bvs.n	800e9bc <__math_invalidf+0x1c>
 800e9b6:	2021      	movs	r0, #33	; 0x21
 800e9b8:	f7ff bfba 	b.w	800e930 <with_errnof>
 800e9bc:	4770      	bx	lr
	...

0800e9c0 <_init>:
 800e9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c2:	bf00      	nop
 800e9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9c6:	bc08      	pop	{r3}
 800e9c8:	469e      	mov	lr, r3
 800e9ca:	4770      	bx	lr

0800e9cc <_fini>:
 800e9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ce:	bf00      	nop
 800e9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9d2:	bc08      	pop	{r3}
 800e9d4:	469e      	mov	lr, r3
 800e9d6:	4770      	bx	lr
